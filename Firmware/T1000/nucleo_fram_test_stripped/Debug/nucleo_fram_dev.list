
nucleo_fram_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009568  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f50  080096f8  080096f8  0000a6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a648  0800a648  0000c060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a648  0800a648  0000b648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a650  0800a650  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a650  0800a650  0000b650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a654  0800a654  0000b654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800a658  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000060  0800a6b8  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  0800a6b8  0000c1e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2ca  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000161c  00000000  00000000  0001735a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  00018978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a24  00000000  00000000  000194b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015488  00000000  00000000  00019ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009089  00000000  00000000  0002f35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071a59  00000000  00000000  000383e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000045  00000000  00000000  000a9e3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a20  00000000  00000000  000a9e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000017f  00000000  00000000  000ad8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <deregister_tm_clones>:
 8000240:	4803      	ldr	r0, [pc, #12]	@ (8000250 <deregister_tm_clones+0x10>)
 8000242:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <deregister_tm_clones+0x14>)
 8000244:	4283      	cmp	r3, r0
 8000246:	d002      	beq.n	800024e <deregister_tm_clones+0xe>
 8000248:	4b03      	ldr	r3, [pc, #12]	@ (8000258 <deregister_tm_clones+0x18>)
 800024a:	b103      	cbz	r3, 800024e <deregister_tm_clones+0xe>
 800024c:	4718      	bx	r3
 800024e:	4770      	bx	lr
 8000250:	20000060 	.word	0x20000060
 8000254:	20000060 	.word	0x20000060
 8000258:	00000000 	.word	0x00000000

0800025c <register_tm_clones>:
 800025c:	4805      	ldr	r0, [pc, #20]	@ (8000274 <register_tm_clones+0x18>)
 800025e:	4b06      	ldr	r3, [pc, #24]	@ (8000278 <register_tm_clones+0x1c>)
 8000260:	1a1b      	subs	r3, r3, r0
 8000262:	0fd9      	lsrs	r1, r3, #31
 8000264:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000268:	1049      	asrs	r1, r1, #1
 800026a:	d002      	beq.n	8000272 <register_tm_clones+0x16>
 800026c:	4b03      	ldr	r3, [pc, #12]	@ (800027c <register_tm_clones+0x20>)
 800026e:	b103      	cbz	r3, 8000272 <register_tm_clones+0x16>
 8000270:	4718      	bx	r3
 8000272:	4770      	bx	lr
 8000274:	20000060 	.word	0x20000060
 8000278:	20000060 	.word	0x20000060
 800027c:	00000000 	.word	0x00000000

08000280 <__do_global_dtors_aux>:
 8000280:	b510      	push	{r4, lr}
 8000282:	4c06      	ldr	r4, [pc, #24]	@ (800029c <__do_global_dtors_aux+0x1c>)
 8000284:	7823      	ldrb	r3, [r4, #0]
 8000286:	b943      	cbnz	r3, 800029a <__do_global_dtors_aux+0x1a>
 8000288:	f7ff ffda 	bl	8000240 <deregister_tm_clones>
 800028c:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <__do_global_dtors_aux+0x20>)
 800028e:	b113      	cbz	r3, 8000296 <__do_global_dtors_aux+0x16>
 8000290:	4804      	ldr	r0, [pc, #16]	@ (80002a4 <__do_global_dtors_aux+0x24>)
 8000292:	f3af 8000 	nop.w
 8000296:	2301      	movs	r3, #1
 8000298:	7023      	strb	r3, [r4, #0]
 800029a:	bd10      	pop	{r4, pc}
 800029c:	20000060 	.word	0x20000060
 80002a0:	00000000 	.word	0x00000000
 80002a4:	080096e0 	.word	0x080096e0

080002a8 <frame_dummy>:
 80002a8:	b508      	push	{r3, lr}
 80002aa:	4b05      	ldr	r3, [pc, #20]	@ (80002c0 <frame_dummy+0x18>)
 80002ac:	b11b      	cbz	r3, 80002b6 <frame_dummy+0xe>
 80002ae:	4905      	ldr	r1, [pc, #20]	@ (80002c4 <frame_dummy+0x1c>)
 80002b0:	4805      	ldr	r0, [pc, #20]	@ (80002c8 <frame_dummy+0x20>)
 80002b2:	f3af 8000 	nop.w
 80002b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80002ba:	f7ff bfcf 	b.w	800025c <register_tm_clones>
 80002be:	bf00      	nop
 80002c0:	00000000 	.word	0x00000000
 80002c4:	20000064 	.word	0x20000064
 80002c8:	080096e0 	.word	0x080096e0

080002cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b085      	sub	sp, #20
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f003 0307 	and.w	r3, r3, #7
 80002da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000310 <__NVIC_SetPriorityGrouping+0x44>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002e2:	68ba      	ldr	r2, [r7, #8]
 80002e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80002e8:	4013      	ands	r3, r2
 80002ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80002f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002fe:	4a04      	ldr	r2, [pc, #16]	@ (8000310 <__NVIC_SetPriorityGrouping+0x44>)
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	60d3      	str	r3, [r2, #12]
}
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000318:	4b04      	ldr	r3, [pc, #16]	@ (800032c <__NVIC_GetPriorityGrouping+0x18>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	0a1b      	lsrs	r3, r3, #8
 800031e:	f003 0307 	and.w	r3, r3, #7
}
 8000322:	4618      	mov	r0, r3
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	6039      	str	r1, [r7, #0]
 800033a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800033c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000340:	2b00      	cmp	r3, #0
 8000342:	db0a      	blt.n	800035a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	b2da      	uxtb	r2, r3
 8000348:	490c      	ldr	r1, [pc, #48]	@ (800037c <__NVIC_SetPriority+0x4c>)
 800034a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034e:	0112      	lsls	r2, r2, #4
 8000350:	b2d2      	uxtb	r2, r2
 8000352:	440b      	add	r3, r1
 8000354:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000358:	e00a      	b.n	8000370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	b2da      	uxtb	r2, r3
 800035e:	4908      	ldr	r1, [pc, #32]	@ (8000380 <__NVIC_SetPriority+0x50>)
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	f003 030f 	and.w	r3, r3, #15
 8000366:	3b04      	subs	r3, #4
 8000368:	0112      	lsls	r2, r2, #4
 800036a:	b2d2      	uxtb	r2, r2
 800036c:	440b      	add	r3, r1
 800036e:	761a      	strb	r2, [r3, #24]
}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	e000e100 	.word	0xe000e100
 8000380:	e000ed00 	.word	0xe000ed00

08000384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000384:	b480      	push	{r7}
 8000386:	b089      	sub	sp, #36	@ 0x24
 8000388:	af00      	add	r7, sp, #0
 800038a:	60f8      	str	r0, [r7, #12]
 800038c:	60b9      	str	r1, [r7, #8]
 800038e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	f003 0307 	and.w	r3, r3, #7
 8000396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000398:	69fb      	ldr	r3, [r7, #28]
 800039a:	f1c3 0307 	rsb	r3, r3, #7
 800039e:	2b04      	cmp	r3, #4
 80003a0:	bf28      	it	cs
 80003a2:	2304      	movcs	r3, #4
 80003a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	3304      	adds	r3, #4
 80003aa:	2b06      	cmp	r3, #6
 80003ac:	d902      	bls.n	80003b4 <NVIC_EncodePriority+0x30>
 80003ae:	69fb      	ldr	r3, [r7, #28]
 80003b0:	3b03      	subs	r3, #3
 80003b2:	e000      	b.n	80003b6 <NVIC_EncodePriority+0x32>
 80003b4:	2300      	movs	r3, #0
 80003b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80003bc:	69bb      	ldr	r3, [r7, #24]
 80003be:	fa02 f303 	lsl.w	r3, r2, r3
 80003c2:	43da      	mvns	r2, r3
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	401a      	ands	r2, r3
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	fa01 f303 	lsl.w	r3, r1, r3
 80003d6:	43d9      	mvns	r1, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003dc:	4313      	orrs	r3, r2
         );
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3724      	adds	r7, #36	@ 0x24
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
	...

080003ec <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80003f4:	4b08      	ldr	r3, [pc, #32]	@ (8000418 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80003f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80003f8:	4907      	ldr	r1, [pc, #28]	@ (8000418 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4313      	orrs	r3, r2
 80003fe:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000400:	4b05      	ldr	r3, [pc, #20]	@ (8000418 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000402:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4013      	ands	r3, r2
 8000408:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800040a:	68fb      	ldr	r3, [r7, #12]
}
 800040c:	bf00      	nop
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	40021000 	.word	0x40021000

0800041c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000424:	4b08      	ldr	r3, [pc, #32]	@ (8000448 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000426:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000428:	4907      	ldr	r1, [pc, #28]	@ (8000448 <LL_APB1_GRP1_EnableClock+0x2c>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4313      	orrs	r3, r2
 800042e:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000430:	4b05      	ldr	r3, [pc, #20]	@ (8000448 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000432:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4013      	ands	r3, r2
 8000438:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800043a:	68fb      	ldr	r3, [r7, #12]
}
 800043c:	bf00      	nop
 800043e:	3714      	adds	r7, #20
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000

0800044c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000454:	4b08      	ldr	r3, [pc, #32]	@ (8000478 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000456:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000458:	4907      	ldr	r1, [pc, #28]	@ (8000478 <LL_APB2_GRP1_EnableClock+0x2c>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4313      	orrs	r3, r2
 800045e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000460:	4b05      	ldr	r3, [pc, #20]	@ (8000478 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000462:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4013      	ands	r3, r2
 8000468:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800046a:	68fb      	ldr	r3, [r7, #12]
}
 800046c:	bf00      	nop
 800046e:	3714      	adds	r7, #20
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000

0800047c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	683a      	ldr	r2, [r7, #0]
 800048a:	619a      	str	r2, [r3, #24]
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	683a      	ldr	r2, [r7, #0]
 80004a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr

080004b4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80004c4:	4904      	ldr	r1, [pc, #16]	@ (80004d8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4313      	orrs	r3, r2
 80004ca:	600b      	str	r3, [r1, #0]
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	40007000 	.word	0x40007000

080004dc <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 80004e0:	4b07      	ldr	r3, [pc, #28]	@ (8000500 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80004e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80004ec:	d101      	bne.n	80004f2 <LL_PWR_IsActiveFlag_VOS+0x16>
 80004ee:	2301      	movs	r3, #1
 80004f0:	e000      	b.n	80004f4 <LL_PWR_IsActiveFlag_VOS+0x18>
 80004f2:	2300      	movs	r3, #0
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40007000 	.word	0x40007000

08000504 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000508:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <LL_RCC_MSI_Enable+0x1c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a04      	ldr	r2, [pc, #16]	@ (8000520 <LL_RCC_MSI_Enable+0x1c>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	6013      	str	r3, [r2, #0]
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000

08000524 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <LL_RCC_MSI_IsReady+0x20>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f003 0302 	and.w	r3, r3, #2
 8000530:	2b02      	cmp	r3, #2
 8000532:	d101      	bne.n	8000538 <LL_RCC_MSI_IsReady+0x14>
 8000534:	2301      	movs	r3, #1
 8000536:	e000      	b.n	800053a <LL_RCC_MSI_IsReady+0x16>
 8000538:	2300      	movs	r3, #0
}
 800053a:	4618      	mov	r0, r3
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	40021000 	.word	0x40021000

08000548 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 800054c:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a04      	ldr	r2, [pc, #16]	@ (8000564 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8000552:	f043 0308 	orr.w	r3, r3, #8
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000

08000568 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000570:	4b06      	ldr	r3, [pc, #24]	@ (800058c <LL_RCC_MSI_SetRange+0x24>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000578:	4904      	ldr	r1, [pc, #16]	@ (800058c <LL_RCC_MSI_SetRange+0x24>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4313      	orrs	r3, r2
 800057e:	600b      	str	r3, [r1, #0]
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	40021000 	.word	0x40021000

08000590 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000598:	4b07      	ldr	r3, [pc, #28]	@ (80005b8 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	4904      	ldr	r1, [pc, #16]	@ (80005b8 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80005a6:	4313      	orrs	r3, r2
 80005a8:	604b      	str	r3, [r1, #4]
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000

080005bc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80005c4:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <LL_RCC_SetSysClkSource+0x24>)
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	f023 0203 	bic.w	r2, r3, #3
 80005cc:	4904      	ldr	r1, [pc, #16]	@ (80005e0 <LL_RCC_SetSysClkSource+0x24>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	608b      	str	r3, [r1, #8]
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	40021000 	.word	0x40021000

080005e4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80005e8:	4b04      	ldr	r3, [pc, #16]	@ (80005fc <LL_RCC_GetSysClkSource+0x18>)
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	f003 030c 	and.w	r3, r3, #12
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000

08000600 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <LL_RCC_SetAHBPrescaler+0x24>)
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000610:	4904      	ldr	r1, [pc, #16]	@ (8000624 <LL_RCC_SetAHBPrescaler+0x24>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4313      	orrs	r3, r2
 8000616:	608b      	str	r3, [r1, #8]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	40021000 	.word	0x40021000

08000628 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000630:	4b06      	ldr	r3, [pc, #24]	@ (800064c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000638:	4904      	ldr	r1, [pc, #16]	@ (800064c <LL_RCC_SetAPB1Prescaler+0x24>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4313      	orrs	r3, r2
 800063e:	608b      	str	r3, [r1, #8]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	40021000 	.word	0x40021000

08000650 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <LL_RCC_SetAPB2Prescaler+0x24>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000660:	4904      	ldr	r1, [pc, #16]	@ (8000674 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4313      	orrs	r3, r2
 8000666:	608b      	str	r3, [r1, #8]
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	40021000 	.word	0x40021000

08000678 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	601a      	str	r2, [r3, #0]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	f023 0210 	bic.w	r2, r3, #16
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	431a      	orrs	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	605a      	str	r2, [r3, #4]
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	f043 0208 	orr.w	r2, r3, #8
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	605a      	str	r2, [r3, #4]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 80006de:	b480      	push	{r7}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d101      	bne.n	80006f6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80006f2:	2301      	movs	r3, #1
 80006f4:	e000      	b.n	80006f8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	f003 0302 	and.w	r3, r3, #2
 8000714:	2b02      	cmp	r3, #2
 8000716:	d101      	bne.n	800071c <LL_SPI_IsActiveFlag_TXE+0x18>
 8000718:	2301      	movs	r3, #1
 800071a:	e000      	b.n	800071e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	330c      	adds	r3, #12
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b2db      	uxtb	r3, r3
}
 800073a:	4618      	mov	r0, r3
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000746:	b480      	push	{r7}
 8000748:	b085      	sub	sp, #20
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
 800074e:	460b      	mov	r3, r1
 8000750:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	330c      	adds	r3, #12
 8000756:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	78fa      	ldrb	r2, [r7, #3]
 800075c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800075e:	bf00      	nop
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
	...

0800076c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <LL_FLASH_SetLatency+0x24>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f023 0207 	bic.w	r2, r3, #7
 800077c:	4904      	ldr	r1, [pc, #16]	@ (8000790 <LL_FLASH_SetLatency+0x24>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4313      	orrs	r3, r2
 8000782:	600b      	str	r3, [r1, #0]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	40022000 	.word	0x40022000

08000794 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000798:	4b04      	ldr	r3, [pc, #16]	@ (80007ac <LL_FLASH_GetLatency+0x18>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f003 0307 	and.w	r3, r3, #7
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40022000 	.word	0x40022000

080007b0 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI2_Init(void);
static uint8_t SPI_TxRx(SPI_TypeDef *spix, uint8_t data);

int main(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b0d4      	sub	sp, #336	@ 0x150
 80007b4:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the
   * Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80007b6:	2001      	movs	r0, #1
 80007b8:	f7ff fe48 	bl	800044c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80007bc:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80007c0:	f7ff fe2c 	bl	800041c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f7ff fd81 	bl	80002cc <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn,
 80007ca:	f7ff fda3 	bl	8000314 <__NVIC_GetPriorityGrouping>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2200      	movs	r2, #0
 80007d2:	210f      	movs	r1, #15
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fdd5 	bl	8000384 <NVIC_EncodePriority>
 80007da:	4603      	mov	r3, r0
 80007dc:	4619      	mov	r1, r3
 80007de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007e2:	f7ff fda5 	bl	8000330 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 15, 0));

  /* Configure the system clock */
  SystemClock_Config();
 80007e6:	f000 f8ff 	bl	80009e8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ea:	f000 f999 	bl	8000b20 <MX_GPIO_Init>
  MX_SPI2_Init();
 80007ee:	f000 f93d 	bl	8000a6c <MX_SPI2_Init>

  // verify FRAM basic functionality
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 80007f2:	2140      	movs	r1, #64	@ 0x40
 80007f4:	4872      	ldr	r0, [pc, #456]	@ (80009c0 <main+0x210>)
 80007f6:	f7ff fe41 	bl	800047c <LL_GPIO_SetOutputPin>
  fram_init(&memory, SPI2, 0, 0, 0, 0);
 80007fa:	2300      	movs	r3, #0
 80007fc:	9301      	str	r3, [sp, #4]
 80007fe:	2300      	movs	r3, #0
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	2300      	movs	r3, #0
 8000804:	2200      	movs	r2, #0
 8000806:	496f      	ldr	r1, [pc, #444]	@ (80009c4 <main+0x214>)
 8000808:	486f      	ldr	r0, [pc, #444]	@ (80009c8 <main+0x218>)
 800080a:	f000 fdd9 	bl	80013c0 <fram_init>

  char buf[12] = "hello world";
 800080e:	4a6f      	ldr	r2, [pc, #444]	@ (80009cc <main+0x21c>)
 8000810:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000814:	ca07      	ldmia	r2, {r0, r1, r2}
 8000816:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  char rbuf[12] = {0};
 800081a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]

  fram_read(&memory, SPI2, 0x69, (uint8_t *)rbuf, 12);
 8000826:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800082a:	220c      	movs	r2, #12
 800082c:	9200      	str	r2, [sp, #0]
 800082e:	2269      	movs	r2, #105	@ 0x69
 8000830:	4964      	ldr	r1, [pc, #400]	@ (80009c4 <main+0x214>)
 8000832:	4865      	ldr	r0, [pc, #404]	@ (80009c8 <main+0x218>)
 8000834:	f000 fe78 	bl	8001528 <fram_read>
  fram_write(&memory, SPI2, 0x69, (uint8_t *)buf, 12);
 8000838:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800083c:	220c      	movs	r2, #12
 800083e:	9200      	str	r2, [sp, #0]
 8000840:	2269      	movs	r2, #105	@ 0x69
 8000842:	4960      	ldr	r1, [pc, #384]	@ (80009c4 <main+0x214>)
 8000844:	4860      	ldr	r0, [pc, #384]	@ (80009c8 <main+0x218>)
 8000846:	f000 fe2d 	bl	80014a4 <fram_write>
  fram_read(&memory, SPI2, 0x69, (uint8_t *)rbuf, 12);
 800084a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800084e:	220c      	movs	r2, #12
 8000850:	9200      	str	r2, [sp, #0]
 8000852:	2269      	movs	r2, #105	@ 0x69
 8000854:	495b      	ldr	r1, [pc, #364]	@ (80009c4 <main+0x214>)
 8000856:	485c      	ldr	r0, [pc, #368]	@ (80009c8 <main+0x218>)
 8000858:	f000 fe66 	bl	8001528 <fram_read>
  //	 variables used by the filesystem
  lfs_t lfs;
  lfs_file_t file;

  // configuration of the filesystem is provided by this struct
  const struct lfs_config cfg = {
 800085c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000860:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000864:	4618      	mov	r0, r3
 8000866:	2354      	movs	r3, #84	@ 0x54
 8000868:	461a      	mov	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	f008 f8f2 	bl	8008a54 <memset>
 8000870:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000874:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000878:	4a55      	ldr	r2, [pc, #340]	@ (80009d0 <main+0x220>)
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000880:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000884:	4a53      	ldr	r2, [pc, #332]	@ (80009d4 <main+0x224>)
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800088c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000890:	4a51      	ldr	r2, [pc, #324]	@ (80009d8 <main+0x228>)
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000898:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800089c:	4a4f      	ldr	r2, [pc, #316]	@ (80009dc <main+0x22c>)
 800089e:	611a      	str	r2, [r3, #16]
 80008a0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008a4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80008a8:	2201      	movs	r2, #1
 80008aa:	615a      	str	r2, [r3, #20]
 80008ac:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008b0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80008b4:	2201      	movs	r2, #1
 80008b6:	619a      	str	r2, [r3, #24]
 80008b8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008bc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80008c0:	2280      	movs	r2, #128	@ 0x80
 80008c2:	61da      	str	r2, [r3, #28]
 80008c4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008c8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80008cc:	2240      	movs	r2, #64	@ 0x40
 80008ce:	621a      	str	r2, [r3, #32]
 80008d0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008d4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80008d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80008de:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008e2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80008e6:	2201      	movs	r2, #1
 80008e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80008ea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008ee:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80008f2:	2210      	movs	r2, #16
 80008f4:	62da      	str	r2, [r3, #44]	@ 0x2c
      .lookahead_size = 16,
      .block_cycles = -1,
  };

  // mount the filesystem
  int err = lfs_mount(&lfs, &cfg);
 80008f6:	1d3a      	adds	r2, r7, #4
 80008f8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f007 fd98 	bl	8008434 <lfs_mount>
 8000904:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144

  // reformat if we can't mount the filesystem
  // this should only happen on the first boot
  if (err) {
 8000908:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00d      	beq.n	800092c <main+0x17c>
    lfs_format(&lfs, &cfg);
 8000910:	1d3a      	adds	r2, r7, #4
 8000912:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f007 fd75 	bl	8008408 <lfs_format>
    lfs_mount(&lfs, &cfg);
 800091e:	1d3a      	adds	r2, r7, #4
 8000920:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f007 fd84 	bl	8008434 <lfs_mount>
  }

  // read current count
  uint32_t boot_count = 0;
 800092c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000930:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
  lfs_file_open(&lfs, &file, "boot_count", LFS_O_RDWR | LFS_O_CREAT);
 8000938:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800093c:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8000940:	f240 1303 	movw	r3, #259	@ 0x103
 8000944:	4a26      	ldr	r2, [pc, #152]	@ (80009e0 <main+0x230>)
 8000946:	f007 fd9f 	bl	8008488 <lfs_file_open>
  lfs_file_read(&lfs, &file, &boot_count, sizeof(boot_count));
 800094a:	463a      	mov	r2, r7
 800094c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000950:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8000954:	2304      	movs	r3, #4
 8000956:	f007 fdf7 	bl	8008548 <lfs_file_read>

  // update boot count
  boot_count += 1;
 800095a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800095e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	1c5a      	adds	r2, r3, #1
 8000966:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800096a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800096e:	601a      	str	r2, [r3, #0]
  lfs_file_rewind(&lfs, &file);
 8000970:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8000974:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000978:	4611      	mov	r1, r2
 800097a:	4618      	mov	r0, r3
 800097c:	f007 fe44 	bl	8008608 <lfs_file_rewind>
  lfs_file_write(&lfs, &file, &boot_count, sizeof(boot_count));
 8000980:	463a      	mov	r2, r7
 8000982:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000986:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 800098a:	2304      	movs	r3, #4
 800098c:	f007 fe0c 	bl	80085a8 <lfs_file_write>

  // remember the storage is not updated until the file is closed successfully
  lfs_file_close(&lfs, &file);
 8000990:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8000994:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000998:	4611      	mov	r1, r2
 800099a:	4618      	mov	r0, r3
 800099c:	f007 fda8 	bl	80084f0 <lfs_file_close>

  // release any resources we were using
  lfs_unmount(&lfs);
 80009a0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80009a4:	4618      	mov	r0, r3
 80009a6:	f007 fd5b 	bl	8008460 <lfs_unmount>

  // print the boot count
  printf("boot_count: %d\n", boot_count);
 80009aa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80009ae:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	480b      	ldr	r0, [pc, #44]	@ (80009e4 <main+0x234>)
 80009b8:	f008 f82a 	bl	8008a10 <iprintf>

  while (1) {
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <main+0x20c>
 80009c0:	48000400 	.word	0x48000400
 80009c4:	40003800 	.word	0x40003800
 80009c8:	2000007c 	.word	0x2000007c
 80009cc:	08009714 	.word	0x08009714
 80009d0:	080015a5 	.word	0x080015a5
 80009d4:	0800165d 	.word	0x0800165d
 80009d8:	08001715 	.word	0x08001715
 80009dc:	08001785 	.word	0x08001785
 80009e0:	080096f8 	.word	0x080096f8
 80009e4:	08009704 	.word	0x08009704

080009e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80009ec:	2000      	movs	r0, #0
 80009ee:	f7ff febd 	bl	800076c <LL_FLASH_SetLatency>
  while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0) {
 80009f2:	bf00      	nop
 80009f4:	f7ff fece 	bl	8000794 <LL_FLASH_GetLatency>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1fa      	bne.n	80009f4 <SystemClock_Config+0xc>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80009fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a02:	f7ff fd57 	bl	80004b4 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0) {
 8000a06:	bf00      	nop
 8000a08:	f7ff fd68 	bl	80004dc <LL_PWR_IsActiveFlag_VOS>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1fa      	bne.n	8000a08 <SystemClock_Config+0x20>
  }
  LL_RCC_MSI_Enable();
 8000a12:	f7ff fd77 	bl	8000504 <LL_RCC_MSI_Enable>

  /* Wait till MSI is ready */
  while (LL_RCC_MSI_IsReady() != 1) {
 8000a16:	bf00      	nop
 8000a18:	f7ff fd84 	bl	8000524 <LL_RCC_MSI_IsReady>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d1fa      	bne.n	8000a18 <SystemClock_Config+0x30>
  }
  LL_RCC_MSI_EnableRangeSelection();
 8000a22:	f7ff fd91 	bl	8000548 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8000a26:	2060      	movs	r0, #96	@ 0x60
 8000a28:	f7ff fd9e 	bl	8000568 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff fdaf 	bl	8000590 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff fdc2 	bl	80005bc <LL_RCC_SetSysClkSource>

  /* Wait till System clock is ready */
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI) {
 8000a38:	bf00      	nop
 8000a3a:	f7ff fdd3 	bl	80005e4 <LL_RCC_GetSysClkSource>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d1fa      	bne.n	8000a3a <SystemClock_Config+0x52>
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a44:	2000      	movs	r0, #0
 8000a46:	f7ff fddb 	bl	8000600 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f7ff fdec 	bl	8000628 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000a50:	2000      	movs	r0, #0
 8000a52:	f7ff fdfd 	bl	8000650 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(4000000);
 8000a56:	4804      	ldr	r0, [pc, #16]	@ (8000a68 <SystemClock_Config+0x80>)
 8000a58:	f000 fc78 	bl	800134c <LL_Init1msTick>

  LL_SetSystemCoreClock(4000000);
 8000a5c:	4802      	ldr	r0, [pc, #8]	@ (8000a68 <SystemClock_Config+0x80>)
 8000a5e:	f000 fc83 	bl	8001368 <LL_SetSystemCoreClock>
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	003d0900 	.word	0x003d0900

08000a6c <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b090      	sub	sp, #64	@ 0x40
 8000a70:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000a72:	f107 0318 	add.w	r3, r7, #24
 8000a76:	2228      	movs	r2, #40	@ 0x28
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f007 ffea 	bl	8008a54 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	463b      	mov	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
 8000a8e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8000a90:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000a94:	f7ff fcc2 	bl	800041c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000a98:	2002      	movs	r0, #2
 8000a9a:	f7ff fca7 	bl	80003ec <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13 | LL_GPIO_PIN_14 | LL_GPIO_PIN_15;
 8000a9e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000aa2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000ab4:	2305      	movs	r3, #5
 8000ab6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	463b      	mov	r3, r7
 8000aba:	4619      	mov	r1, r3
 8000abc:	4816      	ldr	r0, [pc, #88]	@ (8000b18 <MX_SPI2_Init+0xac>)
 8000abe:	f000 fb2f 	bl	8001120 <LL_GPIO_Init>

  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000ac6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000aca:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000acc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000ad0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000ada:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8000ae0:	2308      	movs	r3, #8
 8000ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 8000aec:	2307      	movs	r3, #7
 8000aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8000af0:	f107 0318 	add.w	r3, r7, #24
 8000af4:	4619      	mov	r1, r3
 8000af6:	4809      	ldr	r0, [pc, #36]	@ (8000b1c <MX_SPI2_Init+0xb0>)
 8000af8:	f000 fbb6 	bl	8001268 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8000afc:	2100      	movs	r1, #0
 8000afe:	4807      	ldr	r0, [pc, #28]	@ (8000b1c <MX_SPI2_Init+0xb0>)
 8000b00:	f7ff fdca 	bl	8000698 <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI2);
 8000b04:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <MX_SPI2_Init+0xb0>)
 8000b06:	f7ff fdda 	bl	80006be <LL_SPI_EnableNSSPulseMgt>

  LL_SPI_Enable(SPI2);
 8000b0a:	4804      	ldr	r0, [pc, #16]	@ (8000b1c <MX_SPI2_Init+0xb0>)
 8000b0c:	f7ff fdb4 	bl	8000678 <LL_SPI_Enable>
}
 8000b10:	bf00      	nop
 8000b12:	3740      	adds	r7, #64	@ 0x40
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	48000400 	.word	0x48000400
 8000b1c:	40003800 	.word	0x40003800

08000b20 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	463b      	mov	r3, r7
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
 8000b34:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000b36:	2002      	movs	r0, #2
 8000b38:	f7ff fc58 	bl	80003ec <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8000b3c:	2140      	movs	r1, #64	@ 0x40
 8000b3e:	480b      	ldr	r0, [pc, #44]	@ (8000b6c <MX_GPIO_Init+0x4c>)
 8000b40:	f7ff fcaa 	bl	8000498 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000b44:	2340      	movs	r3, #64	@ 0x40
 8000b46:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b54:	2300      	movs	r3, #0
 8000b56:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	463b      	mov	r3, r7
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4803      	ldr	r0, [pc, #12]	@ (8000b6c <MX_GPIO_Init+0x4c>)
 8000b5e:	f000 fadf 	bl	8001120 <LL_GPIO_Init>
}
 8000b62:	bf00      	nop
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	48000400 	.word	0x48000400

08000b70 <spi_read>:
     file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void spi_read(SPI_TypeDef *spix, uint8_t *const buf, uint32_t num_bytes) {
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b087      	sub	sp, #28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < num_bytes; i++) {
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	e00b      	b.n	8000b9a <spi_read+0x2a>
    buf[i] = SPI_TxRx(spix, 0x00);
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	68ba      	ldr	r2, [r7, #8]
 8000b86:	18d4      	adds	r4, r2, r3
 8000b88:	2100      	movs	r1, #0
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f000 f82b 	bl	8000be6 <SPI_TxRx>
 8000b90:	4603      	mov	r3, r0
 8000b92:	7023      	strb	r3, [r4, #0]
  for (int i = 0; i < num_bytes; i++) {
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	3301      	adds	r3, #1
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d8ef      	bhi.n	8000b82 <spi_read+0x12>
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	371c      	adds	r7, #28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd90      	pop	{r4, r7, pc}

08000bac <spi_write>:

void spi_write(SPI_TypeDef *spix, const uint8_t *const buf,
               uint32_t num_bytes) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < num_bytes; i++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	e00a      	b.n	8000bd4 <spi_write+0x28>
    SPI_TxRx(spix, buf[i]);
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	68ba      	ldr	r2, [r7, #8]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f000 f80c 	bl	8000be6 <SPI_TxRx>
  for (int i = 0; i < num_bytes; i++)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d8f0      	bhi.n	8000bbe <spi_write+0x12>
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <SPI_TxRx>:

// Lifted and modified from https://github.com/eziya/STM32_LL_EXAMPLES
// is blocking
static uint8_t SPI_TxRx(SPI_TypeDef *spix, uint8_t data) {
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	460b      	mov	r3, r1
 8000bf0:	70fb      	strb	r3, [r7, #3]
  // transmit
  LL_SPI_TransmitData8(spix, data);
 8000bf2:	78fb      	ldrb	r3, [r7, #3]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff fda5 	bl	8000746 <LL_SPI_TransmitData8>
  while (!LL_SPI_IsActiveFlag_TXE(spix))
 8000bfc:	bf00      	nop
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff fd80 	bl	8000704 <LL_SPI_IsActiveFlag_TXE>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0f9      	beq.n	8000bfe <SPI_TxRx+0x18>
    ;

  // receive
  while (!LL_SPI_IsActiveFlag_RXNE(spix))
 8000c0a:	bf00      	nop
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fd66 	bl	80006de <LL_SPI_IsActiveFlag_RXNE>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d0f9      	beq.n	8000c0c <SPI_TxRx+0x26>
    ;
  return LL_SPI_ReceiveData8(spix);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff fd86 	bl	800072a <LL_SPI_ReceiveData8>
 8000c1e:	4603      	mov	r3, r0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <NMI_Handler+0x4>

08000c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <MemManage_Handler+0x4>

08000c40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return 1;
 8000c8c:	2301      	movs	r3, #1
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <_kill>:

int _kill(int pid, int sig)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ca2:	f007 ff1d 	bl	8008ae0 <__errno>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2216      	movs	r2, #22
 8000caa:	601a      	str	r2, [r3, #0]
  return -1;
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <_exit>:

void _exit (int status)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff ffe7 	bl	8000c98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cca:	bf00      	nop
 8000ccc:	e7fd      	b.n	8000cca <_exit+0x12>

08000cce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	60f8      	str	r0, [r7, #12]
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	e00a      	b.n	8000cf6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ce0:	f3af 8000 	nop.w
 8000ce4:	4601      	mov	r1, r0
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	1c5a      	adds	r2, r3, #1
 8000cea:	60ba      	str	r2, [r7, #8]
 8000cec:	b2ca      	uxtb	r2, r1
 8000cee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	dbf0      	blt.n	8000ce0 <_read+0x12>
  }

  return len;
 8000cfe:	687b      	ldr	r3, [r7, #4]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	e009      	b.n	8000d2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	1c5a      	adds	r2, r3, #1
 8000d1e:	60ba      	str	r2, [r7, #8]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	dbf1      	blt.n	8000d1a <_write+0x12>
  }
  return len;
 8000d36:	687b      	ldr	r3, [r7, #4]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <_close>:

int _close(int file)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d68:	605a      	str	r2, [r3, #4]
  return 0;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <_isatty>:

int _isatty(int file)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d80:	2301      	movs	r3, #1
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b085      	sub	sp, #20
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	@ (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f007 fe82 	bl	8008ae0 <__errno>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	220c      	movs	r2, #12
 8000de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a05      	ldr	r2, [pc, #20]	@ (8000e0c <_sbrk+0x64>)
 8000df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	2000a000 	.word	0x2000a000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	20000090 	.word	0x20000090
 8000e10:	200001e0 	.word	0x200001e0

08000e14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <SystemInit+0x20>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e1e:	4a05      	ldr	r2, [pc, #20]	@ (8000e34 <SystemInit+0x20>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e3c:	f7ff ffea 	bl	8000e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e40:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e42:	490d      	ldr	r1, [pc, #52]	@ (8000e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e44:	4a0d      	ldr	r2, [pc, #52]	@ (8000e7c <LoopForever+0xe>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e58:	4c0a      	ldr	r4, [pc, #40]	@ (8000e84 <LoopForever+0x16>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e66:	f007 fe41 	bl	8008aec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e6a:	f7ff fca1 	bl	80007b0 <main>

08000e6e <LoopForever>:

LoopForever:
    b LoopForever
 8000e6e:	e7fe      	b.n	8000e6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e70:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e7c:	0800a658 	.word	0x0800a658
  ldr r2, =_sbss
 8000e80:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e84:	200001e0 	.word	0x200001e0

08000e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC1_2_IRQHandler>

08000e8a <LL_GPIO_SetPinMode>:
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b08b      	sub	sp, #44	@ 0x2c
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	60f8      	str	r0, [r7, #12]
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	fa93 f3a3 	rbit	r3, r3
 8000ea4:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d101      	bne.n	8000eb4 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000eb0:	2320      	movs	r3, #32
 8000eb2:	e003      	b.n	8000ebc <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fab3 f383 	clz	r3, r3
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2103      	movs	r1, #3
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
 8000ece:	fa93 f3a3 	rbit	r3, r3
 8000ed2:	61fb      	str	r3, [r7, #28]
  return result;
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000ede:	2320      	movs	r3, #32
 8000ee0:	e003      	b.n	8000eea <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee4:	fab3 f383 	clz	r3, r3
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	601a      	str	r2, [r3, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	372c      	adds	r7, #44	@ 0x2c
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_GPIO_SetPinOutputType>:
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	401a      	ands	r2, r3
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	fb01 f303 	mul.w	r3, r1, r3
 8000f22:	431a      	orrs	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	605a      	str	r2, [r3, #4]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <LL_GPIO_SetPinSpeed>:
{
 8000f34:	b480      	push	{r7}
 8000f36:	b08b      	sub	sp, #44	@ 0x2c
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa93 f3a3 	rbit	r3, r3
 8000f4e:	613b      	str	r3, [r7, #16]
  return result;
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000f5a:	2320      	movs	r3, #32
 8000f5c:	e003      	b.n	8000f66 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	fab3 f383 	clz	r3, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2103      	movs	r1, #3
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	401a      	ands	r2, r3
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f76:	6a3b      	ldr	r3, [r7, #32]
 8000f78:	fa93 f3a3 	rbit	r3, r3
 8000f7c:	61fb      	str	r3, [r7, #28]
  return result;
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8000f88:	2320      	movs	r3, #32
 8000f8a:	e003      	b.n	8000f94 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8e:	fab3 f383 	clz	r3, r3
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	609a      	str	r2, [r3, #8]
}
 8000fa2:	bf00      	nop
 8000fa4:	372c      	adds	r7, #44	@ 0x2c
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <LL_GPIO_SetPinPull>:
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b08b      	sub	sp, #44	@ 0x2c
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	fa93 f3a3 	rbit	r3, r3
 8000fc8:	613b      	str	r3, [r7, #16]
  return result;
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000fd4:	2320      	movs	r3, #32
 8000fd6:	e003      	b.n	8000fe0 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fab3 f383 	clz	r3, r3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2103      	movs	r1, #3
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	401a      	ands	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff0:	6a3b      	ldr	r3, [r7, #32]
 8000ff2:	fa93 f3a3 	rbit	r3, r3
 8000ff6:	61fb      	str	r3, [r7, #28]
  return result;
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001002:	2320      	movs	r3, #32
 8001004:	e003      	b.n	800100e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001008:	fab3 f383 	clz	r3, r3
 800100c:	b2db      	uxtb	r3, r3
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	431a      	orrs	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	60da      	str	r2, [r3, #12]
}
 800101c:	bf00      	nop
 800101e:	372c      	adds	r7, #44	@ 0x2c
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_GPIO_SetAFPin_0_7>:
{
 8001028:	b480      	push	{r7}
 800102a:	b08b      	sub	sp, #44	@ 0x2c
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6a1a      	ldr	r2, [r3, #32]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa93 f3a3 	rbit	r3, r3
 8001042:	613b      	str	r3, [r7, #16]
  return result;
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800104e:	2320      	movs	r3, #32
 8001050:	e003      	b.n	800105a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	fab3 f383 	clz	r3, r3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	210f      	movs	r1, #15
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	401a      	ands	r2, r3
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	fa93 f3a3 	rbit	r3, r3
 8001070:	61fb      	str	r3, [r7, #28]
  return result;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800107c:	2320      	movs	r3, #32
 800107e:	e003      	b.n	8001088 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001082:	fab3 f383 	clz	r3, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	431a      	orrs	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	621a      	str	r2, [r3, #32]
}
 8001096:	bf00      	nop
 8001098:	372c      	adds	r7, #44	@ 0x2c
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_GPIO_SetAFPin_8_15>:
{
 80010a2:	b480      	push	{r7}
 80010a4:	b08b      	sub	sp, #44	@ 0x2c
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa93 f3a3 	rbit	r3, r3
 80010be:	613b      	str	r3, [r7, #16]
  return result;
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80010ca:	2320      	movs	r3, #32
 80010cc:	e003      	b.n	80010d6 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	fab3 f383 	clz	r3, r3
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	210f      	movs	r1, #15
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	401a      	ands	r2, r3
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e8:	6a3b      	ldr	r3, [r7, #32]
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	61fb      	str	r3, [r7, #28]
  return result;
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80010f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80010fa:	2320      	movs	r3, #32
 80010fc:	e003      	b.n	8001106 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80010fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001100:	fab3 f383 	clz	r3, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	431a      	orrs	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001114:	bf00      	nop
 8001116:	372c      	adds	r7, #44	@ 0x2c
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	fa93 f3a3 	rbit	r3, r3
 8001136:	60fb      	str	r3, [r7, #12]
  return result;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <LL_GPIO_Init+0x26>
    return 32U;
 8001142:	2320      	movs	r3, #32
 8001144:	e003      	b.n	800114e <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	fab3 f383 	clz	r3, r3
 800114c:	b2db      	uxtb	r3, r3
 800114e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001150:	e048      	b.n	80011e4 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	2101      	movs	r1, #1
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d03a      	beq.n	80011de <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d003      	beq.n	8001178 <LL_GPIO_Init+0x58>
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d10e      	bne.n	8001196 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	461a      	mov	r2, r3
 800117e:	69b9      	ldr	r1, [r7, #24]
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff fed7 	bl	8000f34 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	6819      	ldr	r1, [r3, #0]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	461a      	mov	r2, r3
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff feb7 	bl	8000f04 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	461a      	mov	r2, r3
 800119c:	69b9      	ldr	r1, [r7, #24]
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ff05 	bl	8000fae <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d111      	bne.n	80011d0 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	2bff      	cmp	r3, #255	@ 0xff
 80011b0:	d807      	bhi.n	80011c2 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	461a      	mov	r2, r3
 80011b8:	69b9      	ldr	r1, [r7, #24]
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ff34 	bl	8001028 <LL_GPIO_SetAFPin_0_7>
 80011c0:	e006      	b.n	80011d0 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	461a      	mov	r2, r3
 80011c8:	69b9      	ldr	r1, [r7, #24]
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff69 	bl	80010a2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	461a      	mov	r2, r3
 80011d6:	69b9      	ldr	r1, [r7, #24]
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff fe56 	bl	8000e8a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3301      	adds	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	fa22 f303 	lsr.w	r3, r2, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1af      	bne.n	8001152 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <LL_SPI_IsEnabled>:
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800120c:	2b40      	cmp	r3, #64	@ 0x40
 800120e:	d101      	bne.n	8001214 <LL_SPI_IsEnabled+0x18>
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <LL_SPI_IsEnabled+0x1a>
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <LL_SPI_SetRxFIFOThreshold>:
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	605a      	str	r2, [r3, #4]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_SPI_SetCRCPolynomial>:
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b29b      	uxth	r3, r3
 8001256:	461a      	mov	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	611a      	str	r2, [r3, #16]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffc0 	bl	80011fc <LL_SPI_IsEnabled>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d145      	bne.n	800130e <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800128a:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	6811      	ldr	r1, [r2, #0]
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	6852      	ldr	r2, [r2, #4]
 8001296:	4311      	orrs	r1, r2
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	68d2      	ldr	r2, [r2, #12]
 800129c:	4311      	orrs	r1, r2
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	6912      	ldr	r2, [r2, #16]
 80012a2:	4311      	orrs	r1, r2
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	6952      	ldr	r2, [r2, #20]
 80012a8:	4311      	orrs	r1, r2
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	6992      	ldr	r2, [r2, #24]
 80012ae:	4311      	orrs	r1, r2
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	69d2      	ldr	r2, [r2, #28]
 80012b4:	4311      	orrs	r1, r2
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	6a12      	ldr	r2, [r2, #32]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80012ca:	f023 0304 	bic.w	r3, r3, #4
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	6891      	ldr	r1, [r2, #8]
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	6952      	ldr	r2, [r2, #20]
 80012d6:	0c12      	lsrs	r2, r2, #16
 80012d8:	430a      	orrs	r2, r1
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80012e8:	d204      	bcs.n	80012f4 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 80012ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ff97 	bl	8001222 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012fc:	d105      	bne.n	800130a <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001302:	4619      	mov	r1, r3
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff9f 	bl	8001248 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800130a:	2300      	movs	r3, #0
 800130c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800130e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	4a07      	ldr	r2, [pc, #28]	@ (8001348 <LL_InitTick+0x30>)
 800132c:	3b01      	subs	r3, #1
 800132e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <LL_InitTick+0x30>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <LL_InitTick+0x30>)
 8001338:	2205      	movs	r2, #5
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000e010 	.word	0xe000e010

0800134c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001354:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffdd 	bl	8001318 <LL_InitTick>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001370:	4a04      	ldr	r2, [pc, #16]	@ (8001384 <LL_SetSystemCoreClock+0x1c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000000 	.word	0x20000000

08001388 <LL_GPIO_SetOutputPin>:
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	619a      	str	r2, [r3, #24]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_GPIO_ResetOutputPin>:
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <fram_init>:
int fram_wrsr(fram_t *dev);
int fram_get_id(fram_t *dev);


int fram_init(fram_t *dev, SPI_TypeDef *SPIx, uint8_t cs_pin, uint8_t sck_pin,
              uint8_t mosi_pin, uint8_t miso_pin) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	4611      	mov	r1, r2
 80013cc:	461a      	mov	r2, r3
 80013ce:	460b      	mov	r3, r1
 80013d0:	71fb      	strb	r3, [r7, #7]
 80013d2:	4613      	mov	r3, r2
 80013d4:	71bb      	strb	r3, [r7, #6]
    dev->spi_device = SPIx;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	601a      	str	r2, [r3, #0]

    dev->cs_pin = cs_pin;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	711a      	strb	r2, [r3, #4]
    dev->sck_pin = sck_pin;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	79ba      	ldrb	r2, [r7, #6]
 80013e6:	715a      	strb	r2, [r3, #5]
    dev->mosi_pin = mosi_pin;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	7e3a      	ldrb	r2, [r7, #24]
 80013ec:	719a      	strb	r2, [r3, #6]
    dev->miso_pin = miso_pin;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	7f3a      	ldrb	r2, [r7, #28]
 80013f2:	71da      	strb	r2, [r3, #7]

    dev->wp_pin = 255;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	22ff      	movs	r2, #255	@ 0xff
 80013f8:	721a      	strb	r2, [r3, #8]
    dev->hold_pin = 255;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	22ff      	movs	r2, #255	@ 0xff
 80013fe:	725a      	strb	r2, [r3, #9]

	// TODO actually make this driver use the given CS pin
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8001400:	2140      	movs	r1, #64	@ 0x40
 8001402:	4805      	ldr	r0, [pc, #20]	@ (8001418 <fram_init+0x58>)
 8001404:	f7ff ffc0 	bl	8001388 <LL_GPIO_SetOutputPin>

    fram_get_id(dev);
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f000 f807 	bl	800141c <fram_get_id>

    return 0;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	48000400 	.word	0x48000400

0800141c <fram_get_id>:

int fram_get_id(fram_t *dev) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
    uint8_t cmd = RDID_CMD;
 8001424:	239f      	movs	r3, #159	@ 0x9f
 8001426:	73fb      	strb	r3, [r7, #15]

    LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8001428:	2140      	movs	r1, #64	@ 0x40
 800142a:	480e      	ldr	r0, [pc, #56]	@ (8001464 <fram_get_id+0x48>)
 800142c:	f7ff ffba 	bl	80013a4 <LL_GPIO_ResetOutputPin>

    spi_write(dev->spi_device, &cmd, 1);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f107 010f 	add.w	r1, r7, #15
 8001438:	2201      	movs	r2, #1
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fbb6 	bl	8000bac <spi_write>

    spi_read(dev->spi_device, (uint8_t *)&(dev->device_id), 4);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3310      	adds	r3, #16
 8001448:	2204      	movs	r2, #4
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff fb90 	bl	8000b70 <spi_read>

    LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8001450:	2140      	movs	r1, #64	@ 0x40
 8001452:	4804      	ldr	r0, [pc, #16]	@ (8001464 <fram_get_id+0x48>)
 8001454:	f7ff ff98 	bl	8001388 <LL_GPIO_SetOutputPin>

    return 0;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	48000400 	.word	0x48000400

08001468 <fram_wren>:

// TODO actually check for errors
// Set write enable latch (enable writes)
int fram_wren(fram_t *dev) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	uint8_t cmd = WREN_CMD;
 8001470:	2306      	movs	r3, #6
 8001472:	73fb      	strb	r3, [r7, #15]

    LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8001474:	2140      	movs	r1, #64	@ 0x40
 8001476:	480a      	ldr	r0, [pc, #40]	@ (80014a0 <fram_wren+0x38>)
 8001478:	f7ff ff94 	bl	80013a4 <LL_GPIO_ResetOutputPin>

    spi_write(dev->spi_device, &cmd, 1);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f107 010f 	add.w	r1, r7, #15
 8001484:	2201      	movs	r2, #1
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fb90 	bl	8000bac <spi_write>

    LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 800148c:	2140      	movs	r1, #64	@ 0x40
 800148e:	4804      	ldr	r0, [pc, #16]	@ (80014a0 <fram_wren+0x38>)
 8001490:	f7ff ff7a 	bl	8001388 <LL_GPIO_SetOutputPin>

	return 0;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	48000400 	.word	0x48000400

080014a4 <fram_write>:
int fram_wrsr(fram_t *dev) {
	// TODO
	return -1;
}

int fram_write(fram_t *dev, SPI_TypeDef *SPIx, uint32_t addr, uint8_t *buf, uint32_t num_bytes) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	603b      	str	r3, [r7, #0]
	uint8_t cmd = WRITE_CMD;
 80014b2:	2302      	movs	r3, #2
 80014b4:	75fb      	strb	r3, [r7, #23]
	
	uint8_t addr_byte_1 = (addr >> 8) & 0xFF;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	75bb      	strb	r3, [r7, #22]
	uint8_t addr_byte_2 = addr & 0xFF;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	757b      	strb	r3, [r7, #21]

	fram_wren(dev);
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f7ff ffcf 	bl	8001468 <fram_wren>

	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 80014ca:	2140      	movs	r1, #64	@ 0x40
 80014cc:	4815      	ldr	r0, [pc, #84]	@ (8001524 <fram_write+0x80>)
 80014ce:	f7ff ff69 	bl	80013a4 <LL_GPIO_ResetOutputPin>

    spi_write(dev->spi_device, &cmd, 1);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f107 0117 	add.w	r1, r7, #23
 80014da:	2201      	movs	r2, #1
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fb65 	bl	8000bac <spi_write>

	spi_write(dev->spi_device, &addr_byte_1, 1);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f107 0116 	add.w	r1, r7, #22
 80014ea:	2201      	movs	r2, #1
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fb5d 	bl	8000bac <spi_write>
	spi_write(dev->spi_device, &addr_byte_2, 1);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f107 0115 	add.w	r1, r7, #21
 80014fa:	2201      	movs	r2, #1
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fb55 	bl	8000bac <spi_write>

	spi_write(dev->spi_device, buf, num_bytes);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6a3a      	ldr	r2, [r7, #32]
 8001508:	6839      	ldr	r1, [r7, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fb4e 	bl	8000bac <spi_write>

    LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8001510:	2140      	movs	r1, #64	@ 0x40
 8001512:	4804      	ldr	r0, [pc, #16]	@ (8001524 <fram_write+0x80>)
 8001514:	f7ff ff38 	bl	8001388 <LL_GPIO_SetOutputPin>

	return 0;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	48000400 	.word	0x48000400

08001528 <fram_read>:

int fram_read(fram_t *dev, SPI_TypeDef *SPIx, uint32_t addr, uint8_t *buf, uint32_t num_bytes) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]
	uint8_t cmd = READ_CMD;
 8001536:	2303      	movs	r3, #3
 8001538:	75fb      	strb	r3, [r7, #23]
	
	uint8_t addr_byte_1 = (addr >> 8) & 0xFF;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	b2db      	uxtb	r3, r3
 8001540:	75bb      	strb	r3, [r7, #22]
	uint8_t addr_byte_2 = addr & 0xFF;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	757b      	strb	r3, [r7, #21]

	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8001548:	2140      	movs	r1, #64	@ 0x40
 800154a:	4815      	ldr	r0, [pc, #84]	@ (80015a0 <fram_read+0x78>)
 800154c:	f7ff ff2a 	bl	80013a4 <LL_GPIO_ResetOutputPin>

    spi_write(dev->spi_device, &cmd, 1);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f107 0117 	add.w	r1, r7, #23
 8001558:	2201      	movs	r2, #1
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fb26 	bl	8000bac <spi_write>

	spi_write(dev->spi_device, &addr_byte_1, 1);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f107 0116 	add.w	r1, r7, #22
 8001568:	2201      	movs	r2, #1
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fb1e 	bl	8000bac <spi_write>
	spi_write(dev->spi_device, &addr_byte_2, 1);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f107 0115 	add.w	r1, r7, #21
 8001578:	2201      	movs	r2, #1
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fb16 	bl	8000bac <spi_write>

	spi_read(dev->spi_device, buf, num_bytes);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6a3a      	ldr	r2, [r7, #32]
 8001586:	6839      	ldr	r1, [r7, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff faf1 	bl	8000b70 <spi_read>

    LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 800158e:	2140      	movs	r1, #64	@ 0x40
 8001590:	4803      	ldr	r0, [pc, #12]	@ (80015a0 <fram_read+0x78>)
 8001592:	f7ff fef9 	bl	8001388 <LL_GPIO_SetOutputPin>
	
	return 0;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	48000400 	.word	0x48000400

080015a4 <fs_flash_read>:
}
*/
// littleFS port functions

int fs_flash_read(const struct lfs_config *cfg, lfs_block_t block,
                  lfs_off_t off, void *buffer, lfs_size_t size) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af02      	add	r7, sp, #8
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
  assert(off % cfg->read_size == 0);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	695a      	ldr	r2, [r3, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80015bc:	fb01 f202 	mul.w	r2, r1, r2
 80015c0:	1a9b      	subs	r3, r3, r2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d005      	beq.n	80015d2 <fs_flash_read+0x2e>
 80015c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001644 <fs_flash_read+0xa0>)
 80015c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001648 <fs_flash_read+0xa4>)
 80015ca:	215c      	movs	r1, #92	@ 0x5c
 80015cc:	481f      	ldr	r0, [pc, #124]	@ (800164c <fs_flash_read+0xa8>)
 80015ce:	f007 f86f 	bl	80086b0 <__assert_func>
  assert(size % cfg->read_size == 0);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80015dc:	fb01 f202 	mul.w	r2, r1, r2
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d005      	beq.n	80015f2 <fs_flash_read+0x4e>
 80015e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001650 <fs_flash_read+0xac>)
 80015e8:	4a17      	ldr	r2, [pc, #92]	@ (8001648 <fs_flash_read+0xa4>)
 80015ea:	215d      	movs	r1, #93	@ 0x5d
 80015ec:	4817      	ldr	r0, [pc, #92]	@ (800164c <fs_flash_read+0xa8>)
 80015ee:	f007 f85f 	bl	80086b0 <__assert_func>
  assert(block < cfg->block_count);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d305      	bcc.n	8001608 <fs_flash_read+0x64>
 80015fc:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <fs_flash_read+0xb0>)
 80015fe:	4a12      	ldr	r2, [pc, #72]	@ (8001648 <fs_flash_read+0xa4>)
 8001600:	215e      	movs	r1, #94	@ 0x5e
 8001602:	4812      	ldr	r0, [pc, #72]	@ (800164c <fs_flash_read+0xa8>)
 8001604:	f007 f854 	bl	80086b0 <__assert_func>

  uint32_t startAddress = block * (cfg->block_size) + off;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	fb02 f303 	mul.w	r3, r2, r3
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	617b      	str	r3, [r7, #20]
  int ret = fram_read(&memory, memory.spi_device, startAddress,
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <fs_flash_read+0xb4>)
 800161a:	6819      	ldr	r1, [r3, #0]
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	480c      	ldr	r0, [pc, #48]	@ (8001658 <fs_flash_read+0xb4>)
 8001626:	f7ff ff7f 	bl	8001528 <fram_read>
 800162a:	6138      	str	r0, [r7, #16]
                      (uint8_t *)buffer, size);

  if (ret == -1) {
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001632:	d102      	bne.n	800163a <fs_flash_read+0x96>
    return -1;
 8001634:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001638:	e000      	b.n	800163c <fs_flash_read+0x98>
  } else {
    return 0;
 800163a:	2300      	movs	r3, #0
  }
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	08009720 	.word	0x08009720
 8001648:	0800a424 	.word	0x0800a424
 800164c:	0800973c 	.word	0x0800973c
 8001650:	08009758 	.word	0x08009758
 8001654:	08009774 	.word	0x08009774
 8001658:	2000007c 	.word	0x2000007c

0800165c <fs_flash_prog>:

int fs_flash_prog(const struct lfs_config *cfg, lfs_block_t block,
                  lfs_off_t off, const void *buffer, lfs_size_t size) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af02      	add	r7, sp, #8
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	603b      	str	r3, [r7, #0]

  assert(off % cfg->prog_size == 0);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	699a      	ldr	r2, [r3, #24]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	fbb3 f1f2 	udiv	r1, r3, r2
 8001674:	fb01 f202 	mul.w	r2, r1, r2
 8001678:	1a9b      	subs	r3, r3, r2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d005      	beq.n	800168a <fs_flash_prog+0x2e>
 800167e:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <fs_flash_prog+0xa0>)
 8001680:	4a1f      	ldr	r2, [pc, #124]	@ (8001700 <fs_flash_prog+0xa4>)
 8001682:	216e      	movs	r1, #110	@ 0x6e
 8001684:	481f      	ldr	r0, [pc, #124]	@ (8001704 <fs_flash_prog+0xa8>)
 8001686:	f007 f813 	bl	80086b0 <__assert_func>
  assert(size % cfg->prog_size == 0);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	699a      	ldr	r2, [r3, #24]
 800168e:	6a3b      	ldr	r3, [r7, #32]
 8001690:	fbb3 f1f2 	udiv	r1, r3, r2
 8001694:	fb01 f202 	mul.w	r2, r1, r2
 8001698:	1a9b      	subs	r3, r3, r2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <fs_flash_prog+0x4e>
 800169e:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <fs_flash_prog+0xac>)
 80016a0:	4a17      	ldr	r2, [pc, #92]	@ (8001700 <fs_flash_prog+0xa4>)
 80016a2:	216f      	movs	r1, #111	@ 0x6f
 80016a4:	4817      	ldr	r0, [pc, #92]	@ (8001704 <fs_flash_prog+0xa8>)
 80016a6:	f007 f803 	bl	80086b0 <__assert_func>
  assert(block < cfg->block_count);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d305      	bcc.n	80016c0 <fs_flash_prog+0x64>
 80016b4:	4b15      	ldr	r3, [pc, #84]	@ (800170c <fs_flash_prog+0xb0>)
 80016b6:	4a12      	ldr	r2, [pc, #72]	@ (8001700 <fs_flash_prog+0xa4>)
 80016b8:	2170      	movs	r1, #112	@ 0x70
 80016ba:	4812      	ldr	r0, [pc, #72]	@ (8001704 <fs_flash_prog+0xa8>)
 80016bc:	f006 fff8 	bl	80086b0 <__assert_func>

  uint32_t startAddress = block * (cfg->block_size) + off;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	fb02 f303 	mul.w	r3, r2, r3
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	617b      	str	r3, [r7, #20]
  int ret = fram_write(&memory, memory.spi_device, startAddress,
 80016d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <fs_flash_prog+0xb4>)
 80016d2:	6819      	ldr	r1, [r3, #0]
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	480c      	ldr	r0, [pc, #48]	@ (8001710 <fs_flash_prog+0xb4>)
 80016de:	f7ff fee1 	bl	80014a4 <fram_write>
 80016e2:	6138      	str	r0, [r7, #16]
                       (uint8_t *)buffer, size);

  if (ret == -1) {
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016ea:	d102      	bne.n	80016f2 <fs_flash_prog+0x96>
    return -1;
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016f0:	e000      	b.n	80016f4 <fs_flash_prog+0x98>
  } else {
    return 0;
 80016f2:	2300      	movs	r3, #0
  }
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	08009790 	.word	0x08009790
 8001700:	0800a434 	.word	0x0800a434
 8001704:	0800973c 	.word	0x0800973c
 8001708:	080097ac 	.word	0x080097ac
 800170c:	08009774 	.word	0x08009774
 8001710:	2000007c 	.word	0x2000007c

08001714 <fs_flash_erase>:

int fs_flash_erase(const struct lfs_config *cfg, lfs_block_t block) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af02      	add	r7, sp, #8
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  assert(block < cfg->block_count);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d305      	bcc.n	8001734 <fs_flash_erase+0x20>
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <fs_flash_erase+0x60>)
 800172a:	4a13      	ldr	r2, [pc, #76]	@ (8001778 <fs_flash_erase+0x64>)
 800172c:	217e      	movs	r1, #126	@ 0x7e
 800172e:	4813      	ldr	r0, [pc, #76]	@ (800177c <fs_flash_erase+0x68>)
 8001730:	f006 ffbe 	bl	80086b0 <__assert_func>
  uint8_t zero = 0x00;
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]

  uint32_t startAddress = block * (cfg->block_size);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69da      	ldr	r2, [r3, #28]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	617b      	str	r3, [r7, #20]
  int ret = fram_write(&memory, memory.spi_device, startAddress, &zero, 128);
 8001744:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <fs_flash_erase+0x6c>)
 8001746:	6819      	ldr	r1, [r3, #0]
 8001748:	f107 030f 	add.w	r3, r7, #15
 800174c:	2280      	movs	r2, #128	@ 0x80
 800174e:	9200      	str	r2, [sp, #0]
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	480b      	ldr	r0, [pc, #44]	@ (8001780 <fs_flash_erase+0x6c>)
 8001754:	f7ff fea6 	bl	80014a4 <fram_write>
 8001758:	6138      	str	r0, [r7, #16]

  if (ret == -1) {
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001760:	d102      	bne.n	8001768 <fs_flash_erase+0x54>
    return -1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001766:	e000      	b.n	800176a <fs_flash_erase+0x56>
  } else {
    return 0;
 8001768:	2300      	movs	r3, #0
  }
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	08009774 	.word	0x08009774
 8001778:	0800a444 	.word	0x0800a444
 800177c:	0800973c 	.word	0x0800973c
 8001780:	2000007c 	.word	0x2000007c

08001784 <fs_flash_sync>:

// SPI implementation is blocking
int fs_flash_sync(const struct lfs_config *c) { return 0; }
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	2300      	movs	r3, #0
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4293      	cmp	r3, r2
 80017aa:	bf38      	it	cc
 80017ac:	4613      	movcc	r3, r2
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4293      	cmp	r3, r2
 80017ca:	bf28      	it	cs
 80017cc:	4613      	movcs	r3, r2
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80017ec:	6839      	ldr	r1, [r7, #0]
 80017ee:	fb01 f202 	mul.w	r2, r1, r2
 80017f2:	1a9b      	subs	r3, r3, r2
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	1ad3      	subs	r3, r2, r3
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	4413      	add	r3, r2
 8001814:	3b01      	subs	r3, #1
 8001816:	6839      	ldr	r1, [r7, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ffde 	bl	80017da <lfs_aligndown>
 800181e:	4603      	mov	r3, r0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	fa93 f3a3 	rbit	r3, r3
 8001856:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f007 ff22 	bl	80096b8 <__popcountsi2>
 8001874:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	1ad3      	subs	r3, r2, r3
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 80018a2:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ffee 	bl	800189a <lfs_fromle32>
 80018be:	4603      	mov	r3, r0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ffed 	bl	80018c8 <lfs_frombe32>
 80018ee:	4603      	mov	r3, r0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f006 fef3 	bl	80086ec <malloc>
 8001906:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f006 feef 	bl	80086fc <free>
#else
    (void)p;
#endif
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001936:	601a      	str	r2, [r3, #0]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	68d8      	ldr	r0, [r3, #12]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001958:	461a      	mov	r2, r3
 800195a:	21ff      	movs	r1, #255	@ 0xff
 800195c:	f007 f87a 	bl	8008a54 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001966:	601a      	str	r2, [r3, #0]
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8001970:	b5b0      	push	{r4, r5, r7, lr}
 8001972:	b08a      	sub	sp, #40	@ 0x28
 8001974:	af02      	add	r7, sp, #8
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800197e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001980:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 8001982:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001986:	441a      	add	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	429a      	cmp	r2, r3
 8001990:	d80a      	bhi.n	80019a8 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 8124 	beq.w	8001be4 <lfs_bd_read+0x274>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019a2:	429a      	cmp	r2, r3
 80019a4:	f0c0 811e 	bcc.w	8001be4 <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 80019a8:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80019ac:	e11f      	b.n	8001bee <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80019ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019b0:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d03f      	beq.n	8001a38 <lfs_bd_read+0xc8>
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019be:	429a      	cmp	r2, r3
 80019c0:	d13a      	bne.n	8001a38 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 80019cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d232      	bcs.n	8001a38 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019d8:	429a      	cmp	r2, r3
 80019da:	d324      	bcc.n	8001a26 <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	6859      	ldr	r1, [r3, #4]
 80019e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e6:	1acb      	subs	r3, r1, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	69b8      	ldr	r0, [r7, #24]
 80019ee:	f7ff fee4 	bl	80017ba <lfs_min>
 80019f2:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80019fe:	1acb      	subs	r3, r1, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4619      	mov	r1, r3
 8001a06:	69f8      	ldr	r0, [r7, #28]
 8001a08:	f007 f897 	bl	8008b3a <memcpy>

                data += diff;
 8001a0c:	69fa      	ldr	r2, [r7, #28]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4413      	add	r3, r2
 8001a12:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001a14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	4413      	add	r3, r2
 8001a1a:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8001a1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8001a24:	e0de      	b.n	8001be4 <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	4619      	mov	r1, r3
 8001a30:	69b8      	ldr	r0, [r7, #24]
 8001a32:	f7ff fec2 	bl	80017ba <lfs_min>
 8001a36:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d13a      	bne.n	8001ab8 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	4413      	add	r3, r2
        if (block == rcache->block &&
 8001a4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d232      	bcs.n	8001ab8 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d324      	bcc.n	8001aa6 <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6859      	ldr	r1, [r3, #4]
 8001a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a66:	1acb      	subs	r3, r1, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	69b8      	ldr	r0, [r7, #24]
 8001a6e:	f7ff fea4 	bl	80017ba <lfs_min>
 8001a72:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001a7e:	1acb      	subs	r3, r1, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4619      	mov	r1, r3
 8001a86:	69f8      	ldr	r0, [r7, #28]
 8001a88:	f007 f857 	bl	8008b3a <memcpy>

                data += diff;
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4413      	add	r3, r2
 8001a92:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001a94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	4413      	add	r3, r2
 8001a9a:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8001a9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8001aa4:	e09e      	b.n	8001be4 <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	4619      	mov	r1, r3
 8001ab0:	69b8      	ldr	r0, [r7, #24]
 8001ab2:	f7ff fe82 	bl	80017ba <lfs_min>
 8001ab6:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8001ab8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d336      	bcc.n	8001b2e <lfs_bd_read+0x1be>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ac8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001acc:	fb01 f202 	mul.w	r2, r1, r2
 8001ad0:	1a9b      	subs	r3, r3, r2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d12b      	bne.n	8001b2e <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ada:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8001adc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d325      	bcc.n	8001b2e <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	69b8      	ldr	r0, [r7, #24]
 8001aec:	f7ff fe75 	bl	80017da <lfs_aligndown>
 8001af0:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001af6:	685c      	ldr	r4, [r3, #4]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001b06:	47a0      	blx	r4
 8001b08:	6178      	str	r0, [r7, #20]
            if (err) {
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <lfs_bd_read+0x1a4>
                return err;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	e06c      	b.n	8001bee <lfs_bd_read+0x27e>
            }

            data += diff;
 8001b14:	69fa      	ldr	r2, [r7, #28]
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4413      	add	r3, r2
 8001b1a:	61fb      	str	r3, [r7, #28]
            off += diff;
 8001b1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4413      	add	r3, r2
 8001b22:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 8001b24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 8001b2c:	e05a      	b.n	8001be4 <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00a      	beq.n	8001b4c <lfs_bd_read+0x1dc>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d305      	bcc.n	8001b4c <lfs_bd_read+0x1dc>
 8001b40:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf8 <lfs_bd_read+0x288>)
 8001b42:	4a2e      	ldr	r2, [pc, #184]	@ (8001bfc <lfs_bd_read+0x28c>)
 8001b44:	216b      	movs	r1, #107	@ 0x6b
 8001b46:	482e      	ldr	r0, [pc, #184]	@ (8001c00 <lfs_bd_read+0x290>)
 8001b48:	f006 fdb2 	bl	80086b0 <__assert_func>
        rcache->block = block;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b50:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001b5c:	f7ff fe3d 	bl	80017da <lfs_aligndown>
 8001b60:	4602      	mov	r2, r0
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8001b66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b70:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8001b72:	4619      	mov	r1, r3
 8001b74:	4610      	mov	r0, r2
 8001b76:	f7ff fe45 	bl	8001804 <lfs_alignup>
 8001b7a:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b80:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8001b82:	4619      	mov	r1, r3
 8001b84:	4610      	mov	r0, r2
 8001b86:	f7ff fe18 	bl	80017ba <lfs_min>
 8001b8a:	4602      	mov	r2, r0
                - rcache->off,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8001b90:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	f7ff fe0d 	bl	80017ba <lfs_min>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001baa:	685c      	ldr	r4, [r3, #4]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6819      	ldr	r1, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	462b      	mov	r3, r5
 8001bc4:	47a0      	blx	r4
 8001bc6:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	dd05      	ble.n	8001bda <lfs_bd_read+0x26a>
 8001bce:	4b0d      	ldr	r3, [pc, #52]	@ (8001c04 <lfs_bd_read+0x294>)
 8001bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <lfs_bd_read+0x28c>)
 8001bd2:	2176      	movs	r1, #118	@ 0x76
 8001bd4:	480a      	ldr	r0, [pc, #40]	@ (8001c00 <lfs_bd_read+0x290>)
 8001bd6:	f006 fd6b 	bl	80086b0 <__assert_func>
        if (err) {
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <lfs_bd_read+0x274>
            return err;
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	e004      	b.n	8001bee <lfs_bd_read+0x27e>
    while (size > 0) {
 8001be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f47f aee1 	bne.w	80019ae <lfs_bd_read+0x3e>
        }
    }

    return 0;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	080097c8 	.word	0x080097c8
 8001bfc:	0800a454 	.word	0x0800a454
 8001c00:	080097f8 	.word	0x080097f8
 8001c04:	08009810 	.word	0x08009810

08001c08 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b090      	sub	sp, #64	@ 0x40
 8001c0c:	af04      	add	r7, sp, #16
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8001c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c18:	62bb      	str	r3, [r7, #40]	@ 0x28
    lfs_size_t diff = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	@ 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c22:	e039      	b.n	8001c98 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8001c24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2108      	movs	r1, #8
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fdc4 	bl	80017ba <lfs_min>
 8001c32:	6278      	str	r0, [r7, #36]	@ 0x24
        int err = lfs_bd_read(lfs,
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c38:	1ad1      	subs	r1, r2, r3
 8001c3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c3e:	4413      	add	r3, r2
 8001c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c42:	9203      	str	r2, [sp, #12]
 8001c44:	f107 0214 	add.w	r2, r7, #20
 8001c48:	9202      	str	r2, [sp, #8]
 8001c4a:	9301      	str	r3, [sp, #4]
 8001c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	460b      	mov	r3, r1
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f7ff fe8a 	bl	8001970 <lfs_bd_read>
 8001c5c:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <lfs_bd_cmp+0x60>
            return err;
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	e01c      	b.n	8001ca2 <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8001c68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6c:	18d1      	adds	r1, r2, r3
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c74:	4618      	mov	r0, r3
 8001c76:	f006 fedd 	bl	8008a34 <memcmp>
 8001c7a:	61f8      	str	r0, [r7, #28]
        if (res) {
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d006      	beq.n	8001c90 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	da01      	bge.n	8001c8c <lfs_bd_cmp+0x84>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e00a      	b.n	8001ca2 <lfs_bd_cmp+0x9a>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e008      	b.n	8001ca2 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8001c90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c94:	4413      	add	r3, r2
 8001c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d3c1      	bcc.n	8001c24 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3730      	adds	r7, #48	@ 0x30
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b08e      	sub	sp, #56	@ 0x38
 8001cae:	af04      	add	r7, sp, #16
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cc0:	e030      	b.n	8001d24 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 8001cc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2108      	movs	r1, #8
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fd75 	bl	80017ba <lfs_min>
 8001cd0:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd6:	1ad1      	subs	r1, r2, r3
 8001cd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cdc:	4413      	add	r3, r2
 8001cde:	6a3a      	ldr	r2, [r7, #32]
 8001ce0:	9203      	str	r2, [sp, #12]
 8001ce2:	f107 0214 	add.w	r2, r7, #20
 8001ce6:	9202      	str	r2, [sp, #8]
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	68b9      	ldr	r1, [r7, #8]
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f7ff fe3b 	bl	8001970 <lfs_bd_read>
 8001cfa:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <lfs_bd_crc+0x5c>
            return err;
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	e013      	b.n	8001d2e <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 8001d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f107 0114 	add.w	r1, r7, #20
 8001d0e:	6a3a      	ldr	r2, [r7, #32]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f006 fc8f 	bl	8008634 <lfs_crc>
 8001d16:	4602      	mov	r2, r0
 8001d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d1a:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8001d1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	4413      	add	r3, r2
 8001d22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d3ca      	bcc.n	8001cc2 <lfs_bd_crc+0x18>
    }

    return 0;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3728      	adds	r7, #40	@ 0x28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8001d38:	b5b0      	push	{r4, r5, r7, lr}
 8001d3a:	b08c      	sub	sp, #48	@ 0x30
 8001d3c:	af04      	add	r7, sp, #16
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d4e:	d060      	beq.n	8001e12 <lfs_bd_flush+0xda>
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f113 0f02 	cmn.w	r3, #2
 8001d58:	d05b      	beq.n	8001e12 <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d305      	bcc.n	8001d72 <lfs_bd_flush+0x3a>
 8001d66:	4b2d      	ldr	r3, [pc, #180]	@ (8001e1c <lfs_bd_flush+0xe4>)
 8001d68:	4a2d      	ldr	r2, [pc, #180]	@ (8001e20 <lfs_bd_flush+0xe8>)
 8001d6a:	21b3      	movs	r1, #179	@ 0xb3
 8001d6c:	482d      	ldr	r0, [pc, #180]	@ (8001e24 <lfs_bd_flush+0xec>)
 8001d6e:	f006 fc9f 	bl	80086b0 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4610      	mov	r0, r2
 8001d80:	f7ff fd40 	bl	8001804 <lfs_alignup>
 8001d84:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d8a:	689c      	ldr	r4, [r3, #8]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	6819      	ldr	r1, [r3, #0]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	462b      	mov	r3, r5
 8001da2:	47a0      	blx	r4
 8001da4:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	dd05      	ble.n	8001db8 <lfs_bd_flush+0x80>
 8001dac:	4b1e      	ldr	r3, [pc, #120]	@ (8001e28 <lfs_bd_flush+0xf0>)
 8001dae:	4a1c      	ldr	r2, [pc, #112]	@ (8001e20 <lfs_bd_flush+0xe8>)
 8001db0:	21b7      	movs	r1, #183	@ 0xb7
 8001db2:	481c      	ldr	r0, [pc, #112]	@ (8001e24 <lfs_bd_flush+0xec>)
 8001db4:	f006 fc7c 	bl	80086b0 <__assert_func>
        if (err) {
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <lfs_bd_flush+0x8a>
            return err;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	e028      	b.n	8001e14 <lfs_bd_flush+0xdc>
        }

        if (validate) {
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d020      	beq.n	8001e0a <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff fdab 	bl	8001926 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8001ddc:	69f8      	ldr	r0, [r7, #28]
 8001dde:	9003      	str	r0, [sp, #12]
 8001de0:	9102      	str	r1, [sp, #8]
 8001de2:	9201      	str	r2, [sp, #4]
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	2100      	movs	r1, #0
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f7ff ff0b 	bl	8001c08 <lfs_bd_cmp>
 8001df2:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	da01      	bge.n	8001dfe <lfs_bd_flush+0xc6>
                return res;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	e00a      	b.n	8001e14 <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 8001e04:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8001e08:	e004      	b.n	8001e14 <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8001e0a:	68b9      	ldr	r1, [r7, #8]
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f7ff fd99 	bl	8001944 <lfs_cache_zero>
    }

    return 0;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3720      	adds	r7, #32
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e1c:	0800981c 	.word	0x0800981c
 8001e20:	0800a460 	.word	0x0800a460
 8001e24:	080097f8 	.word	0x080097f8
 8001e28:	08009810 	.word	0x08009810

08001e2c <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f7ff fd72 	bl	8001926 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	68b9      	ldr	r1, [r7, #8]
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f7ff ff75 	bl	8001d38 <lfs_bd_flush>
 8001e4e:	6178      	str	r0, [r7, #20]
    if (err) {
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <lfs_bd_sync+0x2e>
        return err;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	e011      	b.n	8001e7e <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e64:	4610      	mov	r0, r2
 8001e66:	4798      	blx	r3
 8001e68:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	dd05      	ble.n	8001e7c <lfs_bd_sync+0x50>
 8001e70:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <lfs_bd_sync+0x5c>)
 8001e72:	4a06      	ldr	r2, [pc, #24]	@ (8001e8c <lfs_bd_sync+0x60>)
 8001e74:	21dd      	movs	r1, #221	@ 0xdd
 8001e76:	4806      	ldr	r0, [pc, #24]	@ (8001e90 <lfs_bd_sync+0x64>)
 8001e78:	f006 fc1a 	bl	80086b0 <__assert_func>
    return err;
 8001e7c:	697b      	ldr	r3, [r7, #20]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	08009810 	.word	0x08009810
 8001e8c:	0800a470 	.word	0x0800a470
 8001e90:	080097f8 	.word	0x080097f8

08001e94 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8001ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea4:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 8001ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea8:	f113 0f02 	cmn.w	r3, #2
 8001eac:	d00a      	beq.n	8001ec4 <lfs_bd_prog+0x30>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001eb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d305      	bcc.n	8001ec4 <lfs_bd_prog+0x30>
 8001eb8:	4b48      	ldr	r3, [pc, #288]	@ (8001fdc <lfs_bd_prog+0x148>)
 8001eba:	4a49      	ldr	r2, [pc, #292]	@ (8001fe0 <lfs_bd_prog+0x14c>)
 8001ebc:	21e8      	movs	r1, #232	@ 0xe8
 8001ebe:	4849      	ldr	r0, [pc, #292]	@ (8001fe4 <lfs_bd_prog+0x150>)
 8001ec0:	f006 fbf6 	bl	80086b0 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8001ec4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ec8:	441a      	add	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d97a      	bls.n	8001fca <lfs_bd_prog+0x136>
 8001ed4:	4b44      	ldr	r3, [pc, #272]	@ (8001fe8 <lfs_bd_prog+0x154>)
 8001ed6:	4a42      	ldr	r2, [pc, #264]	@ (8001fe0 <lfs_bd_prog+0x14c>)
 8001ed8:	21e9      	movs	r1, #233	@ 0xe9
 8001eda:	4842      	ldr	r0, [pc, #264]	@ (8001fe4 <lfs_bd_prog+0x150>)
 8001edc:	f006 fbe8 	bl	80086b0 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d151      	bne.n	8001f8e <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8001eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d34c      	bcc.n	8001f8e <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efe:	4413      	add	r3, r2
                off >= pcache->off &&
 8001f00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d243      	bcs.n	8001f8e <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f12:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8001f14:	4413      	add	r3, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001f1a:	f7ff fc4e 	bl	80017ba <lfs_min>
 8001f1e:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001f2a:	1acb      	subs	r3, r1, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	69f9      	ldr	r1, [r7, #28]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f006 fe01 	bl	8008b3a <memcpy>

            data += diff;
 8001f38:	69fa      	ldr	r2, [r7, #28]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	61fb      	str	r3, [r7, #28]
            off += diff;
 8001f40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4413      	add	r3, r2
 8001f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 8001f48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	6898      	ldr	r0, [r3, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f7ff fc1c 	bl	800179a <lfs_max>
 8001f62:	4602      	mov	r2, r0
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d128      	bne.n	8001fc8 <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	68b9      	ldr	r1, [r7, #8]
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f7ff fedb 	bl	8001d38 <lfs_bd_flush>
 8001f82:	6178      	str	r0, [r7, #20]
                if (err) {
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d01e      	beq.n	8001fc8 <lfs_bd_prog+0x134>
                    return err;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	e021      	b.n	8001fd2 <lfs_bd_prog+0x13e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f96:	d006      	beq.n	8001fa6 <lfs_bd_prog+0x112>
 8001f98:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <lfs_bd_prog+0x158>)
 8001f9a:	4a11      	ldr	r2, [pc, #68]	@ (8001fe0 <lfs_bd_prog+0x14c>)
 8001f9c:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001fa0:	4810      	ldr	r0, [pc, #64]	@ (8001fe4 <lfs_bd_prog+0x150>)
 8001fa2:	f006 fb85 	bl	80086b0 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001faa:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001fb6:	f7ff fc10 	bl	80017da <lfs_aligndown>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	e000      	b.n	8001fca <lfs_bd_prog+0x136>
            continue;
 8001fc8:	bf00      	nop
    while (size > 0) {
 8001fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d187      	bne.n	8001ee0 <lfs_bd_prog+0x4c>
    }

    return 0;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	08009840 	.word	0x08009840
 8001fe0:	0800a47c 	.word	0x0800a47c
 8001fe4:	080097f8 	.word	0x080097f8
 8001fe8:	08009878 	.word	0x08009878
 8001fec:	0800989c 	.word	0x0800989c

08001ff0 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d306      	bcc.n	8002012 <lfs_bd_erase+0x22>
 8002004:	4b0f      	ldr	r3, [pc, #60]	@ (8002044 <lfs_bd_erase+0x54>)
 8002006:	4a10      	ldr	r2, [pc, #64]	@ (8002048 <lfs_bd_erase+0x58>)
 8002008:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800200c:	480f      	ldr	r0, [pc, #60]	@ (800204c <lfs_bd_erase+0x5c>)
 800200e:	f006 fb4f 	bl	80086b0 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800201c:	6839      	ldr	r1, [r7, #0]
 800201e:	4610      	mov	r0, r2
 8002020:	4798      	blx	r3
 8002022:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	dd06      	ble.n	8002038 <lfs_bd_erase+0x48>
 800202a:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <lfs_bd_erase+0x60>)
 800202c:	4a06      	ldr	r2, [pc, #24]	@ (8002048 <lfs_bd_erase+0x58>)
 800202e:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8002032:	4806      	ldr	r0, [pc, #24]	@ (800204c <lfs_bd_erase+0x5c>)
 8002034:	f006 fb3c 	bl	80086b0 <__assert_func>
    return err;
 8002038:	68fb      	ldr	r3, [r7, #12]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	080098c0 	.word	0x080098c0
 8002048:	0800a488 	.word	0x0800a488
 800204c:	080097f8 	.word	0x080097f8
 8002050:	08009810 	.word	0x08009810

08002054 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3304      	adds	r3, #4
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	601a      	str	r2, [r3, #0]
}
 8002072:	bf00      	nop
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800208e:	d005      	beq.n	800209c <lfs_pair_isnull+0x1e>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3304      	adds	r3, #4
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800209a:	d101      	bne.n	80020a0 <lfs_pair_isnull+0x22>
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <lfs_pair_isnull+0x24>
 80020a0:	2300      	movs	r3, #0
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	b2db      	uxtb	r3, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d017      	beq.n	80020fa <lfs_pair_cmp+0x46>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3304      	adds	r3, #4
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	3304      	adds	r3, #4
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d00f      	beq.n	80020fa <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	3304      	adds	r3, #4
 80020e2:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d008      	beq.n	80020fa <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3304      	adds	r3, #4
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d001      	beq.n	80020fa <lfs_pair_cmp+0x46>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <lfs_pair_cmp+0x48>
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d107      	bne.n	800212e <lfs_pair_issync+0x26>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3304      	adds	r3, #4
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	3304      	adds	r3, #4
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d00d      	beq.n	800214a <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	3304      	adds	r3, #4
 8002136:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8002138:	429a      	cmp	r2, r3
 800213a:	d108      	bne.n	800214e <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3304      	adds	r3, #4
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d101      	bne.n	800214e <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <lfs_pair_issync+0x48>
 800214e:	2300      	movs	r3, #0
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	b2db      	uxtb	r3, r3
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8002162:	b590      	push	{r4, r7, lr}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fb93 	bl	800189a <lfs_fromle32>
 8002174:	4602      	mov	r2, r0
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3304      	adds	r3, #4
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	1d1c      	adds	r4, r3, #4
 8002184:	4610      	mov	r0, r2
 8002186:	f7ff fb88 	bl	800189a <lfs_fromle32>
 800218a:	4603      	mov	r3, r0
 800218c:	6023      	str	r3, [r4, #0]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bd90      	pop	{r4, r7, pc}

08002196 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8002196:	b590      	push	{r4, r7, lr}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fb84 	bl	80018b0 <lfs_tole32>
 80021a8:	4602      	mov	r2, r0
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3304      	adds	r3, #4
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	1d1c      	adds	r4, r3, #4
 80021b8:	4610      	mov	r0, r2
 80021ba:	f7ff fb79 	bl	80018b0 <lfs_tole32>
 80021be:	4603      	mov	r3, r0
 80021c0:	6023      	str	r3, [r4, #0]
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd90      	pop	{r4, r7, pc}

080021ca <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	0fdb      	lsrs	r3, r3, #31
 80021d8:	b2db      	uxtb	r3, r3
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	059b      	lsls	r3, r3, #22
 80021f2:	159b      	asrs	r3, r3, #22
 80021f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021f8:	bf0c      	ite	eq
 80021fa:	2301      	moveq	r3, #1
 80021fc:	2300      	movne	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	0d1b      	lsrs	r3, r3, #20
 8002218:	b29b      	uxth	r3, r3
 800221a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800221e:	b29b      	uxth	r3, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	0d1b      	lsrs	r3, r3, #20
 8002238:	b29b      	uxth	r3, r3
 800223a:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
 800223e:	b29b      	uxth	r3, r3
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	0d1b      	lsrs	r3, r3, #20
 8002258:	b29b      	uxth	r3, r3
 800225a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800225e:	b29b      	uxth	r3, r3
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	0d1b      	lsrs	r3, r3, #20
 8002278:	b2db      	uxtb	r3, r3
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ffec 	bl	800226c <lfs_tag_chunk>
 8002294:	4603      	mov	r3, r0
 8002296:	b25b      	sxtb	r3, r3
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	0a9b      	lsrs	r3, r3, #10
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022b2:	b29b      	uxth	r3, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ff7f 	bl	80021e6 <lfs_tag_isdelete>
 80022e8:	4603      	mov	r3, r0
 80022ea:	461a      	mov	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ffe5 	bl	80022c0 <lfs_tag_size>
 80022f6:	4603      	mov	r3, r0
 80022f8:	3304      	adds	r3, #4
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8002302:	b480      	push	{r7}
 8002304:	b085      	sub	sp, #20
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	e012      	b.n	8002338 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	6819      	ldr	r1, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	4413      	add	r3, r2
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	4403      	add	r3, r0
 800232e:	404a      	eors	r2, r1
 8002330:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	3301      	adds	r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b02      	cmp	r3, #2
 800233c:	dde9      	ble.n	8002312 <lfs_gstate_xor+0x10>
    }
}
 800233e:	bf00      	nop
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	e00b      	b.n	8002372 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <lfs_gstate_iszero+0x20>
            return false;
 8002368:	2300      	movs	r3, #0
 800236a:	e006      	b.n	800237a <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	3301      	adds	r3, #1
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b02      	cmp	r3, #2
 8002376:	ddf0      	ble.n	800235a <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8002378:	2301      	movs	r3, #1
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff ff94 	bl	80022c0 <lfs_tag_size>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	bf14      	ite	ne
 800239e:	2301      	movne	r3, #1
 80023a0:	2300      	moveq	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff81 	bl	80022c0 <lfs_tag_size>
 80023be:	4603      	mov	r3, r0
 80023c0:	b2db      	uxtb	r3, r3
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff ff18 	bl	800220c <lfs_tag_type1>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bf14      	ite	ne
 80023e2:	2301      	movne	r3, #1
 80023e4:	2300      	moveq	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff5f 	bl	80022c0 <lfs_tag_size>
 8002402:	4603      	mov	r3, r0
 8002404:	0a5b      	lsrs	r3, r3, #9
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf14      	ite	ne
 800240a:	2301      	movne	r3, #1
 800240c:	2300      	moveq	r3, #0
 800240e:	b2db      	uxtb	r3, r3
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fef0 	bl	800220c <lfs_tag_type1>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <lfs_gstate_hasmovehere+0x30>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3304      	adds	r3, #4
 8002436:	6839      	ldr	r1, [r7, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fe3b 	bl	80020b4 <lfs_pair_cmp>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <lfs_gstate_hasmovehere+0x30>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <lfs_gstate_hasmovehere+0x32>
 8002448:	2300      	movs	r3, #0
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	b2db      	uxtb	r3, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fa18 	bl	800189a <lfs_fromle32>
 800246a:	4602      	mov	r2, r0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fa10 	bl	800189a <lfs_fromle32>
 800247a:	4602      	mov	r2, r0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fa08 	bl	800189a <lfs_fromle32>
 800248a:	4602      	mov	r2, r0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	609a      	str	r2, [r3, #8]
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fa03 	bl	80018b0 <lfs_tole32>
 80024aa:	4602      	mov	r2, r0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff f9fb 	bl	80018b0 <lfs_tole32>
 80024ba:	4602      	mov	r2, r0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff f9f3 	bl	80018b0 <lfs_tole32>
 80024ca:	4602      	mov	r2, r0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	609a      	str	r2, [r3, #8]
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff f9d8 	bl	800189a <lfs_fromle32>
 80024ea:	4602      	mov	r2, r0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff f9d0 	bl	800189a <lfs_fromle32>
 80024fa:	4602      	mov	r2, r0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	605a      	str	r2, [r3, #4]
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff f9cb 	bl	80018b0 <lfs_tole32>
 800251a:	4602      	mov	r2, r0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff f9c3 	bl	80018b0 <lfs_tole32>
 800252a:	4602      	mov	r2, r0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	605a      	str	r2, [r3, #4]
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff f9a8 	bl	800189a <lfs_fromle32>
 800254a:	4602      	mov	r2, r0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff f9a0 	bl	800189a <lfs_fromle32>
 800255a:	4602      	mov	r2, r0
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	605a      	str	r2, [r3, #4]
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff f99b 	bl	80018b0 <lfs_tole32>
 800257a:	4602      	mov	r2, r0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff f993 	bl	80018b0 <lfs_tole32>
 800258a:	4602      	mov	r2, r0
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	605a      	str	r2, [r3, #4]
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff f978 	bl	800189a <lfs_fromle32>
 80025aa:	4602      	mov	r2, r0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff f970 	bl	800189a <lfs_fromle32>
 80025ba:	4602      	mov	r2, r0
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff f968 	bl	800189a <lfs_fromle32>
 80025ca:	4602      	mov	r2, r0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff f960 	bl	800189a <lfs_fromle32>
 80025da:	4602      	mov	r2, r0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff f958 	bl	800189a <lfs_fromle32>
 80025ea:	4602      	mov	r2, r0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff f950 	bl	800189a <lfs_fromle32>
 80025fa:	4602      	mov	r2, r0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	615a      	str	r2, [r3, #20]
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff f94b 	bl	80018b0 <lfs_tole32>
 800261a:	4602      	mov	r2, r0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff f943 	bl	80018b0 <lfs_tole32>
 800262a:	4602      	mov	r2, r0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff f93b 	bl	80018b0 <lfs_tole32>
 800263a:	4602      	mov	r2, r0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff f933 	bl	80018b0 <lfs_tole32>
 800264a:	4602      	mov	r2, r0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff f92b 	bl	80018b0 <lfs_tole32>
 800265a:	4602      	mov	r2, r0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff f923 	bl	80018b0 <lfs_tole32>
 800266a:	4602      	mov	r2, r0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	615a      	str	r2, [r3, #20]
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	e009      	b.n	800269c <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d101      	bne.n	8002696 <lfs_mlist_isopen+0x1e>
            return true;
 8002692:	2301      	movs	r3, #1
 8002694:	e007      	b.n	80026a6 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f1      	bne.n	8002688 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 80026b2:	b480      	push	{r7}
 80026b4:	b085      	sub	sp, #20
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3328      	adds	r3, #40	@ 0x28
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	e00d      	b.n	80026e0 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d105      	bne.n	80026da <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	601a      	str	r2, [r3, #0]
            break;
 80026d8:	e007      	b.n	80026ea <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1ed      	bne.n	80026c4 <lfs_mlist_remove+0x12>
        }
    }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 8002724:	4b03      	ldr	r3, [pc, #12]	@ (8002734 <lfs_fs_disk_version+0x18>)
    }
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	00020001 	.word	0x00020001

08002738 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff ffeb 	bl	800271c <lfs_fs_disk_version>
 8002746:	4603      	mov	r3, r0
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	b29b      	uxth	r3, r3

}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ffdd 	bl	800271c <lfs_fs_disk_version>
 8002762:	4603      	mov	r3, r0
 8002764:	b29b      	uxth	r3, r3
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	661a      	str	r2, [r3, #96]	@ 0x60
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->lookahead.next = 0;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff ffe5 	bl	800276e <lfs_alloc_ckpoint>
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027c6:	4413      	add	r3, r2
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 80027cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80027d0:	fb01 f202 	mul.w	r2, r1, r2
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d212      	bcs.n	8002808 <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	08db      	lsrs	r3, r3, #3
 80027ea:	441a      	add	r2, r3
 80027ec:	7811      	ldrb	r1, [r2, #0]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	f002 0207 	and.w	r2, r2, #7
 80027f4:	2001      	movs	r0, #1
 80027f6:	fa00 f202 	lsl.w	r2, r0, r2
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8002800:	4403      	add	r3, r0
 8002802:	430a      	orrs	r2, r1
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002828:	4413      	add	r3, r2
            % lfs->block_count;
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800282e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002832:	fb01 f202 	mul.w	r2, r1, r2
 8002836:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs->lookahead.next = 0;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    lfs->lookahead.size = lfs_min(
 8002848:	00da      	lsls	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800284e:	4619      	mov	r1, r3
 8002850:	4610      	mov	r0, r2
 8002852:	f7fe ffb2 	bl	80017ba <lfs_min>
 8002856:	4602      	mov	r2, r0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	659a      	str	r2, [r3, #88]	@ 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002866:	461a      	mov	r2, r3
 8002868:	2100      	movs	r1, #0
 800286a:	f006 f8f3 	bl	8008a54 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 800286e:	2301      	movs	r3, #1
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	4909      	ldr	r1, [pc, #36]	@ (8002898 <lfs_alloc_scan+0x80>)
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f004 ffb9 	bl	80077ec <lfs_fs_traverse_>
 800287a:	60f8      	str	r0, [r7, #12]
    if (err) {
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d004      	beq.n	800288c <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff ff81 	bl	800278a <lfs_alloc_drop>
        return err;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	e000      	b.n	800288e <lfs_alloc_scan+0x76>
    }

    return 0;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	080027ad 	.word	0x080027ad

0800289c <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 80028a6:	e04d      	b.n	8002944 <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b0:	08db      	lsrs	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028bc:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d131      	bne.n	8002930 <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d4:	4413      	add	r3, r2
                        % lfs->block_count;
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80028da:	fbb3 f1f2 	udiv	r1, r3, r2
 80028de:	fb01 f202 	mul.w	r2, r1, r2
 80028e2:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f6:	1e5a      	subs	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	661a      	str	r2, [r3, #96]	@ 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002904:	429a      	cmp	r2, r3
 8002906:	d211      	bcs.n	800292c <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002910:	08db      	lsrs	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291c:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1dd      	bne.n	80028e8 <lfs_alloc+0x4c>
                        return 0;
 800292c:	2300      	movs	r3, #0
 800292e:	e032      	b.n	8002996 <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800293e:	1e5a      	subs	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	661a      	str	r2, [r3, #96]	@ 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294c:	429a      	cmp	r2, r3
 800294e:	d3ab      	bcc.n	80028a8 <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002954:	2b00      	cmp	r3, #0
 8002956:	d116      	bne.n	8002986 <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002960:	4413      	add	r3, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8002966:	fbb3 f1f2 	udiv	r1, r3, r2
 800296a:	fb01 f202 	mul.w	r2, r1, r2
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	4a0b      	ldr	r2, [pc, #44]	@ (80029a0 <lfs_alloc+0x104>)
 8002972:	9200      	str	r2, [sp, #0]
 8002974:	f240 22b1 	movw	r2, #689	@ 0x2b1
 8002978:	490a      	ldr	r1, [pc, #40]	@ (80029a4 <lfs_alloc+0x108>)
 800297a:	480b      	ldr	r0, [pc, #44]	@ (80029a8 <lfs_alloc+0x10c>)
 800297c:	f006 f848 	bl	8008a10 <iprintf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 8002980:	f06f 031b 	mvn.w	r3, #27
 8002984:	e007      	b.n	8002996 <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff ff46 	bl	8002818 <lfs_alloc_scan>
 800298c:	60f8      	str	r0, [r7, #12]
        if(err) {
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d088      	beq.n	80028a6 <lfs_alloc+0xa>
            return err;
 8002994:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	08009908 	.word	0x08009908
 80029a4:	080097f8 	.word	0x080097f8
 80029a8:	080098dc 	.word	0x080098dc

080029ac <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b08f      	sub	sp, #60	@ 0x3c
 80029b0:	af04      	add	r7, sp, #16
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	333c      	adds	r3, #60	@ 0x3c
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	4611      	mov	r1, r2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fd20 	bl	8002418 <lfs_gstate_hasmovehere>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 80ca 	beq.w	8002b74 <lfs_dir_getslice+0x1c8>
            lfs_tag_id(gmask) != 0) {
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff fc5d 	bl	80022a0 <lfs_tag_id>
 80029e6:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80c3 	beq.w	8002b74 <lfs_dir_getslice+0x1c8>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fc54 	bl	80022a0 <lfs_tag_id>
 80029f8:	4603      	mov	r3, r0
 80029fa:	461c      	mov	r4, r3
 80029fc:	6838      	ldr	r0, [r7, #0]
 80029fe:	f7ff fc4f 	bl	80022a0 <lfs_tag_id>
 8002a02:	4603      	mov	r3, r0
 8002a04:	429c      	cmp	r4, r3
 8002a06:	d102      	bne.n	8002a0e <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 8002a08:	f06f 0301 	mvn.w	r3, #1
 8002a0c:	e0be      	b.n	8002b8c <lfs_dir_getslice+0x1e0>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fc44 	bl	80022a0 <lfs_tag_id>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	461c      	mov	r4, r3
 8002a1c:	6838      	ldr	r0, [r7, #0]
 8002a1e:	f7ff fc3f 	bl	80022a0 <lfs_tag_id>
 8002a22:	4603      	mov	r3, r0
 8002a24:	429c      	cmp	r4, r3
 8002a26:	f080 80a5 	bcs.w	8002b74 <lfs_dir_getslice+0x1c8>
            gdiff -= LFS_MKTAG(0, 1, 0);
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002a30:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8002a32:	e09f      	b.n	8002b74 <lfs_dir_getslice+0x1c8>
        off -= lfs_tag_dsize(ntag);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fc4f 	bl	80022da <lfs_tag_dsize>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8002a48:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 8002a4e:	2204      	movs	r2, #4
 8002a50:	9203      	str	r2, [sp, #12]
 8002a52:	f107 0210 	add.w	r2, r7, #16
 8002a56:	9202      	str	r2, [sp, #8]
 8002a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a5a:	9201      	str	r2, [sp, #4]
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	2304      	movs	r3, #4
 8002a60:	460a      	mov	r2, r1
 8002a62:	2100      	movs	r1, #0
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f7fe ff83 	bl	8001970 <lfs_bd_read>
 8002a6a:	61b8      	str	r0, [r7, #24]
        if (err) {
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <lfs_dir_getslice+0xca>
            return err;
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	e08a      	b.n	8002b8c <lfs_dir_getslice+0x1e0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe ff25 	bl	80018c8 <lfs_frombe32>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	4053      	eors	r3, r2
 8002a84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a88:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff fc08 	bl	80022a0 <lfs_tag_id>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d02b      	beq.n	8002aee <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8002a96:	69f8      	ldr	r0, [r7, #28]
 8002a98:	f7ff fbb8 	bl	800220c <lfs_tag_type1>
 8002a9c:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8002a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aa2:	d124      	bne.n	8002aee <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8002aa4:	69f8      	ldr	r0, [r7, #28]
 8002aa6:	f7ff fbfb 	bl	80022a0 <lfs_tag_id>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	461c      	mov	r4, r3
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fbf3 	bl	80022a0 <lfs_tag_id>
 8002aba:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8002abc:	429c      	cmp	r4, r3
 8002abe:	d816      	bhi.n	8002aee <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	1ad2      	subs	r2, r2, r3
 8002ac6:	4b33      	ldr	r3, [pc, #204]	@ (8002b94 <lfs_dir_getslice+0x1e8>)
 8002ac8:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8002aca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ace:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d102      	bne.n	8002ade <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 8002ad8:	f06f 0301 	mvn.w	r3, #1
 8002adc:	e056      	b.n	8002b8c <lfs_dir_getslice+0x1e0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002ade:	69f8      	ldr	r0, [r7, #28]
 8002ae0:	f7ff fbd1 	bl	8002286 <lfs_tag_splice>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	029a      	lsls	r2, r3, #10
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	4413      	add	r3, r2
 8002aec:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	401a      	ands	r2, r3
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	6839      	ldr	r1, [r7, #0]
 8002af8:	1ac9      	subs	r1, r1, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	400b      	ands	r3, r1
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d138      	bne.n	8002b74 <lfs_dir_getslice+0x1c8>
            if (lfs_tag_isdelete(tag)) {
 8002b02:	69f8      	ldr	r0, [r7, #28]
 8002b04:	f7ff fb6f 	bl	80021e6 <lfs_tag_isdelete>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <lfs_dir_getslice+0x168>
                return LFS_ERR_NOENT;
 8002b0e:	f06f 0301 	mvn.w	r3, #1
 8002b12:	e03b      	b.n	8002b8c <lfs_dir_getslice+0x1e0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8002b14:	69f8      	ldr	r0, [r7, #28]
 8002b16:	f7ff fbd3 	bl	80022c0 <lfs_tag_size>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe fe4b 	bl	80017ba <lfs_min>
 8002b24:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8002b26:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b30:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8002b32:	3204      	adds	r2, #4
 8002b34:	6979      	ldr	r1, [r7, #20]
 8002b36:	9103      	str	r1, [sp, #12]
 8002b38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b3a:	9102      	str	r1, [sp, #8]
 8002b3c:	9201      	str	r2, [sp, #4]
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	4602      	mov	r2, r0
 8002b44:	2100      	movs	r1, #0
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f7fe ff12 	bl	8001970 <lfs_bd_read>
 8002b4c:	61b8      	str	r0, [r7, #24]
            if (err) {
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <lfs_dir_getslice+0x1ac>
                return err;
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	e019      	b.n	8002b8c <lfs_dir_getslice+0x1e0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8002b58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	18d0      	adds	r0, r2, r3
 8002b5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	2100      	movs	r1, #0
 8002b68:	f005 ff74 	bl	8008a54 <memset>

            return tag + gdiff;
 8002b6c:	6a3a      	ldr	r2, [r7, #32]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	4413      	add	r3, r2
 8002b72:	e00b      	b.n	8002b8c <lfs_dir_getslice+0x1e0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fbaf 	bl	80022da <lfs_tag_dsize>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	3304      	adds	r3, #4
 8002b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b82:	429a      	cmp	r2, r3
 8002b84:	f4bf af56 	bcs.w	8002a34 <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 8002b88:	f06f 0301 	mvn.w	r3, #1
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	372c      	adds	r7, #44	@ 0x2c
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd90      	pop	{r4, r7, pc}
 8002b94:	000ffc00 	.word	0x000ffc00

08002b98 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af04      	add	r7, sp, #16
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8002ba6:	6838      	ldr	r0, [r7, #0]
 8002ba8:	f7ff fb8a 	bl	80022c0 <lfs_tag_size>
 8002bac:	4603      	mov	r3, r0
 8002bae:	9302      	str	r3, [sp, #8]
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f7ff fef4 	bl	80029ac <lfs_dir_getslice>
 8002bc4:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b08c      	sub	sp, #48	@ 0x30
 8002bd2:	af04      	add	r7, sp, #16
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bde:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8002be0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002be4:	441a      	add	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	f240 80c0 	bls.w	8002d72 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8002bf2:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8002bf6:	e0c1      	b.n	8002d7c <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8002bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bfa:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d03f      	beq.n	8002c82 <lfs_dir_getread+0xb4>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f113 0f02 	cmn.w	r3, #2
 8002c0a:	d13a      	bne.n	8002c82 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8002c16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d232      	bcs.n	8002c82 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d324      	bcc.n	8002c70 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6859      	ldr	r1, [r3, #4]
 8002c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c30:	1acb      	subs	r3, r1, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	4619      	mov	r1, r3
 8002c36:	69b8      	ldr	r0, [r7, #24]
 8002c38:	f7fe fdbf 	bl	80017ba <lfs_min>
 8002c3c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002c48:	1acb      	subs	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	69f8      	ldr	r0, [r7, #28]
 8002c52:	f005 ff72 	bl	8008b3a <memcpy>

                data += diff;
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	61fb      	str	r3, [r7, #28]
                off += diff;
 8002c5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	4413      	add	r3, r2
 8002c64:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8002c66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8002c6e:	e080      	b.n	8002d72 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	4619      	mov	r1, r3
 8002c7a:	69b8      	ldr	r0, [r7, #24]
 8002c7c:	f7fe fd9d 	bl	80017ba <lfs_min>
 8002c80:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f113 0f02 	cmn.w	r3, #2
 8002c8a:	d13a      	bne.n	8002d02 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8002c96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d232      	bcs.n	8002d02 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d324      	bcc.n	8002cf0 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6859      	ldr	r1, [r3, #4]
 8002cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb0:	1acb      	subs	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	69b8      	ldr	r0, [r7, #24]
 8002cb8:	f7fe fd7f 	bl	80017ba <lfs_min>
 8002cbc:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002cc8:	1acb      	subs	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	69f8      	ldr	r0, [r7, #28]
 8002cd2:	f005 ff32 	bl	8008b3a <memcpy>

                data += diff;
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	4413      	add	r3, r2
 8002cdc:	61fb      	str	r3, [r7, #28]
                off += diff;
 8002cde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8002ce6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8002cee:	e040      	b.n	8002d72 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	69b8      	ldr	r0, [r7, #24]
 8002cfc:	f7fe fd5d 	bl	80017ba <lfs_min>
 8002d00:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	f06f 0201 	mvn.w	r2, #1
 8002d08:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	4619      	mov	r1, r3
 8002d12:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002d14:	f7fe fd61 	bl	80017da <lfs_aligndown>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8002d1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d22:	441a      	add	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	f7fe fd69 	bl	8001804 <lfs_alignup>
 8002d32:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	f7fe fd3c 	bl	80017ba <lfs_min>
 8002d42:	4602      	mov	r2, r0
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8002d50:	6839      	ldr	r1, [r7, #0]
 8002d52:	6889      	ldr	r1, [r1, #8]
 8002d54:	9102      	str	r1, [sp, #8]
 8002d56:	9201      	str	r2, [sp, #4]
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d5e:	68b9      	ldr	r1, [r7, #8]
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f7ff fe23 	bl	80029ac <lfs_dir_getslice>
 8002d66:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	da01      	bge.n	8002d72 <lfs_dir_getread+0x1a4>
            return err;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	e004      	b.n	8002d7c <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8002d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f47f af3f 	bne.w	8002bf8 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3720      	adds	r7, #32
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <lfs_dir_traverse_filter+0x1e>
 8002d9e:	4b24      	ldr	r3, [pc, #144]	@ (8002e30 <lfs_dir_traverse_filter+0xac>)
 8002da0:	e000      	b.n	8002da4 <lfs_dir_traverse_filter+0x20>
 8002da2:	4b24      	ldr	r3, [pc, #144]	@ (8002e34 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8002da4:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	405a      	eors	r2, r3
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d014      	beq.n	8002de0 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fa13 	bl	80021e6 <lfs_tag_isdelete>
 8002dc0:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10c      	bne.n	8002de0 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4a19      	ldr	r2, [pc, #100]	@ (8002e30 <lfs_dir_traverse_filter+0xac>)
 8002dca:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	6819      	ldr	r1, [r3, #0]
 8002dd0:	4b19      	ldr	r3, [pc, #100]	@ (8002e38 <lfs_dir_traverse_filter+0xb4>)
 8002dd2:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8002dd4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8002dd8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d104      	bne.n	8002dea <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
        return true;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e01e      	b.n	8002e28 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8002dea:	68b8      	ldr	r0, [r7, #8]
 8002dec:	f7ff fa0e 	bl	800220c <lfs_tag_type1>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002df6:	d116      	bne.n	8002e26 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8002df8:	68b8      	ldr	r0, [r7, #8]
 8002dfa:	f7ff fa51 	bl	80022a0 <lfs_tag_id>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	461c      	mov	r4, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fa4a 	bl	80022a0 <lfs_tag_id>
 8002e0c:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8002e0e:	429c      	cmp	r4, r3
 8002e10:	d809      	bhi.n	8002e26 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002e12:	68b8      	ldr	r0, [r7, #8]
 8002e14:	f7ff fa37 	bl	8002286 <lfs_tag_splice>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	029a      	lsls	r2, r3, #10
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	441a      	add	r2, r3
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	601a      	str	r2, [r3, #0]
    }

    return false;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd90      	pop	{r4, r7, pc}
 8002e30:	7ffffc00 	.word	0x7ffffc00
 8002e34:	700ffc00 	.word	0x700ffc00
 8002e38:	000ffc00 	.word	0x000ffc00

08002e3c <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b0c1      	sub	sp, #260	@ 0x104
 8002e40:	af04      	add	r7, sp, #16
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 8002e50:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8002e5a:	6838      	ldr	r0, [r7, #0]
 8002e5c:	f7ff fa3d 	bl	80022da <lfs_tag_dsize>
 8002e60:	4602      	mov	r2, r0
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	441a      	add	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d237      	bcs.n	8002ede <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 8002e6e:	6838      	ldr	r0, [r7, #0]
 8002e70:	f7ff fa33 	bl	80022da <lfs_tag_dsize>
 8002e74:	4602      	mov	r2, r0
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4413      	add	r3, r2
 8002e7a:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8002e7c:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8002e82:	2204      	movs	r2, #4
 8002e84:	9203      	str	r2, [sp, #12]
 8002e86:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002e8a:	9202      	str	r2, [sp, #8]
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	9201      	str	r2, [sp, #4]
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	2304      	movs	r3, #4
 8002e94:	460a      	mov	r2, r1
 8002e96:	2100      	movs	r1, #0
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f7fe fd69 	bl	8001970 <lfs_bd_read>
 8002e9e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 8002ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <lfs_dir_traverse+0x74>
                    return err;
 8002eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eae:	e3a5      	b.n	80035fc <lfs_dir_traverse+0x7c0>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8002eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe fd08 	bl	80018c8 <lfs_frombe32>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	4053      	eors	r3, r2
 8002ebe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ec2:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 8002ed0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002ed4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 8002ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	e01b      	b.n	8002f16 <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 8002ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	dd13      	ble.n	8002f0e <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 8002ee6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 8002eee:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 8002ef8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002efc:	3308      	adds	r3, #8
 8002efe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 8002f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f06:	3b01      	subs	r3, #1
 8002f08:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002f0c:	e003      	b.n	8002f16 <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 8002f14:	e2a1      	b.n	800345a <lfs_dir_traverse+0x61e>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8002f16:	4b7e      	ldr	r3, [pc, #504]	@ (8003110 <lfs_dir_traverse+0x2d4>)
 8002f18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8002f1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f22:	405a      	eors	r2, r3
 8002f24:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8002f28:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002f2c:	400b      	ands	r3, r1
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f040 8284 	bne.w	800343e <lfs_dir_traverse+0x602>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8002f36:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8002f3a:	f7ff f9b1 	bl	80022a0 <lfs_tag_id>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80ef 	beq.w	8003124 <lfs_dir_traverse+0x2e8>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8002f46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d906      	bls.n	8002f5c <lfs_dir_traverse+0x120>
 8002f4e:	4b71      	ldr	r3, [pc, #452]	@ (8003114 <lfs_dir_traverse+0x2d8>)
 8002f50:	4a71      	ldr	r2, [pc, #452]	@ (8003118 <lfs_dir_traverse+0x2dc>)
 8002f52:	f240 31b6 	movw	r1, #950	@ 0x3b6
 8002f56:	4871      	ldr	r0, [pc, #452]	@ (800311c <lfs_dir_traverse+0x2e0>)
 8002f58:	f005 fbaa 	bl	80086b0 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8002f5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f5e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002f62:	4613      	mov	r3, r2
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	33f0      	adds	r3, #240	@ 0xf0
 8002f6c:	443b      	add	r3, r7
 8002f6e:	3b98      	subs	r3, #152	@ 0x98
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	33f0      	adds	r3, #240	@ 0xf0
 8002f82:	443b      	add	r3, r7
 8002f84:	3b94      	subs	r3, #148	@ 0x94
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	33f0      	adds	r3, #240	@ 0xf0
 8002f98:	443b      	add	r3, r7
 8002f9a:	3b90      	subs	r3, #144	@ 0x90
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	33f0      	adds	r3, #240	@ 0xf0
 8002fae:	443b      	add	r3, r7
 8002fb0:	3b8c      	subs	r3, #140	@ 0x8c
 8002fb2:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	33f0      	adds	r3, #240	@ 0xf0
 8002fc6:	443b      	add	r3, r7
 8002fc8:	3b88      	subs	r3, #136	@ 0x88
 8002fca:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	33f0      	adds	r3, #240	@ 0xf0
 8002fde:	443b      	add	r3, r7
 8002fe0:	3b84      	subs	r3, #132	@ 0x84
 8002fe2:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002fec:	4613      	mov	r3, r2
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	1a9b      	subs	r3, r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	33f0      	adds	r3, #240	@ 0xf0
 8002ff6:	443b      	add	r3, r7
 8002ff8:	3b80      	subs	r3, #128	@ 0x80
 8002ffa:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003004:	4613      	mov	r3, r2
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	33f0      	adds	r3, #240	@ 0xf0
 800300e:	443b      	add	r3, r7
 8003010:	3b7c      	subs	r3, #124	@ 0x7c
 8003012:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 8003016:	801a      	strh	r2, [r3, #0]
 8003018:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	33f0      	adds	r3, #240	@ 0xf0
 8003026:	443b      	add	r3, r7
 8003028:	3b7a      	subs	r3, #122	@ 0x7a
 800302a:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 800302e:	801a      	strh	r2, [r3, #0]
 8003030:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003034:	4613      	mov	r3, r2
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	33f0      	adds	r3, #240	@ 0xf0
 800303e:	443b      	add	r3, r7
 8003040:	3b78      	subs	r3, #120	@ 0x78
 8003042:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 8003046:	801a      	strh	r2, [r3, #0]
 8003048:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800304c:	4613      	mov	r3, r2
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	33f0      	adds	r3, #240	@ 0xf0
 8003056:	443b      	add	r3, r7
 8003058:	3b74      	subs	r3, #116	@ 0x74
 800305a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003064:	4613      	mov	r3, r2
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	33f0      	adds	r3, #240	@ 0xf0
 800306e:	443b      	add	r3, r7
 8003070:	3b70      	subs	r3, #112	@ 0x70
 8003072:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800307c:	4613      	mov	r3, r2
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	33f0      	adds	r3, #240	@ 0xf0
 8003086:	443b      	add	r3, r7
 8003088:	3b6c      	subs	r3, #108	@ 0x6c
 800308a:	6019      	str	r1, [r3, #0]
 800308c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003090:	4613      	mov	r3, r2
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	33f0      	adds	r3, #240	@ 0xf0
 800309a:	443b      	add	r3, r7
 800309c:	3b68      	subs	r3, #104	@ 0x68
 800309e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80030a8:	4613      	mov	r3, r2
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	33f0      	adds	r3, #240	@ 0xf0
 80030b2:	443b      	add	r3, r7
 80030b4:	3b68      	subs	r3, #104	@ 0x68
 80030b6:	3304      	adds	r3, #4
 80030b8:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80030bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030c0:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 80030c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80030c8:	3301      	adds	r3, #1
 80030ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 80030ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003120 <lfs_dir_traverse+0x2e4>)
 80030ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 80030f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80030f6:	1e5a      	subs	r2, r3, #1
 80030f8:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80030fc:	4613      	mov	r3, r2
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	3328      	adds	r3, #40	@ 0x28
 8003106:	440b      	add	r3, r1
 8003108:	3304      	adds	r3, #4
 800310a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 800310e:	e19d      	b.n	800344c <lfs_dir_traverse+0x610>
 8003110:	7ff00000 	.word	0x7ff00000
 8003114:	0800990c 	.word	0x0800990c
 8003118:	0800a498 	.word	0x0800a498
 800311c:	080097f8 	.word	0x080097f8
 8003120:	08002d85 	.word	0x08002d85
            }
        }

popped:
 8003124:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8003126:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800312a:	f7ff f8b9 	bl	80022a0 <lfs_tag_id>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d015      	beq.n	8003160 <lfs_dir_traverse+0x324>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8003134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff f8b2 	bl	80022a0 <lfs_tag_id>
 800313c:	4603      	mov	r3, r0
 800313e:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8003140:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8003144:	4293      	cmp	r3, r2
 8003146:	f200 817c 	bhi.w	8003442 <lfs_dir_traverse+0x606>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800314a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff f8a7 	bl	80022a0 <lfs_tag_id>
 8003152:	4603      	mov	r3, r0
 8003154:	461a      	mov	r2, r3
 8003156:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 800315a:	4293      	cmp	r3, r2
 800315c:	f240 8171 	bls.w	8003442 <lfs_dir_traverse+0x606>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8003160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff f872 	bl	800224c <lfs_tag_type3>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	f43f ae75 	beq.w	8002e5a <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8003170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff f86a 	bl	800224c <lfs_tag_type3>
 8003178:	4603      	mov	r3, r0
 800317a:	461a      	mov	r2, r3
 800317c:	f240 1301 	movw	r3, #257	@ 0x101
 8003180:	429a      	cmp	r2, r3
 8003182:	f040 80e0 	bne.w	8003346 <lfs_dir_traverse+0x50a>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8003186:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800318a:	4ab1      	ldr	r2, [pc, #708]	@ (8003450 <lfs_dir_traverse+0x614>)
 800318c:	4293      	cmp	r3, r2
 800318e:	f000 815a 	beq.w	8003446 <lfs_dir_traverse+0x60a>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8003192:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003196:	4613      	mov	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	33f0      	adds	r3, #240	@ 0xf0
 80031a0:	443b      	add	r3, r7
 80031a2:	3b98      	subs	r3, #152	@ 0x98
 80031a4:	4618      	mov	r0, r3
 80031a6:	233c      	movs	r3, #60	@ 0x3c
 80031a8:	461a      	mov	r2, r3
 80031aa:	2100      	movs	r1, #0
 80031ac:	f005 fc52 	bl	8008a54 <memset>
 80031b0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80031b4:	4613      	mov	r3, r2
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	33f0      	adds	r3, #240	@ 0xf0
 80031be:	443b      	add	r3, r7
 80031c0:	3b98      	subs	r3, #152	@ 0x98
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	33f0      	adds	r3, #240	@ 0xf0
 80031d4:	443b      	add	r3, r7
 80031d6:	3b94      	subs	r3, #148	@ 0x94
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80031e0:	4613      	mov	r3, r2
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	33f0      	adds	r3, #240	@ 0xf0
 80031ea:	443b      	add	r3, r7
 80031ec:	3b90      	subs	r3, #144	@ 0x90
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	33f0      	adds	r3, #240	@ 0xf0
 8003200:	443b      	add	r3, r7
 8003202:	3b8c      	subs	r3, #140	@ 0x8c
 8003204:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	33f0      	adds	r3, #240	@ 0xf0
 8003218:	443b      	add	r3, r7
 800321a:	3b88      	subs	r3, #136	@ 0x88
 800321c:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003226:	4613      	mov	r3, r2
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	33f0      	adds	r3, #240	@ 0xf0
 8003230:	443b      	add	r3, r7
 8003232:	3b84      	subs	r3, #132	@ 0x84
 8003234:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800323e:	4613      	mov	r3, r2
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	33f0      	adds	r3, #240	@ 0xf0
 8003248:	443b      	add	r3, r7
 800324a:	3b80      	subs	r3, #128	@ 0x80
 800324c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003256:	4613      	mov	r3, r2
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	33f0      	adds	r3, #240	@ 0xf0
 8003260:	443b      	add	r3, r7
 8003262:	3b7c      	subs	r3, #124	@ 0x7c
 8003264:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 8003268:	801a      	strh	r2, [r3, #0]
 800326a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	33f0      	adds	r3, #240	@ 0xf0
 8003278:	443b      	add	r3, r7
 800327a:	3b7a      	subs	r3, #122	@ 0x7a
 800327c:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 8003280:	801a      	strh	r2, [r3, #0]
 8003282:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	33f0      	adds	r3, #240	@ 0xf0
 8003290:	443b      	add	r3, r7
 8003292:	3b78      	subs	r3, #120	@ 0x78
 8003294:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 8003298:	801a      	strh	r2, [r3, #0]
 800329a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	33f0      	adds	r3, #240	@ 0xf0
 80032a8:	443b      	add	r3, r7
 80032aa:	3b74      	subs	r3, #116	@ 0x74
 80032ac:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	33f0      	adds	r3, #240	@ 0xf0
 80032c0:	443b      	add	r3, r7
 80032c2:	3b70      	subs	r3, #112	@ 0x70
 80032c4:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80032c8:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80032ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80032ce:	3301      	adds	r3, #1
 80032d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 80032d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe fff2 	bl	80022c0 <lfs_tag_size>
 80032dc:	4603      	mov	r3, r0
 80032de:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 80032e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fe ffdb 	bl	80022a0 <lfs_tag_id>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 80032f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f4:	60bb      	str	r3, [r7, #8]
            off = 0;
 80032f6:	2300      	movs	r3, #0
 80032f8:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 80032fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032fe:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8003300:	2300      	movs	r3, #0
 8003302:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 8003306:	2300      	movs	r3, #0
 8003308:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 800330c:	4b51      	ldr	r3, [pc, #324]	@ (8003454 <lfs_dir_traverse+0x618>)
 800330e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8003312:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003316:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 800331a:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800331e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 8003322:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8003326:	3301      	adds	r3, #1
 8003328:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 800332c:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 8003330:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	b29a      	uxth	r2, r3
 8003338:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800333c:	4413      	add	r3, r2
 800333e:	b29b      	uxth	r3, r3
 8003340:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 8003344:	e589      	b.n	8002e5a <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8003346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003348:	4618      	mov	r0, r3
 800334a:	f7fe ff7f 	bl	800224c <lfs_tag_type3>
 800334e:	4603      	mov	r3, r0
 8003350:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8003354:	d159      	bne.n	800340a <lfs_dir_traverse+0x5ce>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8003356:	2300      	movs	r3, #0
 8003358:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800335c:	e04b      	b.n	80033f6 <lfs_dir_traverse+0x5ba>
                const struct lfs_attr *a = buffer;
 800335e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003362:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8003366:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800336a:	4613      	mov	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	461a      	mov	r2, r3
 8003374:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003378:	4413      	add	r3, r2
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003380:	051c      	lsls	r4, r3, #20
 8003382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003384:	4618      	mov	r0, r3
 8003386:	f7fe ff8b 	bl	80022a0 <lfs_tag_id>
 800338a:	4603      	mov	r3, r0
 800338c:	461a      	mov	r2, r3
 800338e:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 8003392:	4413      	add	r3, r2
 8003394:	029b      	lsls	r3, r3, #10
 8003396:	ea44 0103 	orr.w	r1, r4, r3
 800339a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800339e:	4613      	mov	r3, r2
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	461a      	mov	r2, r3
 80033a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033ac:	4413      	add	r3, r2
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80033b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80033b6:	4613      	mov	r3, r2
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	461a      	mov	r2, r3
 80033c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033c4:	4413      	add	r3, r2
 80033c6:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80033c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033cc:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80033d0:	4798      	blx	r3
 80033d2:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 80033d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	da02      	bge.n	80033e4 <lfs_dir_traverse+0x5a8>
                    return res;
 80033de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80033e2:	e10b      	b.n	80035fc <lfs_dir_traverse+0x7c0>
                }

                if (res) {
 80033e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d12e      	bne.n	800344a <lfs_dir_traverse+0x60e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80033ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033f0:	3301      	adds	r3, #1
 80033f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80033f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fe ff61 	bl	80022c0 <lfs_tag_size>
 80033fe:	4602      	mov	r2, r0
 8003400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003404:	4293      	cmp	r3, r2
 8003406:	d3aa      	bcc.n	800335e <lfs_dir_traverse+0x522>
 8003408:	e527      	b.n	8002e5a <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800340a:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 800340e:	029a      	lsls	r2, r3, #10
 8003410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003412:	18d1      	adds	r1, r2, r3
 8003414:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003418:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800341c:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8003420:	4798      	blx	r3
 8003422:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 8003426:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800342a:	2b00      	cmp	r3, #0
 800342c:	da02      	bge.n	8003434 <lfs_dir_traverse+0x5f8>
                return res;
 800342e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003432:	e0e3      	b.n	80035fc <lfs_dir_traverse+0x7c0>
            }

            if (res) {
 8003434:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10d      	bne.n	8003458 <lfs_dir_traverse+0x61c>
 800343c:	e50d      	b.n	8002e5a <lfs_dir_traverse+0x1e>
                continue;
 800343e:	bf00      	nop
 8003440:	e50b      	b.n	8002e5a <lfs_dir_traverse+0x1e>
            continue;
 8003442:	bf00      	nop
 8003444:	e509      	b.n	8002e5a <lfs_dir_traverse+0x1e>
                continue;
 8003446:	bf00      	nop
 8003448:	e507      	b.n	8002e5a <lfs_dir_traverse+0x1e>
                    break;
 800344a:	bf00      	nop
        {
 800344c:	e505      	b.n	8002e5a <lfs_dir_traverse+0x1e>
 800344e:	bf00      	nop
 8003450:	08002d85 	.word	0x08002d85
 8003454:	600ffc00 	.word	0x600ffc00
                break;
 8003458:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800345a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80ca 	beq.w	80035f8 <lfs_dir_traverse+0x7bc>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8003464:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003468:	1e5a      	subs	r2, r3, #1
 800346a:	4613      	mov	r3, r2
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	33f0      	adds	r3, #240	@ 0xf0
 8003474:	443b      	add	r3, r7
 8003476:	3b98      	subs	r3, #152	@ 0x98
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 800347c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003480:	1e5a      	subs	r2, r3, #1
 8003482:	4613      	mov	r3, r2
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	33f0      	adds	r3, #240	@ 0xf0
 800348c:	443b      	add	r3, r7
 800348e:	3b94      	subs	r3, #148	@ 0x94
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8003494:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003498:	1e5a      	subs	r2, r3, #1
 800349a:	4613      	mov	r3, r2
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	33f0      	adds	r3, #240	@ 0xf0
 80034a4:	443b      	add	r3, r7
 80034a6:	3b90      	subs	r3, #144	@ 0x90
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 80034ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80034b0:	1e5a      	subs	r2, r3, #1
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	33f0      	adds	r3, #240	@ 0xf0
 80034bc:	443b      	add	r3, r7
 80034be:	3b8c      	subs	r3, #140	@ 0x8c
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 80034c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80034ca:	1e5a      	subs	r2, r3, #1
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	33f0      	adds	r3, #240	@ 0xf0
 80034d6:	443b      	add	r3, r7
 80034d8:	3b88      	subs	r3, #136	@ 0x88
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 80034e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80034e4:	1e5a      	subs	r2, r3, #1
 80034e6:	4613      	mov	r3, r2
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	33f0      	adds	r3, #240	@ 0xf0
 80034f0:	443b      	add	r3, r7
 80034f2:	3b84      	subs	r3, #132	@ 0x84
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 80034fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80034fe:	1e5a      	subs	r2, r3, #1
 8003500:	4613      	mov	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	33f0      	adds	r3, #240	@ 0xf0
 800350a:	443b      	add	r3, r7
 800350c:	3b80      	subs	r3, #128	@ 0x80
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 8003514:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003518:	1e5a      	subs	r2, r3, #1
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	33f0      	adds	r3, #240	@ 0xf0
 8003524:	443b      	add	r3, r7
 8003526:	3b7c      	subs	r3, #124	@ 0x7c
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 800352e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003532:	1e5a      	subs	r2, r3, #1
 8003534:	4613      	mov	r3, r2
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	33f0      	adds	r3, #240	@ 0xf0
 800353e:	443b      	add	r3, r7
 8003540:	3b7a      	subs	r3, #122	@ 0x7a
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 8003548:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800354c:	1e5a      	subs	r2, r3, #1
 800354e:	4613      	mov	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	33f0      	adds	r3, #240	@ 0xf0
 8003558:	443b      	add	r3, r7
 800355a:	3b78      	subs	r3, #120	@ 0x78
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 8003562:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003566:	1e5a      	subs	r2, r3, #1
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	33f0      	adds	r3, #240	@ 0xf0
 8003572:	443b      	add	r3, r7
 8003574:	3b74      	subs	r3, #116	@ 0x74
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 800357c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003580:	1e5a      	subs	r2, r3, #1
 8003582:	4613      	mov	r3, r2
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	33f0      	adds	r3, #240	@ 0xf0
 800358c:	443b      	add	r3, r7
 800358e:	3b70      	subs	r3, #112	@ 0x70
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 8003596:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800359a:	1e5a      	subs	r2, r3, #1
 800359c:	4613      	mov	r3, r2
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	33f0      	adds	r3, #240	@ 0xf0
 80035a6:	443b      	add	r3, r7
 80035a8:	3b6c      	subs	r3, #108	@ 0x6c
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 80035ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80035b2:	1e5a      	subs	r2, r3, #1
 80035b4:	4613      	mov	r3, r2
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	33f0      	adds	r3, #240	@ 0xf0
 80035be:	443b      	add	r3, r7
 80035c0:	3b68      	subs	r3, #104	@ 0x68
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 80035c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80035cc:	1e5a      	subs	r2, r3, #1
 80035ce:	4613      	mov	r3, r2
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	33f0      	adds	r3, #240	@ 0xf0
 80035d8:	443b      	add	r3, r7
 80035da:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 80035de:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80035e2:	3204      	adds	r2, #4
 80035e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035e8:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 80035ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80035f0:	3b01      	subs	r3, #1
 80035f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 80035f6:	e596      	b.n	8003126 <lfs_dir_traverse+0x2ea>
    } else {
        return res;
 80035f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	37f4      	adds	r7, #244	@ 0xf4
 8003600:	46bd      	mov	sp, r7
 8003602:	bd90      	pop	{r4, r7, pc}

08003604 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8003604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003606:	b0a5      	sub	sp, #148	@ 0x94
 8003608:	af04      	add	r7, sp, #16
 800360a:	6178      	str	r0, [r7, #20]
 800360c:	6139      	str	r1, [r7, #16]
 800360e:	60fa      	str	r2, [r7, #12]
 8003610:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8003612:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003616:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00f      	beq.n	8003640 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003628:	429a      	cmp	r2, r3
 800362a:	d206      	bcs.n	800363a <lfs_dir_fetchmatch+0x36>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	3304      	adds	r3, #4
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003636:	429a      	cmp	r2, r3
 8003638:	d302      	bcc.n	8003640 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 800363a:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800363e:	e3a4      	b.n	8003d8a <lfs_dir_fetchmatch+0x786>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8003640:	2300      	movs	r3, #0
 8003642:	647b      	str	r3, [r7, #68]	@ 0x44
 8003644:	2300      	movs	r3, #0
 8003646:	64bb      	str	r3, [r7, #72]	@ 0x48
    int r = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 800364c:	2300      	movs	r3, #0
 800364e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003650:	e05a      	b.n	8003708 <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 8003652:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8003654:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800365c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800365e:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8003662:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003664:	0092      	lsls	r2, r2, #2
 8003666:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8003668:	2104      	movs	r1, #4
 800366a:	9103      	str	r1, [sp, #12]
 800366c:	9202      	str	r2, [sp, #8]
 800366e:	2200      	movs	r2, #0
 8003670:	9201      	str	r2, [sp, #4]
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	2304      	movs	r3, #4
 8003676:	4602      	mov	r2, r0
 8003678:	2100      	movs	r1, #0
 800367a:	6978      	ldr	r0, [r7, #20]
 800367c:	f7fe f978 	bl	8001970 <lfs_bd_read>
 8003680:	64f8      	str	r0, [r7, #76]	@ 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 8003682:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	3378      	adds	r3, #120	@ 0x78
 8003688:	f107 0208 	add.w	r2, r7, #8
 800368c:	4413      	add	r3, r2
 800368e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe f901 	bl	800189a <lfs_fromle32>
 8003698:	4602      	mov	r2, r0
 800369a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	3378      	adds	r3, #120	@ 0x78
 80036a0:	f107 0108 	add.w	r1, r7, #8
 80036a4:	440b      	add	r3, r1
 80036a6:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 80036aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <lfs_dir_fetchmatch+0xb8>
 80036b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036b2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80036b6:	d001      	beq.n	80036bc <lfs_dir_fetchmatch+0xb8>
            return err;
 80036b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036ba:	e366      	b.n	8003d8a <lfs_dir_fetchmatch+0x786>
        }

        if (err != LFS_ERR_CORRUPT &&
 80036bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036be:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80036c2:	d01e      	beq.n	8003702 <lfs_dir_fetchmatch+0xfe>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 80036c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	3378      	adds	r3, #120	@ 0x78
 80036ca:	f107 0208 	add.w	r2, r7, #8
 80036ce:	4413      	add	r3, r2
 80036d0:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80036d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036d6:	3301      	adds	r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	bfb8      	it	lt
 80036e0:	425b      	neglt	r3, r3
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	3378      	adds	r3, #120	@ 0x78
 80036e6:	f107 0108 	add.w	r1, r7, #8
 80036ea:	440b      	add	r3, r1
 80036ec:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80036f0:	4619      	mov	r1, r3
 80036f2:	4610      	mov	r0, r2
 80036f4:	f7fe f8c3 	bl	800187e <lfs_scmp>
 80036f8:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	dd01      	ble.n	8003702 <lfs_dir_fetchmatch+0xfe>
            r = i;
 80036fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003700:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 8003702:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003704:	3301      	adds	r3, #1
 8003706:	677b      	str	r3, [r7, #116]	@ 0x74
 8003708:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800370a:	2b01      	cmp	r3, #1
 800370c:	dda1      	ble.n	8003652 <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800370e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003710:	2b00      	cmp	r3, #0
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	bfb8      	it	lt
 8003718:	425b      	neglt	r3, r3
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4413      	add	r3, r2
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8003726:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003728:	3301      	adds	r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	bfb8      	it	lt
 8003732:	425b      	neglt	r3, r3
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4413      	add	r3, r2
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8003740:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003742:	2b00      	cmp	r3, #0
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	bfb8      	it	lt
 800374a:	425b      	neglt	r3, r3
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	3378      	adds	r3, #120	@ 0x78
 8003750:	f107 0208 	add.w	r2, r7, #8
 8003754:	4413      	add	r3, r2
 8003756:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	2200      	movs	r2, #0
 8003762:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8003764:	2300      	movs	r3, #0
 8003766:	673b      	str	r3, [r7, #112]	@ 0x70
 8003768:	e2fb      	b.n	8003d62 <lfs_dir_fetchmatch+0x75e>
        lfs_off_t off = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	66fb      	str	r3, [r7, #108]	@ 0x6c
        lfs_tag_t ptag = 0xffffffff;
 800376e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003772:	66bb      	str	r3, [r7, #104]	@ 0x68

        uint16_t tempcount = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800377a:	4aa9      	ldr	r2, [pc, #676]	@ (8003a20 <lfs_dir_fetchmatch+0x41c>)
 800377c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003780:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003784:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8003788:	2300      	movs	r3, #0
 800378a:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        lfs_stag_t tempbesttag = besttag;
 800378e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003790:	663b      	str	r3, [r7, #96]	@ 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 8003792:	2300      	movs	r3, #0
 8003794:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        bool hasfcrc = false;
 8003798:	2300      	movs	r3, #0
 800379a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe f884 	bl	80018b0 <lfs_tole32>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	3308      	adds	r3, #8
 80037b2:	2204      	movs	r2, #4
 80037b4:	4619      	mov	r1, r3
 80037b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037ba:	f004 ff3b 	bl	8008634 <lfs_crc>
 80037be:	4603      	mov	r3, r0
 80037c0:	633b      	str	r3, [r7, #48]	@ 0x30
        dir->rev = lfs_fromle32(dir->rev);
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fe f867 	bl	800189a <lfs_fromle32>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 80037d2:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80037d4:	f7fe fd81 	bl	80022da <lfs_tag_dsize>
 80037d8:	4602      	mov	r2, r0
 80037da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037dc:	4413      	add	r3, r2
 80037de:	66fb      	str	r3, [r7, #108]	@ 0x6c
            int err = lfs_bd_read(lfs,
 80037e0:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037e6:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2204      	movs	r2, #4
 80037ee:	9203      	str	r2, [sp, #12]
 80037f0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80037f4:	9202      	str	r2, [sp, #8]
 80037f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037f8:	9201      	str	r2, [sp, #4]
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	4603      	mov	r3, r0
 80037fe:	460a      	mov	r2, r1
 8003800:	2100      	movs	r1, #0
 8003802:	6978      	ldr	r0, [r7, #20]
 8003804:	f7fe f8b4 	bl	8001970 <lfs_bd_read>
 8003808:	65b8      	str	r0, [r7, #88]	@ 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800380a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800380c:	2b00      	cmp	r3, #0
 800380e:	d006      	beq.n	800381e <lfs_dir_fetchmatch+0x21a>
                if (err == LFS_ERR_CORRUPT) {
 8003810:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003812:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003816:	f000 81d6 	beq.w	8003bc6 <lfs_dir_fetchmatch+0x5c2>
                    // can't continue?
                    break;
                }
                return err;
 800381a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800381c:	e2b5      	b.n	8003d8a <lfs_dir_fetchmatch+0x786>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800381e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003820:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8003824:	2204      	movs	r2, #4
 8003826:	4618      	mov	r0, r3
 8003828:	f004 ff04 	bl	8008634 <lfs_crc>
 800382c:	4603      	mov	r3, r0
 800382e:	633b      	str	r3, [r7, #48]	@ 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 8003830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe f848 	bl	80018c8 <lfs_frombe32>
 8003838:	4602      	mov	r2, r0
 800383a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800383c:	4053      	eors	r3, r2
 800383e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 8003840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe fcc1 	bl	80021ca <lfs_tag_isvalid>
 8003848:	4603      	mov	r3, r0
 800384a:	f083 0301 	eor.w	r3, r3, #1
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00b      	beq.n	800386c <lfs_dir_fetchmatch+0x268>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 8003854:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003856:	f7fe fce9 	bl	800222c <lfs_tag_type2>
 800385a:	4603      	mov	r3, r0
 800385c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003860:	bf0c      	ite	eq
 8003862:	2301      	moveq	r3, #1
 8003864:	2300      	movne	r3, #0
 8003866:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                break;
 800386a:	e1bb      	b.n	8003be4 <lfs_dir_fetchmatch+0x5e0>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800386c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386e:	4618      	mov	r0, r3
 8003870:	f7fe fd33 	bl	80022da <lfs_tag_dsize>
 8003874:	4602      	mov	r2, r0
 8003876:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003878:	441a      	add	r2, r3
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	429a      	cmp	r2, r3
 8003882:	f200 81a2 	bhi.w	8003bca <lfs_dir_fetchmatch+0x5c6>
                break;
            }

            ptag = tag;
 8003886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003888:	66bb      	str	r3, [r7, #104]	@ 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 800388a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800388c:	4618      	mov	r0, r3
 800388e:	f7fe fccd 	bl	800222c <lfs_tag_type2>
 8003892:	4603      	mov	r3, r0
 8003894:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003898:	d15e      	bne.n	8003958 <lfs_dir_fetchmatch+0x354>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800389a:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038a0:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80038a8:	3204      	adds	r2, #4
 80038aa:	2104      	movs	r1, #4
 80038ac:	9103      	str	r1, [sp, #12]
 80038ae:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80038b2:	9102      	str	r1, [sp, #8]
 80038b4:	9201      	str	r2, [sp, #4]
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	4623      	mov	r3, r4
 80038ba:	4602      	mov	r2, r0
 80038bc:	2100      	movs	r1, #0
 80038be:	6978      	ldr	r0, [r7, #20]
 80038c0:	f7fe f856 	bl	8001970 <lfs_bd_read>
 80038c4:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80038c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d006      	beq.n	80038da <lfs_dir_fetchmatch+0x2d6>
                    if (err == LFS_ERR_CORRUPT) {
 80038cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038ce:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80038d2:	f000 817c 	beq.w	8003bce <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 80038d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                return err;
 80038d8:	e257      	b.n	8003d8a <lfs_dir_fetchmatch+0x786>
                }
                dcrc = lfs_fromle32(dcrc);
 80038da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fd ffdc 	bl	800189a <lfs_fromle32>
 80038e2:	4603      	mov	r3, r0
 80038e4:	62bb      	str	r3, [r7, #40]	@ 0x28

                if (crc != dcrc) {
 80038e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ea:	429a      	cmp	r2, r3
 80038ec:	f040 8171 	bne.w	8003bd2 <lfs_dir_fetchmatch+0x5ce>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 80038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fe fcba 	bl	800226c <lfs_tag_chunk>
 80038f8:	4603      	mov	r3, r0
 80038fa:	07db      	lsls	r3, r3, #31
 80038fc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80038fe:	4053      	eors	r3, r2
 8003900:	66bb      	str	r3, [r7, #104]	@ 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003906:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800390a:	2204      	movs	r2, #4
 800390c:	4618      	mov	r0, r3
 800390e:	f004 fe91 	bl	8008634 <lfs_crc>
 8003912:	4602      	mov	r2, r0
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8003918:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800391a:	67fb      	str	r3, [r7, #124]	@ 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 800391c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe fcdb 	bl	80022da <lfs_tag_dsize>
 8003924:	4602      	mov	r2, r0
 8003926:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003928:	441a      	add	r2, r3
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003932:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800393a:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800393c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8003942:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800394e:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8003950:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003954:	633b      	str	r3, [r7, #48]	@ 0x30
 8003956:	e73c      	b.n	80037d2 <lfs_dir_fetchmatch+0x1ce>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 8003958:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	681c      	ldr	r4, [r3, #0]
 8003966:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003968:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 800396a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe fcb4 	bl	80022da <lfs_tag_dsize>
 8003972:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 8003974:	3b04      	subs	r3, #4
 8003976:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800397a:	9203      	str	r2, [sp, #12]
 800397c:	9302      	str	r3, [sp, #8]
 800397e:	9501      	str	r5, [sp, #4]
 8003980:	9400      	str	r4, [sp, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4632      	mov	r2, r6
 8003986:	2100      	movs	r1, #0
 8003988:	6978      	ldr	r0, [r7, #20]
 800398a:	f7fe f98e 	bl	8001caa <lfs_bd_crc>
 800398e:	65b8      	str	r0, [r7, #88]	@ 0x58
            if (err) {
 8003990:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003992:	2b00      	cmp	r3, #0
 8003994:	d006      	beq.n	80039a4 <lfs_dir_fetchmatch+0x3a0>
                if (err == LFS_ERR_CORRUPT) {
 8003996:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003998:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800399c:	f000 811b 	beq.w	8003bd6 <lfs_dir_fetchmatch+0x5d2>
                    break;
                }
                return err;
 80039a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039a2:	e1f2      	b.n	8003d8a <lfs_dir_fetchmatch+0x786>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 80039a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fe fc30 	bl	800220c <lfs_tag_type1>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d113      	bne.n	80039da <lfs_dir_fetchmatch+0x3d6>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 80039b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fe fc73 	bl	80022a0 <lfs_tag_id>
 80039ba:	4603      	mov	r3, r0
 80039bc:	461a      	mov	r2, r3
 80039be:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80039c2:	4293      	cmp	r3, r2
 80039c4:	f200 80b6 	bhi.w	8003b34 <lfs_dir_fetchmatch+0x530>
                    tempcount = lfs_tag_id(tag) + 1;
 80039c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fe fc68 	bl	80022a0 <lfs_tag_id>
 80039d0:	4603      	mov	r3, r0
 80039d2:	3301      	adds	r3, #1
 80039d4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80039d8:	e0ac      	b.n	8003b34 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 80039da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fe fc15 	bl	800220c <lfs_tag_type1>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039e8:	d13a      	bne.n	8003a60 <lfs_dir_fetchmatch+0x45c>
                tempcount += lfs_tag_splice(tag);
 80039ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fe fc4a 	bl	8002286 <lfs_tag_splice>
 80039f2:	4603      	mov	r3, r0
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80039fa:	4413      	add	r3, r2
 80039fc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8003a00:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003a02:	4b08      	ldr	r3, [pc, #32]	@ (8003a24 <lfs_dir_fetchmatch+0x420>)
 8003a04:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8003a06:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8003a0a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8003a0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d109      	bne.n	8003a28 <lfs_dir_fetchmatch+0x424>
                    tempbesttag |= 0x80000000;
 8003a14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a1c:	e08a      	b.n	8003b34 <lfs_dir_fetchmatch+0x530>
 8003a1e:	bf00      	nop
 8003a20:	0800994c 	.word	0x0800994c
 8003a24:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 8003a28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a2e:	f000 8081 	beq.w	8003b34 <lfs_dir_fetchmatch+0x530>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8003a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fe fc33 	bl	80022a0 <lfs_tag_id>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	461c      	mov	r4, r3
 8003a3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe fc2d 	bl	80022a0 <lfs_tag_id>
 8003a46:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8003a48:	429c      	cmp	r4, r3
 8003a4a:	d873      	bhi.n	8003b34 <lfs_dir_fetchmatch+0x530>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8003a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe fc19 	bl	8002286 <lfs_tag_splice>
 8003a54:	4603      	mov	r3, r0
 8003a56:	029a      	lsls	r2, r3, #10
 8003a58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a5a:	4413      	add	r3, r2
 8003a5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a5e:	e069      	b.n	8003b34 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8003a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe fbd2 	bl	800220c <lfs_tag_type1>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003a6e:	d132      	bne.n	8003ad6 <lfs_dir_fetchmatch+0x4d2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8003a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe fbfa 	bl	800226c <lfs_tag_chunk>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	bf14      	ite	ne
 8003a82:	2301      	movne	r3, #1
 8003a84:	2300      	moveq	r3, #0
 8003a86:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

                err = lfs_bd_read(lfs,
 8003a8a:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a90:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a98:	3204      	adds	r2, #4
 8003a9a:	2108      	movs	r1, #8
 8003a9c:	9103      	str	r1, [sp, #12]
 8003a9e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8003aa2:	9102      	str	r1, [sp, #8]
 8003aa4:	9201      	str	r2, [sp, #4]
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	4623      	mov	r3, r4
 8003aaa:	4602      	mov	r2, r0
 8003aac:	2100      	movs	r1, #0
 8003aae:	6978      	ldr	r0, [r7, #20]
 8003ab0:	f7fd ff5e 	bl	8001970 <lfs_bd_read>
 8003ab4:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8003ab6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d006      	beq.n	8003aca <lfs_dir_fetchmatch+0x4c6>
                    if (err == LFS_ERR_CORRUPT) {
 8003abc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003abe:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003ac2:	f000 808a 	beq.w	8003bda <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                    return err;
 8003ac6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ac8:	e15f      	b.n	8003d8a <lfs_dir_fetchmatch+0x786>
                }
                lfs_pair_fromle32(temptail);
 8003aca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe fb47 	bl	8002162 <lfs_pair_fromle32>
 8003ad4:	e02e      	b.n	8003b34 <lfs_dir_fetchmatch+0x530>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8003ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fe fbb7 	bl	800224c <lfs_tag_type3>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d124      	bne.n	8003b34 <lfs_dir_fetchmatch+0x530>
                err = lfs_bd_read(lfs,
 8003aea:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003af0:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003af8:	3204      	adds	r2, #4
 8003afa:	2108      	movs	r1, #8
 8003afc:	9103      	str	r1, [sp, #12]
 8003afe:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8003b02:	9102      	str	r1, [sp, #8]
 8003b04:	9201      	str	r2, [sp, #4]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	4623      	mov	r3, r4
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	6978      	ldr	r0, [r7, #20]
 8003b10:	f7fd ff2e 	bl	8001970 <lfs_bd_read>
 8003b14:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 8003b16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <lfs_dir_fetchmatch+0x520>
                    if (err == LFS_ERR_CORRUPT) {
 8003b1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b1e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003b22:	d05c      	beq.n	8003bde <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 8003b24:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fe fcd5 	bl	80024d8 <lfs_fcrc_fromle32>
                hasfcrc = true;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8003b34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b3a:	405a      	eors	r2, r3
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f47f ae46 	bne.w	80037d2 <lfs_dir_fetchmatch+0x1ce>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8003b46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
                        dir->pair[0], off+sizeof(tag)});
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8003b4c:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8003b4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b50:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b54:	f107 0220 	add.w	r2, r7, #32
 8003b58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b5c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003b60:	4798      	blx	r3
 8003b62:	6578      	str	r0, [r7, #84]	@ 0x54
                if (res < 0) {
 8003b64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	da05      	bge.n	8003b76 <lfs_dir_fetchmatch+0x572>
                    if (res == LFS_ERR_CORRUPT) {
 8003b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b6c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003b70:	d037      	beq.n	8003be2 <lfs_dir_fetchmatch+0x5de>
                        break;
                    }
                    return res;
 8003b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                return err;
 8003b74:	e109      	b.n	8003d8a <lfs_dir_fetchmatch+0x786>
                }

                if (res == LFS_CMP_EQ) {
 8003b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d102      	bne.n	8003b82 <lfs_dir_fetchmatch+0x57e>
                    // found a match
                    tempbesttag = tag;
 8003b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b80:	e627      	b.n	80037d2 <lfs_dir_fetchmatch+0x1ce>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8003b82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b86:	405a      	eors	r2, r3
 8003b88:	4b82      	ldr	r3, [pc, #520]	@ (8003d94 <lfs_dir_fetchmatch+0x790>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d103      	bne.n	8003b98 <lfs_dir_fetchmatch+0x594>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8003b90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b94:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b96:	e61c      	b.n	80037d2 <lfs_dir_fetchmatch+0x1ce>
                } else if (res == LFS_CMP_GT &&
 8003b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	f47f ae19 	bne.w	80037d2 <lfs_dir_fetchmatch+0x1ce>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8003ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe fb7c 	bl	80022a0 <lfs_tag_id>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	461c      	mov	r4, r3
 8003bac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe fb76 	bl	80022a0 <lfs_tag_id>
 8003bb4:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8003bb6:	429c      	cmp	r4, r3
 8003bb8:	f63f ae0b 	bhi.w	80037d2 <lfs_dir_fetchmatch+0x1ce>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8003bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bbe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bc4:	e605      	b.n	80037d2 <lfs_dir_fetchmatch+0x1ce>
                    break;
 8003bc6:	bf00      	nop
 8003bc8:	e00c      	b.n	8003be4 <lfs_dir_fetchmatch+0x5e0>
                break;
 8003bca:	bf00      	nop
 8003bcc:	e00a      	b.n	8003be4 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8003bce:	bf00      	nop
 8003bd0:	e008      	b.n	8003be4 <lfs_dir_fetchmatch+0x5e0>
                    break;
 8003bd2:	bf00      	nop
 8003bd4:	e006      	b.n	8003be4 <lfs_dir_fetchmatch+0x5e0>
                    break;
 8003bd6:	bf00      	nop
 8003bd8:	e004      	b.n	8003be4 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8003bda:	bf00      	nop
 8003bdc:	e002      	b.n	8003be4 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8003bde:	bf00      	nop
 8003be0:	e000      	b.n	8003be4 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8003be2:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d000      	beq.n	8003bee <lfs_dir_fetchmatch+0x5ea>
 8003bec:	e017      	b.n	8003c1e <lfs_dir_fetchmatch+0x61a>
            // try the other block?
            lfs_pair_swap(dir->pair);
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fe fa2f 	bl	8002054 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8003bf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	bfb8      	it	lt
 8003c02:	425b      	neglt	r3, r3
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	3378      	adds	r3, #120	@ 0x78
 8003c08:	f107 0208 	add.w	r2, r7, #8
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8003c16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c18:	3301      	adds	r3, #1
 8003c1a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c1c:	e0a1      	b.n	8003d62 <lfs_dir_fetchmatch+0x75e>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2200      	movs	r2, #0
 8003c22:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8003c24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d03a      	beq.n	8003ca2 <lfs_dir_fetchmatch+0x69e>
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c34:	6992      	ldr	r2, [r2, #24]
 8003c36:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c3a:	fb01 f202 	mul.w	r2, r1, r2
 8003c3e:	1a9b      	subs	r3, r3, r2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d12e      	bne.n	8003ca2 <lfs_dir_fetchmatch+0x69e>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 8003c44:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d02a      	beq.n	8003ca2 <lfs_dir_fetchmatch+0x69e>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 8003c4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c50:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 8003c52:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c58:	69dd      	ldr	r5, [r3, #28]
                int err = lfs_bd_crc(lfs,
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	68d2      	ldr	r2, [r2, #12]
 8003c62:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003c64:	f107 001c 	add.w	r0, r7, #28
 8003c68:	9003      	str	r0, [sp, #12]
 8003c6a:	9102      	str	r1, [sp, #8]
 8003c6c:	9201      	str	r2, [sp, #4]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	462b      	mov	r3, r5
 8003c72:	4622      	mov	r2, r4
 8003c74:	2100      	movs	r1, #0
 8003c76:	6978      	ldr	r0, [r7, #20]
 8003c78:	f7fe f817 	bl	8001caa <lfs_bd_crc>
 8003c7c:	6538      	str	r0, [r7, #80]	@ 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8003c7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <lfs_dir_fetchmatch+0x68c>
 8003c84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c86:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003c8a:	d001      	beq.n	8003c90 <lfs_dir_fetchmatch+0x68c>
                    return err;
 8003c8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c8e:	e07c      	b.n	8003d8a <lfs_dir_fetchmatch+0x786>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8003c90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	333c      	adds	r3, #60	@ 0x3c
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4611      	mov	r1, r2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fe fbb4 	bl	8002418 <lfs_gstate_hasmovehere>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d028      	beq.n	8003d08 <lfs_dir_fetchmatch+0x704>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe faf0 	bl	80022a0 <lfs_tag_id>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	461c      	mov	r4, r3
 8003cc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe faea 	bl	80022a0 <lfs_tag_id>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	429c      	cmp	r4, r3
 8003cd0:	d104      	bne.n	8003cdc <lfs_dir_fetchmatch+0x6d8>
                besttag |= 0x80000000;
 8003cd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cd4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003cd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003cda:	e015      	b.n	8003d08 <lfs_dir_fetchmatch+0x704>
            } else if (besttag != -1 &&
 8003cdc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ce2:	d011      	beq.n	8003d08 <lfs_dir_fetchmatch+0x704>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fe fad9 	bl	80022a0 <lfs_tag_id>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	461c      	mov	r4, r3
 8003cf2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fe fad3 	bl	80022a0 <lfs_tag_id>
 8003cfa:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 8003cfc:	429c      	cmp	r4, r3
 8003cfe:	d203      	bcs.n	8003d08 <lfs_dir_fetchmatch+0x704>
                besttag -= LFS_MKTAG(0, 1, 0);
 8003d00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d02:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003d06:	67fb      	str	r3, [r7, #124]	@ 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8003d08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d010      	beq.n	8003d32 <lfs_dir_fetchmatch+0x72e>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8003d10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe fac4 	bl	80022a0 <lfs_tag_id>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	8a9b      	ldrh	r3, [r3, #20]
 8003d20:	4619      	mov	r1, r3
 8003d22:	4610      	mov	r0, r2
 8003d24:	f7fd fd49 	bl	80017ba <lfs_min>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d30:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8003d32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fe fa48 	bl	80021ca <lfs_tag_isvalid>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <lfs_dir_fetchmatch+0x740>
            return besttag;
 8003d40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d42:	e022      	b.n	8003d8a <lfs_dir_fetchmatch+0x786>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8003d44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fe faaa 	bl	80022a0 <lfs_tag_id>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	461a      	mov	r2, r3
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	8a9b      	ldrh	r3, [r3, #20]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d202      	bcs.n	8003d5e <lfs_dir_fetchmatch+0x75a>
            return LFS_ERR_NOENT;
 8003d58:	f06f 0301 	mvn.w	r3, #1
 8003d5c:	e015      	b.n	8003d8a <lfs_dir_fetchmatch+0x786>
        } else {
            return 0;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e013      	b.n	8003d8a <lfs_dir_fetchmatch+0x786>
    for (int i = 0; i < 2; i++) {
 8003d62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	f77f ad00 	ble.w	800376a <lfs_dir_fetchmatch+0x166>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4909      	ldr	r1, [pc, #36]	@ (8003d98 <lfs_dir_fetchmatch+0x794>)
 8003d74:	9101      	str	r1, [sp, #4]
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	f240 5259 	movw	r2, #1369	@ 0x559
 8003d7e:	4907      	ldr	r1, [pc, #28]	@ (8003d9c <lfs_dir_fetchmatch+0x798>)
 8003d80:	4807      	ldr	r0, [pc, #28]	@ (8003da0 <lfs_dir_fetchmatch+0x79c>)
 8003d82:	f004 fe45 	bl	8008a10 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8003d86:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3784      	adds	r7, #132	@ 0x84
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d92:	bf00      	nop
 8003d94:	7ffffc00 	.word	0x7ffffc00
 8003d98:	08009908 	.word	0x08009908
 8003d9c:	080097f8 	.word	0x080097f8
 8003da0:	08009914 	.word	0x08009914

08003da4 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af04      	add	r7, sp, #16
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8003db0:	2300      	movs	r3, #0
 8003db2:	9303      	str	r3, [sp, #12]
 8003db4:	2300      	movs	r3, #0
 8003db6:	9302      	str	r3, [sp, #8]
 8003db8:	2300      	movs	r3, #0
 8003dba:	9301      	str	r3, [sp, #4]
 8003dbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f7ff fc1a 	bl	8003604 <lfs_dir_fetchmatch>
 8003dd0:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08a      	sub	sp, #40	@ 0x28
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8003de8:	f107 0310 	add.w	r3, r7, #16
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	4b12      	ldr	r3, [pc, #72]	@ (8003e38 <lfs_dir_getgstate+0x5c>)
 8003df0:	4a12      	ldr	r2, [pc, #72]	@ (8003e3c <lfs_dir_getgstate+0x60>)
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f7fe fecf 	bl	8002b98 <lfs_dir_get>
 8003dfa:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	da05      	bge.n	8003e0e <lfs_dir_getgstate+0x32>
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	f113 0f02 	cmn.w	r3, #2
 8003e08:	d001      	beq.n	8003e0e <lfs_dir_getgstate+0x32>
        return res;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	e00f      	b.n	8003e2e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f113 0f02 	cmn.w	r3, #2
 8003e14:	d00a      	beq.n	8003e2c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8003e16:	f107 0310 	add.w	r3, r7, #16
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fe fb1c 	bl	8002458 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8003e20:	f107 0310 	add.w	r3, r7, #16
 8003e24:	4619      	mov	r1, r3
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fe fa6b 	bl	8002302 <lfs_gstate_xor>
    }

    return 0;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	7ff0000c 	.word	0x7ff0000c
 8003e3c:	7ff00000 	.word	0x7ff00000

08003e40 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8003e40:	b590      	push	{r4, r7, lr}
 8003e42:	b08f      	sub	sp, #60	@ 0x3c
 8003e44:	af04      	add	r7, sp, #16
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	689c      	ldr	r4, [r3, #8]
 8003e5e:	68b8      	ldr	r0, [r7, #8]
 8003e60:	f7fe fa2e 	bl	80022c0 <lfs_tag_size>
 8003e64:	4603      	mov	r3, r0
 8003e66:	4619      	mov	r1, r3
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f7fd fca6 	bl	80017ba <lfs_min>
 8003e6e:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8003e70:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 8003e7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e7c:	6849      	ldr	r1, [r1, #4]
 8003e7e:	69b8      	ldr	r0, [r7, #24]
 8003e80:	9003      	str	r0, [sp, #12]
 8003e82:	9102      	str	r1, [sp, #8]
 8003e84:	9201      	str	r2, [sp, #4]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	4622      	mov	r2, r4
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	6a38      	ldr	r0, [r7, #32]
 8003e90:	f7fd feba 	bl	8001c08 <lfs_bd_cmp>
 8003e94:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <lfs_dir_find_match+0x60>
        return res;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	e014      	b.n	8003eca <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea2:	689c      	ldr	r4, [r3, #8]
 8003ea4:	68b8      	ldr	r0, [r7, #8]
 8003ea6:	f7fe fa0b 	bl	80022c0 <lfs_tag_size>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	429c      	cmp	r4, r3
 8003eae:	d00b      	beq.n	8003ec8 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	689c      	ldr	r4, [r3, #8]
 8003eb4:	68b8      	ldr	r0, [r7, #8]
 8003eb6:	f7fe fa03 	bl	80022c0 <lfs_tag_size>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	429c      	cmp	r4, r3
 8003ebe:	d201      	bcs.n	8003ec4 <lfs_dir_find_match+0x84>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e002      	b.n	8003eca <lfs_dir_find_match+0x8a>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e000      	b.n	8003eca <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	372c      	adds	r7, #44	@ 0x2c
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd90      	pop	{r4, r7, pc}
	...

08003ed4 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b093      	sub	sp, #76	@ 0x4c
 8003ed8:	af04      	add	r7, sp, #16
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (id) {
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <lfs_dir_find+0x22>
        *id = 0x3ff;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003ef4:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8003ef6:	4b6e      	ldr	r3, [pc, #440]	@ (80040b0 <lfs_dir_find+0x1dc>)
 8003ef8:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a1a      	ldr	r2, [r3, #32]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8003f0a:	496a      	ldr	r1, [pc, #424]	@ (80040b4 <lfs_dir_find+0x1e0>)
 8003f0c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003f0e:	f004 fdc7 	bl	8008aa0 <strspn>
 8003f12:	4602      	mov	r2, r0
 8003f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f16:	4413      	add	r3, r2
 8003f18:	637b      	str	r3, [r7, #52]	@ 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8003f1a:	4966      	ldr	r1, [pc, #408]	@ (80040b4 <lfs_dir_find+0x1e0>)
 8003f1c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003f1e:	f004 fdae 	bl	8008a7e <strcspn>
 8003f22:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8003f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d105      	bne.n	8003f36 <lfs_dir_find+0x62>
 8003f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f2c:	781a      	ldrb	r2, [r3, #0]
 8003f2e:	4b62      	ldr	r3, [pc, #392]	@ (80040b8 <lfs_dir_find+0x1e4>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d00a      	beq.n	8003f4c <lfs_dir_find+0x78>
 8003f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d10c      	bne.n	8003f56 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	495f      	ldr	r1, [pc, #380]	@ (80040bc <lfs_dir_find+0x1e8>)
 8003f40:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003f42:	f004 fd77 	bl	8008a34 <memcmp>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d104      	bne.n	8003f56 <lfs_dir_find+0x82>
            name += namelen;
 8003f4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	4413      	add	r3, r2
 8003f52:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 8003f54:	e7d9      	b.n	8003f0a <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8003f56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	4413      	add	r3, r2
 8003f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8003f62:	4954      	ldr	r1, [pc, #336]	@ (80040b4 <lfs_dir_find+0x1e0>)
 8003f64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f66:	f004 fd9b 	bl	8008aa0 <strspn>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f6e:	4413      	add	r3, r2
 8003f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 8003f72:	4950      	ldr	r1, [pc, #320]	@ (80040b4 <lfs_dir_find+0x1e0>)
 8003f74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f76:	f004 fd82 	bl	8008a7e <strcspn>
 8003f7a:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d01d      	beq.n	8003fbe <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d112      	bne.n	8003fae <lfs_dir_find+0xda>
 8003f88:	2202      	movs	r2, #2
 8003f8a:	494c      	ldr	r1, [pc, #304]	@ (80040bc <lfs_dir_find+0x1e8>)
 8003f8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f8e:	f004 fd51 	bl	8008a34 <memcmp>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10a      	bne.n	8003fae <lfs_dir_find+0xda>
                depth -= 1;
 8003f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 8003f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d107      	bne.n	8003fb4 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8003fa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	4413      	add	r3, r2
 8003faa:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 8003fac:	e7ad      	b.n	8003f0a <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8003fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 8003fb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	4413      	add	r3, r2
 8003fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 8003fbc:	e7d1      	b.n	8003f62 <lfs_dir_find+0x8e>
                break;
 8003fbe:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8003fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <lfs_dir_find+0xf8>
            return tag;
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fca:	e06c      	b.n	80040a6 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fd0:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fe f939 	bl	800224c <lfs_tag_type3>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d002      	beq.n	8003fe6 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8003fe0:	f06f 0313 	mvn.w	r3, #19
 8003fe4:	e05f      	b.n	80040a6 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fe f959 	bl	80022a0 <lfs_tag_id>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d01c      	beq.n	8004034 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fe f94f 	bl	80022a0 <lfs_tag_id>
 8004002:	4603      	mov	r3, r0
 8004004:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004006:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800400a:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004012:	9200      	str	r2, [sp, #0]
 8004014:	4a2a      	ldr	r2, [pc, #168]	@ (80040c0 <lfs_dir_find+0x1ec>)
 8004016:	68b9      	ldr	r1, [r7, #8]
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f7fe fdbd 	bl	8002b98 <lfs_dir_get>
 800401e:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	2b00      	cmp	r3, #0
 8004024:	da01      	bge.n	800402a <lfs_dir_find+0x156>
                return res;
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	e03d      	b.n	80040a6 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	3318      	adds	r3, #24
 800402e:	4618      	mov	r0, r3
 8004030:	f7fe f897 	bl	8002162 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800403a:	212f      	movs	r1, #47	@ 0x2f
 800403c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800403e:	f004 fd11 	bl	8008a64 <strchr>
 8004042:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <lfs_dir_find+0x178>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	e000      	b.n	800404e <lfs_dir_find+0x17a>
 800404c:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	613a      	str	r2, [r7, #16]
 8004052:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004054:	617a      	str	r2, [r7, #20]
 8004056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004058:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800405a:	f107 0210 	add.w	r2, r7, #16
 800405e:	9203      	str	r2, [sp, #12]
 8004060:	4a18      	ldr	r2, [pc, #96]	@ (80040c4 <lfs_dir_find+0x1f0>)
 8004062:	9202      	str	r2, [sp, #8]
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 800406e:	4622      	mov	r2, r4
 8004070:	68b9      	ldr	r1, [r7, #8]
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f7ff fac6 	bl	8003604 <lfs_dir_fetchmatch>
 8004078:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800407a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407c:	2b00      	cmp	r3, #0
 800407e:	da01      	bge.n	8004084 <lfs_dir_find+0x1b0>
                return tag;
 8004080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004082:	e010      	b.n	80040a6 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8004084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004086:	2b00      	cmp	r3, #0
 8004088:	d004      	beq.n	8004094 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800408a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408e:	4413      	add	r3, r2
 8004090:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 8004092:	e73a      	b.n	8003f0a <lfs_dir_find+0x36>
            if (!dir->split) {
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	7ddb      	ldrb	r3, [r3, #23]
 8004098:	f083 0301 	eor.w	r3, r3, #1
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0c8      	beq.n	8004034 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 80040a2:	f06f 0301 	mvn.w	r3, #1
    }
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	373c      	adds	r7, #60	@ 0x3c
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd90      	pop	{r4, r7, pc}
 80040ae:	bf00      	nop
 80040b0:	002ffc00 	.word	0x002ffc00
 80040b4:	08009954 	.word	0x08009954
 80040b8:	08009958 	.word	0x08009958
 80040bc:	0800995c 	.word	0x0800995c
 80040c0:	700ffc00 	.word	0x700ffc00
 80040c4:	08003e41 	.word	0x08003e41

080040c8 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 80040c8:	b590      	push	{r4, r7, lr}
 80040ca:	b08b      	sub	sp, #44	@ 0x2c
 80040cc:	af04      	add	r7, sp, #16
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f103 0010 	add.w	r0, r3, #16
 80040dc:	68fc      	ldr	r4, [r7, #12]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	6852      	ldr	r2, [r2, #4]
 80040e6:	6839      	ldr	r1, [r7, #0]
 80040e8:	9103      	str	r1, [sp, #12]
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	9102      	str	r1, [sp, #8]
 80040ee:	9201      	str	r2, [sp, #4]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	2300      	movs	r3, #0
 80040f4:	4622      	mov	r2, r4
 80040f6:	4601      	mov	r1, r0
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f7fd fecb 	bl	8001e94 <lfs_bd_prog>
 80040fe:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <lfs_dir_commitprog+0x42>
        return err;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	e010      	b.n	800412c <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4618      	mov	r0, r3
 8004114:	f004 fa8e 	bl	8008634 <lfs_crc>
 8004118:	4602      	mov	r2, r0
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	441a      	add	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	605a      	str	r2, [r3, #4]
    return 0;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	371c      	adds	r7, #28
 8004130:	46bd      	mov	sp, r7
 8004132:	bd90      	pop	{r4, r7, pc}

08004134 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8004134:	b590      	push	{r4, r7, lr}
 8004136:	b08f      	sub	sp, #60	@ 0x3c
 8004138:	af04      	add	r7, sp, #16
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fe f8c9 	bl	80022da <lfs_tag_dsize>
 8004148:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	441a      	add	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	429a      	cmp	r2, r3
 8004158:	d902      	bls.n	8004160 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800415a:	f06f 031b 	mvn.w	r3, #27
 800415e:	e065      	b.n	800422c <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	4053      	eors	r3, r2
 800416c:	4618      	mov	r0, r3
 800416e:	f7fd fbb7 	bl	80018e0 <lfs_tobe32>
 8004172:	4603      	mov	r3, r0
 8004174:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8004176:	f107 0214 	add.w	r2, r7, #20
 800417a:	2304      	movs	r3, #4
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f7ff ffa2 	bl	80040c8 <lfs_dir_commitprog>
 8004184:	61f8      	str	r0, [r7, #28]
    if (err) {
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <lfs_dir_commitattr+0x5c>
        return err;
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	e04d      	b.n	800422c <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	db0c      	blt.n	80041b0 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	3b04      	subs	r3, #4
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f7ff ff92 	bl	80040c8 <lfs_dir_commitprog>
 80041a4:	61f8      	str	r0, [r7, #28]
        if (err) {
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d039      	beq.n	8004220 <lfs_dir_commitattr+0xec>
            return err;
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	e03d      	b.n	800422c <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80041b4:	2300      	movs	r3, #0
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b8:	e02d      	b.n	8004216 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 80041ba:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 80041bc:	6a3a      	ldr	r2, [r7, #32]
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80041c2:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 80041cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ce:	440a      	add	r2, r1
 80041d0:	2101      	movs	r1, #1
 80041d2:	9103      	str	r1, [sp, #12]
 80041d4:	f107 0113 	add.w	r1, r7, #19
 80041d8:	9102      	str	r1, [sp, #8]
 80041da:	9201      	str	r2, [sp, #4]
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	4623      	mov	r3, r4
 80041e0:	4602      	mov	r2, r0
 80041e2:	2100      	movs	r1, #0
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f7fd fbc3 	bl	8001970 <lfs_bd_read>
 80041ea:	61f8      	str	r0, [r7, #28]
            if (err) {
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <lfs_dir_commitattr+0xc2>
                return err;
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	e01a      	b.n	800422c <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 80041f6:	f107 0213 	add.w	r2, r7, #19
 80041fa:	2301      	movs	r3, #1
 80041fc:	68b9      	ldr	r1, [r7, #8]
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f7ff ff62 	bl	80040c8 <lfs_dir_commitprog>
 8004204:	61f8      	str	r0, [r7, #28]
            if (err) {
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <lfs_dir_commitattr+0xdc>
                return err;
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	e00d      	b.n	800422c <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8004210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004212:	3301      	adds	r3, #1
 8004214:	627b      	str	r3, [r7, #36]	@ 0x24
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	3b04      	subs	r3, #4
 800421a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421c:	429a      	cmp	r2, r3
 800421e:	d3cc      	bcc.n	80041ba <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	609a      	str	r2, [r3, #8]
    return 0;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	372c      	adds	r7, #44	@ 0x2c
 8004230:	46bd      	mov	sp, r7
 8004232:	bd90      	pop	{r4, r7, pc}

08004234 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8004234:	b590      	push	{r4, r7, lr}
 8004236:	b097      	sub	sp, #92	@ 0x5c
 8004238:	af04      	add	r7, sp, #16
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 8004242:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800424a:	69db      	ldr	r3, [r3, #28]
    const lfs_off_t end = lfs_alignup(
 800424c:	4619      	mov	r1, r3
 800424e:	4610      	mov	r0, r2
 8004250:	f7fd fab3 	bl	80017ba <lfs_min>
 8004254:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800425a:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(
 800425c:	4619      	mov	r1, r3
 800425e:	4610      	mov	r0, r2
 8004260:	f7fd fad0 	bl	8001804 <lfs_alignup>
 8004264:	63b8      	str	r0, [r7, #56]	@ 0x38

    lfs_off_t off1 = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 800426a:	2300      	movs	r3, #0
 800426c:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800426e:	e0fe      	b.n	800446e <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	3b04      	subs	r3, #4
 800427a:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 800427e:	4618      	mov	r0, r3
 8004280:	f7fd fa9b 	bl	80017ba <lfs_min>
 8004284:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	4413      	add	r3, r2
        lfs_off_t noff = (
 800428c:	3304      	adds	r3, #4
 800428e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 8004290:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004294:	429a      	cmp	r2, r3
 8004296:	d206      	bcs.n	80042a6 <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 8004298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800429a:	3b14      	subs	r3, #20
 800429c:	4619      	mov	r1, r3
 800429e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80042a0:	f7fd fa8b 	bl	80017ba <lfs_min>
 80042a4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 80042a6:	23ff      	movs	r3, #255	@ 0xff
 80042a8:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 80042aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d35f      	bcc.n	8004372 <lfs_dir_commitcrc+0x13e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d855      	bhi.n	8004372 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 80042c6:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042cc:	6998      	ldr	r0, [r3, #24]
            int err = lfs_bd_read(lfs,
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2201      	movs	r2, #1
 80042d4:	9203      	str	r2, [sp, #12]
 80042d6:	f107 021b 	add.w	r2, r7, #27
 80042da:	9202      	str	r2, [sp, #8]
 80042dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042de:	9201      	str	r2, [sp, #4]
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	4603      	mov	r3, r0
 80042e4:	460a      	mov	r2, r1
 80042e6:	2100      	movs	r1, #0
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7fd fb41 	bl	8001970 <lfs_bd_read>
 80042ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 80042f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d005      	beq.n	8004302 <lfs_dir_commitcrc+0xce>
 80042f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80042fc:	d001      	beq.n	8004302 <lfs_dir_commitcrc+0xce>
                return err;
 80042fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004300:	e101      	b.n	8004506 <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004306:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800430e:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8004310:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004316:	699c      	ldr	r4, [r3, #24]
                err = lfs_bd_crc(lfs,
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	f107 0108 	add.w	r1, r7, #8
 8004322:	3104      	adds	r1, #4
 8004324:	9103      	str	r1, [sp, #12]
 8004326:	9202      	str	r2, [sp, #8]
 8004328:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800432a:	9201      	str	r2, [sp, #4]
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	4623      	mov	r3, r4
 8004330:	4602      	mov	r2, r0
 8004332:	2100      	movs	r1, #0
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7fd fcb8 	bl	8001caa <lfs_bd_crc>
 800433a:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 800433c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <lfs_dir_commitcrc+0x11a>
 8004342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004344:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004348:	d001      	beq.n	800434e <lfs_dir_commitcrc+0x11a>
                    return err;
 800434a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800434c:	e010      	b.n	8004370 <lfs_dir_commitcrc+0x13c>
                }

                lfs_fcrc_tole32(&fcrc);
 800434e:	f107 0308 	add.w	r3, r7, #8
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe f8d8 	bl	8002508 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 8004358:	f107 0308 	add.w	r3, r7, #8
 800435c:	4a6c      	ldr	r2, [pc, #432]	@ (8004510 <lfs_dir_commitcrc+0x2dc>)
 800435e:	6839      	ldr	r1, [r7, #0]
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff fee7 	bl	8004134 <lfs_dir_commitattr>
 8004366:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 8004368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <lfs_dir_commitcrc+0x13e>
                    return err;
 800436e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 8004370:	e0c9      	b.n	8004506 <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 8004372:	7efb      	ldrb	r3, [r7, #27]
 8004374:	43db      	mvns	r3, r3
 8004376:	b2db      	uxtb	r3, r3
 8004378:	09db      	lsrs	r3, r3, #7
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004380:	051a      	lsls	r2, r3, #20
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004388:	1acb      	subs	r3, r1, r3
 800438a:	3b04      	subs	r3, #4
 800438c:	4313      	orrs	r3, r2
 800438e:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 8004392:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8004396:	62bb      	str	r3, [r7, #40]	@ 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439e:	4053      	eors	r3, r2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fd fa9d 	bl	80018e0 <lfs_tobe32>
 80043a6:	4603      	mov	r3, r0
 80043a8:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f107 0110 	add.w	r1, r7, #16
 80043b2:	2204      	movs	r2, #4
 80043b4:	4618      	mov	r0, r3
 80043b6:	f004 f93d 	bl	8008634 <lfs_crc>
 80043ba:	4602      	mov	r2, r0
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fd fa73 	bl	80018b0 <lfs_tole32>
 80043ca:	4603      	mov	r3, r0
 80043cc:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f103 0010 	add.w	r0, r3, #16
 80043d4:	687c      	ldr	r4, [r7, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	6852      	ldr	r2, [r2, #4]
 80043de:	2108      	movs	r1, #8
 80043e0:	9103      	str	r1, [sp, #12]
 80043e2:	f107 0110 	add.w	r1, r7, #16
 80043e6:	9102      	str	r1, [sp, #8]
 80043e8:	9201      	str	r2, [sp, #4]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	2300      	movs	r3, #0
 80043ee:	4622      	mov	r2, r4
 80043f0:	4601      	mov	r1, r0
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fd fd4e 	bl	8001e94 <lfs_bd_prog>
 80043f8:	6278      	str	r0, [r7, #36]	@ 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <lfs_dir_commitcrc+0x1d0>
            return err;
 8004400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004402:	e080      	b.n	8004506 <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8004404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004406:	2b00      	cmp	r3, #0
 8004408:	d106      	bne.n	8004418 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off = noff;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800441c:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 800441e:	7efb      	ldrb	r3, [r7, #27]
 8004420:	43db      	mvns	r3, r3
 8004422:	061b      	lsls	r3, r3, #24
 8004424:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442a:	405a      	eors	r2, r3
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004436:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 8004438:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800443a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800443c:	429a      	cmp	r2, r3
 800443e:	d208      	bcs.n	8004452 <lfs_dir_commitcrc+0x21e>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	695a      	ldr	r2, [r3, #20]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444a:	4413      	add	r3, r2
 800444c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800444e:	429a      	cmp	r2, r3
 8004450:	d30d      	bcc.n	800446e <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f103 0110 	add.w	r1, r3, #16
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	2300      	movs	r3, #0
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7fd fce5 	bl	8001e2c <lfs_bd_sync>
 8004462:	6238      	str	r0, [r7, #32]
            if (err) {
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <lfs_dir_commitcrc+0x23a>
                return err;
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	e04b      	b.n	8004506 <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004474:	429a      	cmp	r2, r3
 8004476:	f63f aefb 	bhi.w	8004270 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t crc = 0xffffffff;
 8004480:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004484:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800448a:	1d1c      	adds	r4, r3, #4
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004492:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004494:	1a8a      	subs	r2, r1, r2
 8004496:	f107 011c 	add.w	r1, r7, #28
 800449a:	9103      	str	r1, [sp, #12]
 800449c:	9202      	str	r2, [sp, #8]
 800449e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044a0:	9201      	str	r2, [sp, #4]
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	4623      	mov	r3, r4
 80044a6:	4602      	mov	r2, r0
 80044a8:	2100      	movs	r1, #0
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fd fbfd 	bl	8001caa <lfs_bd_crc>
 80044b0:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 80044b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <lfs_dir_commitcrc+0x288>
        return err;
 80044b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ba:	e024      	b.n	8004506 <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d002      	beq.n	80044ca <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 80044c4:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80044c8:	e01d      	b.n	8004506 <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f107 021c 	add.w	r2, r7, #28
 80044d4:	9203      	str	r2, [sp, #12]
 80044d6:	2204      	movs	r2, #4
 80044d8:	9202      	str	r2, [sp, #8]
 80044da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044dc:	9201      	str	r2, [sp, #4]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	2304      	movs	r3, #4
 80044e2:	460a      	mov	r2, r1
 80044e4:	2100      	movs	r1, #0
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fd fbdf 	bl	8001caa <lfs_bd_crc>
 80044ec:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 80044ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <lfs_dir_commitcrc+0x2c4>
        return err;
 80044f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f6:	e006      	b.n	8004506 <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 80044fe:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8004502:	e000      	b.n	8004506 <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	374c      	adds	r7, #76	@ 0x4c
 800450a:	46bd      	mov	sp, r7
 800450c:	bd90      	pop	{r4, r7, pc}
 800450e:	bf00      	nop
 8004510:	5ffffc08 	.word	0x5ffffc08

08004514 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8004514:	b580      	push	{r7, lr}
 8004516:	b08a      	sub	sp, #40	@ 0x28
 8004518:	af04      	add	r7, sp, #16
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	e016      	b.n	8004552 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	3301      	adds	r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	bfb8      	it	lt
 8004530:	425b      	neglt	r3, r3
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	4413      	add	r3, r2
 8004538:	4619      	mov	r1, r3
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fe f9ae 	bl	800289c <lfs_alloc>
 8004540:	60f8      	str	r0, [r7, #12]
        if (err) {
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <lfs_dir_alloc+0x38>
            return err;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	e058      	b.n	80045fe <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	3301      	adds	r3, #1
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b01      	cmp	r3, #1
 8004556:	dde5      	ble.n	8004524 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2200      	movs	r2, #0
 800455c:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8004568:	2004      	movs	r0, #4
 800456a:	9003      	str	r0, [sp, #12]
 800456c:	9202      	str	r2, [sp, #8]
 800456e:	2200      	movs	r2, #0
 8004570:	9201      	str	r2, [sp, #4]
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	2304      	movs	r3, #4
 8004576:	460a      	mov	r2, r1
 8004578:	2100      	movs	r1, #0
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fd f9f8 	bl	8001970 <lfs_bd_read>
 8004580:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	4618      	mov	r0, r3
 8004588:	f7fd f987 	bl	800189a <lfs_fromle32>
 800458c:	4602      	mov	r2, r0
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <lfs_dir_alloc+0x90>
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800459e:	d001      	beq.n	80045a4 <lfs_dir_alloc+0x90>
        return err;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	e02c      	b.n	80045fe <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	dd0e      	ble.n	80045cc <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b8:	3301      	adds	r3, #1
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	4619      	mov	r1, r3
 80045c0:	4610      	mov	r0, r2
 80045c2:	f7fd f91f 	bl	8001804 <lfs_alignup>
 80045c6:	4602      	mov	r2, r0
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2204      	movs	r2, #4
 80045d0:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80045d8:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2200      	movs	r2, #0
 80045de:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80045e6:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80045ee:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2200      	movs	r2, #0
 80045f4:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2200      	movs	r2, #0
 80045fa:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8004606:	b580      	push	{r7, lr}
 8004608:	b092      	sub	sp, #72	@ 0x48
 800460a:	af04      	add	r7, sp, #16
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
 8004612:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8004614:	f107 0310 	add.w	r3, r7, #16
 8004618:	4619      	mov	r1, r3
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f7ff ff7a 	bl	8004514 <lfs_dir_alloc>
 8004620:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 8004622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <lfs_dir_split+0x26>
        return err;
 8004628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800462a:	e03c      	b.n	80046a6 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	7ddb      	ldrb	r3, [r3, #23]
 8004630:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8004640:	f107 0110 	add.w	r1, r7, #16
 8004644:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004648:	9302      	str	r3, [sp, #8]
 800464a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800464e:	9301      	str	r3, [sp, #4]
 8004650:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 f879 	bl	8004750 <lfs_dir_compact>
 800465e:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 8004660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004662:	2b00      	cmp	r3, #0
 8004664:	da01      	bge.n	800466a <lfs_dir_split+0x64>
        return res;
 8004666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004668:	e01d      	b.n	80046a6 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2201      	movs	r2, #1
 800467a:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3320      	adds	r3, #32
 8004682:	4619      	mov	r1, r3
 8004684:	4610      	mov	r0, r2
 8004686:	f7fd fd15 	bl	80020b4 <lfs_pair_cmp>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d109      	bne.n	80046a4 <lfs_dir_split+0x9e>
 8004690:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004694:	2b00      	cmp	r3, #0
 8004696:	d105      	bne.n	80046a4 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3738      	adds	r7, #56	@ 0x38
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b086      	sub	sp, #24
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 80046be:	68b8      	ldr	r0, [r7, #8]
 80046c0:	f7fd fe0b 	bl	80022da <lfs_tag_dsize>
 80046c4:	4602      	mov	r2, r0
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	441a      	add	r2, r3
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	601a      	str	r2, [r3, #0]
    return 0;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 80046da:	b580      	push	{r7, lr}
 80046dc:	b086      	sub	sp, #24
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	6859      	ldr	r1, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	f7ff fd1d 	bl	8004134 <lfs_dir_commitattr>
 80046fa:	4603      	mov	r3, r0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8004714:	2b00      	cmp	r3, #0
 8004716:	dd11      	ble.n	800473c <lfs_dir_needsrelocation+0x38>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	3301      	adds	r3, #1
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004722:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004724:	3201      	adds	r2, #1
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	fbb3 f1f2 	udiv	r1, r3, r2
 800472e:	fb01 f202 	mul.w	r2, r1, r2
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <lfs_dir_needsrelocation+0x38>
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <lfs_dir_needsrelocation+0x3a>
 800473c:	2300      	movs	r3, #0
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	b2db      	uxtb	r3, r3
}
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8004750:	b580      	push	{r7, lr}
 8004752:	b0a4      	sub	sp, #144	@ 0x90
 8004754:	af0a      	add	r7, sp, #40	@ 0x28
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 800475e:	2300      	movs	r3, #0
 8004760:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7ff ffcc 	bl	8004704 <lfs_dir_needsrelocation>
 800476c:	4603      	mov	r3, r0
 800476e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 800477c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00e      	beq.n	80047a2 <lfs_dir_compact+0x52>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2200      	movs	r2, #0
 8004788:	657a      	str	r2, [r7, #84]	@ 0x54
 800478a:	2201      	movs	r2, #1
 800478c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800478e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8004792:	4611      	mov	r1, r2
 8004794:	4618      	mov	r0, r3
 8004796:	f7fd fc8d 	bl	80020b4 <lfs_pair_cmp>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	f040 8155 	bne.w	8004a4c <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80047a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047a8:	2300      	movs	r3, #0
 80047aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80047ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80047b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047b8:	2300      	movs	r3, #0
 80047ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d004      	beq.n	80047d0 <lfs_dir_compact+0x80>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047cc:	3b08      	subs	r3, #8
 80047ce:	e003      	b.n	80047d8 <lfs_dir_compact+0x88>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 80047d8:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	4619      	mov	r1, r3
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f7fd fc05 	bl	8001ff0 <lfs_bd_erase>
 80047e6:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 80047e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d006      	beq.n	80047fc <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 80047ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047f0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80047f4:	f000 812c 	beq.w	8004a50 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 80047f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047fa:	e188      	b.n	8004b0e <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	4618      	mov	r0, r3
 8004802:	f7fd f855 	bl	80018b0 <lfs_tole32>
 8004806:	4602      	mov	r2, r0
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8004812:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8004816:	2304      	movs	r3, #4
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f7ff fc55 	bl	80040c8 <lfs_dir_commitprog>
 800481e:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	4618      	mov	r0, r3
 8004826:	f7fd f838 	bl	800189a <lfs_fromle32>
 800482a:	4602      	mov	r2, r0
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	609a      	str	r2, [r3, #8]
            if (err) {
 8004830:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004832:	2b00      	cmp	r3, #0
 8004834:	d006      	beq.n	8004844 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8004836:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004838:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800483c:	f000 810a 	beq.w	8004a54 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8004840:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004842:	e164      	b.n	8004b0e <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8004844:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8004848:	425b      	negs	r3, r3
 800484a:	b29b      	uxth	r3, r3
 800484c:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	637a      	str	r2, [r7, #52]	@ 0x34
 8004852:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8004856:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 8004858:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800485c:	9208      	str	r2, [sp, #32]
 800485e:	4aae      	ldr	r2, [pc, #696]	@ (8004b18 <lfs_dir_compact+0x3c8>)
 8004860:	9207      	str	r2, [sp, #28]
 8004862:	9306      	str	r3, [sp, #24]
 8004864:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8004868:	9305      	str	r3, [sp, #20]
 800486a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800486e:	9304      	str	r3, [sp, #16]
 8004870:	2300      	movs	r3, #0
 8004872:	9303      	str	r3, [sp, #12]
 8004874:	4ba9      	ldr	r3, [pc, #676]	@ (8004b1c <lfs_dir_compact+0x3cc>)
 8004876:	9302      	str	r3, [sp, #8]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	9301      	str	r3, [sp, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004884:	2200      	movs	r2, #0
 8004886:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f7fe fad7 	bl	8002e3c <lfs_dir_traverse>
 800488e:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 8004890:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004892:	2b00      	cmp	r3, #0
 8004894:	d006      	beq.n	80048a4 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8004896:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004898:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800489c:	f000 80dc 	beq.w	8004a58 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 80048a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048a2:	e134      	b.n	8004b0e <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	3318      	adds	r3, #24
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fd fbe8 	bl	800207e <lfs_pair_isnull>
 80048ae:	4603      	mov	r3, r0
 80048b0:	f083 0301 	eor.w	r3, r3, #1
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d022      	beq.n	8004900 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	3318      	adds	r3, #24
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fd fc69 	bl	8002196 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	7ddb      	ldrb	r3, [r3, #23]
 80048c8:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80048cc:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 80048ce:	4a94      	ldr	r2, [pc, #592]	@ (8004b20 <lfs_dir_compact+0x3d0>)
 80048d0:	431a      	orrs	r2, r3
                        dir->tail);
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 80048d6:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f7ff fc2a 	bl	8004134 <lfs_dir_commitattr>
 80048e0:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	3318      	adds	r3, #24
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fd fc3b 	bl	8002162 <lfs_pair_fromle32>
                if (err) {
 80048ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d006      	beq.n	8004900 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 80048f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048f4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80048f8:	f000 80b0 	beq.w	8004a5c <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 80048fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048fe:	e106      	b.n	8004b0e <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8004900:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	605a      	str	r2, [r3, #4]
 800490a:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800490c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004910:	f083 0301 	eor.w	r3, r3, #1
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d011      	beq.n	800493e <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8004920:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004924:	4611      	mov	r1, r2
 8004926:	4618      	mov	r0, r3
 8004928:	f7fd fceb 	bl	8002302 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004932:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004936:	4611      	mov	r1, r2
 8004938:	4618      	mov	r0, r3
 800493a:	f7fd fce2 	bl	8002302 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004944:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004948:	4611      	mov	r1, r2
 800494a:	4618      	mov	r0, r3
 800494c:	f7fd fcd9 	bl	8002302 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8004950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004952:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004956:	f023 0303 	bic.w	r3, r3, #3
 800495a:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 800495c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004960:	461a      	mov	r2, r3
 8004962:	68b9      	ldr	r1, [r7, #8]
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f7ff fa39 	bl	8003ddc <lfs_dir_getgstate>
 800496a:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800496c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <lfs_dir_compact+0x226>
                return err;
 8004972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004974:	e0cb      	b.n	8004b0e <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8004976:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800497a:	4618      	mov	r0, r3
 800497c:	f7fd fce6 	bl	800234c <lfs_gstate_iszero>
 8004980:	4603      	mov	r3, r0
 8004982:	f083 0301 	eor.w	r3, r3, #1
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d016      	beq.n	80049ba <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 800498c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004990:	4618      	mov	r0, r3
 8004992:	f7fd fd81 	bl	8002498 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8004996:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800499a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800499e:	4a61      	ldr	r2, [pc, #388]	@ (8004b24 <lfs_dir_compact+0x3d4>)
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f7ff fbc7 	bl	8004134 <lfs_dir_commitattr>
 80049a6:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 80049a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 80049ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049b0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80049b4:	d054      	beq.n	8004a60 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 80049b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049b8:	e0a9      	b.n	8004b0e <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 80049ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80049be:	4619      	mov	r1, r3
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f7ff fc37 	bl	8004234 <lfs_dir_commitcrc>
 80049c6:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 80049c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 80049ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049d0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80049d4:	d046      	beq.n	8004a64 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 80049d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049d8:	e099      	b.n	8004b0e <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80049da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80049e0:	6992      	ldr	r2, [r2, #24]
 80049e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80049e6:	fb01 f202 	mul.w	r2, r1, r2
 80049ea:	1a9b      	subs	r3, r3, r2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d006      	beq.n	80049fe <lfs_dir_compact+0x2ae>
 80049f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004b28 <lfs_dir_compact+0x3d8>)
 80049f2:	4a4e      	ldr	r2, [pc, #312]	@ (8004b2c <lfs_dir_compact+0x3dc>)
 80049f4:	f640 0106 	movw	r1, #2054	@ 0x806
 80049f8:	484d      	ldr	r0, [pc, #308]	@ (8004b30 <lfs_dir_compact+0x3e0>)
 80049fa:	f003 fe59 	bl	80086b0 <__assert_func>
            lfs_pair_swap(dir->pair);
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fd fb27 	bl	8002054 <lfs_pair_swap>
            dir->count = end - begin;
 8004a06:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8004a0a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8004a16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8004a1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3348      	adds	r3, #72	@ 0x48
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	605a      	str	r2, [r3, #4]
 8004a2c:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8004a2e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004a32:	f083 0301 	eor.w	r3, r3, #1
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d065      	beq.n	8004b08 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	333c      	adds	r3, #60	@ 0x3c
 8004a42:	3230      	adds	r2, #48	@ 0x30
 8004a44:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8004a4a:	e05d      	b.n	8004b08 <lfs_dir_compact+0x3b8>
        goto relocate;
 8004a4c:	bf00      	nop
 8004a4e:	e00a      	b.n	8004a66 <lfs_dir_compact+0x316>
                    goto relocate;
 8004a50:	bf00      	nop
 8004a52:	e008      	b.n	8004a66 <lfs_dir_compact+0x316>
                    goto relocate;
 8004a54:	bf00      	nop
 8004a56:	e006      	b.n	8004a66 <lfs_dir_compact+0x316>
                    goto relocate;
 8004a58:	bf00      	nop
 8004a5a:	e004      	b.n	8004a66 <lfs_dir_compact+0x316>
                        goto relocate;
 8004a5c:	bf00      	nop
 8004a5e:	e002      	b.n	8004a66 <lfs_dir_compact+0x316>
                        goto relocate;
 8004a60:	bf00      	nop
 8004a62:	e000      	b.n	8004a66 <lfs_dir_compact+0x316>
                    goto relocate;
 8004a64:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8004a66:	2301      	movs	r3, #1
 8004a68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3310      	adds	r3, #16
 8004a70:	4619      	mov	r1, r3
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f7fc ff57 	bl	8001926 <lfs_cache_drop>
        if (!tired) {
 8004a78:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004a7c:	f083 0301 	eor.w	r3, r3, #1
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d009      	beq.n	8004a9a <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8004b34 <lfs_dir_compact+0x3e4>)
 8004a8c:	9200      	str	r2, [sp, #0]
 8004a8e:	f640 0218 	movw	r2, #2072	@ 0x818
 8004a92:	4927      	ldr	r1, [pc, #156]	@ (8004b30 <lfs_dir_compact+0x3e0>)
 8004a94:	4828      	ldr	r0, [pc, #160]	@ (8004b38 <lfs_dir_compact+0x3e8>)
 8004a96:	f003 ffbb 	bl	8008a10 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	617a      	str	r2, [r7, #20]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	61ba      	str	r2, [r7, #24]
 8004aa4:	f107 0214 	add.w	r2, r7, #20
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fd fb02 	bl	80020b4 <lfs_pair_cmp>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10c      	bne.n	8004ad0 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	4a1e      	ldr	r2, [pc, #120]	@ (8004b34 <lfs_dir_compact+0x3e4>)
 8004abc:	9200      	str	r2, [sp, #0]
 8004abe:	f640 021d 	movw	r2, #2077	@ 0x81d
 8004ac2:	491b      	ldr	r1, [pc, #108]	@ (8004b30 <lfs_dir_compact+0x3e0>)
 8004ac4:	481d      	ldr	r0, [pc, #116]	@ (8004b3c <lfs_dir_compact+0x3ec>)
 8004ac6:	f003 ffa3 	bl	8008a10 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8004aca:	f06f 031b 	mvn.w	r3, #27
 8004ace:	e01e      	b.n	8004b0e <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f7fd fee0 	bl	800289c <lfs_alloc>
 8004adc:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8004ade:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00c      	beq.n	8004afe <lfs_dir_compact+0x3ae>
 8004ae4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ae6:	f113 0f1c 	cmn.w	r3, #28
 8004aea:	d106      	bne.n	8004afa <lfs_dir_compact+0x3aa>
 8004aec:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004af0:	f083 0301 	eor.w	r3, r3, #1
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <lfs_dir_compact+0x3ae>
            return err;
 8004afa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004afc:	e007      	b.n	8004b0e <lfs_dir_compact+0x3be>
        }

        tired = false;
 8004afe:	2300      	movs	r3, #0
 8004b00:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 8004b04:	bf00      	nop
    while (true) {
 8004b06:	e64c      	b.n	80047a2 <lfs_dir_compact+0x52>
        break;
 8004b08:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8004b0a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3768      	adds	r7, #104	@ 0x68
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	080046db 	.word	0x080046db
 8004b1c:	400ffc00 	.word	0x400ffc00
 8004b20:	000ffc08 	.word	0x000ffc08
 8004b24:	7ffffc0c 	.word	0x7ffffc0c
 8004b28:	08009960 	.word	0x08009960
 8004b2c:	0800a4ac 	.word	0x0800a4ac
 8004b30:	080097f8 	.word	0x080097f8
 8004b34:	08009908 	.word	0x08009908
 8004b38:	08009988 	.word	0x08009988
 8004b3c:	080099ac 	.word	0x080099ac

08004b40 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8004b40:	b590      	push	{r4, r7, lr}
 8004b42:	b097      	sub	sp, #92	@ 0x5c
 8004b44:	af0a      	add	r7, sp, #40	@ 0x28
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8004b4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 8004b54:	e058      	b.n	8004c08 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8004b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b60:	b292      	uxth	r2, r2
 8004b62:	4252      	negs	r2, r2
 8004b64:	b292      	uxth	r2, r2
 8004b66:	b212      	sxth	r2, r2
 8004b68:	f107 0118 	add.w	r1, r7, #24
 8004b6c:	9108      	str	r1, [sp, #32]
 8004b6e:	4979      	ldr	r1, [pc, #484]	@ (8004d54 <lfs_dir_splittingcompact+0x214>)
 8004b70:	9107      	str	r1, [sp, #28]
 8004b72:	9206      	str	r2, [sp, #24]
 8004b74:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004b78:	9205      	str	r2, [sp, #20]
 8004b7a:	9304      	str	r3, [sp, #16]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	9303      	str	r3, [sp, #12]
 8004b80:	4b75      	ldr	r3, [pc, #468]	@ (8004d58 <lfs_dir_splittingcompact+0x218>)
 8004b82:	9302      	str	r3, [sp, #8]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b90:	2200      	movs	r2, #0
 8004b92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f7fe f951 	bl	8002e3c <lfs_dir_traverse>
 8004b9a:	62b8      	str	r0, [r7, #40]	@ 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8004b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <lfs_dir_splittingcompact+0x66>
                return err;
 8004ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba4:	e0d2      	b.n	8004d4c <lfs_dir_splittingcompact+0x20c>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8004ba6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2bfe      	cmp	r3, #254	@ 0xfe
 8004bb0:	d822      	bhi.n	8004bf8 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bb6:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8004bb8:	f1a3 0428 	sub.w	r4, r3, #40	@ 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    && size <= lfs_min(
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d004      	beq.n	8004bd0 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    && size <= lfs_min(
 8004bcc:	085b      	lsrs	r3, r3, #1
 8004bce:	e003      	b.n	8004bd8 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bd4:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8004bd6:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004bdc:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(
 8004bde:	4611      	mov	r1, r2
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fc fe0f 	bl	8001804 <lfs_alignup>
 8004be6:	4603      	mov	r3, r0
 8004be8:	4619      	mov	r1, r3
 8004bea:	4620      	mov	r0, r4
 8004bec:	f7fc fde5 	bl	80017ba <lfs_min>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d20e      	bcs.n	8004c16 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8004bf8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	085b      	lsrs	r3, r3, #1
 8004c02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c04:	4413      	add	r3, r2
 8004c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 8004c08:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d8a0      	bhi.n	8004b56 <lfs_dir_splittingcompact+0x16>
 8004c14:	e000      	b.n	8004c18 <lfs_dir_splittingcompact+0xd8>
                break;
 8004c16:	bf00      	nop
        }

        if (split == begin) {
 8004c18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004c1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d02d      	beq.n	8004c7e <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8004c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004c2a:	9202      	str	r2, [sp, #8]
 8004c2c:	9301      	str	r3, [sp, #4]
 8004c2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f7ff fce4 	bl	8004606 <lfs_dir_split>
 8004c3e:	6278      	str	r0, [r7, #36]	@ 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8004c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <lfs_dir_splittingcompact+0x112>
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c48:	f113 0f1c 	cmn.w	r3, #28
 8004c4c:	d001      	beq.n	8004c52 <lfs_dir_splittingcompact+0x112>
            return err;
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c50:	e07c      	b.n	8004d4c <lfs_dir_splittingcompact+0x20c>
        }

        if (err) {
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00e      	beq.n	8004c76 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	493e      	ldr	r1, [pc, #248]	@ (8004d5c <lfs_dir_splittingcompact+0x21c>)
 8004c62:	9101      	str	r1, [sp, #4]
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	4613      	mov	r3, r2
 8004c68:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 8004c6c:	493c      	ldr	r1, [pc, #240]	@ (8004d60 <lfs_dir_splittingcompact+0x220>)
 8004c6e:	483d      	ldr	r0, [pc, #244]	@ (8004d64 <lfs_dir_splittingcompact+0x224>)
 8004c70:	f003 fece 	bl	8008a10 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8004c74:	e004      	b.n	8004c80 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8004c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c78:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    while (true) {
 8004c7c:	e767      	b.n	8004b4e <lfs_dir_splittingcompact+0xe>
            break;
 8004c7e:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8004c80:	68b9      	ldr	r1, [r7, #8]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f7ff fd3e 	bl	8004704 <lfs_dir_needsrelocation>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d04f      	beq.n	8004d2e <lfs_dir_splittingcompact+0x1ee>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2200      	movs	r2, #0
 8004c92:	613a      	str	r2, [r7, #16]
 8004c94:	2201      	movs	r2, #1
 8004c96:	617a      	str	r2, [r7, #20]
 8004c98:	f107 0210 	add.w	r2, r7, #16
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fd fa08 	bl	80020b4 <lfs_pair_cmp>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d141      	bne.n	8004d2e <lfs_dir_splittingcompact+0x1ee>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f003 fb92 	bl	80083d4 <lfs_fs_size_>
 8004cb0:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	da01      	bge.n	8004cbc <lfs_dir_splittingcompact+0x17c>
            return size;
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	e047      	b.n	8004d4c <lfs_dir_splittingcompact+0x20c>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	1ad2      	subs	r2, r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cc8:	08db      	lsrs	r3, r3, #3
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d92f      	bls.n	8004d2e <lfs_dir_splittingcompact+0x1ee>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	4a22      	ldr	r2, [pc, #136]	@ (8004d5c <lfs_dir_splittingcompact+0x21c>)
 8004cd4:	9200      	str	r2, [sp, #0]
 8004cd6:	f640 0286 	movw	r2, #2182	@ 0x886
 8004cda:	4921      	ldr	r1, [pc, #132]	@ (8004d60 <lfs_dir_splittingcompact+0x220>)
 8004cdc:	4822      	ldr	r0, [pc, #136]	@ (8004d68 <lfs_dir_splittingcompact+0x228>)
 8004cde:	f003 fe97 	bl	8008a10 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8004ce2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004ce6:	9302      	str	r3, [sp, #8]
 8004ce8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f7ff fc84 	bl	8004606 <lfs_dir_split>
 8004cfe:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d005      	beq.n	8004d12 <lfs_dir_splittingcompact+0x1d2>
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	f113 0f1c 	cmn.w	r3, #28
 8004d0c:	d001      	beq.n	8004d12 <lfs_dir_splittingcompact+0x1d2>
                return err;
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	e01c      	b.n	8004d4c <lfs_dir_splittingcompact+0x20c>
            }

            if (err) {
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d007      	beq.n	8004d28 <lfs_dir_splittingcompact+0x1e8>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8004d18:	4b10      	ldr	r3, [pc, #64]	@ (8004d5c <lfs_dir_splittingcompact+0x21c>)
 8004d1a:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 8004d1e:	4910      	ldr	r1, [pc, #64]	@ (8004d60 <lfs_dir_splittingcompact+0x220>)
 8004d20:	4812      	ldr	r0, [pc, #72]	@ (8004d6c <lfs_dir_splittingcompact+0x22c>)
 8004d22:	f003 fe75 	bl	8008a10 <iprintf>
 8004d26:	e002      	b.n	8004d2e <lfs_dir_splittingcompact+0x1ee>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8004d2e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004d32:	9302      	str	r3, [sp, #8]
 8004d34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004d38:	9301      	str	r3, [sp, #4]
 8004d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f7ff fd03 	bl	8004750 <lfs_dir_compact>
 8004d4a:	4603      	mov	r3, r0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3734      	adds	r7, #52	@ 0x34
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd90      	pop	{r4, r7, pc}
 8004d54:	080046af 	.word	0x080046af
 8004d58:	400ffc00 	.word	0x400ffc00
 8004d5c:	08009908 	.word	0x08009908
 8004d60:	080097f8 	.word	0x080097f8
 8004d64:	080099e4 	.word	0x080099e4
 8004d68:	08009a14 	.word	0x08009a14
 8004d6c:	08009a44 	.word	0x08009a44

08004d70 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8004d70:	b5b0      	push	{r4, r5, r7, lr}
 8004d72:	b0a6      	sub	sp, #152	@ 0x98
 8004d74:	af0a      	add	r7, sp, #40	@ 0x28
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
    int state = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8004d82:	2300      	movs	r3, #0
 8004d84:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 8004d88:	2300      	movs	r3, #0
 8004d8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d8c:	e06d      	b.n	8004e6a <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8004d8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	4413      	add	r3, r2
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fd fa57 	bl	800224c <lfs_tag_type3>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	461a      	mov	r2, r3
 8004da2:	f240 4301 	movw	r3, #1025	@ 0x401
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d106      	bne.n	8004db8 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	8a9b      	ldrh	r3, [r3, #20]
 8004dae:	3301      	adds	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	829a      	strh	r2, [r3, #20]
 8004db6:	e055      	b.n	8004e64 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8004db8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fd fa42 	bl	800224c <lfs_tag_type3>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d114      	bne.n	8004dfe <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	8a9b      	ldrh	r3, [r3, #20]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d106      	bne.n	8004dea <lfs_dir_relocatingcommit+0x7a>
 8004ddc:	4ba4      	ldr	r3, [pc, #656]	@ (8005070 <lfs_dir_relocatingcommit+0x300>)
 8004dde:	4aa5      	ldr	r2, [pc, #660]	@ (8005074 <lfs_dir_relocatingcommit+0x304>)
 8004de0:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 8004de4:	48a4      	ldr	r0, [pc, #656]	@ (8005078 <lfs_dir_relocatingcommit+0x308>)
 8004de6:	f003 fc63 	bl	80086b0 <__assert_func>
            dir->count -= 1;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	8a9b      	ldrh	r3, [r3, #20]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8004dfc:	e032      	b.n	8004e64 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8004dfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	4413      	add	r3, r2
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fd f9ff 	bl	800220c <lfs_tag_type1>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004e14:	d126      	bne.n	8004e64 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8004e16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8004e26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8004e36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fd fa13 	bl	800226c <lfs_tag_chunk>
 8004e46:	4603      	mov	r3, r0
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	bf14      	ite	ne
 8004e50:	2301      	movne	r3, #1
 8004e52:	2300      	moveq	r3, #0
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	3318      	adds	r3, #24
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fd f97f 	bl	8002162 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8004e64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e66:	3301      	adds	r3, #1
 8004e68:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e6a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004e6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e70:	429a      	cmp	r2, r3
 8004e72:	db8c      	blt.n	8004d8e <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8004e74:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d02b      	beq.n	8004ed4 <lfs_dir_relocatingcommit+0x164>
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	8a9b      	ldrh	r3, [r3, #20]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d127      	bne.n	8004ed4 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8004e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d106      	bne.n	8004e9a <lfs_dir_relocatingcommit+0x12a>
 8004e8c:	4b7b      	ldr	r3, [pc, #492]	@ (800507c <lfs_dir_relocatingcommit+0x30c>)
 8004e8e:	4a79      	ldr	r2, [pc, #484]	@ (8005074 <lfs_dir_relocatingcommit+0x304>)
 8004e90:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 8004e94:	4878      	ldr	r0, [pc, #480]	@ (8005078 <lfs_dir_relocatingcommit+0x308>)
 8004e96:	f003 fc0b 	bl	80086b0 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f002 fdf2 	bl	8007a8c <lfs_fs_pred>
 8004ea8:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 8004eaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <lfs_dir_relocatingcommit+0x14c>
 8004eb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004eb2:	f113 0f02 	cmn.w	r3, #2
 8004eb6:	d001      	beq.n	8004ebc <lfs_dir_relocatingcommit+0x14c>
            return err;
 8004eb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004eba:	e210      	b.n	80052de <lfs_dir_relocatingcommit+0x56e>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8004ebc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ebe:	f113 0f02 	cmn.w	r3, #2
 8004ec2:	d007      	beq.n	8004ed4 <lfs_dir_relocatingcommit+0x164>
 8004ec4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ec8:	7ddb      	ldrb	r3, [r3, #23]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8004ece:	2302      	movs	r3, #2
 8004ed0:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 8004ed2:	e121      	b.n	8005118 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	7d9b      	ldrb	r3, [r3, #22]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 80fb 	beq.w	80050d4 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8004ee2:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8004ee8:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8004eee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ef0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8004efa:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d004      	beq.n	8004f10 <lfs_dir_relocatingcommit+0x1a0>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f0c:	3b08      	subs	r3, #8
 8004f0e:	e003      	b.n	8004f18 <lfs_dir_relocatingcommit+0x1a8>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8004f18:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	3318      	adds	r3, #24
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fd f939 	bl	8002196 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f30:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 8004f36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004f3a:	9308      	str	r3, [sp, #32]
 8004f3c:	4b50      	ldr	r3, [pc, #320]	@ (8005080 <lfs_dir_relocatingcommit+0x310>)
 8004f3e:	9307      	str	r3, [sp, #28]
 8004f40:	2300      	movs	r3, #0
 8004f42:	9306      	str	r3, [sp, #24]
 8004f44:	2300      	movs	r3, #0
 8004f46:	9305      	str	r3, [sp, #20]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	9304      	str	r3, [sp, #16]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	9303      	str	r3, [sp, #12]
 8004f50:	2300      	movs	r3, #0
 8004f52:	9302      	str	r3, [sp, #8]
 8004f54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f58:	9301      	str	r3, [sp, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f7fd ff6a 	bl	8002e3c <lfs_dir_traverse>
 8004f68:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	3318      	adds	r3, #24
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fd f8f7 	bl	8002162 <lfs_pair_fromle32>
        if (err) {
 8004f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00b      	beq.n	8004f92 <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8004f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f7c:	f113 0f1c 	cmn.w	r3, #28
 8004f80:	f000 80aa 	beq.w	80050d8 <lfs_dir_relocatingcommit+0x368>
 8004f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f86:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004f8a:	f000 80a5 	beq.w	80050d8 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8004f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f90:	e1a5      	b.n	80052de <lfs_dir_relocatingcommit+0x56e>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8004f92:	f107 031c 	add.w	r3, r7, #28
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	605a      	str	r2, [r3, #4]
 8004f9c:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004fa4:	f107 031c 	add.w	r3, r7, #28
 8004fa8:	4611      	mov	r1, r2
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fd f9a9 	bl	8002302 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8004fb6:	f107 031c 	add.w	r3, r7, #28
 8004fba:	4611      	mov	r1, r2
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fd f9a0 	bl	8002302 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004fc8:	f107 031c 	add.w	r3, r7, #28
 8004fcc:	4611      	mov	r1, r2
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fd f997 	bl	8002302 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8004fe0:	f107 031c 	add.w	r3, r7, #28
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fd f9b1 	bl	800234c <lfs_gstate_iszero>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f083 0301 	eor.w	r3, r3, #1
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d027      	beq.n	8005046 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8004ff6:	f107 031c 	add.w	r3, r7, #28
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	68b9      	ldr	r1, [r7, #8]
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f7fe feec 	bl	8003ddc <lfs_dir_getgstate>
 8005004:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 8005006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 800500c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800500e:	e166      	b.n	80052de <lfs_dir_relocatingcommit+0x56e>
            }

            lfs_gstate_tole32(&delta);
 8005010:	f107 031c 	add.w	r3, r7, #28
 8005014:	4618      	mov	r0, r3
 8005016:	f7fd fa3f 	bl	8002498 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800501a:	f107 031c 	add.w	r3, r7, #28
 800501e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8005022:	4a18      	ldr	r2, [pc, #96]	@ (8005084 <lfs_dir_relocatingcommit+0x314>)
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f7ff f885 	bl	8004134 <lfs_dir_commitattr>
 800502a:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 800502c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005034:	f113 0f1c 	cmn.w	r3, #28
 8005038:	d050      	beq.n	80050dc <lfs_dir_relocatingcommit+0x36c>
 800503a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800503c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005040:	d04c      	beq.n	80050dc <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8005042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005044:	e14b      	b.n	80052de <lfs_dir_relocatingcommit+0x56e>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8005046:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800504a:	4619      	mov	r1, r3
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f7ff f8f1 	bl	8004234 <lfs_dir_commitcrc>
 8005052:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 8005054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005056:	2b00      	cmp	r3, #0
 8005058:	d016      	beq.n	8005088 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800505a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800505c:	f113 0f1c 	cmn.w	r3, #28
 8005060:	d03e      	beq.n	80050e0 <lfs_dir_relocatingcommit+0x370>
 8005062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005064:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005068:	d03a      	beq.n	80050e0 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 800506a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800506c:	e137      	b.n	80052de <lfs_dir_relocatingcommit+0x56e>
 800506e:	bf00      	nop
 8005070:	08009a70 	.word	0x08009a70
 8005074:	0800a4bc 	.word	0x0800a4bc
 8005078:	080097f8 	.word	0x080097f8
 800507c:	08009a80 	.word	0x08009a80
 8005080:	080046db 	.word	0x080046db
 8005084:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8005088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800508e:	6992      	ldr	r2, [r2, #24]
 8005090:	fbb3 f1f2 	udiv	r1, r3, r2
 8005094:	fb01 f202 	mul.w	r2, r1, r2
 8005098:	1a9b      	subs	r3, r3, r2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d006      	beq.n	80050ac <lfs_dir_relocatingcommit+0x33c>
 800509e:	4b92      	ldr	r3, [pc, #584]	@ (80052e8 <lfs_dir_relocatingcommit+0x578>)
 80050a0:	4a92      	ldr	r2, [pc, #584]	@ (80052ec <lfs_dir_relocatingcommit+0x57c>)
 80050a2:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 80050a6:	4892      	ldr	r0, [pc, #584]	@ (80052f0 <lfs_dir_relocatingcommit+0x580>)
 80050a8:	f003 fb02 	bl	80086b0 <__assert_func>
        dir->off = commit.off;
 80050ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 80050b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	333c      	adds	r3, #60	@ 0x3c
 80050be:	3230      	adds	r2, #48	@ 0x30
 80050c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80050c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	3348      	adds	r3, #72	@ 0x48
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	605a      	str	r2, [r3, #4]
 80050d0:	609a      	str	r2, [r3, #8]
 80050d2:	e021      	b.n	8005118 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 80050d4:	bf00      	nop
 80050d6:	e004      	b.n	80050e2 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 80050d8:	bf00      	nop
 80050da:	e002      	b.n	80050e2 <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 80050dc:	bf00      	nop
 80050de:	e000      	b.n	80050e2 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 80050e0:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	3310      	adds	r3, #16
 80050e6:	4619      	mov	r1, r3
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7fc fc1c 	bl	8001926 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	8a9b      	ldrh	r3, [r3, #20]
 80050f2:	9302      	str	r3, [sp, #8]
 80050f4:	2300      	movs	r3, #0
 80050f6:	9301      	str	r3, [sp, #4]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff fd1b 	bl	8004b40 <lfs_dir_splittingcompact>
 800510a:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 800510c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800510e:	2b00      	cmp	r3, #0
 8005110:	da01      	bge.n	8005116 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8005112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005114:	e0e3      	b.n	80052de <lfs_dir_relocatingcommit+0x56e>
    }

    goto fixmlist;
 8005116:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3304      	adds	r3, #4
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512a:	663b      	str	r3, [r7, #96]	@ 0x60
 800512c:	e0d2      	b.n	80052d4 <lfs_dir_relocatingcommit+0x564>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 800512e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005130:	3308      	adds	r3, #8
 8005132:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8005136:	4611      	mov	r1, r2
 8005138:	4618      	mov	r0, r3
 800513a:	f7fc ffbb 	bl	80020b4 <lfs_pair_cmp>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	f040 80c4 	bne.w	80052ce <lfs_dir_relocatingcommit+0x55e>
            d->m = *dir;
 8005146:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	f103 0408 	add.w	r4, r3, #8
 800514e:	4615      	mov	r5, r2
 8005150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005154:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005158:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 800515c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800515e:	3308      	adds	r3, #8
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	429a      	cmp	r2, r3
 8005164:	f000 80a9 	beq.w	80052ba <lfs_dir_relocatingcommit+0x54a>
                for (int i = 0; i < attrcount; i++) {
 8005168:	2300      	movs	r3, #0
 800516a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800516c:	e07b      	b.n	8005266 <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800516e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	4413      	add	r3, r2
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4618      	mov	r0, r3
 800517a:	f7fd f867 	bl	800224c <lfs_tag_type3>
 800517e:	4603      	mov	r3, r0
 8005180:	461a      	mov	r2, r3
 8005182:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8005186:	429a      	cmp	r2, r3
 8005188:	d115      	bne.n	80051b6 <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 800518a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800518c:	889c      	ldrh	r4, [r3, #4]
 800518e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	4413      	add	r3, r2
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f7fd f881 	bl	80022a0 <lfs_tag_id>
 800519e:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80051a0:	429c      	cmp	r4, r3
 80051a2:	d108      	bne.n	80051b6 <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 80051a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051aa:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80051ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051b2:	60da      	str	r2, [r3, #12]
 80051b4:	e054      	b.n	8005260 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80051b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	4413      	add	r3, r2
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fd f843 	bl	800224c <lfs_tag_type3>
 80051c6:	4603      	mov	r3, r0
 80051c8:	461a      	mov	r2, r3
 80051ca:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d11c      	bne.n	800520c <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 80051d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051d4:	889c      	ldrh	r4, [r3, #4]
 80051d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	4413      	add	r3, r2
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fd f85d 	bl	80022a0 <lfs_tag_id>
 80051e6:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80051e8:	429c      	cmp	r4, r3
 80051ea:	d90f      	bls.n	800520c <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 80051ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051ee:	889b      	ldrh	r3, [r3, #4]
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051f6:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80051f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051fa:	799b      	ldrb	r3, [r3, #6]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d12f      	bne.n	8005260 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8005200:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005204:	1e5a      	subs	r2, r3, #1
 8005206:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005208:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 800520a:	e029      	b.n	8005260 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800520c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	4413      	add	r3, r2
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4618      	mov	r0, r3
 8005218:	f7fd f818 	bl	800224c <lfs_tag_type3>
 800521c:	4603      	mov	r3, r0
 800521e:	461a      	mov	r2, r3
 8005220:	f240 4301 	movw	r3, #1025	@ 0x401
 8005224:	429a      	cmp	r2, r3
 8005226:	d11b      	bne.n	8005260 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8005228:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800522a:	889c      	ldrh	r4, [r3, #4]
 800522c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	4413      	add	r3, r2
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f7fd f832 	bl	80022a0 <lfs_tag_id>
 800523c:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800523e:	429c      	cmp	r4, r3
 8005240:	d30e      	bcc.n	8005260 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 8005242:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005244:	889b      	ldrh	r3, [r3, #4]
 8005246:	3301      	adds	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800524c:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 800524e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005250:	799b      	ldrb	r3, [r3, #6]
 8005252:	2b02      	cmp	r3, #2
 8005254:	d104      	bne.n	8005260 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 8005256:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800525e:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 8005260:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005262:	3301      	adds	r3, #1
 8005264:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005266:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005268:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800526c:	429a      	cmp	r2, r3
 800526e:	f6ff af7e 	blt.w	800516e <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8005272:	e022      	b.n	80052ba <lfs_dir_relocatingcommit+0x54a>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 8005274:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005276:	f103 0220 	add.w	r2, r3, #32
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	3320      	adds	r3, #32
 800527e:	4619      	mov	r1, r3
 8005280:	4610      	mov	r0, r2
 8005282:	f7fc ff17 	bl	80020b4 <lfs_pair_cmp>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d007      	beq.n	800529c <lfs_dir_relocatingcommit+0x52c>
                    d->id -= d->m.count;
 800528c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800528e:	889a      	ldrh	r2, [r3, #4]
 8005290:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005292:	8b9b      	ldrh	r3, [r3, #28]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	b29a      	uxth	r2, r3
 8005298:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800529a:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800529c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800529e:	f103 0108 	add.w	r1, r3, #8
 80052a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052a4:	3320      	adds	r3, #32
 80052a6:	461a      	mov	r2, r3
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f7fe fd7b 	bl	8003da4 <lfs_dir_fetch>
 80052ae:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 80052b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <lfs_dir_relocatingcommit+0x54a>
                    return err;
 80052b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052b8:	e011      	b.n	80052de <lfs_dir_relocatingcommit+0x56e>
            while (d->id >= d->m.count && d->m.split) {
 80052ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052bc:	889a      	ldrh	r2, [r3, #4]
 80052be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052c0:	8b9b      	ldrh	r3, [r3, #28]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d303      	bcc.n	80052ce <lfs_dir_relocatingcommit+0x55e>
 80052c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052c8:	7fdb      	ldrb	r3, [r3, #31]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1d2      	bne.n	8005274 <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80052ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80052d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f47f af29 	bne.w	800512e <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 80052dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3770      	adds	r7, #112	@ 0x70
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bdb0      	pop	{r4, r5, r7, pc}
 80052e6:	bf00      	nop
 80052e8:	08009960 	.word	0x08009960
 80052ec:	0800a4bc 	.word	0x0800a4bc
 80052f0:	080097f8 	.word	0x080097f8

080052f4 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80052f4:	b5b0      	push	{r4, r5, r7, lr}
 80052f6:	b0bc      	sub	sp, #240	@ 0xf0
 80052f8:	af04      	add	r7, sp, #16
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005306:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800530a:	e045      	b.n	8005398 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800530c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005310:	3308      	adds	r3, #8
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	429a      	cmp	r2, r3
 8005316:	d03a      	beq.n	800538e <lfs_dir_orphaningcommit+0x9a>
 8005318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800531c:	3308      	adds	r3, #8
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	4611      	mov	r1, r2
 8005322:	4618      	mov	r0, r3
 8005324:	f7fc fec6 	bl	80020b4 <lfs_pair_cmp>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d12f      	bne.n	800538e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800532e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005332:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8005334:	2b01      	cmp	r3, #1
 8005336:	d12a      	bne.n	800538e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800533c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800533e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d023      	beq.n	800538e <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8005346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800534a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005352:	429a      	cmp	r2, r3
 8005354:	d91b      	bls.n	800538e <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8005356:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 fff2 	bl	8006344 <lfs_file_outline>
 8005360:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 8005364:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <lfs_dir_orphaningcommit+0x7e>
                return err;
 800536c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005370:	e2ad      	b.n	80058ce <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8005372:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f001 f806 	bl	8006388 <lfs_file_flush>
 800537c:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 8005380:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <lfs_dir_orphaningcommit+0x9a>
                return err;
 8005388:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800538c:	e29f      	b.n	80058ce <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800538e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1b5      	bne.n	800530c <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80053b6:	461d      	mov	r5, r3
 80053b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80053c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 80053ca:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80053ce:	9301      	str	r3, [sp, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f7ff fcca 	bl	8004d70 <lfs_dir_relocatingcommit>
 80053dc:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 80053e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	da02      	bge.n	80053ee <lfs_dir_orphaningcommit+0xfa>
        return state;
 80053e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053ec:	e26f      	b.n	80058ce <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80053f4:	4611      	mov	r1, r2
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fc fe5c 	bl	80020b4 <lfs_pair_cmp>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d109      	bne.n	8005416 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	461d      	mov	r5, r3
 8005406:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800540a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800540c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800540e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005412:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8005416:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800541a:	2b02      	cmp	r3, #2
 800541c:	d14a      	bne.n	80054b4 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3348      	adds	r3, #72	@ 0x48
 8005422:	461a      	mov	r2, r3
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f7fe fcd8 	bl	8003ddc <lfs_dir_getgstate>
 800542c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 8005430:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <lfs_dir_orphaningcommit+0x14a>
            return err;
 8005438:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800543c:	e247      	b.n	80058ce <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 800543e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005440:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 8005444:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005446:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	3318      	adds	r3, #24
 800544e:	4618      	mov	r0, r3
 8005450:	f7fc fea1 	bl	8002196 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	7ddb      	ldrb	r3, [r3, #23]
 8005458:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800545c:	051a      	lsls	r2, r3, #20
 800545e:	4bc2      	ldr	r3, [pc, #776]	@ (8005768 <lfs_dir_orphaningcommit+0x474>)
 8005460:	4313      	orrs	r3, r2
 8005462:	667b      	str	r3, [r7, #100]	@ 0x64
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	3318      	adds	r3, #24
 8005468:	66bb      	str	r3, [r7, #104]	@ 0x68
 800546a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800546e:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8005472:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8005476:	2000      	movs	r0, #0
 8005478:	9001      	str	r0, [sp, #4]
 800547a:	2001      	movs	r0, #1
 800547c:	9000      	str	r0, [sp, #0]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f7ff fc76 	bl	8004d70 <lfs_dir_relocatingcommit>
 8005484:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	3318      	adds	r3, #24
 800548c:	4618      	mov	r0, r3
 800548e:	f7fc fe68 	bl	8002162 <lfs_pair_fromle32>
        if (state < 0) {
 8005492:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005496:	2b00      	cmp	r3, #0
 8005498:	da02      	bge.n	80054a0 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 800549a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800549e:	e216      	b.n	80058ce <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 80054a0:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80054a4:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 80054a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80054b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 80054b4:	2300      	movs	r3, #0
 80054b6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 80054ba:	e1fc      	b.n	80058b6 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 80054bc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80054c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80054c4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80054c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80054cc:	4ca7      	ldr	r4, [pc, #668]	@ (800576c <lfs_dir_orphaningcommit+0x478>)
 80054ce:	9403      	str	r4, [sp, #12]
 80054d0:	9102      	str	r1, [sp, #8]
 80054d2:	9201      	str	r2, [sp, #4]
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	4603      	mov	r3, r0
 80054d8:	f640 128c 	movw	r2, #2444	@ 0x98c
 80054dc:	49a4      	ldr	r1, [pc, #656]	@ (8005770 <lfs_dir_orphaningcommit+0x47c>)
 80054de:	48a5      	ldr	r0, [pc, #660]	@ (8005774 <lfs_dir_orphaningcommit+0x480>)
 80054e0:	f003 fa96 	bl	8008a10 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f103 0220 	add.w	r2, r3, #32
 80054f0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80054f4:	4611      	mov	r1, r2
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fc fddc 	bl	80020b4 <lfs_pair_cmp>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d107      	bne.n	8005512 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8005502:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 800550a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005516:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800551a:	e037      	b.n	800558c <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 800551c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005520:	f103 0208 	add.w	r2, r3, #8
 8005524:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005528:	4611      	mov	r1, r2
 800552a:	4618      	mov	r0, r3
 800552c:	f7fc fdc2 	bl	80020b4 <lfs_pair_cmp>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d109      	bne.n	800554a <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8005536:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800553a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800553e:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8005540:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8005544:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005548:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 800554a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800554e:	799b      	ldrb	r3, [r3, #6]
 8005550:	2b02      	cmp	r3, #2
 8005552:	d116      	bne.n	8005582 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8005554:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005558:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800555c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005560:	4611      	mov	r1, r2
 8005562:	4618      	mov	r0, r3
 8005564:	f7fc fda6 	bl	80020b4 <lfs_pair_cmp>
 8005568:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 800556a:	2b00      	cmp	r3, #0
 800556c:	d109      	bne.n	8005582 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 800556e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8005572:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005576:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8005578:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800557c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005580:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005582:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800558c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1c3      	bne.n	800551c <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8005594:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8005598:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800559c:	4619      	mov	r1, r3
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f002 fb26 	bl	8007bf0 <lfs_fs_parent>
 80055a4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80055a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	da07      	bge.n	80055c0 <lfs_dir_orphaningcommit+0x2cc>
 80055b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055b4:	f113 0f02 	cmn.w	r3, #2
 80055b8:	d002      	beq.n	80055c0 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 80055ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055be:	e186      	b.n	80058ce <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80055c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055c4:	f113 0f02 	cmn.w	r3, #2
 80055c8:	bf14      	ite	ne
 80055ca:	2301      	movne	r3, #1
 80055cc:	2300      	moveq	r3, #0
 80055ce:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 80055d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055d6:	f113 0f02 	cmn.w	r3, #2
 80055da:	f000 809e 	beq.w	800571a <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 80055de:	2101      	movs	r1, #1
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f002 fb9d 	bl	8007d20 <lfs_fs_preporphans>
 80055e6:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 80055ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <lfs_dir_orphaningcommit+0x304>
                return err;
 80055f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80055f6:	e16a      	b.n	80058ce <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80055f8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80055fc:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3330      	adds	r3, #48	@ 0x30
 8005604:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8005608:	4611      	mov	r1, r2
 800560a:	4618      	mov	r0, r3
 800560c:	f7fc ff04 	bl	8002418 <lfs_gstate_hasmovehere>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d02d      	beq.n	8005672 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561a:	4618      	mov	r0, r3
 800561c:	f7fc fe40 	bl	80022a0 <lfs_tag_id>
 8005620:	4603      	mov	r3, r0
 8005622:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 8005626:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005628:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800562a:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 800562e:	484f      	ldr	r0, [pc, #316]	@ (800576c <lfs_dir_orphaningcommit+0x478>)
 8005630:	9002      	str	r0, [sp, #8]
 8005632:	9201      	str	r2, [sp, #4]
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	460b      	mov	r3, r1
 8005638:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 800563c:	494c      	ldr	r1, [pc, #304]	@ (8005770 <lfs_dir_orphaningcommit+0x47c>)
 800563e:	484e      	ldr	r0, [pc, #312]	@ (8005778 <lfs_dir_orphaningcommit+0x484>)
 8005640:	f003 f9e6 	bl	8008a10 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8005644:	2200      	movs	r2, #0
 8005646:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f002 fbb8 	bl	8007dc0 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8005650:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005654:	4618      	mov	r0, r3
 8005656:	f7fc fe23 	bl	80022a0 <lfs_tag_id>
 800565a:	4603      	mov	r3, r0
 800565c:	461a      	mov	r2, r3
 800565e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8005662:	4293      	cmp	r3, r2
 8005664:	d205      	bcs.n	8005672 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8005666:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800566a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800566e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8005672:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005674:	657b      	str	r3, [r7, #84]	@ 0x54
 8005676:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005678:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 800567a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800567e:	4618      	mov	r0, r3
 8005680:	f7fc fd89 	bl	8002196 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8005684:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8005688:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800568c:	4293      	cmp	r3, r2
 800568e:	d007      	beq.n	80056a0 <lfs_dir_orphaningcommit+0x3ac>
 8005690:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8005694:	029b      	lsls	r3, r3, #10
 8005696:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800569a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800569e:	e000      	b.n	80056a2 <lfs_dir_orphaningcommit+0x3ae>
 80056a0:	2300      	movs	r3, #0
 80056a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80056a4:	2300      	movs	r3, #0
 80056a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056ae:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80056b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80056b4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80056b8:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80056bc:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80056c0:	2000      	movs	r0, #0
 80056c2:	9001      	str	r0, [sp, #4]
 80056c4:	2002      	movs	r0, #2
 80056c6:	9000      	str	r0, [sp, #0]
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f7ff fb51 	bl	8004d70 <lfs_dir_relocatingcommit>
 80056ce:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80056d2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fc fd43 	bl	8002162 <lfs_pair_fromle32>
            if (state < 0) {
 80056dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	da02      	bge.n	80056ea <lfs_dir_orphaningcommit+0x3f6>
                return state;
 80056e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056e8:	e0f1      	b.n	80058ce <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 80056ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d113      	bne.n	800571a <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 80056f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 80056f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 80056fe:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8005702:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8005706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800570a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800570e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005718:	e0cd      	b.n	80058b6 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 800571a:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800571e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005722:	4619      	mov	r1, r3
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f002 f9b1 	bl	8007a8c <lfs_fs_pred>
 800572a:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 800572e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005732:	2b00      	cmp	r3, #0
 8005734:	d007      	beq.n	8005746 <lfs_dir_orphaningcommit+0x452>
 8005736:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800573a:	f113 0f02 	cmn.w	r3, #2
 800573e:	d002      	beq.n	8005746 <lfs_dir_orphaningcommit+0x452>
            return err;
 8005740:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005744:	e0c3      	b.n	80058ce <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8005746:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d01a      	beq.n	8005784 <lfs_dir_orphaningcommit+0x490>
 800574e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005752:	f113 0f02 	cmn.w	r3, #2
 8005756:	d115      	bne.n	8005784 <lfs_dir_orphaningcommit+0x490>
 8005758:	4b08      	ldr	r3, [pc, #32]	@ (800577c <lfs_dir_orphaningcommit+0x488>)
 800575a:	4a09      	ldr	r2, [pc, #36]	@ (8005780 <lfs_dir_orphaningcommit+0x48c>)
 800575c:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 8005760:	4803      	ldr	r0, [pc, #12]	@ (8005770 <lfs_dir_orphaningcommit+0x47c>)
 8005762:	f002 ffa5 	bl	80086b0 <__assert_func>
 8005766:	bf00      	nop
 8005768:	000ffc08 	.word	0x000ffc08
 800576c:	08009908 	.word	0x08009908
 8005770:	080097f8 	.word	0x080097f8
 8005774:	08009a88 	.word	0x08009a88
 8005778:	08009ac4 	.word	0x08009ac4
 800577c:	08009b08 	.word	0x08009b08
 8005780:	0800a4d8 	.word	0x0800a4d8

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8005784:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005788:	f113 0f02 	cmn.w	r3, #2
 800578c:	f000 8093 	beq.w	80058b6 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3330      	adds	r3, #48	@ 0x30
 8005794:	4618      	mov	r0, r3
 8005796:	f7fc fdf6 	bl	8002386 <lfs_gstate_hasorphans>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d011      	beq.n	80057c4 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 80057a0:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 80057a4:	425b      	negs	r3, r3
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	b25b      	sxtb	r3, r3
 80057aa:	4619      	mov	r1, r3
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f002 fab7 	bl	8007d20 <lfs_fs_preporphans>
 80057b2:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 80057b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 80057be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80057c2:	e084      	b.n	80058ce <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80057c4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80057c8:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3330      	adds	r3, #48	@ 0x30
 80057d0:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80057d4:	4611      	mov	r1, r2
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fc fe1e 	bl	8002418 <lfs_gstate_hasmovehere>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d01c      	beq.n	800581c <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fc fd5a 	bl	80022a0 <lfs_tag_id>
 80057ec:	4603      	mov	r3, r0
 80057ee:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 80057f2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80057f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057f6:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 80057fa:	4837      	ldr	r0, [pc, #220]	@ (80058d8 <lfs_dir_orphaningcommit+0x5e4>)
 80057fc:	9002      	str	r0, [sp, #8]
 80057fe:	9201      	str	r2, [sp, #4]
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	460b      	mov	r3, r1
 8005804:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 8005808:	4934      	ldr	r1, [pc, #208]	@ (80058dc <lfs_dir_orphaningcommit+0x5e8>)
 800580a:	4835      	ldr	r0, [pc, #212]	@ (80058e0 <lfs_dir_orphaningcommit+0x5ec>)
 800580c:	f003 f900 	bl	8008a10 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8005810:	2200      	movs	r2, #0
 8005812:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f002 fad2 	bl	8007dc0 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 800581c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800581e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 8005822:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005824:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 8005828:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800582c:	4618      	mov	r0, r3
 800582e:	f7fc fcb2 	bl	8002196 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8005832:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8005836:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800583a:	4293      	cmp	r3, r2
 800583c:	d007      	beq.n	800584e <lfs_dir_orphaningcommit+0x55a>
 800583e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8005842:	029b      	lsls	r3, r3, #10
 8005844:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8005848:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800584c:	e000      	b.n	8005850 <lfs_dir_orphaningcommit+0x55c>
 800584e:	2300      	movs	r3, #0
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24
 8005852:	2300      	movs	r3, #0
 8005854:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005856:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800585a:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800585e:	051a      	lsls	r2, r3, #20
 8005860:	4b20      	ldr	r3, [pc, #128]	@ (80058e4 <lfs_dir_orphaningcommit+0x5f0>)
 8005862:	4313      	orrs	r3, r2
 8005864:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005866:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800586a:	633b      	str	r3, [r7, #48]	@ 0x30
 800586c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005870:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8005874:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8005878:	2000      	movs	r0, #0
 800587a:	9001      	str	r0, [sp, #4]
 800587c:	2002      	movs	r0, #2
 800587e:	9000      	str	r0, [sp, #0]
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f7ff fa75 	bl	8004d70 <lfs_dir_relocatingcommit>
 8005886:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800588a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800588e:	4618      	mov	r0, r3
 8005890:	f7fc fc67 	bl	8002162 <lfs_pair_fromle32>
            if (state < 0) {
 8005894:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005898:	2b00      	cmp	r3, #0
 800589a:	da02      	bge.n	80058a2 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 800589c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058a0:	e015      	b.n	80058ce <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 80058a2:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80058a6:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 80058aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80058b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 80058b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	f43f adfe 	beq.w	80054bc <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80058c0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <lfs_dir_orphaningcommit+0x5d8>
 80058c8:	2303      	movs	r3, #3
 80058ca:	e000      	b.n	80058ce <lfs_dir_orphaningcommit+0x5da>
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	37e0      	adds	r7, #224	@ 0xe0
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bdb0      	pop	{r4, r5, r7, pc}
 80058d6:	bf00      	nop
 80058d8:	08009908 	.word	0x08009908
 80058dc:	080097f8 	.word	0x080097f8
 80058e0:	08009ac4 	.word	0x08009ac4
 80058e4:	000ffc08 	.word	0x000ffc08

080058e8 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f7ff fcf9 	bl	80052f4 <lfs_dir_orphaningcommit>
 8005902:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	2b00      	cmp	r3, #0
 8005908:	da01      	bge.n	800590e <lfs_dir_commit+0x26>
        return orphans;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	e00d      	b.n	800592a <lfs_dir_commit+0x42>
    }

    if (orphans) {
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d009      	beq.n	8005928 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8005914:	2100      	movs	r1, #0
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f002 fb74 	bl	8008004 <lfs_fs_deorphan>
 800591c:	6138      	str	r0, [r7, #16]
        if (err) {
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <lfs_dir_commit+0x40>
            return err;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	e000      	b.n	800592a <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8005932:	b590      	push	{r4, r7, lr}
 8005934:	b087      	sub	sp, #28
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	3b08      	subs	r3, #8
 800594a:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	fbb2 f3f3 	udiv	r3, r2, r3
 8005954:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <lfs_ctz_index+0x2e>
        return 0;
 800595c:	2300      	movs	r3, #0
 800595e:	e01c      	b.n	800599a <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	3b01      	subs	r3, #1
 8005964:	4618      	mov	r0, r3
 8005966:	f7fb ff7e 	bl	8001866 <lfs_popc>
 800596a:	4603      	mov	r3, r0
 800596c:	3302      	adds	r3, #2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	1ad2      	subs	r2, r2, r3
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	fbb2 f3f3 	udiv	r3, r2, r3
 800597a:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	fb02 f303 	mul.w	r3, r2, r3
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	1ad4      	subs	r4, r2, r3
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f7fb ff6c 	bl	8001866 <lfs_popc>
 800598e:	4603      	mov	r3, r0
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	1ae2      	subs	r2, r4, r3
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	601a      	str	r2, [r3, #0]
    return i;
 8005998:	68fb      	ldr	r3, [r7, #12]
}
 800599a:	4618      	mov	r0, r3
 800599c:	371c      	adds	r7, #28
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd90      	pop	{r4, r7, pc}

080059a2 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 80059a2:	b590      	push	{r4, r7, lr}
 80059a4:	b08f      	sub	sp, #60	@ 0x3c
 80059a6:	af04      	add	r7, sp, #16
 80059a8:	60f8      	str	r0, [r7, #12]
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	607a      	str	r2, [r7, #4]
 80059ae:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 80059b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d108      	bne.n	80059c8 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 80059b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059bc:	601a      	str	r2, [r3, #0]
        *off = 0;
 80059be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059c0:	2200      	movs	r2, #0
 80059c2:	601a      	str	r2, [r3, #0]
        return 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	e053      	b.n	8005a70 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80059c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ca:	3b01      	subs	r3, #1
 80059cc:	617b      	str	r3, [r7, #20]
 80059ce:	f107 0314 	add.w	r3, r7, #20
 80059d2:	4619      	mov	r1, r3
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f7ff ffac 	bl	8005932 <lfs_ctz_index>
 80059da:	4603      	mov	r3, r0
 80059dc:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 80059de:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80059e2:	4619      	mov	r1, r3
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f7ff ffa4 	bl	8005932 <lfs_ctz_index>
 80059ea:	4603      	mov	r3, r0
 80059ec:	623b      	str	r3, [r7, #32]

    while (current > target) {
 80059ee:	e034      	b.n	8005a5a <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 80059f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	3301      	adds	r3, #1
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fb ff15 	bl	8001828 <lfs_npw2>
 80059fe:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8005a00:	1e5c      	subs	r4, r3, #1
 8005a02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a04:	f7fb ff20 	bl	8001848 <lfs_ctz>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	f7fb fed4 	bl	80017ba <lfs_min>
 8005a12:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	0092      	lsls	r2, r2, #2
 8005a1a:	2104      	movs	r1, #4
 8005a1c:	9103      	str	r1, [sp, #12]
 8005a1e:	4639      	mov	r1, r7
 8005a20:	9102      	str	r1, [sp, #8]
 8005a22:	9201      	str	r2, [sp, #4]
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	2304      	movs	r3, #4
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	68b9      	ldr	r1, [r7, #8]
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f7fb ff9f 	bl	8001970 <lfs_bd_read>
 8005a32:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fb ff2f 	bl	800189a <lfs_fromle32>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	603b      	str	r3, [r7, #0]
        if (err) {
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <lfs_ctz_find+0xa8>
            return err;
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	e012      	b.n	8005a70 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a52:	461a      	mov	r2, r3
 8005a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a56:	1a9b      	subs	r3, r3, r2
 8005a58:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 8005a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d8c6      	bhi.n	80059f0 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a66:	601a      	str	r2, [r3, #0]
    *off = pos;
 8005a68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005a6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a6c:	601a      	str	r2, [r3, #0]
    return 0;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	372c      	adds	r7, #44	@ 0x2c
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd90      	pop	{r4, r7, pc}

08005a78 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b092      	sub	sp, #72	@ 0x48
 8005a7c:	af04      	add	r7, sp, #16
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8005a86:	f107 0320 	add.w	r3, r7, #32
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f7fc ff05 	bl	800289c <lfs_alloc>
 8005a92:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 8005a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <lfs_ctz_extend+0x26>
            return err;
 8005a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9c:	e0eb      	b.n	8005c76 <lfs_ctz_extend+0x1fe>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f7fc faa4 	bl	8001ff0 <lfs_bd_erase>
 8005aa8:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 8005aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d006      	beq.n	8005abe <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8005ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005ab6:	f000 80cd 	beq.w	8005c54 <lfs_ctz_extend+0x1dc>
                    goto relocate;
                }
                return err;
 8005aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005abc:	e0db      	b.n	8005c76 <lfs_ctz_extend+0x1fe>
            }

            if (size == 0) {
 8005abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d107      	bne.n	8005ad4 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8005ac4:	6a3a      	ldr	r2, [r7, #32]
 8005ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ac8:	601a      	str	r2, [r3, #0]
                *off = 0;
 8005aca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]
                return 0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e0d0      	b.n	8005c76 <lfs_ctz_extend+0x1fe>
            }

            lfs_size_t noff = size - 1;
 8005ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8005ada:	f107 031c 	add.w	r3, r7, #28
 8005ade:	4619      	mov	r1, r3
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f7ff ff26 	bl	8005932 <lfs_ctz_index>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	3301      	adds	r3, #1
 8005aee:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005af4:	69da      	ldr	r2, [r3, #28]
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d046      	beq.n	8005b8a <lfs_ctz_extend+0x112>
                for (lfs_off_t i = 0; i < noff; i++) {
 8005afc:	2300      	movs	r3, #0
 8005afe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b00:	e037      	b.n	8005b72 <lfs_ctz_extend+0xfa>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8005b02:	69fa      	ldr	r2, [r7, #28]
 8005b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b06:	1ad2      	subs	r2, r2, r3
 8005b08:	2301      	movs	r3, #1
 8005b0a:	9303      	str	r3, [sp, #12]
 8005b0c:	f107 0317 	add.w	r3, r7, #23
 8005b10:	9302      	str	r3, [sp, #8]
 8005b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b14:	9301      	str	r3, [sp, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	2100      	movs	r1, #0
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f7fb ff25 	bl	8001970 <lfs_bd_read>
 8005b26:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8005b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <lfs_ctz_extend+0xba>
                        return err;
 8005b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b30:	e01e      	b.n	8005b70 <lfs_ctz_extend+0xf8>
                    }

                    err = lfs_bd_prog(lfs,
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	2201      	movs	r2, #1
 8005b36:	9203      	str	r2, [sp, #12]
 8005b38:	f107 0217 	add.w	r2, r7, #23
 8005b3c:	9202      	str	r2, [sp, #8]
 8005b3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b40:	9201      	str	r2, [sp, #4]
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	2301      	movs	r3, #1
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f7fc f9a2 	bl	8001e94 <lfs_bd_prog>
 8005b50:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8005b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d007      	beq.n	8005b68 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8005b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005b5e:	d101      	bne.n	8005b64 <lfs_ctz_extend+0xec>
                            goto relocate;
 8005b60:	bf00      	nop
                    goto relocate;
 8005b62:	e07a      	b.n	8005c5a <lfs_ctz_extend+0x1e2>
                        }
                        return err;
 8005b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b66:	e003      	b.n	8005b70 <lfs_ctz_extend+0xf8>
                for (lfs_off_t i = 0; i < noff; i++) {
 8005b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b6e:	e000      	b.n	8005b72 <lfs_ctz_extend+0xfa>
                return err;
 8005b70:	e081      	b.n	8005c76 <lfs_ctz_extend+0x1fe>
                for (lfs_off_t i = 0; i < noff; i++) {
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d3c3      	bcc.n	8005b02 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8005b7a:	6a3a      	ldr	r2, [r7, #32]
 8005b7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b7e:	601a      	str	r2, [r3, #0]
                *off = noff;
 8005b80:	69fa      	ldr	r2, [r7, #28]
 8005b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b84:	601a      	str	r2, [r3, #0]
                return 0;
 8005b86:	2300      	movs	r3, #0
 8005b88:	e075      	b.n	8005c76 <lfs_ctz_extend+0x1fe>
            }

            // append block
            index += 1;
 8005b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8005b90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b92:	f7fb fe59 	bl	8001848 <lfs_ctz>
 8005b96:	4603      	mov	r3, r0
 8005b98:	3301      	adds	r3, #1
 8005b9a:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ba4:	e049      	b.n	8005c3a <lfs_ctz_extend+0x1c2>
                nhead = lfs_tole32(nhead);
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fb fe81 	bl	80018b0 <lfs_tole32>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bb6:	0092      	lsls	r2, r2, #2
 8005bb8:	2104      	movs	r1, #4
 8005bba:	9103      	str	r1, [sp, #12]
 8005bbc:	f107 0118 	add.w	r1, r7, #24
 8005bc0:	9102      	str	r1, [sp, #8]
 8005bc2:	9201      	str	r2, [sp, #4]
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f7fc f961 	bl	8001e94 <lfs_bd_prog>
 8005bd2:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fb fe5f 	bl	800189a <lfs_fromle32>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	61bb      	str	r3, [r7, #24]
                if (err) {
 8005be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d005      	beq.n	8005bf2 <lfs_ctz_extend+0x17a>
                    if (err == LFS_ERR_CORRUPT) {
 8005be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005bec:	d034      	beq.n	8005c58 <lfs_ctz_extend+0x1e0>
                        goto relocate;
                    }
                    return err;
 8005bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf0:	e041      	b.n	8005c76 <lfs_ctz_extend+0x1fe>
                }

                if (i != skips-1) {
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d01b      	beq.n	8005c34 <lfs_ctz_extend+0x1bc>
                    err = lfs_bd_read(lfs,
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c00:	0092      	lsls	r2, r2, #2
 8005c02:	2104      	movs	r1, #4
 8005c04:	9103      	str	r1, [sp, #12]
 8005c06:	f107 0118 	add.w	r1, r7, #24
 8005c0a:	9102      	str	r1, [sp, #8]
 8005c0c:	9201      	str	r2, [sp, #4]
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	2304      	movs	r3, #4
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	2100      	movs	r1, #0
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f7fb feaa 	bl	8001970 <lfs_bd_read>
 8005c1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fb fe3a 	bl	800189a <lfs_fromle32>
 8005c26:	4603      	mov	r3, r0
 8005c28:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8005c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <lfs_ctz_extend+0x1bc>
                        return err;
 8005c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c32:	e020      	b.n	8005c76 <lfs_ctz_extend+0x1fe>
            for (lfs_off_t i = 0; i < skips; i++) {
 8005c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c36:	3301      	adds	r3, #1
 8005c38:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d3b1      	bcc.n	8005ba6 <lfs_ctz_extend+0x12e>
                    }
                }
            }

            *block = nblock;
 8005c42:	6a3a      	ldr	r2, [r7, #32]
 8005c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c46:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8005c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4a:	009a      	lsls	r2, r3, #2
 8005c4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c4e:	601a      	str	r2, [r3, #0]
            return 0;
 8005c50:	2300      	movs	r3, #0
 8005c52:	e010      	b.n	8005c76 <lfs_ctz_extend+0x1fe>
                    goto relocate;
 8005c54:	bf00      	nop
 8005c56:	e000      	b.n	8005c5a <lfs_ctz_extend+0x1e2>
                        goto relocate;
 8005c58:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	4a08      	ldr	r2, [pc, #32]	@ (8005c80 <lfs_ctz_extend+0x208>)
 8005c5e:	9200      	str	r2, [sp, #0]
 8005c60:	f640 32a6 	movw	r2, #2982	@ 0xba6
 8005c64:	4907      	ldr	r1, [pc, #28]	@ (8005c84 <lfs_ctz_extend+0x20c>)
 8005c66:	4808      	ldr	r0, [pc, #32]	@ (8005c88 <lfs_ctz_extend+0x210>)
 8005c68:	f002 fed2 	bl	8008a10 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8005c6c:	68b9      	ldr	r1, [r7, #8]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f7fb fe59 	bl	8001926 <lfs_cache_drop>
    while (true) {
 8005c74:	e707      	b.n	8005a86 <lfs_ctz_extend+0xe>
    }
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3738      	adds	r7, #56	@ 0x38
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	08009908 	.word	0x08009908
 8005c84:	080097f8 	.word	0x080097f8
 8005c88:	08009988 	.word	0x08009988

08005c8c <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b090      	sub	sp, #64	@ 0x40
 8005c90:	af04      	add	r7, sp, #16
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <lfs_ctz_traverse+0x18>
        return 0;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	e06b      	b.n	8005d7c <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	61fb      	str	r3, [r7, #28]
 8005caa:	f107 031c 	add.w	r3, r7, #28
 8005cae:	4619      	mov	r1, r3
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f7ff fe3e 	bl	8005932 <lfs_ctz_index>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 8005cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cbc:	6839      	ldr	r1, [r7, #0]
 8005cbe:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8005cc0:	4798      	blx	r3
 8005cc2:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <lfs_ctz_traverse+0x42>
            return err;
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	e056      	b.n	8005d7c <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8005cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <lfs_ctz_traverse+0x4c>
            return 0;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e051      	b.n	8005d7c <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8005cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	f1c3 0302 	rsb	r3, r3, #2
 8005ce2:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8005ce6:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8005cea:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8005cec:	9303      	str	r3, [sp, #12]
 8005cee:	f107 0314 	add.w	r3, r7, #20
 8005cf2:	9302      	str	r3, [sp, #8]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	9301      	str	r3, [sp, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f7fb fe34 	bl	8001970 <lfs_bd_read>
 8005d08:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7fb fdc4 	bl	800189a <lfs_fromle32>
 8005d12:	4603      	mov	r3, r0
 8005d14:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fb fdbe 	bl	800189a <lfs_fromle32>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	61bb      	str	r3, [r7, #24]
        if (err) {
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <lfs_ctz_traverse+0xa0>
            return err;
 8005d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2a:	e027      	b.n	8005d7c <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d30:	e012      	b.n	8005d58 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8005d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	3330      	adds	r3, #48	@ 0x30
 8005d38:	443b      	add	r3, r7
 8005d3a:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8005d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d40:	4611      	mov	r1, r2
 8005d42:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8005d44:	4798      	blx	r3
 8005d46:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 8005d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <lfs_ctz_traverse+0xc6>
                return err;
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d50:	e014      	b.n	8005d7c <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8005d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d54:	3301      	adds	r3, #1
 8005d56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	dbe7      	blt.n	8005d32 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	3b01      	subs	r3, #1
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	3330      	adds	r3, #48	@ 0x30
 8005d6a:	443b      	add	r3, r7
 8005d6c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8005d70:	603b      	str	r3, [r7, #0]
        index -= count;
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 8005d7a:	e79e      	b.n	8005cba <lfs_ctz_traverse+0x2e>
    }
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3730      	adds	r7, #48	@ 0x30
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8005d84:	b5b0      	push	{r4, r5, r7, lr}
 8005d86:	b09a      	sub	sp, #104	@ 0x68
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d008      	beq.n	8005dae <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f002 fae1 	bl	8008364 <lfs_fs_forceconsistency>
 8005da2:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 8005da4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <lfs_file_opencfg_+0x2a>
            return err;
 8005daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dac:	e1b0      	b.n	8006110 <lfs_file_opencfg_+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005db2:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f103 0108 	add.w	r1, r3, #8
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	1d3a      	adds	r2, r7, #4
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f7fe f87b 	bl	8003ed4 <lfs_dir_find>
 8005dde:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8005de0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	da0c      	bge.n	8005e00 <lfs_file_opencfg_+0x7c>
 8005de6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005de8:	f113 0f02 	cmn.w	r3, #2
 8005dec:	d105      	bne.n	8005dfa <lfs_file_opencfg_+0x76>
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	889b      	ldrh	r3, [r3, #4]
 8005df2:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d102      	bne.n	8005e00 <lfs_file_opencfg_+0x7c>
        err = tag;
 8005dfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8005dfe:	e17c      	b.n	80060fa <lfs_file_opencfg_+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2201      	movs	r2, #1
 8005e04:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f7fc fc74 	bl	80026f6 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8005e0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e10:	f113 0f02 	cmn.w	r3, #2
 8005e14:	d14e      	bne.n	8005eb4 <lfs_file_opencfg_+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d103      	bne.n	8005e28 <lfs_file_opencfg_+0xa4>
            err = LFS_ERR_NOENT;
 8005e20:	f06f 0301 	mvn.w	r3, #1
 8005e24:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8005e26:	e168      	b.n	80060fa <lfs_file_opencfg_+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fa f9b0 	bl	8000190 <strlen>
 8005e30:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d903      	bls.n	8005e44 <lfs_file_opencfg_+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8005e3c:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8005e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8005e42:	e15a      	b.n	80060fa <lfs_file_opencfg_+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f103 0108 	add.w	r1, r3, #8
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	889b      	ldrh	r3, [r3, #4]
 8005e4e:	029b      	lsls	r3, r3, #10
 8005e50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	889b      	ldrh	r3, [r3, #4]
 8005e62:	029a      	lsls	r2, r3, #10
 8005e64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e66:	4313      	orrs	r3, r2
 8005e68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	889b      	ldrh	r3, [r3, #4]
 8005e76:	029b      	lsls	r3, r3, #10
 8005e78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e82:	2300      	movs	r3, #0
 8005e84:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e86:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f7ff fd2b 	bl	80058e8 <lfs_dir_commit>
 8005e92:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8005e94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e96:	f113 0f1c 	cmn.w	r3, #28
 8005e9a:	d001      	beq.n	8005ea0 <lfs_file_opencfg_+0x11c>
 8005e9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e9e:	e001      	b.n	8005ea4 <lfs_file_opencfg_+0x120>
 8005ea0:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8005ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 8005ea6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f040 8125 	bne.w	80060f8 <lfs_file_opencfg_+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8005eae:	4b9a      	ldr	r3, [pc, #616]	@ (8006118 <lfs_file_opencfg_+0x394>)
 8005eb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005eb2:	e044      	b.n	8005f3e <lfs_file_opencfg_+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <lfs_file_opencfg_+0x142>
        err = LFS_ERR_EXIST;
 8005ebe:	f06f 0310 	mvn.w	r3, #16
 8005ec2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8005ec4:	e119      	b.n	80060fa <lfs_file_opencfg_+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8005ec6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fc f9bf 	bl	800224c <lfs_tag_type3>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d003      	beq.n	8005edc <lfs_file_opencfg_+0x158>
        err = LFS_ERR_ISDIR;
 8005ed4:	f06f 0314 	mvn.w	r3, #20
 8005ed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8005eda:	e10e      	b.n	80060fa <lfs_file_opencfg_+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00e      	beq.n	8005f04 <lfs_file_opencfg_+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	889b      	ldrh	r3, [r3, #4]
 8005eea:	029b      	lsls	r3, r3, #10
 8005eec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ef0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ef4:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f02:	e01c      	b.n	8005f3e <lfs_file_opencfg_+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	889b      	ldrh	r3, [r3, #4]
 8005f0e:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005f10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f14:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005f1c:	9200      	str	r2, [sp, #0]
 8005f1e:	4a7f      	ldr	r2, [pc, #508]	@ (800611c <lfs_file_opencfg_+0x398>)
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f7fc fe39 	bl	8002b98 <lfs_dir_get>
 8005f26:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 8005f28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	da02      	bge.n	8005f34 <lfs_file_opencfg_+0x1b0>
            err = tag;
 8005f2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8005f32:	e0e2      	b.n	80060fa <lfs_file_opencfg_+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	3328      	adds	r3, #40	@ 0x28
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fc fafd 	bl	8002538 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8005f3e:	2300      	movs	r3, #0
 8005f40:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f42:	e063      	b.n	800600c <lfs_file_opencfg_+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d03c      	beq.n	8005fca <lfs_file_opencfg_+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f5a:	6859      	ldr	r1, [r3, #4]
 8005f5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f5e:	4613      	mov	r3, r2
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	4413      	add	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	440b      	add	r3, r1
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005f6e:	051a      	lsls	r2, r3, #20
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	889b      	ldrh	r3, [r3, #4]
 8005f74:	029b      	lsls	r3, r3, #10
 8005f76:	ea42 0103 	orr.w	r1, r2, r3
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f7e:	6858      	ldr	r0, [r3, #4]
 8005f80:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f82:	4613      	mov	r3, r2
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	4413      	add	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4403      	add	r3, r0
 8005f8c:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005f8e:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f96:	6859      	ldr	r1, [r3, #4]
 8005f98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	005b      	lsls	r3, r3, #1
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	4603      	mov	r3, r0
 8005faa:	4a5d      	ldr	r2, [pc, #372]	@ (8006120 <lfs_file_opencfg_+0x39c>)
 8005fac:	4621      	mov	r1, r4
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f7fc fdf2 	bl	8002b98 <lfs_dir_get>
 8005fb4:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8005fb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	da06      	bge.n	8005fca <lfs_file_opencfg_+0x246>
 8005fbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fbe:	f113 0f02 	cmn.w	r3, #2
 8005fc2:	d002      	beq.n	8005fca <lfs_file_opencfg_+0x246>
                err = res;
 8005fc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8005fc8:	e097      	b.n	80060fa <lfs_file_opencfg_+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d017      	beq.n	8006006 <lfs_file_opencfg_+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fda:	6859      	ldr	r1, [r3, #4]
 8005fdc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005fde:	4613      	mov	r3, r2
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	440b      	add	r3, r1
 8005fe8:	689a      	ldr	r2, [r3, #8]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d903      	bls.n	8005ffa <lfs_file_opencfg_+0x276>
                err = LFS_ERR_NOSPC;
 8005ff2:	f06f 031b 	mvn.w	r3, #27
 8005ff6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8005ff8:	e07f      	b.n	80060fa <lfs_file_opencfg_+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ffe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8006006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006008:	3301      	adds	r3, #1
 800600a:	657b      	str	r3, [r7, #84]	@ 0x54
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006014:	429a      	cmp	r2, r3
 8006016:	d395      	bcc.n	8005f44 <lfs_file_opencfg_+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d005      	beq.n	800602e <lfs_file_opencfg_+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800602c:	e010      	b.n	8006050 <lfs_file_opencfg_+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006034:	4618      	mov	r0, r3
 8006036:	f7fb fc5f 	bl	80018f8 <lfs_malloc>
 800603a:	4602      	mov	r2, r0
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006044:	2b00      	cmp	r3, #0
 8006046:	d103      	bne.n	8006050 <lfs_file_opencfg_+0x2cc>
            err = LFS_ERR_NOMEM;
 8006048:	f06f 030b 	mvn.w	r3, #11
 800604c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800604e:	e054      	b.n	80060fa <lfs_file_opencfg_+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	3340      	adds	r3, #64	@ 0x40
 8006054:	4619      	mov	r1, r3
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f7fb fc74 	bl	8001944 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800605c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800605e:	4618      	mov	r0, r3
 8006060:	f7fc f8f4 	bl	800224c <lfs_tag_type3>
 8006064:	4603      	mov	r3, r0
 8006066:	461a      	mov	r2, r3
 8006068:	f240 2301 	movw	r3, #513	@ 0x201
 800606c:	429a      	cmp	r2, r3
 800606e:	d141      	bne.n	80060f4 <lfs_file_opencfg_+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f06f 0201 	mvn.w	r2, #1
 8006076:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 8006078:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800607a:	4618      	mov	r0, r3
 800607c:	f7fc f920 	bl	80022c0 <lfs_tag_size>
 8006080:	4602      	mov	r2, r0
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800608a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2200      	movs	r2, #0
 800609e:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d020      	beq.n	80060f4 <lfs_file_opencfg_+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	889b      	ldrh	r3, [r3, #4]
 80060bc:	029c      	lsls	r4, r3, #10
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060c2:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fb fb77 	bl	80017ba <lfs_min>
 80060cc:	4603      	mov	r3, r0
 80060ce:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80060d0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	4613      	mov	r3, r2
 80060dc:	4a0f      	ldr	r2, [pc, #60]	@ (800611c <lfs_file_opencfg_+0x398>)
 80060de:	4629      	mov	r1, r5
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f7fc fd59 	bl	8002b98 <lfs_dir_get>
 80060e6:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 80060e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	da02      	bge.n	80060f4 <lfs_file_opencfg_+0x370>
                err = res;
 80060ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 80060f2:	e002      	b.n	80060fa <lfs_file_opencfg_+0x376>
            }
        }
    }

    return 0;
 80060f4:	2300      	movs	r3, #0
 80060f6:	e00b      	b.n	8006110 <lfs_file_opencfg_+0x38c>
            goto cleanup;
 80060f8:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060fe:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_close_(lfs, file);
 8006106:	68b9      	ldr	r1, [r7, #8]
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 f823 	bl	8006154 <lfs_file_close_>
    return err;
 800610e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8006110:	4618      	mov	r0, r3
 8006112:	3760      	adds	r7, #96	@ 0x60
 8006114:	46bd      	mov	sp, r7
 8006116:	bdb0      	pop	{r4, r5, r7, pc}
 8006118:	20100000 	.word	0x20100000
 800611c:	700ffc00 	.word	0x700ffc00
 8006120:	7ffffc00 	.word	0x7ffffc00

08006124 <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8006124:	b580      	push	{r7, lr}
 8006126:	b088      	sub	sp, #32
 8006128:	af02      	add	r7, sp, #8
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 8006132:	4b07      	ldr	r3, [pc, #28]	@ (8006150 <lfs_file_open_+0x2c>)
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f7ff fe21 	bl	8005d84 <lfs_file_opencfg_>
 8006142:	6178      	str	r0, [r7, #20]
    return err;
 8006144:	697b      	ldr	r3, [r7, #20]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	0800a4f0 	.word	0x0800a4f0

08006154 <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f9e5 	bl	8006530 <lfs_file_sync_>
 8006166:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7fc faa1 	bl	80026b2 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d104      	bne.n	8006184 <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800617e:	4618      	mov	r0, r3
 8006180:	f7fb fbc6 	bl	8001910 <lfs_free>
    }

    return err;
 8006184:	68fb      	ldr	r3, [r7, #12]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8006190:	b590      	push	{r4, r7, lr}
 8006192:	b08d      	sub	sp, #52	@ 0x34
 8006194:	af06      	add	r7, sp, #24
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800619a:	f107 030c 	add.w	r3, r7, #12
 800619e:	4619      	mov	r1, r3
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7fc fb7b 	bl	800289c <lfs_alloc>
 80061a6:	6138      	str	r0, [r7, #16]
        if (err) {
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <lfs_file_relocate+0x22>
            return err;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	e0bb      	b.n	800632a <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4619      	mov	r1, r3
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fb ff1a 	bl	8001ff0 <lfs_bd_erase>
 80061bc:	6138      	str	r0, [r7, #16]
        if (err) {
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d006      	beq.n	80061d2 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80061ca:	f000 809b 	beq.w	8006304 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	e0ab      	b.n	800632a <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 80061d2:	2300      	movs	r3, #0
 80061d4:	617b      	str	r3, [r7, #20]
 80061d6:	e069      	b.n	80062ac <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d027      	beq.n	8006234 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	f103 0008 	add.w	r0, r3, #8
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	889b      	ldrh	r3, [r3, #4]
 80061fc:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 80061fe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006202:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006206:	2101      	movs	r1, #1
 8006208:	9105      	str	r1, [sp, #20]
 800620a:	f107 010b 	add.w	r1, r7, #11
 800620e:	9104      	str	r1, [sp, #16]
 8006210:	6979      	ldr	r1, [r7, #20]
 8006212:	9103      	str	r1, [sp, #12]
 8006214:	9302      	str	r3, [sp, #8]
 8006216:	4b47      	ldr	r3, [pc, #284]	@ (8006334 <lfs_file_relocate+0x1a4>)
 8006218:	9301      	str	r3, [sp, #4]
 800621a:	9200      	str	r2, [sp, #0]
 800621c:	4623      	mov	r3, r4
 800621e:	2200      	movs	r2, #0
 8006220:	4601      	mov	r1, r0
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7fc fcd3 	bl	8002bce <lfs_dir_getread>
 8006228:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01e      	beq.n	800626e <lfs_file_relocate+0xde>
                    return err;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	e07a      	b.n	800632a <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 800623a:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	1ad4      	subs	r4, r2, r3
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006248:	2201      	movs	r2, #1
 800624a:	9203      	str	r2, [sp, #12]
 800624c:	f107 020b 	add.w	r2, r7, #11
 8006250:	9202      	str	r2, [sp, #8]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	9201      	str	r2, [sp, #4]
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	4623      	mov	r3, r4
 800625a:	4602      	mov	r2, r0
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7fb fb87 	bl	8001970 <lfs_bd_read>
 8006262:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <lfs_file_relocate+0xde>
                    return err;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	e05d      	b.n	800632a <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f103 0110 	add.w	r1, r3, #16
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	9203      	str	r2, [sp, #12]
 800627c:	f107 020b 	add.w	r2, r7, #11
 8006280:	9202      	str	r2, [sp, #8]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	9201      	str	r2, [sp, #4]
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	2301      	movs	r3, #1
 800628a:	4602      	mov	r2, r0
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7fb fe01 	bl	8001e94 <lfs_bd_prog>
 8006292:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d005      	beq.n	80062a6 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80062a0:	d032      	beq.n	8006308 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	e041      	b.n	800632a <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	3301      	adds	r3, #1
 80062aa:	617b      	str	r3, [r7, #20]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d390      	bcc.n	80061d8 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69d9      	ldr	r1, [r3, #28]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c4:	461a      	mov	r2, r3
 80062c6:	f002 fc38 	bl	8008b3a <memcpy>
        file->cache.block = lfs->pcache.block;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691a      	ldr	r2, [r3, #16]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	695a      	ldr	r2, [r3, #20]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3310      	adds	r3, #16
 80062e6:	4619      	mov	r1, r3
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7fb fb2b 	bl	8001944 <lfs_cache_zero>

        file->block = nblock;
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 8006300:	2300      	movs	r3, #0
 8006302:	e012      	b.n	800632a <lfs_file_relocate+0x19a>
                goto relocate;
 8006304:	bf00      	nop
 8006306:	e000      	b.n	800630a <lfs_file_relocate+0x17a>
                    goto relocate;
 8006308:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4a0a      	ldr	r2, [pc, #40]	@ (8006338 <lfs_file_relocate+0x1a8>)
 800630e:	9200      	str	r2, [sp, #0]
 8006310:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 8006314:	4909      	ldr	r1, [pc, #36]	@ (800633c <lfs_file_relocate+0x1ac>)
 8006316:	480a      	ldr	r0, [pc, #40]	@ (8006340 <lfs_file_relocate+0x1b0>)
 8006318:	f002 fb7a 	bl	8008a10 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3310      	adds	r3, #16
 8006320:	4619      	mov	r1, r3
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7fb faff 	bl	8001926 <lfs_cache_drop>
    while (true) {
 8006328:	e737      	b.n	800619a <lfs_file_relocate+0xa>
    }
}
 800632a:	4618      	mov	r0, r3
 800632c:	371c      	adds	r7, #28
 800632e:	46bd      	mov	sp, r7
 8006330:	bd90      	pop	{r4, r7, pc}
 8006332:	bf00      	nop
 8006334:	fff7fc00 	.word	0xfff7fc00
 8006338:	08009908 	.word	0x08009908
 800633c:	080097f8 	.word	0x080097f8
 8006340:	08009988 	.word	0x08009988

08006344 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7fc fa09 	bl	800276e <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff ff16 	bl	8006190 <lfs_file_relocate>
 8006364:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <lfs_file_outline+0x2c>
        return err;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	e006      	b.n	800637e <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006374:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
	...

08006388 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8006388:	b590      	push	{r4, r7, lr}
 800638a:	b09f      	sub	sp, #124	@ 0x7c
 800638c:	af02      	add	r7, sp, #8
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006396:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d011      	beq.n	80063c2 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d105      	bne.n	80063b6 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	3340      	adds	r3, #64	@ 0x40
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7fb fab8 	bl	8001926 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 80a4 	beq.w	8006518 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d4:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d176      	bne.n	80064d0 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 80063e2:	f107 030c 	add.w	r3, r7, #12
 80063e6:	2254      	movs	r2, #84	@ 0x54
 80063e8:	2100      	movs	r1, #0
 80063ea:	4618      	mov	r0, r3
 80063ec:	f002 fb32 	bl	8008a54 <memset>
                .ctz.head = file->ctz.head,
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 80063f4:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 80063fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063fc:	2301      	movs	r3, #1
 80063fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 8006404:	643b      	str	r3, [r7, #64]	@ 0x40
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 800640c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800640e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7fb fa85 	bl	8001926 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 800641c:	e02b      	b.n	8006476 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 800641e:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8006422:	f107 010c 	add.w	r1, r7, #12
 8006426:	2301      	movs	r3, #1
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f921 	bl	8006670 <lfs_file_flushedread>
 800642e:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8006430:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006432:	2b00      	cmp	r3, #0
 8006434:	da01      	bge.n	800643a <lfs_file_flush+0xb2>
                    return res;
 8006436:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006438:	e06f      	b.n	800651a <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 800643a:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 800643e:	2301      	movs	r3, #1
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fa1c 	bl	8006880 <lfs_file_flushedwrite>
 8006448:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 800644a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800644c:	2b00      	cmp	r3, #0
 800644e:	da01      	bge.n	8006454 <lfs_file_flush+0xcc>
                    return res;
 8006450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006452:	e062      	b.n	800651a <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800645c:	d00b      	beq.n	8006476 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 800645e:	f107 030c 	add.w	r3, r7, #12
 8006462:	3340      	adds	r3, #64	@ 0x40
 8006464:	4619      	mov	r1, r3
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7fb fa5d 	bl	8001926 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7fb fa58 	bl	8001926 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647e:	429a      	cmp	r2, r3
 8006480:	d3cd      	bcc.n	800641e <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	2301      	movs	r3, #1
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7fb fc53 	bl	8001d38 <lfs_bd_flush>
 8006492:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8006494:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006496:	2b00      	cmp	r3, #0
 8006498:	d026      	beq.n	80064e8 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 800649a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800649c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80064a0:	d001      	beq.n	80064a6 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 80064a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064a4:	e039      	b.n	800651a <lfs_file_flush+0x192>
                        goto relocate;
 80064a6:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006524 <lfs_file_flush+0x19c>)
 80064ae:	9200      	str	r2, [sp, #0]
 80064b0:	f640 522b 	movw	r2, #3371	@ 0xd2b
 80064b4:	491c      	ldr	r1, [pc, #112]	@ (8006528 <lfs_file_flush+0x1a0>)
 80064b6:	481d      	ldr	r0, [pc, #116]	@ (800652c <lfs_file_flush+0x1a4>)
 80064b8:	f002 faaa 	bl	8008a10 <iprintf>
                err = lfs_file_relocate(lfs, file);
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7ff fe66 	bl	8006190 <lfs_file_relocate>
 80064c4:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 80064c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0da      	beq.n	8006482 <lfs_file_flush+0xfa>
                    return err;
 80064cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064ce:	e024      	b.n	800651a <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d8:	4619      	mov	r1, r3
 80064da:	4610      	mov	r0, r2
 80064dc:	f7fb f95d 	bl	800179a <lfs_max>
 80064e0:	4602      	mov	r2, r0
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80064e6:	e000      	b.n	80064ea <lfs_file_flush+0x162>
                break;
 80064e8:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006516:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3774      	adds	r7, #116	@ 0x74
 800651e:	46bd      	mov	sp, r7
 8006520:	bd90      	pop	{r4, r7, pc}
 8006522:	bf00      	nop
 8006524:	08009908 	.word	0x08009908
 8006528:	080097f8 	.word	0x080097f8
 800652c:	08009988 	.word	0x08009988

08006530 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 8006530:	b580      	push	{r7, lr}
 8006532:	b090      	sub	sp, #64	@ 0x40
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8006546:	2300      	movs	r3, #0
 8006548:	e08e      	b.n	8006668 <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 800654a:	6839      	ldr	r1, [r7, #0]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7ff ff1b 	bl	8006388 <lfs_file_flush>
 8006552:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 8006554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006556:	2b00      	cmp	r3, #0
 8006558:	d007      	beq.n	800656a <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800655e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 8006566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006568:	e07e      	b.n	8006668 <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d077      	beq.n	8006666 <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	3308      	adds	r3, #8
 800657a:	4618      	mov	r0, r3
 800657c:	f7fb fd7f 	bl	800207e <lfs_pair_isnull>
 8006580:	4603      	mov	r3, r0
 8006582:	f083 0301 	eor.w	r3, r3, #1
 8006586:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8006588:	2b00      	cmp	r3, #0
 800658a:	d06c      	beq.n	8006666 <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006590:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10d      	bne.n	80065b4 <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f103 0110 	add.w	r1, r3, #16
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	2300      	movs	r3, #0
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fb fc42 	bl	8001e2c <lfs_bd_sync>
 80065a8:	6338      	str	r0, [r7, #48]	@ 0x30
            if (err) {
 80065aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <lfs_file_sync_+0x84>
                return err;
 80065b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b2:	e059      	b.n	8006668 <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d009      	beq.n	80065d4 <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 80065c0:	f240 2301 	movw	r3, #513	@ 0x201
 80065c4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ca:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80065d2:	e014      	b.n	80065fe <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 80065d4:	f240 2302 	movw	r3, #514	@ 0x202
 80065d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80065e0:	3228      	adds	r2, #40	@ 0x28
 80065e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065e6:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 80065ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fb ffba 	bl	8002568 <lfs_ctz_tole32>
            buffer = &ctz;
 80065f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80065f8:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 80065fa:	2308      	movs	r3, #8
 80065fc:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	f103 0108 	add.w	r1, r3, #8
 8006604:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006606:	051a      	lsls	r2, r3, #20
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	889b      	ldrh	r3, [r3, #4]
 800660c:	029b      	lsls	r3, r3, #10
 800660e:	431a      	orrs	r2, r3
 8006610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006612:	4313      	orrs	r3, r2
 8006614:	61bb      	str	r3, [r7, #24]
 8006616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006618:	61fb      	str	r3, [r7, #28]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	889b      	ldrh	r3, [r3, #4]
 800661e:	029a      	lsls	r2, r3, #10
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	4313      	orrs	r3, r2
 8006628:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 800662c:	623b      	str	r3, [r7, #32]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	627b      	str	r3, [r7, #36]	@ 0x24
 8006636:	f107 0218 	add.w	r2, r7, #24
 800663a:	2302      	movs	r3, #2
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff f953 	bl	80058e8 <lfs_dir_commit>
 8006642:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8006644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006646:	2b00      	cmp	r3, #0
 8006648:	d007      	beq.n	800665a <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800664e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8006656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006658:	e006      	b.n	8006668 <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800665e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3740      	adds	r7, #64	@ 0x40
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8006670:	b5b0      	push	{r4, r5, r7, lr}
 8006672:	b090      	sub	sp, #64	@ 0x40
 8006674:	af06      	add	r7, sp, #24
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
 800667c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668e:	429a      	cmp	r2, r3
 8006690:	d301      	bcc.n	8006696 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8006692:	2300      	movs	r3, #0
 8006694:	e0b7      	b.n	8006806 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	4619      	mov	r1, r3
 80066a2:	6838      	ldr	r0, [r7, #0]
 80066a4:	f7fb f889 	bl	80017ba <lfs_min>
 80066a8:	6038      	str	r0, [r7, #0]
    nsize = size;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 80066ae:	e0a5      	b.n	80067fc <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d006      	beq.n	80066ca <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066c4:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d130      	bne.n	800672c <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d11c      	bne.n	8006710 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80066e8:	68b9      	ldr	r1, [r7, #8]
 80066ea:	3138      	adds	r1, #56	@ 0x38
 80066ec:	68b8      	ldr	r0, [r7, #8]
 80066ee:	303c      	adds	r0, #60	@ 0x3c
 80066f0:	9003      	str	r0, [sp, #12]
 80066f2:	9102      	str	r1, [sp, #8]
 80066f4:	9201      	str	r2, [sp, #4]
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	462b      	mov	r3, r5
 80066fa:	4622      	mov	r2, r4
 80066fc:	2100      	movs	r1, #0
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f7ff f94f 	bl	80059a2 <lfs_ctz_find>
 8006704:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d009      	beq.n	8006720 <lfs_file_flushedread+0xb0>
                    return err;
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	e07a      	b.n	8006806 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f06f 0201 	mvn.w	r2, #1
 8006716:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006724:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006730:	69da      	ldr	r2, [r3, #28]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	4619      	mov	r1, r3
 800673a:	6a38      	ldr	r0, [r7, #32]
 800673c:	f7fb f83d 	bl	80017ba <lfs_min>
 8006740:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006746:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d026      	beq.n	800679c <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f103 0408 	add.w	r4, r3, #8
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800675e:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	889b      	ldrh	r3, [r3, #4]
 8006764:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8006766:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800676a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8006772:	69b8      	ldr	r0, [r7, #24]
 8006774:	9005      	str	r0, [sp, #20]
 8006776:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006778:	9004      	str	r0, [sp, #16]
 800677a:	9103      	str	r1, [sp, #12]
 800677c:	9302      	str	r3, [sp, #8]
 800677e:	4b24      	ldr	r3, [pc, #144]	@ (8006810 <lfs_file_flushedread+0x1a0>)
 8006780:	9301      	str	r3, [sp, #4]
 8006782:	9200      	str	r2, [sp, #0]
 8006784:	462b      	mov	r3, r5
 8006786:	2200      	movs	r2, #0
 8006788:	4621      	mov	r1, r4
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f7fc fa1f 	bl	8002bce <lfs_dir_getread>
 8006790:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d01d      	beq.n	80067d4 <lfs_file_flushedread+0x164>
                return err;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	e034      	b.n	8006806 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067a6:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80067b0:	69b9      	ldr	r1, [r7, #24]
 80067b2:	9103      	str	r1, [sp, #12]
 80067b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067b6:	9102      	str	r1, [sp, #8]
 80067b8:	9201      	str	r2, [sp, #4]
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	4623      	mov	r3, r4
 80067be:	4602      	mov	r2, r0
 80067c0:	2100      	movs	r1, #0
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f7fb f8d4 	bl	8001970 <lfs_bd_read>
 80067c8:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <lfs_file_flushedread+0x164>
                return err;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	e018      	b.n	8006806 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	441a      	add	r2, r3
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	441a      	add	r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 80067ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	4413      	add	r3, r2
 80067f2:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 80067f4:	6a3a      	ldr	r2, [r7, #32]
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f47f af56 	bne.w	80066b0 <lfs_file_flushedread+0x40>
    }

    return size;
 8006804:	683b      	ldr	r3, [r7, #0]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3728      	adds	r7, #40	@ 0x28
 800680a:	46bd      	mov	sp, r7
 800680c:	bdb0      	pop	{r4, r5, r7, pc}
 800680e:	bf00      	nop
 8006810:	fff7fc00 	.word	0xfff7fc00

08006814 <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d106      	bne.n	800683c <lfs_file_read_+0x28>
 800682e:	4b11      	ldr	r3, [pc, #68]	@ (8006874 <lfs_file_read_+0x60>)
 8006830:	4a11      	ldr	r2, [pc, #68]	@ (8006878 <lfs_file_read_+0x64>)
 8006832:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 8006836:	4811      	ldr	r0, [pc, #68]	@ (800687c <lfs_file_read_+0x68>)
 8006838:	f001 ff3a 	bl	80086b0 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d009      	beq.n	800685c <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8006848:	68b9      	ldr	r1, [r7, #8]
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f7ff fd9c 	bl	8006388 <lfs_file_flush>
 8006850:	6178      	str	r0, [r7, #20]
        if (err) {
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <lfs_file_read_+0x48>
            return err;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	e006      	b.n	800686a <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	68b9      	ldr	r1, [r7, #8]
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f7ff ff04 	bl	8006670 <lfs_file_flushedread>
 8006868:	4603      	mov	r3, r0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	08009b30 	.word	0x08009b30
 8006878:	0800a4fc 	.word	0x0800a4fc
 800687c:	080097f8 	.word	0x080097f8

08006880 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8006880:	b5b0      	push	{r4, r5, r7, lr}
 8006882:	b090      	sub	sp, #64	@ 0x40
 8006884:	af04      	add	r7, sp, #16
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
 800688c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 80f4 	beq.w	8006a8c <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068aa:	441a      	add	r2, r3
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b0:	4619      	mov	r1, r3
 80068b2:	4610      	mov	r0, r2
 80068b4:	f7fa ff71 	bl	800179a <lfs_max>
 80068b8:	4602      	mov	r2, r0
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 80068be:	429a      	cmp	r2, r3
 80068c0:	f240 80e4 	bls.w	8006a8c <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 80068c4:	68b9      	ldr	r1, [r7, #8]
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f7ff fd3c 	bl	8006344 <lfs_file_outline>
 80068cc:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 80068ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 80db 	beq.w	8006a8c <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068da:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 80068e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e4:	e0d7      	b.n	8006a96 <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d006      	beq.n	8006900 <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068fa:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d16d      	bne.n	80069dc <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006904:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d159      	bne.n	80069c0 <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d12f      	bne.n	8006978 <lfs_file_flushedwrite+0xf8>
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800691c:	2b00      	cmp	r3, #0
 800691e:	d02b      	beq.n	8006978 <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8006932:	3a01      	subs	r2, #1
 8006934:	68b9      	ldr	r1, [r7, #8]
 8006936:	3138      	adds	r1, #56	@ 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8006938:	2000      	movs	r0, #0
 800693a:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800693c:	f107 0010 	add.w	r0, r7, #16
 8006940:	9003      	str	r0, [sp, #12]
 8006942:	9102      	str	r1, [sp, #8]
 8006944:	9201      	str	r2, [sp, #4]
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	462b      	mov	r3, r5
 800694a:	4622      	mov	r2, r4
 800694c:	2100      	movs	r1, #0
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f7ff f827 	bl	80059a2 <lfs_ctz_find>
 8006954:	6238      	str	r0, [r7, #32]
                    if (err) {
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d007      	beq.n	800696c <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006960:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 8006968:	6a3b      	ldr	r3, [r7, #32]
 800696a:	e094      	b.n	8006a96 <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	3340      	adds	r3, #64	@ 0x40
 8006970:	4619      	mov	r1, r3
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f7fa ffe6 	bl	8001944 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f7fb fef8 	bl	800276e <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8006984:	68fc      	ldr	r4, [r7, #12]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	3238      	adds	r2, #56	@ 0x38
 8006992:	68b9      	ldr	r1, [r7, #8]
 8006994:	313c      	adds	r1, #60	@ 0x3c
 8006996:	9102      	str	r1, [sp, #8]
 8006998:	9201      	str	r2, [sp, #4]
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	462b      	mov	r3, r5
 800699e:	4622      	mov	r2, r4
 80069a0:	4601      	mov	r1, r0
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f7ff f868 	bl	8005a78 <lfs_ctz_extend>
 80069a8:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00f      	beq.n	80069d0 <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	e06a      	b.n	8006a96 <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f06f 0201 	mvn.w	r2, #1
 80069c6:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069e0:	69da      	ldr	r2, [r3, #28]
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	4619      	mov	r1, r3
 80069ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069ec:	f7fa fee5 	bl	80017ba <lfs_min>
 80069f0:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80069f8:	68fc      	ldr	r4, [r7, #12]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a02:	69b9      	ldr	r1, [r7, #24]
 8006a04:	9103      	str	r1, [sp, #12]
 8006a06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a08:	9102      	str	r1, [sp, #8]
 8006a0a:	9201      	str	r2, [sp, #4]
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	2301      	movs	r3, #1
 8006a10:	4622      	mov	r2, r4
 8006a12:	4601      	mov	r1, r0
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f7fb fa3d 	bl	8001e94 <lfs_bd_prog>
 8006a1a:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d01c      	beq.n	8006a5c <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006a28:	d007      	beq.n	8006a3a <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a2e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	e02d      	b.n	8006a96 <lfs_file_flushedwrite+0x216>
                    goto relocate;
 8006a3a:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f7ff fba6 	bl	8006190 <lfs_file_relocate>
 8006a44:	6178      	str	r0, [r7, #20]
            if (err) {
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0d2      	beq.n	80069f2 <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a50:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	e01c      	b.n	8006a96 <lfs_file_flushedwrite+0x216>
            break;
 8006a5c:	bf00      	nop
            }
        }

        file->pos += diff;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	441a      	add	r2, r3
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	441a      	add	r2, r3
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8006a76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 8006a7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ckpoint(lfs);
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f7fb fe71 	bl	800276e <lfs_alloc_ckpoint>
    while (nsize > 0) {
 8006a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f47f af29 	bne.w	80068e6 <lfs_file_flushedwrite+0x66>
    }

    return size;
 8006a94:	683b      	ldr	r3, [r7, #0]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3730      	adds	r7, #48	@ 0x30
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006aa0 <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08a      	sub	sp, #40	@ 0x28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <lfs_file_write_+0x28>
 8006aba:	4b38      	ldr	r3, [pc, #224]	@ (8006b9c <lfs_file_write_+0xfc>)
 8006abc:	4a38      	ldr	r2, [pc, #224]	@ (8006ba0 <lfs_file_write_+0x100>)
 8006abe:	f640 6126 	movw	r1, #3622	@ 0xe26
 8006ac2:	4838      	ldr	r0, [pc, #224]	@ (8006ba4 <lfs_file_write_+0x104>)
 8006ac4:	f001 fdf4 	bl	80086b0 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006acc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d009      	beq.n	8006ae8 <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8006ad4:	68b9      	ldr	r1, [r7, #8]
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f7ff fc56 	bl	8006388 <lfs_file_flush>
 8006adc:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <lfs_file_write_+0x48>
            return err;
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae6:	e055      	b.n	8006b94 <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d009      	beq.n	8006b08 <lfs_file_write_+0x68>
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d203      	bcs.n	8006b08 <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	441a      	add	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d902      	bls.n	8006b1e <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8006b18:	f06f 031a 	mvn.w	r3, #26
 8006b1c:	e03a      	b.n	8006b94 <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d121      	bne.n	8006b6e <lfs_file_write_+0xce>
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d91b      	bls.n	8006b6e <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b3a:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	635a      	str	r2, [r3, #52]	@ 0x34

        while (file->pos < pos) {
 8006b44:	e00e      	b.n	8006b64 <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8006b46:	2300      	movs	r3, #0
 8006b48:	75fb      	strb	r3, [r7, #23]
 8006b4a:	f107 0217 	add.w	r2, r7, #23
 8006b4e:	2301      	movs	r3, #1
 8006b50:	68b9      	ldr	r1, [r7, #8]
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f7ff fe94 	bl	8006880 <lfs_file_flushedwrite>
 8006b58:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	da01      	bge.n	8006b64 <lfs_file_write_+0xc4>
                return res;
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	e017      	b.n	8006b94 <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b68:	6a3a      	ldr	r2, [r7, #32]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d8eb      	bhi.n	8006b46 <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	68b9      	ldr	r1, [r7, #8]
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7ff fe83 	bl	8006880 <lfs_file_flushedwrite>
 8006b7a:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	da01      	bge.n	8006b86 <lfs_file_write_+0xe6>
        return nsize;
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	e006      	b.n	8006b94 <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b8a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	631a      	str	r2, [r3, #48]	@ 0x30
    return nsize;
 8006b92:	69bb      	ldr	r3, [r7, #24]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3728      	adds	r7, #40	@ 0x28
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	08009b60 	.word	0x08009b60
 8006ba0:	0800a50c 	.word	0x0800a50c
 8006ba4:	080097f8 	.word	0x080097f8

08006ba8 <lfs_file_seek_>:
#endif

static lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08c      	sub	sp, #48	@ 0x30
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (whence == LFS_SEEK_SET) {
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d102      	bne.n	8006bc8 <lfs_file_seek_+0x20>
        npos = off;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bc6:	e025      	b.n	8006c14 <lfs_file_seek_+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d10f      	bne.n	8006bee <lfs_file_seek_+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	da02      	bge.n	8006be2 <lfs_file_seek_+0x3a>
            return LFS_ERR_INVAL;
 8006bdc:	f06f 0315 	mvn.w	r3, #21
 8006be0:	e067      	b.n	8006cb2 <lfs_file_seek_+0x10a>
        } else {
            npos = file->pos + off;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4413      	add	r3, r2
 8006bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bec:	e012      	b.n	8006c14 <lfs_file_seek_+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d10f      	bne.n	8006c14 <lfs_file_seek_+0x6c>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 8006bf4:	68b9      	ldr	r1, [r7, #8]
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 f875 	bl	8006ce6 <lfs_file_size_>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4413      	add	r3, r2
 8006c02:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (res < 0) {
 8006c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	da02      	bge.n	8006c10 <lfs_file_seek_+0x68>
            return LFS_ERR_INVAL;
 8006c0a:	f06f 0315 	mvn.w	r3, #21
 8006c0e:	e050      	b.n	8006cb2 <lfs_file_seek_+0x10a>
        } else {
            npos = res;
 8006c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d902      	bls.n	8006c24 <lfs_file_seek_+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8006c1e:	f06f 0315 	mvn.w	r3, #21
 8006c22:	e046      	b.n	8006cb2 <lfs_file_seek_+0x10a>
    }

    if (file->pos == npos) {
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d101      	bne.n	8006c32 <lfs_file_seek_+0x8a>
        // noop - position has not changed
        return npos;
 8006c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c30:	e03f      	b.n	8006cb2 <lfs_file_seek_+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
    if (
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d12b      	bne.n	8006c96 <lfs_file_seek_+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c42:	61bb      	str	r3, [r7, #24]
 8006c44:	f107 0318 	add.w	r3, r7, #24
 8006c48:	4619      	mov	r1, r3
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f7fe fe71 	bl	8005932 <lfs_ctz_index>
 8006c50:	6278      	str	r0, [r7, #36]	@ 0x24
        lfs_off_t noff = npos;
 8006c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c54:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8006c56:	f107 0314 	add.w	r3, r7, #20
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f7fe fe68 	bl	8005932 <lfs_ctz_index>
 8006c62:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8006c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d114      	bne.n	8006c96 <lfs_file_seek_+0xee>
                && noff >= file->cache.off
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d80f      	bhi.n	8006c96 <lfs_file_seek_+0xee>
                && noff < file->cache.off + file->cache.size) {
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c7e:	441a      	add	r2, r3
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d907      	bls.n	8006c96 <lfs_file_seek_+0xee>
            file->pos = npos;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c8a:	635a      	str	r2, [r3, #52]	@ 0x34
            file->off = noff;
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	63da      	str	r2, [r3, #60]	@ 0x3c
            return npos;
 8006c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c94:	e00d      	b.n	8006cb2 <lfs_file_seek_+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8006c96:	68b9      	ldr	r1, [r7, #8]
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f7ff fb75 	bl	8006388 <lfs_file_flush>
 8006c9e:	61f8      	str	r0, [r7, #28]
    if (err) {
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <lfs_file_seek_+0x102>
        return err;
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	e003      	b.n	8006cb2 <lfs_file_seek_+0x10a>
    }

    // update pos
    file->pos = npos;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cae:	635a      	str	r2, [r3, #52]	@ 0x34
    return npos;
 8006cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3730      	adds	r7, #48	@ 0x30
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <lfs_file_rewind_>:
static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}

static int lfs_file_rewind_(lfs_t *lfs, lfs_file_t *file) {
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	6039      	str	r1, [r7, #0]
    lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff ff6c 	bl	8006ba8 <lfs_file_seek_>
 8006cd0:	60f8      	str	r0, [r7, #12]
    if (res < 0) {
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	da01      	bge.n	8006cdc <lfs_file_rewind_+0x22>
        return (int)res;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	e000      	b.n	8006cde <lfs_file_rewind_+0x24>
    }

    return 0;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <lfs_file_size_>:

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b082      	sub	sp, #8
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d009      	beq.n	8006d10 <lfs_file_size_+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d04:	4619      	mov	r1, r3
 8006d06:	4610      	mov	r0, r2
 8006d08:	f7fa fd47 	bl	800179a <lfs_max>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	e001      	b.n	8006d14 <lfs_file_size_+0x2e>
    }
#endif

    return file->ctz.size;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8006d1c:	b590      	push	{r4, r7, lr}
 8006d1e:	b08d      	sub	sp, #52	@ 0x34
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	669a      	str	r2, [r3, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	6a1a      	ldr	r2, [r3, #32]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	66da      	str	r2, [r3, #108]	@ 0x6c
    int err = 0;
 8006d34:	2300      	movs	r3, #0
 8006d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d106      	bne.n	8006d50 <lfs_init+0x34>
 8006d42:	4b96      	ldr	r3, [pc, #600]	@ (8006f9c <lfs_init+0x280>)
 8006d44:	4a96      	ldr	r2, [pc, #600]	@ (8006fa0 <lfs_init+0x284>)
 8006d46:	f241 0152 	movw	r1, #4178	@ 0x1052
 8006d4a:	4896      	ldr	r0, [pc, #600]	@ (8006fa4 <lfs_init+0x288>)
 8006d4c:	f001 fcb0 	bl	80086b0 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d106      	bne.n	8006d68 <lfs_init+0x4c>
 8006d5a:	4b93      	ldr	r3, [pc, #588]	@ (8006fa8 <lfs_init+0x28c>)
 8006d5c:	4a90      	ldr	r2, [pc, #576]	@ (8006fa0 <lfs_init+0x284>)
 8006d5e:	f241 0153 	movw	r1, #4179	@ 0x1053
 8006d62:	4890      	ldr	r0, [pc, #576]	@ (8006fa4 <lfs_init+0x288>)
 8006d64:	f001 fca4 	bl	80086b0 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <lfs_init+0x64>
 8006d72:	4b8e      	ldr	r3, [pc, #568]	@ (8006fac <lfs_init+0x290>)
 8006d74:	4a8a      	ldr	r2, [pc, #552]	@ (8006fa0 <lfs_init+0x284>)
 8006d76:	f241 0154 	movw	r1, #4180	@ 0x1054
 8006d7a:	488a      	ldr	r0, [pc, #552]	@ (8006fa4 <lfs_init+0x288>)
 8006d7c:	f001 fc98 	bl	80086b0 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006d8a:	6952      	ldr	r2, [r2, #20]
 8006d8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d90:	fb01 f202 	mul.w	r2, r1, r2
 8006d94:	1a9b      	subs	r3, r3, r2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d006      	beq.n	8006da8 <lfs_init+0x8c>
 8006d9a:	4b85      	ldr	r3, [pc, #532]	@ (8006fb0 <lfs_init+0x294>)
 8006d9c:	4a80      	ldr	r2, [pc, #512]	@ (8006fa0 <lfs_init+0x284>)
 8006d9e:	f241 0158 	movw	r1, #4184	@ 0x1058
 8006da2:	4880      	ldr	r0, [pc, #512]	@ (8006fa4 <lfs_init+0x288>)
 8006da4:	f001 fc84 	bl	80086b0 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006db2:	6992      	ldr	r2, [r2, #24]
 8006db4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006db8:	fb01 f202 	mul.w	r2, r1, r2
 8006dbc:	1a9b      	subs	r3, r3, r2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d006      	beq.n	8006dd0 <lfs_init+0xb4>
 8006dc2:	4b7c      	ldr	r3, [pc, #496]	@ (8006fb4 <lfs_init+0x298>)
 8006dc4:	4a76      	ldr	r2, [pc, #472]	@ (8006fa0 <lfs_init+0x284>)
 8006dc6:	f241 0159 	movw	r1, #4185	@ 0x1059
 8006dca:	4876      	ldr	r0, [pc, #472]	@ (8006fa4 <lfs_init+0x288>)
 8006dcc:	f001 fc70 	bl	80086b0 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006dda:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006ddc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006de0:	fb01 f202 	mul.w	r2, r1, r2
 8006de4:	1a9b      	subs	r3, r3, r2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d006      	beq.n	8006df8 <lfs_init+0xdc>
 8006dea:	4b73      	ldr	r3, [pc, #460]	@ (8006fb8 <lfs_init+0x29c>)
 8006dec:	4a6c      	ldr	r2, [pc, #432]	@ (8006fa0 <lfs_init+0x284>)
 8006dee:	f241 015a 	movw	r1, #4186	@ 0x105a
 8006df2:	486c      	ldr	r0, [pc, #432]	@ (8006fa4 <lfs_init+0x288>)
 8006df4:	f001 fc5c 	bl	80086b0 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e00:	d806      	bhi.n	8006e10 <lfs_init+0xf4>
 8006e02:	4b6e      	ldr	r3, [pc, #440]	@ (8006fbc <lfs_init+0x2a0>)
 8006e04:	4a66      	ldr	r2, [pc, #408]	@ (8006fa0 <lfs_init+0x284>)
 8006e06:	f241 015d 	movw	r1, #4189	@ 0x105d
 8006e0a:	4866      	ldr	r0, [pc, #408]	@ (8006fa4 <lfs_init+0x288>)
 8006e0c:	f001 fc50 	bl	80086b0 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	3b08      	subs	r3, #8
 8006e18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fa fd01 	bl	8001828 <lfs_npw2>
 8006e26:	4603      	mov	r3, r0
 8006e28:	009a      	lsls	r2, r3, #2
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d906      	bls.n	8006e42 <lfs_init+0x126>
 8006e34:	4b62      	ldr	r3, [pc, #392]	@ (8006fc0 <lfs_init+0x2a4>)
 8006e36:	4a5a      	ldr	r2, [pc, #360]	@ (8006fa0 <lfs_init+0x284>)
 8006e38:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8006e3c:	4859      	ldr	r0, [pc, #356]	@ (8006fa4 <lfs_init+0x288>)
 8006e3e:	f001 fc37 	bl	80086b0 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d106      	bne.n	8006e5a <lfs_init+0x13e>
 8006e4c:	4b5d      	ldr	r3, [pc, #372]	@ (8006fc4 <lfs_init+0x2a8>)
 8006e4e:	4a54      	ldr	r2, [pc, #336]	@ (8006fa0 <lfs_init+0x284>)
 8006e50:	f241 0169 	movw	r1, #4201	@ 0x1069
 8006e54:	4853      	ldr	r0, [pc, #332]	@ (8006fa4 <lfs_init+0x288>)
 8006e56:	f001 fc2b 	bl	80086b0 <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00f      	beq.n	8006e84 <lfs_init+0x168>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	085b      	lsrs	r3, r3, #1
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d206      	bcs.n	8006e84 <lfs_init+0x168>
 8006e76:	4b54      	ldr	r3, [pc, #336]	@ (8006fc8 <lfs_init+0x2ac>)
 8006e78:	4a49      	ldr	r2, [pc, #292]	@ (8006fa0 <lfs_init+0x284>)
 8006e7a:	f241 016f 	movw	r1, #4207	@ 0x106f
 8006e7e:	4849      	ldr	r0, [pc, #292]	@ (8006fa4 <lfs_init+0x288>)
 8006e80:	f001 fc16 	bl	80086b0 <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e8e:	d00e      	beq.n	8006eae <lfs_init+0x192>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d906      	bls.n	8006eae <lfs_init+0x192>
 8006ea0:	4b4a      	ldr	r3, [pc, #296]	@ (8006fcc <lfs_init+0x2b0>)
 8006ea2:	4a3f      	ldr	r2, [pc, #252]	@ (8006fa0 <lfs_init+0x284>)
 8006ea4:	f241 0171 	movw	r1, #4209	@ 0x1071
 8006ea8:	483e      	ldr	r0, [pc, #248]	@ (8006fa4 <lfs_init+0x288>)
 8006eaa:	f001 fc01 	bl	80086b0 <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d005      	beq.n	8006ec4 <lfs_init+0x1a8>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	60da      	str	r2, [r3, #12]
 8006ec2:	e010      	b.n	8006ee6 <lfs_init+0x1ca>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fa fd14 	bl	80018f8 <lfs_malloc>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d103      	bne.n	8006ee6 <lfs_init+0x1ca>
            err = LFS_ERR_NOMEM;
 8006ede:	f06f 030b 	mvn.w	r3, #11
 8006ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8006ee4:	e163      	b.n	80071ae <lfs_init+0x492>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d005      	beq.n	8006efc <lfs_init+0x1e0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ef4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	61da      	str	r2, [r3, #28]
 8006efa:	e010      	b.n	8006f1e <lfs_init+0x202>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fa fcf8 	bl	80018f8 <lfs_malloc>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d103      	bne.n	8006f1e <lfs_init+0x202>
            err = LFS_ERR_NOMEM;
 8006f16:	f06f 030b 	mvn.w	r3, #11
 8006f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8006f1c:	e147      	b.n	80071ae <lfs_init+0x492>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4619      	mov	r1, r3
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7fa fd0e 	bl	8001944 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3310      	adds	r3, #16
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fa fd08 	bl	8001944 <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d106      	bne.n	8006f4c <lfs_init+0x230>
 8006f3e:	4b24      	ldr	r3, [pc, #144]	@ (8006fd0 <lfs_init+0x2b4>)
 8006f40:	4a17      	ldr	r2, [pc, #92]	@ (8006fa0 <lfs_init+0x284>)
 8006f42:	f241 0190 	movw	r1, #4240	@ 0x1090
 8006f46:	4817      	ldr	r0, [pc, #92]	@ (8006fa4 <lfs_init+0x288>)
 8006f48:	f001 fbb2 	bl	80086b0 <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d005      	beq.n	8006f62 <lfs_init+0x246>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	665a      	str	r2, [r3, #100]	@ 0x64
 8006f60:	e010      	b.n	8006f84 <lfs_init+0x268>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fa fcc5 	bl	80018f8 <lfs_malloc>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d103      	bne.n	8006f84 <lfs_init+0x268>
            err = LFS_ERR_NOMEM;
 8006f7c:	f06f 030b 	mvn.w	r3, #11
 8006f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8006f82:	e114      	b.n	80071ae <lfs_init+0x492>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8a:	2bff      	cmp	r3, #255	@ 0xff
 8006f8c:	d924      	bls.n	8006fd8 <lfs_init+0x2bc>
 8006f8e:	4b11      	ldr	r3, [pc, #68]	@ (8006fd4 <lfs_init+0x2b8>)
 8006f90:	4a03      	ldr	r2, [pc, #12]	@ (8006fa0 <lfs_init+0x284>)
 8006f92:	f241 019c 	movw	r1, #4252	@ 0x109c
 8006f96:	4803      	ldr	r0, [pc, #12]	@ (8006fa4 <lfs_init+0x288>)
 8006f98:	f001 fb8a 	bl	80086b0 <__assert_func>
 8006f9c:	08009b90 	.word	0x08009b90
 8006fa0:	0800a51c 	.word	0x0800a51c
 8006fa4:	080097f8 	.word	0x080097f8
 8006fa8:	08009bac 	.word	0x08009bac
 8006fac:	08009bc8 	.word	0x08009bc8
 8006fb0:	08009be4 	.word	0x08009be4
 8006fb4:	08009c14 	.word	0x08009c14
 8006fb8:	08009c44 	.word	0x08009c44
 8006fbc:	08009c78 	.word	0x08009c78
 8006fc0:	08009c94 	.word	0x08009c94
 8006fc4:	08009ce0 	.word	0x08009ce0
 8006fc8:	08009cfc 	.word	0x08009cfc
 8006fcc:	08009d50 	.word	0x08009d50
 8006fd0:	08009db0 	.word	0x08009db0
 8006fd4:	08009dd0 	.word	0x08009dd0
    lfs->name_max = lfs->cfg->name_max;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->name_max) {
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d102      	bne.n	8006ff0 <lfs_init+0x2d4>
        lfs->name_max = LFS_NAME_MAX;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	22ff      	movs	r2, #255	@ 0xff
 8006fee:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	da06      	bge.n	8007008 <lfs_init+0x2ec>
 8006ffa:	4b71      	ldr	r3, [pc, #452]	@ (80071c0 <lfs_init+0x4a4>)
 8006ffc:	4a71      	ldr	r2, [pc, #452]	@ (80071c4 <lfs_init+0x4a8>)
 8006ffe:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 8007002:	4871      	ldr	r0, [pc, #452]	@ (80071c8 <lfs_init+0x4ac>)
 8007004:	f001 fb54 	bl	80086b0 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800700c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->file_max) {
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007016:	2b00      	cmp	r3, #0
 8007018:	d103      	bne.n	8007022 <lfs_init+0x306>
        lfs->file_max = LFS_FILE_MAX;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8007020:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007028:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800702c:	4293      	cmp	r3, r2
 800702e:	d906      	bls.n	800703e <lfs_init+0x322>
 8007030:	4b66      	ldr	r3, [pc, #408]	@ (80071cc <lfs_init+0x4b0>)
 8007032:	4a64      	ldr	r2, [pc, #400]	@ (80071c4 <lfs_init+0x4a8>)
 8007034:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 8007038:	4863      	ldr	r0, [pc, #396]	@ (80071c8 <lfs_init+0x4ac>)
 800703a:	f001 fb39 	bl	80086b0 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007042:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	679a      	str	r2, [r3, #120]	@ 0x78
    if (!lfs->attr_max) {
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800704c:	2b00      	cmp	r3, #0
 800704e:	d103      	bne.n	8007058 <lfs_init+0x33c>
        lfs->attr_max = LFS_ATTR_MAX;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8007056:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800705c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	429a      	cmp	r2, r3
 8007066:	d906      	bls.n	8007076 <lfs_init+0x35a>
 8007068:	4b59      	ldr	r3, [pc, #356]	@ (80071d0 <lfs_init+0x4b4>)
 800706a:	4a56      	ldr	r2, [pc, #344]	@ (80071c4 <lfs_init+0x4a8>)
 800706c:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 8007070:	4855      	ldr	r0, [pc, #340]	@ (80071c8 <lfs_init+0x4ac>)
 8007072:	f001 fb1d 	bl	80086b0 <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800707a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800707c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007080:	d00e      	beq.n	80070a0 <lfs_init+0x384>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007086:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800708c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708e:	429a      	cmp	r2, r3
 8007090:	d906      	bls.n	80070a0 <lfs_init+0x384>
 8007092:	4b50      	ldr	r3, [pc, #320]	@ (80071d4 <lfs_init+0x4b8>)
 8007094:	4a4b      	ldr	r2, [pc, #300]	@ (80071c4 <lfs_init+0x4a8>)
 8007096:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 800709a:	484b      	ldr	r0, [pc, #300]	@ (80071c8 <lfs_init+0x4ac>)
 800709c:	f001 fb08 	bl	80086b0 <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070aa:	d00d      	beq.n	80070c8 <lfs_init+0x3ac>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d906      	bls.n	80070c8 <lfs_init+0x3ac>
 80070ba:	4b47      	ldr	r3, [pc, #284]	@ (80071d8 <lfs_init+0x4bc>)
 80070bc:	4a41      	ldr	r2, [pc, #260]	@ (80071c4 <lfs_init+0x4a8>)
 80070be:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 80070c2:	4841      	ldr	r0, [pc, #260]	@ (80071c8 <lfs_init+0x4ac>)
 80070c4:	f001 faf4 	bl	80086b0 <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070d2:	d019      	beq.n	8007108 <lfs_init+0x3ec>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d004      	beq.n	80070ee <lfs_init+0x3d2>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070ea:	08db      	lsrs	r3, r3, #3
 80070ec:	e003      	b.n	80070f6 <lfs_init+0x3da>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070f2:	69db      	ldr	r3, [r3, #28]
 80070f4:	08db      	lsrs	r3, r3, #3
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d206      	bcs.n	8007108 <lfs_init+0x3ec>
 80070fa:	4b38      	ldr	r3, [pc, #224]	@ (80071dc <lfs_init+0x4c0>)
 80070fc:	4a31      	ldr	r2, [pc, #196]	@ (80071c4 <lfs_init+0x4a8>)
 80070fe:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8007102:	4831      	ldr	r0, [pc, #196]	@ (80071c8 <lfs_init+0x4ac>)
 8007104:	f001 fad4 	bl	80086b0 <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800710c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007116:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800711a:	d103      	bne.n	8007124 <lfs_init+0x408>
        lfs->inline_max = 0;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	67da      	str	r2, [r3, #124]	@ 0x7c
 8007122:	e022      	b.n	800716a <lfs_init+0x44e>
    } else if (lfs->inline_max == 0) {
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007128:	2b00      	cmp	r3, #0
 800712a:	d11e      	bne.n	800716a <lfs_init+0x44e>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007130:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
        lfs->inline_max = lfs_min(
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800713a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 800713c:	2b00      	cmp	r3, #0
 800713e:	d004      	beq.n	800714a <lfs_init+0x42e>
                        ? lfs->cfg->metadata_max
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 8007146:	08db      	lsrs	r3, r3, #3
 8007148:	e003      	b.n	8007152 <lfs_init+0x436>
                        : lfs->cfg->block_size)/8));
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800714e:	69db      	ldr	r3, [r3, #28]
        lfs->inline_max = lfs_min(
 8007150:	08db      	lsrs	r3, r3, #3
 8007152:	4619      	mov	r1, r3
 8007154:	4610      	mov	r0, r2
 8007156:	f7fa fb30 	bl	80017ba <lfs_min>
 800715a:	4603      	mov	r3, r0
 800715c:	4619      	mov	r1, r3
 800715e:	4620      	mov	r0, r4
 8007160:	f7fa fb2b 	bl	80017ba <lfs_min>
 8007164:	4602      	mov	r2, r0
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007170:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007178:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	333c      	adds	r3, #60	@ 0x3c
 800718a:	2200      	movs	r2, #0
 800718c:	601a      	str	r2, [r3, #0]
 800718e:	605a      	str	r2, [r3, #4]
 8007190:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	3330      	adds	r3, #48	@ 0x30
 8007196:	2200      	movs	r2, #0
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	605a      	str	r2, [r3, #4]
 800719c:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3348      	adds	r3, #72	@ 0x48
 80071a2:	2200      	movs	r2, #0
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	605a      	str	r2, [r3, #4]
 80071a8:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 80071aa:	2300      	movs	r3, #0
 80071ac:	e003      	b.n	80071b6 <lfs_init+0x49a>

cleanup:
    lfs_deinit(lfs);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f816 	bl	80071e0 <lfs_deinit>
    return err;
 80071b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3734      	adds	r7, #52	@ 0x34
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd90      	pop	{r4, r7, pc}
 80071be:	bf00      	nop
 80071c0:	08009dec 	.word	0x08009dec
 80071c4:	0800a51c 	.word	0x0800a51c
 80071c8:	080097f8 	.word	0x080097f8
 80071cc:	08009e10 	.word	0x08009e10
 80071d0:	08009e2c 	.word	0x08009e2c
 80071d4:	08009e5c 	.word	0x08009e5c
 80071d8:	08009eb4 	.word	0x08009eb4
 80071dc:	08009f04 	.word	0x08009f04

080071e0 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d104      	bne.n	80071fc <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fa fb8a 	bl	8001910 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007202:	2b00      	cmp	r3, #0
 8007204:	d104      	bne.n	8007210 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	4618      	mov	r0, r3
 800720c:	f7fa fb80 	bl	8001910 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007216:	2b00      	cmp	r3, #0
 8007218:	d104      	bne.n	8007224 <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800721e:	4618      	mov	r0, r3
 8007220:	f7fa fb76 	bl	8001910 <lfs_free>
    }

    return 0;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
	...

08007230 <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 8007230:	b580      	push	{r7, lr}
 8007232:	b0a0      	sub	sp, #128	@ 0x80
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
    int err = 0;
 800723a:	2300      	movs	r3, #0
 800723c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    {
        err = lfs_init(lfs, cfg);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7ff fd6b 	bl	8006d1c <lfs_init>
 8007246:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8007248:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <lfs_format_+0x22>
            return err;
 800724e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007250:	e08d      	b.n	800736e <lfs_format_+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d106      	bne.n	8007268 <lfs_format_+0x38>
 800725a:	4b47      	ldr	r3, [pc, #284]	@ (8007378 <lfs_format_+0x148>)
 800725c:	4a47      	ldr	r2, [pc, #284]	@ (800737c <lfs_format_+0x14c>)
 800725e:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 8007262:	4847      	ldr	r0, [pc, #284]	@ (8007380 <lfs_format_+0x150>)
 8007264:	f001 fa24 	bl	80086b0 <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007272:	461a      	mov	r2, r3
 8007274:	2100      	movs	r1, #0
 8007276:	f001 fbed 	bl	8008a54 <memset>
        lfs->lookahead.start = 0;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007286:	00da      	lsls	r2, r3, #3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800728c:	4619      	mov	r1, r3
 800728e:	4610      	mov	r0, r2
 8007290:	f7fa fa93 	bl	80017ba <lfs_min>
 8007294:	4602      	mov	r2, r0
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	659a      	str	r2, [r3, #88]	@ 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	65da      	str	r2, [r3, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f7fb fa64 	bl	800276e <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 80072a6:	f107 030c 	add.w	r3, r7, #12
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7fd f931 	bl	8004514 <lfs_dir_alloc>
 80072b2:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 80072b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d150      	bne.n	800735c <lfs_format_+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7fb fa2e 	bl	800271c <lfs_fs_disk_version>
 80072c0:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 80072c2:	667b      	str	r3, [r7, #100]	@ 0x64
            .block_size  = lfs->cfg->block_size,
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072c8:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 80072ca:	66bb      	str	r3, [r7, #104]	@ 0x68
            .block_count = lfs->block_count,
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 80072d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
            .name_max    = lfs->name_max,
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
        lfs_superblock_t superblock = {
 80072d6:	673b      	str	r3, [r7, #112]	@ 0x70
            .file_max    = lfs->file_max,
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        lfs_superblock_t superblock = {
 80072dc:	677b      	str	r3, [r7, #116]	@ 0x74
            .attr_max    = lfs->attr_max,
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
        lfs_superblock_t superblock = {
 80072e2:	67bb      	str	r3, [r7, #120]	@ 0x78
        };

        lfs_superblock_tole32(&superblock);
 80072e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fb f98d 	bl	8002608 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 80072ee:	4b25      	ldr	r3, [pc, #148]	@ (8007384 <lfs_format_+0x154>)
 80072f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072f2:	2300      	movs	r3, #0
 80072f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80072f6:	4b24      	ldr	r3, [pc, #144]	@ (8007388 <lfs_format_+0x158>)
 80072f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80072fa:	4b24      	ldr	r3, [pc, #144]	@ (800738c <lfs_format_+0x15c>)
 80072fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072fe:	4b24      	ldr	r3, [pc, #144]	@ (8007390 <lfs_format_+0x160>)
 8007300:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007302:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007306:	663b      	str	r3, [r7, #96]	@ 0x60
 8007308:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800730c:	f107 010c 	add.w	r1, r7, #12
 8007310:	2303      	movs	r3, #3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7fe fae8 	bl	80058e8 <lfs_dir_commit>
 8007318:	67f8      	str	r0, [r7, #124]	@ 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 800731a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800731c:	2b00      	cmp	r3, #0
 800731e:	d11f      	bne.n	8007360 <lfs_format_+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8007320:	2300      	movs	r3, #0
 8007322:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8007326:	f107 010c 	add.w	r1, r7, #12
 800732a:	2300      	movs	r3, #0
 800732c:	2200      	movs	r2, #0
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fe fada 	bl	80058e8 <lfs_dir_commit>
 8007334:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8007336:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007338:	2b00      	cmp	r3, #0
 800733a:	d113      	bne.n	8007364 <lfs_format_+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 800733c:	2300      	movs	r3, #0
 800733e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007340:	2301      	movs	r3, #1
 8007342:	633b      	str	r3, [r7, #48]	@ 0x30
 8007344:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8007348:	f107 030c 	add.w	r3, r7, #12
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7fc fd28 	bl	8003da4 <lfs_dir_fetch>
 8007354:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8007356:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007358:	2b00      	cmp	r3, #0
 800735a:	e004      	b.n	8007366 <lfs_format_+0x136>
            goto cleanup;
 800735c:	bf00      	nop
 800735e:	e002      	b.n	8007366 <lfs_format_+0x136>
            goto cleanup;
 8007360:	bf00      	nop
 8007362:	e000      	b.n	8007366 <lfs_format_+0x136>
            goto cleanup;
 8007364:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7ff ff3a 	bl	80071e0 <lfs_deinit>
    return err;
 800736c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c

}
 800736e:	4618      	mov	r0, r3
 8007370:	3780      	adds	r7, #128	@ 0x80
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	08009f94 	.word	0x08009f94
 800737c:	0800a528 	.word	0x0800a528
 8007380:	080097f8 	.word	0x080097f8
 8007384:	40100000 	.word	0x40100000
 8007388:	0ff00008 	.word	0x0ff00008
 800738c:	08009fac 	.word	0x08009fac
 8007390:	20100018 	.word	0x20100018

08007394 <lfs_mount_>:
#endif

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 8007394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007396:	b0a1      	sub	sp, #132	@ 0x84
 8007398:	af04      	add	r7, sp, #16
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff fcbb 	bl	8006d1c <lfs_init>
 80073a6:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (err) {
 80073a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d001      	beq.n	80073b2 <lfs_mount_+0x1e>
        return err;
 80073ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073b0:	e202      	b.n	80077b8 <lfs_mount_+0x424>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 80073b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80073b6:	2220      	movs	r2, #32
 80073b8:	2100      	movs	r1, #0
 80073ba:	4618      	mov	r0, r3
 80073bc:	f001 fb4a 	bl	8008a54 <memset>
 80073c0:	2301      	movs	r3, #1
 80073c2:	657b      	str	r3, [r7, #84]	@ 0x54
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80073c4:	4a9a      	ldr	r2, [pc, #616]	@ (8007630 <lfs_mount_+0x29c>)
 80073c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80073ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80073ce:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80073d2:	2301      	movs	r3, #1
 80073d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    lfs_size_t tortoise_period = 1;
 80073d6:	2301      	movs	r3, #1
 80073d8:	667b      	str	r3, [r7, #100]	@ 0x64
    while (!lfs_pair_isnull(dir.tail)) {
 80073da:	e199      	b.n	8007710 <lfs_mount_+0x37c>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 80073dc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80073e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80073e4:	3318      	adds	r3, #24
 80073e6:	4611      	mov	r1, r2
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7fa fe8d 	bl	8002108 <lfs_pair_issync>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00a      	beq.n	800740a <lfs_mount_+0x76>
            LFS_WARN("Cycle detected in tail list");
 80073f4:	4b8f      	ldr	r3, [pc, #572]	@ (8007634 <lfs_mount_+0x2a0>)
 80073f6:	f241 123d 	movw	r2, #4413	@ 0x113d
 80073fa:	498f      	ldr	r1, [pc, #572]	@ (8007638 <lfs_mount_+0x2a4>)
 80073fc:	488f      	ldr	r0, [pc, #572]	@ (800763c <lfs_mount_+0x2a8>)
 80073fe:	f001 fb07 	bl	8008a10 <iprintf>
            err = LFS_ERR_CORRUPT;
 8007402:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8007406:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 8007408:	e1d2      	b.n	80077b0 <lfs_mount_+0x41c>
        }
        if (tortoise_i == tortoise_period) {
 800740a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800740c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800740e:	429a      	cmp	r2, r3
 8007410:	d108      	bne.n	8007424 <lfs_mount_+0x90>
            tortoise[0] = dir.tail[0];
 8007412:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007414:	633b      	str	r3, [r7, #48]	@ 0x30
            tortoise[1] = dir.tail[1];
 8007416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007418:	637b      	str	r3, [r7, #52]	@ 0x34
            tortoise_i = 0;
 800741a:	2300      	movs	r3, #0
 800741c:	66bb      	str	r3, [r7, #104]	@ 0x68
            tortoise_period *= 2;
 800741e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007420:	005b      	lsls	r3, r3, #1
 8007422:	667b      	str	r3, [r7, #100]	@ 0x64
        }
        tortoise_i += 1;
 8007424:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007426:	3301      	adds	r3, #1
 8007428:	66bb      	str	r3, [r7, #104]	@ 0x68
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
 800742e:	4b84      	ldr	r3, [pc, #528]	@ (8007640 <lfs_mount_+0x2ac>)
 8007430:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007432:	2308      	movs	r3, #8
 8007434:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8007436:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800743a:	f103 0218 	add.w	r2, r3, #24
 800743e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8007442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007446:	9303      	str	r3, [sp, #12]
 8007448:	4b7e      	ldr	r3, [pc, #504]	@ (8007644 <lfs_mount_+0x2b0>)
 800744a:	9302      	str	r3, [sp, #8]
 800744c:	2300      	movs	r3, #0
 800744e:	9301      	str	r3, [sp, #4]
 8007450:	4b7d      	ldr	r3, [pc, #500]	@ (8007648 <lfs_mount_+0x2b4>)
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	4b7d      	ldr	r3, [pc, #500]	@ (800764c <lfs_mount_+0x2b8>)
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7fc f8d4 	bl	8003604 <lfs_dir_fetchmatch>
 800745c:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    lfs, "littlefs", 8});
        if (tag < 0) {
 800745e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007460:	2b00      	cmp	r3, #0
 8007462:	da02      	bge.n	800746a <lfs_mount_+0xd6>
            err = tag;
 8007464:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007466:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 8007468:	e1a2      	b.n	80077b0 <lfs_mount_+0x41c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 800746a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800746c:	2b00      	cmp	r3, #0
 800746e:	f000 8142 	beq.w	80076f6 <lfs_mount_+0x362>
 8007472:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007474:	4618      	mov	r0, r3
 8007476:	f7fa feb6 	bl	80021e6 <lfs_tag_isdelete>
 800747a:	4603      	mov	r3, r0
 800747c:	f083 0301 	eor.w	r3, r3, #1
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 8137 	beq.w	80076f6 <lfs_mount_+0x362>
            // update root
            lfs->root[0] = dir.pair[0];
 8007488:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 800748e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8007494:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8007498:	f107 030c 	add.w	r3, r7, #12
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	4b6c      	ldr	r3, [pc, #432]	@ (8007650 <lfs_mount_+0x2bc>)
 80074a0:	4a6a      	ldr	r2, [pc, #424]	@ (800764c <lfs_mount_+0x2b8>)
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7fb fb78 	bl	8002b98 <lfs_dir_get>
 80074a8:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 80074aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	da02      	bge.n	80074b6 <lfs_mount_+0x122>
                err = tag;
 80074b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 80074b4:	e11e      	b.n	80076f4 <lfs_mount_+0x360>
            }
            lfs_superblock_fromle32(&superblock);
 80074b6:	f107 030c 	add.w	r3, r7, #12
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fb f86c 	bl	8002598 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	0c1b      	lsrs	r3, r3, #16
 80074c4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
            if (major_version != lfs_fs_disk_version_major(lfs)
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7fb f932 	bl	8002738 <lfs_fs_disk_version_major>
 80074d4:	4603      	mov	r3, r0
 80074d6:	461a      	mov	r2, r3
 80074d8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80074dc:	4293      	cmp	r3, r2
 80074de:	d108      	bne.n	80074f2 <lfs_mount_+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7fb f937 	bl	8002754 <lfs_fs_disk_version_minor>
 80074e6:	4603      	mov	r3, r0
 80074e8:	461a      	mov	r2, r3
 80074ea:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d91d      	bls.n	800752e <lfs_mount_+0x19a>
                LFS_ERROR("Invalid version "
 80074f2:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 80074f6:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7fb f91c 	bl	8002738 <lfs_fs_disk_version_major>
 8007500:	4603      	mov	r3, r0
 8007502:	461e      	mov	r6, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7fb f925 	bl	8002754 <lfs_fs_disk_version_minor>
 800750a:	4603      	mov	r3, r0
 800750c:	461a      	mov	r2, r3
 800750e:	4b49      	ldr	r3, [pc, #292]	@ (8007634 <lfs_mount_+0x2a0>)
 8007510:	9303      	str	r3, [sp, #12]
 8007512:	9202      	str	r2, [sp, #8]
 8007514:	9601      	str	r6, [sp, #4]
 8007516:	9400      	str	r4, [sp, #0]
 8007518:	462b      	mov	r3, r5
 800751a:	f241 126b 	movw	r2, #4459	@ 0x116b
 800751e:	4946      	ldr	r1, [pc, #280]	@ (8007638 <lfs_mount_+0x2a4>)
 8007520:	484c      	ldr	r0, [pc, #304]	@ (8007654 <lfs_mount_+0x2c0>)
 8007522:	f001 fa75 	bl	8008a10 <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 8007526:	f06f 0315 	mvn.w	r3, #21
 800752a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 800752c:	e0e2      	b.n	80076f4 <lfs_mount_+0x360>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 800752e:	2300      	movs	r3, #0
 8007530:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7fb f90d 	bl	8002754 <lfs_fs_disk_version_minor>
 800753a:	4603      	mov	r3, r0
 800753c:	461a      	mov	r2, r3
 800753e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8007542:	4293      	cmp	r3, r2
 8007544:	d21c      	bcs.n	8007580 <lfs_mount_+0x1ec>
                LFS_DEBUG("Found older minor version "
 8007546:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 800754a:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7fb f8f2 	bl	8002738 <lfs_fs_disk_version_major>
 8007554:	4603      	mov	r3, r0
 8007556:	461e      	mov	r6, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7fb f8fb 	bl	8002754 <lfs_fs_disk_version_minor>
 800755e:	4603      	mov	r3, r0
 8007560:	461a      	mov	r2, r3
 8007562:	4b34      	ldr	r3, [pc, #208]	@ (8007634 <lfs_mount_+0x2a0>)
 8007564:	9303      	str	r3, [sp, #12]
 8007566:	9202      	str	r2, [sp, #8]
 8007568:	9601      	str	r6, [sp, #4]
 800756a:	9400      	str	r4, [sp, #0]
 800756c:	462b      	mov	r3, r5
 800756e:	f241 127a 	movw	r2, #4474	@ 0x117a
 8007572:	4931      	ldr	r1, [pc, #196]	@ (8007638 <lfs_mount_+0x2a4>)
 8007574:	4838      	ldr	r0, [pc, #224]	@ (8007658 <lfs_mount_+0x2c4>)
 8007576:	f001 fa4b 	bl	8008a10 <iprintf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 800757a:	2301      	movs	r3, #1
 800757c:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 8007580:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fbb4 	bl	8007cf4 <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d018      	beq.n	80075c4 <lfs_mount_+0x230>
                if (superblock.name_max > lfs->name_max) {
 8007592:	69ba      	ldr	r2, [r7, #24]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007598:	429a      	cmp	r2, r3
 800759a:	d910      	bls.n	80075be <lfs_mount_+0x22a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a2:	4924      	ldr	r1, [pc, #144]	@ (8007634 <lfs_mount_+0x2a0>)
 80075a4:	9101      	str	r1, [sp, #4]
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	4613      	mov	r3, r2
 80075aa:	f241 1289 	movw	r2, #4489	@ 0x1189
 80075ae:	4922      	ldr	r1, [pc, #136]	@ (8007638 <lfs_mount_+0x2a4>)
 80075b0:	482a      	ldr	r0, [pc, #168]	@ (800765c <lfs_mount_+0x2c8>)
 80075b2:	f001 fa2d 	bl	8008a10 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 80075b6:	f06f 0315 	mvn.w	r3, #21
 80075ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 80075bc:	e09a      	b.n	80076f4 <lfs_mount_+0x360>
                }

                lfs->name_max = superblock.name_max;
 80075be:	69ba      	ldr	r2, [r7, #24]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.file_max) {
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d018      	beq.n	80075fc <lfs_mount_+0x268>
                if (superblock.file_max > lfs->file_max) {
 80075ca:	69fa      	ldr	r2, [r7, #28]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d910      	bls.n	80075f6 <lfs_mount_+0x262>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 80075d4:	69fa      	ldr	r2, [r7, #28]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075da:	4916      	ldr	r1, [pc, #88]	@ (8007634 <lfs_mount_+0x2a0>)
 80075dc:	9101      	str	r1, [sp, #4]
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	4613      	mov	r3, r2
 80075e2:	f241 1294 	movw	r2, #4500	@ 0x1194
 80075e6:	4914      	ldr	r1, [pc, #80]	@ (8007638 <lfs_mount_+0x2a4>)
 80075e8:	481d      	ldr	r0, [pc, #116]	@ (8007660 <lfs_mount_+0x2cc>)
 80075ea:	f001 fa11 	bl	8008a10 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 80075ee:	f06f 0315 	mvn.w	r3, #21
 80075f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 80075f4:	e07e      	b.n	80076f4 <lfs_mount_+0x360>
                }

                lfs->file_max = superblock.file_max;
 80075f6:	69fa      	ldr	r2, [r7, #28]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.attr_max) {
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d040      	beq.n	8007684 <lfs_mount_+0x2f0>
                if (superblock.attr_max > lfs->attr_max) {
 8007602:	6a3a      	ldr	r2, [r7, #32]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007608:	429a      	cmp	r2, r3
 800760a:	d92d      	bls.n	8007668 <lfs_mount_+0x2d4>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 800760c:	6a3a      	ldr	r2, [r7, #32]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007612:	4908      	ldr	r1, [pc, #32]	@ (8007634 <lfs_mount_+0x2a0>)
 8007614:	9101      	str	r1, [sp, #4]
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	4613      	mov	r3, r2
 800761a:	f241 129f 	movw	r2, #4511	@ 0x119f
 800761e:	4906      	ldr	r1, [pc, #24]	@ (8007638 <lfs_mount_+0x2a4>)
 8007620:	4810      	ldr	r0, [pc, #64]	@ (8007664 <lfs_mount_+0x2d0>)
 8007622:	f001 f9f5 	bl	8008a10 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8007626:	f06f 0315 	mvn.w	r3, #21
 800762a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 800762c:	e062      	b.n	80076f4 <lfs_mount_+0x360>
 800762e:	bf00      	nop
 8007630:	0800994c 	.word	0x0800994c
 8007634:	08009908 	.word	0x08009908
 8007638:	080097f8 	.word	0x080097f8
 800763c:	08009fb8 	.word	0x08009fb8
 8007640:	08009fac 	.word	0x08009fac
 8007644:	08003e41 	.word	0x08003e41
 8007648:	0ff00008 	.word	0x0ff00008
 800764c:	7ffffc00 	.word	0x7ffffc00
 8007650:	20100018 	.word	0x20100018
 8007654:	08009fe4 	.word	0x08009fe4
 8007658:	0800a01c 	.word	0x0800a01c
 800765c:	0800a05c 	.word	0x0800a05c
 8007660:	0800a090 	.word	0x0800a090
 8007664:	0800a0c4 	.word	0x0800a0c4
                }

                lfs->attr_max = superblock.attr_max;
 8007668:	6a3a      	ldr	r2, [r7, #32]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	679a      	str	r2, [r3, #120]	@ 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007676:	4619      	mov	r1, r3
 8007678:	4610      	mov	r0, r2
 800767a:	f7fa f89e 	bl	80017ba <lfs_min>
 800767e:	4602      	mov	r2, r0
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d017      	beq.n	80076be <lfs_mount_+0x32a>
                    && superblock.block_count != lfs->cfg->block_count) {
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	429a      	cmp	r2, r3
 8007698:	d011      	beq.n	80076be <lfs_mount_+0x32a>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	4947      	ldr	r1, [pc, #284]	@ (80077c0 <lfs_mount_+0x42c>)
 80076a4:	9101      	str	r1, [sp, #4]
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	4613      	mov	r3, r2
 80076aa:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 80076ae:	4945      	ldr	r1, [pc, #276]	@ (80077c4 <lfs_mount_+0x430>)
 80076b0:	4845      	ldr	r0, [pc, #276]	@ (80077c8 <lfs_mount_+0x434>)
 80076b2:	f001 f9ad 	bl	8008a10 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 80076b6:	f06f 0315 	mvn.w	r3, #21
 80076ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 80076bc:	e01a      	b.n	80076f4 <lfs_mount_+0x360>
            }

            lfs->block_count = superblock.block_count;
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	66da      	str	r2, [r3, #108]	@ 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d012      	beq.n	80076f6 <lfs_mount_+0x362>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	4939      	ldr	r1, [pc, #228]	@ (80077c0 <lfs_mount_+0x42c>)
 80076da:	9101      	str	r1, [sp, #4]
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	4613      	mov	r3, r2
 80076e0:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 80076e4:	4937      	ldr	r1, [pc, #220]	@ (80077c4 <lfs_mount_+0x430>)
 80076e6:	4839      	ldr	r0, [pc, #228]	@ (80077cc <lfs_mount_+0x438>)
 80076e8:	f001 f992 	bl	8008a10 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 80076ec:	f06f 0315 	mvn.w	r3, #21
 80076f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 80076f2:	bf00      	nop
            goto cleanup;
 80076f4:	e05c      	b.n	80077b0 <lfs_mount_+0x41c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80076fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7fc fb6a 	bl	8003ddc <lfs_dir_getgstate>
 8007708:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err) {
 800770a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800770c:	2b00      	cmp	r3, #0
 800770e:	d14e      	bne.n	80077ae <lfs_mount_+0x41a>
    while (!lfs_pair_isnull(dir.tail)) {
 8007710:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007714:	3318      	adds	r3, #24
 8007716:	4618      	mov	r0, r3
 8007718:	f7fa fcb1 	bl	800207e <lfs_pair_isnull>
 800771c:	4603      	mov	r3, r0
 800771e:	f083 0301 	eor.w	r3, r3, #1
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	f47f ae59 	bne.w	80073dc <lfs_mount_+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	3330      	adds	r3, #48	@ 0x30
 800772e:	4618      	mov	r0, r3
 8007730:	f7fa fe0c 	bl	800234c <lfs_gstate_iszero>
 8007734:	4603      	mov	r3, r0
 8007736:	f083 0301 	eor.w	r3, r3, #1
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b00      	cmp	r3, #0
 800773e:	d010      	beq.n	8007762 <lfs_mount_+0x3ce>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800774c:	481c      	ldr	r0, [pc, #112]	@ (80077c0 <lfs_mount_+0x42c>)
 800774e:	9002      	str	r0, [sp, #8]
 8007750:	9201      	str	r2, [sp, #4]
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	460b      	mov	r3, r1
 8007756:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 800775a:	491a      	ldr	r1, [pc, #104]	@ (80077c4 <lfs_mount_+0x430>)
 800775c:	481c      	ldr	r0, [pc, #112]	@ (80077d0 <lfs_mount_+0x43c>)
 800775e:	f001 f957 	bl	8008a10 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007766:	4618      	mov	r0, r3
 8007768:	f7fa fd2f 	bl	80021ca <lfs_tag_isvalid>
 800776c:	4603      	mov	r3, r0
 800776e:	f083 0301 	eor.w	r3, r3, #1
 8007772:	b2db      	uxtb	r3, r3
 8007774:	461a      	mov	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800777a:	441a      	add	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	333c      	adds	r3, #60	@ 0x3c
 8007786:	3230      	adds	r2, #48	@ 0x30
 8007788:	ca07      	ldmia	r2, {r0, r1, r2}
 800778a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007796:	fbb3 f1f2 	udiv	r1, r3, r2
 800779a:	fb01 f202 	mul.w	r2, r1, r2
 800779e:	1a9a      	subs	r2, r3, r2
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7fa fff0 	bl	800278a <lfs_alloc_drop>

    return 0;
 80077aa:	2300      	movs	r3, #0
 80077ac:	e004      	b.n	80077b8 <lfs_mount_+0x424>
            goto cleanup;
 80077ae:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f80f 	bl	80077d4 <lfs_unmount_>
    return err;
 80077b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3774      	adds	r7, #116	@ 0x74
 80077bc:	46bd      	mov	sp, r7
 80077be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077c0:	08009908 	.word	0x08009908
 80077c4:	080097f8 	.word	0x080097f8
 80077c8:	0800a0f8 	.word	0x0800a0f8
 80077cc:	0800a12c 	.word	0x0800a12c
 80077d0:	0800a15c 	.word	0x0800a15c

080077d4 <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7ff fcff 	bl	80071e0 <lfs_deinit>
 80077e2:	4603      	mov	r3, r0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 80077ec:	b590      	push	{r4, r7, lr}
 80077ee:	b0a1      	sub	sp, #132	@ 0x84
 80077f0:	af04      	add	r7, sp, #16
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
 80077f8:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 80077fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077fe:	2220      	movs	r2, #32
 8007800:	2100      	movs	r1, #0
 8007802:	4618      	mov	r0, r3
 8007804:	f001 f926 	bl	8008a54 <memset>
 8007808:	2301      	movs	r3, #1
 800780a:	643b      	str	r3, [r7, #64]	@ 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800780c:	4a9a      	ldr	r2, [pc, #616]	@ (8007a78 <lfs_fs_traverse_+0x28c>)
 800780e:	f107 031c 	add.w	r3, r7, #28
 8007812:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007816:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800781a:	2301      	movs	r3, #1
 800781c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    lfs_size_t tortoise_period = 1;
 800781e:	2301      	movs	r3, #1
 8007820:	66bb      	str	r3, [r7, #104]	@ 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 8007822:	e0c0      	b.n	80079a6 <lfs_fs_traverse_+0x1ba>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8007824:	f107 021c 	add.w	r2, r7, #28
 8007828:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800782c:	3318      	adds	r3, #24
 800782e:	4611      	mov	r1, r2
 8007830:	4618      	mov	r0, r3
 8007832:	f7fa fc69 	bl	8002108 <lfs_pair_issync>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d009      	beq.n	8007850 <lfs_fs_traverse_+0x64>
            LFS_WARN("Cycle detected in tail list");
 800783c:	4b8f      	ldr	r3, [pc, #572]	@ (8007a7c <lfs_fs_traverse_+0x290>)
 800783e:	f241 2222 	movw	r2, #4642	@ 0x1222
 8007842:	498f      	ldr	r1, [pc, #572]	@ (8007a80 <lfs_fs_traverse_+0x294>)
 8007844:	488f      	ldr	r0, [pc, #572]	@ (8007a84 <lfs_fs_traverse_+0x298>)
 8007846:	f001 f8e3 	bl	8008a10 <iprintf>
            return LFS_ERR_CORRUPT;
 800784a:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800784e:	e10f      	b.n	8007a70 <lfs_fs_traverse_+0x284>
        }
        if (tortoise_i == tortoise_period) {
 8007850:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007852:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007854:	429a      	cmp	r2, r3
 8007856:	d108      	bne.n	800786a <lfs_fs_traverse_+0x7e>
            tortoise[0] = dir.tail[0];
 8007858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800785a:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 800785c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800785e:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8007860:	2300      	movs	r3, #0
 8007862:	66fb      	str	r3, [r7, #108]	@ 0x6c
            tortoise_period *= 2;
 8007864:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007866:	005b      	lsls	r3, r3, #1
 8007868:	66bb      	str	r3, [r7, #104]	@ 0x68
        }
        tortoise_i += 1;
 800786a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800786c:	3301      	adds	r3, #1
 800786e:	66fb      	str	r3, [r7, #108]	@ 0x6c

        for (int i = 0; i < 2; i++) {
 8007870:	2300      	movs	r3, #0
 8007872:	667b      	str	r3, [r7, #100]	@ 0x64
 8007874:	e013      	b.n	800789e <lfs_fs_traverse_+0xb2>
            int err = cb(data, dir.tail[i]);
 8007876:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007878:	3306      	adds	r3, #6
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	3370      	adds	r3, #112	@ 0x70
 800787e:	443b      	add	r3, r7
 8007880:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	4611      	mov	r1, r2
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	4798      	blx	r3
 800788c:	6478      	str	r0, [r7, #68]	@ 0x44
            if (err) {
 800788e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <lfs_fs_traverse_+0xac>
                return err;
 8007894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007896:	e0eb      	b.n	8007a70 <lfs_fs_traverse_+0x284>
        for (int i = 0; i < 2; i++) {
 8007898:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800789a:	3301      	adds	r3, #1
 800789c:	667b      	str	r3, [r7, #100]	@ 0x64
 800789e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	dde8      	ble.n	8007876 <lfs_fs_traverse_+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 80078a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078a8:	f103 0218 	add.w	r2, r3, #24
 80078ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078b0:	4619      	mov	r1, r3
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f7fc fa76 	bl	8003da4 <lfs_dir_fetch>
 80078b8:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (err) {
 80078ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <lfs_fs_traverse_+0xd8>
            return err;
 80078c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078c2:	e0d5      	b.n	8007a70 <lfs_fs_traverse_+0x284>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 80078c4:	2300      	movs	r3, #0
 80078c6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80078ca:	e067      	b.n	800799c <lfs_fs_traverse_+0x1b0>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 80078cc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80078d0:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80078d2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80078d6:	f043 0308 	orr.w	r3, r3, #8
 80078da:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80078de:	f107 0214 	add.w	r2, r7, #20
 80078e2:	9200      	str	r2, [sp, #0]
 80078e4:	4a68      	ldr	r2, [pc, #416]	@ (8007a88 <lfs_fs_traverse_+0x29c>)
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f7fb f956 	bl	8002b98 <lfs_dir_get>
 80078ec:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (tag < 0) {
 80078ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	da05      	bge.n	8007900 <lfs_fs_traverse_+0x114>
                if (tag == LFS_ERR_NOENT) {
 80078f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078f6:	f113 0f02 	cmn.w	r3, #2
 80078fa:	d049      	beq.n	8007990 <lfs_fs_traverse_+0x1a4>
                    continue;
                }
                return tag;
 80078fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078fe:	e0b7      	b.n	8007a70 <lfs_fs_traverse_+0x284>
            }
            lfs_ctz_fromle32(&ctz);
 8007900:	f107 0314 	add.w	r3, r7, #20
 8007904:	4618      	mov	r0, r3
 8007906:	f7fa fe17 	bl	8002538 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800790a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800790c:	4618      	mov	r0, r3
 800790e:	f7fa fc9d 	bl	800224c <lfs_tag_type3>
 8007912:	4603      	mov	r3, r0
 8007914:	461a      	mov	r2, r3
 8007916:	f240 2302 	movw	r3, #514	@ 0x202
 800791a:	429a      	cmp	r2, r3
 800791c:	d113      	bne.n	8007946 <lfs_fs_traverse_+0x15a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 800791e:	68f9      	ldr	r1, [r7, #12]
 8007920:	6978      	ldr	r0, [r7, #20]
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	9202      	str	r2, [sp, #8]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	9201      	str	r2, [sp, #4]
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	4603      	mov	r3, r0
 8007930:	460a      	mov	r2, r1
 8007932:	2100      	movs	r1, #0
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f7fe f9a9 	bl	8005c8c <lfs_ctz_traverse>
 800793a:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 800793c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800793e:	2b00      	cmp	r3, #0
 8007940:	d027      	beq.n	8007992 <lfs_fs_traverse_+0x1a6>
                    return err;
 8007942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007944:	e094      	b.n	8007a70 <lfs_fs_traverse_+0x284>
                }
            } else if (includeorphans &&
 8007946:	78fb      	ldrb	r3, [r7, #3]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d022      	beq.n	8007992 <lfs_fs_traverse_+0x1a6>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 800794c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800794e:	4618      	mov	r0, r3
 8007950:	f7fa fc7c 	bl	800224c <lfs_tag_type3>
 8007954:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8007956:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800795a:	d11a      	bne.n	8007992 <lfs_fs_traverse_+0x1a6>
                for (int i = 0; i < 2; i++) {
 800795c:	2300      	movs	r3, #0
 800795e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007960:	e012      	b.n	8007988 <lfs_fs_traverse_+0x19c>
                    err = cb(data, (&ctz.head)[i]);
 8007962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	f107 0214 	add.w	r2, r7, #20
 800796a:	4413      	add	r3, r2
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	4611      	mov	r1, r2
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	4798      	blx	r3
 8007976:	64f8      	str	r0, [r7, #76]	@ 0x4c
                    if (err) {
 8007978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <lfs_fs_traverse_+0x196>
                        return err;
 800797e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007980:	e076      	b.n	8007a70 <lfs_fs_traverse_+0x284>
                for (int i = 0; i < 2; i++) {
 8007982:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007984:	3301      	adds	r3, #1
 8007986:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007988:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800798a:	2b01      	cmp	r3, #1
 800798c:	dde9      	ble.n	8007962 <lfs_fs_traverse_+0x176>
 800798e:	e000      	b.n	8007992 <lfs_fs_traverse_+0x1a6>
                    continue;
 8007990:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8007992:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007996:	3301      	adds	r3, #1
 8007998:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800799c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800799e:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d392      	bcc.n	80078cc <lfs_fs_traverse_+0xe0>
    while (!lfs_pair_isnull(dir.tail)) {
 80079a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079aa:	3318      	adds	r3, #24
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7fa fb66 	bl	800207e <lfs_pair_isnull>
 80079b2:	4603      	mov	r3, r0
 80079b4:	f083 0301 	eor.w	r3, r3, #1
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f47f af32 	bne.w	8007824 <lfs_fs_traverse_+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80079c6:	e04f      	b.n	8007a68 <lfs_fs_traverse_+0x27c>
        if (f->type != LFS_TYPE_REG) {
 80079c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079ca:	799b      	ldrb	r3, [r3, #6]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d147      	bne.n	8007a60 <lfs_fs_traverse_+0x274>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 80079d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d01d      	beq.n	8007a18 <lfs_fs_traverse_+0x22c>
 80079dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d117      	bne.n	8007a18 <lfs_fs_traverse_+0x22c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80079e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079ea:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079f2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80079f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	9202      	str	r2, [sp, #8]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	9201      	str	r2, [sp, #4]
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	4623      	mov	r3, r4
 8007a04:	4602      	mov	r2, r0
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f7fe f940 	bl	8005c8c <lfs_ctz_traverse>
 8007a0c:	6578      	str	r0, [r7, #84]	@ 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8007a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <lfs_fs_traverse_+0x22c>
                return err;
 8007a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a16:	e02b      	b.n	8007a70 <lfs_fs_traverse_+0x284>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8007a18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d01e      	beq.n	8007a62 <lfs_fs_traverse_+0x276>
 8007a24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d118      	bne.n	8007a62 <lfs_fs_traverse_+0x276>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8007a30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a32:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a3a:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8007a3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	9202      	str	r2, [sp, #8]
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	9201      	str	r2, [sp, #4]
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	4623      	mov	r3, r4
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f7fe f91c 	bl	8005c8c <lfs_ctz_traverse>
 8007a54:	6538      	str	r0, [r7, #80]	@ 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 8007a56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d002      	beq.n	8007a62 <lfs_fs_traverse_+0x276>
                return err;
 8007a5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a5e:	e007      	b.n	8007a70 <lfs_fs_traverse_+0x284>
            continue;
 8007a60:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8007a62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1ac      	bne.n	80079c8 <lfs_fs_traverse_+0x1dc>
            }
        }
    }
#endif

    return 0;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3774      	adds	r7, #116	@ 0x74
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd90      	pop	{r4, r7, pc}
 8007a78:	0800994c 	.word	0x0800994c
 8007a7c:	08009908 	.word	0x08009908
 8007a80:	080097f8 	.word	0x080097f8
 8007a84:	08009fb8 	.word	0x08009fb8
 8007a88:	700ffc00 	.word	0x700ffc00

08007a8c <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b08a      	sub	sp, #40	@ 0x28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8007aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8007b5c <lfs_fs_pred+0xd0>)
 8007aa6:	f107 0314 	add.w	r3, r7, #20
 8007aaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007aae:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t tortoise_period = 1;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8007aba:	e03e      	b.n	8007b3a <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	3318      	adds	r3, #24
 8007ac0:	f107 0214 	add.w	r2, r7, #20
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fa fb1e 	bl	8002108 <lfs_pair_issync>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d009      	beq.n	8007ae6 <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8007ad2:	4b23      	ldr	r3, [pc, #140]	@ (8007b60 <lfs_fs_pred+0xd4>)
 8007ad4:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 8007ad8:	4922      	ldr	r1, [pc, #136]	@ (8007b64 <lfs_fs_pred+0xd8>)
 8007ada:	4823      	ldr	r0, [pc, #140]	@ (8007b68 <lfs_fs_pred+0xdc>)
 8007adc:	f000 ff98 	bl	8008a10 <iprintf>
            return LFS_ERR_CORRUPT;
 8007ae0:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8007ae4:	e036      	b.n	8007b54 <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 8007ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d10a      	bne.n	8007b04 <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	69db      	ldr	r3, [r3, #28]
 8007af8:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8007afa:	2300      	movs	r3, #0
 8007afc:	627b      	str	r3, [r7, #36]	@ 0x24
            tortoise_period *= 2;
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 8007b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b06:	3301      	adds	r3, #1
 8007b08:	627b      	str	r3, [r7, #36]	@ 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3318      	adds	r3, #24
 8007b0e:	68b9      	ldr	r1, [r7, #8]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7fa facf 	bl	80020b4 <lfs_pair_cmp>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <lfs_fs_pred+0x94>
            return 0;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	e019      	b.n	8007b54 <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3318      	adds	r3, #24
 8007b24:	461a      	mov	r2, r3
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f7fc f93b 	bl	8003da4 <lfs_dir_fetch>
 8007b2e:	61f8      	str	r0, [r7, #28]
        if (err) {
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <lfs_fs_pred+0xae>
            return err;
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	e00c      	b.n	8007b54 <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	3318      	adds	r3, #24
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fa fa9d 	bl	800207e <lfs_pair_isnull>
 8007b44:	4603      	mov	r3, r0
 8007b46:	f083 0301 	eor.w	r3, r3, #1
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1b5      	bne.n	8007abc <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8007b50:	f06f 0301 	mvn.w	r3, #1
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3728      	adds	r7, #40	@ 0x28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	0800994c 	.word	0x0800994c
 8007b60:	08009908 	.word	0x08009908
 8007b64:	080097f8 	.word	0x080097f8
 8007b68:	08009fb8 	.word	0x08009fb8

08007b6c <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8007b6c:	b5b0      	push	{r4, r5, r7, lr}
 8007b6e:	b08e      	sub	sp, #56	@ 0x38
 8007b70:	af04      	add	r7, sp, #16
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8007b8c:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b92:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	69fa      	ldr	r2, [r7, #28]
 8007b9a:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8007b9c:	2108      	movs	r1, #8
 8007b9e:	9103      	str	r1, [sp, #12]
 8007ba0:	f107 0110 	add.w	r1, r7, #16
 8007ba4:	9102      	str	r1, [sp, #8]
 8007ba6:	9201      	str	r2, [sp, #4]
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	462b      	mov	r3, r5
 8007bac:	4622      	mov	r2, r4
 8007bae:	4601      	mov	r1, r0
 8007bb0:	6a38      	ldr	r0, [r7, #32]
 8007bb2:	f7f9 fedd 	bl	8001970 <lfs_bd_read>
 8007bb6:	61b8      	str	r0, [r7, #24]
    if (err) {
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <lfs_fs_parent_match+0x56>
        return err;
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	e012      	b.n	8007be8 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8007bc2:	f107 0310 	add.w	r3, r7, #16
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fa facb 	bl	8002162 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bce:	1d1a      	adds	r2, r3, #4
 8007bd0:	f107 0310 	add.w	r3, r7, #16
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fa fa6c 	bl	80020b4 <lfs_pair_cmp>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	bf14      	ite	ne
 8007be2:	2301      	movne	r3, #1
 8007be4:	2300      	moveq	r3, #0
 8007be6:	b2db      	uxtb	r3, r3
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3728      	adds	r7, #40	@ 0x28
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bdb0      	pop	{r4, r5, r7, pc}

08007bf0 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b090      	sub	sp, #64	@ 0x40
 8007bf4:	af04      	add	r7, sp, #16
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8007c08:	4a33      	ldr	r2, [pc, #204]	@ (8007cd8 <lfs_fs_parent+0xe8>)
 8007c0a:	f107 031c 	add.w	r3, r7, #28
 8007c0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c12:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8007c16:	2301      	movs	r3, #1
 8007c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t tortoise_period = 1;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 8007c1e:	e04a      	b.n	8007cb6 <lfs_fs_parent+0xc6>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	3318      	adds	r3, #24
 8007c24:	f107 021c 	add.w	r2, r7, #28
 8007c28:	4611      	mov	r1, r2
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fa fa6c 	bl	8002108 <lfs_pair_issync>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d009      	beq.n	8007c4a <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8007c36:	4b29      	ldr	r3, [pc, #164]	@ (8007cdc <lfs_fs_parent+0xec>)
 8007c38:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 8007c3c:	4928      	ldr	r1, [pc, #160]	@ (8007ce0 <lfs_fs_parent+0xf0>)
 8007c3e:	4829      	ldr	r0, [pc, #164]	@ (8007ce4 <lfs_fs_parent+0xf4>)
 8007c40:	f000 fee6 	bl	8008a10 <iprintf>
            return LFS_ERR_CORRUPT;
 8007c44:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8007c48:	e042      	b.n	8007cd0 <lfs_fs_parent+0xe0>
        }
        if (tortoise_i == tortoise_period) {
 8007c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d10a      	bne.n	8007c68 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	69db      	ldr	r3, [r3, #28]
 8007c5c:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
            tortoise_period *= 2;
 8007c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        tortoise_i += 1;
 8007c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8007c7c:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	3304      	adds	r3, #4
 8007c82:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8007c84:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8007c86:	f107 0310 	add.w	r3, r7, #16
 8007c8a:	9303      	str	r3, [sp, #12]
 8007c8c:	4b16      	ldr	r3, [pc, #88]	@ (8007ce8 <lfs_fs_parent+0xf8>)
 8007c8e:	9302      	str	r3, [sp, #8]
 8007c90:	2300      	movs	r3, #0
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	4b15      	ldr	r3, [pc, #84]	@ (8007cec <lfs_fs_parent+0xfc>)
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	4b15      	ldr	r3, [pc, #84]	@ (8007cf0 <lfs_fs_parent+0x100>)
 8007c9a:	6879      	ldr	r1, [r7, #4]
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f7fb fcb1 	bl	8003604 <lfs_dir_fetchmatch>
 8007ca2:	6278      	str	r0, [r7, #36]	@ 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d005      	beq.n	8007cb6 <lfs_fs_parent+0xc6>
 8007caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cac:	f113 0f02 	cmn.w	r3, #2
 8007cb0:	d001      	beq.n	8007cb6 <lfs_fs_parent+0xc6>
            return tag;
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb4:	e00c      	b.n	8007cd0 <lfs_fs_parent+0xe0>
    while (!lfs_pair_isnull(parent->tail)) {
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	3318      	adds	r3, #24
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fa f9df 	bl	800207e <lfs_pair_isnull>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	f083 0301 	eor.w	r3, r3, #1
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1a9      	bne.n	8007c20 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8007ccc:	f06f 0301 	mvn.w	r3, #1
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3730      	adds	r7, #48	@ 0x30
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	0800994c 	.word	0x0800994c
 8007cdc:	08009908 	.word	0x08009908
 8007ce0:	080097f8 	.word	0x080097f8
 8007ce4:	08009fb8 	.word	0x08009fb8
 8007ce8:	08007b6d 	.word	0x08007b6d
 8007cec:	20000008 	.word	0x20000008
 8007cf0:	7ff003ff 	.word	0x7ff003ff

08007cf4 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d04:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 8007d08:	78fb      	ldrb	r3, [r7, #3]
 8007d0a:	025b      	lsls	r3, r3, #9
 8007d0c:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007d12:	bf00      	nop
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
	...

08007d20 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8007d20:	b590      	push	{r4, r7, lr}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fa fac5 	bl	80022c0 <lfs_tag_size>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10a      	bne.n	8007d52 <lfs_fs_preporphans+0x32>
 8007d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	da06      	bge.n	8007d52 <lfs_fs_preporphans+0x32>
 8007d44:	4b1a      	ldr	r3, [pc, #104]	@ (8007db0 <lfs_fs_preporphans+0x90>)
 8007d46:	4a1b      	ldr	r2, [pc, #108]	@ (8007db4 <lfs_fs_preporphans+0x94>)
 8007d48:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 8007d4c:	481a      	ldr	r0, [pc, #104]	@ (8007db8 <lfs_fs_preporphans+0x98>)
 8007d4e:	f000 fcaf 	bl	80086b0 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fa fab2 	bl	80022c0 <lfs_tag_size>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8007d62:	d90a      	bls.n	8007d7a <lfs_fs_preporphans+0x5a>
 8007d64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	dd06      	ble.n	8007d7a <lfs_fs_preporphans+0x5a>
 8007d6c:	4b13      	ldr	r3, [pc, #76]	@ (8007dbc <lfs_fs_preporphans+0x9c>)
 8007d6e:	4a11      	ldr	r2, [pc, #68]	@ (8007db4 <lfs_fs_preporphans+0x94>)
 8007d70:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 8007d74:	4810      	ldr	r0, [pc, #64]	@ (8007db8 <lfs_fs_preporphans+0x98>)
 8007d76:	f000 fc9b 	bl	80086b0 <__assert_func>
    lfs->gstate.tag += orphans;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d82:	441a      	add	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d8c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	3330      	adds	r3, #48	@ 0x30
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7fa faf6 	bl	8002386 <lfs_gstate_hasorphans>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8007d9e:	ea44 0203 	orr.w	r2, r4, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd90      	pop	{r4, r7, pc}
 8007db0:	0800a194 	.word	0x0800a194
 8007db4:	0800a534 	.word	0x0800a534
 8007db8:	080097f8 	.word	0x080097f8
 8007dbc:	0800a1cc 	.word	0x0800a1cc

08007dc0 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	607a      	str	r2, [r7, #4]
 8007dcc:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dd2:	4a17      	ldr	r2, [pc, #92]	@ (8007e30 <lfs_fs_prepmove+0x70>)
 8007dd4:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8007dd6:	897b      	ldrh	r3, [r7, #10]
 8007dd8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8007ddc:	428b      	cmp	r3, r1
 8007dde:	d006      	beq.n	8007dee <lfs_fs_prepmove+0x2e>
 8007de0:	897b      	ldrh	r3, [r7, #10]
 8007de2:	029b      	lsls	r3, r3, #10
 8007de4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8007de8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8007dec:	e000      	b.n	8007df0 <lfs_fs_prepmove+0x30>
 8007dee:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8007df0:	431a      	orrs	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8007df6:	897b      	ldrh	r3, [r7, #10]
 8007df8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d002      	beq.n	8007e06 <lfs_fs_prepmove+0x46>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	e000      	b.n	8007e08 <lfs_fs_prepmove+0x48>
 8007e06:	2300      	movs	r3, #0
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8007e0c:	897b      	ldrh	r3, [r7, #10]
 8007e0e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d003      	beq.n	8007e1e <lfs_fs_prepmove+0x5e>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3304      	adds	r3, #4
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	e000      	b.n	8007e20 <lfs_fs_prepmove+0x60>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8007e24:	bf00      	nop
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	800003ff 	.word	0x800003ff

08007e34 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b098      	sub	sp, #96	@ 0x60
 8007e38:	af02      	add	r7, sp, #8
 8007e3a:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3330      	adds	r3, #48	@ 0x30
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fa fad5 	bl	80023f0 <lfs_gstate_needssuperblock>
 8007e46:	4603      	mov	r3, r0
 8007e48:	f083 0301 	eor.w	r3, r3, #1
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <lfs_fs_desuperblock+0x22>
        return 0;
 8007e52:	2300      	movs	r3, #0
 8007e54:	e04e      	b.n	8007ef4 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a1a      	ldr	r2, [r3, #32]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e5e:	4927      	ldr	r1, [pc, #156]	@ (8007efc <lfs_fs_desuperblock+0xc8>)
 8007e60:	9101      	str	r1, [sp, #4]
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	4613      	mov	r3, r2
 8007e66:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 8007e6a:	4925      	ldr	r1, [pc, #148]	@ (8007f00 <lfs_fs_desuperblock+0xcc>)
 8007e6c:	4825      	ldr	r0, [pc, #148]	@ (8007f04 <lfs_fs_desuperblock+0xd0>)
 8007e6e:	f000 fdcf 	bl	8008a10 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f103 0220 	add.w	r2, r3, #32
 8007e78:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7fb ff90 	bl	8003da4 <lfs_dir_fetch>
 8007e84:	6578      	str	r0, [r7, #84]	@ 0x54
    if (err) {
 8007e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <lfs_fs_desuperblock+0x5c>
        return err;
 8007e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e8e:	e031      	b.n	8007ef4 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7fa fc43 	bl	800271c <lfs_fs_disk_version>
 8007e96:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8007e98:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e9e:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 8007ea0:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 8007ea6:	627b      	str	r3, [r7, #36]	@ 0x24
        .name_max    = lfs->name_max,
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    lfs_superblock_t superblock = {
 8007eac:	62bb      	str	r3, [r7, #40]	@ 0x28
        .file_max    = lfs->file_max,
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    lfs_superblock_t superblock = {
 8007eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .attr_max    = lfs->attr_max,
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    lfs_superblock_t superblock = {
 8007eb8:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    lfs_superblock_tole32(&superblock);
 8007eba:	f107 031c 	add.w	r3, r7, #28
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fa fba2 	bl	8002608 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8007ec4:	4b10      	ldr	r3, [pc, #64]	@ (8007f08 <lfs_fs_desuperblock+0xd4>)
 8007ec6:	617b      	str	r3, [r7, #20]
 8007ec8:	f107 031c 	add.w	r3, r7, #28
 8007ecc:	61bb      	str	r3, [r7, #24]
 8007ece:	f107 0214 	add.w	r2, r7, #20
 8007ed2:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7fd fd05 	bl	80058e8 <lfs_dir_commit>
 8007ede:	6578      	str	r0, [r7, #84]	@ 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8007ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <lfs_fs_desuperblock+0xb6>
        return err;
 8007ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ee8:	e004      	b.n	8007ef4 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8007eea:	2100      	movs	r1, #0
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f7ff ff01 	bl	8007cf4 <lfs_fs_prepsuperblock>
    return 0;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3758      	adds	r7, #88	@ 0x58
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	08009908 	.word	0x08009908
 8007f00:	080097f8 	.word	0x080097f8
 8007f04:	0800a204 	.word	0x0800a204
 8007f08:	20100018 	.word	0x20100018

08007f0c <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8007f0c:	b5b0      	push	{r4, r5, r7, lr}
 8007f0e:	b094      	sub	sp, #80	@ 0x50
 8007f10:	af04      	add	r7, sp, #16
 8007f12:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	333c      	adds	r3, #60	@ 0x3c
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7fa fa56 	bl	80023ca <lfs_gstate_hasmove>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	f083 0301 	eor.w	r3, r3, #1
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <lfs_fs_demove+0x22>
        return 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	e05b      	b.n	8007fe6 <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fa f9b0 	bl	80022a0 <lfs_tag_id>
 8007f40:	4603      	mov	r3, r0
 8007f42:	461a      	mov	r2, r3
 8007f44:	4b2a      	ldr	r3, [pc, #168]	@ (8007ff0 <lfs_fs_demove+0xe4>)
 8007f46:	9302      	str	r3, [sp, #8]
 8007f48:	9201      	str	r2, [sp, #4]
 8007f4a:	9400      	str	r4, [sp, #0]
 8007f4c:	462b      	mov	r3, r5
 8007f4e:	f241 3224 	movw	r2, #4900	@ 0x1324
 8007f52:	4928      	ldr	r1, [pc, #160]	@ (8007ff4 <lfs_fs_demove+0xe8>)
 8007f54:	4828      	ldr	r0, [pc, #160]	@ (8007ff8 <lfs_fs_demove+0xec>)
 8007f56:	f000 fd5b 	bl	8008a10 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fa f974 	bl	800224c <lfs_tag_type3>
 8007f64:	4603      	mov	r3, r0
 8007f66:	461a      	mov	r2, r3
 8007f68:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d006      	beq.n	8007f7e <lfs_fs_demove+0x72>
 8007f70:	4b22      	ldr	r3, [pc, #136]	@ (8007ffc <lfs_fs_demove+0xf0>)
 8007f72:	4a23      	ldr	r2, [pc, #140]	@ (8008000 <lfs_fs_demove+0xf4>)
 8007f74:	f241 312b 	movw	r1, #4907	@ 0x132b
 8007f78:	481e      	ldr	r0, [pc, #120]	@ (8007ff4 <lfs_fs_demove+0xe8>)
 8007f7a:	f000 fb99 	bl	80086b0 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8007f84:	f107 0318 	add.w	r3, r7, #24
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7fb ff0a 	bl	8003da4 <lfs_dir_fetch>
 8007f90:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 8007f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <lfs_fs_demove+0x90>
        return err;
 8007f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f9a:	e024      	b.n	8007fe6 <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fa f97d 	bl	80022a0 <lfs_tag_id>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8007faa:	2200      	movs	r2, #0
 8007fac:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f7ff ff05 	bl	8007dc0 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8007fb6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007fb8:	029b      	lsls	r3, r3, #10
 8007fba:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8007fbe:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8007fc2:	613b      	str	r3, [r7, #16]
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	617b      	str	r3, [r7, #20]
 8007fc8:	f107 0210 	add.w	r2, r7, #16
 8007fcc:	f107 0118 	add.w	r1, r7, #24
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7fd fc88 	bl	80058e8 <lfs_dir_commit>
 8007fd8:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8007fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <lfs_fs_demove+0xd8>
        return err;
 8007fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fe2:	e000      	b.n	8007fe6 <lfs_fs_demove+0xda>
    }

    return 0;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3740      	adds	r7, #64	@ 0x40
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bdb0      	pop	{r4, r5, r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	08009908 	.word	0x08009908
 8007ff4:	080097f8 	.word	0x080097f8
 8007ff8:	0800a238 	.word	0x0800a238
 8007ffc:	0800a26c 	.word	0x0800a26c
 8008000:	0800a548 	.word	0x0800a548

08008004 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8008004:	b5b0      	push	{r4, r5, r7, lr}
 8008006:	b0b2      	sub	sp, #200	@ 0xc8
 8008008:	af04      	add	r7, sp, #16
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	3330      	adds	r3, #48	@ 0x30
 8008014:	4618      	mov	r0, r3
 8008016:	f7fa f9b6 	bl	8002386 <lfs_gstate_hasorphans>
 800801a:	4603      	mov	r3, r0
 800801c:	f083 0301 	eor.w	r3, r3, #1
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <lfs_fs_deorphan+0x26>
        return 0;
 8008026:	2300      	movs	r3, #0
 8008028:	e188      	b.n	800833c <lfs_fs_deorphan+0x338>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 800802a:	2300      	movs	r3, #0
 800802c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 8008030:	e171      	b.n	8008316 <lfs_fs_deorphan+0x312>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8008032:	f107 0308 	add.w	r3, r7, #8
 8008036:	2220      	movs	r2, #32
 8008038:	2100      	movs	r1, #0
 800803a:	4618      	mov	r0, r3
 800803c:	f000 fd0a 	bl	8008a54 <memset>
 8008040:	2301      	movs	r3, #1
 8008042:	77fb      	strb	r3, [r7, #31]
 8008044:	2301      	movs	r3, #1
 8008046:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 8008048:	2300      	movs	r3, #0
 800804a:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 800804e:	e14a      	b.n	80082e6 <lfs_fs_deorphan+0x2e2>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8008050:	f107 0308 	add.w	r3, r7, #8
 8008054:	f103 0218 	add.w	r2, r3, #24
 8008058:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800805c:	4619      	mov	r1, r3
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f7fb fea0 	bl	8003da4 <lfs_dir_fetch>
 8008064:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
            if (err) {
 8008068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <lfs_fs_deorphan+0x72>
                return err;
 8008070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008074:	e162      	b.n	800833c <lfs_fs_deorphan+0x338>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8008076:	7ffb      	ldrb	r3, [r7, #31]
 8008078:	f083 0301 	eor.w	r3, r3, #1
 800807c:	b2db      	uxtb	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 8125 	beq.w	80082ce <lfs_fs_deorphan+0x2ca>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8008084:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8008088:	f107 0308 	add.w	r3, r7, #8
 800808c:	3318      	adds	r3, #24
 800808e:	4619      	mov	r1, r3
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f7ff fdad 	bl	8007bf0 <lfs_fs_parent>
 8008096:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 800809a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800809e:	2b00      	cmp	r3, #0
 80080a0:	da07      	bge.n	80080b2 <lfs_fs_deorphan+0xae>
 80080a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080a6:	f113 0f02 	cmn.w	r3, #2
 80080aa:	d002      	beq.n	80080b2 <lfs_fs_deorphan+0xae>
                    return tag;
 80080ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080b0:	e10c      	b.n	80082cc <lfs_fs_deorphan+0x2c8>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 80080b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f040 80ac 	bne.w	8008214 <lfs_fs_deorphan+0x210>
 80080bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080c0:	f113 0f02 	cmn.w	r3, #2
 80080c4:	f000 80a6 	beq.w	8008214 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 80080c8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80080cc:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80080d0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	4613      	mov	r3, r2
 80080d8:	4a9a      	ldr	r2, [pc, #616]	@ (8008344 <lfs_fs_deorphan+0x340>)
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7fa fd5c 	bl	8002b98 <lfs_dir_get>
 80080e0:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 80080e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	da02      	bge.n	80080f2 <lfs_fs_deorphan+0xee>
                        return state;
 80080ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                    return tag;
 80080f0:	e124      	b.n	800833c <lfs_fs_deorphan+0x338>
                    }
                    lfs_pair_fromle32(pair);
 80080f2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fa f833 	bl	8002162 <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 80080fc:	f107 0308 	add.w	r3, r7, #8
 8008100:	f103 0218 	add.w	r2, r3, #24
 8008104:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008108:	4611      	mov	r1, r2
 800810a:	4618      	mov	r0, r3
 800810c:	f7f9 fffc 	bl	8002108 <lfs_pair_issync>
 8008110:	4603      	mov	r3, r0
 8008112:	f083 0301 	eor.w	r3, r3, #1
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b00      	cmp	r3, #0
 800811a:	d07b      	beq.n	8008214 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 800811c:	6a38      	ldr	r0, [r7, #32]
 800811e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008120:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008124:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8008128:	4c87      	ldr	r4, [pc, #540]	@ (8008348 <lfs_fs_deorphan+0x344>)
 800812a:	9403      	str	r4, [sp, #12]
 800812c:	9102      	str	r1, [sp, #8]
 800812e:	9201      	str	r2, [sp, #4]
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	4603      	mov	r3, r0
 8008134:	f241 3271 	movw	r2, #4977	@ 0x1371
 8008138:	4984      	ldr	r1, [pc, #528]	@ (800834c <lfs_fs_deorphan+0x348>)
 800813a:	4885      	ldr	r0, [pc, #532]	@ (8008350 <lfs_fs_deorphan+0x34c>)
 800813c:	f000 fc68 	bl	8008a10 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8008140:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8008144:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3330      	adds	r3, #48	@ 0x30
 800814c:	f107 0208 	add.w	r2, r7, #8
 8008150:	4611      	mov	r1, r2
 8008152:	4618      	mov	r0, r3
 8008154:	f7fa f960 	bl	8002418 <lfs_gstate_hasmovehere>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d01c      	beq.n	8008198 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008162:	4618      	mov	r0, r3
 8008164:	f7fa f89c 	bl	80022a0 <lfs_tag_id>
 8008168:	4603      	mov	r3, r0
 800816a:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 800816e:	68b9      	ldr	r1, [r7, #8]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 8008176:	4874      	ldr	r0, [pc, #464]	@ (8008348 <lfs_fs_deorphan+0x344>)
 8008178:	9002      	str	r0, [sp, #8]
 800817a:	9201      	str	r2, [sp, #4]
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	460b      	mov	r3, r1
 8008180:	f241 327c 	movw	r2, #4988	@ 0x137c
 8008184:	4971      	ldr	r1, [pc, #452]	@ (800834c <lfs_fs_deorphan+0x348>)
 8008186:	4873      	ldr	r0, [pc, #460]	@ (8008354 <lfs_fs_deorphan+0x350>)
 8008188:	f000 fc42 	bl	8008a10 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800818c:	2200      	movs	r2, #0
 800818e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7ff fe14 	bl	8007dc0 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8008198:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800819c:	4618      	mov	r0, r3
 800819e:	f7f9 fffa 	bl	8002196 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80081a2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80081a6:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d007      	beq.n	80081be <lfs_fs_deorphan+0x1ba>
 80081ae:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80081b2:	029b      	lsls	r3, r3, #10
 80081b4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80081b8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80081bc:	e000      	b.n	80081c0 <lfs_fs_deorphan+0x1bc>
 80081be:	2300      	movs	r3, #0
 80081c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081c4:	2300      	movs	r3, #0
 80081c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80081ca:	4b63      	ldr	r3, [pc, #396]	@ (8008358 <lfs_fs_deorphan+0x354>)
 80081cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081d0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80081d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081d8:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80081dc:	f107 0108 	add.w	r1, r7, #8
 80081e0:	2302      	movs	r3, #2
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7fd f886 	bl	80052f4 <lfs_dir_orphaningcommit>
 80081e8:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 80081ec:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7f9 ffb6 	bl	8002162 <lfs_pair_fromle32>
                        if (state < 0) {
 80081f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	da02      	bge.n	8008204 <lfs_fs_deorphan+0x200>
                            return state;
 80081fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 8008202:	e063      	b.n	80082cc <lfs_fs_deorphan+0x2c8>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8008204:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008208:	2b03      	cmp	r3, #3
 800820a:	d16c      	bne.n	80082e6 <lfs_fs_deorphan+0x2e2>
                            moreorphans = true;
 800820c:	2301      	movs	r3, #1
 800820e:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8008212:	e068      	b.n	80082e6 <lfs_fs_deorphan+0x2e2>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 8008214:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008218:	2b01      	cmp	r3, #1
 800821a:	d158      	bne.n	80082ce <lfs_fs_deorphan+0x2ca>
 800821c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008220:	f113 0f02 	cmn.w	r3, #2
 8008224:	d153      	bne.n	80082ce <lfs_fs_deorphan+0x2ca>
 8008226:	78fb      	ldrb	r3, [r7, #3]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d050      	beq.n	80082ce <lfs_fs_deorphan+0x2ca>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 800822c:	6a3a      	ldr	r2, [r7, #32]
 800822e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008230:	4945      	ldr	r1, [pc, #276]	@ (8008348 <lfs_fs_deorphan+0x344>)
 8008232:	9101      	str	r1, [sp, #4]
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	4613      	mov	r3, r2
 8008238:	f241 329c 	movw	r2, #5020	@ 0x139c
 800823c:	4943      	ldr	r1, [pc, #268]	@ (800834c <lfs_fs_deorphan+0x348>)
 800823e:	4847      	ldr	r0, [pc, #284]	@ (800835c <lfs_fs_deorphan+0x358>)
 8008240:	f000 fbe6 	bl	8008a10 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800824a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800824e:	4619      	mov	r1, r3
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7fb fdc3 	bl	8003ddc <lfs_dir_getgstate>
 8008256:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                    if (err) {
 800825a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <lfs_fs_deorphan+0x264>
                        return err;
 8008262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008266:	e030      	b.n	80082ca <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8008268:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800826c:	3318      	adds	r3, #24
 800826e:	4618      	mov	r0, r3
 8008270:	f7f9 ff91 	bl	8002196 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8008274:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008278:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800827c:	051a      	lsls	r2, r3, #20
 800827e:	4b38      	ldr	r3, [pc, #224]	@ (8008360 <lfs_fs_deorphan+0x35c>)
 8008280:	4313      	orrs	r3, r2
 8008282:	673b      	str	r3, [r7, #112]	@ 0x70
 8008284:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008288:	3318      	adds	r3, #24
 800828a:	677b      	str	r3, [r7, #116]	@ 0x74
 800828c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8008290:	f107 0108 	add.w	r1, r7, #8
 8008294:	2301      	movs	r3, #1
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7fd f82c 	bl	80052f4 <lfs_dir_orphaningcommit>
 800829c:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 80082a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80082a4:	3318      	adds	r3, #24
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7f9 ff5b 	bl	8002162 <lfs_pair_fromle32>
                    if (state < 0) {
 80082ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	da02      	bge.n	80082ba <lfs_fs_deorphan+0x2b6>
                        return state;
 80082b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082b8:	e007      	b.n	80082ca <lfs_fs_deorphan+0x2c6>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 80082ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d110      	bne.n	80082e4 <lfs_fs_deorphan+0x2e0>
                        moreorphans = true;
 80082c2:	2301      	movs	r3, #1
 80082c4:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 80082c8:	e00d      	b.n	80082e6 <lfs_fs_deorphan+0x2e2>
                    return tag;
 80082ca:	e037      	b.n	800833c <lfs_fs_deorphan+0x338>
                return err;
 80082cc:	e036      	b.n	800833c <lfs_fs_deorphan+0x338>
                    // refetch tail
                    continue;
                }
            }

            pdir = dir;
 80082ce:	f107 0408 	add.w	r4, r7, #8
 80082d2:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 80082d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80082de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80082e2:	e000      	b.n	80082e6 <lfs_fs_deorphan+0x2e2>
                    continue;
 80082e4:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 80082e6:	f107 0308 	add.w	r3, r7, #8
 80082ea:	3318      	adds	r3, #24
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7f9 fec6 	bl	800207e <lfs_pair_isnull>
 80082f2:	4603      	mov	r3, r0
 80082f4:	f083 0301 	eor.w	r3, r3, #1
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f47f aea8 	bne.w	8008050 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 8008300:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <lfs_fs_deorphan+0x308>
 8008308:	2300      	movs	r3, #0
 800830a:	e002      	b.n	8008312 <lfs_fs_deorphan+0x30e>
 800830c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008310:	3301      	adds	r3, #1
 8008312:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 8008316:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800831a:	2b01      	cmp	r3, #1
 800831c:	f77f ae89 	ble.w	8008032 <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	3330      	adds	r3, #48	@ 0x30
 8008324:	4618      	mov	r0, r3
 8008326:	f7fa f841 	bl	80023ac <lfs_gstate_getorphans>
 800832a:	4603      	mov	r3, r0
 800832c:	425b      	negs	r3, r3
 800832e:	b2db      	uxtb	r3, r3
 8008330:	b25b      	sxtb	r3, r3
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7ff fcf3 	bl	8007d20 <lfs_fs_preporphans>
 800833a:	4603      	mov	r3, r0
}
 800833c:	4618      	mov	r0, r3
 800833e:	37b8      	adds	r7, #184	@ 0xb8
 8008340:	46bd      	mov	sp, r7
 8008342:	bdb0      	pop	{r4, r5, r7, pc}
 8008344:	7ffffc00 	.word	0x7ffffc00
 8008348:	08009908 	.word	0x08009908
 800834c:	080097f8 	.word	0x080097f8
 8008350:	0800a2a0 	.word	0x0800a2a0
 8008354:	0800a2e4 	.word	0x0800a2e4
 8008358:	600ffc08 	.word	0x600ffc08
 800835c:	0800a32c 	.word	0x0800a32c
 8008360:	000ffc08 	.word	0x000ffc08

08008364 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7ff fd61 	bl	8007e34 <lfs_fs_desuperblock>
 8008372:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <lfs_fs_forceconsistency+0x1a>
        return err;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	e013      	b.n	80083a6 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7ff fdc4 	bl	8007f0c <lfs_fs_demove>
 8008384:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <lfs_fs_forceconsistency+0x2c>
        return err;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	e00a      	b.n	80083a6 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 8008390:	2101      	movs	r1, #1
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7ff fe36 	bl	8008004 <lfs_fs_deorphan>
 8008398:	60f8      	str	r0, [r7, #12]
    if (err) {
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <lfs_fs_forceconsistency+0x40>
        return err;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	e000      	b.n	80083a6 <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 80083ae:	b480      	push	{r7}
 80083b0:	b085      	sub	sp, #20
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	60fb      	str	r3, [r7, #12]
    *size += 1;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	1c5a      	adds	r2, r3, #1
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	601a      	str	r2, [r3, #0]
    return 0;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 80083dc:	2300      	movs	r3, #0
 80083de:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 80083e0:	f107 0208 	add.w	r2, r7, #8
 80083e4:	2300      	movs	r3, #0
 80083e6:	4907      	ldr	r1, [pc, #28]	@ (8008404 <lfs_fs_size_+0x30>)
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff f9ff 	bl	80077ec <lfs_fs_traverse_>
 80083ee:	60f8      	str	r0, [r7, #12]
    if (err) {
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <lfs_fs_size_+0x26>
        return err;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	e000      	b.n	80083fc <lfs_fs_size_+0x28>
    }

    return size;
 80083fa:	68bb      	ldr	r3, [r7, #8]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	080083af 	.word	0x080083af

08008408 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8008412:	2300      	movs	r3, #0
 8008414:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d001      	beq.n	8008420 <lfs_format+0x18>
        return err;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	e005      	b.n	800842c <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7fe ff04 	bl	8007230 <lfs_format_>
 8008428:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800842a:	68fb      	ldr	r3, [r7, #12]
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800843e:	2300      	movs	r3, #0
 8008440:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <lfs_mount+0x18>
        return err;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	e005      	b.n	8008458 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7fe ffa0 	bl	8007394 <lfs_mount_>
 8008454:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8008456:	68fb      	ldr	r3, [r7, #12]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <lfs_unmount>:

int lfs_unmount(lfs_t *lfs) {
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8008468:	2300      	movs	r3, #0
 800846a:	60fb      	str	r3, [r7, #12]
    if (err) {
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <lfs_unmount+0x16>
        return err;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	e004      	b.n	8008480 <lfs_unmount+0x20>
    }
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);

    err = lfs_unmount_(lfs);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7ff f9ac 	bl	80077d4 <lfs_unmount_>
 800847c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_unmount -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800847e:	68fb      	ldr	r3, [r7, #12]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
 8008494:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008496:	2300      	movs	r3, #0
 8008498:	617b      	str	r3, [r7, #20]
    if (err) {
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <lfs_file_open+0x1c>
        return err;
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	e01a      	b.n	80084da <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a8:	68b9      	ldr	r1, [r7, #8]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fa f8e4 	bl	8002678 <lfs_mlist_isopen>
 80084b0:	4603      	mov	r3, r0
 80084b2:	f083 0301 	eor.w	r3, r3, #1
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d106      	bne.n	80084ca <lfs_file_open+0x42>
 80084bc:	4b09      	ldr	r3, [pc, #36]	@ (80084e4 <lfs_file_open+0x5c>)
 80084be:	4a0a      	ldr	r2, [pc, #40]	@ (80084e8 <lfs_file_open+0x60>)
 80084c0:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 80084c4:	4809      	ldr	r0, [pc, #36]	@ (80084ec <lfs_file_open+0x64>)
 80084c6:	f000 f8f3 	bl	80086b0 <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	68b9      	ldr	r1, [r7, #8]
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f7fd fe27 	bl	8006124 <lfs_file_open_>
 80084d6:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80084d8:	697b      	ldr	r3, [r7, #20]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3718      	adds	r7, #24
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	0800a37c 	.word	0x0800a37c
 80084e8:	0800a558 	.word	0x0800a558
 80084ec:	080097f8 	.word	0x080097f8

080084f0 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]
    if (err) {
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <lfs_file_close+0x18>
        return err;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	e015      	b.n	8008534 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	4618      	mov	r0, r3
 8008510:	f7fa f8b2 	bl	8002678 <lfs_mlist_isopen>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d106      	bne.n	8008528 <lfs_file_close+0x38>
 800851a:	4b08      	ldr	r3, [pc, #32]	@ (800853c <lfs_file_close+0x4c>)
 800851c:	4a08      	ldr	r2, [pc, #32]	@ (8008540 <lfs_file_close+0x50>)
 800851e:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 8008522:	4808      	ldr	r0, [pc, #32]	@ (8008544 <lfs_file_close+0x54>)
 8008524:	f000 f8c4 	bl	80086b0 <__assert_func>

    err = lfs_file_close_(lfs, file);
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7fd fe12 	bl	8006154 <lfs_file_close_>
 8008530:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8008532:	68fb      	ldr	r3, [r7, #12]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	0800a3b4 	.word	0x0800a3b4
 8008540:	0800a568 	.word	0x0800a568
 8008544:	080097f8 	.word	0x080097f8

08008548 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
 8008554:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008556:	2300      	movs	r3, #0
 8008558:	617b      	str	r3, [r7, #20]
    if (err) {
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <lfs_file_read+0x1c>
        return err;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	e017      	b.n	8008594 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008568:	68b9      	ldr	r1, [r7, #8]
 800856a:	4618      	mov	r0, r3
 800856c:	f7fa f884 	bl	8002678 <lfs_mlist_isopen>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d106      	bne.n	8008584 <lfs_file_read+0x3c>
 8008576:	4b09      	ldr	r3, [pc, #36]	@ (800859c <lfs_file_read+0x54>)
 8008578:	4a09      	ldr	r2, [pc, #36]	@ (80085a0 <lfs_file_read+0x58>)
 800857a:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 800857e:	4809      	ldr	r0, [pc, #36]	@ (80085a4 <lfs_file_read+0x5c>)
 8008580:	f000 f896 	bl	80086b0 <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f7fe f942 	bl	8006814 <lfs_file_read_>
 8008590:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8008592:	693b      	ldr	r3, [r7, #16]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3718      	adds	r7, #24
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	0800a3b4 	.word	0x0800a3b4
 80085a0:	0800a578 	.word	0x0800a578
 80085a4:	080097f8 	.word	0x080097f8

080085a8 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80085b6:	2300      	movs	r3, #0
 80085b8:	617b      	str	r3, [r7, #20]
    if (err) {
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <lfs_file_write+0x1c>
        return err;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	e017      	b.n	80085f4 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c8:	68b9      	ldr	r1, [r7, #8]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fa f854 	bl	8002678 <lfs_mlist_isopen>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d106      	bne.n	80085e4 <lfs_file_write+0x3c>
 80085d6:	4b09      	ldr	r3, [pc, #36]	@ (80085fc <lfs_file_write+0x54>)
 80085d8:	4a09      	ldr	r2, [pc, #36]	@ (8008600 <lfs_file_write+0x58>)
 80085da:	f641 0105 	movw	r1, #6149	@ 0x1805
 80085de:	4809      	ldr	r0, [pc, #36]	@ (8008604 <lfs_file_write+0x5c>)
 80085e0:	f000 f866 	bl	80086b0 <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	68b9      	ldr	r1, [r7, #8]
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f7fe fa58 	bl	8006aa0 <lfs_file_write_>
 80085f0:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 80085f2:	693b      	ldr	r3, [r7, #16]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	0800a3b4 	.word	0x0800a3b4
 8008600:	0800a588 	.word	0x0800a588
 8008604:	080097f8 	.word	0x080097f8

08008608 <lfs_file_rewind>:
    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}

int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008612:	2300      	movs	r3, #0
 8008614:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <lfs_file_rewind+0x18>
        return err;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	e005      	b.n	800862c <lfs_file_rewind+0x24>
    }
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);

    err = lfs_file_rewind_(lfs, file);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7fe fb49 	bl	8006cba <lfs_file_rewind_>
 8008628:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800862a:	68fb      	ldr	r3, [r7, #12]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8008634:	b480      	push	{r7}
 8008636:	b087      	sub	sp, #28
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8008644:	2300      	movs	r3, #0
 8008646:	617b      	str	r3, [r7, #20]
 8008648:	e024      	b.n	8008694 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	091a      	lsrs	r2, r3, #4
 800864e:	6939      	ldr	r1, [r7, #16]
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	440b      	add	r3, r1
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	4619      	mov	r1, r3
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	404b      	eors	r3, r1
 800865c:	f003 030f 	and.w	r3, r3, #15
 8008660:	4912      	ldr	r1, [pc, #72]	@ (80086ac <lfs_crc+0x78>)
 8008662:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008666:	4053      	eors	r3, r2
 8008668:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	091a      	lsrs	r2, r3, #4
 800866e:	6939      	ldr	r1, [r7, #16]
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	440b      	add	r3, r1
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	091b      	lsrs	r3, r3, #4
 8008678:	b2db      	uxtb	r3, r3
 800867a:	4619      	mov	r1, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	404b      	eors	r3, r1
 8008680:	f003 030f 	and.w	r3, r3, #15
 8008684:	4909      	ldr	r1, [pc, #36]	@ (80086ac <lfs_crc+0x78>)
 8008686:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800868a:	4053      	eors	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	3301      	adds	r3, #1
 8008692:	617b      	str	r3, [r7, #20]
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	429a      	cmp	r2, r3
 800869a:	d3d6      	bcc.n	800864a <lfs_crc+0x16>
    }

    return crc;
 800869c:	68fb      	ldr	r3, [r7, #12]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	371c      	adds	r7, #28
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	0800a598 	.word	0x0800a598

080086b0 <__assert_func>:
 80086b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086b2:	4614      	mov	r4, r2
 80086b4:	461a      	mov	r2, r3
 80086b6:	4b09      	ldr	r3, [pc, #36]	@ (80086dc <__assert_func+0x2c>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4605      	mov	r5, r0
 80086bc:	68d8      	ldr	r0, [r3, #12]
 80086be:	b14c      	cbz	r4, 80086d4 <__assert_func+0x24>
 80086c0:	4b07      	ldr	r3, [pc, #28]	@ (80086e0 <__assert_func+0x30>)
 80086c2:	9100      	str	r1, [sp, #0]
 80086c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086c8:	4906      	ldr	r1, [pc, #24]	@ (80086e4 <__assert_func+0x34>)
 80086ca:	462b      	mov	r3, r5
 80086cc:	f000 f970 	bl	80089b0 <fiprintf>
 80086d0:	f000 fa41 	bl	8008b56 <abort>
 80086d4:	4b04      	ldr	r3, [pc, #16]	@ (80086e8 <__assert_func+0x38>)
 80086d6:	461c      	mov	r4, r3
 80086d8:	e7f3      	b.n	80086c2 <__assert_func+0x12>
 80086da:	bf00      	nop
 80086dc:	20000010 	.word	0x20000010
 80086e0:	0800a5d8 	.word	0x0800a5d8
 80086e4:	0800a5e5 	.word	0x0800a5e5
 80086e8:	0800a613 	.word	0x0800a613

080086ec <malloc>:
 80086ec:	4b02      	ldr	r3, [pc, #8]	@ (80086f8 <malloc+0xc>)
 80086ee:	4601      	mov	r1, r0
 80086f0:	6818      	ldr	r0, [r3, #0]
 80086f2:	f000 b82d 	b.w	8008750 <_malloc_r>
 80086f6:	bf00      	nop
 80086f8:	20000010 	.word	0x20000010

080086fc <free>:
 80086fc:	4b02      	ldr	r3, [pc, #8]	@ (8008708 <free+0xc>)
 80086fe:	4601      	mov	r1, r0
 8008700:	6818      	ldr	r0, [r3, #0]
 8008702:	f000 ba2f 	b.w	8008b64 <_free_r>
 8008706:	bf00      	nop
 8008708:	20000010 	.word	0x20000010

0800870c <sbrk_aligned>:
 800870c:	b570      	push	{r4, r5, r6, lr}
 800870e:	4e0f      	ldr	r6, [pc, #60]	@ (800874c <sbrk_aligned+0x40>)
 8008710:	460c      	mov	r4, r1
 8008712:	6831      	ldr	r1, [r6, #0]
 8008714:	4605      	mov	r5, r0
 8008716:	b911      	cbnz	r1, 800871e <sbrk_aligned+0x12>
 8008718:	f000 f9d2 	bl	8008ac0 <_sbrk_r>
 800871c:	6030      	str	r0, [r6, #0]
 800871e:	4621      	mov	r1, r4
 8008720:	4628      	mov	r0, r5
 8008722:	f000 f9cd 	bl	8008ac0 <_sbrk_r>
 8008726:	1c43      	adds	r3, r0, #1
 8008728:	d103      	bne.n	8008732 <sbrk_aligned+0x26>
 800872a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800872e:	4620      	mov	r0, r4
 8008730:	bd70      	pop	{r4, r5, r6, pc}
 8008732:	1cc4      	adds	r4, r0, #3
 8008734:	f024 0403 	bic.w	r4, r4, #3
 8008738:	42a0      	cmp	r0, r4
 800873a:	d0f8      	beq.n	800872e <sbrk_aligned+0x22>
 800873c:	1a21      	subs	r1, r4, r0
 800873e:	4628      	mov	r0, r5
 8008740:	f000 f9be 	bl	8008ac0 <_sbrk_r>
 8008744:	3001      	adds	r0, #1
 8008746:	d1f2      	bne.n	800872e <sbrk_aligned+0x22>
 8008748:	e7ef      	b.n	800872a <sbrk_aligned+0x1e>
 800874a:	bf00      	nop
 800874c:	20000094 	.word	0x20000094

08008750 <_malloc_r>:
 8008750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008754:	1ccd      	adds	r5, r1, #3
 8008756:	f025 0503 	bic.w	r5, r5, #3
 800875a:	3508      	adds	r5, #8
 800875c:	2d0c      	cmp	r5, #12
 800875e:	bf38      	it	cc
 8008760:	250c      	movcc	r5, #12
 8008762:	2d00      	cmp	r5, #0
 8008764:	4606      	mov	r6, r0
 8008766:	db01      	blt.n	800876c <_malloc_r+0x1c>
 8008768:	42a9      	cmp	r1, r5
 800876a:	d904      	bls.n	8008776 <_malloc_r+0x26>
 800876c:	230c      	movs	r3, #12
 800876e:	6033      	str	r3, [r6, #0]
 8008770:	2000      	movs	r0, #0
 8008772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008776:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800884c <_malloc_r+0xfc>
 800877a:	f000 f869 	bl	8008850 <__malloc_lock>
 800877e:	f8d8 3000 	ldr.w	r3, [r8]
 8008782:	461c      	mov	r4, r3
 8008784:	bb44      	cbnz	r4, 80087d8 <_malloc_r+0x88>
 8008786:	4629      	mov	r1, r5
 8008788:	4630      	mov	r0, r6
 800878a:	f7ff ffbf 	bl	800870c <sbrk_aligned>
 800878e:	1c43      	adds	r3, r0, #1
 8008790:	4604      	mov	r4, r0
 8008792:	d158      	bne.n	8008846 <_malloc_r+0xf6>
 8008794:	f8d8 4000 	ldr.w	r4, [r8]
 8008798:	4627      	mov	r7, r4
 800879a:	2f00      	cmp	r7, #0
 800879c:	d143      	bne.n	8008826 <_malloc_r+0xd6>
 800879e:	2c00      	cmp	r4, #0
 80087a0:	d04b      	beq.n	800883a <_malloc_r+0xea>
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	4639      	mov	r1, r7
 80087a6:	4630      	mov	r0, r6
 80087a8:	eb04 0903 	add.w	r9, r4, r3
 80087ac:	f000 f988 	bl	8008ac0 <_sbrk_r>
 80087b0:	4581      	cmp	r9, r0
 80087b2:	d142      	bne.n	800883a <_malloc_r+0xea>
 80087b4:	6821      	ldr	r1, [r4, #0]
 80087b6:	1a6d      	subs	r5, r5, r1
 80087b8:	4629      	mov	r1, r5
 80087ba:	4630      	mov	r0, r6
 80087bc:	f7ff ffa6 	bl	800870c <sbrk_aligned>
 80087c0:	3001      	adds	r0, #1
 80087c2:	d03a      	beq.n	800883a <_malloc_r+0xea>
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	442b      	add	r3, r5
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	f8d8 3000 	ldr.w	r3, [r8]
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	bb62      	cbnz	r2, 800882c <_malloc_r+0xdc>
 80087d2:	f8c8 7000 	str.w	r7, [r8]
 80087d6:	e00f      	b.n	80087f8 <_malloc_r+0xa8>
 80087d8:	6822      	ldr	r2, [r4, #0]
 80087da:	1b52      	subs	r2, r2, r5
 80087dc:	d420      	bmi.n	8008820 <_malloc_r+0xd0>
 80087de:	2a0b      	cmp	r2, #11
 80087e0:	d917      	bls.n	8008812 <_malloc_r+0xc2>
 80087e2:	1961      	adds	r1, r4, r5
 80087e4:	42a3      	cmp	r3, r4
 80087e6:	6025      	str	r5, [r4, #0]
 80087e8:	bf18      	it	ne
 80087ea:	6059      	strne	r1, [r3, #4]
 80087ec:	6863      	ldr	r3, [r4, #4]
 80087ee:	bf08      	it	eq
 80087f0:	f8c8 1000 	streq.w	r1, [r8]
 80087f4:	5162      	str	r2, [r4, r5]
 80087f6:	604b      	str	r3, [r1, #4]
 80087f8:	4630      	mov	r0, r6
 80087fa:	f000 f82f 	bl	800885c <__malloc_unlock>
 80087fe:	f104 000b 	add.w	r0, r4, #11
 8008802:	1d23      	adds	r3, r4, #4
 8008804:	f020 0007 	bic.w	r0, r0, #7
 8008808:	1ac2      	subs	r2, r0, r3
 800880a:	bf1c      	itt	ne
 800880c:	1a1b      	subne	r3, r3, r0
 800880e:	50a3      	strne	r3, [r4, r2]
 8008810:	e7af      	b.n	8008772 <_malloc_r+0x22>
 8008812:	6862      	ldr	r2, [r4, #4]
 8008814:	42a3      	cmp	r3, r4
 8008816:	bf0c      	ite	eq
 8008818:	f8c8 2000 	streq.w	r2, [r8]
 800881c:	605a      	strne	r2, [r3, #4]
 800881e:	e7eb      	b.n	80087f8 <_malloc_r+0xa8>
 8008820:	4623      	mov	r3, r4
 8008822:	6864      	ldr	r4, [r4, #4]
 8008824:	e7ae      	b.n	8008784 <_malloc_r+0x34>
 8008826:	463c      	mov	r4, r7
 8008828:	687f      	ldr	r7, [r7, #4]
 800882a:	e7b6      	b.n	800879a <_malloc_r+0x4a>
 800882c:	461a      	mov	r2, r3
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	42a3      	cmp	r3, r4
 8008832:	d1fb      	bne.n	800882c <_malloc_r+0xdc>
 8008834:	2300      	movs	r3, #0
 8008836:	6053      	str	r3, [r2, #4]
 8008838:	e7de      	b.n	80087f8 <_malloc_r+0xa8>
 800883a:	230c      	movs	r3, #12
 800883c:	6033      	str	r3, [r6, #0]
 800883e:	4630      	mov	r0, r6
 8008840:	f000 f80c 	bl	800885c <__malloc_unlock>
 8008844:	e794      	b.n	8008770 <_malloc_r+0x20>
 8008846:	6005      	str	r5, [r0, #0]
 8008848:	e7d6      	b.n	80087f8 <_malloc_r+0xa8>
 800884a:	bf00      	nop
 800884c:	20000098 	.word	0x20000098

08008850 <__malloc_lock>:
 8008850:	4801      	ldr	r0, [pc, #4]	@ (8008858 <__malloc_lock+0x8>)
 8008852:	f000 b970 	b.w	8008b36 <__retarget_lock_acquire_recursive>
 8008856:	bf00      	nop
 8008858:	200001d8 	.word	0x200001d8

0800885c <__malloc_unlock>:
 800885c:	4801      	ldr	r0, [pc, #4]	@ (8008864 <__malloc_unlock+0x8>)
 800885e:	f000 b96b 	b.w	8008b38 <__retarget_lock_release_recursive>
 8008862:	bf00      	nop
 8008864:	200001d8 	.word	0x200001d8

08008868 <std>:
 8008868:	2300      	movs	r3, #0
 800886a:	b510      	push	{r4, lr}
 800886c:	4604      	mov	r4, r0
 800886e:	e9c0 3300 	strd	r3, r3, [r0]
 8008872:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008876:	6083      	str	r3, [r0, #8]
 8008878:	8181      	strh	r1, [r0, #12]
 800887a:	6643      	str	r3, [r0, #100]	@ 0x64
 800887c:	81c2      	strh	r2, [r0, #14]
 800887e:	6183      	str	r3, [r0, #24]
 8008880:	4619      	mov	r1, r3
 8008882:	2208      	movs	r2, #8
 8008884:	305c      	adds	r0, #92	@ 0x5c
 8008886:	f000 f8e5 	bl	8008a54 <memset>
 800888a:	4b0d      	ldr	r3, [pc, #52]	@ (80088c0 <std+0x58>)
 800888c:	6263      	str	r3, [r4, #36]	@ 0x24
 800888e:	4b0d      	ldr	r3, [pc, #52]	@ (80088c4 <std+0x5c>)
 8008890:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008892:	4b0d      	ldr	r3, [pc, #52]	@ (80088c8 <std+0x60>)
 8008894:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008896:	4b0d      	ldr	r3, [pc, #52]	@ (80088cc <std+0x64>)
 8008898:	6323      	str	r3, [r4, #48]	@ 0x30
 800889a:	4b0d      	ldr	r3, [pc, #52]	@ (80088d0 <std+0x68>)
 800889c:	6224      	str	r4, [r4, #32]
 800889e:	429c      	cmp	r4, r3
 80088a0:	d006      	beq.n	80088b0 <std+0x48>
 80088a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80088a6:	4294      	cmp	r4, r2
 80088a8:	d002      	beq.n	80088b0 <std+0x48>
 80088aa:	33d0      	adds	r3, #208	@ 0xd0
 80088ac:	429c      	cmp	r4, r3
 80088ae:	d105      	bne.n	80088bc <std+0x54>
 80088b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80088b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088b8:	f000 b93c 	b.w	8008b34 <__retarget_lock_init_recursive>
 80088bc:	bd10      	pop	{r4, pc}
 80088be:	bf00      	nop
 80088c0:	080092ed 	.word	0x080092ed
 80088c4:	0800930f 	.word	0x0800930f
 80088c8:	08009347 	.word	0x08009347
 80088cc:	0800936b 	.word	0x0800936b
 80088d0:	2000009c 	.word	0x2000009c

080088d4 <stdio_exit_handler>:
 80088d4:	4a02      	ldr	r2, [pc, #8]	@ (80088e0 <stdio_exit_handler+0xc>)
 80088d6:	4903      	ldr	r1, [pc, #12]	@ (80088e4 <stdio_exit_handler+0x10>)
 80088d8:	4803      	ldr	r0, [pc, #12]	@ (80088e8 <stdio_exit_handler+0x14>)
 80088da:	f000 b87b 	b.w	80089d4 <_fwalk_sglue>
 80088de:	bf00      	nop
 80088e0:	20000004 	.word	0x20000004
 80088e4:	0800929d 	.word	0x0800929d
 80088e8:	20000014 	.word	0x20000014

080088ec <cleanup_stdio>:
 80088ec:	6841      	ldr	r1, [r0, #4]
 80088ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008920 <cleanup_stdio+0x34>)
 80088f0:	4299      	cmp	r1, r3
 80088f2:	b510      	push	{r4, lr}
 80088f4:	4604      	mov	r4, r0
 80088f6:	d001      	beq.n	80088fc <cleanup_stdio+0x10>
 80088f8:	f000 fcd0 	bl	800929c <_fflush_r>
 80088fc:	68a1      	ldr	r1, [r4, #8]
 80088fe:	4b09      	ldr	r3, [pc, #36]	@ (8008924 <cleanup_stdio+0x38>)
 8008900:	4299      	cmp	r1, r3
 8008902:	d002      	beq.n	800890a <cleanup_stdio+0x1e>
 8008904:	4620      	mov	r0, r4
 8008906:	f000 fcc9 	bl	800929c <_fflush_r>
 800890a:	68e1      	ldr	r1, [r4, #12]
 800890c:	4b06      	ldr	r3, [pc, #24]	@ (8008928 <cleanup_stdio+0x3c>)
 800890e:	4299      	cmp	r1, r3
 8008910:	d004      	beq.n	800891c <cleanup_stdio+0x30>
 8008912:	4620      	mov	r0, r4
 8008914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008918:	f000 bcc0 	b.w	800929c <_fflush_r>
 800891c:	bd10      	pop	{r4, pc}
 800891e:	bf00      	nop
 8008920:	2000009c 	.word	0x2000009c
 8008924:	20000104 	.word	0x20000104
 8008928:	2000016c 	.word	0x2000016c

0800892c <global_stdio_init.part.0>:
 800892c:	b510      	push	{r4, lr}
 800892e:	4b0b      	ldr	r3, [pc, #44]	@ (800895c <global_stdio_init.part.0+0x30>)
 8008930:	4c0b      	ldr	r4, [pc, #44]	@ (8008960 <global_stdio_init.part.0+0x34>)
 8008932:	4a0c      	ldr	r2, [pc, #48]	@ (8008964 <global_stdio_init.part.0+0x38>)
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	4620      	mov	r0, r4
 8008938:	2200      	movs	r2, #0
 800893a:	2104      	movs	r1, #4
 800893c:	f7ff ff94 	bl	8008868 <std>
 8008940:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008944:	2201      	movs	r2, #1
 8008946:	2109      	movs	r1, #9
 8008948:	f7ff ff8e 	bl	8008868 <std>
 800894c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008950:	2202      	movs	r2, #2
 8008952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008956:	2112      	movs	r1, #18
 8008958:	f7ff bf86 	b.w	8008868 <std>
 800895c:	200001d4 	.word	0x200001d4
 8008960:	2000009c 	.word	0x2000009c
 8008964:	080088d5 	.word	0x080088d5

08008968 <__sfp_lock_acquire>:
 8008968:	4801      	ldr	r0, [pc, #4]	@ (8008970 <__sfp_lock_acquire+0x8>)
 800896a:	f000 b8e4 	b.w	8008b36 <__retarget_lock_acquire_recursive>
 800896e:	bf00      	nop
 8008970:	200001d9 	.word	0x200001d9

08008974 <__sfp_lock_release>:
 8008974:	4801      	ldr	r0, [pc, #4]	@ (800897c <__sfp_lock_release+0x8>)
 8008976:	f000 b8df 	b.w	8008b38 <__retarget_lock_release_recursive>
 800897a:	bf00      	nop
 800897c:	200001d9 	.word	0x200001d9

08008980 <__sinit>:
 8008980:	b510      	push	{r4, lr}
 8008982:	4604      	mov	r4, r0
 8008984:	f7ff fff0 	bl	8008968 <__sfp_lock_acquire>
 8008988:	6a23      	ldr	r3, [r4, #32]
 800898a:	b11b      	cbz	r3, 8008994 <__sinit+0x14>
 800898c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008990:	f7ff bff0 	b.w	8008974 <__sfp_lock_release>
 8008994:	4b04      	ldr	r3, [pc, #16]	@ (80089a8 <__sinit+0x28>)
 8008996:	6223      	str	r3, [r4, #32]
 8008998:	4b04      	ldr	r3, [pc, #16]	@ (80089ac <__sinit+0x2c>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1f5      	bne.n	800898c <__sinit+0xc>
 80089a0:	f7ff ffc4 	bl	800892c <global_stdio_init.part.0>
 80089a4:	e7f2      	b.n	800898c <__sinit+0xc>
 80089a6:	bf00      	nop
 80089a8:	080088ed 	.word	0x080088ed
 80089ac:	200001d4 	.word	0x200001d4

080089b0 <fiprintf>:
 80089b0:	b40e      	push	{r1, r2, r3}
 80089b2:	b503      	push	{r0, r1, lr}
 80089b4:	4601      	mov	r1, r0
 80089b6:	ab03      	add	r3, sp, #12
 80089b8:	4805      	ldr	r0, [pc, #20]	@ (80089d0 <fiprintf+0x20>)
 80089ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80089be:	6800      	ldr	r0, [r0, #0]
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	f000 f943 	bl	8008c4c <_vfiprintf_r>
 80089c6:	b002      	add	sp, #8
 80089c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80089cc:	b003      	add	sp, #12
 80089ce:	4770      	bx	lr
 80089d0:	20000010 	.word	0x20000010

080089d4 <_fwalk_sglue>:
 80089d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089d8:	4607      	mov	r7, r0
 80089da:	4688      	mov	r8, r1
 80089dc:	4614      	mov	r4, r2
 80089de:	2600      	movs	r6, #0
 80089e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089e4:	f1b9 0901 	subs.w	r9, r9, #1
 80089e8:	d505      	bpl.n	80089f6 <_fwalk_sglue+0x22>
 80089ea:	6824      	ldr	r4, [r4, #0]
 80089ec:	2c00      	cmp	r4, #0
 80089ee:	d1f7      	bne.n	80089e0 <_fwalk_sglue+0xc>
 80089f0:	4630      	mov	r0, r6
 80089f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089f6:	89ab      	ldrh	r3, [r5, #12]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d907      	bls.n	8008a0c <_fwalk_sglue+0x38>
 80089fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a00:	3301      	adds	r3, #1
 8008a02:	d003      	beq.n	8008a0c <_fwalk_sglue+0x38>
 8008a04:	4629      	mov	r1, r5
 8008a06:	4638      	mov	r0, r7
 8008a08:	47c0      	blx	r8
 8008a0a:	4306      	orrs	r6, r0
 8008a0c:	3568      	adds	r5, #104	@ 0x68
 8008a0e:	e7e9      	b.n	80089e4 <_fwalk_sglue+0x10>

08008a10 <iprintf>:
 8008a10:	b40f      	push	{r0, r1, r2, r3}
 8008a12:	b507      	push	{r0, r1, r2, lr}
 8008a14:	4906      	ldr	r1, [pc, #24]	@ (8008a30 <iprintf+0x20>)
 8008a16:	ab04      	add	r3, sp, #16
 8008a18:	6808      	ldr	r0, [r1, #0]
 8008a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a1e:	6881      	ldr	r1, [r0, #8]
 8008a20:	9301      	str	r3, [sp, #4]
 8008a22:	f000 f913 	bl	8008c4c <_vfiprintf_r>
 8008a26:	b003      	add	sp, #12
 8008a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a2c:	b004      	add	sp, #16
 8008a2e:	4770      	bx	lr
 8008a30:	20000010 	.word	0x20000010

08008a34 <memcmp>:
 8008a34:	b510      	push	{r4, lr}
 8008a36:	3901      	subs	r1, #1
 8008a38:	4402      	add	r2, r0
 8008a3a:	4290      	cmp	r0, r2
 8008a3c:	d101      	bne.n	8008a42 <memcmp+0xe>
 8008a3e:	2000      	movs	r0, #0
 8008a40:	e005      	b.n	8008a4e <memcmp+0x1a>
 8008a42:	7803      	ldrb	r3, [r0, #0]
 8008a44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008a48:	42a3      	cmp	r3, r4
 8008a4a:	d001      	beq.n	8008a50 <memcmp+0x1c>
 8008a4c:	1b18      	subs	r0, r3, r4
 8008a4e:	bd10      	pop	{r4, pc}
 8008a50:	3001      	adds	r0, #1
 8008a52:	e7f2      	b.n	8008a3a <memcmp+0x6>

08008a54 <memset>:
 8008a54:	4402      	add	r2, r0
 8008a56:	4603      	mov	r3, r0
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d100      	bne.n	8008a5e <memset+0xa>
 8008a5c:	4770      	bx	lr
 8008a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a62:	e7f9      	b.n	8008a58 <memset+0x4>

08008a64 <strchr>:
 8008a64:	b2c9      	uxtb	r1, r1
 8008a66:	4603      	mov	r3, r0
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a6e:	b112      	cbz	r2, 8008a76 <strchr+0x12>
 8008a70:	428a      	cmp	r2, r1
 8008a72:	d1f9      	bne.n	8008a68 <strchr+0x4>
 8008a74:	4770      	bx	lr
 8008a76:	2900      	cmp	r1, #0
 8008a78:	bf18      	it	ne
 8008a7a:	2000      	movne	r0, #0
 8008a7c:	4770      	bx	lr

08008a7e <strcspn>:
 8008a7e:	b570      	push	{r4, r5, r6, lr}
 8008a80:	4603      	mov	r3, r0
 8008a82:	461e      	mov	r6, r3
 8008a84:	f813 4b01 	ldrb.w	r4, [r3], #1
 8008a88:	b144      	cbz	r4, 8008a9c <strcspn+0x1e>
 8008a8a:	1e4a      	subs	r2, r1, #1
 8008a8c:	e001      	b.n	8008a92 <strcspn+0x14>
 8008a8e:	42a5      	cmp	r5, r4
 8008a90:	d004      	beq.n	8008a9c <strcspn+0x1e>
 8008a92:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8008a96:	2d00      	cmp	r5, #0
 8008a98:	d1f9      	bne.n	8008a8e <strcspn+0x10>
 8008a9a:	e7f2      	b.n	8008a82 <strcspn+0x4>
 8008a9c:	1a30      	subs	r0, r6, r0
 8008a9e:	bd70      	pop	{r4, r5, r6, pc}

08008aa0 <strspn>:
 8008aa0:	b570      	push	{r4, r5, r6, lr}
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	461e      	mov	r6, r3
 8008aa6:	f813 4b01 	ldrb.w	r4, [r3], #1
 8008aaa:	b13c      	cbz	r4, 8008abc <strspn+0x1c>
 8008aac:	1e4a      	subs	r2, r1, #1
 8008aae:	e001      	b.n	8008ab4 <strspn+0x14>
 8008ab0:	42a5      	cmp	r5, r4
 8008ab2:	d0f7      	beq.n	8008aa4 <strspn+0x4>
 8008ab4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8008ab8:	2d00      	cmp	r5, #0
 8008aba:	d1f9      	bne.n	8008ab0 <strspn+0x10>
 8008abc:	1a30      	subs	r0, r6, r0
 8008abe:	bd70      	pop	{r4, r5, r6, pc}

08008ac0 <_sbrk_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4d06      	ldr	r5, [pc, #24]	@ (8008adc <_sbrk_r+0x1c>)
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	4608      	mov	r0, r1
 8008aca:	602b      	str	r3, [r5, #0]
 8008acc:	f7f8 f96c 	bl	8000da8 <_sbrk>
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	d102      	bne.n	8008ada <_sbrk_r+0x1a>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	b103      	cbz	r3, 8008ada <_sbrk_r+0x1a>
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	200001dc 	.word	0x200001dc

08008ae0 <__errno>:
 8008ae0:	4b01      	ldr	r3, [pc, #4]	@ (8008ae8 <__errno+0x8>)
 8008ae2:	6818      	ldr	r0, [r3, #0]
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	20000010 	.word	0x20000010

08008aec <__libc_init_array>:
 8008aec:	b570      	push	{r4, r5, r6, lr}
 8008aee:	4d0d      	ldr	r5, [pc, #52]	@ (8008b24 <__libc_init_array+0x38>)
 8008af0:	4c0d      	ldr	r4, [pc, #52]	@ (8008b28 <__libc_init_array+0x3c>)
 8008af2:	1b64      	subs	r4, r4, r5
 8008af4:	10a4      	asrs	r4, r4, #2
 8008af6:	2600      	movs	r6, #0
 8008af8:	42a6      	cmp	r6, r4
 8008afa:	d109      	bne.n	8008b10 <__libc_init_array+0x24>
 8008afc:	4d0b      	ldr	r5, [pc, #44]	@ (8008b2c <__libc_init_array+0x40>)
 8008afe:	4c0c      	ldr	r4, [pc, #48]	@ (8008b30 <__libc_init_array+0x44>)
 8008b00:	f000 fdee 	bl	80096e0 <_init>
 8008b04:	1b64      	subs	r4, r4, r5
 8008b06:	10a4      	asrs	r4, r4, #2
 8008b08:	2600      	movs	r6, #0
 8008b0a:	42a6      	cmp	r6, r4
 8008b0c:	d105      	bne.n	8008b1a <__libc_init_array+0x2e>
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}
 8008b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b14:	4798      	blx	r3
 8008b16:	3601      	adds	r6, #1
 8008b18:	e7ee      	b.n	8008af8 <__libc_init_array+0xc>
 8008b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b1e:	4798      	blx	r3
 8008b20:	3601      	adds	r6, #1
 8008b22:	e7f2      	b.n	8008b0a <__libc_init_array+0x1e>
 8008b24:	0800a650 	.word	0x0800a650
 8008b28:	0800a650 	.word	0x0800a650
 8008b2c:	0800a650 	.word	0x0800a650
 8008b30:	0800a654 	.word	0x0800a654

08008b34 <__retarget_lock_init_recursive>:
 8008b34:	4770      	bx	lr

08008b36 <__retarget_lock_acquire_recursive>:
 8008b36:	4770      	bx	lr

08008b38 <__retarget_lock_release_recursive>:
 8008b38:	4770      	bx	lr

08008b3a <memcpy>:
 8008b3a:	440a      	add	r2, r1
 8008b3c:	4291      	cmp	r1, r2
 8008b3e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008b42:	d100      	bne.n	8008b46 <memcpy+0xc>
 8008b44:	4770      	bx	lr
 8008b46:	b510      	push	{r4, lr}
 8008b48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b50:	4291      	cmp	r1, r2
 8008b52:	d1f9      	bne.n	8008b48 <memcpy+0xe>
 8008b54:	bd10      	pop	{r4, pc}

08008b56 <abort>:
 8008b56:	b508      	push	{r3, lr}
 8008b58:	2006      	movs	r0, #6
 8008b5a:	f000 fd29 	bl	80095b0 <raise>
 8008b5e:	2001      	movs	r0, #1
 8008b60:	f7f8 f8aa 	bl	8000cb8 <_exit>

08008b64 <_free_r>:
 8008b64:	b538      	push	{r3, r4, r5, lr}
 8008b66:	4605      	mov	r5, r0
 8008b68:	2900      	cmp	r1, #0
 8008b6a:	d041      	beq.n	8008bf0 <_free_r+0x8c>
 8008b6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b70:	1f0c      	subs	r4, r1, #4
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	bfb8      	it	lt
 8008b76:	18e4      	addlt	r4, r4, r3
 8008b78:	f7ff fe6a 	bl	8008850 <__malloc_lock>
 8008b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8008bf4 <_free_r+0x90>)
 8008b7e:	6813      	ldr	r3, [r2, #0]
 8008b80:	b933      	cbnz	r3, 8008b90 <_free_r+0x2c>
 8008b82:	6063      	str	r3, [r4, #4]
 8008b84:	6014      	str	r4, [r2, #0]
 8008b86:	4628      	mov	r0, r5
 8008b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b8c:	f7ff be66 	b.w	800885c <__malloc_unlock>
 8008b90:	42a3      	cmp	r3, r4
 8008b92:	d908      	bls.n	8008ba6 <_free_r+0x42>
 8008b94:	6820      	ldr	r0, [r4, #0]
 8008b96:	1821      	adds	r1, r4, r0
 8008b98:	428b      	cmp	r3, r1
 8008b9a:	bf01      	itttt	eq
 8008b9c:	6819      	ldreq	r1, [r3, #0]
 8008b9e:	685b      	ldreq	r3, [r3, #4]
 8008ba0:	1809      	addeq	r1, r1, r0
 8008ba2:	6021      	streq	r1, [r4, #0]
 8008ba4:	e7ed      	b.n	8008b82 <_free_r+0x1e>
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	b10b      	cbz	r3, 8008bb0 <_free_r+0x4c>
 8008bac:	42a3      	cmp	r3, r4
 8008bae:	d9fa      	bls.n	8008ba6 <_free_r+0x42>
 8008bb0:	6811      	ldr	r1, [r2, #0]
 8008bb2:	1850      	adds	r0, r2, r1
 8008bb4:	42a0      	cmp	r0, r4
 8008bb6:	d10b      	bne.n	8008bd0 <_free_r+0x6c>
 8008bb8:	6820      	ldr	r0, [r4, #0]
 8008bba:	4401      	add	r1, r0
 8008bbc:	1850      	adds	r0, r2, r1
 8008bbe:	4283      	cmp	r3, r0
 8008bc0:	6011      	str	r1, [r2, #0]
 8008bc2:	d1e0      	bne.n	8008b86 <_free_r+0x22>
 8008bc4:	6818      	ldr	r0, [r3, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	6053      	str	r3, [r2, #4]
 8008bca:	4408      	add	r0, r1
 8008bcc:	6010      	str	r0, [r2, #0]
 8008bce:	e7da      	b.n	8008b86 <_free_r+0x22>
 8008bd0:	d902      	bls.n	8008bd8 <_free_r+0x74>
 8008bd2:	230c      	movs	r3, #12
 8008bd4:	602b      	str	r3, [r5, #0]
 8008bd6:	e7d6      	b.n	8008b86 <_free_r+0x22>
 8008bd8:	6820      	ldr	r0, [r4, #0]
 8008bda:	1821      	adds	r1, r4, r0
 8008bdc:	428b      	cmp	r3, r1
 8008bde:	bf04      	itt	eq
 8008be0:	6819      	ldreq	r1, [r3, #0]
 8008be2:	685b      	ldreq	r3, [r3, #4]
 8008be4:	6063      	str	r3, [r4, #4]
 8008be6:	bf04      	itt	eq
 8008be8:	1809      	addeq	r1, r1, r0
 8008bea:	6021      	streq	r1, [r4, #0]
 8008bec:	6054      	str	r4, [r2, #4]
 8008bee:	e7ca      	b.n	8008b86 <_free_r+0x22>
 8008bf0:	bd38      	pop	{r3, r4, r5, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20000098 	.word	0x20000098

08008bf8 <__sfputc_r>:
 8008bf8:	6893      	ldr	r3, [r2, #8]
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	b410      	push	{r4}
 8008c00:	6093      	str	r3, [r2, #8]
 8008c02:	da08      	bge.n	8008c16 <__sfputc_r+0x1e>
 8008c04:	6994      	ldr	r4, [r2, #24]
 8008c06:	42a3      	cmp	r3, r4
 8008c08:	db01      	blt.n	8008c0e <__sfputc_r+0x16>
 8008c0a:	290a      	cmp	r1, #10
 8008c0c:	d103      	bne.n	8008c16 <__sfputc_r+0x1e>
 8008c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c12:	f000 bbae 	b.w	8009372 <__swbuf_r>
 8008c16:	6813      	ldr	r3, [r2, #0]
 8008c18:	1c58      	adds	r0, r3, #1
 8008c1a:	6010      	str	r0, [r2, #0]
 8008c1c:	7019      	strb	r1, [r3, #0]
 8008c1e:	4608      	mov	r0, r1
 8008c20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <__sfputs_r>:
 8008c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c28:	4606      	mov	r6, r0
 8008c2a:	460f      	mov	r7, r1
 8008c2c:	4614      	mov	r4, r2
 8008c2e:	18d5      	adds	r5, r2, r3
 8008c30:	42ac      	cmp	r4, r5
 8008c32:	d101      	bne.n	8008c38 <__sfputs_r+0x12>
 8008c34:	2000      	movs	r0, #0
 8008c36:	e007      	b.n	8008c48 <__sfputs_r+0x22>
 8008c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c3c:	463a      	mov	r2, r7
 8008c3e:	4630      	mov	r0, r6
 8008c40:	f7ff ffda 	bl	8008bf8 <__sfputc_r>
 8008c44:	1c43      	adds	r3, r0, #1
 8008c46:	d1f3      	bne.n	8008c30 <__sfputs_r+0xa>
 8008c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c4c <_vfiprintf_r>:
 8008c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c50:	460d      	mov	r5, r1
 8008c52:	b09d      	sub	sp, #116	@ 0x74
 8008c54:	4614      	mov	r4, r2
 8008c56:	4698      	mov	r8, r3
 8008c58:	4606      	mov	r6, r0
 8008c5a:	b118      	cbz	r0, 8008c64 <_vfiprintf_r+0x18>
 8008c5c:	6a03      	ldr	r3, [r0, #32]
 8008c5e:	b90b      	cbnz	r3, 8008c64 <_vfiprintf_r+0x18>
 8008c60:	f7ff fe8e 	bl	8008980 <__sinit>
 8008c64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c66:	07d9      	lsls	r1, r3, #31
 8008c68:	d405      	bmi.n	8008c76 <_vfiprintf_r+0x2a>
 8008c6a:	89ab      	ldrh	r3, [r5, #12]
 8008c6c:	059a      	lsls	r2, r3, #22
 8008c6e:	d402      	bmi.n	8008c76 <_vfiprintf_r+0x2a>
 8008c70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c72:	f7ff ff60 	bl	8008b36 <__retarget_lock_acquire_recursive>
 8008c76:	89ab      	ldrh	r3, [r5, #12]
 8008c78:	071b      	lsls	r3, r3, #28
 8008c7a:	d501      	bpl.n	8008c80 <_vfiprintf_r+0x34>
 8008c7c:	692b      	ldr	r3, [r5, #16]
 8008c7e:	b99b      	cbnz	r3, 8008ca8 <_vfiprintf_r+0x5c>
 8008c80:	4629      	mov	r1, r5
 8008c82:	4630      	mov	r0, r6
 8008c84:	f000 fbb4 	bl	80093f0 <__swsetup_r>
 8008c88:	b170      	cbz	r0, 8008ca8 <_vfiprintf_r+0x5c>
 8008c8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c8c:	07dc      	lsls	r4, r3, #31
 8008c8e:	d504      	bpl.n	8008c9a <_vfiprintf_r+0x4e>
 8008c90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c94:	b01d      	add	sp, #116	@ 0x74
 8008c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9a:	89ab      	ldrh	r3, [r5, #12]
 8008c9c:	0598      	lsls	r0, r3, #22
 8008c9e:	d4f7      	bmi.n	8008c90 <_vfiprintf_r+0x44>
 8008ca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ca2:	f7ff ff49 	bl	8008b38 <__retarget_lock_release_recursive>
 8008ca6:	e7f3      	b.n	8008c90 <_vfiprintf_r+0x44>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cac:	2320      	movs	r3, #32
 8008cae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cb6:	2330      	movs	r3, #48	@ 0x30
 8008cb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e68 <_vfiprintf_r+0x21c>
 8008cbc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cc0:	f04f 0901 	mov.w	r9, #1
 8008cc4:	4623      	mov	r3, r4
 8008cc6:	469a      	mov	sl, r3
 8008cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ccc:	b10a      	cbz	r2, 8008cd2 <_vfiprintf_r+0x86>
 8008cce:	2a25      	cmp	r2, #37	@ 0x25
 8008cd0:	d1f9      	bne.n	8008cc6 <_vfiprintf_r+0x7a>
 8008cd2:	ebba 0b04 	subs.w	fp, sl, r4
 8008cd6:	d00b      	beq.n	8008cf0 <_vfiprintf_r+0xa4>
 8008cd8:	465b      	mov	r3, fp
 8008cda:	4622      	mov	r2, r4
 8008cdc:	4629      	mov	r1, r5
 8008cde:	4630      	mov	r0, r6
 8008ce0:	f7ff ffa1 	bl	8008c26 <__sfputs_r>
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	f000 80a7 	beq.w	8008e38 <_vfiprintf_r+0x1ec>
 8008cea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cec:	445a      	add	r2, fp
 8008cee:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f000 809f 	beq.w	8008e38 <_vfiprintf_r+0x1ec>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d04:	f10a 0a01 	add.w	sl, sl, #1
 8008d08:	9304      	str	r3, [sp, #16]
 8008d0a:	9307      	str	r3, [sp, #28]
 8008d0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d10:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d12:	4654      	mov	r4, sl
 8008d14:	2205      	movs	r2, #5
 8008d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d1a:	4853      	ldr	r0, [pc, #332]	@ (8008e68 <_vfiprintf_r+0x21c>)
 8008d1c:	f7f7 fa40 	bl	80001a0 <memchr>
 8008d20:	9a04      	ldr	r2, [sp, #16]
 8008d22:	b9d8      	cbnz	r0, 8008d5c <_vfiprintf_r+0x110>
 8008d24:	06d1      	lsls	r1, r2, #27
 8008d26:	bf44      	itt	mi
 8008d28:	2320      	movmi	r3, #32
 8008d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d2e:	0713      	lsls	r3, r2, #28
 8008d30:	bf44      	itt	mi
 8008d32:	232b      	movmi	r3, #43	@ 0x2b
 8008d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d38:	f89a 3000 	ldrb.w	r3, [sl]
 8008d3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d3e:	d015      	beq.n	8008d6c <_vfiprintf_r+0x120>
 8008d40:	9a07      	ldr	r2, [sp, #28]
 8008d42:	4654      	mov	r4, sl
 8008d44:	2000      	movs	r0, #0
 8008d46:	f04f 0c0a 	mov.w	ip, #10
 8008d4a:	4621      	mov	r1, r4
 8008d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d50:	3b30      	subs	r3, #48	@ 0x30
 8008d52:	2b09      	cmp	r3, #9
 8008d54:	d94b      	bls.n	8008dee <_vfiprintf_r+0x1a2>
 8008d56:	b1b0      	cbz	r0, 8008d86 <_vfiprintf_r+0x13a>
 8008d58:	9207      	str	r2, [sp, #28]
 8008d5a:	e014      	b.n	8008d86 <_vfiprintf_r+0x13a>
 8008d5c:	eba0 0308 	sub.w	r3, r0, r8
 8008d60:	fa09 f303 	lsl.w	r3, r9, r3
 8008d64:	4313      	orrs	r3, r2
 8008d66:	9304      	str	r3, [sp, #16]
 8008d68:	46a2      	mov	sl, r4
 8008d6a:	e7d2      	b.n	8008d12 <_vfiprintf_r+0xc6>
 8008d6c:	9b03      	ldr	r3, [sp, #12]
 8008d6e:	1d19      	adds	r1, r3, #4
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	9103      	str	r1, [sp, #12]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	bfbb      	ittet	lt
 8008d78:	425b      	neglt	r3, r3
 8008d7a:	f042 0202 	orrlt.w	r2, r2, #2
 8008d7e:	9307      	strge	r3, [sp, #28]
 8008d80:	9307      	strlt	r3, [sp, #28]
 8008d82:	bfb8      	it	lt
 8008d84:	9204      	strlt	r2, [sp, #16]
 8008d86:	7823      	ldrb	r3, [r4, #0]
 8008d88:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d8a:	d10a      	bne.n	8008da2 <_vfiprintf_r+0x156>
 8008d8c:	7863      	ldrb	r3, [r4, #1]
 8008d8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d90:	d132      	bne.n	8008df8 <_vfiprintf_r+0x1ac>
 8008d92:	9b03      	ldr	r3, [sp, #12]
 8008d94:	1d1a      	adds	r2, r3, #4
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	9203      	str	r2, [sp, #12]
 8008d9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d9e:	3402      	adds	r4, #2
 8008da0:	9305      	str	r3, [sp, #20]
 8008da2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e78 <_vfiprintf_r+0x22c>
 8008da6:	7821      	ldrb	r1, [r4, #0]
 8008da8:	2203      	movs	r2, #3
 8008daa:	4650      	mov	r0, sl
 8008dac:	f7f7 f9f8 	bl	80001a0 <memchr>
 8008db0:	b138      	cbz	r0, 8008dc2 <_vfiprintf_r+0x176>
 8008db2:	9b04      	ldr	r3, [sp, #16]
 8008db4:	eba0 000a 	sub.w	r0, r0, sl
 8008db8:	2240      	movs	r2, #64	@ 0x40
 8008dba:	4082      	lsls	r2, r0
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	3401      	adds	r4, #1
 8008dc0:	9304      	str	r3, [sp, #16]
 8008dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dc6:	4829      	ldr	r0, [pc, #164]	@ (8008e6c <_vfiprintf_r+0x220>)
 8008dc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008dcc:	2206      	movs	r2, #6
 8008dce:	f7f7 f9e7 	bl	80001a0 <memchr>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	d03f      	beq.n	8008e56 <_vfiprintf_r+0x20a>
 8008dd6:	4b26      	ldr	r3, [pc, #152]	@ (8008e70 <_vfiprintf_r+0x224>)
 8008dd8:	bb1b      	cbnz	r3, 8008e22 <_vfiprintf_r+0x1d6>
 8008dda:	9b03      	ldr	r3, [sp, #12]
 8008ddc:	3307      	adds	r3, #7
 8008dde:	f023 0307 	bic.w	r3, r3, #7
 8008de2:	3308      	adds	r3, #8
 8008de4:	9303      	str	r3, [sp, #12]
 8008de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008de8:	443b      	add	r3, r7
 8008dea:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dec:	e76a      	b.n	8008cc4 <_vfiprintf_r+0x78>
 8008dee:	fb0c 3202 	mla	r2, ip, r2, r3
 8008df2:	460c      	mov	r4, r1
 8008df4:	2001      	movs	r0, #1
 8008df6:	e7a8      	b.n	8008d4a <_vfiprintf_r+0xfe>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	3401      	adds	r4, #1
 8008dfc:	9305      	str	r3, [sp, #20]
 8008dfe:	4619      	mov	r1, r3
 8008e00:	f04f 0c0a 	mov.w	ip, #10
 8008e04:	4620      	mov	r0, r4
 8008e06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e0a:	3a30      	subs	r2, #48	@ 0x30
 8008e0c:	2a09      	cmp	r2, #9
 8008e0e:	d903      	bls.n	8008e18 <_vfiprintf_r+0x1cc>
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d0c6      	beq.n	8008da2 <_vfiprintf_r+0x156>
 8008e14:	9105      	str	r1, [sp, #20]
 8008e16:	e7c4      	b.n	8008da2 <_vfiprintf_r+0x156>
 8008e18:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e7f0      	b.n	8008e04 <_vfiprintf_r+0x1b8>
 8008e22:	ab03      	add	r3, sp, #12
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	462a      	mov	r2, r5
 8008e28:	4b12      	ldr	r3, [pc, #72]	@ (8008e74 <_vfiprintf_r+0x228>)
 8008e2a:	a904      	add	r1, sp, #16
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	f3af 8000 	nop.w
 8008e32:	4607      	mov	r7, r0
 8008e34:	1c78      	adds	r0, r7, #1
 8008e36:	d1d6      	bne.n	8008de6 <_vfiprintf_r+0x19a>
 8008e38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e3a:	07d9      	lsls	r1, r3, #31
 8008e3c:	d405      	bmi.n	8008e4a <_vfiprintf_r+0x1fe>
 8008e3e:	89ab      	ldrh	r3, [r5, #12]
 8008e40:	059a      	lsls	r2, r3, #22
 8008e42:	d402      	bmi.n	8008e4a <_vfiprintf_r+0x1fe>
 8008e44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e46:	f7ff fe77 	bl	8008b38 <__retarget_lock_release_recursive>
 8008e4a:	89ab      	ldrh	r3, [r5, #12]
 8008e4c:	065b      	lsls	r3, r3, #25
 8008e4e:	f53f af1f 	bmi.w	8008c90 <_vfiprintf_r+0x44>
 8008e52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e54:	e71e      	b.n	8008c94 <_vfiprintf_r+0x48>
 8008e56:	ab03      	add	r3, sp, #12
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	462a      	mov	r2, r5
 8008e5c:	4b05      	ldr	r3, [pc, #20]	@ (8008e74 <_vfiprintf_r+0x228>)
 8008e5e:	a904      	add	r1, sp, #16
 8008e60:	4630      	mov	r0, r6
 8008e62:	f000 f879 	bl	8008f58 <_printf_i>
 8008e66:	e7e4      	b.n	8008e32 <_vfiprintf_r+0x1e6>
 8008e68:	0800a614 	.word	0x0800a614
 8008e6c:	0800a61e 	.word	0x0800a61e
 8008e70:	00000000 	.word	0x00000000
 8008e74:	08008c27 	.word	0x08008c27
 8008e78:	0800a61a 	.word	0x0800a61a

08008e7c <_printf_common>:
 8008e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e80:	4616      	mov	r6, r2
 8008e82:	4698      	mov	r8, r3
 8008e84:	688a      	ldr	r2, [r1, #8]
 8008e86:	690b      	ldr	r3, [r1, #16]
 8008e88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	bfb8      	it	lt
 8008e90:	4613      	movlt	r3, r2
 8008e92:	6033      	str	r3, [r6, #0]
 8008e94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e98:	4607      	mov	r7, r0
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	b10a      	cbz	r2, 8008ea2 <_printf_common+0x26>
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	6033      	str	r3, [r6, #0]
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	0699      	lsls	r1, r3, #26
 8008ea6:	bf42      	ittt	mi
 8008ea8:	6833      	ldrmi	r3, [r6, #0]
 8008eaa:	3302      	addmi	r3, #2
 8008eac:	6033      	strmi	r3, [r6, #0]
 8008eae:	6825      	ldr	r5, [r4, #0]
 8008eb0:	f015 0506 	ands.w	r5, r5, #6
 8008eb4:	d106      	bne.n	8008ec4 <_printf_common+0x48>
 8008eb6:	f104 0a19 	add.w	sl, r4, #25
 8008eba:	68e3      	ldr	r3, [r4, #12]
 8008ebc:	6832      	ldr	r2, [r6, #0]
 8008ebe:	1a9b      	subs	r3, r3, r2
 8008ec0:	42ab      	cmp	r3, r5
 8008ec2:	dc26      	bgt.n	8008f12 <_printf_common+0x96>
 8008ec4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ec8:	6822      	ldr	r2, [r4, #0]
 8008eca:	3b00      	subs	r3, #0
 8008ecc:	bf18      	it	ne
 8008ece:	2301      	movne	r3, #1
 8008ed0:	0692      	lsls	r2, r2, #26
 8008ed2:	d42b      	bmi.n	8008f2c <_printf_common+0xb0>
 8008ed4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ed8:	4641      	mov	r1, r8
 8008eda:	4638      	mov	r0, r7
 8008edc:	47c8      	blx	r9
 8008ede:	3001      	adds	r0, #1
 8008ee0:	d01e      	beq.n	8008f20 <_printf_common+0xa4>
 8008ee2:	6823      	ldr	r3, [r4, #0]
 8008ee4:	6922      	ldr	r2, [r4, #16]
 8008ee6:	f003 0306 	and.w	r3, r3, #6
 8008eea:	2b04      	cmp	r3, #4
 8008eec:	bf02      	ittt	eq
 8008eee:	68e5      	ldreq	r5, [r4, #12]
 8008ef0:	6833      	ldreq	r3, [r6, #0]
 8008ef2:	1aed      	subeq	r5, r5, r3
 8008ef4:	68a3      	ldr	r3, [r4, #8]
 8008ef6:	bf0c      	ite	eq
 8008ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008efc:	2500      	movne	r5, #0
 8008efe:	4293      	cmp	r3, r2
 8008f00:	bfc4      	itt	gt
 8008f02:	1a9b      	subgt	r3, r3, r2
 8008f04:	18ed      	addgt	r5, r5, r3
 8008f06:	2600      	movs	r6, #0
 8008f08:	341a      	adds	r4, #26
 8008f0a:	42b5      	cmp	r5, r6
 8008f0c:	d11a      	bne.n	8008f44 <_printf_common+0xc8>
 8008f0e:	2000      	movs	r0, #0
 8008f10:	e008      	b.n	8008f24 <_printf_common+0xa8>
 8008f12:	2301      	movs	r3, #1
 8008f14:	4652      	mov	r2, sl
 8008f16:	4641      	mov	r1, r8
 8008f18:	4638      	mov	r0, r7
 8008f1a:	47c8      	blx	r9
 8008f1c:	3001      	adds	r0, #1
 8008f1e:	d103      	bne.n	8008f28 <_printf_common+0xac>
 8008f20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f28:	3501      	adds	r5, #1
 8008f2a:	e7c6      	b.n	8008eba <_printf_common+0x3e>
 8008f2c:	18e1      	adds	r1, r4, r3
 8008f2e:	1c5a      	adds	r2, r3, #1
 8008f30:	2030      	movs	r0, #48	@ 0x30
 8008f32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f36:	4422      	add	r2, r4
 8008f38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f40:	3302      	adds	r3, #2
 8008f42:	e7c7      	b.n	8008ed4 <_printf_common+0x58>
 8008f44:	2301      	movs	r3, #1
 8008f46:	4622      	mov	r2, r4
 8008f48:	4641      	mov	r1, r8
 8008f4a:	4638      	mov	r0, r7
 8008f4c:	47c8      	blx	r9
 8008f4e:	3001      	adds	r0, #1
 8008f50:	d0e6      	beq.n	8008f20 <_printf_common+0xa4>
 8008f52:	3601      	adds	r6, #1
 8008f54:	e7d9      	b.n	8008f0a <_printf_common+0x8e>
	...

08008f58 <_printf_i>:
 8008f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f5c:	7e0f      	ldrb	r7, [r1, #24]
 8008f5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f60:	2f78      	cmp	r7, #120	@ 0x78
 8008f62:	4691      	mov	r9, r2
 8008f64:	4680      	mov	r8, r0
 8008f66:	460c      	mov	r4, r1
 8008f68:	469a      	mov	sl, r3
 8008f6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f6e:	d807      	bhi.n	8008f80 <_printf_i+0x28>
 8008f70:	2f62      	cmp	r7, #98	@ 0x62
 8008f72:	d80a      	bhi.n	8008f8a <_printf_i+0x32>
 8008f74:	2f00      	cmp	r7, #0
 8008f76:	f000 80d1 	beq.w	800911c <_printf_i+0x1c4>
 8008f7a:	2f58      	cmp	r7, #88	@ 0x58
 8008f7c:	f000 80b8 	beq.w	80090f0 <_printf_i+0x198>
 8008f80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f88:	e03a      	b.n	8009000 <_printf_i+0xa8>
 8008f8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f8e:	2b15      	cmp	r3, #21
 8008f90:	d8f6      	bhi.n	8008f80 <_printf_i+0x28>
 8008f92:	a101      	add	r1, pc, #4	@ (adr r1, 8008f98 <_printf_i+0x40>)
 8008f94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f98:	08008ff1 	.word	0x08008ff1
 8008f9c:	08009005 	.word	0x08009005
 8008fa0:	08008f81 	.word	0x08008f81
 8008fa4:	08008f81 	.word	0x08008f81
 8008fa8:	08008f81 	.word	0x08008f81
 8008fac:	08008f81 	.word	0x08008f81
 8008fb0:	08009005 	.word	0x08009005
 8008fb4:	08008f81 	.word	0x08008f81
 8008fb8:	08008f81 	.word	0x08008f81
 8008fbc:	08008f81 	.word	0x08008f81
 8008fc0:	08008f81 	.word	0x08008f81
 8008fc4:	08009103 	.word	0x08009103
 8008fc8:	0800902f 	.word	0x0800902f
 8008fcc:	080090bd 	.word	0x080090bd
 8008fd0:	08008f81 	.word	0x08008f81
 8008fd4:	08008f81 	.word	0x08008f81
 8008fd8:	08009125 	.word	0x08009125
 8008fdc:	08008f81 	.word	0x08008f81
 8008fe0:	0800902f 	.word	0x0800902f
 8008fe4:	08008f81 	.word	0x08008f81
 8008fe8:	08008f81 	.word	0x08008f81
 8008fec:	080090c5 	.word	0x080090c5
 8008ff0:	6833      	ldr	r3, [r6, #0]
 8008ff2:	1d1a      	adds	r2, r3, #4
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6032      	str	r2, [r6, #0]
 8008ff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ffc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009000:	2301      	movs	r3, #1
 8009002:	e09c      	b.n	800913e <_printf_i+0x1e6>
 8009004:	6833      	ldr	r3, [r6, #0]
 8009006:	6820      	ldr	r0, [r4, #0]
 8009008:	1d19      	adds	r1, r3, #4
 800900a:	6031      	str	r1, [r6, #0]
 800900c:	0606      	lsls	r6, r0, #24
 800900e:	d501      	bpl.n	8009014 <_printf_i+0xbc>
 8009010:	681d      	ldr	r5, [r3, #0]
 8009012:	e003      	b.n	800901c <_printf_i+0xc4>
 8009014:	0645      	lsls	r5, r0, #25
 8009016:	d5fb      	bpl.n	8009010 <_printf_i+0xb8>
 8009018:	f9b3 5000 	ldrsh.w	r5, [r3]
 800901c:	2d00      	cmp	r5, #0
 800901e:	da03      	bge.n	8009028 <_printf_i+0xd0>
 8009020:	232d      	movs	r3, #45	@ 0x2d
 8009022:	426d      	negs	r5, r5
 8009024:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009028:	4858      	ldr	r0, [pc, #352]	@ (800918c <_printf_i+0x234>)
 800902a:	230a      	movs	r3, #10
 800902c:	e011      	b.n	8009052 <_printf_i+0xfa>
 800902e:	6821      	ldr	r1, [r4, #0]
 8009030:	6833      	ldr	r3, [r6, #0]
 8009032:	0608      	lsls	r0, r1, #24
 8009034:	f853 5b04 	ldr.w	r5, [r3], #4
 8009038:	d402      	bmi.n	8009040 <_printf_i+0xe8>
 800903a:	0649      	lsls	r1, r1, #25
 800903c:	bf48      	it	mi
 800903e:	b2ad      	uxthmi	r5, r5
 8009040:	2f6f      	cmp	r7, #111	@ 0x6f
 8009042:	4852      	ldr	r0, [pc, #328]	@ (800918c <_printf_i+0x234>)
 8009044:	6033      	str	r3, [r6, #0]
 8009046:	bf14      	ite	ne
 8009048:	230a      	movne	r3, #10
 800904a:	2308      	moveq	r3, #8
 800904c:	2100      	movs	r1, #0
 800904e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009052:	6866      	ldr	r6, [r4, #4]
 8009054:	60a6      	str	r6, [r4, #8]
 8009056:	2e00      	cmp	r6, #0
 8009058:	db05      	blt.n	8009066 <_printf_i+0x10e>
 800905a:	6821      	ldr	r1, [r4, #0]
 800905c:	432e      	orrs	r6, r5
 800905e:	f021 0104 	bic.w	r1, r1, #4
 8009062:	6021      	str	r1, [r4, #0]
 8009064:	d04b      	beq.n	80090fe <_printf_i+0x1a6>
 8009066:	4616      	mov	r6, r2
 8009068:	fbb5 f1f3 	udiv	r1, r5, r3
 800906c:	fb03 5711 	mls	r7, r3, r1, r5
 8009070:	5dc7      	ldrb	r7, [r0, r7]
 8009072:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009076:	462f      	mov	r7, r5
 8009078:	42bb      	cmp	r3, r7
 800907a:	460d      	mov	r5, r1
 800907c:	d9f4      	bls.n	8009068 <_printf_i+0x110>
 800907e:	2b08      	cmp	r3, #8
 8009080:	d10b      	bne.n	800909a <_printf_i+0x142>
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	07df      	lsls	r7, r3, #31
 8009086:	d508      	bpl.n	800909a <_printf_i+0x142>
 8009088:	6923      	ldr	r3, [r4, #16]
 800908a:	6861      	ldr	r1, [r4, #4]
 800908c:	4299      	cmp	r1, r3
 800908e:	bfde      	ittt	le
 8009090:	2330      	movle	r3, #48	@ 0x30
 8009092:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009096:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800909a:	1b92      	subs	r2, r2, r6
 800909c:	6122      	str	r2, [r4, #16]
 800909e:	f8cd a000 	str.w	sl, [sp]
 80090a2:	464b      	mov	r3, r9
 80090a4:	aa03      	add	r2, sp, #12
 80090a6:	4621      	mov	r1, r4
 80090a8:	4640      	mov	r0, r8
 80090aa:	f7ff fee7 	bl	8008e7c <_printf_common>
 80090ae:	3001      	adds	r0, #1
 80090b0:	d14a      	bne.n	8009148 <_printf_i+0x1f0>
 80090b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090b6:	b004      	add	sp, #16
 80090b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090bc:	6823      	ldr	r3, [r4, #0]
 80090be:	f043 0320 	orr.w	r3, r3, #32
 80090c2:	6023      	str	r3, [r4, #0]
 80090c4:	4832      	ldr	r0, [pc, #200]	@ (8009190 <_printf_i+0x238>)
 80090c6:	2778      	movs	r7, #120	@ 0x78
 80090c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80090cc:	6823      	ldr	r3, [r4, #0]
 80090ce:	6831      	ldr	r1, [r6, #0]
 80090d0:	061f      	lsls	r7, r3, #24
 80090d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80090d6:	d402      	bmi.n	80090de <_printf_i+0x186>
 80090d8:	065f      	lsls	r7, r3, #25
 80090da:	bf48      	it	mi
 80090dc:	b2ad      	uxthmi	r5, r5
 80090de:	6031      	str	r1, [r6, #0]
 80090e0:	07d9      	lsls	r1, r3, #31
 80090e2:	bf44      	itt	mi
 80090e4:	f043 0320 	orrmi.w	r3, r3, #32
 80090e8:	6023      	strmi	r3, [r4, #0]
 80090ea:	b11d      	cbz	r5, 80090f4 <_printf_i+0x19c>
 80090ec:	2310      	movs	r3, #16
 80090ee:	e7ad      	b.n	800904c <_printf_i+0xf4>
 80090f0:	4826      	ldr	r0, [pc, #152]	@ (800918c <_printf_i+0x234>)
 80090f2:	e7e9      	b.n	80090c8 <_printf_i+0x170>
 80090f4:	6823      	ldr	r3, [r4, #0]
 80090f6:	f023 0320 	bic.w	r3, r3, #32
 80090fa:	6023      	str	r3, [r4, #0]
 80090fc:	e7f6      	b.n	80090ec <_printf_i+0x194>
 80090fe:	4616      	mov	r6, r2
 8009100:	e7bd      	b.n	800907e <_printf_i+0x126>
 8009102:	6833      	ldr	r3, [r6, #0]
 8009104:	6825      	ldr	r5, [r4, #0]
 8009106:	6961      	ldr	r1, [r4, #20]
 8009108:	1d18      	adds	r0, r3, #4
 800910a:	6030      	str	r0, [r6, #0]
 800910c:	062e      	lsls	r6, r5, #24
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	d501      	bpl.n	8009116 <_printf_i+0x1be>
 8009112:	6019      	str	r1, [r3, #0]
 8009114:	e002      	b.n	800911c <_printf_i+0x1c4>
 8009116:	0668      	lsls	r0, r5, #25
 8009118:	d5fb      	bpl.n	8009112 <_printf_i+0x1ba>
 800911a:	8019      	strh	r1, [r3, #0]
 800911c:	2300      	movs	r3, #0
 800911e:	6123      	str	r3, [r4, #16]
 8009120:	4616      	mov	r6, r2
 8009122:	e7bc      	b.n	800909e <_printf_i+0x146>
 8009124:	6833      	ldr	r3, [r6, #0]
 8009126:	1d1a      	adds	r2, r3, #4
 8009128:	6032      	str	r2, [r6, #0]
 800912a:	681e      	ldr	r6, [r3, #0]
 800912c:	6862      	ldr	r2, [r4, #4]
 800912e:	2100      	movs	r1, #0
 8009130:	4630      	mov	r0, r6
 8009132:	f7f7 f835 	bl	80001a0 <memchr>
 8009136:	b108      	cbz	r0, 800913c <_printf_i+0x1e4>
 8009138:	1b80      	subs	r0, r0, r6
 800913a:	6060      	str	r0, [r4, #4]
 800913c:	6863      	ldr	r3, [r4, #4]
 800913e:	6123      	str	r3, [r4, #16]
 8009140:	2300      	movs	r3, #0
 8009142:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009146:	e7aa      	b.n	800909e <_printf_i+0x146>
 8009148:	6923      	ldr	r3, [r4, #16]
 800914a:	4632      	mov	r2, r6
 800914c:	4649      	mov	r1, r9
 800914e:	4640      	mov	r0, r8
 8009150:	47d0      	blx	sl
 8009152:	3001      	adds	r0, #1
 8009154:	d0ad      	beq.n	80090b2 <_printf_i+0x15a>
 8009156:	6823      	ldr	r3, [r4, #0]
 8009158:	079b      	lsls	r3, r3, #30
 800915a:	d413      	bmi.n	8009184 <_printf_i+0x22c>
 800915c:	68e0      	ldr	r0, [r4, #12]
 800915e:	9b03      	ldr	r3, [sp, #12]
 8009160:	4298      	cmp	r0, r3
 8009162:	bfb8      	it	lt
 8009164:	4618      	movlt	r0, r3
 8009166:	e7a6      	b.n	80090b6 <_printf_i+0x15e>
 8009168:	2301      	movs	r3, #1
 800916a:	4632      	mov	r2, r6
 800916c:	4649      	mov	r1, r9
 800916e:	4640      	mov	r0, r8
 8009170:	47d0      	blx	sl
 8009172:	3001      	adds	r0, #1
 8009174:	d09d      	beq.n	80090b2 <_printf_i+0x15a>
 8009176:	3501      	adds	r5, #1
 8009178:	68e3      	ldr	r3, [r4, #12]
 800917a:	9903      	ldr	r1, [sp, #12]
 800917c:	1a5b      	subs	r3, r3, r1
 800917e:	42ab      	cmp	r3, r5
 8009180:	dcf2      	bgt.n	8009168 <_printf_i+0x210>
 8009182:	e7eb      	b.n	800915c <_printf_i+0x204>
 8009184:	2500      	movs	r5, #0
 8009186:	f104 0619 	add.w	r6, r4, #25
 800918a:	e7f5      	b.n	8009178 <_printf_i+0x220>
 800918c:	0800a625 	.word	0x0800a625
 8009190:	0800a636 	.word	0x0800a636

08009194 <__sflush_r>:
 8009194:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800919c:	0716      	lsls	r6, r2, #28
 800919e:	4605      	mov	r5, r0
 80091a0:	460c      	mov	r4, r1
 80091a2:	d454      	bmi.n	800924e <__sflush_r+0xba>
 80091a4:	684b      	ldr	r3, [r1, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	dc02      	bgt.n	80091b0 <__sflush_r+0x1c>
 80091aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	dd48      	ble.n	8009242 <__sflush_r+0xae>
 80091b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091b2:	2e00      	cmp	r6, #0
 80091b4:	d045      	beq.n	8009242 <__sflush_r+0xae>
 80091b6:	2300      	movs	r3, #0
 80091b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80091bc:	682f      	ldr	r7, [r5, #0]
 80091be:	6a21      	ldr	r1, [r4, #32]
 80091c0:	602b      	str	r3, [r5, #0]
 80091c2:	d030      	beq.n	8009226 <__sflush_r+0x92>
 80091c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80091c6:	89a3      	ldrh	r3, [r4, #12]
 80091c8:	0759      	lsls	r1, r3, #29
 80091ca:	d505      	bpl.n	80091d8 <__sflush_r+0x44>
 80091cc:	6863      	ldr	r3, [r4, #4]
 80091ce:	1ad2      	subs	r2, r2, r3
 80091d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80091d2:	b10b      	cbz	r3, 80091d8 <__sflush_r+0x44>
 80091d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80091d6:	1ad2      	subs	r2, r2, r3
 80091d8:	2300      	movs	r3, #0
 80091da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091dc:	6a21      	ldr	r1, [r4, #32]
 80091de:	4628      	mov	r0, r5
 80091e0:	47b0      	blx	r6
 80091e2:	1c43      	adds	r3, r0, #1
 80091e4:	89a3      	ldrh	r3, [r4, #12]
 80091e6:	d106      	bne.n	80091f6 <__sflush_r+0x62>
 80091e8:	6829      	ldr	r1, [r5, #0]
 80091ea:	291d      	cmp	r1, #29
 80091ec:	d82b      	bhi.n	8009246 <__sflush_r+0xb2>
 80091ee:	4a2a      	ldr	r2, [pc, #168]	@ (8009298 <__sflush_r+0x104>)
 80091f0:	40ca      	lsrs	r2, r1
 80091f2:	07d6      	lsls	r6, r2, #31
 80091f4:	d527      	bpl.n	8009246 <__sflush_r+0xb2>
 80091f6:	2200      	movs	r2, #0
 80091f8:	6062      	str	r2, [r4, #4]
 80091fa:	04d9      	lsls	r1, r3, #19
 80091fc:	6922      	ldr	r2, [r4, #16]
 80091fe:	6022      	str	r2, [r4, #0]
 8009200:	d504      	bpl.n	800920c <__sflush_r+0x78>
 8009202:	1c42      	adds	r2, r0, #1
 8009204:	d101      	bne.n	800920a <__sflush_r+0x76>
 8009206:	682b      	ldr	r3, [r5, #0]
 8009208:	b903      	cbnz	r3, 800920c <__sflush_r+0x78>
 800920a:	6560      	str	r0, [r4, #84]	@ 0x54
 800920c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800920e:	602f      	str	r7, [r5, #0]
 8009210:	b1b9      	cbz	r1, 8009242 <__sflush_r+0xae>
 8009212:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009216:	4299      	cmp	r1, r3
 8009218:	d002      	beq.n	8009220 <__sflush_r+0x8c>
 800921a:	4628      	mov	r0, r5
 800921c:	f7ff fca2 	bl	8008b64 <_free_r>
 8009220:	2300      	movs	r3, #0
 8009222:	6363      	str	r3, [r4, #52]	@ 0x34
 8009224:	e00d      	b.n	8009242 <__sflush_r+0xae>
 8009226:	2301      	movs	r3, #1
 8009228:	4628      	mov	r0, r5
 800922a:	47b0      	blx	r6
 800922c:	4602      	mov	r2, r0
 800922e:	1c50      	adds	r0, r2, #1
 8009230:	d1c9      	bne.n	80091c6 <__sflush_r+0x32>
 8009232:	682b      	ldr	r3, [r5, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d0c6      	beq.n	80091c6 <__sflush_r+0x32>
 8009238:	2b1d      	cmp	r3, #29
 800923a:	d001      	beq.n	8009240 <__sflush_r+0xac>
 800923c:	2b16      	cmp	r3, #22
 800923e:	d11e      	bne.n	800927e <__sflush_r+0xea>
 8009240:	602f      	str	r7, [r5, #0]
 8009242:	2000      	movs	r0, #0
 8009244:	e022      	b.n	800928c <__sflush_r+0xf8>
 8009246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800924a:	b21b      	sxth	r3, r3
 800924c:	e01b      	b.n	8009286 <__sflush_r+0xf2>
 800924e:	690f      	ldr	r7, [r1, #16]
 8009250:	2f00      	cmp	r7, #0
 8009252:	d0f6      	beq.n	8009242 <__sflush_r+0xae>
 8009254:	0793      	lsls	r3, r2, #30
 8009256:	680e      	ldr	r6, [r1, #0]
 8009258:	bf08      	it	eq
 800925a:	694b      	ldreq	r3, [r1, #20]
 800925c:	600f      	str	r7, [r1, #0]
 800925e:	bf18      	it	ne
 8009260:	2300      	movne	r3, #0
 8009262:	eba6 0807 	sub.w	r8, r6, r7
 8009266:	608b      	str	r3, [r1, #8]
 8009268:	f1b8 0f00 	cmp.w	r8, #0
 800926c:	dde9      	ble.n	8009242 <__sflush_r+0xae>
 800926e:	6a21      	ldr	r1, [r4, #32]
 8009270:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009272:	4643      	mov	r3, r8
 8009274:	463a      	mov	r2, r7
 8009276:	4628      	mov	r0, r5
 8009278:	47b0      	blx	r6
 800927a:	2800      	cmp	r0, #0
 800927c:	dc08      	bgt.n	8009290 <__sflush_r+0xfc>
 800927e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009286:	81a3      	strh	r3, [r4, #12]
 8009288:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800928c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009290:	4407      	add	r7, r0
 8009292:	eba8 0800 	sub.w	r8, r8, r0
 8009296:	e7e7      	b.n	8009268 <__sflush_r+0xd4>
 8009298:	20400001 	.word	0x20400001

0800929c <_fflush_r>:
 800929c:	b538      	push	{r3, r4, r5, lr}
 800929e:	690b      	ldr	r3, [r1, #16]
 80092a0:	4605      	mov	r5, r0
 80092a2:	460c      	mov	r4, r1
 80092a4:	b913      	cbnz	r3, 80092ac <_fflush_r+0x10>
 80092a6:	2500      	movs	r5, #0
 80092a8:	4628      	mov	r0, r5
 80092aa:	bd38      	pop	{r3, r4, r5, pc}
 80092ac:	b118      	cbz	r0, 80092b6 <_fflush_r+0x1a>
 80092ae:	6a03      	ldr	r3, [r0, #32]
 80092b0:	b90b      	cbnz	r3, 80092b6 <_fflush_r+0x1a>
 80092b2:	f7ff fb65 	bl	8008980 <__sinit>
 80092b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d0f3      	beq.n	80092a6 <_fflush_r+0xa>
 80092be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80092c0:	07d0      	lsls	r0, r2, #31
 80092c2:	d404      	bmi.n	80092ce <_fflush_r+0x32>
 80092c4:	0599      	lsls	r1, r3, #22
 80092c6:	d402      	bmi.n	80092ce <_fflush_r+0x32>
 80092c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092ca:	f7ff fc34 	bl	8008b36 <__retarget_lock_acquire_recursive>
 80092ce:	4628      	mov	r0, r5
 80092d0:	4621      	mov	r1, r4
 80092d2:	f7ff ff5f 	bl	8009194 <__sflush_r>
 80092d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092d8:	07da      	lsls	r2, r3, #31
 80092da:	4605      	mov	r5, r0
 80092dc:	d4e4      	bmi.n	80092a8 <_fflush_r+0xc>
 80092de:	89a3      	ldrh	r3, [r4, #12]
 80092e0:	059b      	lsls	r3, r3, #22
 80092e2:	d4e1      	bmi.n	80092a8 <_fflush_r+0xc>
 80092e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092e6:	f7ff fc27 	bl	8008b38 <__retarget_lock_release_recursive>
 80092ea:	e7dd      	b.n	80092a8 <_fflush_r+0xc>

080092ec <__sread>:
 80092ec:	b510      	push	{r4, lr}
 80092ee:	460c      	mov	r4, r1
 80092f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f4:	f000 f986 	bl	8009604 <_read_r>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	bfab      	itete	ge
 80092fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80092fe:	89a3      	ldrhlt	r3, [r4, #12]
 8009300:	181b      	addge	r3, r3, r0
 8009302:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009306:	bfac      	ite	ge
 8009308:	6563      	strge	r3, [r4, #84]	@ 0x54
 800930a:	81a3      	strhlt	r3, [r4, #12]
 800930c:	bd10      	pop	{r4, pc}

0800930e <__swrite>:
 800930e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009312:	461f      	mov	r7, r3
 8009314:	898b      	ldrh	r3, [r1, #12]
 8009316:	05db      	lsls	r3, r3, #23
 8009318:	4605      	mov	r5, r0
 800931a:	460c      	mov	r4, r1
 800931c:	4616      	mov	r6, r2
 800931e:	d505      	bpl.n	800932c <__swrite+0x1e>
 8009320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009324:	2302      	movs	r3, #2
 8009326:	2200      	movs	r2, #0
 8009328:	f000 f95a 	bl	80095e0 <_lseek_r>
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009332:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009336:	81a3      	strh	r3, [r4, #12]
 8009338:	4632      	mov	r2, r6
 800933a:	463b      	mov	r3, r7
 800933c:	4628      	mov	r0, r5
 800933e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009342:	f000 b985 	b.w	8009650 <_write_r>

08009346 <__sseek>:
 8009346:	b510      	push	{r4, lr}
 8009348:	460c      	mov	r4, r1
 800934a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800934e:	f000 f947 	bl	80095e0 <_lseek_r>
 8009352:	1c43      	adds	r3, r0, #1
 8009354:	89a3      	ldrh	r3, [r4, #12]
 8009356:	bf15      	itete	ne
 8009358:	6560      	strne	r0, [r4, #84]	@ 0x54
 800935a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800935e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009362:	81a3      	strheq	r3, [r4, #12]
 8009364:	bf18      	it	ne
 8009366:	81a3      	strhne	r3, [r4, #12]
 8009368:	bd10      	pop	{r4, pc}

0800936a <__sclose>:
 800936a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800936e:	f000 b981 	b.w	8009674 <_close_r>

08009372 <__swbuf_r>:
 8009372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009374:	460e      	mov	r6, r1
 8009376:	4614      	mov	r4, r2
 8009378:	4605      	mov	r5, r0
 800937a:	b118      	cbz	r0, 8009384 <__swbuf_r+0x12>
 800937c:	6a03      	ldr	r3, [r0, #32]
 800937e:	b90b      	cbnz	r3, 8009384 <__swbuf_r+0x12>
 8009380:	f7ff fafe 	bl	8008980 <__sinit>
 8009384:	69a3      	ldr	r3, [r4, #24]
 8009386:	60a3      	str	r3, [r4, #8]
 8009388:	89a3      	ldrh	r3, [r4, #12]
 800938a:	071a      	lsls	r2, r3, #28
 800938c:	d501      	bpl.n	8009392 <__swbuf_r+0x20>
 800938e:	6923      	ldr	r3, [r4, #16]
 8009390:	b943      	cbnz	r3, 80093a4 <__swbuf_r+0x32>
 8009392:	4621      	mov	r1, r4
 8009394:	4628      	mov	r0, r5
 8009396:	f000 f82b 	bl	80093f0 <__swsetup_r>
 800939a:	b118      	cbz	r0, 80093a4 <__swbuf_r+0x32>
 800939c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80093a0:	4638      	mov	r0, r7
 80093a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	6922      	ldr	r2, [r4, #16]
 80093a8:	1a98      	subs	r0, r3, r2
 80093aa:	6963      	ldr	r3, [r4, #20]
 80093ac:	b2f6      	uxtb	r6, r6
 80093ae:	4283      	cmp	r3, r0
 80093b0:	4637      	mov	r7, r6
 80093b2:	dc05      	bgt.n	80093c0 <__swbuf_r+0x4e>
 80093b4:	4621      	mov	r1, r4
 80093b6:	4628      	mov	r0, r5
 80093b8:	f7ff ff70 	bl	800929c <_fflush_r>
 80093bc:	2800      	cmp	r0, #0
 80093be:	d1ed      	bne.n	800939c <__swbuf_r+0x2a>
 80093c0:	68a3      	ldr	r3, [r4, #8]
 80093c2:	3b01      	subs	r3, #1
 80093c4:	60a3      	str	r3, [r4, #8]
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	6022      	str	r2, [r4, #0]
 80093cc:	701e      	strb	r6, [r3, #0]
 80093ce:	6962      	ldr	r2, [r4, #20]
 80093d0:	1c43      	adds	r3, r0, #1
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d004      	beq.n	80093e0 <__swbuf_r+0x6e>
 80093d6:	89a3      	ldrh	r3, [r4, #12]
 80093d8:	07db      	lsls	r3, r3, #31
 80093da:	d5e1      	bpl.n	80093a0 <__swbuf_r+0x2e>
 80093dc:	2e0a      	cmp	r6, #10
 80093de:	d1df      	bne.n	80093a0 <__swbuf_r+0x2e>
 80093e0:	4621      	mov	r1, r4
 80093e2:	4628      	mov	r0, r5
 80093e4:	f7ff ff5a 	bl	800929c <_fflush_r>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	d0d9      	beq.n	80093a0 <__swbuf_r+0x2e>
 80093ec:	e7d6      	b.n	800939c <__swbuf_r+0x2a>
	...

080093f0 <__swsetup_r>:
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	4b29      	ldr	r3, [pc, #164]	@ (8009498 <__swsetup_r+0xa8>)
 80093f4:	4605      	mov	r5, r0
 80093f6:	6818      	ldr	r0, [r3, #0]
 80093f8:	460c      	mov	r4, r1
 80093fa:	b118      	cbz	r0, 8009404 <__swsetup_r+0x14>
 80093fc:	6a03      	ldr	r3, [r0, #32]
 80093fe:	b90b      	cbnz	r3, 8009404 <__swsetup_r+0x14>
 8009400:	f7ff fabe 	bl	8008980 <__sinit>
 8009404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009408:	0719      	lsls	r1, r3, #28
 800940a:	d422      	bmi.n	8009452 <__swsetup_r+0x62>
 800940c:	06da      	lsls	r2, r3, #27
 800940e:	d407      	bmi.n	8009420 <__swsetup_r+0x30>
 8009410:	2209      	movs	r2, #9
 8009412:	602a      	str	r2, [r5, #0]
 8009414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009418:	81a3      	strh	r3, [r4, #12]
 800941a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800941e:	e033      	b.n	8009488 <__swsetup_r+0x98>
 8009420:	0758      	lsls	r0, r3, #29
 8009422:	d512      	bpl.n	800944a <__swsetup_r+0x5a>
 8009424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009426:	b141      	cbz	r1, 800943a <__swsetup_r+0x4a>
 8009428:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800942c:	4299      	cmp	r1, r3
 800942e:	d002      	beq.n	8009436 <__swsetup_r+0x46>
 8009430:	4628      	mov	r0, r5
 8009432:	f7ff fb97 	bl	8008b64 <_free_r>
 8009436:	2300      	movs	r3, #0
 8009438:	6363      	str	r3, [r4, #52]	@ 0x34
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009440:	81a3      	strh	r3, [r4, #12]
 8009442:	2300      	movs	r3, #0
 8009444:	6063      	str	r3, [r4, #4]
 8009446:	6923      	ldr	r3, [r4, #16]
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	89a3      	ldrh	r3, [r4, #12]
 800944c:	f043 0308 	orr.w	r3, r3, #8
 8009450:	81a3      	strh	r3, [r4, #12]
 8009452:	6923      	ldr	r3, [r4, #16]
 8009454:	b94b      	cbnz	r3, 800946a <__swsetup_r+0x7a>
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800945c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009460:	d003      	beq.n	800946a <__swsetup_r+0x7a>
 8009462:	4621      	mov	r1, r4
 8009464:	4628      	mov	r0, r5
 8009466:	f000 f83f 	bl	80094e8 <__smakebuf_r>
 800946a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800946e:	f013 0201 	ands.w	r2, r3, #1
 8009472:	d00a      	beq.n	800948a <__swsetup_r+0x9a>
 8009474:	2200      	movs	r2, #0
 8009476:	60a2      	str	r2, [r4, #8]
 8009478:	6962      	ldr	r2, [r4, #20]
 800947a:	4252      	negs	r2, r2
 800947c:	61a2      	str	r2, [r4, #24]
 800947e:	6922      	ldr	r2, [r4, #16]
 8009480:	b942      	cbnz	r2, 8009494 <__swsetup_r+0xa4>
 8009482:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009486:	d1c5      	bne.n	8009414 <__swsetup_r+0x24>
 8009488:	bd38      	pop	{r3, r4, r5, pc}
 800948a:	0799      	lsls	r1, r3, #30
 800948c:	bf58      	it	pl
 800948e:	6962      	ldrpl	r2, [r4, #20]
 8009490:	60a2      	str	r2, [r4, #8]
 8009492:	e7f4      	b.n	800947e <__swsetup_r+0x8e>
 8009494:	2000      	movs	r0, #0
 8009496:	e7f7      	b.n	8009488 <__swsetup_r+0x98>
 8009498:	20000010 	.word	0x20000010

0800949c <__swhatbuf_r>:
 800949c:	b570      	push	{r4, r5, r6, lr}
 800949e:	460c      	mov	r4, r1
 80094a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a4:	2900      	cmp	r1, #0
 80094a6:	b096      	sub	sp, #88	@ 0x58
 80094a8:	4615      	mov	r5, r2
 80094aa:	461e      	mov	r6, r3
 80094ac:	da0d      	bge.n	80094ca <__swhatbuf_r+0x2e>
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80094b4:	f04f 0100 	mov.w	r1, #0
 80094b8:	bf14      	ite	ne
 80094ba:	2340      	movne	r3, #64	@ 0x40
 80094bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80094c0:	2000      	movs	r0, #0
 80094c2:	6031      	str	r1, [r6, #0]
 80094c4:	602b      	str	r3, [r5, #0]
 80094c6:	b016      	add	sp, #88	@ 0x58
 80094c8:	bd70      	pop	{r4, r5, r6, pc}
 80094ca:	466a      	mov	r2, sp
 80094cc:	f000 f8e2 	bl	8009694 <_fstat_r>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	dbec      	blt.n	80094ae <__swhatbuf_r+0x12>
 80094d4:	9901      	ldr	r1, [sp, #4]
 80094d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80094da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80094de:	4259      	negs	r1, r3
 80094e0:	4159      	adcs	r1, r3
 80094e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094e6:	e7eb      	b.n	80094c0 <__swhatbuf_r+0x24>

080094e8 <__smakebuf_r>:
 80094e8:	898b      	ldrh	r3, [r1, #12]
 80094ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094ec:	079d      	lsls	r5, r3, #30
 80094ee:	4606      	mov	r6, r0
 80094f0:	460c      	mov	r4, r1
 80094f2:	d507      	bpl.n	8009504 <__smakebuf_r+0x1c>
 80094f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80094f8:	6023      	str	r3, [r4, #0]
 80094fa:	6123      	str	r3, [r4, #16]
 80094fc:	2301      	movs	r3, #1
 80094fe:	6163      	str	r3, [r4, #20]
 8009500:	b003      	add	sp, #12
 8009502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009504:	ab01      	add	r3, sp, #4
 8009506:	466a      	mov	r2, sp
 8009508:	f7ff ffc8 	bl	800949c <__swhatbuf_r>
 800950c:	9f00      	ldr	r7, [sp, #0]
 800950e:	4605      	mov	r5, r0
 8009510:	4639      	mov	r1, r7
 8009512:	4630      	mov	r0, r6
 8009514:	f7ff f91c 	bl	8008750 <_malloc_r>
 8009518:	b948      	cbnz	r0, 800952e <__smakebuf_r+0x46>
 800951a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800951e:	059a      	lsls	r2, r3, #22
 8009520:	d4ee      	bmi.n	8009500 <__smakebuf_r+0x18>
 8009522:	f023 0303 	bic.w	r3, r3, #3
 8009526:	f043 0302 	orr.w	r3, r3, #2
 800952a:	81a3      	strh	r3, [r4, #12]
 800952c:	e7e2      	b.n	80094f4 <__smakebuf_r+0xc>
 800952e:	89a3      	ldrh	r3, [r4, #12]
 8009530:	6020      	str	r0, [r4, #0]
 8009532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009536:	81a3      	strh	r3, [r4, #12]
 8009538:	9b01      	ldr	r3, [sp, #4]
 800953a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800953e:	b15b      	cbz	r3, 8009558 <__smakebuf_r+0x70>
 8009540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009544:	4630      	mov	r0, r6
 8009546:	f000 f83b 	bl	80095c0 <_isatty_r>
 800954a:	b128      	cbz	r0, 8009558 <__smakebuf_r+0x70>
 800954c:	89a3      	ldrh	r3, [r4, #12]
 800954e:	f023 0303 	bic.w	r3, r3, #3
 8009552:	f043 0301 	orr.w	r3, r3, #1
 8009556:	81a3      	strh	r3, [r4, #12]
 8009558:	89a3      	ldrh	r3, [r4, #12]
 800955a:	431d      	orrs	r5, r3
 800955c:	81a5      	strh	r5, [r4, #12]
 800955e:	e7cf      	b.n	8009500 <__smakebuf_r+0x18>

08009560 <_raise_r>:
 8009560:	291f      	cmp	r1, #31
 8009562:	b538      	push	{r3, r4, r5, lr}
 8009564:	4605      	mov	r5, r0
 8009566:	460c      	mov	r4, r1
 8009568:	d904      	bls.n	8009574 <_raise_r+0x14>
 800956a:	2316      	movs	r3, #22
 800956c:	6003      	str	r3, [r0, #0]
 800956e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009572:	bd38      	pop	{r3, r4, r5, pc}
 8009574:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009576:	b112      	cbz	r2, 800957e <_raise_r+0x1e>
 8009578:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800957c:	b94b      	cbnz	r3, 8009592 <_raise_r+0x32>
 800957e:	4628      	mov	r0, r5
 8009580:	f000 f864 	bl	800964c <_getpid_r>
 8009584:	4622      	mov	r2, r4
 8009586:	4601      	mov	r1, r0
 8009588:	4628      	mov	r0, r5
 800958a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800958e:	f000 b84b 	b.w	8009628 <_kill_r>
 8009592:	2b01      	cmp	r3, #1
 8009594:	d00a      	beq.n	80095ac <_raise_r+0x4c>
 8009596:	1c59      	adds	r1, r3, #1
 8009598:	d103      	bne.n	80095a2 <_raise_r+0x42>
 800959a:	2316      	movs	r3, #22
 800959c:	6003      	str	r3, [r0, #0]
 800959e:	2001      	movs	r0, #1
 80095a0:	e7e7      	b.n	8009572 <_raise_r+0x12>
 80095a2:	2100      	movs	r1, #0
 80095a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80095a8:	4620      	mov	r0, r4
 80095aa:	4798      	blx	r3
 80095ac:	2000      	movs	r0, #0
 80095ae:	e7e0      	b.n	8009572 <_raise_r+0x12>

080095b0 <raise>:
 80095b0:	4b02      	ldr	r3, [pc, #8]	@ (80095bc <raise+0xc>)
 80095b2:	4601      	mov	r1, r0
 80095b4:	6818      	ldr	r0, [r3, #0]
 80095b6:	f7ff bfd3 	b.w	8009560 <_raise_r>
 80095ba:	bf00      	nop
 80095bc:	20000010 	.word	0x20000010

080095c0 <_isatty_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4d06      	ldr	r5, [pc, #24]	@ (80095dc <_isatty_r+0x1c>)
 80095c4:	2300      	movs	r3, #0
 80095c6:	4604      	mov	r4, r0
 80095c8:	4608      	mov	r0, r1
 80095ca:	602b      	str	r3, [r5, #0]
 80095cc:	f7f7 fbd4 	bl	8000d78 <_isatty>
 80095d0:	1c43      	adds	r3, r0, #1
 80095d2:	d102      	bne.n	80095da <_isatty_r+0x1a>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	b103      	cbz	r3, 80095da <_isatty_r+0x1a>
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	bd38      	pop	{r3, r4, r5, pc}
 80095dc:	200001dc 	.word	0x200001dc

080095e0 <_lseek_r>:
 80095e0:	b538      	push	{r3, r4, r5, lr}
 80095e2:	4d07      	ldr	r5, [pc, #28]	@ (8009600 <_lseek_r+0x20>)
 80095e4:	4604      	mov	r4, r0
 80095e6:	4608      	mov	r0, r1
 80095e8:	4611      	mov	r1, r2
 80095ea:	2200      	movs	r2, #0
 80095ec:	602a      	str	r2, [r5, #0]
 80095ee:	461a      	mov	r2, r3
 80095f0:	f7f7 fbcd 	bl	8000d8e <_lseek>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	d102      	bne.n	80095fe <_lseek_r+0x1e>
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	b103      	cbz	r3, 80095fe <_lseek_r+0x1e>
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
 8009600:	200001dc 	.word	0x200001dc

08009604 <_read_r>:
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	4d07      	ldr	r5, [pc, #28]	@ (8009624 <_read_r+0x20>)
 8009608:	4604      	mov	r4, r0
 800960a:	4608      	mov	r0, r1
 800960c:	4611      	mov	r1, r2
 800960e:	2200      	movs	r2, #0
 8009610:	602a      	str	r2, [r5, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	f7f7 fb5b 	bl	8000cce <_read>
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	d102      	bne.n	8009622 <_read_r+0x1e>
 800961c:	682b      	ldr	r3, [r5, #0]
 800961e:	b103      	cbz	r3, 8009622 <_read_r+0x1e>
 8009620:	6023      	str	r3, [r4, #0]
 8009622:	bd38      	pop	{r3, r4, r5, pc}
 8009624:	200001dc 	.word	0x200001dc

08009628 <_kill_r>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	4d07      	ldr	r5, [pc, #28]	@ (8009648 <_kill_r+0x20>)
 800962c:	2300      	movs	r3, #0
 800962e:	4604      	mov	r4, r0
 8009630:	4608      	mov	r0, r1
 8009632:	4611      	mov	r1, r2
 8009634:	602b      	str	r3, [r5, #0]
 8009636:	f7f7 fb2f 	bl	8000c98 <_kill>
 800963a:	1c43      	adds	r3, r0, #1
 800963c:	d102      	bne.n	8009644 <_kill_r+0x1c>
 800963e:	682b      	ldr	r3, [r5, #0]
 8009640:	b103      	cbz	r3, 8009644 <_kill_r+0x1c>
 8009642:	6023      	str	r3, [r4, #0]
 8009644:	bd38      	pop	{r3, r4, r5, pc}
 8009646:	bf00      	nop
 8009648:	200001dc 	.word	0x200001dc

0800964c <_getpid_r>:
 800964c:	f7f7 bb1c 	b.w	8000c88 <_getpid>

08009650 <_write_r>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	4d07      	ldr	r5, [pc, #28]	@ (8009670 <_write_r+0x20>)
 8009654:	4604      	mov	r4, r0
 8009656:	4608      	mov	r0, r1
 8009658:	4611      	mov	r1, r2
 800965a:	2200      	movs	r2, #0
 800965c:	602a      	str	r2, [r5, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	f7f7 fb52 	bl	8000d08 <_write>
 8009664:	1c43      	adds	r3, r0, #1
 8009666:	d102      	bne.n	800966e <_write_r+0x1e>
 8009668:	682b      	ldr	r3, [r5, #0]
 800966a:	b103      	cbz	r3, 800966e <_write_r+0x1e>
 800966c:	6023      	str	r3, [r4, #0]
 800966e:	bd38      	pop	{r3, r4, r5, pc}
 8009670:	200001dc 	.word	0x200001dc

08009674 <_close_r>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	4d06      	ldr	r5, [pc, #24]	@ (8009690 <_close_r+0x1c>)
 8009678:	2300      	movs	r3, #0
 800967a:	4604      	mov	r4, r0
 800967c:	4608      	mov	r0, r1
 800967e:	602b      	str	r3, [r5, #0]
 8009680:	f7f7 fb5e 	bl	8000d40 <_close>
 8009684:	1c43      	adds	r3, r0, #1
 8009686:	d102      	bne.n	800968e <_close_r+0x1a>
 8009688:	682b      	ldr	r3, [r5, #0]
 800968a:	b103      	cbz	r3, 800968e <_close_r+0x1a>
 800968c:	6023      	str	r3, [r4, #0]
 800968e:	bd38      	pop	{r3, r4, r5, pc}
 8009690:	200001dc 	.word	0x200001dc

08009694 <_fstat_r>:
 8009694:	b538      	push	{r3, r4, r5, lr}
 8009696:	4d07      	ldr	r5, [pc, #28]	@ (80096b4 <_fstat_r+0x20>)
 8009698:	2300      	movs	r3, #0
 800969a:	4604      	mov	r4, r0
 800969c:	4608      	mov	r0, r1
 800969e:	4611      	mov	r1, r2
 80096a0:	602b      	str	r3, [r5, #0]
 80096a2:	f7f7 fb59 	bl	8000d58 <_fstat>
 80096a6:	1c43      	adds	r3, r0, #1
 80096a8:	d102      	bne.n	80096b0 <_fstat_r+0x1c>
 80096aa:	682b      	ldr	r3, [r5, #0]
 80096ac:	b103      	cbz	r3, 80096b0 <_fstat_r+0x1c>
 80096ae:	6023      	str	r3, [r4, #0]
 80096b0:	bd38      	pop	{r3, r4, r5, pc}
 80096b2:	bf00      	nop
 80096b4:	200001dc 	.word	0x200001dc

080096b8 <__popcountsi2>:
 80096b8:	0843      	lsrs	r3, r0, #1
 80096ba:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80096be:	1ac0      	subs	r0, r0, r3
 80096c0:	0883      	lsrs	r3, r0, #2
 80096c2:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80096c6:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 80096ca:	4418      	add	r0, r3
 80096cc:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80096d0:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 80096d4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80096d8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80096dc:	0e00      	lsrs	r0, r0, #24
 80096de:	4770      	bx	lr

080096e0 <_init>:
 80096e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e2:	bf00      	nop
 80096e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096e6:	bc08      	pop	{r3}
 80096e8:	469e      	mov	lr, r3
 80096ea:	4770      	bx	lr

080096ec <_fini>:
 80096ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ee:	bf00      	nop
 80096f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096f2:	bc08      	pop	{r3}
 80096f4:	469e      	mov	lr, r3
 80096f6:	4770      	bx	lr
