
nucleo_fram_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000959c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f50  0800972c  0800972c  0000a72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a67c  0800a67c  0000c060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a67c  0800a67c  0000b67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a684  0800a684  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a684  0800a684  0000b684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a688  0800a688  0000b688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800a68c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000060  0800a6ec  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  0800a6ec  0000c1e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b500  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000163d  00000000  00000000  00017590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  00018bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a48  00000000  00000000  00019738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001587c  00000000  00000000  0001a180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009210  00000000  00000000  0002f9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007219a  00000000  00000000  00038c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000045  00000000  00000000  000aada6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b04  00000000  00000000  000aadec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000017f  00000000  00000000  000ae8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <deregister_tm_clones>:
 8000240:	4803      	ldr	r0, [pc, #12]	@ (8000250 <deregister_tm_clones+0x10>)
 8000242:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <deregister_tm_clones+0x14>)
 8000244:	4283      	cmp	r3, r0
 8000246:	d002      	beq.n	800024e <deregister_tm_clones+0xe>
 8000248:	4b03      	ldr	r3, [pc, #12]	@ (8000258 <deregister_tm_clones+0x18>)
 800024a:	b103      	cbz	r3, 800024e <deregister_tm_clones+0xe>
 800024c:	4718      	bx	r3
 800024e:	4770      	bx	lr
 8000250:	20000060 	.word	0x20000060
 8000254:	20000060 	.word	0x20000060
 8000258:	00000000 	.word	0x00000000

0800025c <register_tm_clones>:
 800025c:	4805      	ldr	r0, [pc, #20]	@ (8000274 <register_tm_clones+0x18>)
 800025e:	4b06      	ldr	r3, [pc, #24]	@ (8000278 <register_tm_clones+0x1c>)
 8000260:	1a1b      	subs	r3, r3, r0
 8000262:	0fd9      	lsrs	r1, r3, #31
 8000264:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000268:	1049      	asrs	r1, r1, #1
 800026a:	d002      	beq.n	8000272 <register_tm_clones+0x16>
 800026c:	4b03      	ldr	r3, [pc, #12]	@ (800027c <register_tm_clones+0x20>)
 800026e:	b103      	cbz	r3, 8000272 <register_tm_clones+0x16>
 8000270:	4718      	bx	r3
 8000272:	4770      	bx	lr
 8000274:	20000060 	.word	0x20000060
 8000278:	20000060 	.word	0x20000060
 800027c:	00000000 	.word	0x00000000

08000280 <__do_global_dtors_aux>:
 8000280:	b510      	push	{r4, lr}
 8000282:	4c06      	ldr	r4, [pc, #24]	@ (800029c <__do_global_dtors_aux+0x1c>)
 8000284:	7823      	ldrb	r3, [r4, #0]
 8000286:	b943      	cbnz	r3, 800029a <__do_global_dtors_aux+0x1a>
 8000288:	f7ff ffda 	bl	8000240 <deregister_tm_clones>
 800028c:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <__do_global_dtors_aux+0x20>)
 800028e:	b113      	cbz	r3, 8000296 <__do_global_dtors_aux+0x16>
 8000290:	4804      	ldr	r0, [pc, #16]	@ (80002a4 <__do_global_dtors_aux+0x24>)
 8000292:	f3af 8000 	nop.w
 8000296:	2301      	movs	r3, #1
 8000298:	7023      	strb	r3, [r4, #0]
 800029a:	bd10      	pop	{r4, pc}
 800029c:	20000060 	.word	0x20000060
 80002a0:	00000000 	.word	0x00000000
 80002a4:	08009714 	.word	0x08009714

080002a8 <frame_dummy>:
 80002a8:	b508      	push	{r3, lr}
 80002aa:	4b05      	ldr	r3, [pc, #20]	@ (80002c0 <frame_dummy+0x18>)
 80002ac:	b11b      	cbz	r3, 80002b6 <frame_dummy+0xe>
 80002ae:	4905      	ldr	r1, [pc, #20]	@ (80002c4 <frame_dummy+0x1c>)
 80002b0:	4805      	ldr	r0, [pc, #20]	@ (80002c8 <frame_dummy+0x20>)
 80002b2:	f3af 8000 	nop.w
 80002b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80002ba:	f7ff bfcf 	b.w	800025c <register_tm_clones>
 80002be:	bf00      	nop
 80002c0:	00000000 	.word	0x00000000
 80002c4:	20000064 	.word	0x20000064
 80002c8:	08009714 	.word	0x08009714

080002cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b085      	sub	sp, #20
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f003 0307 	and.w	r3, r3, #7
 80002da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000310 <__NVIC_SetPriorityGrouping+0x44>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002e2:	68ba      	ldr	r2, [r7, #8]
 80002e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80002e8:	4013      	ands	r3, r2
 80002ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80002f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002fe:	4a04      	ldr	r2, [pc, #16]	@ (8000310 <__NVIC_SetPriorityGrouping+0x44>)
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	60d3      	str	r3, [r2, #12]
}
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000318:	4b04      	ldr	r3, [pc, #16]	@ (800032c <__NVIC_GetPriorityGrouping+0x18>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	0a1b      	lsrs	r3, r3, #8
 800031e:	f003 0307 	and.w	r3, r3, #7
}
 8000322:	4618      	mov	r0, r3
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	6039      	str	r1, [r7, #0]
 800033a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800033c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000340:	2b00      	cmp	r3, #0
 8000342:	db0a      	blt.n	800035a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	b2da      	uxtb	r2, r3
 8000348:	490c      	ldr	r1, [pc, #48]	@ (800037c <__NVIC_SetPriority+0x4c>)
 800034a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034e:	0112      	lsls	r2, r2, #4
 8000350:	b2d2      	uxtb	r2, r2
 8000352:	440b      	add	r3, r1
 8000354:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000358:	e00a      	b.n	8000370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	b2da      	uxtb	r2, r3
 800035e:	4908      	ldr	r1, [pc, #32]	@ (8000380 <__NVIC_SetPriority+0x50>)
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	f003 030f 	and.w	r3, r3, #15
 8000366:	3b04      	subs	r3, #4
 8000368:	0112      	lsls	r2, r2, #4
 800036a:	b2d2      	uxtb	r2, r2
 800036c:	440b      	add	r3, r1
 800036e:	761a      	strb	r2, [r3, #24]
}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	e000e100 	.word	0xe000e100
 8000380:	e000ed00 	.word	0xe000ed00

08000384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000384:	b480      	push	{r7}
 8000386:	b089      	sub	sp, #36	@ 0x24
 8000388:	af00      	add	r7, sp, #0
 800038a:	60f8      	str	r0, [r7, #12]
 800038c:	60b9      	str	r1, [r7, #8]
 800038e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	f003 0307 	and.w	r3, r3, #7
 8000396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000398:	69fb      	ldr	r3, [r7, #28]
 800039a:	f1c3 0307 	rsb	r3, r3, #7
 800039e:	2b04      	cmp	r3, #4
 80003a0:	bf28      	it	cs
 80003a2:	2304      	movcs	r3, #4
 80003a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	3304      	adds	r3, #4
 80003aa:	2b06      	cmp	r3, #6
 80003ac:	d902      	bls.n	80003b4 <NVIC_EncodePriority+0x30>
 80003ae:	69fb      	ldr	r3, [r7, #28]
 80003b0:	3b03      	subs	r3, #3
 80003b2:	e000      	b.n	80003b6 <NVIC_EncodePriority+0x32>
 80003b4:	2300      	movs	r3, #0
 80003b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80003bc:	69bb      	ldr	r3, [r7, #24]
 80003be:	fa02 f303 	lsl.w	r3, r2, r3
 80003c2:	43da      	mvns	r2, r3
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	401a      	ands	r2, r3
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	fa01 f303 	lsl.w	r3, r1, r3
 80003d6:	43d9      	mvns	r1, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003dc:	4313      	orrs	r3, r2
         );
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3724      	adds	r7, #36	@ 0x24
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
	...

080003ec <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80003f4:	4b08      	ldr	r3, [pc, #32]	@ (8000418 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80003f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80003f8:	4907      	ldr	r1, [pc, #28]	@ (8000418 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4313      	orrs	r3, r2
 80003fe:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000400:	4b05      	ldr	r3, [pc, #20]	@ (8000418 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000402:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4013      	ands	r3, r2
 8000408:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800040a:	68fb      	ldr	r3, [r7, #12]
}
 800040c:	bf00      	nop
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	40021000 	.word	0x40021000

0800041c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000424:	4b08      	ldr	r3, [pc, #32]	@ (8000448 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000426:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000428:	4907      	ldr	r1, [pc, #28]	@ (8000448 <LL_APB1_GRP1_EnableClock+0x2c>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4313      	orrs	r3, r2
 800042e:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000430:	4b05      	ldr	r3, [pc, #20]	@ (8000448 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000432:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4013      	ands	r3, r2
 8000438:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800043a:	68fb      	ldr	r3, [r7, #12]
}
 800043c:	bf00      	nop
 800043e:	3714      	adds	r7, #20
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000

0800044c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000454:	4b08      	ldr	r3, [pc, #32]	@ (8000478 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000456:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000458:	4907      	ldr	r1, [pc, #28]	@ (8000478 <LL_APB2_GRP1_EnableClock+0x2c>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4313      	orrs	r3, r2
 800045e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000460:	4b05      	ldr	r3, [pc, #20]	@ (8000478 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000462:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4013      	ands	r3, r2
 8000468:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800046a:	68fb      	ldr	r3, [r7, #12]
}
 800046c:	bf00      	nop
 800046e:	3714      	adds	r7, #20
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000

0800047c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	683a      	ldr	r2, [r7, #0]
 800048a:	619a      	str	r2, [r3, #24]
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	683a      	ldr	r2, [r7, #0]
 80004a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr

080004b4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80004c4:	4904      	ldr	r1, [pc, #16]	@ (80004d8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4313      	orrs	r3, r2
 80004ca:	600b      	str	r3, [r1, #0]
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	40007000 	.word	0x40007000

080004dc <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 80004e0:	4b07      	ldr	r3, [pc, #28]	@ (8000500 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80004e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80004ec:	d101      	bne.n	80004f2 <LL_PWR_IsActiveFlag_VOS+0x16>
 80004ee:	2301      	movs	r3, #1
 80004f0:	e000      	b.n	80004f4 <LL_PWR_IsActiveFlag_VOS+0x18>
 80004f2:	2300      	movs	r3, #0
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40007000 	.word	0x40007000

08000504 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000508:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <LL_RCC_MSI_Enable+0x1c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a04      	ldr	r2, [pc, #16]	@ (8000520 <LL_RCC_MSI_Enable+0x1c>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	6013      	str	r3, [r2, #0]
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000

08000524 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <LL_RCC_MSI_IsReady+0x20>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f003 0302 	and.w	r3, r3, #2
 8000530:	2b02      	cmp	r3, #2
 8000532:	d101      	bne.n	8000538 <LL_RCC_MSI_IsReady+0x14>
 8000534:	2301      	movs	r3, #1
 8000536:	e000      	b.n	800053a <LL_RCC_MSI_IsReady+0x16>
 8000538:	2300      	movs	r3, #0
}
 800053a:	4618      	mov	r0, r3
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	40021000 	.word	0x40021000

08000548 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 800054c:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a04      	ldr	r2, [pc, #16]	@ (8000564 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8000552:	f043 0308 	orr.w	r3, r3, #8
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000

08000568 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000570:	4b06      	ldr	r3, [pc, #24]	@ (800058c <LL_RCC_MSI_SetRange+0x24>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000578:	4904      	ldr	r1, [pc, #16]	@ (800058c <LL_RCC_MSI_SetRange+0x24>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4313      	orrs	r3, r2
 800057e:	600b      	str	r3, [r1, #0]
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	40021000 	.word	0x40021000

08000590 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000598:	4b07      	ldr	r3, [pc, #28]	@ (80005b8 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	4904      	ldr	r1, [pc, #16]	@ (80005b8 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80005a6:	4313      	orrs	r3, r2
 80005a8:	604b      	str	r3, [r1, #4]
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000

080005bc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80005c4:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <LL_RCC_SetSysClkSource+0x24>)
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	f023 0203 	bic.w	r2, r3, #3
 80005cc:	4904      	ldr	r1, [pc, #16]	@ (80005e0 <LL_RCC_SetSysClkSource+0x24>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	608b      	str	r3, [r1, #8]
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	40021000 	.word	0x40021000

080005e4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80005e8:	4b04      	ldr	r3, [pc, #16]	@ (80005fc <LL_RCC_GetSysClkSource+0x18>)
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	f003 030c 	and.w	r3, r3, #12
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000

08000600 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <LL_RCC_SetAHBPrescaler+0x24>)
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000610:	4904      	ldr	r1, [pc, #16]	@ (8000624 <LL_RCC_SetAHBPrescaler+0x24>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4313      	orrs	r3, r2
 8000616:	608b      	str	r3, [r1, #8]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	40021000 	.word	0x40021000

08000628 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000630:	4b06      	ldr	r3, [pc, #24]	@ (800064c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000638:	4904      	ldr	r1, [pc, #16]	@ (800064c <LL_RCC_SetAPB1Prescaler+0x24>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4313      	orrs	r3, r2
 800063e:	608b      	str	r3, [r1, #8]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	40021000 	.word	0x40021000

08000650 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <LL_RCC_SetAPB2Prescaler+0x24>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000660:	4904      	ldr	r1, [pc, #16]	@ (8000674 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4313      	orrs	r3, r2
 8000666:	608b      	str	r3, [r1, #8]
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	40021000 	.word	0x40021000

08000678 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	601a      	str	r2, [r3, #0]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	f023 0210 	bic.w	r2, r3, #16
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	431a      	orrs	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	605a      	str	r2, [r3, #4]
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	f043 0208 	orr.w	r2, r3, #8
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	605a      	str	r2, [r3, #4]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 80006de:	b480      	push	{r7}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d101      	bne.n	80006f6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80006f2:	2301      	movs	r3, #1
 80006f4:	e000      	b.n	80006f8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	f003 0302 	and.w	r3, r3, #2
 8000714:	2b02      	cmp	r3, #2
 8000716:	d101      	bne.n	800071c <LL_SPI_IsActiveFlag_TXE+0x18>
 8000718:	2301      	movs	r3, #1
 800071a:	e000      	b.n	800071e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	330c      	adds	r3, #12
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b2db      	uxtb	r3, r3
}
 800073a:	4618      	mov	r0, r3
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000746:	b480      	push	{r7}
 8000748:	b085      	sub	sp, #20
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
 800074e:	460b      	mov	r3, r1
 8000750:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	330c      	adds	r3, #12
 8000756:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	78fa      	ldrb	r2, [r7, #3]
 800075c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800075e:	bf00      	nop
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
	...

0800076c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <LL_FLASH_SetLatency+0x24>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f023 0207 	bic.w	r2, r3, #7
 800077c:	4904      	ldr	r1, [pc, #16]	@ (8000790 <LL_FLASH_SetLatency+0x24>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4313      	orrs	r3, r2
 8000782:	600b      	str	r3, [r1, #0]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	40022000 	.word	0x40022000

08000794 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000798:	4b04      	ldr	r3, [pc, #16]	@ (80007ac <LL_FLASH_GetLatency+0x18>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f003 0307 	and.w	r3, r3, #7
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40022000 	.word	0x40022000

080007b0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b0d4      	sub	sp, #336	@ 0x150
 80007b4:	af02      	add	r7, sp, #8
    /* MCU
     * Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the
     * Systick. */
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80007b6:	2001      	movs	r0, #1
 80007b8:	f7ff fe48 	bl	800044c <LL_APB2_GRP1_EnableClock>
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80007bc:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80007c0:	f7ff fe2c 	bl	800041c <LL_APB1_GRP1_EnableClock>

    /* System interrupt init*/
    NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f7ff fd81 	bl	80002cc <__NVIC_SetPriorityGrouping>

    /* SysTick_IRQn interrupt configuration */
    NVIC_SetPriority(SysTick_IRQn,
 80007ca:	f7ff fda3 	bl	8000314 <__NVIC_GetPriorityGrouping>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2200      	movs	r2, #0
 80007d2:	210f      	movs	r1, #15
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fdd5 	bl	8000384 <NVIC_EncodePriority>
 80007da:	4603      	mov	r3, r0
 80007dc:	4619      	mov	r1, r3
 80007de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007e2:	f7ff fda5 	bl	8000330 <__NVIC_SetPriority>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80007e6:	f000 f903 	bl	80009f0 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80007ea:	f000 f99d 	bl	8000b28 <MX_GPIO_Init>
    MX_SPI2_Init();
 80007ee:	f000 f941 	bl	8000a74 <MX_SPI2_Init>

    /* USER CODE BEGIN 2 */


	// verify FRAM basic functionality
    LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 80007f2:	2140      	movs	r1, #64	@ 0x40
 80007f4:	4874      	ldr	r0, [pc, #464]	@ (80009c8 <main+0x218>)
 80007f6:	f7ff fe41 	bl	800047c <LL_GPIO_SetOutputPin>
	fram_init(&memory, SPI2, 0, 0, 0, 0);
 80007fa:	2300      	movs	r3, #0
 80007fc:	9301      	str	r3, [sp, #4]
 80007fe:	2300      	movs	r3, #0
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	2300      	movs	r3, #0
 8000804:	2200      	movs	r2, #0
 8000806:	4971      	ldr	r1, [pc, #452]	@ (80009cc <main+0x21c>)
 8000808:	4871      	ldr	r0, [pc, #452]	@ (80009d0 <main+0x220>)
 800080a:	f000 fddd 	bl	80013c8 <fram_init>

	char buf[12] = "hello world";
 800080e:	4a71      	ldr	r2, [pc, #452]	@ (80009d4 <main+0x224>)
 8000810:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000814:	ca07      	ldmia	r2, {r0, r1, r2}
 8000816:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char rbuf[12] = {0};
 800081a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]

	fram_read(&memory, SPI2, 0x69, (uint8_t *)rbuf, 12);
 8000826:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800082a:	220c      	movs	r2, #12
 800082c:	9200      	str	r2, [sp, #0]
 800082e:	2269      	movs	r2, #105	@ 0x69
 8000830:	4966      	ldr	r1, [pc, #408]	@ (80009cc <main+0x21c>)
 8000832:	4867      	ldr	r0, [pc, #412]	@ (80009d0 <main+0x220>)
 8000834:	f000 fe7c 	bl	8001530 <fram_read>
	fram_write(&memory, SPI2, 0x69, (uint8_t *)buf, 12);
 8000838:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800083c:	220c      	movs	r2, #12
 800083e:	9200      	str	r2, [sp, #0]
 8000840:	2269      	movs	r2, #105	@ 0x69
 8000842:	4962      	ldr	r1, [pc, #392]	@ (80009cc <main+0x21c>)
 8000844:	4862      	ldr	r0, [pc, #392]	@ (80009d0 <main+0x220>)
 8000846:	f000 fe31 	bl	80014ac <fram_write>
	fram_read(&memory, SPI2, 0x69, (uint8_t *)rbuf, 12);
 800084a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800084e:	220c      	movs	r2, #12
 8000850:	9200      	str	r2, [sp, #0]
 8000852:	2269      	movs	r2, #105	@ 0x69
 8000854:	495d      	ldr	r1, [pc, #372]	@ (80009cc <main+0x21c>)
 8000856:	485e      	ldr	r0, [pc, #376]	@ (80009d0 <main+0x220>)
 8000858:	f000 fe6a 	bl	8001530 <fram_read>
    /* Unregister work area */
    //f_mount(0, "", 0);


	//littleFS test
	disk_set_fram(&memory);	
 800085c:	485c      	ldr	r0, [pc, #368]	@ (80009d0 <main+0x220>)
 800085e:	f000 fea5 	bl	80015ac <disk_set_fram>
// variables used by the filesystem
lfs_t lfs;
lfs_file_t file;

// configuration of the filesystem is provided by this struct
const struct lfs_config cfg = {
 8000862:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000866:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800086a:	4618      	mov	r0, r3
 800086c:	2354      	movs	r3, #84	@ 0x54
 800086e:	461a      	mov	r2, r3
 8000870:	2100      	movs	r1, #0
 8000872:	f008 f909 	bl	8008a88 <memset>
 8000876:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800087a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800087e:	4a56      	ldr	r2, [pc, #344]	@ (80009d8 <main+0x228>)
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000886:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800088a:	4a54      	ldr	r2, [pc, #336]	@ (80009dc <main+0x22c>)
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000892:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000896:	4a52      	ldr	r2, [pc, #328]	@ (80009e0 <main+0x230>)
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800089e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80008a2:	4a50      	ldr	r2, [pc, #320]	@ (80009e4 <main+0x234>)
 80008a4:	611a      	str	r2, [r3, #16]
 80008a6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008aa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80008ae:	2201      	movs	r2, #1
 80008b0:	615a      	str	r2, [r3, #20]
 80008b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008b6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80008ba:	2201      	movs	r2, #1
 80008bc:	619a      	str	r2, [r3, #24]
 80008be:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008c2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80008c6:	2280      	movs	r2, #128	@ 0x80
 80008c8:	61da      	str	r2, [r3, #28]
 80008ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008ce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80008d2:	2240      	movs	r2, #64	@ 0x40
 80008d4:	621a      	str	r2, [r3, #32]
 80008d6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008da:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80008de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80008e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008e8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80008ec:	2201      	movs	r2, #1
 80008ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80008f0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80008f4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80008f8:	2210      	movs	r2, #16
 80008fa:	62da      	str	r2, [r3, #44]	@ 0x2c
};



    // mount the filesystem
    int err = lfs_mount(&lfs, &cfg);
 80008fc:	1d3a      	adds	r2, r7, #4
 80008fe:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000902:	4611      	mov	r1, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f007 fdaf 	bl	8008468 <lfs_mount>
 800090a:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144

    // reformat if we can't mount the filesystem
    // this should only happen on the first boot
    if (err) {
 800090e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000912:	2b00      	cmp	r3, #0
 8000914:	d00d      	beq.n	8000932 <main+0x182>
        lfs_format(&lfs, &cfg);
 8000916:	1d3a      	adds	r2, r7, #4
 8000918:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f007 fd8c 	bl	800843c <lfs_format>
        lfs_mount(&lfs, &cfg);
 8000924:	1d3a      	adds	r2, r7, #4
 8000926:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f007 fd9b 	bl	8008468 <lfs_mount>
    }

    // read current count
    uint32_t boot_count = 0;
 8000932:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000936:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
    lfs_file_open(&lfs, &file, "boot_count", LFS_O_RDWR | LFS_O_CREAT);
 800093e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000942:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8000946:	f240 1303 	movw	r3, #259	@ 0x103
 800094a:	4a27      	ldr	r2, [pc, #156]	@ (80009e8 <main+0x238>)
 800094c:	f007 fdb6 	bl	80084bc <lfs_file_open>
    lfs_file_read(&lfs, &file, &boot_count, sizeof(boot_count));
 8000950:	463a      	mov	r2, r7
 8000952:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000956:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 800095a:	2304      	movs	r3, #4
 800095c:	f007 fe0e 	bl	800857c <lfs_file_read>

    // update boot count
    boot_count += 1;
 8000960:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000964:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000970:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8000974:	601a      	str	r2, [r3, #0]
    lfs_file_rewind(&lfs, &file);
 8000976:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800097a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800097e:	4611      	mov	r1, r2
 8000980:	4618      	mov	r0, r3
 8000982:	f007 fe5b 	bl	800863c <lfs_file_rewind>
    lfs_file_write(&lfs, &file, &boot_count, sizeof(boot_count));
 8000986:	463a      	mov	r2, r7
 8000988:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800098c:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8000990:	2304      	movs	r3, #4
 8000992:	f007 fe23 	bl	80085dc <lfs_file_write>

    // remember the storage is not updated until the file is closed successfully
    lfs_file_close(&lfs, &file);
 8000996:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800099a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f007 fdbf 	bl	8008524 <lfs_file_close>

    // release any resources we were using
    lfs_unmount(&lfs);
 80009a6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80009aa:	4618      	mov	r0, r3
 80009ac:	f007 fd72 	bl	8008494 <lfs_unmount>

    // print the boot count
    printf("boot_count: %d\n", boot_count);
 80009b0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80009b4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4619      	mov	r1, r3
 80009bc:	480b      	ldr	r0, [pc, #44]	@ (80009ec <main+0x23c>)
 80009be:	f008 f841 	bl	8008a44 <iprintf>

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
 80009c2:	bf00      	nop
 80009c4:	e7fd      	b.n	80009c2 <main+0x212>
 80009c6:	bf00      	nop
 80009c8:	48000400 	.word	0x48000400
 80009cc:	40003800 	.word	0x40003800
 80009d0:	2000007c 	.word	0x2000007c
 80009d4:	08009748 	.word	0x08009748
 80009d8:	080015cd 	.word	0x080015cd
 80009dc:	08001689 	.word	0x08001689
 80009e0:	08001745 	.word	0x08001745
 80009e4:	080017b9 	.word	0x080017b9
 80009e8:	0800972c 	.word	0x0800972c
 80009ec:	08009738 	.word	0x08009738

080009f0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
    LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f7ff feb9 	bl	800076c <LL_FLASH_SetLatency>
    while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0) {
 80009fa:	bf00      	nop
 80009fc:	f7ff feca 	bl	8000794 <LL_FLASH_GetLatency>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d1fa      	bne.n	80009fc <SystemClock_Config+0xc>
    }
    LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000a06:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a0a:	f7ff fd53 	bl	80004b4 <LL_PWR_SetRegulVoltageScaling>
    while (LL_PWR_IsActiveFlag_VOS() != 0) {
 8000a0e:	bf00      	nop
 8000a10:	f7ff fd64 	bl	80004dc <LL_PWR_IsActiveFlag_VOS>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d1fa      	bne.n	8000a10 <SystemClock_Config+0x20>
    }
    LL_RCC_MSI_Enable();
 8000a1a:	f7ff fd73 	bl	8000504 <LL_RCC_MSI_Enable>

    /* Wait till MSI is ready */
    while (LL_RCC_MSI_IsReady() != 1) {
 8000a1e:	bf00      	nop
 8000a20:	f7ff fd80 	bl	8000524 <LL_RCC_MSI_IsReady>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d1fa      	bne.n	8000a20 <SystemClock_Config+0x30>
    }
    LL_RCC_MSI_EnableRangeSelection();
 8000a2a:	f7ff fd8d 	bl	8000548 <LL_RCC_MSI_EnableRangeSelection>
    LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8000a2e:	2060      	movs	r0, #96	@ 0x60
 8000a30:	f7ff fd9a 	bl	8000568 <LL_RCC_MSI_SetRange>
    LL_RCC_MSI_SetCalibTrimming(0);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f7ff fdab 	bl	8000590 <LL_RCC_MSI_SetCalibTrimming>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff fdbe 	bl	80005bc <LL_RCC_SetSysClkSource>

    /* Wait till System clock is ready */
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI) {
 8000a40:	bf00      	nop
 8000a42:	f7ff fdcf 	bl	80005e4 <LL_RCC_GetSysClkSource>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1fa      	bne.n	8000a42 <SystemClock_Config+0x52>
    }
    LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f7ff fdd7 	bl	8000600 <LL_RCC_SetAHBPrescaler>
    LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000a52:	2000      	movs	r0, #0
 8000a54:	f7ff fde8 	bl	8000628 <LL_RCC_SetAPB1Prescaler>
    LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff fdf9 	bl	8000650 <LL_RCC_SetAPB2Prescaler>

    LL_Init1msTick(4000000);
 8000a5e:	4804      	ldr	r0, [pc, #16]	@ (8000a70 <SystemClock_Config+0x80>)
 8000a60:	f000 fc78 	bl	8001354 <LL_Init1msTick>

    LL_SetSystemCoreClock(4000000);
 8000a64:	4802      	ldr	r0, [pc, #8]	@ (8000a70 <SystemClock_Config+0x80>)
 8000a66:	f000 fc83 	bl	8001370 <LL_SetSystemCoreClock>
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	003d0900 	.word	0x003d0900

08000a74 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b090      	sub	sp, #64	@ 0x40
 8000a78:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SPI2_Init 0 */

    /* USER CODE END SPI2_Init 0 */

    LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000a7a:	f107 0318 	add.w	r3, r7, #24
 8000a7e:	2228      	movs	r2, #40	@ 0x28
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f008 f800 	bl	8008a88 <memset>

    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	463b      	mov	r3, r7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
 8000a96:	615a      	str	r2, [r3, #20]

    /* Peripheral clock enable */
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8000a98:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000a9c:	f7ff fcbe 	bl	800041c <LL_APB1_GRP1_EnableClock>

    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f7ff fca3 	bl	80003ec <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB13   ------> SPI2_SCK
    PB14   ------> SPI2_MISO
    PB15   ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LL_GPIO_PIN_13 | LL_GPIO_PIN_14 | LL_GPIO_PIN_15;
 8000aa6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000aaa:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000aac:	2302      	movs	r3, #2
 8000aae:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000abc:	2305      	movs	r3, #5
 8000abe:	617b      	str	r3, [r7, #20]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4816      	ldr	r0, [pc, #88]	@ (8000b20 <MX_SPI2_Init+0xac>)
 8000ac6:	f000 fb2f 	bl	8001128 <LL_GPIO_Init>

    /* USER CODE BEGIN SPI2_Init 1 */

    /* USER CODE END SPI2_Init 1 */
    /* SPI2 parameter configuration*/
    SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
    SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000ace:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000ad2:	61fb      	str	r3, [r7, #28]
    SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000ad4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000ad8:	623b      	str	r3, [r7, #32]
    SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
    SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000ae2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8000ae8:	2308      	movs	r3, #8
 8000aea:	633b      	str	r3, [r7, #48]	@ 0x30
    SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000aec:	2300      	movs	r3, #0
 8000aee:	637b      	str	r3, [r7, #52]	@ 0x34
    SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	63bb      	str	r3, [r7, #56]	@ 0x38
    SPI_InitStruct.CRCPoly = 7;
 8000af4:	2307      	movs	r3, #7
 8000af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    LL_SPI_Init(SPI2, &SPI_InitStruct);
 8000af8:	f107 0318 	add.w	r3, r7, #24
 8000afc:	4619      	mov	r1, r3
 8000afe:	4809      	ldr	r0, [pc, #36]	@ (8000b24 <MX_SPI2_Init+0xb0>)
 8000b00:	f000 fbb6 	bl	8001270 <LL_SPI_Init>
    LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8000b04:	2100      	movs	r1, #0
 8000b06:	4807      	ldr	r0, [pc, #28]	@ (8000b24 <MX_SPI2_Init+0xb0>)
 8000b08:	f7ff fdc6 	bl	8000698 <LL_SPI_SetStandard>
    LL_SPI_EnableNSSPulseMgt(SPI2);
 8000b0c:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <MX_SPI2_Init+0xb0>)
 8000b0e:	f7ff fdd6 	bl	80006be <LL_SPI_EnableNSSPulseMgt>
    /* USER CODE BEGIN SPI2_Init 2 */

    LL_SPI_Enable(SPI2);
 8000b12:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <MX_SPI2_Init+0xb0>)
 8000b14:	f7ff fdb0 	bl	8000678 <LL_SPI_Enable>

    /* USER CODE END SPI2_Init 2 */
}
 8000b18:	bf00      	nop
 8000b1a:	3740      	adds	r7, #64	@ 0x40
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	48000400 	.word	0x48000400
 8000b24:	40003800 	.word	0x40003800

08000b28 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	463b      	mov	r3, r7
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
 8000b3c:	615a      	str	r2, [r3, #20]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000b3e:	2002      	movs	r0, #2
 8000b40:	f7ff fc54 	bl	80003ec <LL_AHB2_GRP1_EnableClock>

    /**/
    LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8000b44:	2140      	movs	r1, #64	@ 0x40
 8000b46:	480b      	ldr	r0, [pc, #44]	@ (8000b74 <MX_GPIO_Init+0x4c>)
 8000b48:	f7ff fca6 	bl	8000498 <LL_GPIO_ResetOutputPin>

    /**/
    GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000b4c:	2340      	movs	r3, #64	@ 0x40
 8000b4e:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b50:	2301      	movs	r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b60:	463b      	mov	r3, r7
 8000b62:	4619      	mov	r1, r3
 8000b64:	4803      	ldr	r0, [pc, #12]	@ (8000b74 <MX_GPIO_Init+0x4c>)
 8000b66:	f000 fadf 	bl	8001128 <LL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	48000400 	.word	0x48000400

08000b78 <spi_read>:
    /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void spi_read(SPI_TypeDef *spix, uint8_t *const buf,
                              uint32_t num_bytes) {
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b087      	sub	sp, #28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < num_bytes; i++) {
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	e00b      	b.n	8000ba2 <spi_read+0x2a>
	    buf[i] = SPI_TxRx(spix, 0x00);
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	68ba      	ldr	r2, [r7, #8]
 8000b8e:	18d4      	adds	r4, r2, r3
 8000b90:	2100      	movs	r1, #0
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f000 f82b 	bl	8000bee <SPI_TxRx>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < num_bytes; i++) {
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d8ef      	bhi.n	8000b8a <spi_read+0x12>
    }
}
 8000baa:	bf00      	nop
 8000bac:	bf00      	nop
 8000bae:	371c      	adds	r7, #28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd90      	pop	{r4, r7, pc}

08000bb4 <spi_write>:

void spi_write(SPI_TypeDef *spix, const uint8_t *const buf,
                               uint32_t num_bytes) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < num_bytes; i++) SPI_TxRx(spix, buf[i]);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	e00a      	b.n	8000bdc <spi_write+0x28>
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	4413      	add	r3, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	4619      	mov	r1, r3
 8000bd0:	68f8      	ldr	r0, [r7, #12]
 8000bd2:	f000 f80c 	bl	8000bee <SPI_TxRx>
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d8f0      	bhi.n	8000bc6 <spi_write+0x12>
	// LL_SPI_ReceiveData8(spix);
	// LL_SPI_ReceiveData8(spix);
	// LL_SPI_ReceiveData8(spix);
	// LL_SPI_ReceiveData8(spix);
	// LL_SPI_ReceiveData8(spix);
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <SPI_TxRx>:

// Lifted and modified from https://github.com/eziya/STM32_LL_EXAMPLES
// is blocking
static uint8_t SPI_TxRx(SPI_TypeDef *spix, uint8_t data) {
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	70fb      	strb	r3, [r7, #3]
  // transmit
  LL_SPI_TransmitData8(spix, data);
 8000bfa:	78fb      	ldrb	r3, [r7, #3]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff fda1 	bl	8000746 <LL_SPI_TransmitData8>
  while(!LL_SPI_IsActiveFlag_TXE(spix));
 8000c04:	bf00      	nop
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff fd7c 	bl	8000704 <LL_SPI_IsActiveFlag_TXE>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0f9      	beq.n	8000c06 <SPI_TxRx+0x18>

  // receive
  while(!LL_SPI_IsActiveFlag_RXNE(spix));
 8000c12:	bf00      	nop
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff fd62 	bl	80006de <LL_SPI_IsActiveFlag_RXNE>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d0f9      	beq.n	8000c14 <SPI_TxRx+0x26>
  return LL_SPI_ReceiveData8(spix);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff fd82 	bl	800072a <LL_SPI_ReceiveData8>
 8000c26:	4603      	mov	r3, r0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <NMI_Handler+0x4>

08000c38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <MemManage_Handler+0x4>

08000c48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return 1;
 8000c94:	2301      	movs	r3, #1
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <_kill>:

int _kill(int pid, int sig)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000caa:	f007 ff33 	bl	8008b14 <__errno>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2216      	movs	r2, #22
 8000cb2:	601a      	str	r2, [r3, #0]
  return -1;
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <_exit>:

void _exit (int status)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000cc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ffe7 	bl	8000ca0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cd2:	bf00      	nop
 8000cd4:	e7fd      	b.n	8000cd2 <_exit+0x12>

08000cd6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	e00a      	b.n	8000cfe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ce8:	f3af 8000 	nop.w
 8000cec:	4601      	mov	r1, r0
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	1c5a      	adds	r2, r3, #1
 8000cf2:	60ba      	str	r2, [r7, #8]
 8000cf4:	b2ca      	uxtb	r2, r1
 8000cf6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	dbf0      	blt.n	8000ce8 <_read+0x12>
  }

  return len;
 8000d06:	687b      	ldr	r3, [r7, #4]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	e009      	b.n	8000d36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	60ba      	str	r2, [r7, #8]
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	3301      	adds	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	697a      	ldr	r2, [r7, #20]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	dbf1      	blt.n	8000d22 <_write+0x12>
  }
  return len;
 8000d3e:	687b      	ldr	r3, [r7, #4]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <_close>:

int _close(int file)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d70:	605a      	str	r2, [r3, #4]
  return 0;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <_isatty>:

int _isatty(int file)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d88:	2301      	movs	r3, #1
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b085      	sub	sp, #20
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	@ (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	@ (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f007 fe98 	bl	8008b14 <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	@ (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000a000 	.word	0x2000a000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	20000090 	.word	0x20000090
 8000e18:	200001e8 	.word	0x200001e8

08000e1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	@ (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e44:	f7ff ffea 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e48:	480c      	ldr	r0, [pc, #48]	@ (8000e7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e4a:	490d      	ldr	r1, [pc, #52]	@ (8000e80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e84 <LoopForever+0xe>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e60:	4c0a      	ldr	r4, [pc, #40]	@ (8000e8c <LoopForever+0x16>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f007 fe57 	bl	8008b20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e72:	f7ff fc9d 	bl	80007b0 <main>

08000e76 <LoopForever>:

LoopForever:
    b LoopForever
 8000e76:	e7fe      	b.n	8000e76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e78:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e84:	0800a68c 	.word	0x0800a68c
  ldr r2, =_sbss
 8000e88:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e8c:	200001e4 	.word	0x200001e4

08000e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC1_2_IRQHandler>

08000e92 <LL_GPIO_SetPinMode>:
{
 8000e92:	b480      	push	{r7}
 8000e94:	b08b      	sub	sp, #44	@ 0x2c
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	fa93 f3a3 	rbit	r3, r3
 8000eac:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d101      	bne.n	8000ebc <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000eb8:	2320      	movs	r3, #32
 8000eba:	e003      	b.n	8000ec4 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	fab3 f383 	clz	r3, r3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2103      	movs	r1, #3
 8000ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	401a      	ands	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed4:	6a3b      	ldr	r3, [r7, #32]
 8000ed6:	fa93 f3a3 	rbit	r3, r3
 8000eda:	61fb      	str	r3, [r7, #28]
  return result;
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	e003      	b.n	8000ef2 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eec:	fab3 f383 	clz	r3, r3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	431a      	orrs	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	601a      	str	r2, [r3, #0]
}
 8000f00:	bf00      	nop
 8000f02:	372c      	adds	r7, #44	@ 0x2c
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_GPIO_SetPinOutputType>:
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	401a      	ands	r2, r3
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	fb01 f303 	mul.w	r3, r1, r3
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	605a      	str	r2, [r3, #4]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <LL_GPIO_SetPinSpeed>:
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b08b      	sub	sp, #44	@ 0x2c
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa93 f3a3 	rbit	r3, r3
 8000f56:	613b      	str	r3, [r7, #16]
  return result;
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000f62:	2320      	movs	r3, #32
 8000f64:	e003      	b.n	8000f6e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	fab3 f383 	clz	r3, r3
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	2103      	movs	r1, #3
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	401a      	ands	r2, r3
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
 8000f80:	fa93 f3a3 	rbit	r3, r3
 8000f84:	61fb      	str	r3, [r7, #28]
  return result;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8000f90:	2320      	movs	r3, #32
 8000f92:	e003      	b.n	8000f9c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f96:	fab3 f383 	clz	r3, r3
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	609a      	str	r2, [r3, #8]
}
 8000faa:	bf00      	nop
 8000fac:	372c      	adds	r7, #44	@ 0x2c
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <LL_GPIO_SetPinPull>:
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b08b      	sub	sp, #44	@ 0x2c
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	fa93 f3a3 	rbit	r3, r3
 8000fd0:	613b      	str	r3, [r7, #16]
  return result;
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000fdc:	2320      	movs	r3, #32
 8000fde:	e003      	b.n	8000fe8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fab3 f383 	clz	r3, r3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2103      	movs	r1, #3
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff8:	6a3b      	ldr	r3, [r7, #32]
 8000ffa:	fa93 f3a3 	rbit	r3, r3
 8000ffe:	61fb      	str	r3, [r7, #28]
  return result;
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800100a:	2320      	movs	r3, #32
 800100c:	e003      	b.n	8001016 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800100e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001010:	fab3 f383 	clz	r3, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	431a      	orrs	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	60da      	str	r2, [r3, #12]
}
 8001024:	bf00      	nop
 8001026:	372c      	adds	r7, #44	@ 0x2c
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_GPIO_SetAFPin_0_7>:
{
 8001030:	b480      	push	{r7}
 8001032:	b08b      	sub	sp, #44	@ 0x2c
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6a1a      	ldr	r2, [r3, #32]
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa93 f3a3 	rbit	r3, r3
 800104a:	613b      	str	r3, [r7, #16]
  return result;
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001056:	2320      	movs	r3, #32
 8001058:	e003      	b.n	8001062 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	fab3 f383 	clz	r3, r3
 8001060:	b2db      	uxtb	r3, r3
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	210f      	movs	r1, #15
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	401a      	ands	r2, r3
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	fa93 f3a3 	rbit	r3, r3
 8001078:	61fb      	str	r3, [r7, #28]
  return result;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001084:	2320      	movs	r3, #32
 8001086:	e003      	b.n	8001090 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108a:	fab3 f383 	clz	r3, r3
 800108e:	b2db      	uxtb	r3, r3
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	fa01 f303 	lsl.w	r3, r1, r3
 8001098:	431a      	orrs	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	621a      	str	r2, [r3, #32]
}
 800109e:	bf00      	nop
 80010a0:	372c      	adds	r7, #44	@ 0x2c
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <LL_GPIO_SetAFPin_8_15>:
{
 80010aa:	b480      	push	{r7}
 80010ac:	b08b      	sub	sp, #44	@ 0x2c
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa93 f3a3 	rbit	r3, r3
 80010c6:	613b      	str	r3, [r7, #16]
  return result;
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80010d2:	2320      	movs	r3, #32
 80010d4:	e003      	b.n	80010de <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	fab3 f383 	clz	r3, r3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	210f      	movs	r1, #15
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	401a      	ands	r2, r3
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f0:	6a3b      	ldr	r3, [r7, #32]
 80010f2:	fa93 f3a3 	rbit	r3, r3
 80010f6:	61fb      	str	r3, [r7, #28]
  return result;
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80010fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001102:	2320      	movs	r3, #32
 8001104:	e003      	b.n	800110e <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001108:	fab3 f383 	clz	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	431a      	orrs	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800111c:	bf00      	nop
 800111e:	372c      	adds	r7, #44	@ 0x2c
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	fa93 f3a3 	rbit	r3, r3
 800113e:	60fb      	str	r3, [r7, #12]
  return result;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <LL_GPIO_Init+0x26>
    return 32U;
 800114a:	2320      	movs	r3, #32
 800114c:	e003      	b.n	8001156 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	fab3 f383 	clz	r3, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001158:	e048      	b.n	80011ec <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	2101      	movs	r1, #1
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d03a      	beq.n	80011e6 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d003      	beq.n	8001180 <LL_GPIO_Init+0x58>
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d10e      	bne.n	800119e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	461a      	mov	r2, r3
 8001186:	69b9      	ldr	r1, [r7, #24]
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff fed7 	bl	8000f3c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	6819      	ldr	r1, [r3, #0]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	461a      	mov	r2, r3
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff feb7 	bl	8000f0c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	461a      	mov	r2, r3
 80011a4:	69b9      	ldr	r1, [r7, #24]
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ff05 	bl	8000fb6 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d111      	bne.n	80011d8 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	2bff      	cmp	r3, #255	@ 0xff
 80011b8:	d807      	bhi.n	80011ca <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	461a      	mov	r2, r3
 80011c0:	69b9      	ldr	r1, [r7, #24]
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ff34 	bl	8001030 <LL_GPIO_SetAFPin_0_7>
 80011c8:	e006      	b.n	80011d8 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	461a      	mov	r2, r3
 80011d0:	69b9      	ldr	r1, [r7, #24]
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ff69 	bl	80010aa <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	461a      	mov	r2, r3
 80011de:	69b9      	ldr	r1, [r7, #24]
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff fe56 	bl	8000e92 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3301      	adds	r3, #1
 80011ea:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	fa22 f303 	lsr.w	r3, r2, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1af      	bne.n	800115a <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3720      	adds	r7, #32
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <LL_SPI_IsEnabled>:
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001214:	2b40      	cmp	r3, #64	@ 0x40
 8001216:	d101      	bne.n	800121c <LL_SPI_IsEnabled+0x18>
 8001218:	2301      	movs	r3, #1
 800121a:	e000      	b.n	800121e <LL_SPI_IsEnabled+0x1a>
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <LL_SPI_SetRxFIFOThreshold>:
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	605a      	str	r2, [r3, #4]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_SPI_SetCRCPolynomial>:
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	461a      	mov	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	611a      	str	r2, [r3, #16]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ffc0 	bl	8001204 <LL_SPI_IsEnabled>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d145      	bne.n	8001316 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001292:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	6811      	ldr	r1, [r2, #0]
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	6852      	ldr	r2, [r2, #4]
 800129e:	4311      	orrs	r1, r2
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	68d2      	ldr	r2, [r2, #12]
 80012a4:	4311      	orrs	r1, r2
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	6912      	ldr	r2, [r2, #16]
 80012aa:	4311      	orrs	r1, r2
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	6952      	ldr	r2, [r2, #20]
 80012b0:	4311      	orrs	r1, r2
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	6992      	ldr	r2, [r2, #24]
 80012b6:	4311      	orrs	r1, r2
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	69d2      	ldr	r2, [r2, #28]
 80012bc:	4311      	orrs	r1, r2
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	6a12      	ldr	r2, [r2, #32]
 80012c2:	430a      	orrs	r2, r1
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80012d2:	f023 0304 	bic.w	r3, r3, #4
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	6891      	ldr	r1, [r2, #8]
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	6952      	ldr	r2, [r2, #20]
 80012de:	0c12      	lsrs	r2, r2, #16
 80012e0:	430a      	orrs	r2, r1
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80012f0:	d204      	bcs.n	80012fc <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 80012f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ff97 	bl	800122a <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001304:	d105      	bne.n	8001312 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130a:	4619      	mov	r1, r3
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff9f 	bl	8001250 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8001312:	2300      	movs	r3, #0
 8001314:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001316:	7bfb      	ldrb	r3, [r7, #15]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	4a07      	ldr	r2, [pc, #28]	@ (8001350 <LL_InitTick+0x30>)
 8001334:	3b01      	subs	r3, #1
 8001336:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <LL_InitTick+0x30>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133e:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <LL_InitTick+0x30>)
 8001340:	2205      	movs	r2, #5
 8001342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000e010 	.word	0xe000e010

08001354 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800135c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ffdd 	bl	8001320 <LL_InitTick>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001378:	4a04      	ldr	r2, [pc, #16]	@ (800138c <LL_SetSystemCoreClock+0x1c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000000 	.word	0x20000000

08001390 <LL_GPIO_SetOutputPin>:
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	619a      	str	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_GPIO_ResetOutputPin>:
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <fram_init>:
int fram_wrsr(fram_t *dev);
int fram_get_id(fram_t *dev);


int fram_init(fram_t *dev, SPI_TypeDef *SPIx, uint8_t cs_pin, uint8_t sck_pin,
              uint8_t mosi_pin, uint8_t miso_pin) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	4611      	mov	r1, r2
 80013d4:	461a      	mov	r2, r3
 80013d6:	460b      	mov	r3, r1
 80013d8:	71fb      	strb	r3, [r7, #7]
 80013da:	4613      	mov	r3, r2
 80013dc:	71bb      	strb	r3, [r7, #6]
    dev->spi_device = SPIx;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	601a      	str	r2, [r3, #0]

    dev->cs_pin = cs_pin;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	79fa      	ldrb	r2, [r7, #7]
 80013e8:	711a      	strb	r2, [r3, #4]
    dev->sck_pin = sck_pin;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	79ba      	ldrb	r2, [r7, #6]
 80013ee:	715a      	strb	r2, [r3, #5]
    dev->mosi_pin = mosi_pin;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	7e3a      	ldrb	r2, [r7, #24]
 80013f4:	719a      	strb	r2, [r3, #6]
    dev->miso_pin = miso_pin;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	7f3a      	ldrb	r2, [r7, #28]
 80013fa:	71da      	strb	r2, [r3, #7]

    dev->wp_pin = 255;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	22ff      	movs	r2, #255	@ 0xff
 8001400:	721a      	strb	r2, [r3, #8]
    dev->hold_pin = 255;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	22ff      	movs	r2, #255	@ 0xff
 8001406:	725a      	strb	r2, [r3, #9]

	// TODO actually make this driver use the given CS pin
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8001408:	2140      	movs	r1, #64	@ 0x40
 800140a:	4805      	ldr	r0, [pc, #20]	@ (8001420 <fram_init+0x58>)
 800140c:	f7ff ffc0 	bl	8001390 <LL_GPIO_SetOutputPin>

    fram_get_id(dev);
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f000 f807 	bl	8001424 <fram_get_id>

    return 0;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	48000400 	.word	0x48000400

08001424 <fram_get_id>:

int fram_get_id(fram_t *dev) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
    uint8_t cmd = RDID_CMD;
 800142c:	239f      	movs	r3, #159	@ 0x9f
 800142e:	73fb      	strb	r3, [r7, #15]

    LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8001430:	2140      	movs	r1, #64	@ 0x40
 8001432:	480e      	ldr	r0, [pc, #56]	@ (800146c <fram_get_id+0x48>)
 8001434:	f7ff ffba 	bl	80013ac <LL_GPIO_ResetOutputPin>

    spi_write(dev->spi_device, &cmd, 1);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f107 010f 	add.w	r1, r7, #15
 8001440:	2201      	movs	r2, #1
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fbb6 	bl	8000bb4 <spi_write>

    spi_read(dev->spi_device, (uint8_t *)&(dev->device_id), 4);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3310      	adds	r3, #16
 8001450:	2204      	movs	r2, #4
 8001452:	4619      	mov	r1, r3
 8001454:	f7ff fb90 	bl	8000b78 <spi_read>

    LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8001458:	2140      	movs	r1, #64	@ 0x40
 800145a:	4804      	ldr	r0, [pc, #16]	@ (800146c <fram_get_id+0x48>)
 800145c:	f7ff ff98 	bl	8001390 <LL_GPIO_SetOutputPin>

    return 0;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	48000400 	.word	0x48000400

08001470 <fram_wren>:

// TODO actually check for errors
// Set write enable latch (enable writes)
int fram_wren(fram_t *dev) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	uint8_t cmd = WREN_CMD;
 8001478:	2306      	movs	r3, #6
 800147a:	73fb      	strb	r3, [r7, #15]

    LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 800147c:	2140      	movs	r1, #64	@ 0x40
 800147e:	480a      	ldr	r0, [pc, #40]	@ (80014a8 <fram_wren+0x38>)
 8001480:	f7ff ff94 	bl	80013ac <LL_GPIO_ResetOutputPin>

    spi_write(dev->spi_device, &cmd, 1);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f107 010f 	add.w	r1, r7, #15
 800148c:	2201      	movs	r2, #1
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fb90 	bl	8000bb4 <spi_write>

    LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8001494:	2140      	movs	r1, #64	@ 0x40
 8001496:	4804      	ldr	r0, [pc, #16]	@ (80014a8 <fram_wren+0x38>)
 8001498:	f7ff ff7a 	bl	8001390 <LL_GPIO_SetOutputPin>

	return 0;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	48000400 	.word	0x48000400

080014ac <fram_write>:
int fram_wrsr(fram_t *dev) {
	// TODO
	return -1;
}

int fram_write(fram_t *dev, SPI_TypeDef *SPIx, uint32_t addr, uint8_t *buf, uint32_t num_bytes) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
	uint8_t cmd = WRITE_CMD;
 80014ba:	2302      	movs	r3, #2
 80014bc:	75fb      	strb	r3, [r7, #23]
	
	uint8_t addr_byte_1 = (addr >> 8) & 0xFF;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	75bb      	strb	r3, [r7, #22]
	uint8_t addr_byte_2 = addr & 0xFF;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	757b      	strb	r3, [r7, #21]

	fram_wren(dev);
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f7ff ffcf 	bl	8001470 <fram_wren>

	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 80014d2:	2140      	movs	r1, #64	@ 0x40
 80014d4:	4815      	ldr	r0, [pc, #84]	@ (800152c <fram_write+0x80>)
 80014d6:	f7ff ff69 	bl	80013ac <LL_GPIO_ResetOutputPin>

    spi_write(dev->spi_device, &cmd, 1);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f107 0117 	add.w	r1, r7, #23
 80014e2:	2201      	movs	r2, #1
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fb65 	bl	8000bb4 <spi_write>

	spi_write(dev->spi_device, &addr_byte_1, 1);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f107 0116 	add.w	r1, r7, #22
 80014f2:	2201      	movs	r2, #1
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fb5d 	bl	8000bb4 <spi_write>
	spi_write(dev->spi_device, &addr_byte_2, 1);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f107 0115 	add.w	r1, r7, #21
 8001502:	2201      	movs	r2, #1
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fb55 	bl	8000bb4 <spi_write>

	spi_write(dev->spi_device, buf, num_bytes);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6a3a      	ldr	r2, [r7, #32]
 8001510:	6839      	ldr	r1, [r7, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fb4e 	bl	8000bb4 <spi_write>

    LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8001518:	2140      	movs	r1, #64	@ 0x40
 800151a:	4804      	ldr	r0, [pc, #16]	@ (800152c <fram_write+0x80>)
 800151c:	f7ff ff38 	bl	8001390 <LL_GPIO_SetOutputPin>

	return 0;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	48000400 	.word	0x48000400

08001530 <fram_read>:

int fram_read(fram_t *dev, SPI_TypeDef *SPIx, uint32_t addr, uint8_t *buf, uint32_t num_bytes) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	603b      	str	r3, [r7, #0]
	uint8_t cmd = READ_CMD;
 800153e:	2303      	movs	r3, #3
 8001540:	75fb      	strb	r3, [r7, #23]
	
	uint8_t addr_byte_1 = (addr >> 8) & 0xFF;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	b2db      	uxtb	r3, r3
 8001548:	75bb      	strb	r3, [r7, #22]
	uint8_t addr_byte_2 = addr & 0xFF;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	757b      	strb	r3, [r7, #21]

	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8001550:	2140      	movs	r1, #64	@ 0x40
 8001552:	4815      	ldr	r0, [pc, #84]	@ (80015a8 <fram_read+0x78>)
 8001554:	f7ff ff2a 	bl	80013ac <LL_GPIO_ResetOutputPin>

    spi_write(dev->spi_device, &cmd, 1);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f107 0117 	add.w	r1, r7, #23
 8001560:	2201      	movs	r2, #1
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fb26 	bl	8000bb4 <spi_write>

	spi_write(dev->spi_device, &addr_byte_1, 1);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f107 0116 	add.w	r1, r7, #22
 8001570:	2201      	movs	r2, #1
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fb1e 	bl	8000bb4 <spi_write>
	spi_write(dev->spi_device, &addr_byte_2, 1);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f107 0115 	add.w	r1, r7, #21
 8001580:	2201      	movs	r2, #1
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fb16 	bl	8000bb4 <spi_write>

	spi_read(dev->spi_device, buf, num_bytes);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6a3a      	ldr	r2, [r7, #32]
 800158e:	6839      	ldr	r1, [r7, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff faf1 	bl	8000b78 <spi_read>

    LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8001596:	2140      	movs	r1, #64	@ 0x40
 8001598:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <fram_read+0x78>)
 800159a:	f7ff fef9 	bl	8001390 <LL_GPIO_SetOutputPin>
	
	return 0;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	48000400 	.word	0x48000400

080015ac <disk_set_fram>:

static uint32_t init_flag = 0;

static fram_t *memory = NULL;

void disk_set_fram(fram_t *dev) {
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	memory = dev;
 80015b4:	4a04      	ldr	r2, [pc, #16]	@ (80015c8 <disk_set_fram+0x1c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000094 	.word	0x20000094

080015cc <fs_flash_read>:
    return timestamp;
}

int fs_flash_read(const struct lfs_config *cfg, lfs_block_t block,
        lfs_off_t off, void *buffer, lfs_size_t size)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af02      	add	r7, sp, #8
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	603b      	str	r3, [r7, #0]
    assert(off  % cfg->read_size == 0);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	695a      	ldr	r2, [r3, #20]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80015e4:	fb01 f202 	mul.w	r2, r1, r2
 80015e8:	1a9b      	subs	r3, r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d005      	beq.n	80015fa <fs_flash_read+0x2e>
 80015ee:	4b20      	ldr	r3, [pc, #128]	@ (8001670 <fs_flash_read+0xa4>)
 80015f0:	4a20      	ldr	r2, [pc, #128]	@ (8001674 <fs_flash_read+0xa8>)
 80015f2:	2156      	movs	r1, #86	@ 0x56
 80015f4:	4820      	ldr	r0, [pc, #128]	@ (8001678 <fs_flash_read+0xac>)
 80015f6:	f007 f875 	bl	80086e4 <__assert_func>
    assert(size % cfg->read_size == 0);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	fbb3 f1f2 	udiv	r1, r3, r2
 8001604:	fb01 f202 	mul.w	r2, r1, r2
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <fs_flash_read+0x4e>
 800160e:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <fs_flash_read+0xb0>)
 8001610:	4a18      	ldr	r2, [pc, #96]	@ (8001674 <fs_flash_read+0xa8>)
 8001612:	2157      	movs	r1, #87	@ 0x57
 8001614:	4818      	ldr	r0, [pc, #96]	@ (8001678 <fs_flash_read+0xac>)
 8001616:	f007 f865 	bl	80086e4 <__assert_func>
    assert(block < cfg->block_count);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	429a      	cmp	r2, r3
 8001622:	d305      	bcc.n	8001630 <fs_flash_read+0x64>
 8001624:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <fs_flash_read+0xb4>)
 8001626:	4a13      	ldr	r2, [pc, #76]	@ (8001674 <fs_flash_read+0xa8>)
 8001628:	2158      	movs	r1, #88	@ 0x58
 800162a:	4813      	ldr	r0, [pc, #76]	@ (8001678 <fs_flash_read+0xac>)
 800162c:	f007 f85a 	bl	80086e4 <__assert_func>

	uint32_t startAddress = block*(cfg->block_size) + off;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	fb02 f303 	mul.w	r3, r2, r3
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	617b      	str	r3, [r7, #20]
    int ret = fram_read(memory, memory->spi_device, startAddress, (uint8_t *)buffer, size); 
 8001640:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <fs_flash_read+0xb8>)
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <fs_flash_read+0xb8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6819      	ldr	r1, [r3, #0]
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	f7ff ff6d 	bl	8001530 <fram_read>
 8001656:	6138      	str	r0, [r7, #16]

    if (ret == -1)
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800165e:	d102      	bne.n	8001666 <fs_flash_read+0x9a>
    {
        return -1;
 8001660:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001664:	e000      	b.n	8001668 <fs_flash_read+0x9c>
    }
    else
    {
        return 0;
 8001666:	2300      	movs	r3, #0
    }
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	08009754 	.word	0x08009754
 8001674:	0800a458 	.word	0x0800a458
 8001678:	08009770 	.word	0x08009770
 800167c:	0800978c 	.word	0x0800978c
 8001680:	080097a8 	.word	0x080097a8
 8001684:	20000094 	.word	0x20000094

08001688 <fs_flash_prog>:

int fs_flash_prog(const struct lfs_config *cfg, lfs_block_t block,
            lfs_off_t off, const void *buffer, lfs_size_t size)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af02      	add	r7, sp, #8
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]

    assert(off  % cfg->prog_size == 0);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	699a      	ldr	r2, [r3, #24]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	fbb3 f1f2 	udiv	r1, r3, r2
 80016a0:	fb01 f202 	mul.w	r2, r1, r2
 80016a4:	1a9b      	subs	r3, r3, r2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <fs_flash_prog+0x2e>
 80016aa:	4b20      	ldr	r3, [pc, #128]	@ (800172c <fs_flash_prog+0xa4>)
 80016ac:	4a20      	ldr	r2, [pc, #128]	@ (8001730 <fs_flash_prog+0xa8>)
 80016ae:	216b      	movs	r1, #107	@ 0x6b
 80016b0:	4820      	ldr	r0, [pc, #128]	@ (8001734 <fs_flash_prog+0xac>)
 80016b2:	f007 f817 	bl	80086e4 <__assert_func>
    assert(size % cfg->prog_size == 0);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	699a      	ldr	r2, [r3, #24]
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80016c0:	fb01 f202 	mul.w	r2, r1, r2
 80016c4:	1a9b      	subs	r3, r3, r2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <fs_flash_prog+0x4e>
 80016ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <fs_flash_prog+0xb0>)
 80016cc:	4a18      	ldr	r2, [pc, #96]	@ (8001730 <fs_flash_prog+0xa8>)
 80016ce:	216c      	movs	r1, #108	@ 0x6c
 80016d0:	4818      	ldr	r0, [pc, #96]	@ (8001734 <fs_flash_prog+0xac>)
 80016d2:	f007 f807 	bl	80086e4 <__assert_func>
    assert(block < cfg->block_count);  
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d305      	bcc.n	80016ec <fs_flash_prog+0x64>
 80016e0:	4b16      	ldr	r3, [pc, #88]	@ (800173c <fs_flash_prog+0xb4>)
 80016e2:	4a13      	ldr	r2, [pc, #76]	@ (8001730 <fs_flash_prog+0xa8>)
 80016e4:	216d      	movs	r1, #109	@ 0x6d
 80016e6:	4813      	ldr	r0, [pc, #76]	@ (8001734 <fs_flash_prog+0xac>)
 80016e8:	f006 fffc 	bl	80086e4 <__assert_func>

	uint32_t startAddress = block*(cfg->block_size) + off;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	68ba      	ldr	r2, [r7, #8]
 80016f2:	fb02 f303 	mul.w	r3, r2, r3
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	617b      	str	r3, [r7, #20]
    int ret = fram_write(memory, memory->spi_device, startAddress, (uint8_t *)buffer, size); 
 80016fc:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <fs_flash_prog+0xb8>)
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <fs_flash_prog+0xb8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6819      	ldr	r1, [r3, #0]
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	f7ff fecd 	bl	80014ac <fram_write>
 8001712:	6138      	str	r0, [r7, #16]

    if (ret == -1)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800171a:	d102      	bne.n	8001722 <fs_flash_prog+0x9a>
    {
        return -1;
 800171c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001720:	e000      	b.n	8001724 <fs_flash_prog+0x9c>
    }
    else
    {
        return 0;
 8001722:	2300      	movs	r3, #0
    }
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	080097c4 	.word	0x080097c4
 8001730:	0800a468 	.word	0x0800a468
 8001734:	08009770 	.word	0x08009770
 8001738:	080097e0 	.word	0x080097e0
 800173c:	080097a8 	.word	0x080097a8
 8001740:	20000094 	.word	0x20000094

08001744 <fs_flash_erase>:

int fs_flash_erase(const struct lfs_config *cfg, lfs_block_t block)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af02      	add	r7, sp, #8
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
    assert(block < cfg->block_count);  
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d305      	bcc.n	8001764 <fs_flash_erase+0x20>
 8001758:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <fs_flash_erase+0x64>)
 800175a:	4a14      	ldr	r2, [pc, #80]	@ (80017ac <fs_flash_erase+0x68>)
 800175c:	217e      	movs	r1, #126	@ 0x7e
 800175e:	4814      	ldr	r0, [pc, #80]	@ (80017b0 <fs_flash_erase+0x6c>)
 8001760:	f006 ffc0 	bl	80086e4 <__assert_func>
    uint8_t zero = 0x00;
 8001764:	2300      	movs	r3, #0
 8001766:	73fb      	strb	r3, [r7, #15]

	uint32_t startAddress = block*(cfg->block_size);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69da      	ldr	r2, [r3, #28]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	fb02 f303 	mul.w	r3, r2, r3
 8001772:	617b      	str	r3, [r7, #20]
    int ret = fram_write(memory, memory->spi_device, startAddress, &zero, 128);
 8001774:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <fs_flash_erase+0x70>)
 8001776:	6818      	ldr	r0, [r3, #0]
 8001778:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <fs_flash_erase+0x70>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6819      	ldr	r1, [r3, #0]
 800177e:	f107 030f 	add.w	r3, r7, #15
 8001782:	2280      	movs	r2, #128	@ 0x80
 8001784:	9200      	str	r2, [sp, #0]
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	f7ff fe90 	bl	80014ac <fram_write>
 800178c:	6138      	str	r0, [r7, #16]

    if (ret == -1)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001794:	d102      	bne.n	800179c <fs_flash_erase+0x58>
    {
        return -1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800179a:	e000      	b.n	800179e <fs_flash_erase+0x5a>
    }
    else
    {
        return 0;
 800179c:	2300      	movs	r3, #0
    }
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	080097a8 	.word	0x080097a8
 80017ac:	0800a478 	.word	0x0800a478
 80017b0:	08009770 	.word	0x08009770
 80017b4:	20000094 	.word	0x20000094

080017b8 <fs_flash_sync>:

int fs_flash_sync(const struct lfs_config *c)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
    return 0;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4293      	cmp	r3, r2
 80017de:	bf38      	it	cc
 80017e0:	4613      	movcc	r3, r2
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4293      	cmp	r3, r2
 80017fe:	bf28      	it	cs
 8001800:	4613      	movcs	r3, r2
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001820:	6839      	ldr	r1, [r7, #0]
 8001822:	fb01 f202 	mul.w	r2, r1, r2
 8001826:	1a9b      	subs	r3, r3, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	1ad3      	subs	r3, r2, r3
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	4413      	add	r3, r2
 8001848:	3b01      	subs	r3, #1
 800184a:	6839      	ldr	r1, [r7, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ffde 	bl	800180e <lfs_aligndown>
 8001852:	4603      	mov	r3, r0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	fa93 f3a3 	rbit	r3, r3
 800188a:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f007 ff22 	bl	80096ec <__popcountsi2>
 80018a8:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	1ad3      	subs	r3, r2, r3
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 80018d6:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ffee 	bl	80018ce <lfs_fromle32>
 80018f2:	4603      	mov	r3, r0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ffed 	bl	80018fc <lfs_frombe32>
 8001922:	4603      	mov	r3, r0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f006 fef3 	bl	8008720 <malloc>
 800193a:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f006 feef 	bl	8008730 <free>
#else
    (void)p;
#endif
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800196a:	601a      	str	r2, [r3, #0]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68d8      	ldr	r0, [r3, #12]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800198a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198c:	461a      	mov	r2, r3
 800198e:	21ff      	movs	r1, #255	@ 0xff
 8001990:	f007 f87a 	bl	8008a88 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800199a:	601a      	str	r2, [r3, #0]
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 80019a4:	b5b0      	push	{r4, r5, r7, lr}
 80019a6:	b08a      	sub	sp, #40	@ 0x28
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80019b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019b4:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 80019b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019ba:	441a      	add	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d80a      	bhi.n	80019dc <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 8124 	beq.w	8001c18 <lfs_bd_read+0x274>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019d6:	429a      	cmp	r2, r3
 80019d8:	f0c0 811e 	bcc.w	8001c18 <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 80019dc:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80019e0:	e11f      	b.n	8001c22 <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80019e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019e4:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d03f      	beq.n	8001a6c <lfs_bd_read+0xc8>
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d13a      	bne.n	8001a6c <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8001a00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d232      	bcs.n	8001a6c <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d324      	bcc.n	8001a5a <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	6859      	ldr	r1, [r3, #4]
 8001a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a1a:	1acb      	subs	r3, r1, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	69b8      	ldr	r0, [r7, #24]
 8001a22:	f7ff fee4 	bl	80017ee <lfs_min>
 8001a26:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001a32:	1acb      	subs	r3, r1, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	69f8      	ldr	r0, [r7, #28]
 8001a3c:	f007 f897 	bl	8008b6e <memcpy>

                data += diff;
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4413      	add	r3, r2
 8001a46:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001a48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8001a50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8001a58:	e0de      	b.n	8001c18 <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	4619      	mov	r1, r3
 8001a64:	69b8      	ldr	r0, [r7, #24]
 8001a66:	f7ff fec2 	bl	80017ee <lfs_min>
 8001a6a:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d13a      	bne.n	8001aec <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	4413      	add	r3, r2
        if (block == rcache->block &&
 8001a80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d232      	bcs.n	8001aec <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d324      	bcc.n	8001ada <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6859      	ldr	r1, [r3, #4]
 8001a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a9a:	1acb      	subs	r3, r1, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	69b8      	ldr	r0, [r7, #24]
 8001aa2:	f7ff fea4 	bl	80017ee <lfs_min>
 8001aa6:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001ab2:	1acb      	subs	r3, r1, r3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	69f8      	ldr	r0, [r7, #28]
 8001abc:	f007 f857 	bl	8008b6e <memcpy>

                data += diff;
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001ac8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4413      	add	r3, r2
 8001ace:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8001ad0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8001ad8:	e09e      	b.n	8001c18 <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	69b8      	ldr	r0, [r7, #24]
 8001ae6:	f7ff fe82 	bl	80017ee <lfs_min>
 8001aea:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8001aec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d336      	bcc.n	8001b62 <lfs_bd_read+0x1be>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001af8:	695a      	ldr	r2, [r3, #20]
 8001afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001afc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b00:	fb01 f202 	mul.w	r2, r1, r2
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d12b      	bne.n	8001b62 <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b0e:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8001b10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d325      	bcc.n	8001b62 <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	69b8      	ldr	r0, [r7, #24]
 8001b20:	f7ff fe75 	bl	800180e <lfs_aligndown>
 8001b24:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b2a:	685c      	ldr	r4, [r3, #4]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001b3a:	47a0      	blx	r4
 8001b3c:	6178      	str	r0, [r7, #20]
            if (err) {
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <lfs_bd_read+0x1a4>
                return err;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	e06c      	b.n	8001c22 <lfs_bd_read+0x27e>
            }

            data += diff;
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	61fb      	str	r3, [r7, #28]
            off += diff;
 8001b50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4413      	add	r3, r2
 8001b56:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 8001b58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 8001b60:	e05a      	b.n	8001c18 <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00a      	beq.n	8001b80 <lfs_bd_read+0x1dc>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d305      	bcc.n	8001b80 <lfs_bd_read+0x1dc>
 8001b74:	4b2d      	ldr	r3, [pc, #180]	@ (8001c2c <lfs_bd_read+0x288>)
 8001b76:	4a2e      	ldr	r2, [pc, #184]	@ (8001c30 <lfs_bd_read+0x28c>)
 8001b78:	216b      	movs	r1, #107	@ 0x6b
 8001b7a:	482e      	ldr	r0, [pc, #184]	@ (8001c34 <lfs_bd_read+0x290>)
 8001b7c:	f006 fdb2 	bl	80086e4 <__assert_func>
        rcache->block = block;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b84:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001b90:	f7ff fe3d 	bl	800180e <lfs_aligndown>
 8001b94:	4602      	mov	r2, r0
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8001b9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ba4:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4610      	mov	r0, r2
 8001baa:	f7ff fe45 	bl	8001838 <lfs_alignup>
 8001bae:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001bb4:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4610      	mov	r0, r2
 8001bba:	f7ff fe18 	bl	80017ee <lfs_min>
 8001bbe:	4602      	mov	r2, r0
                - rcache->off,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8001bc4:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f7ff fe0d 	bl	80017ee <lfs_min>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001bde:	685c      	ldr	r4, [r3, #4]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6819      	ldr	r1, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	462b      	mov	r3, r5
 8001bf8:	47a0      	blx	r4
 8001bfa:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	dd05      	ble.n	8001c0e <lfs_bd_read+0x26a>
 8001c02:	4b0d      	ldr	r3, [pc, #52]	@ (8001c38 <lfs_bd_read+0x294>)
 8001c04:	4a0a      	ldr	r2, [pc, #40]	@ (8001c30 <lfs_bd_read+0x28c>)
 8001c06:	2176      	movs	r1, #118	@ 0x76
 8001c08:	480a      	ldr	r0, [pc, #40]	@ (8001c34 <lfs_bd_read+0x290>)
 8001c0a:	f006 fd6b 	bl	80086e4 <__assert_func>
        if (err) {
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <lfs_bd_read+0x274>
            return err;
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	e004      	b.n	8001c22 <lfs_bd_read+0x27e>
    while (size > 0) {
 8001c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f47f aee1 	bne.w	80019e2 <lfs_bd_read+0x3e>
        }
    }

    return 0;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3720      	adds	r7, #32
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	080097fc 	.word	0x080097fc
 8001c30:	0800a488 	.word	0x0800a488
 8001c34:	0800982c 	.word	0x0800982c
 8001c38:	08009844 	.word	0x08009844

08001c3c <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b090      	sub	sp, #64	@ 0x40
 8001c40:	af04      	add	r7, sp, #16
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8001c4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    lfs_size_t diff = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	@ 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 8001c52:	2300      	movs	r3, #0
 8001c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c56:	e039      	b.n	8001ccc <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8001c58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2108      	movs	r1, #8
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fdc4 	bl	80017ee <lfs_min>
 8001c66:	6278      	str	r0, [r7, #36]	@ 0x24
        int err = lfs_bd_read(lfs,
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6c:	1ad1      	subs	r1, r2, r3
 8001c6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c72:	4413      	add	r3, r2
 8001c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c76:	9203      	str	r2, [sp, #12]
 8001c78:	f107 0214 	add.w	r2, r7, #20
 8001c7c:	9202      	str	r2, [sp, #8]
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	460b      	mov	r3, r1
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f7ff fe8a 	bl	80019a4 <lfs_bd_read>
 8001c90:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <lfs_bd_cmp+0x60>
            return err;
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	e01c      	b.n	8001cd6 <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8001c9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ca0:	18d1      	adds	r1, r2, r3
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f006 fedd 	bl	8008a68 <memcmp>
 8001cae:	61f8      	str	r0, [r7, #28]
        if (res) {
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d006      	beq.n	8001cc4 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	da01      	bge.n	8001cc0 <lfs_bd_cmp+0x84>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e00a      	b.n	8001cd6 <lfs_bd_cmp+0x9a>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e008      	b.n	8001cd6 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8001cc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	4413      	add	r3, r2
 8001cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ccc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d3c1      	bcc.n	8001c58 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3730      	adds	r7, #48	@ 0x30
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b08e      	sub	sp, #56	@ 0x38
 8001ce2:	af04      	add	r7, sp, #16
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf4:	e030      	b.n	8001d58 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 8001cf6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2108      	movs	r1, #8
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fd75 	bl	80017ee <lfs_min>
 8001d04:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0a:	1ad1      	subs	r1, r2, r3
 8001d0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d10:	4413      	add	r3, r2
 8001d12:	6a3a      	ldr	r2, [r7, #32]
 8001d14:	9203      	str	r2, [sp, #12]
 8001d16:	f107 0214 	add.w	r2, r7, #20
 8001d1a:	9202      	str	r2, [sp, #8]
 8001d1c:	9301      	str	r3, [sp, #4]
 8001d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	460b      	mov	r3, r1
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	68b9      	ldr	r1, [r7, #8]
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f7ff fe3b 	bl	80019a4 <lfs_bd_read>
 8001d2e:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <lfs_bd_crc+0x5c>
            return err;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	e013      	b.n	8001d62 <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 8001d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f107 0114 	add.w	r1, r7, #20
 8001d42:	6a3a      	ldr	r2, [r7, #32]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f006 fc8f 	bl	8008668 <lfs_crc>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d4e:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8001d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	4413      	add	r3, r2
 8001d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d3ca      	bcc.n	8001cf6 <lfs_bd_crc+0x18>
    }

    return 0;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3728      	adds	r7, #40	@ 0x28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8001d6c:	b5b0      	push	{r4, r5, r7, lr}
 8001d6e:	b08c      	sub	sp, #48	@ 0x30
 8001d70:	af04      	add	r7, sp, #16
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d82:	d060      	beq.n	8001e46 <lfs_bd_flush+0xda>
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f113 0f02 	cmn.w	r3, #2
 8001d8c:	d05b      	beq.n	8001e46 <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d305      	bcc.n	8001da6 <lfs_bd_flush+0x3a>
 8001d9a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e50 <lfs_bd_flush+0xe4>)
 8001d9c:	4a2d      	ldr	r2, [pc, #180]	@ (8001e54 <lfs_bd_flush+0xe8>)
 8001d9e:	21b3      	movs	r1, #179	@ 0xb3
 8001da0:	482d      	ldr	r0, [pc, #180]	@ (8001e58 <lfs_bd_flush+0xec>)
 8001da2:	f006 fc9f 	bl	80086e4 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4619      	mov	r1, r3
 8001db2:	4610      	mov	r0, r2
 8001db4:	f7ff fd40 	bl	8001838 <lfs_alignup>
 8001db8:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001dbe:	689c      	ldr	r4, [r3, #8]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	6819      	ldr	r1, [r3, #0]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	462b      	mov	r3, r5
 8001dd6:	47a0      	blx	r4
 8001dd8:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	dd05      	ble.n	8001dec <lfs_bd_flush+0x80>
 8001de0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <lfs_bd_flush+0xf0>)
 8001de2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e54 <lfs_bd_flush+0xe8>)
 8001de4:	21b7      	movs	r1, #183	@ 0xb7
 8001de6:	481c      	ldr	r0, [pc, #112]	@ (8001e58 <lfs_bd_flush+0xec>)
 8001de8:	f006 fc7c 	bl	80086e4 <__assert_func>
        if (err) {
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <lfs_bd_flush+0x8a>
            return err;
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	e028      	b.n	8001e48 <lfs_bd_flush+0xdc>
        }

        if (validate) {
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d020      	beq.n	8001e3e <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f7ff fdab 	bl	800195a <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8001e10:	69f8      	ldr	r0, [r7, #28]
 8001e12:	9003      	str	r0, [sp, #12]
 8001e14:	9102      	str	r1, [sp, #8]
 8001e16:	9201      	str	r2, [sp, #4]
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	2100      	movs	r1, #0
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f7ff ff0b 	bl	8001c3c <lfs_bd_cmp>
 8001e26:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	da01      	bge.n	8001e32 <lfs_bd_flush+0xc6>
                return res;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	e00a      	b.n	8001e48 <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 8001e38:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8001e3c:	e004      	b.n	8001e48 <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8001e3e:	68b9      	ldr	r1, [r7, #8]
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f7ff fd99 	bl	8001978 <lfs_cache_zero>
    }

    return 0;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3720      	adds	r7, #32
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e50:	08009850 	.word	0x08009850
 8001e54:	0800a494 	.word	0x0800a494
 8001e58:	0800982c 	.word	0x0800982c
 8001e5c:	08009844 	.word	0x08009844

08001e60 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7ff fd72 	bl	800195a <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	68b9      	ldr	r1, [r7, #8]
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f7ff ff75 	bl	8001d6c <lfs_bd_flush>
 8001e82:	6178      	str	r0, [r7, #20]
    if (err) {
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <lfs_bd_sync+0x2e>
        return err;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	e011      	b.n	8001eb2 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4798      	blx	r3
 8001e9c:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	dd05      	ble.n	8001eb0 <lfs_bd_sync+0x50>
 8001ea4:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <lfs_bd_sync+0x5c>)
 8001ea6:	4a06      	ldr	r2, [pc, #24]	@ (8001ec0 <lfs_bd_sync+0x60>)
 8001ea8:	21dd      	movs	r1, #221	@ 0xdd
 8001eaa:	4806      	ldr	r0, [pc, #24]	@ (8001ec4 <lfs_bd_sync+0x64>)
 8001eac:	f006 fc1a 	bl	80086e4 <__assert_func>
    return err;
 8001eb0:	697b      	ldr	r3, [r7, #20]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	08009844 	.word	0x08009844
 8001ec0:	0800a4a4 	.word	0x0800a4a4
 8001ec4:	0800982c 	.word	0x0800982c

08001ec8 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8001ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ed8:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 8001eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001edc:	f113 0f02 	cmn.w	r3, #2
 8001ee0:	d00a      	beq.n	8001ef8 <lfs_bd_prog+0x30>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ee6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d305      	bcc.n	8001ef8 <lfs_bd_prog+0x30>
 8001eec:	4b48      	ldr	r3, [pc, #288]	@ (8002010 <lfs_bd_prog+0x148>)
 8001eee:	4a49      	ldr	r2, [pc, #292]	@ (8002014 <lfs_bd_prog+0x14c>)
 8001ef0:	21e8      	movs	r1, #232	@ 0xe8
 8001ef2:	4849      	ldr	r0, [pc, #292]	@ (8002018 <lfs_bd_prog+0x150>)
 8001ef4:	f006 fbf6 	bl	80086e4 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8001ef8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001efc:	441a      	add	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d97a      	bls.n	8001ffe <lfs_bd_prog+0x136>
 8001f08:	4b44      	ldr	r3, [pc, #272]	@ (800201c <lfs_bd_prog+0x154>)
 8001f0a:	4a42      	ldr	r2, [pc, #264]	@ (8002014 <lfs_bd_prog+0x14c>)
 8001f0c:	21e9      	movs	r1, #233	@ 0xe9
 8001f0e:	4842      	ldr	r0, [pc, #264]	@ (8002018 <lfs_bd_prog+0x150>)
 8001f10:	f006 fbe8 	bl	80086e4 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d151      	bne.n	8001fc2 <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8001f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d34c      	bcc.n	8001fc2 <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f32:	4413      	add	r3, r2
                off >= pcache->off &&
 8001f34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d243      	bcs.n	8001fc2 <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	6859      	ldr	r1, [r3, #4]
 8001f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f46:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8001f48:	4413      	add	r3, r2
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001f4e:	f7ff fc4e 	bl	80017ee <lfs_min>
 8001f52:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001f5e:	1acb      	subs	r3, r1, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	69f9      	ldr	r1, [r7, #28]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f006 fe01 	bl	8008b6e <memcpy>

            data += diff;
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	4413      	add	r3, r2
 8001f72:	61fb      	str	r3, [r7, #28]
            off += diff;
 8001f74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	4413      	add	r3, r2
 8001f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 8001f7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	6898      	ldr	r0, [r3, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	4619      	mov	r1, r3
 8001f92:	f7ff fc1c 	bl	80017ce <lfs_max>
 8001f96:	4602      	mov	r2, r0
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d128      	bne.n	8001ffc <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	68b9      	ldr	r1, [r7, #8]
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f7ff fedb 	bl	8001d6c <lfs_bd_flush>
 8001fb6:	6178      	str	r0, [r7, #20]
                if (err) {
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d01e      	beq.n	8001ffc <lfs_bd_prog+0x134>
                    return err;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	e021      	b.n	8002006 <lfs_bd_prog+0x13e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fca:	d006      	beq.n	8001fda <lfs_bd_prog+0x112>
 8001fcc:	4b14      	ldr	r3, [pc, #80]	@ (8002020 <lfs_bd_prog+0x158>)
 8001fce:	4a11      	ldr	r2, [pc, #68]	@ (8002014 <lfs_bd_prog+0x14c>)
 8001fd0:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001fd4:	4810      	ldr	r0, [pc, #64]	@ (8002018 <lfs_bd_prog+0x150>)
 8001fd6:	f006 fb85 	bl	80086e4 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fde:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001fea:	f7ff fc10 	bl	800180e <lfs_aligndown>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	e000      	b.n	8001ffe <lfs_bd_prog+0x136>
            continue;
 8001ffc:	bf00      	nop
    while (size > 0) {
 8001ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002000:	2b00      	cmp	r3, #0
 8002002:	d187      	bne.n	8001f14 <lfs_bd_prog+0x4c>
    }

    return 0;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3720      	adds	r7, #32
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	08009874 	.word	0x08009874
 8002014:	0800a4b0 	.word	0x0800a4b0
 8002018:	0800982c 	.word	0x0800982c
 800201c:	080098ac 	.word	0x080098ac
 8002020:	080098d0 	.word	0x080098d0

08002024 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d306      	bcc.n	8002046 <lfs_bd_erase+0x22>
 8002038:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <lfs_bd_erase+0x54>)
 800203a:	4a10      	ldr	r2, [pc, #64]	@ (800207c <lfs_bd_erase+0x58>)
 800203c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8002040:	480f      	ldr	r0, [pc, #60]	@ (8002080 <lfs_bd_erase+0x5c>)
 8002042:	f006 fb4f 	bl	80086e4 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002050:	6839      	ldr	r1, [r7, #0]
 8002052:	4610      	mov	r0, r2
 8002054:	4798      	blx	r3
 8002056:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	dd06      	ble.n	800206c <lfs_bd_erase+0x48>
 800205e:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <lfs_bd_erase+0x60>)
 8002060:	4a06      	ldr	r2, [pc, #24]	@ (800207c <lfs_bd_erase+0x58>)
 8002062:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8002066:	4806      	ldr	r0, [pc, #24]	@ (8002080 <lfs_bd_erase+0x5c>)
 8002068:	f006 fb3c 	bl	80086e4 <__assert_func>
    return err;
 800206c:	68fb      	ldr	r3, [r7, #12]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	080098f4 	.word	0x080098f4
 800207c:	0800a4bc 	.word	0x0800a4bc
 8002080:	0800982c 	.word	0x0800982c
 8002084:	08009844 	.word	0x08009844

08002088 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3304      	adds	r3, #4
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	601a      	str	r2, [r3, #0]
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020c2:	d005      	beq.n	80020d0 <lfs_pair_isnull+0x1e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3304      	adds	r3, #4
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020ce:	d101      	bne.n	80020d4 <lfs_pair_isnull+0x22>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <lfs_pair_isnull+0x24>
 80020d4:	2300      	movs	r3, #0
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	b2db      	uxtb	r3, r3
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d017      	beq.n	800212e <lfs_pair_cmp+0x46>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3304      	adds	r3, #4
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	3304      	adds	r3, #4
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d00f      	beq.n	800212e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	3304      	adds	r3, #4
 8002116:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d008      	beq.n	800212e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3304      	adds	r3, #4
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d001      	beq.n	800212e <lfs_pair_cmp+0x46>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <lfs_pair_cmp+0x48>
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d107      	bne.n	8002162 <lfs_pair_issync+0x26>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3304      	adds	r3, #4
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	3304      	adds	r3, #4
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d00d      	beq.n	800217e <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	3304      	adds	r3, #4
 800216a:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d108      	bne.n	8002182 <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3304      	adds	r3, #4
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d101      	bne.n	8002182 <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <lfs_pair_issync+0x48>
 8002182:	2300      	movs	r3, #0
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	b2db      	uxtb	r3, r3
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8002196:	b590      	push	{r4, r7, lr}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fb93 	bl	80018ce <lfs_fromle32>
 80021a8:	4602      	mov	r2, r0
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3304      	adds	r3, #4
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	1d1c      	adds	r4, r3, #4
 80021b8:	4610      	mov	r0, r2
 80021ba:	f7ff fb88 	bl	80018ce <lfs_fromle32>
 80021be:	4603      	mov	r3, r0
 80021c0:	6023      	str	r3, [r4, #0]
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd90      	pop	{r4, r7, pc}

080021ca <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 80021ca:	b590      	push	{r4, r7, lr}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fb84 	bl	80018e4 <lfs_tole32>
 80021dc:	4602      	mov	r2, r0
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3304      	adds	r3, #4
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	1d1c      	adds	r4, r3, #4
 80021ec:	4610      	mov	r0, r2
 80021ee:	f7ff fb79 	bl	80018e4 <lfs_tole32>
 80021f2:	4603      	mov	r3, r0
 80021f4:	6023      	str	r3, [r4, #0]
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd90      	pop	{r4, r7, pc}

080021fe <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	43db      	mvns	r3, r3
 800220a:	0fdb      	lsrs	r3, r3, #31
 800220c:	b2db      	uxtb	r3, r3
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	059b      	lsls	r3, r3, #22
 8002226:	159b      	asrs	r3, r3, #22
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800222c:	bf0c      	ite	eq
 800222e:	2301      	moveq	r3, #1
 8002230:	2300      	movne	r3, #0
 8002232:	b2db      	uxtb	r3, r3
}
 8002234:	4618      	mov	r0, r3
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	0d1b      	lsrs	r3, r3, #20
 800224c:	b29b      	uxth	r3, r3
 800224e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002252:	b29b      	uxth	r3, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	0d1b      	lsrs	r3, r3, #20
 800226c:	b29b      	uxth	r3, r3
 800226e:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
 8002272:	b29b      	uxth	r3, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	0d1b      	lsrs	r3, r3, #20
 800228c:	b29b      	uxth	r3, r3
 800228e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002292:	b29b      	uxth	r3, r3
}
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	0d1b      	lsrs	r3, r3, #20
 80022ac:	b2db      	uxtb	r3, r3
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff ffec 	bl	80022a0 <lfs_tag_chunk>
 80022c8:	4603      	mov	r3, r0
 80022ca:	b25b      	sxtb	r3, r3
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	0a9b      	lsrs	r3, r3, #10
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022e6:	b29b      	uxth	r3, r3
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff ff7f 	bl	800221a <lfs_tag_isdelete>
 800231c:	4603      	mov	r3, r0
 800231e:	461a      	mov	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4413      	add	r3, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ffe5 	bl	80022f4 <lfs_tag_size>
 800232a:	4603      	mov	r3, r0
 800232c:	3304      	adds	r3, #4
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8002336:	b480      	push	{r7}
 8002338:	b085      	sub	sp, #20
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	e012      	b.n	800236c <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	6819      	ldr	r1, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	4413      	add	r3, r2
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	4403      	add	r3, r0
 8002362:	404a      	eors	r2, r1
 8002364:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3301      	adds	r3, #1
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b02      	cmp	r3, #2
 8002370:	dde9      	ble.n	8002346 <lfs_gstate_xor+0x10>
    }
}
 8002372:	bf00      	nop
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	e00b      	b.n	80023a6 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <lfs_gstate_iszero+0x20>
            return false;
 800239c:	2300      	movs	r3, #0
 800239e:	e006      	b.n	80023ae <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3301      	adds	r3, #1
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	ddf0      	ble.n	800238e <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80023ac:	2301      	movs	r3, #1
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff94 	bl	80022f4 <lfs_tag_size>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	bf14      	ite	ne
 80023d2:	2301      	movne	r3, #1
 80023d4:	2300      	moveq	r3, #0
 80023d6:	b2db      	uxtb	r3, r3
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff81 	bl	80022f4 <lfs_tag_size>
 80023f2:	4603      	mov	r3, r0
 80023f4:	b2db      	uxtb	r3, r3
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff ff18 	bl	8002240 <lfs_tag_type1>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	bf14      	ite	ne
 8002416:	2301      	movne	r3, #1
 8002418:	2300      	moveq	r3, #0
 800241a:	b2db      	uxtb	r3, r3
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff5f 	bl	80022f4 <lfs_tag_size>
 8002436:	4603      	mov	r3, r0
 8002438:	0a5b      	lsrs	r3, r3, #9
 800243a:	2b00      	cmp	r3, #0
 800243c:	bf14      	ite	ne
 800243e:	2301      	movne	r3, #1
 8002440:	2300      	moveq	r3, #0
 8002442:	b2db      	uxtb	r3, r3
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fef0 	bl	8002240 <lfs_tag_type1>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <lfs_gstate_hasmovehere+0x30>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3304      	adds	r3, #4
 800246a:	6839      	ldr	r1, [r7, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fe3b 	bl	80020e8 <lfs_pair_cmp>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <lfs_gstate_hasmovehere+0x30>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <lfs_gstate_hasmovehere+0x32>
 800247c:	2300      	movs	r3, #0
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	b2db      	uxtb	r3, r3
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fa18 	bl	80018ce <lfs_fromle32>
 800249e:	4602      	mov	r2, r0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fa10 	bl	80018ce <lfs_fromle32>
 80024ae:	4602      	mov	r2, r0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fa08 	bl	80018ce <lfs_fromle32>
 80024be:	4602      	mov	r2, r0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	609a      	str	r2, [r3, #8]
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fa03 	bl	80018e4 <lfs_tole32>
 80024de:	4602      	mov	r2, r0
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff f9fb 	bl	80018e4 <lfs_tole32>
 80024ee:	4602      	mov	r2, r0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff f9f3 	bl	80018e4 <lfs_tole32>
 80024fe:	4602      	mov	r2, r0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	609a      	str	r2, [r3, #8]
}
 8002504:	bf00      	nop
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff f9d8 	bl	80018ce <lfs_fromle32>
 800251e:	4602      	mov	r2, r0
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff f9d0 	bl	80018ce <lfs_fromle32>
 800252e:	4602      	mov	r2, r0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	605a      	str	r2, [r3, #4]
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff f9cb 	bl	80018e4 <lfs_tole32>
 800254e:	4602      	mov	r2, r0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff f9c3 	bl	80018e4 <lfs_tole32>
 800255e:	4602      	mov	r2, r0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	605a      	str	r2, [r3, #4]
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff f9a8 	bl	80018ce <lfs_fromle32>
 800257e:	4602      	mov	r2, r0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff f9a0 	bl	80018ce <lfs_fromle32>
 800258e:	4602      	mov	r2, r0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	605a      	str	r2, [r3, #4]
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff f99b 	bl	80018e4 <lfs_tole32>
 80025ae:	4602      	mov	r2, r0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff f993 	bl	80018e4 <lfs_tole32>
 80025be:	4602      	mov	r2, r0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	605a      	str	r2, [r3, #4]
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff f978 	bl	80018ce <lfs_fromle32>
 80025de:	4602      	mov	r2, r0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff f970 	bl	80018ce <lfs_fromle32>
 80025ee:	4602      	mov	r2, r0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff f968 	bl	80018ce <lfs_fromle32>
 80025fe:	4602      	mov	r2, r0
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff f960 	bl	80018ce <lfs_fromle32>
 800260e:	4602      	mov	r2, r0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff f958 	bl	80018ce <lfs_fromle32>
 800261e:	4602      	mov	r2, r0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff f950 	bl	80018ce <lfs_fromle32>
 800262e:	4602      	mov	r2, r0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	615a      	str	r2, [r3, #20]
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff f94b 	bl	80018e4 <lfs_tole32>
 800264e:	4602      	mov	r2, r0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff f943 	bl	80018e4 <lfs_tole32>
 800265e:	4602      	mov	r2, r0
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff f93b 	bl	80018e4 <lfs_tole32>
 800266e:	4602      	mov	r2, r0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff f933 	bl	80018e4 <lfs_tole32>
 800267e:	4602      	mov	r2, r0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff f92b 	bl	80018e4 <lfs_tole32>
 800268e:	4602      	mov	r2, r0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff f923 	bl	80018e4 <lfs_tole32>
 800269e:	4602      	mov	r2, r0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	615a      	str	r2, [r3, #20]
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80026b6:	1d3b      	adds	r3, r7, #4
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	e009      	b.n	80026d0 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d101      	bne.n	80026ca <lfs_mlist_isopen+0x1e>
            return true;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e007      	b.n	80026da <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f1      	bne.n	80026bc <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 80026e6:	b480      	push	{r7}
 80026e8:	b085      	sub	sp, #20
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3328      	adds	r3, #40	@ 0x28
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	e00d      	b.n	8002714 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d105      	bne.n	800270e <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	601a      	str	r2, [r3, #0]
            break;
 800270c:	e007      	b.n	800271e <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1ed      	bne.n	80026f8 <lfs_mlist_remove+0x12>
        }
    }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 8002758:	4b03      	ldr	r3, [pc, #12]	@ (8002768 <lfs_fs_disk_version+0x18>)
    }
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	00020001 	.word	0x00020001

0800276c <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ffeb 	bl	8002750 <lfs_fs_disk_version>
 800277a:	4603      	mov	r3, r0
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	b29b      	uxth	r3, r3

}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ffdd 	bl	8002750 <lfs_fs_disk_version>
 8002796:	4603      	mov	r3, r0
 8002798:	b29b      	uxth	r3, r3
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	661a      	str	r2, [r3, #96]	@ 0x60
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->lookahead.next = 0;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff ffe5 	bl	80027a2 <lfs_alloc_ckpoint>
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027fa:	4413      	add	r3, r2
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 8002800:	fbb3 f1f2 	udiv	r1, r3, r2
 8002804:	fb01 f202 	mul.w	r2, r1, r2
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	429a      	cmp	r2, r3
 8002814:	d212      	bcs.n	800283c <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	08db      	lsrs	r3, r3, #3
 800281e:	441a      	add	r2, r3
 8002820:	7811      	ldrb	r1, [r2, #0]
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	f002 0207 	and.w	r2, r2, #7
 8002828:	2001      	movs	r0, #1
 800282a:	fa00 f202 	lsl.w	r2, r0, r2
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8002834:	4403      	add	r3, r0
 8002836:	430a      	orrs	r2, r1
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285c:	4413      	add	r3, r2
            % lfs->block_count;
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8002862:	fbb3 f1f2 	udiv	r1, r3, r2
 8002866:	fb01 f202 	mul.w	r2, r1, r2
 800286a:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs->lookahead.next = 0;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800287a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    lfs->lookahead.size = lfs_min(
 800287c:	00da      	lsls	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002882:	4619      	mov	r1, r3
 8002884:	4610      	mov	r0, r2
 8002886:	f7fe ffb2 	bl	80017ee <lfs_min>
 800288a:	4602      	mov	r2, r0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	659a      	str	r2, [r3, #88]	@ 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289a:	461a      	mov	r2, r3
 800289c:	2100      	movs	r1, #0
 800289e:	f006 f8f3 	bl	8008a88 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 80028a2:	2301      	movs	r3, #1
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	4909      	ldr	r1, [pc, #36]	@ (80028cc <lfs_alloc_scan+0x80>)
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f004 ffb9 	bl	8007820 <lfs_fs_traverse_>
 80028ae:	60f8      	str	r0, [r7, #12]
    if (err) {
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d004      	beq.n	80028c0 <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ff81 	bl	80027be <lfs_alloc_drop>
        return err;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	e000      	b.n	80028c2 <lfs_alloc_scan+0x76>
    }

    return 0;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	080027e1 	.word	0x080027e1

080028d0 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 80028da:	e04d      	b.n	8002978 <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e4:	08db      	lsrs	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f0:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d131      	bne.n	8002964 <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002908:	4413      	add	r3, r2
                        % lfs->block_count;
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800290e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002912:	fb01 f202 	mul.w	r2, r1, r2
 8002916:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292a:	1e5a      	subs	r2, r3, #1
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	661a      	str	r2, [r3, #96]	@ 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002938:	429a      	cmp	r2, r3
 800293a:	d211      	bcs.n	8002960 <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002944:	08db      	lsrs	r3, r3, #3
 8002946:	4413      	add	r3, r2
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002950:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8002954:	fa22 f303 	lsr.w	r3, r2, r3
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1dd      	bne.n	800291c <lfs_alloc+0x4c>
                        return 0;
 8002960:	2300      	movs	r3, #0
 8002962:	e032      	b.n	80029ca <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002972:	1e5a      	subs	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	661a      	str	r2, [r3, #96]	@ 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002980:	429a      	cmp	r2, r3
 8002982:	d3ab      	bcc.n	80028dc <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002988:	2b00      	cmp	r3, #0
 800298a:	d116      	bne.n	80029ba <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002994:	4413      	add	r3, r2
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800299a:	fbb3 f1f2 	udiv	r1, r3, r2
 800299e:	fb01 f202 	mul.w	r2, r1, r2
 80029a2:	1a9b      	subs	r3, r3, r2
 80029a4:	4a0b      	ldr	r2, [pc, #44]	@ (80029d4 <lfs_alloc+0x104>)
 80029a6:	9200      	str	r2, [sp, #0]
 80029a8:	f240 22b1 	movw	r2, #689	@ 0x2b1
 80029ac:	490a      	ldr	r1, [pc, #40]	@ (80029d8 <lfs_alloc+0x108>)
 80029ae:	480b      	ldr	r0, [pc, #44]	@ (80029dc <lfs_alloc+0x10c>)
 80029b0:	f006 f848 	bl	8008a44 <iprintf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 80029b4:	f06f 031b 	mvn.w	r3, #27
 80029b8:	e007      	b.n	80029ca <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ff46 	bl	800284c <lfs_alloc_scan>
 80029c0:	60f8      	str	r0, [r7, #12]
        if(err) {
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d088      	beq.n	80028da <lfs_alloc+0xa>
            return err;
 80029c8:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	0800993c 	.word	0x0800993c
 80029d8:	0800982c 	.word	0x0800982c
 80029dc:	08009910 	.word	0x08009910

080029e0 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 80029e0:	b590      	push	{r4, r7, lr}
 80029e2:	b08f      	sub	sp, #60	@ 0x3c
 80029e4:	af04      	add	r7, sp, #16
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	333c      	adds	r3, #60	@ 0x3c
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	4611      	mov	r1, r2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fd20 	bl	800244c <lfs_gstate_hasmovehere>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 80ca 	beq.w	8002ba8 <lfs_dir_getslice+0x1c8>
            lfs_tag_id(gmask) != 0) {
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff fc5d 	bl	80022d4 <lfs_tag_id>
 8002a1a:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80c3 	beq.w	8002ba8 <lfs_dir_getslice+0x1c8>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fc54 	bl	80022d4 <lfs_tag_id>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	461c      	mov	r4, r3
 8002a30:	6838      	ldr	r0, [r7, #0]
 8002a32:	f7ff fc4f 	bl	80022d4 <lfs_tag_id>
 8002a36:	4603      	mov	r3, r0
 8002a38:	429c      	cmp	r4, r3
 8002a3a:	d102      	bne.n	8002a42 <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 8002a3c:	f06f 0301 	mvn.w	r3, #1
 8002a40:	e0be      	b.n	8002bc0 <lfs_dir_getslice+0x1e0>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fc44 	bl	80022d4 <lfs_tag_id>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	461c      	mov	r4, r3
 8002a50:	6838      	ldr	r0, [r7, #0]
 8002a52:	f7ff fc3f 	bl	80022d4 <lfs_tag_id>
 8002a56:	4603      	mov	r3, r0
 8002a58:	429c      	cmp	r4, r3
 8002a5a:	f080 80a5 	bcs.w	8002ba8 <lfs_dir_getslice+0x1c8>
            gdiff -= LFS_MKTAG(0, 1, 0);
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002a64:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8002a66:	e09f      	b.n	8002ba8 <lfs_dir_getslice+0x1c8>
        off -= lfs_tag_dsize(ntag);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fc4f 	bl	800230e <lfs_tag_dsize>
 8002a70:	4602      	mov	r2, r0
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8002a7c:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 8002a82:	2204      	movs	r2, #4
 8002a84:	9203      	str	r2, [sp, #12]
 8002a86:	f107 0210 	add.w	r2, r7, #16
 8002a8a:	9202      	str	r2, [sp, #8]
 8002a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a8e:	9201      	str	r2, [sp, #4]
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	2304      	movs	r3, #4
 8002a94:	460a      	mov	r2, r1
 8002a96:	2100      	movs	r1, #0
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f7fe ff83 	bl	80019a4 <lfs_bd_read>
 8002a9e:	61b8      	str	r0, [r7, #24]
        if (err) {
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <lfs_dir_getslice+0xca>
            return err;
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	e08a      	b.n	8002bc0 <lfs_dir_getslice+0x1e0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fe ff25 	bl	80018fc <lfs_frombe32>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	4053      	eors	r3, r2
 8002ab8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002abc:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff fc08 	bl	80022d4 <lfs_tag_id>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d02b      	beq.n	8002b22 <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8002aca:	69f8      	ldr	r0, [r7, #28]
 8002acc:	f7ff fbb8 	bl	8002240 <lfs_tag_type1>
 8002ad0:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8002ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ad6:	d124      	bne.n	8002b22 <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8002ad8:	69f8      	ldr	r0, [r7, #28]
 8002ada:	f7ff fbfb 	bl	80022d4 <lfs_tag_id>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	461c      	mov	r4, r3
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fbf3 	bl	80022d4 <lfs_tag_id>
 8002aee:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8002af0:	429c      	cmp	r4, r3
 8002af2:	d816      	bhi.n	8002b22 <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	1ad2      	subs	r2, r2, r3
 8002afa:	4b33      	ldr	r3, [pc, #204]	@ (8002bc8 <lfs_dir_getslice+0x1e8>)
 8002afc:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8002afe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d102      	bne.n	8002b12 <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 8002b0c:	f06f 0301 	mvn.w	r3, #1
 8002b10:	e056      	b.n	8002bc0 <lfs_dir_getslice+0x1e0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002b12:	69f8      	ldr	r0, [r7, #28]
 8002b14:	f7ff fbd1 	bl	80022ba <lfs_tag_splice>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	029a      	lsls	r2, r3, #10
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	4413      	add	r3, r2
 8002b20:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	401a      	ands	r2, r3
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	6839      	ldr	r1, [r7, #0]
 8002b2c:	1ac9      	subs	r1, r1, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	400b      	ands	r3, r1
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d138      	bne.n	8002ba8 <lfs_dir_getslice+0x1c8>
            if (lfs_tag_isdelete(tag)) {
 8002b36:	69f8      	ldr	r0, [r7, #28]
 8002b38:	f7ff fb6f 	bl	800221a <lfs_tag_isdelete>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <lfs_dir_getslice+0x168>
                return LFS_ERR_NOENT;
 8002b42:	f06f 0301 	mvn.w	r3, #1
 8002b46:	e03b      	b.n	8002bc0 <lfs_dir_getslice+0x1e0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8002b48:	69f8      	ldr	r0, [r7, #28]
 8002b4a:	f7ff fbd3 	bl	80022f4 <lfs_tag_size>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe fe4b 	bl	80017ee <lfs_min>
 8002b58:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8002b5a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b64:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8002b66:	3204      	adds	r2, #4
 8002b68:	6979      	ldr	r1, [r7, #20]
 8002b6a:	9103      	str	r1, [sp, #12]
 8002b6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b6e:	9102      	str	r1, [sp, #8]
 8002b70:	9201      	str	r2, [sp, #4]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	4602      	mov	r2, r0
 8002b78:	2100      	movs	r1, #0
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f7fe ff12 	bl	80019a4 <lfs_bd_read>
 8002b80:	61b8      	str	r0, [r7, #24]
            if (err) {
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <lfs_dir_getslice+0x1ac>
                return err;
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	e019      	b.n	8002bc0 <lfs_dir_getslice+0x1e0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8002b8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	18d0      	adds	r0, r2, r3
 8002b92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	461a      	mov	r2, r3
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	f005 ff74 	bl	8008a88 <memset>

            return tag + gdiff;
 8002ba0:	6a3a      	ldr	r2, [r7, #32]
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	e00b      	b.n	8002bc0 <lfs_dir_getslice+0x1e0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fbaf 	bl	800230e <lfs_tag_dsize>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	f4bf af56 	bcs.w	8002a68 <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 8002bbc:	f06f 0301 	mvn.w	r3, #1
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	372c      	adds	r7, #44	@ 0x2c
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd90      	pop	{r4, r7, pc}
 8002bc8:	000ffc00 	.word	0x000ffc00

08002bcc <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af04      	add	r7, sp, #16
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8002bda:	6838      	ldr	r0, [r7, #0]
 8002bdc:	f7ff fb8a 	bl	80022f4 <lfs_tag_size>
 8002be0:	4603      	mov	r3, r0
 8002be2:	9302      	str	r3, [sp, #8]
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	9301      	str	r3, [sp, #4]
 8002be8:	2300      	movs	r3, #0
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f7ff fef4 	bl	80029e0 <lfs_dir_getslice>
 8002bf8:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b08c      	sub	sp, #48	@ 0x30
 8002c06:	af04      	add	r7, sp, #16
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8002c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c12:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8002c14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c18:	441a      	add	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	f240 80c0 	bls.w	8002da6 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8002c26:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8002c2a:	e0c1      	b.n	8002db0 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8002c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c2e:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d03f      	beq.n	8002cb6 <lfs_dir_getread+0xb4>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f113 0f02 	cmn.w	r3, #2
 8002c3e:	d13a      	bne.n	8002cb6 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8002c4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d232      	bcs.n	8002cb6 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d324      	bcc.n	8002ca4 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6859      	ldr	r1, [r3, #4]
 8002c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c64:	1acb      	subs	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	69b8      	ldr	r0, [r7, #24]
 8002c6c:	f7fe fdbf 	bl	80017ee <lfs_min>
 8002c70:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002c7c:	1acb      	subs	r3, r1, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4619      	mov	r1, r3
 8002c84:	69f8      	ldr	r0, [r7, #28]
 8002c86:	f005 ff72 	bl	8008b6e <memcpy>

                data += diff;
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	4413      	add	r3, r2
 8002c90:	61fb      	str	r3, [r7, #28]
                off += diff;
 8002c92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	4413      	add	r3, r2
 8002c98:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8002c9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8002ca2:	e080      	b.n	8002da6 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	4619      	mov	r1, r3
 8002cae:	69b8      	ldr	r0, [r7, #24]
 8002cb0:	f7fe fd9d 	bl	80017ee <lfs_min>
 8002cb4:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f113 0f02 	cmn.w	r3, #2
 8002cbe:	d13a      	bne.n	8002d36 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8002cca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d232      	bcs.n	8002d36 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d324      	bcc.n	8002d24 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	6859      	ldr	r1, [r3, #4]
 8002ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce4:	1acb      	subs	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	4619      	mov	r1, r3
 8002cea:	69b8      	ldr	r0, [r7, #24]
 8002cec:	f7fe fd7f 	bl	80017ee <lfs_min>
 8002cf0:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002cfc:	1acb      	subs	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4619      	mov	r1, r3
 8002d04:	69f8      	ldr	r0, [r7, #28]
 8002d06:	f005 ff32 	bl	8008b6e <memcpy>

                data += diff;
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	4413      	add	r3, r2
 8002d10:	61fb      	str	r3, [r7, #28]
                off += diff;
 8002d12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	4413      	add	r3, r2
 8002d18:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8002d1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8002d22:	e040      	b.n	8002da6 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	69b8      	ldr	r0, [r7, #24]
 8002d30:	f7fe fd5d 	bl	80017ee <lfs_min>
 8002d34:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	f06f 0201 	mvn.w	r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	4619      	mov	r1, r3
 8002d46:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002d48:	f7fe fd61 	bl	800180e <lfs_aligndown>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8002d52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d56:	441a      	add	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4610      	mov	r0, r2
 8002d62:	f7fe fd69 	bl	8001838 <lfs_alignup>
 8002d66:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4610      	mov	r0, r2
 8002d72:	f7fe fd3c 	bl	80017ee <lfs_min>
 8002d76:	4602      	mov	r2, r0
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8002d84:	6839      	ldr	r1, [r7, #0]
 8002d86:	6889      	ldr	r1, [r1, #8]
 8002d88:	9102      	str	r1, [sp, #8]
 8002d8a:	9201      	str	r2, [sp, #4]
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d92:	68b9      	ldr	r1, [r7, #8]
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f7ff fe23 	bl	80029e0 <lfs_dir_getslice>
 8002d9a:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	da01      	bge.n	8002da6 <lfs_dir_getread+0x1a4>
            return err;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	e004      	b.n	8002db0 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8002da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f47f af3f 	bne.w	8002c2c <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3720      	adds	r7, #32
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8002db8:	b590      	push	{r4, r7, lr}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <lfs_dir_traverse_filter+0x1e>
 8002dd2:	4b24      	ldr	r3, [pc, #144]	@ (8002e64 <lfs_dir_traverse_filter+0xac>)
 8002dd4:	e000      	b.n	8002dd8 <lfs_dir_traverse_filter+0x20>
 8002dd6:	4b24      	ldr	r3, [pc, #144]	@ (8002e68 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8002dd8:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	405a      	eors	r2, r3
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d014      	beq.n	8002e14 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fa13 	bl	800221a <lfs_tag_isdelete>
 8002df4:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10c      	bne.n	8002e14 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4a19      	ldr	r2, [pc, #100]	@ (8002e64 <lfs_dir_traverse_filter+0xac>)
 8002dfe:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	6819      	ldr	r1, [r3, #0]
 8002e04:	4b19      	ldr	r3, [pc, #100]	@ (8002e6c <lfs_dir_traverse_filter+0xb4>)
 8002e06:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8002e08:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8002e0c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d104      	bne.n	8002e1e <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
        return true;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e01e      	b.n	8002e5c <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8002e1e:	68b8      	ldr	r0, [r7, #8]
 8002e20:	f7ff fa0e 	bl	8002240 <lfs_tag_type1>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e2a:	d116      	bne.n	8002e5a <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8002e2c:	68b8      	ldr	r0, [r7, #8]
 8002e2e:	f7ff fa51 	bl	80022d4 <lfs_tag_id>
 8002e32:	4603      	mov	r3, r0
 8002e34:	461c      	mov	r4, r3
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff fa4a 	bl	80022d4 <lfs_tag_id>
 8002e40:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8002e42:	429c      	cmp	r4, r3
 8002e44:	d809      	bhi.n	8002e5a <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002e46:	68b8      	ldr	r0, [r7, #8]
 8002e48:	f7ff fa37 	bl	80022ba <lfs_tag_splice>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	029a      	lsls	r2, r3, #10
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	441a      	add	r2, r3
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	601a      	str	r2, [r3, #0]
    }

    return false;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd90      	pop	{r4, r7, pc}
 8002e64:	7ffffc00 	.word	0x7ffffc00
 8002e68:	700ffc00 	.word	0x700ffc00
 8002e6c:	000ffc00 	.word	0x000ffc00

08002e70 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002e70:	b590      	push	{r4, r7, lr}
 8002e72:	b0c1      	sub	sp, #260	@ 0x104
 8002e74:	af04      	add	r7, sp, #16
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 8002e84:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8002e8e:	6838      	ldr	r0, [r7, #0]
 8002e90:	f7ff fa3d 	bl	800230e <lfs_tag_dsize>
 8002e94:	4602      	mov	r2, r0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	441a      	add	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d237      	bcs.n	8002f12 <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 8002ea2:	6838      	ldr	r0, [r7, #0]
 8002ea4:	f7ff fa33 	bl	800230e <lfs_tag_dsize>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8002eb0:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	9203      	str	r2, [sp, #12]
 8002eba:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002ebe:	9202      	str	r2, [sp, #8]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	9201      	str	r2, [sp, #4]
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	460a      	mov	r2, r1
 8002eca:	2100      	movs	r1, #0
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f7fe fd69 	bl	80019a4 <lfs_bd_read>
 8002ed2:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 8002ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <lfs_dir_traverse+0x74>
                    return err;
 8002ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ee2:	e3a5      	b.n	8003630 <lfs_dir_traverse+0x7c0>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8002ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe fd08 	bl	80018fc <lfs_frombe32>
 8002eec:	4602      	mov	r2, r0
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	4053      	eors	r3, r2
 8002ef2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ef6:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 8002f04:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002f08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 8002f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	e01b      	b.n	8002f4a <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 8002f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	dd13      	ble.n	8002f42 <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 8002f1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 8002f22:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 8002f2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002f30:	3308      	adds	r3, #8
 8002f32:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 8002f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002f40:	e003      	b.n	8002f4a <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 8002f48:	e2a1      	b.n	800348e <lfs_dir_traverse+0x61e>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8002f4a:	4b7e      	ldr	r3, [pc, #504]	@ (8003144 <lfs_dir_traverse+0x2d4>)
 8002f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8002f50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f56:	405a      	eors	r2, r3
 8002f58:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8002f5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002f60:	400b      	ands	r3, r1
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f040 8284 	bne.w	8003472 <lfs_dir_traverse+0x602>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8002f6a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8002f6e:	f7ff f9b1 	bl	80022d4 <lfs_tag_id>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 80ef 	beq.w	8003158 <lfs_dir_traverse+0x2e8>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8002f7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d906      	bls.n	8002f90 <lfs_dir_traverse+0x120>
 8002f82:	4b71      	ldr	r3, [pc, #452]	@ (8003148 <lfs_dir_traverse+0x2d8>)
 8002f84:	4a71      	ldr	r2, [pc, #452]	@ (800314c <lfs_dir_traverse+0x2dc>)
 8002f86:	f240 31b6 	movw	r1, #950	@ 0x3b6
 8002f8a:	4871      	ldr	r0, [pc, #452]	@ (8003150 <lfs_dir_traverse+0x2e0>)
 8002f8c:	f005 fbaa 	bl	80086e4 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8002f90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f92:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002f96:	4613      	mov	r3, r2
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	33f0      	adds	r3, #240	@ 0xf0
 8002fa0:	443b      	add	r3, r7
 8002fa2:	3b98      	subs	r3, #152	@ 0x98
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002fac:	4613      	mov	r3, r2
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	33f0      	adds	r3, #240	@ 0xf0
 8002fb6:	443b      	add	r3, r7
 8002fb8:	3b94      	subs	r3, #148	@ 0x94
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	33f0      	adds	r3, #240	@ 0xf0
 8002fcc:	443b      	add	r3, r7
 8002fce:	3b90      	subs	r3, #144	@ 0x90
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002fd8:	4613      	mov	r3, r2
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	33f0      	adds	r3, #240	@ 0xf0
 8002fe2:	443b      	add	r3, r7
 8002fe4:	3b8c      	subs	r3, #140	@ 0x8c
 8002fe6:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	33f0      	adds	r3, #240	@ 0xf0
 8002ffa:	443b      	add	r3, r7
 8002ffc:	3b88      	subs	r3, #136	@ 0x88
 8002ffe:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003008:	4613      	mov	r3, r2
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	33f0      	adds	r3, #240	@ 0xf0
 8003012:	443b      	add	r3, r7
 8003014:	3b84      	subs	r3, #132	@ 0x84
 8003016:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003020:	4613      	mov	r3, r2
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	33f0      	adds	r3, #240	@ 0xf0
 800302a:	443b      	add	r3, r7
 800302c:	3b80      	subs	r3, #128	@ 0x80
 800302e:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003038:	4613      	mov	r3, r2
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	33f0      	adds	r3, #240	@ 0xf0
 8003042:	443b      	add	r3, r7
 8003044:	3b7c      	subs	r3, #124	@ 0x7c
 8003046:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800304a:	801a      	strh	r2, [r3, #0]
 800304c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003050:	4613      	mov	r3, r2
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	33f0      	adds	r3, #240	@ 0xf0
 800305a:	443b      	add	r3, r7
 800305c:	3b7a      	subs	r3, #122	@ 0x7a
 800305e:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 8003062:	801a      	strh	r2, [r3, #0]
 8003064:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003068:	4613      	mov	r3, r2
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	33f0      	adds	r3, #240	@ 0xf0
 8003072:	443b      	add	r3, r7
 8003074:	3b78      	subs	r3, #120	@ 0x78
 8003076:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800307a:	801a      	strh	r2, [r3, #0]
 800307c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003080:	4613      	mov	r3, r2
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	33f0      	adds	r3, #240	@ 0xf0
 800308a:	443b      	add	r3, r7
 800308c:	3b74      	subs	r3, #116	@ 0x74
 800308e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003098:	4613      	mov	r3, r2
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	33f0      	adds	r3, #240	@ 0xf0
 80030a2:	443b      	add	r3, r7
 80030a4:	3b70      	subs	r3, #112	@ 0x70
 80030a6:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	33f0      	adds	r3, #240	@ 0xf0
 80030ba:	443b      	add	r3, r7
 80030bc:	3b6c      	subs	r3, #108	@ 0x6c
 80030be:	6019      	str	r1, [r3, #0]
 80030c0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80030c4:	4613      	mov	r3, r2
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	33f0      	adds	r3, #240	@ 0xf0
 80030ce:	443b      	add	r3, r7
 80030d0:	3b68      	subs	r3, #104	@ 0x68
 80030d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80030dc:	4613      	mov	r3, r2
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	33f0      	adds	r3, #240	@ 0xf0
 80030e6:	443b      	add	r3, r7
 80030e8:	3b68      	subs	r3, #104	@ 0x68
 80030ea:	3304      	adds	r3, #4
 80030ec:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80030f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030f4:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 80030f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80030fc:	3301      	adds	r3, #1
 80030fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 800311a:	2300      	movs	r3, #0
 800311c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 8003120:	4b0c      	ldr	r3, [pc, #48]	@ (8003154 <lfs_dir_traverse+0x2e4>)
 8003122:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 8003126:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800312a:	1e5a      	subs	r2, r3, #1
 800312c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	3328      	adds	r3, #40	@ 0x28
 800313a:	440b      	add	r3, r1
 800313c:	3304      	adds	r3, #4
 800313e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 8003142:	e19d      	b.n	8003480 <lfs_dir_traverse+0x610>
 8003144:	7ff00000 	.word	0x7ff00000
 8003148:	08009940 	.word	0x08009940
 800314c:	0800a4cc 	.word	0x0800a4cc
 8003150:	0800982c 	.word	0x0800982c
 8003154:	08002db9 	.word	0x08002db9
            }
        }

popped:
 8003158:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800315a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800315e:	f7ff f8b9 	bl	80022d4 <lfs_tag_id>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d015      	beq.n	8003194 <lfs_dir_traverse+0x324>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8003168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff f8b2 	bl	80022d4 <lfs_tag_id>
 8003170:	4603      	mov	r3, r0
 8003172:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8003174:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8003178:	4293      	cmp	r3, r2
 800317a:	f200 817c 	bhi.w	8003476 <lfs_dir_traverse+0x606>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800317e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff f8a7 	bl	80022d4 <lfs_tag_id>
 8003186:	4603      	mov	r3, r0
 8003188:	461a      	mov	r2, r3
 800318a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 800318e:	4293      	cmp	r3, r2
 8003190:	f240 8171 	bls.w	8003476 <lfs_dir_traverse+0x606>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8003194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff f872 	bl	8002280 <lfs_tag_type3>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f43f ae75 	beq.w	8002e8e <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 80031a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff f86a 	bl	8002280 <lfs_tag_type3>
 80031ac:	4603      	mov	r3, r0
 80031ae:	461a      	mov	r2, r3
 80031b0:	f240 1301 	movw	r3, #257	@ 0x101
 80031b4:	429a      	cmp	r2, r3
 80031b6:	f040 80e0 	bne.w	800337a <lfs_dir_traverse+0x50a>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 80031ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031be:	4ab1      	ldr	r2, [pc, #708]	@ (8003484 <lfs_dir_traverse+0x614>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	f000 815a 	beq.w	800347a <lfs_dir_traverse+0x60a>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 80031c6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	33f0      	adds	r3, #240	@ 0xf0
 80031d4:	443b      	add	r3, r7
 80031d6:	3b98      	subs	r3, #152	@ 0x98
 80031d8:	4618      	mov	r0, r3
 80031da:	233c      	movs	r3, #60	@ 0x3c
 80031dc:	461a      	mov	r2, r3
 80031de:	2100      	movs	r1, #0
 80031e0:	f005 fc52 	bl	8008a88 <memset>
 80031e4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80031e8:	4613      	mov	r3, r2
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	33f0      	adds	r3, #240	@ 0xf0
 80031f2:	443b      	add	r3, r7
 80031f4:	3b98      	subs	r3, #152	@ 0x98
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80031fe:	4613      	mov	r3, r2
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	33f0      	adds	r3, #240	@ 0xf0
 8003208:	443b      	add	r3, r7
 800320a:	3b94      	subs	r3, #148	@ 0x94
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003214:	4613      	mov	r3, r2
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	33f0      	adds	r3, #240	@ 0xf0
 800321e:	443b      	add	r3, r7
 8003220:	3b90      	subs	r3, #144	@ 0x90
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800322a:	4613      	mov	r3, r2
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	33f0      	adds	r3, #240	@ 0xf0
 8003234:	443b      	add	r3, r7
 8003236:	3b8c      	subs	r3, #140	@ 0x8c
 8003238:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003242:	4613      	mov	r3, r2
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	33f0      	adds	r3, #240	@ 0xf0
 800324c:	443b      	add	r3, r7
 800324e:	3b88      	subs	r3, #136	@ 0x88
 8003250:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	33f0      	adds	r3, #240	@ 0xf0
 8003264:	443b      	add	r3, r7
 8003266:	3b84      	subs	r3, #132	@ 0x84
 8003268:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	33f0      	adds	r3, #240	@ 0xf0
 800327c:	443b      	add	r3, r7
 800327e:	3b80      	subs	r3, #128	@ 0x80
 8003280:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	33f0      	adds	r3, #240	@ 0xf0
 8003294:	443b      	add	r3, r7
 8003296:	3b7c      	subs	r3, #124	@ 0x7c
 8003298:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800329c:	801a      	strh	r2, [r3, #0]
 800329e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80032a2:	4613      	mov	r3, r2
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	33f0      	adds	r3, #240	@ 0xf0
 80032ac:	443b      	add	r3, r7
 80032ae:	3b7a      	subs	r3, #122	@ 0x7a
 80032b0:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 80032b4:	801a      	strh	r2, [r3, #0]
 80032b6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80032ba:	4613      	mov	r3, r2
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	33f0      	adds	r3, #240	@ 0xf0
 80032c4:	443b      	add	r3, r7
 80032c6:	3b78      	subs	r3, #120	@ 0x78
 80032c8:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 80032cc:	801a      	strh	r2, [r3, #0]
 80032ce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	33f0      	adds	r3, #240	@ 0xf0
 80032dc:	443b      	add	r3, r7
 80032de:	3b74      	subs	r3, #116	@ 0x74
 80032e0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	33f0      	adds	r3, #240	@ 0xf0
 80032f4:	443b      	add	r3, r7
 80032f6:	3b70      	subs	r3, #112	@ 0x70
 80032f8:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80032fc:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80032fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003302:	3301      	adds	r3, #1
 8003304:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8003308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe fff2 	bl	80022f4 <lfs_tag_size>
 8003310:	4603      	mov	r3, r0
 8003312:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8003316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe ffdb 	bl	80022d4 <lfs_tag_id>
 800331e:	4603      	mov	r3, r0
 8003320:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 8003324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003328:	60bb      	str	r3, [r7, #8]
            off = 0;
 800332a:	2300      	movs	r3, #0
 800332c:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800332e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003332:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8003334:	2300      	movs	r3, #0
 8003336:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 800333a:	2300      	movs	r3, #0
 800333c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8003340:	4b51      	ldr	r3, [pc, #324]	@ (8003488 <lfs_dir_traverse+0x618>)
 8003342:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8003346:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800334a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 800334e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8003352:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 8003356:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800335a:	3301      	adds	r3, #1
 800335c:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 8003360:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 8003364:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	b29a      	uxth	r2, r3
 800336c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8003370:	4413      	add	r3, r2
 8003372:	b29b      	uxth	r3, r3
 8003374:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 8003378:	e589      	b.n	8002e8e <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800337a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800337c:	4618      	mov	r0, r3
 800337e:	f7fe ff7f 	bl	8002280 <lfs_tag_type3>
 8003382:	4603      	mov	r3, r0
 8003384:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8003388:	d159      	bne.n	800343e <lfs_dir_traverse+0x5ce>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800338a:	2300      	movs	r3, #0
 800338c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003390:	e04b      	b.n	800342a <lfs_dir_traverse+0x5ba>
                const struct lfs_attr *a = buffer;
 8003392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003396:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800339a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800339e:	4613      	mov	r3, r2
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	461a      	mov	r2, r3
 80033a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033ac:	4413      	add	r3, r2
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80033b4:	051c      	lsls	r4, r3, #20
 80033b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe ff8b 	bl	80022d4 <lfs_tag_id>
 80033be:	4603      	mov	r3, r0
 80033c0:	461a      	mov	r2, r3
 80033c2:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 80033c6:	4413      	add	r3, r2
 80033c8:	029b      	lsls	r3, r3, #10
 80033ca:	ea44 0103 	orr.w	r1, r4, r3
 80033ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80033d2:	4613      	mov	r3, r2
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	461a      	mov	r2, r3
 80033dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033e0:	4413      	add	r3, r2
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80033e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80033ea:	4613      	mov	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	461a      	mov	r2, r3
 80033f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033f8:	4413      	add	r3, r2
 80033fa:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80033fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003400:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8003404:	4798      	blx	r3
 8003406:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 800340a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800340e:	2b00      	cmp	r3, #0
 8003410:	da02      	bge.n	8003418 <lfs_dir_traverse+0x5a8>
                    return res;
 8003412:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003416:	e10b      	b.n	8003630 <lfs_dir_traverse+0x7c0>
                }

                if (res) {
 8003418:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d12e      	bne.n	800347e <lfs_dir_traverse+0x60e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8003420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003424:	3301      	adds	r3, #1
 8003426:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800342a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800342c:	4618      	mov	r0, r3
 800342e:	f7fe ff61 	bl	80022f4 <lfs_tag_size>
 8003432:	4602      	mov	r2, r0
 8003434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003438:	4293      	cmp	r3, r2
 800343a:	d3aa      	bcc.n	8003392 <lfs_dir_traverse+0x522>
 800343c:	e527      	b.n	8002e8e <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800343e:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 8003442:	029a      	lsls	r2, r3, #10
 8003444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003446:	18d1      	adds	r1, r2, r3
 8003448:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800344c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003450:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8003454:	4798      	blx	r3
 8003456:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 800345a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800345e:	2b00      	cmp	r3, #0
 8003460:	da02      	bge.n	8003468 <lfs_dir_traverse+0x5f8>
                return res;
 8003462:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003466:	e0e3      	b.n	8003630 <lfs_dir_traverse+0x7c0>
            }

            if (res) {
 8003468:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10d      	bne.n	800348c <lfs_dir_traverse+0x61c>
 8003470:	e50d      	b.n	8002e8e <lfs_dir_traverse+0x1e>
                continue;
 8003472:	bf00      	nop
 8003474:	e50b      	b.n	8002e8e <lfs_dir_traverse+0x1e>
            continue;
 8003476:	bf00      	nop
 8003478:	e509      	b.n	8002e8e <lfs_dir_traverse+0x1e>
                continue;
 800347a:	bf00      	nop
 800347c:	e507      	b.n	8002e8e <lfs_dir_traverse+0x1e>
                    break;
 800347e:	bf00      	nop
        {
 8003480:	e505      	b.n	8002e8e <lfs_dir_traverse+0x1e>
 8003482:	bf00      	nop
 8003484:	08002db9 	.word	0x08002db9
 8003488:	600ffc00 	.word	0x600ffc00
                break;
 800348c:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800348e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80ca 	beq.w	800362c <lfs_dir_traverse+0x7bc>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8003498:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800349c:	1e5a      	subs	r2, r3, #1
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	33f0      	adds	r3, #240	@ 0xf0
 80034a8:	443b      	add	r3, r7
 80034aa:	3b98      	subs	r3, #152	@ 0x98
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 80034b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80034b4:	1e5a      	subs	r2, r3, #1
 80034b6:	4613      	mov	r3, r2
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	33f0      	adds	r3, #240	@ 0xf0
 80034c0:	443b      	add	r3, r7
 80034c2:	3b94      	subs	r3, #148	@ 0x94
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 80034c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80034cc:	1e5a      	subs	r2, r3, #1
 80034ce:	4613      	mov	r3, r2
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	33f0      	adds	r3, #240	@ 0xf0
 80034d8:	443b      	add	r3, r7
 80034da:	3b90      	subs	r3, #144	@ 0x90
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 80034e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80034e4:	1e5a      	subs	r2, r3, #1
 80034e6:	4613      	mov	r3, r2
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	33f0      	adds	r3, #240	@ 0xf0
 80034f0:	443b      	add	r3, r7
 80034f2:	3b8c      	subs	r3, #140	@ 0x8c
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 80034fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80034fe:	1e5a      	subs	r2, r3, #1
 8003500:	4613      	mov	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	33f0      	adds	r3, #240	@ 0xf0
 800350a:	443b      	add	r3, r7
 800350c:	3b88      	subs	r3, #136	@ 0x88
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 8003514:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003518:	1e5a      	subs	r2, r3, #1
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	33f0      	adds	r3, #240	@ 0xf0
 8003524:	443b      	add	r3, r7
 8003526:	3b84      	subs	r3, #132	@ 0x84
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 800352e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003532:	1e5a      	subs	r2, r3, #1
 8003534:	4613      	mov	r3, r2
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	33f0      	adds	r3, #240	@ 0xf0
 800353e:	443b      	add	r3, r7
 8003540:	3b80      	subs	r3, #128	@ 0x80
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 8003548:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800354c:	1e5a      	subs	r2, r3, #1
 800354e:	4613      	mov	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	33f0      	adds	r3, #240	@ 0xf0
 8003558:	443b      	add	r3, r7
 800355a:	3b7c      	subs	r3, #124	@ 0x7c
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 8003562:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003566:	1e5a      	subs	r2, r3, #1
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	33f0      	adds	r3, #240	@ 0xf0
 8003572:	443b      	add	r3, r7
 8003574:	3b7a      	subs	r3, #122	@ 0x7a
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 800357c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003580:	1e5a      	subs	r2, r3, #1
 8003582:	4613      	mov	r3, r2
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	33f0      	adds	r3, #240	@ 0xf0
 800358c:	443b      	add	r3, r7
 800358e:	3b78      	subs	r3, #120	@ 0x78
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 8003596:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800359a:	1e5a      	subs	r2, r3, #1
 800359c:	4613      	mov	r3, r2
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	33f0      	adds	r3, #240	@ 0xf0
 80035a6:	443b      	add	r3, r7
 80035a8:	3b74      	subs	r3, #116	@ 0x74
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 80035b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80035b4:	1e5a      	subs	r2, r3, #1
 80035b6:	4613      	mov	r3, r2
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	33f0      	adds	r3, #240	@ 0xf0
 80035c0:	443b      	add	r3, r7
 80035c2:	3b70      	subs	r3, #112	@ 0x70
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 80035ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80035ce:	1e5a      	subs	r2, r3, #1
 80035d0:	4613      	mov	r3, r2
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	33f0      	adds	r3, #240	@ 0xf0
 80035da:	443b      	add	r3, r7
 80035dc:	3b6c      	subs	r3, #108	@ 0x6c
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 80035e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80035e6:	1e5a      	subs	r2, r3, #1
 80035e8:	4613      	mov	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	33f0      	adds	r3, #240	@ 0xf0
 80035f2:	443b      	add	r3, r7
 80035f4:	3b68      	subs	r3, #104	@ 0x68
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 80035fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003600:	1e5a      	subs	r2, r3, #1
 8003602:	4613      	mov	r3, r2
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	33f0      	adds	r3, #240	@ 0xf0
 800360c:	443b      	add	r3, r7
 800360e:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 8003612:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003616:	3204      	adds	r2, #4
 8003618:	e892 0003 	ldmia.w	r2, {r0, r1}
 800361c:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8003620:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003624:	3b01      	subs	r3, #1
 8003626:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 800362a:	e596      	b.n	800315a <lfs_dir_traverse+0x2ea>
    } else {
        return res;
 800362c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 8003630:	4618      	mov	r0, r3
 8003632:	37f4      	adds	r7, #244	@ 0xf4
 8003634:	46bd      	mov	sp, r7
 8003636:	bd90      	pop	{r4, r7, pc}

08003638 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8003638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363a:	b0a5      	sub	sp, #148	@ 0x94
 800363c:	af04      	add	r7, sp, #16
 800363e:	6178      	str	r0, [r7, #20]
 8003640:	6139      	str	r1, [r7, #16]
 8003642:	60fa      	str	r2, [r7, #12]
 8003644:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8003646:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800364a:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00f      	beq.n	8003674 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800365c:	429a      	cmp	r2, r3
 800365e:	d206      	bcs.n	800366e <lfs_dir_fetchmatch+0x36>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	3304      	adds	r3, #4
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800366a:	429a      	cmp	r2, r3
 800366c:	d302      	bcc.n	8003674 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 800366e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8003672:	e3a4      	b.n	8003dbe <lfs_dir_fetchmatch+0x786>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8003674:	2300      	movs	r3, #0
 8003676:	647b      	str	r3, [r7, #68]	@ 0x44
 8003678:	2300      	movs	r3, #0
 800367a:	64bb      	str	r3, [r7, #72]	@ 0x48
    int r = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 8003680:	2300      	movs	r3, #0
 8003682:	677b      	str	r3, [r7, #116]	@ 0x74
 8003684:	e05a      	b.n	800373c <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 8003686:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8003688:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8003690:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8003692:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8003696:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003698:	0092      	lsls	r2, r2, #2
 800369a:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800369c:	2104      	movs	r1, #4
 800369e:	9103      	str	r1, [sp, #12]
 80036a0:	9202      	str	r2, [sp, #8]
 80036a2:	2200      	movs	r2, #0
 80036a4:	9201      	str	r2, [sp, #4]
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	2304      	movs	r3, #4
 80036aa:	4602      	mov	r2, r0
 80036ac:	2100      	movs	r1, #0
 80036ae:	6978      	ldr	r0, [r7, #20]
 80036b0:	f7fe f978 	bl	80019a4 <lfs_bd_read>
 80036b4:	64f8      	str	r0, [r7, #76]	@ 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 80036b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	3378      	adds	r3, #120	@ 0x78
 80036bc:	f107 0208 	add.w	r2, r7, #8
 80036c0:	4413      	add	r3, r2
 80036c2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fe f901 	bl	80018ce <lfs_fromle32>
 80036cc:	4602      	mov	r2, r0
 80036ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	3378      	adds	r3, #120	@ 0x78
 80036d4:	f107 0108 	add.w	r1, r7, #8
 80036d8:	440b      	add	r3, r1
 80036da:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 80036de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <lfs_dir_fetchmatch+0xb8>
 80036e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036e6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80036ea:	d001      	beq.n	80036f0 <lfs_dir_fetchmatch+0xb8>
            return err;
 80036ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036ee:	e366      	b.n	8003dbe <lfs_dir_fetchmatch+0x786>
        }

        if (err != LFS_ERR_CORRUPT &&
 80036f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036f2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80036f6:	d01e      	beq.n	8003736 <lfs_dir_fetchmatch+0xfe>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 80036f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	3378      	adds	r3, #120	@ 0x78
 80036fe:	f107 0208 	add.w	r2, r7, #8
 8003702:	4413      	add	r3, r2
 8003704:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8003708:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800370a:	3301      	adds	r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	bfb8      	it	lt
 8003714:	425b      	neglt	r3, r3
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	3378      	adds	r3, #120	@ 0x78
 800371a:	f107 0108 	add.w	r1, r7, #8
 800371e:	440b      	add	r3, r1
 8003720:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003724:	4619      	mov	r1, r3
 8003726:	4610      	mov	r0, r2
 8003728:	f7fe f8c3 	bl	80018b2 <lfs_scmp>
 800372c:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800372e:	2b00      	cmp	r3, #0
 8003730:	dd01      	ble.n	8003736 <lfs_dir_fetchmatch+0xfe>
            r = i;
 8003732:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003734:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 8003736:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003738:	3301      	adds	r3, #1
 800373a:	677b      	str	r3, [r7, #116]	@ 0x74
 800373c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800373e:	2b01      	cmp	r3, #1
 8003740:	dda1      	ble.n	8003686 <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8003742:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003744:	2b00      	cmp	r3, #0
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	bfb8      	it	lt
 800374c:	425b      	neglt	r3, r3
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4413      	add	r3, r2
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800375a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800375c:	3301      	adds	r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	bfb8      	it	lt
 8003766:	425b      	neglt	r3, r3
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4413      	add	r3, r2
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8003774:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003776:	2b00      	cmp	r3, #0
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	bfb8      	it	lt
 800377e:	425b      	neglt	r3, r3
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	3378      	adds	r3, #120	@ 0x78
 8003784:	f107 0208 	add.w	r2, r7, #8
 8003788:	4413      	add	r3, r2
 800378a:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2200      	movs	r2, #0
 8003796:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8003798:	2300      	movs	r3, #0
 800379a:	673b      	str	r3, [r7, #112]	@ 0x70
 800379c:	e2fb      	b.n	8003d96 <lfs_dir_fetchmatch+0x75e>
        lfs_off_t off = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
        lfs_tag_t ptag = 0xffffffff;
 80037a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037a6:	66bb      	str	r3, [r7, #104]	@ 0x68

        uint16_t tempcount = 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80037ae:	4aa9      	ldr	r2, [pc, #676]	@ (8003a54 <lfs_dir_fetchmatch+0x41c>)
 80037b0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80037b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037b8:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 80037bc:	2300      	movs	r3, #0
 80037be:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        lfs_stag_t tempbesttag = besttag;
 80037c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037c4:	663b      	str	r3, [r7, #96]	@ 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 80037c6:	2300      	movs	r3, #0
 80037c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        bool hasfcrc = false;
 80037cc:	2300      	movs	r3, #0
 80037ce:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe f884 	bl	80018e4 <lfs_tole32>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	3308      	adds	r3, #8
 80037e6:	2204      	movs	r2, #4
 80037e8:	4619      	mov	r1, r3
 80037ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037ee:	f004 ff3b 	bl	8008668 <lfs_crc>
 80037f2:	4603      	mov	r3, r0
 80037f4:	633b      	str	r3, [r7, #48]	@ 0x30
        dir->rev = lfs_fromle32(dir->rev);
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe f867 	bl	80018ce <lfs_fromle32>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8003806:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003808:	f7fe fd81 	bl	800230e <lfs_tag_dsize>
 800380c:	4602      	mov	r2, r0
 800380e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003810:	4413      	add	r3, r2
 8003812:	66fb      	str	r3, [r7, #108]	@ 0x6c
            int err = lfs_bd_read(lfs,
 8003814:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800381a:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2204      	movs	r2, #4
 8003822:	9203      	str	r2, [sp, #12]
 8003824:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003828:	9202      	str	r2, [sp, #8]
 800382a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800382c:	9201      	str	r2, [sp, #4]
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	4603      	mov	r3, r0
 8003832:	460a      	mov	r2, r1
 8003834:	2100      	movs	r1, #0
 8003836:	6978      	ldr	r0, [r7, #20]
 8003838:	f7fe f8b4 	bl	80019a4 <lfs_bd_read>
 800383c:	65b8      	str	r0, [r7, #88]	@ 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800383e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003840:	2b00      	cmp	r3, #0
 8003842:	d006      	beq.n	8003852 <lfs_dir_fetchmatch+0x21a>
                if (err == LFS_ERR_CORRUPT) {
 8003844:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003846:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800384a:	f000 81d6 	beq.w	8003bfa <lfs_dir_fetchmatch+0x5c2>
                    // can't continue?
                    break;
                }
                return err;
 800384e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003850:	e2b5      	b.n	8003dbe <lfs_dir_fetchmatch+0x786>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8003852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003854:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8003858:	2204      	movs	r2, #4
 800385a:	4618      	mov	r0, r3
 800385c:	f004 ff04 	bl	8008668 <lfs_crc>
 8003860:	4603      	mov	r3, r0
 8003862:	633b      	str	r3, [r7, #48]	@ 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 8003864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003866:	4618      	mov	r0, r3
 8003868:	f7fe f848 	bl	80018fc <lfs_frombe32>
 800386c:	4602      	mov	r2, r0
 800386e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003870:	4053      	eors	r3, r2
 8003872:	62fb      	str	r3, [r7, #44]	@ 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 8003874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe fcc1 	bl	80021fe <lfs_tag_isvalid>
 800387c:	4603      	mov	r3, r0
 800387e:	f083 0301 	eor.w	r3, r3, #1
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00b      	beq.n	80038a0 <lfs_dir_fetchmatch+0x268>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 8003888:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800388a:	f7fe fce9 	bl	8002260 <lfs_tag_type2>
 800388e:	4603      	mov	r3, r0
 8003890:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003894:	bf0c      	ite	eq
 8003896:	2301      	moveq	r3, #1
 8003898:	2300      	movne	r3, #0
 800389a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                break;
 800389e:	e1bb      	b.n	8003c18 <lfs_dir_fetchmatch+0x5e0>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 80038a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fd33 	bl	800230e <lfs_tag_dsize>
 80038a8:	4602      	mov	r2, r0
 80038aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ac:	441a      	add	r2, r3
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	f200 81a2 	bhi.w	8003bfe <lfs_dir_fetchmatch+0x5c6>
                break;
            }

            ptag = tag;
 80038ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038bc:	66bb      	str	r3, [r7, #104]	@ 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 80038be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fe fccd 	bl	8002260 <lfs_tag_type2>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80038cc:	d15e      	bne.n	800398c <lfs_dir_fetchmatch+0x354>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 80038ce:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038d4:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80038dc:	3204      	adds	r2, #4
 80038de:	2104      	movs	r1, #4
 80038e0:	9103      	str	r1, [sp, #12]
 80038e2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80038e6:	9102      	str	r1, [sp, #8]
 80038e8:	9201      	str	r2, [sp, #4]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	4623      	mov	r3, r4
 80038ee:	4602      	mov	r2, r0
 80038f0:	2100      	movs	r1, #0
 80038f2:	6978      	ldr	r0, [r7, #20]
 80038f4:	f7fe f856 	bl	80019a4 <lfs_bd_read>
 80038f8:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80038fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d006      	beq.n	800390e <lfs_dir_fetchmatch+0x2d6>
                    if (err == LFS_ERR_CORRUPT) {
 8003900:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003902:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003906:	f000 817c 	beq.w	8003c02 <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 800390a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                return err;
 800390c:	e257      	b.n	8003dbe <lfs_dir_fetchmatch+0x786>
                }
                dcrc = lfs_fromle32(dcrc);
 800390e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003910:	4618      	mov	r0, r3
 8003912:	f7fd ffdc 	bl	80018ce <lfs_fromle32>
 8003916:	4603      	mov	r3, r0
 8003918:	62bb      	str	r3, [r7, #40]	@ 0x28

                if (crc != dcrc) {
 800391a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800391c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800391e:	429a      	cmp	r2, r3
 8003920:	f040 8171 	bne.w	8003c06 <lfs_dir_fetchmatch+0x5ce>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8003924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe fcba 	bl	80022a0 <lfs_tag_chunk>
 800392c:	4603      	mov	r3, r0
 800392e:	07db      	lsls	r3, r3, #31
 8003930:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003932:	4053      	eors	r3, r2
 8003934:	66bb      	str	r3, [r7, #104]	@ 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800393e:	2204      	movs	r2, #4
 8003940:	4618      	mov	r0, r3
 8003942:	f004 fe91 	bl	8008668 <lfs_crc>
 8003946:	4602      	mov	r2, r0
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800394c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800394e:	67fb      	str	r3, [r7, #124]	@ 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 8003950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe fcdb 	bl	800230e <lfs_tag_dsize>
 8003958:	4602      	mov	r2, r0
 800395a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800395c:	441a      	add	r2, r3
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003966:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800396e:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8003970:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8003976:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 8003982:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8003984:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003988:	633b      	str	r3, [r7, #48]	@ 0x30
 800398a:	e73c      	b.n	8003806 <lfs_dir_fetchmatch+0x1ce>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 800398c:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	681c      	ldr	r4, [r3, #0]
 800399a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800399c:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 800399e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe fcb4 	bl	800230e <lfs_tag_dsize>
 80039a6:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 80039a8:	3b04      	subs	r3, #4
 80039aa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80039ae:	9203      	str	r2, [sp, #12]
 80039b0:	9302      	str	r3, [sp, #8]
 80039b2:	9501      	str	r5, [sp, #4]
 80039b4:	9400      	str	r4, [sp, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4632      	mov	r2, r6
 80039ba:	2100      	movs	r1, #0
 80039bc:	6978      	ldr	r0, [r7, #20]
 80039be:	f7fe f98e 	bl	8001cde <lfs_bd_crc>
 80039c2:	65b8      	str	r0, [r7, #88]	@ 0x58
            if (err) {
 80039c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d006      	beq.n	80039d8 <lfs_dir_fetchmatch+0x3a0>
                if (err == LFS_ERR_CORRUPT) {
 80039ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039cc:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80039d0:	f000 811b 	beq.w	8003c0a <lfs_dir_fetchmatch+0x5d2>
                    break;
                }
                return err;
 80039d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039d6:	e1f2      	b.n	8003dbe <lfs_dir_fetchmatch+0x786>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 80039d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe fc30 	bl	8002240 <lfs_tag_type1>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d113      	bne.n	8003a0e <lfs_dir_fetchmatch+0x3d6>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 80039e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe fc73 	bl	80022d4 <lfs_tag_id>
 80039ee:	4603      	mov	r3, r0
 80039f0:	461a      	mov	r2, r3
 80039f2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80039f6:	4293      	cmp	r3, r2
 80039f8:	f200 80b6 	bhi.w	8003b68 <lfs_dir_fetchmatch+0x530>
                    tempcount = lfs_tag_id(tag) + 1;
 80039fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fe fc68 	bl	80022d4 <lfs_tag_id>
 8003a04:	4603      	mov	r3, r0
 8003a06:	3301      	adds	r3, #1
 8003a08:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003a0c:	e0ac      	b.n	8003b68 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8003a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fe fc15 	bl	8002240 <lfs_tag_type1>
 8003a16:	4603      	mov	r3, r0
 8003a18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a1c:	d13a      	bne.n	8003a94 <lfs_dir_fetchmatch+0x45c>
                tempcount += lfs_tag_splice(tag);
 8003a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fe fc4a 	bl	80022ba <lfs_tag_splice>
 8003a26:	4603      	mov	r3, r0
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003a2e:	4413      	add	r3, r2
 8003a30:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8003a34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003a36:	4b08      	ldr	r3, [pc, #32]	@ (8003a58 <lfs_dir_fetchmatch+0x420>)
 8003a38:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8003a3a:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8003a3e:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8003a42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d109      	bne.n	8003a5c <lfs_dir_fetchmatch+0x424>
                    tempbesttag |= 0x80000000;
 8003a48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a50:	e08a      	b.n	8003b68 <lfs_dir_fetchmatch+0x530>
 8003a52:	bf00      	nop
 8003a54:	08009980 	.word	0x08009980
 8003a58:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 8003a5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a62:	f000 8081 	beq.w	8003b68 <lfs_dir_fetchmatch+0x530>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8003a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fe fc33 	bl	80022d4 <lfs_tag_id>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	461c      	mov	r4, r3
 8003a72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe fc2d 	bl	80022d4 <lfs_tag_id>
 8003a7a:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8003a7c:	429c      	cmp	r4, r3
 8003a7e:	d873      	bhi.n	8003b68 <lfs_dir_fetchmatch+0x530>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8003a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe fc19 	bl	80022ba <lfs_tag_splice>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	029a      	lsls	r2, r3, #10
 8003a8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a8e:	4413      	add	r3, r2
 8003a90:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a92:	e069      	b.n	8003b68 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8003a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe fbd2 	bl	8002240 <lfs_tag_type1>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003aa2:	d132      	bne.n	8003b0a <lfs_dir_fetchmatch+0x4d2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8003aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe fbfa 	bl	80022a0 <lfs_tag_chunk>
 8003aac:	4603      	mov	r3, r0
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	bf14      	ite	ne
 8003ab6:	2301      	movne	r3, #1
 8003ab8:	2300      	moveq	r3, #0
 8003aba:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

                err = lfs_bd_read(lfs,
 8003abe:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ac4:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003acc:	3204      	adds	r2, #4
 8003ace:	2108      	movs	r1, #8
 8003ad0:	9103      	str	r1, [sp, #12]
 8003ad2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8003ad6:	9102      	str	r1, [sp, #8]
 8003ad8:	9201      	str	r2, [sp, #4]
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	4623      	mov	r3, r4
 8003ade:	4602      	mov	r2, r0
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	6978      	ldr	r0, [r7, #20]
 8003ae4:	f7fd ff5e 	bl	80019a4 <lfs_bd_read>
 8003ae8:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8003aea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d006      	beq.n	8003afe <lfs_dir_fetchmatch+0x4c6>
                    if (err == LFS_ERR_CORRUPT) {
 8003af0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003af2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003af6:	f000 808a 	beq.w	8003c0e <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                    return err;
 8003afa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003afc:	e15f      	b.n	8003dbe <lfs_dir_fetchmatch+0x786>
                }
                lfs_pair_fromle32(temptail);
 8003afe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe fb47 	bl	8002196 <lfs_pair_fromle32>
 8003b08:	e02e      	b.n	8003b68 <lfs_dir_fetchmatch+0x530>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8003b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fe fbb7 	bl	8002280 <lfs_tag_type3>
 8003b12:	4603      	mov	r3, r0
 8003b14:	461a      	mov	r2, r3
 8003b16:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d124      	bne.n	8003b68 <lfs_dir_fetchmatch+0x530>
                err = lfs_bd_read(lfs,
 8003b1e:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b24:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b2c:	3204      	adds	r2, #4
 8003b2e:	2108      	movs	r1, #8
 8003b30:	9103      	str	r1, [sp, #12]
 8003b32:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8003b36:	9102      	str	r1, [sp, #8]
 8003b38:	9201      	str	r2, [sp, #4]
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	4623      	mov	r3, r4
 8003b3e:	4602      	mov	r2, r0
 8003b40:	2100      	movs	r1, #0
 8003b42:	6978      	ldr	r0, [r7, #20]
 8003b44:	f7fd ff2e 	bl	80019a4 <lfs_bd_read>
 8003b48:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 8003b4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <lfs_dir_fetchmatch+0x520>
                    if (err == LFS_ERR_CORRUPT) {
 8003b50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b52:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003b56:	d05c      	beq.n	8003c12 <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 8003b58:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fe fcd5 	bl	800250c <lfs_fcrc_fromle32>
                hasfcrc = true;
 8003b62:	2301      	movs	r3, #1
 8003b64:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8003b68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b6e:	405a      	eors	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f47f ae46 	bne.w	8003806 <lfs_dir_fetchmatch+0x1ce>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8003b7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
                        dir->pair[0], off+sizeof(tag)});
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8003b80:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8003b82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b84:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8003b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b88:	f107 0220 	add.w	r2, r7, #32
 8003b8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b90:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003b94:	4798      	blx	r3
 8003b96:	6578      	str	r0, [r7, #84]	@ 0x54
                if (res < 0) {
 8003b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	da05      	bge.n	8003baa <lfs_dir_fetchmatch+0x572>
                    if (res == LFS_ERR_CORRUPT) {
 8003b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003ba4:	d037      	beq.n	8003c16 <lfs_dir_fetchmatch+0x5de>
                        break;
                    }
                    return res;
 8003ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                return err;
 8003ba8:	e109      	b.n	8003dbe <lfs_dir_fetchmatch+0x786>
                }

                if (res == LFS_CMP_EQ) {
 8003baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d102      	bne.n	8003bb6 <lfs_dir_fetchmatch+0x57e>
                    // found a match
                    tempbesttag = tag;
 8003bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bb4:	e627      	b.n	8003806 <lfs_dir_fetchmatch+0x1ce>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8003bb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bba:	405a      	eors	r2, r3
 8003bbc:	4b82      	ldr	r3, [pc, #520]	@ (8003dc8 <lfs_dir_fetchmatch+0x790>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d103      	bne.n	8003bcc <lfs_dir_fetchmatch+0x594>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8003bc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003bc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bca:	e61c      	b.n	8003806 <lfs_dir_fetchmatch+0x1ce>
                } else if (res == LFS_CMP_GT &&
 8003bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	f47f ae19 	bne.w	8003806 <lfs_dir_fetchmatch+0x1ce>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8003bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fe fb7c 	bl	80022d4 <lfs_tag_id>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	461c      	mov	r4, r3
 8003be0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe fb76 	bl	80022d4 <lfs_tag_id>
 8003be8:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8003bea:	429c      	cmp	r4, r3
 8003bec:	f63f ae0b 	bhi.w	8003806 <lfs_dir_fetchmatch+0x1ce>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8003bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bf6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bf8:	e605      	b.n	8003806 <lfs_dir_fetchmatch+0x1ce>
                    break;
 8003bfa:	bf00      	nop
 8003bfc:	e00c      	b.n	8003c18 <lfs_dir_fetchmatch+0x5e0>
                break;
 8003bfe:	bf00      	nop
 8003c00:	e00a      	b.n	8003c18 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8003c02:	bf00      	nop
 8003c04:	e008      	b.n	8003c18 <lfs_dir_fetchmatch+0x5e0>
                    break;
 8003c06:	bf00      	nop
 8003c08:	e006      	b.n	8003c18 <lfs_dir_fetchmatch+0x5e0>
                    break;
 8003c0a:	bf00      	nop
 8003c0c:	e004      	b.n	8003c18 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8003c0e:	bf00      	nop
 8003c10:	e002      	b.n	8003c18 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8003c12:	bf00      	nop
 8003c14:	e000      	b.n	8003c18 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8003c16:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d000      	beq.n	8003c22 <lfs_dir_fetchmatch+0x5ea>
 8003c20:	e017      	b.n	8003c52 <lfs_dir_fetchmatch+0x61a>
            // try the other block?
            lfs_pair_swap(dir->pair);
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fe fa2f 	bl	8002088 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8003c2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	bfb8      	it	lt
 8003c36:	425b      	neglt	r3, r3
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	3378      	adds	r3, #120	@ 0x78
 8003c3c:	f107 0208 	add.w	r2, r7, #8
 8003c40:	4413      	add	r3, r2
 8003c42:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8003c4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c50:	e0a1      	b.n	8003d96 <lfs_dir_fetchmatch+0x75e>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2200      	movs	r2, #0
 8003c56:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8003c58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d03a      	beq.n	8003cd6 <lfs_dir_fetchmatch+0x69e>
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c68:	6992      	ldr	r2, [r2, #24]
 8003c6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c6e:	fb01 f202 	mul.w	r2, r1, r2
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d12e      	bne.n	8003cd6 <lfs_dir_fetchmatch+0x69e>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 8003c78:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d02a      	beq.n	8003cd6 <lfs_dir_fetchmatch+0x69e>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 8003c80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c84:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 8003c86:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c8c:	69dd      	ldr	r5, [r3, #28]
                int err = lfs_bd_crc(lfs,
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	68d2      	ldr	r2, [r2, #12]
 8003c96:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003c98:	f107 001c 	add.w	r0, r7, #28
 8003c9c:	9003      	str	r0, [sp, #12]
 8003c9e:	9102      	str	r1, [sp, #8]
 8003ca0:	9201      	str	r2, [sp, #4]
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	462b      	mov	r3, r5
 8003ca6:	4622      	mov	r2, r4
 8003ca8:	2100      	movs	r1, #0
 8003caa:	6978      	ldr	r0, [r7, #20]
 8003cac:	f7fe f817 	bl	8001cde <lfs_bd_crc>
 8003cb0:	6538      	str	r0, [r7, #80]	@ 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8003cb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <lfs_dir_fetchmatch+0x68c>
 8003cb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cba:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003cbe:	d001      	beq.n	8003cc4 <lfs_dir_fetchmatch+0x68c>
                    return err;
 8003cc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cc2:	e07c      	b.n	8003dbe <lfs_dir_fetchmatch+0x786>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8003cc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	333c      	adds	r3, #60	@ 0x3c
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4611      	mov	r1, r2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fe fbb4 	bl	800244c <lfs_gstate_hasmovehere>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d028      	beq.n	8003d3c <lfs_dir_fetchmatch+0x704>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fe faf0 	bl	80022d4 <lfs_tag_id>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	461c      	mov	r4, r3
 8003cf8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe faea 	bl	80022d4 <lfs_tag_id>
 8003d00:	4603      	mov	r3, r0
 8003d02:	429c      	cmp	r4, r3
 8003d04:	d104      	bne.n	8003d10 <lfs_dir_fetchmatch+0x6d8>
                besttag |= 0x80000000;
 8003d06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d0e:	e015      	b.n	8003d3c <lfs_dir_fetchmatch+0x704>
            } else if (besttag != -1 &&
 8003d10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d16:	d011      	beq.n	8003d3c <lfs_dir_fetchmatch+0x704>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fe fad9 	bl	80022d4 <lfs_tag_id>
 8003d22:	4603      	mov	r3, r0
 8003d24:	461c      	mov	r4, r3
 8003d26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe fad3 	bl	80022d4 <lfs_tag_id>
 8003d2e:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 8003d30:	429c      	cmp	r4, r3
 8003d32:	d203      	bcs.n	8003d3c <lfs_dir_fetchmatch+0x704>
                besttag -= LFS_MKTAG(0, 1, 0);
 8003d34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d36:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003d3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8003d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d010      	beq.n	8003d66 <lfs_dir_fetchmatch+0x72e>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8003d44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fe fac4 	bl	80022d4 <lfs_tag_id>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	461a      	mov	r2, r3
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	8a9b      	ldrh	r3, [r3, #20]
 8003d54:	4619      	mov	r1, r3
 8003d56:	4610      	mov	r0, r2
 8003d58:	f7fd fd49 	bl	80017ee <lfs_min>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d64:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8003d66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fe fa48 	bl	80021fe <lfs_tag_isvalid>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <lfs_dir_fetchmatch+0x740>
            return besttag;
 8003d74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d76:	e022      	b.n	8003dbe <lfs_dir_fetchmatch+0x786>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8003d78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe faaa 	bl	80022d4 <lfs_tag_id>
 8003d80:	4603      	mov	r3, r0
 8003d82:	461a      	mov	r2, r3
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	8a9b      	ldrh	r3, [r3, #20]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d202      	bcs.n	8003d92 <lfs_dir_fetchmatch+0x75a>
            return LFS_ERR_NOENT;
 8003d8c:	f06f 0301 	mvn.w	r3, #1
 8003d90:	e015      	b.n	8003dbe <lfs_dir_fetchmatch+0x786>
        } else {
            return 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	e013      	b.n	8003dbe <lfs_dir_fetchmatch+0x786>
    for (int i = 0; i < 2; i++) {
 8003d96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	f77f ad00 	ble.w	800379e <lfs_dir_fetchmatch+0x166>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	4909      	ldr	r1, [pc, #36]	@ (8003dcc <lfs_dir_fetchmatch+0x794>)
 8003da8:	9101      	str	r1, [sp, #4]
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	4613      	mov	r3, r2
 8003dae:	f240 5259 	movw	r2, #1369	@ 0x559
 8003db2:	4907      	ldr	r1, [pc, #28]	@ (8003dd0 <lfs_dir_fetchmatch+0x798>)
 8003db4:	4807      	ldr	r0, [pc, #28]	@ (8003dd4 <lfs_dir_fetchmatch+0x79c>)
 8003db6:	f004 fe45 	bl	8008a44 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8003dba:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3784      	adds	r7, #132	@ 0x84
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	7ffffc00 	.word	0x7ffffc00
 8003dcc:	0800993c 	.word	0x0800993c
 8003dd0:	0800982c 	.word	0x0800982c
 8003dd4:	08009948 	.word	0x08009948

08003dd8 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b088      	sub	sp, #32
 8003ddc:	af04      	add	r7, sp, #16
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8003de4:	2300      	movs	r3, #0
 8003de6:	9303      	str	r3, [sp, #12]
 8003de8:	2300      	movs	r3, #0
 8003dea:	9302      	str	r3, [sp, #8]
 8003dec:	2300      	movs	r3, #0
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f7ff fc1a 	bl	8003638 <lfs_dir_fetchmatch>
 8003e04:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	@ 0x28
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8003e1c:	f107 0310 	add.w	r3, r7, #16
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	4b12      	ldr	r3, [pc, #72]	@ (8003e6c <lfs_dir_getgstate+0x5c>)
 8003e24:	4a12      	ldr	r2, [pc, #72]	@ (8003e70 <lfs_dir_getgstate+0x60>)
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f7fe fecf 	bl	8002bcc <lfs_dir_get>
 8003e2e:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	da05      	bge.n	8003e42 <lfs_dir_getgstate+0x32>
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f113 0f02 	cmn.w	r3, #2
 8003e3c:	d001      	beq.n	8003e42 <lfs_dir_getgstate+0x32>
        return res;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	e00f      	b.n	8003e62 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f113 0f02 	cmn.w	r3, #2
 8003e48:	d00a      	beq.n	8003e60 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8003e4a:	f107 0310 	add.w	r3, r7, #16
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe fb1c 	bl	800248c <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8003e54:	f107 0310 	add.w	r3, r7, #16
 8003e58:	4619      	mov	r1, r3
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fe fa6b 	bl	8002336 <lfs_gstate_xor>
    }

    return 0;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3720      	adds	r7, #32
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	7ff0000c 	.word	0x7ff0000c
 8003e70:	7ff00000 	.word	0x7ff00000

08003e74 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8003e74:	b590      	push	{r4, r7, lr}
 8003e76:	b08f      	sub	sp, #60	@ 0x3c
 8003e78:	af04      	add	r7, sp, #16
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 8003e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e90:	689c      	ldr	r4, [r3, #8]
 8003e92:	68b8      	ldr	r0, [r7, #8]
 8003e94:	f7fe fa2e 	bl	80022f4 <lfs_tag_size>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	f7fd fca6 	bl	80017ee <lfs_min>
 8003ea2:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8003ea4:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 8003eae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003eb0:	6849      	ldr	r1, [r1, #4]
 8003eb2:	69b8      	ldr	r0, [r7, #24]
 8003eb4:	9003      	str	r0, [sp, #12]
 8003eb6:	9102      	str	r1, [sp, #8]
 8003eb8:	9201      	str	r2, [sp, #4]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	4622      	mov	r2, r4
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	6a38      	ldr	r0, [r7, #32]
 8003ec4:	f7fd feba 	bl	8001c3c <lfs_bd_cmp>
 8003ec8:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <lfs_dir_find_match+0x60>
        return res;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	e014      	b.n	8003efe <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed6:	689c      	ldr	r4, [r3, #8]
 8003ed8:	68b8      	ldr	r0, [r7, #8]
 8003eda:	f7fe fa0b 	bl	80022f4 <lfs_tag_size>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	429c      	cmp	r4, r3
 8003ee2:	d00b      	beq.n	8003efc <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	689c      	ldr	r4, [r3, #8]
 8003ee8:	68b8      	ldr	r0, [r7, #8]
 8003eea:	f7fe fa03 	bl	80022f4 <lfs_tag_size>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	429c      	cmp	r4, r3
 8003ef2:	d201      	bcs.n	8003ef8 <lfs_dir_find_match+0x84>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e002      	b.n	8003efe <lfs_dir_find_match+0x8a>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e000      	b.n	8003efe <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	372c      	adds	r7, #44	@ 0x2c
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd90      	pop	{r4, r7, pc}
	...

08003f08 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b093      	sub	sp, #76	@ 0x4c
 8003f0c:	af04      	add	r7, sp, #16
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (id) {
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <lfs_dir_find+0x22>
        *id = 0x3ff;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003f28:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8003f2a:	4b6e      	ldr	r3, [pc, #440]	@ (80040e4 <lfs_dir_find+0x1dc>)
 8003f2c:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a1a      	ldr	r2, [r3, #32]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8003f3e:	496a      	ldr	r1, [pc, #424]	@ (80040e8 <lfs_dir_find+0x1e0>)
 8003f40:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003f42:	f004 fdc7 	bl	8008ad4 <strspn>
 8003f46:	4602      	mov	r2, r0
 8003f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f4a:	4413      	add	r3, r2
 8003f4c:	637b      	str	r3, [r7, #52]	@ 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8003f4e:	4966      	ldr	r1, [pc, #408]	@ (80040e8 <lfs_dir_find+0x1e0>)
 8003f50:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003f52:	f004 fdae 	bl	8008ab2 <strcspn>
 8003f56:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d105      	bne.n	8003f6a <lfs_dir_find+0x62>
 8003f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f60:	781a      	ldrb	r2, [r3, #0]
 8003f62:	4b62      	ldr	r3, [pc, #392]	@ (80040ec <lfs_dir_find+0x1e4>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d00a      	beq.n	8003f80 <lfs_dir_find+0x78>
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d10c      	bne.n	8003f8a <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8003f70:	2202      	movs	r2, #2
 8003f72:	495f      	ldr	r1, [pc, #380]	@ (80040f0 <lfs_dir_find+0x1e8>)
 8003f74:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003f76:	f004 fd77 	bl	8008a68 <memcmp>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d104      	bne.n	8003f8a <lfs_dir_find+0x82>
            name += namelen;
 8003f80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	4413      	add	r3, r2
 8003f86:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 8003f88:	e7d9      	b.n	8003f3e <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8003f8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8e:	4413      	add	r3, r2
 8003f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8003f92:	2301      	movs	r3, #1
 8003f94:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8003f96:	4954      	ldr	r1, [pc, #336]	@ (80040e8 <lfs_dir_find+0x1e0>)
 8003f98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f9a:	f004 fd9b 	bl	8008ad4 <strspn>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa2:	4413      	add	r3, r2
 8003fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 8003fa6:	4950      	ldr	r1, [pc, #320]	@ (80040e8 <lfs_dir_find+0x1e0>)
 8003fa8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003faa:	f004 fd82 	bl	8008ab2 <strcspn>
 8003fae:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d01d      	beq.n	8003ff2 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d112      	bne.n	8003fe2 <lfs_dir_find+0xda>
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	494c      	ldr	r1, [pc, #304]	@ (80040f0 <lfs_dir_find+0x1e8>)
 8003fc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fc2:	f004 fd51 	bl	8008a68 <memcmp>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <lfs_dir_find+0xda>
                depth -= 1;
 8003fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 8003fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d107      	bne.n	8003fe8 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8003fd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	4413      	add	r3, r2
 8003fde:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 8003fe0:	e7ad      	b.n	8003f3e <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8003fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 8003fe8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	4413      	add	r3, r2
 8003fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 8003ff0:	e7d1      	b.n	8003f96 <lfs_dir_find+0x8e>
                break;
 8003ff2:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8003ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <lfs_dir_find+0xf8>
            return tag;
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffe:	e06c      	b.n	80040da <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004004:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8004006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004008:	4618      	mov	r0, r3
 800400a:	f7fe f939 	bl	8002280 <lfs_tag_type3>
 800400e:	4603      	mov	r3, r0
 8004010:	2b02      	cmp	r3, #2
 8004012:	d002      	beq.n	800401a <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8004014:	f06f 0313 	mvn.w	r3, #19
 8004018:	e05f      	b.n	80040da <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800401a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401c:	4618      	mov	r0, r3
 800401e:	f7fe f959 	bl	80022d4 <lfs_tag_id>
 8004022:	4603      	mov	r3, r0
 8004024:	461a      	mov	r2, r3
 8004026:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800402a:	429a      	cmp	r2, r3
 800402c:	d01c      	beq.n	8004068 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800402e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004030:	4618      	mov	r0, r3
 8004032:	f7fe f94f 	bl	80022d4 <lfs_tag_id>
 8004036:	4603      	mov	r3, r0
 8004038:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800403a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800403e:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004046:	9200      	str	r2, [sp, #0]
 8004048:	4a2a      	ldr	r2, [pc, #168]	@ (80040f4 <lfs_dir_find+0x1ec>)
 800404a:	68b9      	ldr	r1, [r7, #8]
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f7fe fdbd 	bl	8002bcc <lfs_dir_get>
 8004052:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	2b00      	cmp	r3, #0
 8004058:	da01      	bge.n	800405e <lfs_dir_find+0x156>
                return res;
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	e03d      	b.n	80040da <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	3318      	adds	r3, #24
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe f897 	bl	8002196 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800406e:	212f      	movs	r1, #47	@ 0x2f
 8004070:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004072:	f004 fd11 	bl	8008a98 <strchr>
 8004076:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <lfs_dir_find+0x178>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	e000      	b.n	8004082 <lfs_dir_find+0x17a>
 8004080:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	613a      	str	r2, [r7, #16]
 8004086:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004088:	617a      	str	r2, [r7, #20]
 800408a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800408c:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800408e:	f107 0210 	add.w	r2, r7, #16
 8004092:	9203      	str	r2, [sp, #12]
 8004094:	4a18      	ldr	r2, [pc, #96]	@ (80040f8 <lfs_dir_find+0x1f0>)
 8004096:	9202      	str	r2, [sp, #8]
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 80040a2:	4622      	mov	r2, r4
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f7ff fac6 	bl	8003638 <lfs_dir_fetchmatch>
 80040ac:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 80040ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	da01      	bge.n	80040b8 <lfs_dir_find+0x1b0>
                return tag;
 80040b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b6:	e010      	b.n	80040da <lfs_dir_find+0x1d2>
            }

            if (tag) {
 80040b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d004      	beq.n	80040c8 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 80040be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c2:	4413      	add	r3, r2
 80040c4:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 80040c6:	e73a      	b.n	8003f3e <lfs_dir_find+0x36>
            if (!dir->split) {
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	7ddb      	ldrb	r3, [r3, #23]
 80040cc:	f083 0301 	eor.w	r3, r3, #1
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0c8      	beq.n	8004068 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 80040d6:	f06f 0301 	mvn.w	r3, #1
    }
}
 80040da:	4618      	mov	r0, r3
 80040dc:	373c      	adds	r7, #60	@ 0x3c
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd90      	pop	{r4, r7, pc}
 80040e2:	bf00      	nop
 80040e4:	002ffc00 	.word	0x002ffc00
 80040e8:	08009988 	.word	0x08009988
 80040ec:	0800998c 	.word	0x0800998c
 80040f0:	08009990 	.word	0x08009990
 80040f4:	700ffc00 	.word	0x700ffc00
 80040f8:	08003e75 	.word	0x08003e75

080040fc <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 80040fc:	b590      	push	{r4, r7, lr}
 80040fe:	b08b      	sub	sp, #44	@ 0x2c
 8004100:	af04      	add	r7, sp, #16
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f103 0010 	add.w	r0, r3, #16
 8004110:	68fc      	ldr	r4, [r7, #12]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	6852      	ldr	r2, [r2, #4]
 800411a:	6839      	ldr	r1, [r7, #0]
 800411c:	9103      	str	r1, [sp, #12]
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	9102      	str	r1, [sp, #8]
 8004122:	9201      	str	r2, [sp, #4]
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	2300      	movs	r3, #0
 8004128:	4622      	mov	r2, r4
 800412a:	4601      	mov	r1, r0
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f7fd fecb 	bl	8001ec8 <lfs_bd_prog>
 8004132:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <lfs_dir_commitprog+0x42>
        return err;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	e010      	b.n	8004160 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	4618      	mov	r0, r3
 8004148:	f004 fa8e 	bl	8008668 <lfs_crc>
 800414c:	4602      	mov	r2, r0
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	441a      	add	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	605a      	str	r2, [r3, #4]
    return 0;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	371c      	adds	r7, #28
 8004164:	46bd      	mov	sp, r7
 8004166:	bd90      	pop	{r4, r7, pc}

08004168 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8004168:	b590      	push	{r4, r7, lr}
 800416a:	b08f      	sub	sp, #60	@ 0x3c
 800416c:	af04      	add	r7, sp, #16
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fe f8c9 	bl	800230e <lfs_tag_dsize>
 800417c:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	441a      	add	r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	429a      	cmp	r2, r3
 800418c:	d902      	bls.n	8004194 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800418e:	f06f 031b 	mvn.w	r3, #27
 8004192:	e065      	b.n	8004260 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	4053      	eors	r3, r2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fd fbb7 	bl	8001914 <lfs_tobe32>
 80041a6:	4603      	mov	r3, r0
 80041a8:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 80041aa:	f107 0214 	add.w	r2, r7, #20
 80041ae:	2304      	movs	r3, #4
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f7ff ffa2 	bl	80040fc <lfs_dir_commitprog>
 80041b8:	61f8      	str	r0, [r7, #28]
    if (err) {
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <lfs_dir_commitattr+0x5c>
        return err;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	e04d      	b.n	8004260 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	db0c      	blt.n	80041e4 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	3b04      	subs	r3, #4
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f7ff ff92 	bl	80040fc <lfs_dir_commitprog>
 80041d8:	61f8      	str	r0, [r7, #28]
        if (err) {
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d039      	beq.n	8004254 <lfs_dir_commitattr+0xec>
            return err;
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	e03d      	b.n	8004260 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80041e8:	2300      	movs	r3, #0
 80041ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ec:	e02d      	b.n	800424a <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 80041ee:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 80041f0:	6a3a      	ldr	r2, [r7, #32]
 80041f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f4:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80041f6:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8004200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004202:	440a      	add	r2, r1
 8004204:	2101      	movs	r1, #1
 8004206:	9103      	str	r1, [sp, #12]
 8004208:	f107 0113 	add.w	r1, r7, #19
 800420c:	9102      	str	r1, [sp, #8]
 800420e:	9201      	str	r2, [sp, #4]
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	4623      	mov	r3, r4
 8004214:	4602      	mov	r2, r0
 8004216:	2100      	movs	r1, #0
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f7fd fbc3 	bl	80019a4 <lfs_bd_read>
 800421e:	61f8      	str	r0, [r7, #28]
            if (err) {
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <lfs_dir_commitattr+0xc2>
                return err;
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	e01a      	b.n	8004260 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800422a:	f107 0213 	add.w	r2, r7, #19
 800422e:	2301      	movs	r3, #1
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f7ff ff62 	bl	80040fc <lfs_dir_commitprog>
 8004238:	61f8      	str	r0, [r7, #28]
            if (err) {
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <lfs_dir_commitattr+0xdc>
                return err;
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	e00d      	b.n	8004260 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	3301      	adds	r3, #1
 8004248:	627b      	str	r3, [r7, #36]	@ 0x24
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	3b04      	subs	r3, #4
 800424e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004250:	429a      	cmp	r2, r3
 8004252:	d3cc      	bcc.n	80041ee <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	609a      	str	r2, [r3, #8]
    return 0;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	372c      	adds	r7, #44	@ 0x2c
 8004264:	46bd      	mov	sp, r7
 8004266:	bd90      	pop	{r4, r7, pc}

08004268 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8004268:	b590      	push	{r4, r7, lr}
 800426a:	b097      	sub	sp, #92	@ 0x5c
 800426c:	af04      	add	r7, sp, #16
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 8004276:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800427e:	69db      	ldr	r3, [r3, #28]
    const lfs_off_t end = lfs_alignup(
 8004280:	4619      	mov	r1, r3
 8004282:	4610      	mov	r0, r2
 8004284:	f7fd fab3 	bl	80017ee <lfs_min>
 8004288:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800428e:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(
 8004290:	4619      	mov	r1, r3
 8004292:	4610      	mov	r0, r2
 8004294:	f7fd fad0 	bl	8001838 <lfs_alignup>
 8004298:	63b8      	str	r0, [r7, #56]	@ 0x38

    lfs_off_t off1 = 0;
 800429a:	2300      	movs	r3, #0
 800429c:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 800429e:	2300      	movs	r3, #0
 80042a0:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 80042a2:	e0fe      	b.n	80044a2 <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	3b04      	subs	r3, #4
 80042ae:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fd fa9b 	bl	80017ee <lfs_min>
 80042b8:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4413      	add	r3, r2
        lfs_off_t noff = (
 80042c0:	3304      	adds	r3, #4
 80042c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 80042c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d206      	bcs.n	80042da <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 80042cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ce:	3b14      	subs	r3, #20
 80042d0:	4619      	mov	r1, r3
 80042d2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80042d4:	f7fd fa8b 	bl	80017ee <lfs_min>
 80042d8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 80042da:	23ff      	movs	r3, #255	@ 0xff
 80042dc:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 80042de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d35f      	bcc.n	80043a6 <lfs_dir_commitcrc+0x13e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d855      	bhi.n	80043a6 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 80042fa:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004300:	6998      	ldr	r0, [r3, #24]
            int err = lfs_bd_read(lfs,
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2201      	movs	r2, #1
 8004308:	9203      	str	r2, [sp, #12]
 800430a:	f107 021b 	add.w	r2, r7, #27
 800430e:	9202      	str	r2, [sp, #8]
 8004310:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004312:	9201      	str	r2, [sp, #4]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	4603      	mov	r3, r0
 8004318:	460a      	mov	r2, r1
 800431a:	2100      	movs	r1, #0
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7fd fb41 	bl	80019a4 <lfs_bd_read>
 8004322:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 8004324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004326:	2b00      	cmp	r3, #0
 8004328:	d005      	beq.n	8004336 <lfs_dir_commitcrc+0xce>
 800432a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004330:	d001      	beq.n	8004336 <lfs_dir_commitcrc+0xce>
                return err;
 8004332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004334:	e101      	b.n	800453a <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800433a:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004342:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8004344:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800434a:	699c      	ldr	r4, [r3, #24]
                err = lfs_bd_crc(lfs,
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	f107 0108 	add.w	r1, r7, #8
 8004356:	3104      	adds	r1, #4
 8004358:	9103      	str	r1, [sp, #12]
 800435a:	9202      	str	r2, [sp, #8]
 800435c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800435e:	9201      	str	r2, [sp, #4]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	4623      	mov	r3, r4
 8004364:	4602      	mov	r2, r0
 8004366:	2100      	movs	r1, #0
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7fd fcb8 	bl	8001cde <lfs_bd_crc>
 800436e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 8004370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <lfs_dir_commitcrc+0x11a>
 8004376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004378:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800437c:	d001      	beq.n	8004382 <lfs_dir_commitcrc+0x11a>
                    return err;
 800437e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004380:	e010      	b.n	80043a4 <lfs_dir_commitcrc+0x13c>
                }

                lfs_fcrc_tole32(&fcrc);
 8004382:	f107 0308 	add.w	r3, r7, #8
 8004386:	4618      	mov	r0, r3
 8004388:	f7fe f8d8 	bl	800253c <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 800438c:	f107 0308 	add.w	r3, r7, #8
 8004390:	4a6c      	ldr	r2, [pc, #432]	@ (8004544 <lfs_dir_commitcrc+0x2dc>)
 8004392:	6839      	ldr	r1, [r7, #0]
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff fee7 	bl	8004168 <lfs_dir_commitattr>
 800439a:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 800439c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <lfs_dir_commitcrc+0x13e>
                    return err;
 80043a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 80043a4:	e0c9      	b.n	800453a <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 80043a6:	7efb      	ldrb	r3, [r7, #27]
 80043a8:	43db      	mvns	r3, r3
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	09db      	lsrs	r3, r3, #7
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043b4:	051a      	lsls	r2, r3, #20
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043bc:	1acb      	subs	r3, r1, r3
 80043be:	3b04      	subs	r3, #4
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 80043c6:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80043ca:	62bb      	str	r3, [r7, #40]	@ 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d2:	4053      	eors	r3, r2
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fd fa9d 	bl	8001914 <lfs_tobe32>
 80043da:	4603      	mov	r3, r0
 80043dc:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f107 0110 	add.w	r1, r7, #16
 80043e6:	2204      	movs	r2, #4
 80043e8:	4618      	mov	r0, r3
 80043ea:	f004 f93d 	bl	8008668 <lfs_crc>
 80043ee:	4602      	mov	r2, r0
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fd fa73 	bl	80018e4 <lfs_tole32>
 80043fe:	4603      	mov	r3, r0
 8004400:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f103 0010 	add.w	r0, r3, #16
 8004408:	687c      	ldr	r4, [r7, #4]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	6852      	ldr	r2, [r2, #4]
 8004412:	2108      	movs	r1, #8
 8004414:	9103      	str	r1, [sp, #12]
 8004416:	f107 0110 	add.w	r1, r7, #16
 800441a:	9102      	str	r1, [sp, #8]
 800441c:	9201      	str	r2, [sp, #4]
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2300      	movs	r3, #0
 8004422:	4622      	mov	r2, r4
 8004424:	4601      	mov	r1, r0
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fd fd4e 	bl	8001ec8 <lfs_bd_prog>
 800442c:	6278      	str	r0, [r7, #36]	@ 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <lfs_dir_commitcrc+0x1d0>
            return err;
 8004434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004436:	e080      	b.n	800453a <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8004438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800443a:	2b00      	cmp	r3, #0
 800443c:	d106      	bne.n	800444c <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	3304      	adds	r3, #4
 8004444:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off = noff;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004450:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 8004452:	7efb      	ldrb	r3, [r7, #27]
 8004454:	43db      	mvns	r3, r3
 8004456:	061b      	lsls	r3, r3, #24
 8004458:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800445c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445e:	405a      	eors	r2, r3
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800446a:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 800446c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800446e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004470:	429a      	cmp	r2, r3
 8004472:	d208      	bcs.n	8004486 <lfs_dir_commitcrc+0x21e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	695a      	ldr	r2, [r3, #20]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800447c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447e:	4413      	add	r3, r2
 8004480:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004482:	429a      	cmp	r2, r3
 8004484:	d30d      	bcc.n	80044a2 <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f103 0110 	add.w	r1, r3, #16
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	2300      	movs	r3, #0
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7fd fce5 	bl	8001e60 <lfs_bd_sync>
 8004496:	6238      	str	r0, [r7, #32]
            if (err) {
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <lfs_dir_commitcrc+0x23a>
                return err;
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	e04b      	b.n	800453a <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80044a8:	429a      	cmp	r2, r3
 80044aa:	f63f aefb 	bhi.w	80042a4 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t crc = 0xffffffff;
 80044b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80044b8:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044be:	1d1c      	adds	r4, r3, #4
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80044c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044c8:	1a8a      	subs	r2, r1, r2
 80044ca:	f107 011c 	add.w	r1, r7, #28
 80044ce:	9103      	str	r1, [sp, #12]
 80044d0:	9202      	str	r2, [sp, #8]
 80044d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044d4:	9201      	str	r2, [sp, #4]
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	4623      	mov	r3, r4
 80044da:	4602      	mov	r2, r0
 80044dc:	2100      	movs	r1, #0
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fd fbfd 	bl	8001cde <lfs_bd_crc>
 80044e4:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 80044e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <lfs_dir_commitcrc+0x288>
        return err;
 80044ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ee:	e024      	b.n	800453a <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d002      	beq.n	80044fe <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 80044f8:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80044fc:	e01d      	b.n	800453a <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f107 021c 	add.w	r2, r7, #28
 8004508:	9203      	str	r2, [sp, #12]
 800450a:	2204      	movs	r2, #4
 800450c:	9202      	str	r2, [sp, #8]
 800450e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004510:	9201      	str	r2, [sp, #4]
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	2304      	movs	r3, #4
 8004516:	460a      	mov	r2, r1
 8004518:	2100      	movs	r1, #0
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fd fbdf 	bl	8001cde <lfs_bd_crc>
 8004520:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 8004522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <lfs_dir_commitcrc+0x2c4>
        return err;
 8004528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452a:	e006      	b.n	800453a <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 8004532:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8004536:	e000      	b.n	800453a <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	374c      	adds	r7, #76	@ 0x4c
 800453e:	46bd      	mov	sp, r7
 8004540:	bd90      	pop	{r4, r7, pc}
 8004542:	bf00      	nop
 8004544:	5ffffc08 	.word	0x5ffffc08

08004548 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	@ 0x28
 800454c:	af04      	add	r7, sp, #16
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	e016      	b.n	8004586 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	3301      	adds	r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	bfb8      	it	lt
 8004564:	425b      	neglt	r3, r3
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	4413      	add	r3, r2
 800456c:	4619      	mov	r1, r3
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fe f9ae 	bl	80028d0 <lfs_alloc>
 8004574:	60f8      	str	r0, [r7, #12]
        if (err) {
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <lfs_dir_alloc+0x38>
            return err;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	e058      	b.n	8004632 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	3301      	adds	r3, #1
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b01      	cmp	r3, #1
 800458a:	dde5      	ble.n	8004558 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2200      	movs	r2, #0
 8004590:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800459c:	2004      	movs	r0, #4
 800459e:	9003      	str	r0, [sp, #12]
 80045a0:	9202      	str	r2, [sp, #8]
 80045a2:	2200      	movs	r2, #0
 80045a4:	9201      	str	r2, [sp, #4]
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	2304      	movs	r3, #4
 80045aa:	460a      	mov	r2, r1
 80045ac:	2100      	movs	r1, #0
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fd f9f8 	bl	80019a4 <lfs_bd_read>
 80045b4:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fd f987 	bl	80018ce <lfs_fromle32>
 80045c0:	4602      	mov	r2, r0
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <lfs_dir_alloc+0x90>
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80045d2:	d001      	beq.n	80045d8 <lfs_dir_alloc+0x90>
        return err;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	e02c      	b.n	8004632 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	dd0e      	ble.n	8004600 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	3301      	adds	r3, #1
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	4619      	mov	r1, r3
 80045f4:	4610      	mov	r0, r2
 80045f6:	f7fd f91f 	bl	8001838 <lfs_alignup>
 80045fa:	4602      	mov	r2, r0
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2204      	movs	r2, #4
 8004604:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800460c:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2200      	movs	r2, #0
 8004612:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800461a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004622:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2200      	movs	r2, #0
 8004628:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2200      	movs	r2, #0
 800462e:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800463a:	b580      	push	{r7, lr}
 800463c:	b092      	sub	sp, #72	@ 0x48
 800463e:	af04      	add	r7, sp, #16
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	607a      	str	r2, [r7, #4]
 8004646:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8004648:	f107 0310 	add.w	r3, r7, #16
 800464c:	4619      	mov	r1, r3
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7ff ff7a 	bl	8004548 <lfs_dir_alloc>
 8004654:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 8004656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <lfs_dir_split+0x26>
        return err;
 800465c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800465e:	e03c      	b.n	80046da <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	7ddb      	ldrb	r3, [r3, #23]
 8004664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8004674:	f107 0110 	add.w	r1, r7, #16
 8004678:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800467c:	9302      	str	r3, [sp, #8]
 800467e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004682:	9301      	str	r3, [sp, #4]
 8004684:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 f879 	bl	8004784 <lfs_dir_compact>
 8004692:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 8004694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004696:	2b00      	cmp	r3, #0
 8004698:	da01      	bge.n	800469e <lfs_dir_split+0x64>
        return res;
 800469a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469c:	e01d      	b.n	80046da <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2201      	movs	r2, #1
 80046ae:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3320      	adds	r3, #32
 80046b6:	4619      	mov	r1, r3
 80046b8:	4610      	mov	r0, r2
 80046ba:	f7fd fd15 	bl	80020e8 <lfs_pair_cmp>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d109      	bne.n	80046d8 <lfs_dir_split+0x9e>
 80046c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d105      	bne.n	80046d8 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3738      	adds	r7, #56	@ 0x38
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b086      	sub	sp, #24
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 80046f2:	68b8      	ldr	r0, [r7, #8]
 80046f4:	f7fd fe0b 	bl	800230e <lfs_tag_dsize>
 80046f8:	4602      	mov	r2, r0
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	441a      	add	r2, r3
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	601a      	str	r2, [r3, #0]
    return 0;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800470e:	b580      	push	{r7, lr}
 8004710:	b086      	sub	sp, #24
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	6859      	ldr	r1, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	f7ff fd1d 	bl	8004168 <lfs_dir_commitattr>
 800472e:	4603      	mov	r3, r0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8004748:	2b00      	cmp	r3, #0
 800474a:	dd11      	ble.n	8004770 <lfs_dir_needsrelocation+0x38>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	3301      	adds	r3, #1
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004756:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004758:	3201      	adds	r2, #1
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004762:	fb01 f202 	mul.w	r2, r1, r2
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <lfs_dir_needsrelocation+0x38>
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <lfs_dir_needsrelocation+0x3a>
 8004770:	2300      	movs	r3, #0
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	b2db      	uxtb	r3, r3
}
 8004778:	4618      	mov	r0, r3
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8004784:	b580      	push	{r7, lr}
 8004786:	b0a4      	sub	sp, #144	@ 0x90
 8004788:	af0a      	add	r7, sp, #40	@ 0x28
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8004792:	2300      	movs	r3, #0
 8004794:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f7ff ffcc 	bl	8004738 <lfs_dir_needsrelocation>
 80047a0:	4603      	mov	r3, r0
 80047a2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80047b0:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00e      	beq.n	80047d6 <lfs_dir_compact+0x52>
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2200      	movs	r2, #0
 80047bc:	657a      	str	r2, [r7, #84]	@ 0x54
 80047be:	2201      	movs	r2, #1
 80047c0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80047c2:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80047c6:	4611      	mov	r1, r2
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fd fc8d 	bl	80020e8 <lfs_pair_cmp>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f040 8155 	bne.w	8004a80 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80047da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047dc:	2300      	movs	r3, #0
 80047de:	643b      	str	r3, [r7, #64]	@ 0x40
 80047e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80047e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047ec:	2300      	movs	r3, #0
 80047ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d004      	beq.n	8004804 <lfs_dir_compact+0x80>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004800:	3b08      	subs	r3, #8
 8004802:	e003      	b.n	800480c <lfs_dir_compact+0x88>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800480c:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	4619      	mov	r1, r3
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f7fd fc05 	bl	8002024 <lfs_bd_erase>
 800481a:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800481c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800481e:	2b00      	cmp	r3, #0
 8004820:	d006      	beq.n	8004830 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8004822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004824:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004828:	f000 812c 	beq.w	8004a84 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 800482c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800482e:	e188      	b.n	8004b42 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	4618      	mov	r0, r3
 8004836:	f7fd f855 	bl	80018e4 <lfs_tole32>
 800483a:	4602      	mov	r2, r0
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8004846:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800484a:	2304      	movs	r3, #4
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f7ff fc55 	bl	80040fc <lfs_dir_commitprog>
 8004852:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	4618      	mov	r0, r3
 800485a:	f7fd f838 	bl	80018ce <lfs_fromle32>
 800485e:	4602      	mov	r2, r0
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	609a      	str	r2, [r3, #8]
            if (err) {
 8004864:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d006      	beq.n	8004878 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 800486a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800486c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004870:	f000 810a 	beq.w	8004a88 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8004874:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004876:	e164      	b.n	8004b42 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8004878:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800487c:	425b      	negs	r3, r3
 800487e:	b29b      	uxth	r3, r3
 8004880:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	637a      	str	r2, [r7, #52]	@ 0x34
 8004886:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800488a:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 800488c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8004890:	9208      	str	r2, [sp, #32]
 8004892:	4aae      	ldr	r2, [pc, #696]	@ (8004b4c <lfs_dir_compact+0x3c8>)
 8004894:	9207      	str	r2, [sp, #28]
 8004896:	9306      	str	r3, [sp, #24]
 8004898:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800489c:	9305      	str	r3, [sp, #20]
 800489e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80048a2:	9304      	str	r3, [sp, #16]
 80048a4:	2300      	movs	r3, #0
 80048a6:	9303      	str	r3, [sp, #12]
 80048a8:	4ba9      	ldr	r3, [pc, #676]	@ (8004b50 <lfs_dir_compact+0x3cc>)
 80048aa:	9302      	str	r3, [sp, #8]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80048b8:	2200      	movs	r2, #0
 80048ba:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f7fe fad7 	bl	8002e70 <lfs_dir_traverse>
 80048c2:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 80048c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d006      	beq.n	80048d8 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 80048ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048cc:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80048d0:	f000 80dc 	beq.w	8004a8c <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 80048d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048d6:	e134      	b.n	8004b42 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	3318      	adds	r3, #24
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fd fbe8 	bl	80020b2 <lfs_pair_isnull>
 80048e2:	4603      	mov	r3, r0
 80048e4:	f083 0301 	eor.w	r3, r3, #1
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d022      	beq.n	8004934 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	3318      	adds	r3, #24
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fd fc69 	bl	80021ca <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	7ddb      	ldrb	r3, [r3, #23]
 80048fc:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8004900:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8004902:	4a94      	ldr	r2, [pc, #592]	@ (8004b54 <lfs_dir_compact+0x3d0>)
 8004904:	431a      	orrs	r2, r3
                        dir->tail);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 800490a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f7ff fc2a 	bl	8004168 <lfs_dir_commitattr>
 8004914:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	3318      	adds	r3, #24
 800491a:	4618      	mov	r0, r3
 800491c:	f7fd fc3b 	bl	8002196 <lfs_pair_fromle32>
                if (err) {
 8004920:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d006      	beq.n	8004934 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8004926:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004928:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800492c:	f000 80b0 	beq.w	8004a90 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8004930:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004932:	e106      	b.n	8004b42 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8004934:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8004940:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004944:	f083 0301 	eor.w	r3, r3, #1
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d011      	beq.n	8004972 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8004954:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004958:	4611      	mov	r1, r2
 800495a:	4618      	mov	r0, r3
 800495c:	f7fd fceb 	bl	8002336 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004966:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800496a:	4611      	mov	r1, r2
 800496c:	4618      	mov	r0, r3
 800496e:	f7fd fce2 	bl	8002336 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004978:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800497c:	4611      	mov	r1, r2
 800497e:	4618      	mov	r0, r3
 8004980:	f7fd fcd9 	bl	8002336 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8004984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004986:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800498a:	f023 0303 	bic.w	r3, r3, #3
 800498e:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8004990:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004994:	461a      	mov	r2, r3
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f7ff fa39 	bl	8003e10 <lfs_dir_getgstate>
 800499e:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 80049a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <lfs_dir_compact+0x226>
                return err;
 80049a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049a8:	e0cb      	b.n	8004b42 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 80049aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fd fce6 	bl	8002380 <lfs_gstate_iszero>
 80049b4:	4603      	mov	r3, r0
 80049b6:	f083 0301 	eor.w	r3, r3, #1
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d016      	beq.n	80049ee <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 80049c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fd fd81 	bl	80024cc <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 80049ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80049ce:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80049d2:	4a61      	ldr	r2, [pc, #388]	@ (8004b58 <lfs_dir_compact+0x3d4>)
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f7ff fbc7 	bl	8004168 <lfs_dir_commitattr>
 80049da:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 80049dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 80049e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049e4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80049e8:	d054      	beq.n	8004a94 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 80049ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049ec:	e0a9      	b.n	8004b42 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 80049ee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80049f2:	4619      	mov	r1, r3
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f7ff fc37 	bl	8004268 <lfs_dir_commitcrc>
 80049fa:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 80049fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8004a02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a04:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004a08:	d046      	beq.n	8004a98 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8004a0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a0c:	e099      	b.n	8004b42 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8004a0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004a14:	6992      	ldr	r2, [r2, #24]
 8004a16:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a1a:	fb01 f202 	mul.w	r2, r1, r2
 8004a1e:	1a9b      	subs	r3, r3, r2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d006      	beq.n	8004a32 <lfs_dir_compact+0x2ae>
 8004a24:	4b4d      	ldr	r3, [pc, #308]	@ (8004b5c <lfs_dir_compact+0x3d8>)
 8004a26:	4a4e      	ldr	r2, [pc, #312]	@ (8004b60 <lfs_dir_compact+0x3dc>)
 8004a28:	f640 0106 	movw	r1, #2054	@ 0x806
 8004a2c:	484d      	ldr	r0, [pc, #308]	@ (8004b64 <lfs_dir_compact+0x3e0>)
 8004a2e:	f003 fe59 	bl	80086e4 <__assert_func>
            lfs_pair_swap(dir->pair);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fd fb27 	bl	8002088 <lfs_pair_swap>
            dir->count = end - begin;
 8004a3a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8004a3e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8004a4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8004a50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3348      	adds	r3, #72	@ 0x48
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	605a      	str	r2, [r3, #4]
 8004a60:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8004a62:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004a66:	f083 0301 	eor.w	r3, r3, #1
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d065      	beq.n	8004b3c <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	333c      	adds	r3, #60	@ 0x3c
 8004a76:	3230      	adds	r2, #48	@ 0x30
 8004a78:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8004a7e:	e05d      	b.n	8004b3c <lfs_dir_compact+0x3b8>
        goto relocate;
 8004a80:	bf00      	nop
 8004a82:	e00a      	b.n	8004a9a <lfs_dir_compact+0x316>
                    goto relocate;
 8004a84:	bf00      	nop
 8004a86:	e008      	b.n	8004a9a <lfs_dir_compact+0x316>
                    goto relocate;
 8004a88:	bf00      	nop
 8004a8a:	e006      	b.n	8004a9a <lfs_dir_compact+0x316>
                    goto relocate;
 8004a8c:	bf00      	nop
 8004a8e:	e004      	b.n	8004a9a <lfs_dir_compact+0x316>
                        goto relocate;
 8004a90:	bf00      	nop
 8004a92:	e002      	b.n	8004a9a <lfs_dir_compact+0x316>
                        goto relocate;
 8004a94:	bf00      	nop
 8004a96:	e000      	b.n	8004a9a <lfs_dir_compact+0x316>
                    goto relocate;
 8004a98:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	3310      	adds	r3, #16
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f7fc ff57 	bl	800195a <lfs_cache_drop>
        if (!tired) {
 8004aac:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004ab0:	f083 0301 	eor.w	r3, r3, #1
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d009      	beq.n	8004ace <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	4a2a      	ldr	r2, [pc, #168]	@ (8004b68 <lfs_dir_compact+0x3e4>)
 8004ac0:	9200      	str	r2, [sp, #0]
 8004ac2:	f640 0218 	movw	r2, #2072	@ 0x818
 8004ac6:	4927      	ldr	r1, [pc, #156]	@ (8004b64 <lfs_dir_compact+0x3e0>)
 8004ac8:	4828      	ldr	r0, [pc, #160]	@ (8004b6c <lfs_dir_compact+0x3e8>)
 8004aca:	f003 ffbb 	bl	8008a44 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	617a      	str	r2, [r7, #20]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	61ba      	str	r2, [r7, #24]
 8004ad8:	f107 0214 	add.w	r2, r7, #20
 8004adc:	4611      	mov	r1, r2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fd fb02 	bl	80020e8 <lfs_pair_cmp>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10c      	bne.n	8004b04 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4a1e      	ldr	r2, [pc, #120]	@ (8004b68 <lfs_dir_compact+0x3e4>)
 8004af0:	9200      	str	r2, [sp, #0]
 8004af2:	f640 021d 	movw	r2, #2077	@ 0x81d
 8004af6:	491b      	ldr	r1, [pc, #108]	@ (8004b64 <lfs_dir_compact+0x3e0>)
 8004af8:	481d      	ldr	r0, [pc, #116]	@ (8004b70 <lfs_dir_compact+0x3ec>)
 8004afa:	f003 ffa3 	bl	8008a44 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8004afe:	f06f 031b 	mvn.w	r3, #27
 8004b02:	e01e      	b.n	8004b42 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	3304      	adds	r3, #4
 8004b08:	4619      	mov	r1, r3
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f7fd fee0 	bl	80028d0 <lfs_alloc>
 8004b10:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8004b12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00c      	beq.n	8004b32 <lfs_dir_compact+0x3ae>
 8004b18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b1a:	f113 0f1c 	cmn.w	r3, #28
 8004b1e:	d106      	bne.n	8004b2e <lfs_dir_compact+0x3aa>
 8004b20:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004b24:	f083 0301 	eor.w	r3, r3, #1
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <lfs_dir_compact+0x3ae>
            return err;
 8004b2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b30:	e007      	b.n	8004b42 <lfs_dir_compact+0x3be>
        }

        tired = false;
 8004b32:	2300      	movs	r3, #0
 8004b34:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 8004b38:	bf00      	nop
    while (true) {
 8004b3a:	e64c      	b.n	80047d6 <lfs_dir_compact+0x52>
        break;
 8004b3c:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8004b3e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3768      	adds	r7, #104	@ 0x68
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	0800470f 	.word	0x0800470f
 8004b50:	400ffc00 	.word	0x400ffc00
 8004b54:	000ffc08 	.word	0x000ffc08
 8004b58:	7ffffc0c 	.word	0x7ffffc0c
 8004b5c:	08009994 	.word	0x08009994
 8004b60:	0800a4e0 	.word	0x0800a4e0
 8004b64:	0800982c 	.word	0x0800982c
 8004b68:	0800993c 	.word	0x0800993c
 8004b6c:	080099bc 	.word	0x080099bc
 8004b70:	080099e0 	.word	0x080099e0

08004b74 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8004b74:	b590      	push	{r4, r7, lr}
 8004b76:	b097      	sub	sp, #92	@ 0x5c
 8004b78:	af0a      	add	r7, sp, #40	@ 0x28
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8004b82:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 8004b88:	e058      	b.n	8004c3c <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8004b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b94:	b292      	uxth	r2, r2
 8004b96:	4252      	negs	r2, r2
 8004b98:	b292      	uxth	r2, r2
 8004b9a:	b212      	sxth	r2, r2
 8004b9c:	f107 0118 	add.w	r1, r7, #24
 8004ba0:	9108      	str	r1, [sp, #32]
 8004ba2:	4979      	ldr	r1, [pc, #484]	@ (8004d88 <lfs_dir_splittingcompact+0x214>)
 8004ba4:	9107      	str	r1, [sp, #28]
 8004ba6:	9206      	str	r2, [sp, #24]
 8004ba8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004bac:	9205      	str	r2, [sp, #20]
 8004bae:	9304      	str	r3, [sp, #16]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	9303      	str	r3, [sp, #12]
 8004bb4:	4b75      	ldr	r3, [pc, #468]	@ (8004d8c <lfs_dir_splittingcompact+0x218>)
 8004bb6:	9302      	str	r3, [sp, #8]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	9301      	str	r3, [sp, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f7fe f951 	bl	8002e70 <lfs_dir_traverse>
 8004bce:	62b8      	str	r0, [r7, #40]	@ 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8004bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <lfs_dir_splittingcompact+0x66>
                return err;
 8004bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd8:	e0d2      	b.n	8004d80 <lfs_dir_splittingcompact+0x20c>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8004bda:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2bfe      	cmp	r3, #254	@ 0xfe
 8004be4:	d822      	bhi.n	8004c2c <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bea:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8004bec:	f1a3 0428 	sub.w	r4, r3, #40	@ 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    && size <= lfs_min(
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d004      	beq.n	8004c04 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    && size <= lfs_min(
 8004c00:	085b      	lsrs	r3, r3, #1
 8004c02:	e003      	b.n	8004c0c <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c08:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8004c0a:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004c10:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(
 8004c12:	4611      	mov	r1, r2
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fc fe0f 	bl	8001838 <lfs_alignup>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f7fc fde5 	bl	80017ee <lfs_min>
 8004c24:	4602      	mov	r2, r0
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d20e      	bcs.n	8004c4a <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8004c2c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c38:	4413      	add	r3, r2
 8004c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 8004c3c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d8a0      	bhi.n	8004b8a <lfs_dir_splittingcompact+0x16>
 8004c48:	e000      	b.n	8004c4c <lfs_dir_splittingcompact+0xd8>
                break;
 8004c4a:	bf00      	nop
        }

        if (split == begin) {
 8004c4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004c50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d02d      	beq.n	8004cb2 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8004c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004c5e:	9202      	str	r2, [sp, #8]
 8004c60:	9301      	str	r3, [sp, #4]
 8004c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	68b9      	ldr	r1, [r7, #8]
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f7ff fce4 	bl	800463a <lfs_dir_split>
 8004c72:	6278      	str	r0, [r7, #36]	@ 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8004c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <lfs_dir_splittingcompact+0x112>
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7c:	f113 0f1c 	cmn.w	r3, #28
 8004c80:	d001      	beq.n	8004c86 <lfs_dir_splittingcompact+0x112>
            return err;
 8004c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c84:	e07c      	b.n	8004d80 <lfs_dir_splittingcompact+0x20c>
        }

        if (err) {
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00e      	beq.n	8004caa <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	493e      	ldr	r1, [pc, #248]	@ (8004d90 <lfs_dir_splittingcompact+0x21c>)
 8004c96:	9101      	str	r1, [sp, #4]
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 8004ca0:	493c      	ldr	r1, [pc, #240]	@ (8004d94 <lfs_dir_splittingcompact+0x220>)
 8004ca2:	483d      	ldr	r0, [pc, #244]	@ (8004d98 <lfs_dir_splittingcompact+0x224>)
 8004ca4:	f003 fece 	bl	8008a44 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8004ca8:	e004      	b.n	8004cb4 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8004caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cac:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    while (true) {
 8004cb0:	e767      	b.n	8004b82 <lfs_dir_splittingcompact+0xe>
            break;
 8004cb2:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f7ff fd3e 	bl	8004738 <lfs_dir_needsrelocation>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d04f      	beq.n	8004d62 <lfs_dir_splittingcompact+0x1ee>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	613a      	str	r2, [r7, #16]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	617a      	str	r2, [r7, #20]
 8004ccc:	f107 0210 	add.w	r2, r7, #16
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fd fa08 	bl	80020e8 <lfs_pair_cmp>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d141      	bne.n	8004d62 <lfs_dir_splittingcompact+0x1ee>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f003 fb92 	bl	8008408 <lfs_fs_size_>
 8004ce4:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	da01      	bge.n	8004cf0 <lfs_dir_splittingcompact+0x17c>
            return size;
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	e047      	b.n	8004d80 <lfs_dir_splittingcompact+0x20c>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	1ad2      	subs	r2, r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cfc:	08db      	lsrs	r3, r3, #3
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d92f      	bls.n	8004d62 <lfs_dir_splittingcompact+0x1ee>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	4a22      	ldr	r2, [pc, #136]	@ (8004d90 <lfs_dir_splittingcompact+0x21c>)
 8004d08:	9200      	str	r2, [sp, #0]
 8004d0a:	f640 0286 	movw	r2, #2182	@ 0x886
 8004d0e:	4921      	ldr	r1, [pc, #132]	@ (8004d94 <lfs_dir_splittingcompact+0x220>)
 8004d10:	4822      	ldr	r0, [pc, #136]	@ (8004d9c <lfs_dir_splittingcompact+0x228>)
 8004d12:	f003 fe97 	bl	8008a44 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8004d16:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004d1a:	9302      	str	r3, [sp, #8]
 8004d1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004d20:	9301      	str	r3, [sp, #4]
 8004d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f7ff fc84 	bl	800463a <lfs_dir_split>
 8004d32:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <lfs_dir_splittingcompact+0x1d2>
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	f113 0f1c 	cmn.w	r3, #28
 8004d40:	d001      	beq.n	8004d46 <lfs_dir_splittingcompact+0x1d2>
                return err;
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	e01c      	b.n	8004d80 <lfs_dir_splittingcompact+0x20c>
            }

            if (err) {
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d007      	beq.n	8004d5c <lfs_dir_splittingcompact+0x1e8>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8004d4c:	4b10      	ldr	r3, [pc, #64]	@ (8004d90 <lfs_dir_splittingcompact+0x21c>)
 8004d4e:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 8004d52:	4910      	ldr	r1, [pc, #64]	@ (8004d94 <lfs_dir_splittingcompact+0x220>)
 8004d54:	4812      	ldr	r0, [pc, #72]	@ (8004da0 <lfs_dir_splittingcompact+0x22c>)
 8004d56:	f003 fe75 	bl	8008a44 <iprintf>
 8004d5a:	e002      	b.n	8004d62 <lfs_dir_splittingcompact+0x1ee>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8004d62:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004d66:	9302      	str	r3, [sp, #8]
 8004d68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004d6c:	9301      	str	r3, [sp, #4]
 8004d6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f7ff fd03 	bl	8004784 <lfs_dir_compact>
 8004d7e:	4603      	mov	r3, r0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3734      	adds	r7, #52	@ 0x34
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd90      	pop	{r4, r7, pc}
 8004d88:	080046e3 	.word	0x080046e3
 8004d8c:	400ffc00 	.word	0x400ffc00
 8004d90:	0800993c 	.word	0x0800993c
 8004d94:	0800982c 	.word	0x0800982c
 8004d98:	08009a18 	.word	0x08009a18
 8004d9c:	08009a48 	.word	0x08009a48
 8004da0:	08009a78 	.word	0x08009a78

08004da4 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8004da4:	b5b0      	push	{r4, r5, r7, lr}
 8004da6:	b0a6      	sub	sp, #152	@ 0x98
 8004da8:	af0a      	add	r7, sp, #40	@ 0x28
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	603b      	str	r3, [r7, #0]
    int state = 0;
 8004db2:	2300      	movs	r3, #0
 8004db4:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8004db6:	2300      	movs	r3, #0
 8004db8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8004dc0:	e06d      	b.n	8004e9e <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8004dc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	4413      	add	r3, r2
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fd fa57 	bl	8002280 <lfs_tag_type3>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	f240 4301 	movw	r3, #1025	@ 0x401
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d106      	bne.n	8004dec <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	8a9b      	ldrh	r3, [r3, #20]
 8004de2:	3301      	adds	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	829a      	strh	r2, [r3, #20]
 8004dea:	e055      	b.n	8004e98 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8004dec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	4413      	add	r3, r2
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fd fa42 	bl	8002280 <lfs_tag_type3>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d114      	bne.n	8004e32 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	8a9b      	ldrh	r3, [r3, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d106      	bne.n	8004e1e <lfs_dir_relocatingcommit+0x7a>
 8004e10:	4ba4      	ldr	r3, [pc, #656]	@ (80050a4 <lfs_dir_relocatingcommit+0x300>)
 8004e12:	4aa5      	ldr	r2, [pc, #660]	@ (80050a8 <lfs_dir_relocatingcommit+0x304>)
 8004e14:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 8004e18:	48a4      	ldr	r0, [pc, #656]	@ (80050ac <lfs_dir_relocatingcommit+0x308>)
 8004e1a:	f003 fc63 	bl	80086e4 <__assert_func>
            dir->count -= 1;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	8a9b      	ldrh	r3, [r3, #20]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8004e30:	e032      	b.n	8004e98 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8004e32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	4413      	add	r3, r2
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fd f9ff 	bl	8002240 <lfs_tag_type1>
 8004e42:	4603      	mov	r3, r0
 8004e44:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004e48:	d126      	bne.n	8004e98 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8004e4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	4413      	add	r3, r2
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8004e5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	4413      	add	r3, r2
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8004e6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	4413      	add	r3, r2
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fd fa13 	bl	80022a0 <lfs_tag_chunk>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	bf14      	ite	ne
 8004e84:	2301      	movne	r3, #1
 8004e86:	2300      	moveq	r3, #0
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	3318      	adds	r3, #24
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fd f97f 	bl	8002196 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8004e98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e9e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	db8c      	blt.n	8004dc2 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8004ea8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d02b      	beq.n	8004f08 <lfs_dir_relocatingcommit+0x164>
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	8a9b      	ldrh	r3, [r3, #20]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d127      	bne.n	8004f08 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8004eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d106      	bne.n	8004ece <lfs_dir_relocatingcommit+0x12a>
 8004ec0:	4b7b      	ldr	r3, [pc, #492]	@ (80050b0 <lfs_dir_relocatingcommit+0x30c>)
 8004ec2:	4a79      	ldr	r2, [pc, #484]	@ (80050a8 <lfs_dir_relocatingcommit+0x304>)
 8004ec4:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 8004ec8:	4878      	ldr	r0, [pc, #480]	@ (80050ac <lfs_dir_relocatingcommit+0x308>)
 8004eca:	f003 fc0b 	bl	80086e4 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f002 fdf2 	bl	8007ac0 <lfs_fs_pred>
 8004edc:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 8004ede:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d005      	beq.n	8004ef0 <lfs_dir_relocatingcommit+0x14c>
 8004ee4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ee6:	f113 0f02 	cmn.w	r3, #2
 8004eea:	d001      	beq.n	8004ef0 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8004eec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004eee:	e210      	b.n	8005312 <lfs_dir_relocatingcommit+0x56e>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8004ef0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ef2:	f113 0f02 	cmn.w	r3, #2
 8004ef6:	d007      	beq.n	8004f08 <lfs_dir_relocatingcommit+0x164>
 8004ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004efc:	7ddb      	ldrb	r3, [r3, #23]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8004f02:	2302      	movs	r3, #2
 8004f04:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 8004f06:	e121      	b.n	800514c <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	7d9b      	ldrb	r3, [r3, #22]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80fb 	beq.w	8005108 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8004f16:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8004f1c:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8004f22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8004f2e:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d004      	beq.n	8004f44 <lfs_dir_relocatingcommit+0x1a0>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f40:	3b08      	subs	r3, #8
 8004f42:	e003      	b.n	8004f4c <lfs_dir_relocatingcommit+0x1a8>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8004f4c:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	3318      	adds	r3, #24
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fd f939 	bl	80021ca <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f64:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 8004f6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004f6e:	9308      	str	r3, [sp, #32]
 8004f70:	4b50      	ldr	r3, [pc, #320]	@ (80050b4 <lfs_dir_relocatingcommit+0x310>)
 8004f72:	9307      	str	r3, [sp, #28]
 8004f74:	2300      	movs	r3, #0
 8004f76:	9306      	str	r3, [sp, #24]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	9305      	str	r3, [sp, #20]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	9304      	str	r3, [sp, #16]
 8004f80:	2300      	movs	r3, #0
 8004f82:	9303      	str	r3, [sp, #12]
 8004f84:	2300      	movs	r3, #0
 8004f86:	9302      	str	r3, [sp, #8]
 8004f88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f8c:	9301      	str	r3, [sp, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	460b      	mov	r3, r1
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f7fd ff6a 	bl	8002e70 <lfs_dir_traverse>
 8004f9c:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	3318      	adds	r3, #24
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fd f8f7 	bl	8002196 <lfs_pair_fromle32>
        if (err) {
 8004fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00b      	beq.n	8004fc6 <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8004fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fb0:	f113 0f1c 	cmn.w	r3, #28
 8004fb4:	f000 80aa 	beq.w	800510c <lfs_dir_relocatingcommit+0x368>
 8004fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fba:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004fbe:	f000 80a5 	beq.w	800510c <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8004fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fc4:	e1a5      	b.n	8005312 <lfs_dir_relocatingcommit+0x56e>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8004fc6:	f107 031c 	add.w	r3, r7, #28
 8004fca:	2200      	movs	r2, #0
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	605a      	str	r2, [r3, #4]
 8004fd0:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004fd8:	f107 031c 	add.w	r3, r7, #28
 8004fdc:	4611      	mov	r1, r2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fd f9a9 	bl	8002336 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8004fea:	f107 031c 	add.w	r3, r7, #28
 8004fee:	4611      	mov	r1, r2
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fd f9a0 	bl	8002336 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004ffc:	f107 031c 	add.w	r3, r7, #28
 8005000:	4611      	mov	r1, r2
 8005002:	4618      	mov	r0, r3
 8005004:	f7fd f997 	bl	8002336 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800500e:	f023 0303 	bic.w	r3, r3, #3
 8005012:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8005014:	f107 031c 	add.w	r3, r7, #28
 8005018:	4618      	mov	r0, r3
 800501a:	f7fd f9b1 	bl	8002380 <lfs_gstate_iszero>
 800501e:	4603      	mov	r3, r0
 8005020:	f083 0301 	eor.w	r3, r3, #1
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d027      	beq.n	800507a <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800502a:	f107 031c 	add.w	r3, r7, #28
 800502e:	461a      	mov	r2, r3
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f7fe feec 	bl	8003e10 <lfs_dir_getgstate>
 8005038:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 800503a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8005040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005042:	e166      	b.n	8005312 <lfs_dir_relocatingcommit+0x56e>
            }

            lfs_gstate_tole32(&delta);
 8005044:	f107 031c 	add.w	r3, r7, #28
 8005048:	4618      	mov	r0, r3
 800504a:	f7fd fa3f 	bl	80024cc <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800504e:	f107 031c 	add.w	r3, r7, #28
 8005052:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8005056:	4a18      	ldr	r2, [pc, #96]	@ (80050b8 <lfs_dir_relocatingcommit+0x314>)
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f7ff f885 	bl	8004168 <lfs_dir_commitattr>
 800505e:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8005060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005062:	2b00      	cmp	r3, #0
 8005064:	d009      	beq.n	800507a <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005068:	f113 0f1c 	cmn.w	r3, #28
 800506c:	d050      	beq.n	8005110 <lfs_dir_relocatingcommit+0x36c>
 800506e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005070:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005074:	d04c      	beq.n	8005110 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8005076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005078:	e14b      	b.n	8005312 <lfs_dir_relocatingcommit+0x56e>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 800507a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800507e:	4619      	mov	r1, r3
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f7ff f8f1 	bl	8004268 <lfs_dir_commitcrc>
 8005086:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 8005088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800508a:	2b00      	cmp	r3, #0
 800508c:	d016      	beq.n	80050bc <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800508e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005090:	f113 0f1c 	cmn.w	r3, #28
 8005094:	d03e      	beq.n	8005114 <lfs_dir_relocatingcommit+0x370>
 8005096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005098:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800509c:	d03a      	beq.n	8005114 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 800509e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a0:	e137      	b.n	8005312 <lfs_dir_relocatingcommit+0x56e>
 80050a2:	bf00      	nop
 80050a4:	08009aa4 	.word	0x08009aa4
 80050a8:	0800a4f0 	.word	0x0800a4f0
 80050ac:	0800982c 	.word	0x0800982c
 80050b0:	08009ab4 	.word	0x08009ab4
 80050b4:	0800470f 	.word	0x0800470f
 80050b8:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80050bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80050c2:	6992      	ldr	r2, [r2, #24]
 80050c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80050c8:	fb01 f202 	mul.w	r2, r1, r2
 80050cc:	1a9b      	subs	r3, r3, r2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d006      	beq.n	80050e0 <lfs_dir_relocatingcommit+0x33c>
 80050d2:	4b92      	ldr	r3, [pc, #584]	@ (800531c <lfs_dir_relocatingcommit+0x578>)
 80050d4:	4a92      	ldr	r2, [pc, #584]	@ (8005320 <lfs_dir_relocatingcommit+0x57c>)
 80050d6:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 80050da:	4892      	ldr	r0, [pc, #584]	@ (8005324 <lfs_dir_relocatingcommit+0x580>)
 80050dc:	f003 fb02 	bl	80086e4 <__assert_func>
        dir->off = commit.off;
 80050e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 80050e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	333c      	adds	r3, #60	@ 0x3c
 80050f2:	3230      	adds	r2, #48	@ 0x30
 80050f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80050f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	3348      	adds	r3, #72	@ 0x48
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	605a      	str	r2, [r3, #4]
 8005104:	609a      	str	r2, [r3, #8]
 8005106:	e021      	b.n	800514c <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8005108:	bf00      	nop
 800510a:	e004      	b.n	8005116 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 800510c:	bf00      	nop
 800510e:	e002      	b.n	8005116 <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8005110:	bf00      	nop
 8005112:	e000      	b.n	8005116 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8005114:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3310      	adds	r3, #16
 800511a:	4619      	mov	r1, r3
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f7fc fc1c 	bl	800195a <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	8a9b      	ldrh	r3, [r3, #20]
 8005126:	9302      	str	r3, [sp, #8]
 8005128:	2300      	movs	r3, #0
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	68b9      	ldr	r1, [r7, #8]
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f7ff fd1b 	bl	8004b74 <lfs_dir_splittingcompact>
 800513e:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8005140:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005142:	2b00      	cmp	r3, #0
 8005144:	da01      	bge.n	800514a <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8005146:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005148:	e0e3      	b.n	8005312 <lfs_dir_relocatingcommit+0x56e>
    }

    goto fixmlist;
 800514a:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3304      	adds	r3, #4
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005160:	e0d2      	b.n	8005308 <lfs_dir_relocatingcommit+0x564>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8005162:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005164:	3308      	adds	r3, #8
 8005166:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800516a:	4611      	mov	r1, r2
 800516c:	4618      	mov	r0, r3
 800516e:	f7fc ffbb 	bl	80020e8 <lfs_pair_cmp>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	f040 80c4 	bne.w	8005302 <lfs_dir_relocatingcommit+0x55e>
            d->m = *dir;
 800517a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	f103 0408 	add.w	r4, r3, #8
 8005182:	4615      	mov	r5, r2
 8005184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005188:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800518c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8005190:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005192:	3308      	adds	r3, #8
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	429a      	cmp	r2, r3
 8005198:	f000 80a9 	beq.w	80052ee <lfs_dir_relocatingcommit+0x54a>
                for (int i = 0; i < attrcount; i++) {
 800519c:	2300      	movs	r3, #0
 800519e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051a0:	e07b      	b.n	800529a <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80051a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	4413      	add	r3, r2
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fd f867 	bl	8002280 <lfs_tag_type3>
 80051b2:	4603      	mov	r3, r0
 80051b4:	461a      	mov	r2, r3
 80051b6:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d115      	bne.n	80051ea <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 80051be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051c0:	889c      	ldrh	r4, [r3, #4]
 80051c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	4413      	add	r3, r2
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fd f881 	bl	80022d4 <lfs_tag_id>
 80051d2:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80051d4:	429c      	cmp	r4, r3
 80051d6:	d108      	bne.n	80051ea <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 80051d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051de:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80051e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051e6:	60da      	str	r2, [r3, #12]
 80051e8:	e054      	b.n	8005294 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80051ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	4413      	add	r3, r2
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fd f843 	bl	8002280 <lfs_tag_type3>
 80051fa:	4603      	mov	r3, r0
 80051fc:	461a      	mov	r2, r3
 80051fe:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8005202:	429a      	cmp	r2, r3
 8005204:	d11c      	bne.n	8005240 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8005206:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005208:	889c      	ldrh	r4, [r3, #4]
 800520a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	4413      	add	r3, r2
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f7fd f85d 	bl	80022d4 <lfs_tag_id>
 800521a:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800521c:	429c      	cmp	r4, r3
 800521e:	d90f      	bls.n	8005240 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 8005220:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005222:	889b      	ldrh	r3, [r3, #4]
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800522a:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 800522c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800522e:	799b      	ldrb	r3, [r3, #6]
 8005230:	2b02      	cmp	r3, #2
 8005232:	d12f      	bne.n	8005294 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8005234:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005238:	1e5a      	subs	r2, r3, #1
 800523a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800523c:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 800523e:	e029      	b.n	8005294 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8005240:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	4413      	add	r3, r2
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f7fd f818 	bl	8002280 <lfs_tag_type3>
 8005250:	4603      	mov	r3, r0
 8005252:	461a      	mov	r2, r3
 8005254:	f240 4301 	movw	r3, #1025	@ 0x401
 8005258:	429a      	cmp	r2, r3
 800525a:	d11b      	bne.n	8005294 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 800525c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800525e:	889c      	ldrh	r4, [r3, #4]
 8005260:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	4413      	add	r3, r2
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4618      	mov	r0, r3
 800526c:	f7fd f832 	bl	80022d4 <lfs_tag_id>
 8005270:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8005272:	429c      	cmp	r4, r3
 8005274:	d30e      	bcc.n	8005294 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 8005276:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005278:	889b      	ldrh	r3, [r3, #4]
 800527a:	3301      	adds	r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005280:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8005282:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005284:	799b      	ldrb	r3, [r3, #6]
 8005286:	2b02      	cmp	r3, #2
 8005288:	d104      	bne.n	8005294 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 800528a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800528c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005292:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 8005294:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005296:	3301      	adds	r3, #1
 8005298:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800529a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800529c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052a0:	429a      	cmp	r2, r3
 80052a2:	f6ff af7e 	blt.w	80051a2 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 80052a6:	e022      	b.n	80052ee <lfs_dir_relocatingcommit+0x54a>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 80052a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052aa:	f103 0220 	add.w	r2, r3, #32
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3320      	adds	r3, #32
 80052b2:	4619      	mov	r1, r3
 80052b4:	4610      	mov	r0, r2
 80052b6:	f7fc ff17 	bl	80020e8 <lfs_pair_cmp>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <lfs_dir_relocatingcommit+0x52c>
                    d->id -= d->m.count;
 80052c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052c2:	889a      	ldrh	r2, [r3, #4]
 80052c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052c6:	8b9b      	ldrh	r3, [r3, #28]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052ce:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80052d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052d2:	f103 0108 	add.w	r1, r3, #8
 80052d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052d8:	3320      	adds	r3, #32
 80052da:	461a      	mov	r2, r3
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f7fe fd7b 	bl	8003dd8 <lfs_dir_fetch>
 80052e2:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 80052e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <lfs_dir_relocatingcommit+0x54a>
                    return err;
 80052ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052ec:	e011      	b.n	8005312 <lfs_dir_relocatingcommit+0x56e>
            while (d->id >= d->m.count && d->m.split) {
 80052ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052f0:	889a      	ldrh	r2, [r3, #4]
 80052f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052f4:	8b9b      	ldrh	r3, [r3, #28]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d303      	bcc.n	8005302 <lfs_dir_relocatingcommit+0x55e>
 80052fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052fc:	7fdb      	ldrb	r3, [r3, #31]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1d2      	bne.n	80052a8 <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005302:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	663b      	str	r3, [r7, #96]	@ 0x60
 8005308:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800530a:	2b00      	cmp	r3, #0
 800530c:	f47f af29 	bne.w	8005162 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 8005310:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8005312:	4618      	mov	r0, r3
 8005314:	3770      	adds	r7, #112	@ 0x70
 8005316:	46bd      	mov	sp, r7
 8005318:	bdb0      	pop	{r4, r5, r7, pc}
 800531a:	bf00      	nop
 800531c:	08009994 	.word	0x08009994
 8005320:	0800a4f0 	.word	0x0800a4f0
 8005324:	0800982c 	.word	0x0800982c

08005328 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8005328:	b5b0      	push	{r4, r5, r7, lr}
 800532a:	b0bc      	sub	sp, #240	@ 0xf0
 800532c:	af04      	add	r7, sp, #16
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800533a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800533e:	e045      	b.n	80053cc <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8005340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005344:	3308      	adds	r3, #8
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	429a      	cmp	r2, r3
 800534a:	d03a      	beq.n	80053c2 <lfs_dir_orphaningcommit+0x9a>
 800534c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005350:	3308      	adds	r3, #8
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	4611      	mov	r1, r2
 8005356:	4618      	mov	r0, r3
 8005358:	f7fc fec6 	bl	80020e8 <lfs_pair_cmp>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d12f      	bne.n	80053c2 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005366:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8005368:	2b01      	cmp	r3, #1
 800536a:	d12a      	bne.n	80053c2 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800536c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005372:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d023      	beq.n	80053c2 <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 800537a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800537e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005386:	429a      	cmp	r2, r3
 8005388:	d91b      	bls.n	80053c2 <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 800538a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fff2 	bl	8006378 <lfs_file_outline>
 8005394:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 8005398:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <lfs_dir_orphaningcommit+0x7e>
                return err;
 80053a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053a4:	e2ad      	b.n	8005902 <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 80053a6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f001 f806 	bl	80063bc <lfs_file_flush>
 80053b0:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 80053b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <lfs_dir_orphaningcommit+0x9a>
                return err;
 80053bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053c0:	e29f      	b.n	8005902 <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80053c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80053cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1b5      	bne.n	8005340 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80053ea:	461d      	mov	r5, r3
 80053ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80053f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 80053fe:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005402:	9301      	str	r3, [sp, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f7ff fcca 	bl	8004da4 <lfs_dir_relocatingcommit>
 8005410:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8005414:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005418:	2b00      	cmp	r3, #0
 800541a:	da02      	bge.n	8005422 <lfs_dir_orphaningcommit+0xfa>
        return state;
 800541c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005420:	e26f      	b.n	8005902 <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8005428:	4611      	mov	r1, r2
 800542a:	4618      	mov	r0, r3
 800542c:	f7fc fe5c 	bl	80020e8 <lfs_pair_cmp>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d109      	bne.n	800544a <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	461d      	mov	r5, r3
 800543a:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800543e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005442:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005446:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 800544a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800544e:	2b02      	cmp	r3, #2
 8005450:	d14a      	bne.n	80054e8 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3348      	adds	r3, #72	@ 0x48
 8005456:	461a      	mov	r2, r3
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7fe fcd8 	bl	8003e10 <lfs_dir_getgstate>
 8005460:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 8005464:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <lfs_dir_orphaningcommit+0x14a>
            return err;
 800546c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005470:	e247      	b.n	8005902 <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8005472:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005474:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 8005478:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800547a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	3318      	adds	r3, #24
 8005482:	4618      	mov	r0, r3
 8005484:	f7fc fea1 	bl	80021ca <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	7ddb      	ldrb	r3, [r3, #23]
 800548c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8005490:	051a      	lsls	r2, r3, #20
 8005492:	4bc2      	ldr	r3, [pc, #776]	@ (800579c <lfs_dir_orphaningcommit+0x474>)
 8005494:	4313      	orrs	r3, r2
 8005496:	667b      	str	r3, [r7, #100]	@ 0x64
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	3318      	adds	r3, #24
 800549c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800549e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80054a2:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80054a6:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80054aa:	2000      	movs	r0, #0
 80054ac:	9001      	str	r0, [sp, #4]
 80054ae:	2001      	movs	r0, #1
 80054b0:	9000      	str	r0, [sp, #0]
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f7ff fc76 	bl	8004da4 <lfs_dir_relocatingcommit>
 80054b8:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	3318      	adds	r3, #24
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fc fe68 	bl	8002196 <lfs_pair_fromle32>
        if (state < 0) {
 80054c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	da02      	bge.n	80054d4 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 80054ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054d2:	e216      	b.n	8005902 <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 80054d4:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80054d8:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 80054dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80054e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 80054e8:	2300      	movs	r3, #0
 80054ea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 80054ee:	e1fc      	b.n	80058ea <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 80054f0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80054f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80054f8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80054fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005500:	4ca7      	ldr	r4, [pc, #668]	@ (80057a0 <lfs_dir_orphaningcommit+0x478>)
 8005502:	9403      	str	r4, [sp, #12]
 8005504:	9102      	str	r1, [sp, #8]
 8005506:	9201      	str	r2, [sp, #4]
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	4603      	mov	r3, r0
 800550c:	f640 128c 	movw	r2, #2444	@ 0x98c
 8005510:	49a4      	ldr	r1, [pc, #656]	@ (80057a4 <lfs_dir_orphaningcommit+0x47c>)
 8005512:	48a5      	ldr	r0, [pc, #660]	@ (80057a8 <lfs_dir_orphaningcommit+0x480>)
 8005514:	f003 fa96 	bl	8008a44 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f103 0220 	add.w	r2, r3, #32
 8005524:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005528:	4611      	mov	r1, r2
 800552a:	4618      	mov	r0, r3
 800552c:	f7fc fddc 	bl	80020e8 <lfs_pair_cmp>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d107      	bne.n	8005546 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8005536:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 800553e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800554e:	e037      	b.n	80055c0 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8005550:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005554:	f103 0208 	add.w	r2, r3, #8
 8005558:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800555c:	4611      	mov	r1, r2
 800555e:	4618      	mov	r0, r3
 8005560:	f7fc fdc2 	bl	80020e8 <lfs_pair_cmp>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d109      	bne.n	800557e <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 800556a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800556e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005572:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8005574:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8005578:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800557c:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 800557e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005582:	799b      	ldrb	r3, [r3, #6]
 8005584:	2b02      	cmp	r3, #2
 8005586:	d116      	bne.n	80055b6 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8005588:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800558c:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8005590:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005594:	4611      	mov	r1, r2
 8005596:	4618      	mov	r0, r3
 8005598:	f7fc fda6 	bl	80020e8 <lfs_pair_cmp>
 800559c:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d109      	bne.n	80055b6 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 80055a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80055a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80055aa:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80055ac:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80055b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80055b4:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80055b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1c3      	bne.n	8005550 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80055c8:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80055cc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80055d0:	4619      	mov	r1, r3
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f002 fb26 	bl	8007c24 <lfs_fs_parent>
 80055d8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80055dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	da07      	bge.n	80055f4 <lfs_dir_orphaningcommit+0x2cc>
 80055e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055e8:	f113 0f02 	cmn.w	r3, #2
 80055ec:	d002      	beq.n	80055f4 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 80055ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055f2:	e186      	b.n	8005902 <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80055f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055f8:	f113 0f02 	cmn.w	r3, #2
 80055fc:	bf14      	ite	ne
 80055fe:	2301      	movne	r3, #1
 8005600:	2300      	moveq	r3, #0
 8005602:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 8005606:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800560a:	f113 0f02 	cmn.w	r3, #2
 800560e:	f000 809e 	beq.w	800574e <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8005612:	2101      	movs	r1, #1
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f002 fb9d 	bl	8007d54 <lfs_fs_preporphans>
 800561a:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 800561e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <lfs_dir_orphaningcommit+0x304>
                return err;
 8005626:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800562a:	e16a      	b.n	8005902 <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 800562c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8005630:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3330      	adds	r3, #48	@ 0x30
 8005638:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800563c:	4611      	mov	r1, r2
 800563e:	4618      	mov	r0, r3
 8005640:	f7fc ff04 	bl	800244c <lfs_gstate_hasmovehere>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d02d      	beq.n	80056a6 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564e:	4618      	mov	r0, r3
 8005650:	f7fc fe40 	bl	80022d4 <lfs_tag_id>
 8005654:	4603      	mov	r3, r0
 8005656:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 800565a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800565c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800565e:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 8005662:	484f      	ldr	r0, [pc, #316]	@ (80057a0 <lfs_dir_orphaningcommit+0x478>)
 8005664:	9002      	str	r0, [sp, #8]
 8005666:	9201      	str	r2, [sp, #4]
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	460b      	mov	r3, r1
 800566c:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 8005670:	494c      	ldr	r1, [pc, #304]	@ (80057a4 <lfs_dir_orphaningcommit+0x47c>)
 8005672:	484e      	ldr	r0, [pc, #312]	@ (80057ac <lfs_dir_orphaningcommit+0x484>)
 8005674:	f003 f9e6 	bl	8008a44 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8005678:	2200      	movs	r2, #0
 800567a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f002 fbb8 	bl	8007df4 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8005684:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005688:	4618      	mov	r0, r3
 800568a:	f7fc fe23 	bl	80022d4 <lfs_tag_id>
 800568e:	4603      	mov	r3, r0
 8005690:	461a      	mov	r2, r3
 8005692:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8005696:	4293      	cmp	r3, r2
 8005698:	d205      	bcs.n	80056a6 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 800569a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800569e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80056a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80056a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80056aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056ac:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 80056ae:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fc fd89 	bl	80021ca <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80056b8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80056bc:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d007      	beq.n	80056d4 <lfs_dir_orphaningcommit+0x3ac>
 80056c4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80056c8:	029b      	lsls	r3, r3, #10
 80056ca:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80056ce:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80056d2:	e000      	b.n	80056d6 <lfs_dir_orphaningcommit+0x3ae>
 80056d4:	2300      	movs	r3, #0
 80056d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80056d8:	2300      	movs	r3, #0
 80056da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056e2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80056e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80056e8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80056ec:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80056f0:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80056f4:	2000      	movs	r0, #0
 80056f6:	9001      	str	r0, [sp, #4]
 80056f8:	2002      	movs	r0, #2
 80056fa:	9000      	str	r0, [sp, #0]
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f7ff fb51 	bl	8004da4 <lfs_dir_relocatingcommit>
 8005702:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8005706:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800570a:	4618      	mov	r0, r3
 800570c:	f7fc fd43 	bl	8002196 <lfs_pair_fromle32>
            if (state < 0) {
 8005710:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005714:	2b00      	cmp	r3, #0
 8005716:	da02      	bge.n	800571e <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8005718:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800571c:	e0f1      	b.n	8005902 <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 800571e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005722:	2b01      	cmp	r3, #1
 8005724:	d113      	bne.n	800574e <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8005726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005728:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 800572c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800572e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 8005732:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8005736:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 800573a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800573c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800573e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005742:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8005746:	2301      	movs	r3, #1
 8005748:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800574c:	e0cd      	b.n	80058ea <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 800574e:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8005752:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005756:	4619      	mov	r1, r3
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f002 f9b1 	bl	8007ac0 <lfs_fs_pred>
 800575e:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8005762:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005766:	2b00      	cmp	r3, #0
 8005768:	d007      	beq.n	800577a <lfs_dir_orphaningcommit+0x452>
 800576a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800576e:	f113 0f02 	cmn.w	r3, #2
 8005772:	d002      	beq.n	800577a <lfs_dir_orphaningcommit+0x452>
            return err;
 8005774:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005778:	e0c3      	b.n	8005902 <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 800577a:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d01a      	beq.n	80057b8 <lfs_dir_orphaningcommit+0x490>
 8005782:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005786:	f113 0f02 	cmn.w	r3, #2
 800578a:	d115      	bne.n	80057b8 <lfs_dir_orphaningcommit+0x490>
 800578c:	4b08      	ldr	r3, [pc, #32]	@ (80057b0 <lfs_dir_orphaningcommit+0x488>)
 800578e:	4a09      	ldr	r2, [pc, #36]	@ (80057b4 <lfs_dir_orphaningcommit+0x48c>)
 8005790:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 8005794:	4803      	ldr	r0, [pc, #12]	@ (80057a4 <lfs_dir_orphaningcommit+0x47c>)
 8005796:	f002 ffa5 	bl	80086e4 <__assert_func>
 800579a:	bf00      	nop
 800579c:	000ffc08 	.word	0x000ffc08
 80057a0:	0800993c 	.word	0x0800993c
 80057a4:	0800982c 	.word	0x0800982c
 80057a8:	08009abc 	.word	0x08009abc
 80057ac:	08009af8 	.word	0x08009af8
 80057b0:	08009b3c 	.word	0x08009b3c
 80057b4:	0800a50c 	.word	0x0800a50c

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80057b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80057bc:	f113 0f02 	cmn.w	r3, #2
 80057c0:	f000 8093 	beq.w	80058ea <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	3330      	adds	r3, #48	@ 0x30
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fc fdf6 	bl	80023ba <lfs_gstate_hasorphans>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d011      	beq.n	80057f8 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 80057d4:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 80057d8:	425b      	negs	r3, r3
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	b25b      	sxtb	r3, r3
 80057de:	4619      	mov	r1, r3
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f002 fab7 	bl	8007d54 <lfs_fs_preporphans>
 80057e6:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 80057ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d002      	beq.n	80057f8 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 80057f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80057f6:	e084      	b.n	8005902 <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80057f8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80057fc:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3330      	adds	r3, #48	@ 0x30
 8005804:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8005808:	4611      	mov	r1, r2
 800580a:	4618      	mov	r0, r3
 800580c:	f7fc fe1e 	bl	800244c <lfs_gstate_hasmovehere>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d01c      	beq.n	8005850 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581a:	4618      	mov	r0, r3
 800581c:	f7fc fd5a 	bl	80022d4 <lfs_tag_id>
 8005820:	4603      	mov	r3, r0
 8005822:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8005826:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005828:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800582a:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 800582e:	4837      	ldr	r0, [pc, #220]	@ (800590c <lfs_dir_orphaningcommit+0x5e4>)
 8005830:	9002      	str	r0, [sp, #8]
 8005832:	9201      	str	r2, [sp, #4]
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	460b      	mov	r3, r1
 8005838:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 800583c:	4934      	ldr	r1, [pc, #208]	@ (8005910 <lfs_dir_orphaningcommit+0x5e8>)
 800583e:	4835      	ldr	r0, [pc, #212]	@ (8005914 <lfs_dir_orphaningcommit+0x5ec>)
 8005840:	f003 f900 	bl	8008a44 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8005844:	2200      	movs	r2, #0
 8005846:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f002 fad2 	bl	8007df4 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8005850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005852:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 8005856:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005858:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 800585c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8005860:	4618      	mov	r0, r3
 8005862:	f7fc fcb2 	bl	80021ca <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8005866:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 800586a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800586e:	4293      	cmp	r3, r2
 8005870:	d007      	beq.n	8005882 <lfs_dir_orphaningcommit+0x55a>
 8005872:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8005876:	029b      	lsls	r3, r3, #10
 8005878:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800587c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8005880:	e000      	b.n	8005884 <lfs_dir_orphaningcommit+0x55c>
 8005882:	2300      	movs	r3, #0
 8005884:	627b      	str	r3, [r7, #36]	@ 0x24
 8005886:	2300      	movs	r3, #0
 8005888:	62bb      	str	r3, [r7, #40]	@ 0x28
 800588a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800588e:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8005892:	051a      	lsls	r2, r3, #20
 8005894:	4b20      	ldr	r3, [pc, #128]	@ (8005918 <lfs_dir_orphaningcommit+0x5f0>)
 8005896:	4313      	orrs	r3, r2
 8005898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800589a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800589e:	633b      	str	r3, [r7, #48]	@ 0x30
 80058a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058a4:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80058a8:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80058ac:	2000      	movs	r0, #0
 80058ae:	9001      	str	r0, [sp, #4]
 80058b0:	2002      	movs	r0, #2
 80058b2:	9000      	str	r0, [sp, #0]
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f7ff fa75 	bl	8004da4 <lfs_dir_relocatingcommit>
 80058ba:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80058be:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fc fc67 	bl	8002196 <lfs_pair_fromle32>
            if (state < 0) {
 80058c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	da02      	bge.n	80058d6 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 80058d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058d4:	e015      	b.n	8005902 <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 80058d6:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80058da:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 80058de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80058e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 80058ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	f43f adfe 	beq.w	80054f0 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80058f4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <lfs_dir_orphaningcommit+0x5d8>
 80058fc:	2303      	movs	r3, #3
 80058fe:	e000      	b.n	8005902 <lfs_dir_orphaningcommit+0x5da>
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	37e0      	adds	r7, #224	@ 0xe0
 8005906:	46bd      	mov	sp, r7
 8005908:	bdb0      	pop	{r4, r5, r7, pc}
 800590a:	bf00      	nop
 800590c:	0800993c 	.word	0x0800993c
 8005910:	0800982c 	.word	0x0800982c
 8005914:	08009af8 	.word	0x08009af8
 8005918:	000ffc08 	.word	0x000ffc08

0800591c <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	68b9      	ldr	r1, [r7, #8]
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f7ff fcf9 	bl	8005328 <lfs_dir_orphaningcommit>
 8005936:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2b00      	cmp	r3, #0
 800593c:	da01      	bge.n	8005942 <lfs_dir_commit+0x26>
        return orphans;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	e00d      	b.n	800595e <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d009      	beq.n	800595c <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8005948:	2100      	movs	r1, #0
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f002 fb74 	bl	8008038 <lfs_fs_deorphan>
 8005950:	6138      	str	r0, [r7, #16]
        if (err) {
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <lfs_dir_commit+0x40>
            return err;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	e000      	b.n	800595e <lfs_dir_commit+0x42>
        }
    }

    return 0;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8005966:	b590      	push	{r4, r7, lr}
 8005968:	b087      	sub	sp, #28
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	3b08      	subs	r3, #8
 800597e:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	fbb2 f3f3 	udiv	r3, r2, r3
 8005988:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <lfs_ctz_index+0x2e>
        return 0;
 8005990:	2300      	movs	r3, #0
 8005992:	e01c      	b.n	80059ce <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	3b01      	subs	r3, #1
 8005998:	4618      	mov	r0, r3
 800599a:	f7fb ff7e 	bl	800189a <lfs_popc>
 800599e:	4603      	mov	r3, r0
 80059a0:	3302      	adds	r3, #2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	1ad2      	subs	r2, r2, r3
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ae:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	fb02 f303 	mul.w	r3, r2, r3
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	1ad4      	subs	r4, r2, r3
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f7fb ff6c 	bl	800189a <lfs_popc>
 80059c2:	4603      	mov	r3, r0
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	1ae2      	subs	r2, r4, r3
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	601a      	str	r2, [r3, #0]
    return i;
 80059cc:	68fb      	ldr	r3, [r7, #12]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd90      	pop	{r4, r7, pc}

080059d6 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 80059d6:	b590      	push	{r4, r7, lr}
 80059d8:	b08f      	sub	sp, #60	@ 0x3c
 80059da:	af04      	add	r7, sp, #16
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	607a      	str	r2, [r7, #4]
 80059e2:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 80059e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d108      	bne.n	80059fc <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 80059ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059f0:	601a      	str	r2, [r3, #0]
        *off = 0;
 80059f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059f4:	2200      	movs	r2, #0
 80059f6:	601a      	str	r2, [r3, #0]
        return 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	e053      	b.n	8005aa4 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80059fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fe:	3b01      	subs	r3, #1
 8005a00:	617b      	str	r3, [r7, #20]
 8005a02:	f107 0314 	add.w	r3, r7, #20
 8005a06:	4619      	mov	r1, r3
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f7ff ffac 	bl	8005966 <lfs_ctz_index>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8005a12:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005a16:	4619      	mov	r1, r3
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f7ff ffa4 	bl	8005966 <lfs_ctz_index>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8005a22:	e034      	b.n	8005a8e <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8005a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fb ff15 	bl	800185c <lfs_npw2>
 8005a32:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8005a34:	1e5c      	subs	r4, r3, #1
 8005a36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a38:	f7fb ff20 	bl	800187c <lfs_ctz>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4620      	mov	r0, r4
 8005a42:	f7fb fed4 	bl	80017ee <lfs_min>
 8005a46:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	69fa      	ldr	r2, [r7, #28]
 8005a4c:	0092      	lsls	r2, r2, #2
 8005a4e:	2104      	movs	r1, #4
 8005a50:	9103      	str	r1, [sp, #12]
 8005a52:	4639      	mov	r1, r7
 8005a54:	9102      	str	r1, [sp, #8]
 8005a56:	9201      	str	r2, [sp, #4]
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	2304      	movs	r3, #4
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	68b9      	ldr	r1, [r7, #8]
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7fb ff9f 	bl	80019a4 <lfs_bd_read>
 8005a66:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fb ff2f 	bl	80018ce <lfs_fromle32>
 8005a70:	4603      	mov	r3, r0
 8005a72:	603b      	str	r3, [r7, #0]
        if (err) {
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <lfs_ctz_find+0xa8>
            return err;
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	e012      	b.n	8005aa4 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8005a7e:	2201      	movs	r2, #1
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	fa02 f303 	lsl.w	r3, r2, r3
 8005a86:	461a      	mov	r2, r3
 8005a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8a:	1a9b      	subs	r3, r3, r2
 8005a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 8005a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d8c6      	bhi.n	8005a24 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a9a:	601a      	str	r2, [r3, #0]
    *off = pos;
 8005a9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005a9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aa0:	601a      	str	r2, [r3, #0]
    return 0;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	372c      	adds	r7, #44	@ 0x2c
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd90      	pop	{r4, r7, pc}

08005aac <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b092      	sub	sp, #72	@ 0x48
 8005ab0:	af04      	add	r7, sp, #16
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
 8005ab8:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8005aba:	f107 0320 	add.w	r3, r7, #32
 8005abe:	4619      	mov	r1, r3
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f7fc ff05 	bl	80028d0 <lfs_alloc>
 8005ac6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 8005ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <lfs_ctz_extend+0x26>
            return err;
 8005ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad0:	e0eb      	b.n	8005caa <lfs_ctz_extend+0x1fe>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f7fc faa4 	bl	8002024 <lfs_bd_erase>
 8005adc:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 8005ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d006      	beq.n	8005af2 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8005ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005aea:	f000 80cd 	beq.w	8005c88 <lfs_ctz_extend+0x1dc>
                    goto relocate;
                }
                return err;
 8005aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af0:	e0db      	b.n	8005caa <lfs_ctz_extend+0x1fe>
            }

            if (size == 0) {
 8005af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d107      	bne.n	8005b08 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8005af8:	6a3a      	ldr	r2, [r7, #32]
 8005afa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005afc:	601a      	str	r2, [r3, #0]
                *off = 0;
 8005afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]
                return 0;
 8005b04:	2300      	movs	r3, #0
 8005b06:	e0d0      	b.n	8005caa <lfs_ctz_extend+0x1fe>
            }

            lfs_size_t noff = size - 1;
 8005b08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8005b0e:	f107 031c 	add.w	r3, r7, #28
 8005b12:	4619      	mov	r1, r3
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f7ff ff26 	bl	8005966 <lfs_ctz_index>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	3301      	adds	r3, #1
 8005b22:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b28:	69da      	ldr	r2, [r3, #28]
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d046      	beq.n	8005bbe <lfs_ctz_extend+0x112>
                for (lfs_off_t i = 0; i < noff; i++) {
 8005b30:	2300      	movs	r3, #0
 8005b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b34:	e037      	b.n	8005ba6 <lfs_ctz_extend+0xfa>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b3a:	1ad2      	subs	r2, r2, r3
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	9303      	str	r3, [sp, #12]
 8005b40:	f107 0317 	add.w	r3, r7, #23
 8005b44:	9302      	str	r3, [sp, #8]
 8005b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b48:	9301      	str	r3, [sp, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	2100      	movs	r1, #0
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f7fb ff25 	bl	80019a4 <lfs_bd_read>
 8005b5a:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8005b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <lfs_ctz_extend+0xba>
                        return err;
 8005b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b64:	e01e      	b.n	8005ba4 <lfs_ctz_extend+0xf8>
                    }

                    err = lfs_bd_prog(lfs,
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	9203      	str	r2, [sp, #12]
 8005b6c:	f107 0217 	add.w	r2, r7, #23
 8005b70:	9202      	str	r2, [sp, #8]
 8005b72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b74:	9201      	str	r2, [sp, #4]
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	2301      	movs	r3, #1
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	68b9      	ldr	r1, [r7, #8]
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f7fc f9a2 	bl	8001ec8 <lfs_bd_prog>
 8005b84:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8005b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d007      	beq.n	8005b9c <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8005b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005b92:	d101      	bne.n	8005b98 <lfs_ctz_extend+0xec>
                            goto relocate;
 8005b94:	bf00      	nop
                    goto relocate;
 8005b96:	e07a      	b.n	8005c8e <lfs_ctz_extend+0x1e2>
                        }
                        return err;
 8005b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9a:	e003      	b.n	8005ba4 <lfs_ctz_extend+0xf8>
                for (lfs_off_t i = 0; i < noff; i++) {
 8005b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ba2:	e000      	b.n	8005ba6 <lfs_ctz_extend+0xfa>
                return err;
 8005ba4:	e081      	b.n	8005caa <lfs_ctz_extend+0x1fe>
                for (lfs_off_t i = 0; i < noff; i++) {
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d3c3      	bcc.n	8005b36 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8005bae:	6a3a      	ldr	r2, [r7, #32]
 8005bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bb2:	601a      	str	r2, [r3, #0]
                *off = noff;
 8005bb4:	69fa      	ldr	r2, [r7, #28]
 8005bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bb8:	601a      	str	r2, [r3, #0]
                return 0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	e075      	b.n	8005caa <lfs_ctz_extend+0x1fe>
            }

            // append block
            index += 1;
 8005bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8005bc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bc6:	f7fb fe59 	bl	800187c <lfs_ctz>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	3301      	adds	r3, #1
 8005bce:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bd8:	e049      	b.n	8005c6e <lfs_ctz_extend+0x1c2>
                nhead = lfs_tole32(nhead);
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fb fe81 	bl	80018e4 <lfs_tole32>
 8005be2:	4603      	mov	r3, r0
 8005be4:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bea:	0092      	lsls	r2, r2, #2
 8005bec:	2104      	movs	r1, #4
 8005bee:	9103      	str	r1, [sp, #12]
 8005bf0:	f107 0118 	add.w	r1, r7, #24
 8005bf4:	9102      	str	r1, [sp, #8]
 8005bf6:	9201      	str	r2, [sp, #4]
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	68b9      	ldr	r1, [r7, #8]
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f7fc f961 	bl	8001ec8 <lfs_bd_prog>
 8005c06:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fb fe5f 	bl	80018ce <lfs_fromle32>
 8005c10:	4603      	mov	r3, r0
 8005c12:	61bb      	str	r3, [r7, #24]
                if (err) {
 8005c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <lfs_ctz_extend+0x17a>
                    if (err == LFS_ERR_CORRUPT) {
 8005c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c1c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005c20:	d034      	beq.n	8005c8c <lfs_ctz_extend+0x1e0>
                        goto relocate;
                    }
                    return err;
 8005c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c24:	e041      	b.n	8005caa <lfs_ctz_extend+0x1fe>
                }

                if (i != skips-1) {
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d01b      	beq.n	8005c68 <lfs_ctz_extend+0x1bc>
                    err = lfs_bd_read(lfs,
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c34:	0092      	lsls	r2, r2, #2
 8005c36:	2104      	movs	r1, #4
 8005c38:	9103      	str	r1, [sp, #12]
 8005c3a:	f107 0118 	add.w	r1, r7, #24
 8005c3e:	9102      	str	r1, [sp, #8]
 8005c40:	9201      	str	r2, [sp, #4]
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	2304      	movs	r3, #4
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	2100      	movs	r1, #0
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f7fb feaa 	bl	80019a4 <lfs_bd_read>
 8005c50:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fb fe3a 	bl	80018ce <lfs_fromle32>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8005c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <lfs_ctz_extend+0x1bc>
                        return err;
 8005c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c66:	e020      	b.n	8005caa <lfs_ctz_extend+0x1fe>
            for (lfs_off_t i = 0; i < skips; i++) {
 8005c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d3b1      	bcc.n	8005bda <lfs_ctz_extend+0x12e>
                    }
                }
            }

            *block = nblock;
 8005c76:	6a3a      	ldr	r2, [r7, #32]
 8005c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c7a:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7e:	009a      	lsls	r2, r3, #2
 8005c80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c82:	601a      	str	r2, [r3, #0]
            return 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	e010      	b.n	8005caa <lfs_ctz_extend+0x1fe>
                    goto relocate;
 8005c88:	bf00      	nop
 8005c8a:	e000      	b.n	8005c8e <lfs_ctz_extend+0x1e2>
                        goto relocate;
 8005c8c:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	4a08      	ldr	r2, [pc, #32]	@ (8005cb4 <lfs_ctz_extend+0x208>)
 8005c92:	9200      	str	r2, [sp, #0]
 8005c94:	f640 32a6 	movw	r2, #2982	@ 0xba6
 8005c98:	4907      	ldr	r1, [pc, #28]	@ (8005cb8 <lfs_ctz_extend+0x20c>)
 8005c9a:	4808      	ldr	r0, [pc, #32]	@ (8005cbc <lfs_ctz_extend+0x210>)
 8005c9c:	f002 fed2 	bl	8008a44 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f7fb fe59 	bl	800195a <lfs_cache_drop>
    while (true) {
 8005ca8:	e707      	b.n	8005aba <lfs_ctz_extend+0xe>
    }
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3738      	adds	r7, #56	@ 0x38
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	0800993c 	.word	0x0800993c
 8005cb8:	0800982c 	.word	0x0800982c
 8005cbc:	080099bc 	.word	0x080099bc

08005cc0 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b090      	sub	sp, #64	@ 0x40
 8005cc4:	af04      	add	r7, sp, #16
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8005cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <lfs_ctz_traverse+0x18>
        return 0;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e06b      	b.n	8005db0 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	61fb      	str	r3, [r7, #28]
 8005cde:	f107 031c 	add.w	r3, r7, #28
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f7ff fe3e 	bl	8005966 <lfs_ctz_index>
 8005cea:	4603      	mov	r3, r0
 8005cec:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 8005cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8005cf4:	4798      	blx	r3
 8005cf6:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <lfs_ctz_traverse+0x42>
            return err;
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d00:	e056      	b.n	8005db0 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8005d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <lfs_ctz_traverse+0x4c>
            return 0;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e051      	b.n	8005db0 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8005d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	f1c3 0302 	rsb	r3, r3, #2
 8005d16:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8005d18:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8005d1a:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8005d1e:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8005d20:	9303      	str	r3, [sp, #12]
 8005d22:	f107 0314 	add.w	r3, r7, #20
 8005d26:	9302      	str	r3, [sp, #8]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	4613      	mov	r3, r2
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	68b9      	ldr	r1, [r7, #8]
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f7fb fe34 	bl	80019a4 <lfs_bd_read>
 8005d3c:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fb fdc4 	bl	80018ce <lfs_fromle32>
 8005d46:	4603      	mov	r3, r0
 8005d48:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fb fdbe 	bl	80018ce <lfs_fromle32>
 8005d52:	4603      	mov	r3, r0
 8005d54:	61bb      	str	r3, [r7, #24]
        if (err) {
 8005d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <lfs_ctz_traverse+0xa0>
            return err;
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5e:	e027      	b.n	8005db0 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8005d60:	2300      	movs	r3, #0
 8005d62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d64:	e012      	b.n	8005d8c <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8005d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	3330      	adds	r3, #48	@ 0x30
 8005d6c:	443b      	add	r3, r7
 8005d6e:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8005d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d74:	4611      	mov	r1, r2
 8005d76:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8005d78:	4798      	blx	r3
 8005d7a:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <lfs_ctz_traverse+0xc6>
                return err;
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	e014      	b.n	8005db0 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8005d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d88:	3301      	adds	r3, #1
 8005d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d8c:	6a3b      	ldr	r3, [r7, #32]
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d92:	429a      	cmp	r2, r3
 8005d94:	dbe7      	blt.n	8005d66 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	3330      	adds	r3, #48	@ 0x30
 8005d9e:	443b      	add	r3, r7
 8005da0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8005da4:	603b      	str	r3, [r7, #0]
        index -= count;
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 8005dae:	e79e      	b.n	8005cee <lfs_ctz_traverse+0x2e>
    }
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3730      	adds	r7, #48	@ 0x30
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8005db8:	b5b0      	push	{r4, r5, r7, lr}
 8005dba:	b09a      	sub	sp, #104	@ 0x68
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d008      	beq.n	8005de2 <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f002 fae1 	bl	8008398 <lfs_fs_forceconsistency>
 8005dd6:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 8005dd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <lfs_file_opencfg_+0x2a>
            return err;
 8005dde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005de0:	e1b0      	b.n	8006144 <lfs_file_opencfg_+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005de6:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	2200      	movs	r2, #0
 8005df2:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2200      	movs	r2, #0
 8005df8:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f103 0108 	add.w	r1, r3, #8
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	3304      	adds	r3, #4
 8005e0a:	1d3a      	adds	r2, r7, #4
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7fe f87b 	bl	8003f08 <lfs_dir_find>
 8005e12:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8005e14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	da0c      	bge.n	8005e34 <lfs_file_opencfg_+0x7c>
 8005e1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e1c:	f113 0f02 	cmn.w	r3, #2
 8005e20:	d105      	bne.n	8005e2e <lfs_file_opencfg_+0x76>
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	889b      	ldrh	r3, [r3, #4]
 8005e26:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d102      	bne.n	8005e34 <lfs_file_opencfg_+0x7c>
        err = tag;
 8005e2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8005e32:	e17c      	b.n	800612e <lfs_file_opencfg_+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2201      	movs	r2, #1
 8005e38:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8005e3a:	68b9      	ldr	r1, [r7, #8]
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f7fc fc74 	bl	800272a <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8005e42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e44:	f113 0f02 	cmn.w	r3, #2
 8005e48:	d14e      	bne.n	8005ee8 <lfs_file_opencfg_+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d103      	bne.n	8005e5c <lfs_file_opencfg_+0xa4>
            err = LFS_ERR_NOENT;
 8005e54:	f06f 0301 	mvn.w	r3, #1
 8005e58:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8005e5a:	e168      	b.n	800612e <lfs_file_opencfg_+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fa f996 	bl	8000190 <strlen>
 8005e64:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d903      	bls.n	8005e78 <lfs_file_opencfg_+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8005e70:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8005e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8005e76:	e15a      	b.n	800612e <lfs_file_opencfg_+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f103 0108 	add.w	r1, r3, #8
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	889b      	ldrh	r3, [r3, #4]
 8005e82:	029b      	lsls	r3, r3, #10
 8005e84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e8e:	2300      	movs	r3, #0
 8005e90:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	889b      	ldrh	r3, [r3, #4]
 8005e96:	029a      	lsls	r2, r3, #10
 8005e98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	889b      	ldrh	r3, [r3, #4]
 8005eaa:	029b      	lsls	r3, r3, #10
 8005eac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005eb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005eba:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f7ff fd2b 	bl	800591c <lfs_dir_commit>
 8005ec6:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8005ec8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005eca:	f113 0f1c 	cmn.w	r3, #28
 8005ece:	d001      	beq.n	8005ed4 <lfs_file_opencfg_+0x11c>
 8005ed0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ed2:	e001      	b.n	8005ed8 <lfs_file_opencfg_+0x120>
 8005ed4:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8005ed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 8005eda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f040 8125 	bne.w	800612c <lfs_file_opencfg_+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8005ee2:	4b9a      	ldr	r3, [pc, #616]	@ (800614c <lfs_file_opencfg_+0x394>)
 8005ee4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ee6:	e044      	b.n	8005f72 <lfs_file_opencfg_+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <lfs_file_opencfg_+0x142>
        err = LFS_ERR_EXIST;
 8005ef2:	f06f 0310 	mvn.w	r3, #16
 8005ef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8005ef8:	e119      	b.n	800612e <lfs_file_opencfg_+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8005efa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fc f9bf 	bl	8002280 <lfs_tag_type3>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d003      	beq.n	8005f10 <lfs_file_opencfg_+0x158>
        err = LFS_ERR_ISDIR;
 8005f08:	f06f 0314 	mvn.w	r3, #20
 8005f0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8005f0e:	e10e      	b.n	800612e <lfs_file_opencfg_+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00e      	beq.n	8005f38 <lfs_file_opencfg_+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	889b      	ldrh	r3, [r3, #4]
 8005f1e:	029b      	lsls	r3, r3, #10
 8005f20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f28:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f2e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f36:	e01c      	b.n	8005f72 <lfs_file_opencfg_+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	889b      	ldrh	r3, [r3, #4]
 8005f42:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005f44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f48:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005f50:	9200      	str	r2, [sp, #0]
 8005f52:	4a7f      	ldr	r2, [pc, #508]	@ (8006150 <lfs_file_opencfg_+0x398>)
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f7fc fe39 	bl	8002bcc <lfs_dir_get>
 8005f5a:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 8005f5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	da02      	bge.n	8005f68 <lfs_file_opencfg_+0x1b0>
            err = tag;
 8005f62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8005f66:	e0e2      	b.n	800612e <lfs_file_opencfg_+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	3328      	adds	r3, #40	@ 0x28
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7fc fafd 	bl	800256c <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8005f72:	2300      	movs	r3, #0
 8005f74:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f76:	e063      	b.n	8006040 <lfs_file_opencfg_+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d03c      	beq.n	8005ffe <lfs_file_opencfg_+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f8e:	6859      	ldr	r1, [r3, #4]
 8005f90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f92:	4613      	mov	r3, r2
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	4413      	add	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	440b      	add	r3, r1
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005fa2:	051a      	lsls	r2, r3, #20
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	889b      	ldrh	r3, [r3, #4]
 8005fa8:	029b      	lsls	r3, r3, #10
 8005faa:	ea42 0103 	orr.w	r1, r2, r3
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fb2:	6858      	ldr	r0, [r3, #4]
 8005fb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4403      	add	r3, r0
 8005fc0:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005fc2:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fca:	6859      	ldr	r1, [r3, #4]
 8005fcc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005fce:	4613      	mov	r3, r2
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	4413      	add	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	4603      	mov	r3, r0
 8005fde:	4a5d      	ldr	r2, [pc, #372]	@ (8006154 <lfs_file_opencfg_+0x39c>)
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f7fc fdf2 	bl	8002bcc <lfs_dir_get>
 8005fe8:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8005fea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	da06      	bge.n	8005ffe <lfs_file_opencfg_+0x246>
 8005ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ff2:	f113 0f02 	cmn.w	r3, #2
 8005ff6:	d002      	beq.n	8005ffe <lfs_file_opencfg_+0x246>
                err = res;
 8005ff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ffa:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8005ffc:	e097      	b.n	800612e <lfs_file_opencfg_+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d017      	beq.n	800603a <lfs_file_opencfg_+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800600e:	6859      	ldr	r1, [r3, #4]
 8006010:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006012:	4613      	mov	r3, r2
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	4413      	add	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	440b      	add	r3, r1
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006022:	429a      	cmp	r2, r3
 8006024:	d903      	bls.n	800602e <lfs_file_opencfg_+0x276>
                err = LFS_ERR_NOSPC;
 8006026:	f06f 031b 	mvn.w	r3, #27
 800602a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 800602c:	e07f      	b.n	800612e <lfs_file_opencfg_+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006032:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800603a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800603c:	3301      	adds	r3, #1
 800603e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006048:	429a      	cmp	r2, r3
 800604a:	d395      	bcc.n	8005f78 <lfs_file_opencfg_+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d005      	beq.n	8006062 <lfs_file_opencfg_+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006060:	e010      	b.n	8006084 <lfs_file_opencfg_+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006068:	4618      	mov	r0, r3
 800606a:	f7fb fc5f 	bl	800192c <lfs_malloc>
 800606e:	4602      	mov	r2, r0
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006078:	2b00      	cmp	r3, #0
 800607a:	d103      	bne.n	8006084 <lfs_file_opencfg_+0x2cc>
            err = LFS_ERR_NOMEM;
 800607c:	f06f 030b 	mvn.w	r3, #11
 8006080:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8006082:	e054      	b.n	800612e <lfs_file_opencfg_+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	3340      	adds	r3, #64	@ 0x40
 8006088:	4619      	mov	r1, r3
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f7fb fc74 	bl	8001978 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8006090:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006092:	4618      	mov	r0, r3
 8006094:	f7fc f8f4 	bl	8002280 <lfs_tag_type3>
 8006098:	4603      	mov	r3, r0
 800609a:	461a      	mov	r2, r3
 800609c:	f240 2301 	movw	r3, #513	@ 0x201
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d141      	bne.n	8006128 <lfs_file_opencfg_+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	f06f 0201 	mvn.w	r2, #1
 80060aa:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 80060ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fc f920 	bl	80022f4 <lfs_tag_size>
 80060b4:	4602      	mov	r2, r0
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2200      	movs	r2, #0
 80060d2:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d020      	beq.n	8006128 <lfs_file_opencfg_+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	889b      	ldrh	r3, [r3, #4]
 80060f0:	029c      	lsls	r4, r3, #10
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060f6:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fb fb77 	bl	80017ee <lfs_min>
 8006100:	4603      	mov	r3, r0
 8006102:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006104:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	4613      	mov	r3, r2
 8006110:	4a0f      	ldr	r2, [pc, #60]	@ (8006150 <lfs_file_opencfg_+0x398>)
 8006112:	4629      	mov	r1, r5
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f7fc fd59 	bl	8002bcc <lfs_dir_get>
 800611a:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 800611c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800611e:	2b00      	cmp	r3, #0
 8006120:	da02      	bge.n	8006128 <lfs_file_opencfg_+0x370>
                err = res;
 8006122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006124:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8006126:	e002      	b.n	800612e <lfs_file_opencfg_+0x376>
            }
        }
    }

    return 0;
 8006128:	2300      	movs	r3, #0
 800612a:	e00b      	b.n	8006144 <lfs_file_opencfg_+0x38c>
            goto cleanup;
 800612c:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006132:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_close_(lfs, file);
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f823 	bl	8006188 <lfs_file_close_>
    return err;
 8006142:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8006144:	4618      	mov	r0, r3
 8006146:	3760      	adds	r7, #96	@ 0x60
 8006148:	46bd      	mov	sp, r7
 800614a:	bdb0      	pop	{r4, r5, r7, pc}
 800614c:	20100000 	.word	0x20100000
 8006150:	700ffc00 	.word	0x700ffc00
 8006154:	7ffffc00 	.word	0x7ffffc00

08006158 <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8006158:	b580      	push	{r7, lr}
 800615a:	b088      	sub	sp, #32
 800615c:	af02      	add	r7, sp, #8
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 8006166:	4b07      	ldr	r3, [pc, #28]	@ (8006184 <lfs_file_open_+0x2c>)
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f7ff fe21 	bl	8005db8 <lfs_file_opencfg_>
 8006176:	6178      	str	r0, [r7, #20]
    return err;
 8006178:	697b      	ldr	r3, [r7, #20]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	0800a524 	.word	0x0800a524

08006188 <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 8006192:	6839      	ldr	r1, [r7, #0]
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 f9e5 	bl	8006564 <lfs_file_sync_>
 800619a:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7fc faa1 	bl	80026e6 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d104      	bne.n	80061b8 <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fb fbc6 	bl	8001944 <lfs_free>
    }

    return err;
 80061b8:	68fb      	ldr	r3, [r7, #12]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 80061c4:	b590      	push	{r4, r7, lr}
 80061c6:	b08d      	sub	sp, #52	@ 0x34
 80061c8:	af06      	add	r7, sp, #24
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80061ce:	f107 030c 	add.w	r3, r7, #12
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7fc fb7b 	bl	80028d0 <lfs_alloc>
 80061da:	6138      	str	r0, [r7, #16]
        if (err) {
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <lfs_file_relocate+0x22>
            return err;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	e0bb      	b.n	800635e <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4619      	mov	r1, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fb ff1a 	bl	8002024 <lfs_bd_erase>
 80061f0:	6138      	str	r0, [r7, #16]
        if (err) {
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d006      	beq.n	8006206 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80061fe:	f000 809b 	beq.w	8006338 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	e0ab      	b.n	800635e <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8006206:	2300      	movs	r3, #0
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	e069      	b.n	80062e0 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006210:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d027      	beq.n	8006268 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	f103 0008 	add.w	r0, r3, #8
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	889b      	ldrh	r3, [r3, #4]
 8006230:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8006232:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800623a:	2101      	movs	r1, #1
 800623c:	9105      	str	r1, [sp, #20]
 800623e:	f107 010b 	add.w	r1, r7, #11
 8006242:	9104      	str	r1, [sp, #16]
 8006244:	6979      	ldr	r1, [r7, #20]
 8006246:	9103      	str	r1, [sp, #12]
 8006248:	9302      	str	r3, [sp, #8]
 800624a:	4b47      	ldr	r3, [pc, #284]	@ (8006368 <lfs_file_relocate+0x1a4>)
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	9200      	str	r2, [sp, #0]
 8006250:	4623      	mov	r3, r4
 8006252:	2200      	movs	r2, #0
 8006254:	4601      	mov	r1, r0
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7fc fcd3 	bl	8002c02 <lfs_dir_getread>
 800625c:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01e      	beq.n	80062a2 <lfs_file_relocate+0xde>
                    return err;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	e07a      	b.n	800635e <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 800626e:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	1ad4      	subs	r4, r2, r3
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800627c:	2201      	movs	r2, #1
 800627e:	9203      	str	r2, [sp, #12]
 8006280:	f107 020b 	add.w	r2, r7, #11
 8006284:	9202      	str	r2, [sp, #8]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	9201      	str	r2, [sp, #4]
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	4623      	mov	r3, r4
 800628e:	4602      	mov	r2, r0
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7fb fb87 	bl	80019a4 <lfs_bd_read>
 8006296:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <lfs_file_relocate+0xde>
                    return err;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	e05d      	b.n	800635e <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f103 0110 	add.w	r1, r3, #16
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2201      	movs	r2, #1
 80062ae:	9203      	str	r2, [sp, #12]
 80062b0:	f107 020b 	add.w	r2, r7, #11
 80062b4:	9202      	str	r2, [sp, #8]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	9201      	str	r2, [sp, #4]
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	2301      	movs	r3, #1
 80062be:	4602      	mov	r2, r0
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7fb fe01 	bl	8001ec8 <lfs_bd_prog>
 80062c6:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80062d4:	d032      	beq.n	800633c <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	e041      	b.n	800635e <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	3301      	adds	r3, #1
 80062de:	617b      	str	r3, [r7, #20]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d390      	bcc.n	800620c <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69d9      	ldr	r1, [r3, #28]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f8:	461a      	mov	r2, r3
 80062fa:	f002 fc38 	bl	8008b6e <memcpy>
        file->cache.block = lfs->pcache.block;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	695a      	ldr	r2, [r3, #20]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	699a      	ldr	r2, [r3, #24]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	3310      	adds	r3, #16
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7fb fb2b 	bl	8001978 <lfs_cache_zero>

        file->block = nblock;
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800632c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 8006334:	2300      	movs	r3, #0
 8006336:	e012      	b.n	800635e <lfs_file_relocate+0x19a>
                goto relocate;
 8006338:	bf00      	nop
 800633a:	e000      	b.n	800633e <lfs_file_relocate+0x17a>
                    goto relocate;
 800633c:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4a0a      	ldr	r2, [pc, #40]	@ (800636c <lfs_file_relocate+0x1a8>)
 8006342:	9200      	str	r2, [sp, #0]
 8006344:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 8006348:	4909      	ldr	r1, [pc, #36]	@ (8006370 <lfs_file_relocate+0x1ac>)
 800634a:	480a      	ldr	r0, [pc, #40]	@ (8006374 <lfs_file_relocate+0x1b0>)
 800634c:	f002 fb7a 	bl	8008a44 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	3310      	adds	r3, #16
 8006354:	4619      	mov	r1, r3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7fb faff 	bl	800195a <lfs_cache_drop>
    while (true) {
 800635c:	e737      	b.n	80061ce <lfs_file_relocate+0xa>
    }
}
 800635e:	4618      	mov	r0, r3
 8006360:	371c      	adds	r7, #28
 8006362:	46bd      	mov	sp, r7
 8006364:	bd90      	pop	{r4, r7, pc}
 8006366:	bf00      	nop
 8006368:	fff7fc00 	.word	0xfff7fc00
 800636c:	0800993c 	.word	0x0800993c
 8006370:	0800982c 	.word	0x0800982c
 8006374:	080099bc 	.word	0x080099bc

08006378 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7fc fa09 	bl	80027a2 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 8006390:	6839      	ldr	r1, [r7, #0]
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff ff16 	bl	80061c4 <lfs_file_relocate>
 8006398:	60f8      	str	r0, [r7, #12]
    if (err) {
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <lfs_file_outline+0x2c>
        return err;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	e006      	b.n	80063b2 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80063bc:	b590      	push	{r4, r7, lr}
 80063be:	b09f      	sub	sp, #124	@ 0x7c
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d011      	beq.n	80063f6 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d105      	bne.n	80063ea <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	3340      	adds	r3, #64	@ 0x40
 80063e2:	4619      	mov	r1, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7fb fab8 	bl	800195a <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 80a4 	beq.w	800654c <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006408:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800640e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d176      	bne.n	8006504 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8006416:	f107 030c 	add.w	r3, r7, #12
 800641a:	2254      	movs	r2, #84	@ 0x54
 800641c:	2100      	movs	r1, #0
 800641e:	4618      	mov	r0, r3
 8006420:	f002 fb32 	bl	8008a88 <memset>
                .ctz.head = file->ctz.head,
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 8006428:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 800642e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006430:	2301      	movs	r3, #1
 8006432:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 8006438:	643b      	str	r3, [r7, #64]	@ 0x40
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8006440:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006442:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4619      	mov	r1, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7fb fa85 	bl	800195a <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8006450:	e02b      	b.n	80064aa <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8006452:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8006456:	f107 010c 	add.w	r1, r7, #12
 800645a:	2301      	movs	r3, #1
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f921 	bl	80066a4 <lfs_file_flushedread>
 8006462:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8006464:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006466:	2b00      	cmp	r3, #0
 8006468:	da01      	bge.n	800646e <lfs_file_flush+0xb2>
                    return res;
 800646a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800646c:	e06f      	b.n	800654e <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 800646e:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8006472:	2301      	movs	r3, #1
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fa1c 	bl	80068b4 <lfs_file_flushedwrite>
 800647c:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 800647e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006480:	2b00      	cmp	r3, #0
 8006482:	da01      	bge.n	8006488 <lfs_file_flush+0xcc>
                    return res;
 8006484:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006486:	e062      	b.n	800654e <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006490:	d00b      	beq.n	80064aa <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8006492:	f107 030c 	add.w	r3, r7, #12
 8006496:	3340      	adds	r3, #64	@ 0x40
 8006498:	4619      	mov	r1, r3
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7fb fa5d 	bl	800195a <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4619      	mov	r1, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7fb fa58 	bl	800195a <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d3cd      	bcc.n	8006452 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	2301      	movs	r3, #1
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7fb fc53 	bl	8001d6c <lfs_bd_flush>
 80064c6:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 80064c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d026      	beq.n	800651c <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 80064ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064d0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80064d4:	d001      	beq.n	80064da <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 80064d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064d8:	e039      	b.n	800654e <lfs_file_flush+0x192>
                        goto relocate;
 80064da:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006558 <lfs_file_flush+0x19c>)
 80064e2:	9200      	str	r2, [sp, #0]
 80064e4:	f640 522b 	movw	r2, #3371	@ 0xd2b
 80064e8:	491c      	ldr	r1, [pc, #112]	@ (800655c <lfs_file_flush+0x1a0>)
 80064ea:	481d      	ldr	r0, [pc, #116]	@ (8006560 <lfs_file_flush+0x1a4>)
 80064ec:	f002 faaa 	bl	8008a44 <iprintf>
                err = lfs_file_relocate(lfs, file);
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7ff fe66 	bl	80061c4 <lfs_file_relocate>
 80064f8:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 80064fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d0da      	beq.n	80064b6 <lfs_file_flush+0xfa>
                    return err;
 8006500:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006502:	e024      	b.n	800654e <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650c:	4619      	mov	r1, r3
 800650e:	4610      	mov	r0, r2
 8006510:	f7fb f95d 	bl	80017ce <lfs_max>
 8006514:	4602      	mov	r2, r0
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	635a      	str	r2, [r3, #52]	@ 0x34
 800651a:	e000      	b.n	800651e <lfs_file_flush+0x162>
                break;
 800651c:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006532:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800654a:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3774      	adds	r7, #116	@ 0x74
 8006552:	46bd      	mov	sp, r7
 8006554:	bd90      	pop	{r4, r7, pc}
 8006556:	bf00      	nop
 8006558:	0800993c 	.word	0x0800993c
 800655c:	0800982c 	.word	0x0800982c
 8006560:	080099bc 	.word	0x080099bc

08006564 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 8006564:	b580      	push	{r7, lr}
 8006566:	b090      	sub	sp, #64	@ 0x40
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006572:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 800657a:	2300      	movs	r3, #0
 800657c:	e08e      	b.n	800669c <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7ff ff1b 	bl	80063bc <lfs_file_flush>
 8006586:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 8006588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658a:	2b00      	cmp	r3, #0
 800658c:	d007      	beq.n	800659e <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006592:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 800659a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659c:	e07e      	b.n	800669c <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d077      	beq.n	800669a <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	3308      	adds	r3, #8
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fb fd7f 	bl	80020b2 <lfs_pair_isnull>
 80065b4:	4603      	mov	r3, r0
 80065b6:	f083 0301 	eor.w	r3, r3, #1
 80065ba:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d06c      	beq.n	800669a <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10d      	bne.n	80065e8 <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f103 0110 	add.w	r1, r3, #16
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	2300      	movs	r3, #0
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7fb fc42 	bl	8001e60 <lfs_bd_sync>
 80065dc:	6338      	str	r0, [r7, #48]	@ 0x30
            if (err) {
 80065de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <lfs_file_sync_+0x84>
                return err;
 80065e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e6:	e059      	b.n	800669c <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d009      	beq.n	8006608 <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 80065f4:	f240 2301 	movw	r3, #513	@ 0x201
 80065f8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065fe:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006604:	637b      	str	r3, [r7, #52]	@ 0x34
 8006606:	e014      	b.n	8006632 <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8006608:	f240 2302 	movw	r3, #514	@ 0x202
 800660c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006614:	3228      	adds	r2, #40	@ 0x28
 8006616:	e892 0003 	ldmia.w	r2, {r0, r1}
 800661a:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 800661e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006622:	4618      	mov	r0, r3
 8006624:	f7fb ffba 	bl	800259c <lfs_ctz_tole32>
            buffer = &ctz;
 8006628:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800662c:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 800662e:	2308      	movs	r3, #8
 8006630:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	f103 0108 	add.w	r1, r3, #8
 8006638:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800663a:	051a      	lsls	r2, r3, #20
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	889b      	ldrh	r3, [r3, #4]
 8006640:	029b      	lsls	r3, r3, #10
 8006642:	431a      	orrs	r2, r3
 8006644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006646:	4313      	orrs	r3, r2
 8006648:	61bb      	str	r3, [r7, #24]
 800664a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664c:	61fb      	str	r3, [r7, #28]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	889b      	ldrh	r3, [r3, #4]
 8006652:	029a      	lsls	r2, r3, #10
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	4313      	orrs	r3, r2
 800665c:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 8006660:	623b      	str	r3, [r7, #32]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	627b      	str	r3, [r7, #36]	@ 0x24
 800666a:	f107 0218 	add.w	r2, r7, #24
 800666e:	2302      	movs	r3, #2
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7ff f953 	bl	800591c <lfs_dir_commit>
 8006676:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8006678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667a:	2b00      	cmp	r3, #0
 800667c:	d007      	beq.n	800668e <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006682:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 800668a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668c:	e006      	b.n	800669c <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006692:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3740      	adds	r7, #64	@ 0x40
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80066a4:	b5b0      	push	{r4, r5, r7, lr}
 80066a6:	b090      	sub	sp, #64	@ 0x40
 80066a8:	af06      	add	r7, sp, #24
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
 80066b0:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d301      	bcc.n	80066ca <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	e0b7      	b.n	800683a <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	4619      	mov	r1, r3
 80066d6:	6838      	ldr	r0, [r7, #0]
 80066d8:	f7fb f889 	bl	80017ee <lfs_min>
 80066dc:	6038      	str	r0, [r7, #0]
    nsize = size;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 80066e2:	e0a5      	b.n	8006830 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d006      	beq.n	80066fe <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066f8:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d130      	bne.n	8006760 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006702:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d11c      	bne.n	8006744 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	3138      	adds	r1, #56	@ 0x38
 8006720:	68b8      	ldr	r0, [r7, #8]
 8006722:	303c      	adds	r0, #60	@ 0x3c
 8006724:	9003      	str	r0, [sp, #12]
 8006726:	9102      	str	r1, [sp, #8]
 8006728:	9201      	str	r2, [sp, #4]
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	462b      	mov	r3, r5
 800672e:	4622      	mov	r2, r4
 8006730:	2100      	movs	r1, #0
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7ff f94f 	bl	80059d6 <lfs_ctz_find>
 8006738:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d009      	beq.n	8006754 <lfs_file_flushedread+0xb0>
                    return err;
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	e07a      	b.n	800683a <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f06f 0201 	mvn.w	r2, #1
 800674a:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006758:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006764:	69da      	ldr	r2, [r3, #28]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	4619      	mov	r1, r3
 800676e:	6a38      	ldr	r0, [r7, #32]
 8006770:	f7fb f83d 	bl	80017ee <lfs_min>
 8006774:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d026      	beq.n	80067d0 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	f103 0408 	add.w	r4, r3, #8
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006792:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	889b      	ldrh	r3, [r3, #4]
 8006798:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 800679a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800679e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067a2:	68b9      	ldr	r1, [r7, #8]
 80067a4:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 80067a6:	69b8      	ldr	r0, [r7, #24]
 80067a8:	9005      	str	r0, [sp, #20]
 80067aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80067ac:	9004      	str	r0, [sp, #16]
 80067ae:	9103      	str	r1, [sp, #12]
 80067b0:	9302      	str	r3, [sp, #8]
 80067b2:	4b24      	ldr	r3, [pc, #144]	@ (8006844 <lfs_file_flushedread+0x1a0>)
 80067b4:	9301      	str	r3, [sp, #4]
 80067b6:	9200      	str	r2, [sp, #0]
 80067b8:	462b      	mov	r3, r5
 80067ba:	2200      	movs	r2, #0
 80067bc:	4621      	mov	r1, r4
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f7fc fa1f 	bl	8002c02 <lfs_dir_getread>
 80067c4:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d01d      	beq.n	8006808 <lfs_file_flushedread+0x164>
                return err;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	e034      	b.n	800683a <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067da:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80067e4:	69b9      	ldr	r1, [r7, #24]
 80067e6:	9103      	str	r1, [sp, #12]
 80067e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067ea:	9102      	str	r1, [sp, #8]
 80067ec:	9201      	str	r2, [sp, #4]
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	4623      	mov	r3, r4
 80067f2:	4602      	mov	r2, r0
 80067f4:	2100      	movs	r1, #0
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f7fb f8d4 	bl	80019a4 <lfs_bd_read>
 80067fc:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <lfs_file_flushedread+0x164>
                return err;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	e018      	b.n	800683a <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	441a      	add	r2, r3
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	441a      	add	r2, r3
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8006820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	4413      	add	r3, r2
 8006826:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 8006828:	6a3a      	ldr	r2, [r7, #32]
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	2b00      	cmp	r3, #0
 8006834:	f47f af56 	bne.w	80066e4 <lfs_file_flushedread+0x40>
    }

    return size;
 8006838:	683b      	ldr	r3, [r7, #0]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3728      	adds	r7, #40	@ 0x28
 800683e:	46bd      	mov	sp, r7
 8006840:	bdb0      	pop	{r4, r5, r7, pc}
 8006842:	bf00      	nop
 8006844:	fff7fc00 	.word	0xfff7fc00

08006848 <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d106      	bne.n	8006870 <lfs_file_read_+0x28>
 8006862:	4b11      	ldr	r3, [pc, #68]	@ (80068a8 <lfs_file_read_+0x60>)
 8006864:	4a11      	ldr	r2, [pc, #68]	@ (80068ac <lfs_file_read_+0x64>)
 8006866:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 800686a:	4811      	ldr	r0, [pc, #68]	@ (80068b0 <lfs_file_read_+0x68>)
 800686c:	f001 ff3a 	bl	80086e4 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d009      	beq.n	8006890 <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 800687c:	68b9      	ldr	r1, [r7, #8]
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f7ff fd9c 	bl	80063bc <lfs_file_flush>
 8006884:	6178      	str	r0, [r7, #20]
        if (err) {
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <lfs_file_read_+0x48>
            return err;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	e006      	b.n	800689e <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	68b9      	ldr	r1, [r7, #8]
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f7ff ff04 	bl	80066a4 <lfs_file_flushedread>
 800689c:	4603      	mov	r3, r0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	08009b64 	.word	0x08009b64
 80068ac:	0800a530 	.word	0x0800a530
 80068b0:	0800982c 	.word	0x0800982c

080068b4 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80068b4:	b5b0      	push	{r4, r5, r7, lr}
 80068b6:	b090      	sub	sp, #64	@ 0x40
 80068b8:	af04      	add	r7, sp, #16
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 80f4 	beq.w	8006ac0 <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068de:	441a      	add	r2, r3
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e4:	4619      	mov	r1, r3
 80068e6:	4610      	mov	r0, r2
 80068e8:	f7fa ff71 	bl	80017ce <lfs_max>
 80068ec:	4602      	mov	r2, r0
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 80068f2:	429a      	cmp	r2, r3
 80068f4:	f240 80e4 	bls.w	8006ac0 <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 80068f8:	68b9      	ldr	r1, [r7, #8]
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f7ff fd3c 	bl	8006378 <lfs_file_outline>
 8006900:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 80db 	beq.w	8006ac0 <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800690e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8006916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006918:	e0d7      	b.n	8006aca <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800691e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d006      	beq.n	8006934 <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800692e:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8006930:	429a      	cmp	r2, r3
 8006932:	d16d      	bne.n	8006a10 <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006938:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d159      	bne.n	80069f4 <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d12f      	bne.n	80069ac <lfs_file_flushedwrite+0xf8>
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006950:	2b00      	cmp	r3, #0
 8006952:	d02b      	beq.n	80069ac <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8006966:	3a01      	subs	r2, #1
 8006968:	68b9      	ldr	r1, [r7, #8]
 800696a:	3138      	adds	r1, #56	@ 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 800696c:	2000      	movs	r0, #0
 800696e:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8006970:	f107 0010 	add.w	r0, r7, #16
 8006974:	9003      	str	r0, [sp, #12]
 8006976:	9102      	str	r1, [sp, #8]
 8006978:	9201      	str	r2, [sp, #4]
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	462b      	mov	r3, r5
 800697e:	4622      	mov	r2, r4
 8006980:	2100      	movs	r1, #0
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f7ff f827 	bl	80059d6 <lfs_ctz_find>
 8006988:	6238      	str	r0, [r7, #32]
                    if (err) {
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d007      	beq.n	80069a0 <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006994:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	e094      	b.n	8006aca <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	3340      	adds	r3, #64	@ 0x40
 80069a4:	4619      	mov	r1, r3
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f7fa ffe6 	bl	8001978 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f7fb fef8 	bl	80027a2 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80069b8:	68fc      	ldr	r4, [r7, #12]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	3238      	adds	r2, #56	@ 0x38
 80069c6:	68b9      	ldr	r1, [r7, #8]
 80069c8:	313c      	adds	r1, #60	@ 0x3c
 80069ca:	9102      	str	r1, [sp, #8]
 80069cc:	9201      	str	r2, [sp, #4]
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	462b      	mov	r3, r5
 80069d2:	4622      	mov	r2, r4
 80069d4:	4601      	mov	r1, r0
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f7ff f868 	bl	8005aac <lfs_ctz_extend>
 80069dc:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00f      	beq.n	8006a04 <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	e06a      	b.n	8006aca <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f06f 0201 	mvn.w	r2, #1
 80069fa:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a08:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a14:	69da      	ldr	r2, [r3, #28]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a20:	f7fa fee5 	bl	80017ee <lfs_min>
 8006a24:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8006a2c:	68fc      	ldr	r4, [r7, #12]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a36:	69b9      	ldr	r1, [r7, #24]
 8006a38:	9103      	str	r1, [sp, #12]
 8006a3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a3c:	9102      	str	r1, [sp, #8]
 8006a3e:	9201      	str	r2, [sp, #4]
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	2301      	movs	r3, #1
 8006a44:	4622      	mov	r2, r4
 8006a46:	4601      	mov	r1, r0
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f7fb fa3d 	bl	8001ec8 <lfs_bd_prog>
 8006a4e:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d01c      	beq.n	8006a90 <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006a5c:	d007      	beq.n	8006a6e <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a62:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	e02d      	b.n	8006aca <lfs_file_flushedwrite+0x216>
                    goto relocate;
 8006a6e:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8006a70:	68b9      	ldr	r1, [r7, #8]
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f7ff fba6 	bl	80061c4 <lfs_file_relocate>
 8006a78:	6178      	str	r0, [r7, #20]
            if (err) {
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d0d2      	beq.n	8006a26 <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a84:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	e01c      	b.n	8006aca <lfs_file_flushedwrite+0x216>
            break;
 8006a90:	bf00      	nop
            }
        }

        file->pos += diff;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	441a      	add	r2, r3
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	441a      	add	r2, r3
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8006aaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	4413      	add	r3, r2
 8006ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 8006ab2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ckpoint(lfs);
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f7fb fe71 	bl	80027a2 <lfs_alloc_ckpoint>
    while (nsize > 0) {
 8006ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f47f af29 	bne.w	800691a <lfs_file_flushedwrite+0x66>
    }

    return size;
 8006ac8:	683b      	ldr	r3, [r7, #0]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3730      	adds	r7, #48	@ 0x30
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006ad4 <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08a      	sub	sp, #40	@ 0x28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d106      	bne.n	8006afc <lfs_file_write_+0x28>
 8006aee:	4b38      	ldr	r3, [pc, #224]	@ (8006bd0 <lfs_file_write_+0xfc>)
 8006af0:	4a38      	ldr	r2, [pc, #224]	@ (8006bd4 <lfs_file_write_+0x100>)
 8006af2:	f640 6126 	movw	r1, #3622	@ 0xe26
 8006af6:	4838      	ldr	r0, [pc, #224]	@ (8006bd8 <lfs_file_write_+0x104>)
 8006af8:	f001 fdf4 	bl	80086e4 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d009      	beq.n	8006b1c <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7ff fc56 	bl	80063bc <lfs_file_flush>
 8006b10:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8006b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <lfs_file_write_+0x48>
            return err;
 8006b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1a:	e055      	b.n	8006bc8 <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d009      	beq.n	8006b3c <lfs_file_write_+0x68>
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d203      	bcs.n	8006b3c <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	441a      	add	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d902      	bls.n	8006b52 <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8006b4c:	f06f 031a 	mvn.w	r3, #26
 8006b50:	e03a      	b.n	8006bc8 <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d121      	bne.n	8006ba2 <lfs_file_write_+0xce>
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d91b      	bls.n	8006ba2 <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b6e:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	635a      	str	r2, [r3, #52]	@ 0x34

        while (file->pos < pos) {
 8006b78:	e00e      	b.n	8006b98 <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	75fb      	strb	r3, [r7, #23]
 8006b7e:	f107 0217 	add.w	r2, r7, #23
 8006b82:	2301      	movs	r3, #1
 8006b84:	68b9      	ldr	r1, [r7, #8]
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f7ff fe94 	bl	80068b4 <lfs_file_flushedwrite>
 8006b8c:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	da01      	bge.n	8006b98 <lfs_file_write_+0xc4>
                return res;
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	e017      	b.n	8006bc8 <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b9c:	6a3a      	ldr	r2, [r7, #32]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d8eb      	bhi.n	8006b7a <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	68b9      	ldr	r1, [r7, #8]
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f7ff fe83 	bl	80068b4 <lfs_file_flushedwrite>
 8006bae:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	da01      	bge.n	8006bba <lfs_file_write_+0xe6>
        return nsize;
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	e006      	b.n	8006bc8 <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bbe:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	631a      	str	r2, [r3, #48]	@ 0x30
    return nsize;
 8006bc6:	69bb      	ldr	r3, [r7, #24]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3728      	adds	r7, #40	@ 0x28
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	08009b94 	.word	0x08009b94
 8006bd4:	0800a540 	.word	0x0800a540
 8006bd8:	0800982c 	.word	0x0800982c

08006bdc <lfs_file_seek_>:
#endif

static lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08c      	sub	sp, #48	@ 0x30
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
 8006be8:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (whence == LFS_SEEK_SET) {
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d102      	bne.n	8006bfc <lfs_file_seek_+0x20>
        npos = off;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bfa:	e025      	b.n	8006c48 <lfs_file_seek_+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d10f      	bne.n	8006c22 <lfs_file_seek_+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c06:	461a      	mov	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	da02      	bge.n	8006c16 <lfs_file_seek_+0x3a>
            return LFS_ERR_INVAL;
 8006c10:	f06f 0315 	mvn.w	r3, #21
 8006c14:	e067      	b.n	8006ce6 <lfs_file_seek_+0x10a>
        } else {
            npos = file->pos + off;
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c20:	e012      	b.n	8006c48 <lfs_file_seek_+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d10f      	bne.n	8006c48 <lfs_file_seek_+0x6c>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 f875 	bl	8006d1a <lfs_file_size_>
 8006c30:	4602      	mov	r2, r0
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4413      	add	r3, r2
 8006c36:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (res < 0) {
 8006c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	da02      	bge.n	8006c44 <lfs_file_seek_+0x68>
            return LFS_ERR_INVAL;
 8006c3e:	f06f 0315 	mvn.w	r3, #21
 8006c42:	e050      	b.n	8006ce6 <lfs_file_seek_+0x10a>
        } else {
            npos = res;
 8006c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d902      	bls.n	8006c58 <lfs_file_seek_+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8006c52:	f06f 0315 	mvn.w	r3, #21
 8006c56:	e046      	b.n	8006ce6 <lfs_file_seek_+0x10a>
    }

    if (file->pos == npos) {
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d101      	bne.n	8006c66 <lfs_file_seek_+0x8a>
        // noop - position has not changed
        return npos;
 8006c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c64:	e03f      	b.n	8006ce6 <lfs_file_seek_+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
    if (
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d12b      	bne.n	8006cca <lfs_file_seek_+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c76:	61bb      	str	r3, [r7, #24]
 8006c78:	f107 0318 	add.w	r3, r7, #24
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f7fe fe71 	bl	8005966 <lfs_ctz_index>
 8006c84:	6278      	str	r0, [r7, #36]	@ 0x24
        lfs_off_t noff = npos;
 8006c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c88:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8006c8a:	f107 0314 	add.w	r3, r7, #20
 8006c8e:	4619      	mov	r1, r3
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f7fe fe68 	bl	8005966 <lfs_ctz_index>
 8006c96:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8006c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d114      	bne.n	8006cca <lfs_file_seek_+0xee>
                && noff >= file->cache.off
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d80f      	bhi.n	8006cca <lfs_file_seek_+0xee>
                && noff < file->cache.off + file->cache.size) {
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cb2:	441a      	add	r2, r3
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d907      	bls.n	8006cca <lfs_file_seek_+0xee>
            file->pos = npos;
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cbe:	635a      	str	r2, [r3, #52]	@ 0x34
            file->off = noff;
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	63da      	str	r2, [r3, #60]	@ 0x3c
            return npos;
 8006cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc8:	e00d      	b.n	8006ce6 <lfs_file_seek_+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8006cca:	68b9      	ldr	r1, [r7, #8]
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f7ff fb75 	bl	80063bc <lfs_file_flush>
 8006cd2:	61f8      	str	r0, [r7, #28]
    if (err) {
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <lfs_file_seek_+0x102>
        return err;
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	e003      	b.n	8006ce6 <lfs_file_seek_+0x10a>
    }

    // update pos
    file->pos = npos;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ce2:	635a      	str	r2, [r3, #52]	@ 0x34
    return npos;
 8006ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3730      	adds	r7, #48	@ 0x30
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <lfs_file_rewind_>:
static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}

static int lfs_file_rewind_(lfs_t *lfs, lfs_file_t *file) {
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	6039      	str	r1, [r7, #0]
    lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff ff6c 	bl	8006bdc <lfs_file_seek_>
 8006d04:	60f8      	str	r0, [r7, #12]
    if (res < 0) {
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	da01      	bge.n	8006d10 <lfs_file_rewind_+0x22>
        return (int)res;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	e000      	b.n	8006d12 <lfs_file_rewind_+0x24>
    }

    return 0;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <lfs_file_size_>:

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b082      	sub	sp, #8
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d009      	beq.n	8006d44 <lfs_file_size_+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	f7fa fd47 	bl	80017ce <lfs_max>
 8006d40:	4603      	mov	r3, r0
 8006d42:	e001      	b.n	8006d48 <lfs_file_size_+0x2e>
    }
#endif

    return file->ctz.size;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8006d50:	b590      	push	{r4, r7, lr}
 8006d52:	b08d      	sub	sp, #52	@ 0x34
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	669a      	str	r2, [r3, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	6a1a      	ldr	r2, [r3, #32]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	66da      	str	r2, [r3, #108]	@ 0x6c
    int err = 0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d106      	bne.n	8006d84 <lfs_init+0x34>
 8006d76:	4b96      	ldr	r3, [pc, #600]	@ (8006fd0 <lfs_init+0x280>)
 8006d78:	4a96      	ldr	r2, [pc, #600]	@ (8006fd4 <lfs_init+0x284>)
 8006d7a:	f241 0152 	movw	r1, #4178	@ 0x1052
 8006d7e:	4896      	ldr	r0, [pc, #600]	@ (8006fd8 <lfs_init+0x288>)
 8006d80:	f001 fcb0 	bl	80086e4 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d106      	bne.n	8006d9c <lfs_init+0x4c>
 8006d8e:	4b93      	ldr	r3, [pc, #588]	@ (8006fdc <lfs_init+0x28c>)
 8006d90:	4a90      	ldr	r2, [pc, #576]	@ (8006fd4 <lfs_init+0x284>)
 8006d92:	f241 0153 	movw	r1, #4179	@ 0x1053
 8006d96:	4890      	ldr	r0, [pc, #576]	@ (8006fd8 <lfs_init+0x288>)
 8006d98:	f001 fca4 	bl	80086e4 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d106      	bne.n	8006db4 <lfs_init+0x64>
 8006da6:	4b8e      	ldr	r3, [pc, #568]	@ (8006fe0 <lfs_init+0x290>)
 8006da8:	4a8a      	ldr	r2, [pc, #552]	@ (8006fd4 <lfs_init+0x284>)
 8006daa:	f241 0154 	movw	r1, #4180	@ 0x1054
 8006dae:	488a      	ldr	r0, [pc, #552]	@ (8006fd8 <lfs_init+0x288>)
 8006db0:	f001 fc98 	bl	80086e4 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006dbe:	6952      	ldr	r2, [r2, #20]
 8006dc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dc4:	fb01 f202 	mul.w	r2, r1, r2
 8006dc8:	1a9b      	subs	r3, r3, r2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d006      	beq.n	8006ddc <lfs_init+0x8c>
 8006dce:	4b85      	ldr	r3, [pc, #532]	@ (8006fe4 <lfs_init+0x294>)
 8006dd0:	4a80      	ldr	r2, [pc, #512]	@ (8006fd4 <lfs_init+0x284>)
 8006dd2:	f241 0158 	movw	r1, #4184	@ 0x1058
 8006dd6:	4880      	ldr	r0, [pc, #512]	@ (8006fd8 <lfs_init+0x288>)
 8006dd8:	f001 fc84 	bl	80086e4 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006de6:	6992      	ldr	r2, [r2, #24]
 8006de8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dec:	fb01 f202 	mul.w	r2, r1, r2
 8006df0:	1a9b      	subs	r3, r3, r2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d006      	beq.n	8006e04 <lfs_init+0xb4>
 8006df6:	4b7c      	ldr	r3, [pc, #496]	@ (8006fe8 <lfs_init+0x298>)
 8006df8:	4a76      	ldr	r2, [pc, #472]	@ (8006fd4 <lfs_init+0x284>)
 8006dfa:	f241 0159 	movw	r1, #4185	@ 0x1059
 8006dfe:	4876      	ldr	r0, [pc, #472]	@ (8006fd8 <lfs_init+0x288>)
 8006e00:	f001 fc70 	bl	80086e4 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006e0e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006e10:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e14:	fb01 f202 	mul.w	r2, r1, r2
 8006e18:	1a9b      	subs	r3, r3, r2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d006      	beq.n	8006e2c <lfs_init+0xdc>
 8006e1e:	4b73      	ldr	r3, [pc, #460]	@ (8006fec <lfs_init+0x29c>)
 8006e20:	4a6c      	ldr	r2, [pc, #432]	@ (8006fd4 <lfs_init+0x284>)
 8006e22:	f241 015a 	movw	r1, #4186	@ 0x105a
 8006e26:	486c      	ldr	r0, [pc, #432]	@ (8006fd8 <lfs_init+0x288>)
 8006e28:	f001 fc5c 	bl	80086e4 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e34:	d806      	bhi.n	8006e44 <lfs_init+0xf4>
 8006e36:	4b6e      	ldr	r3, [pc, #440]	@ (8006ff0 <lfs_init+0x2a0>)
 8006e38:	4a66      	ldr	r2, [pc, #408]	@ (8006fd4 <lfs_init+0x284>)
 8006e3a:	f241 015d 	movw	r1, #4189	@ 0x105d
 8006e3e:	4866      	ldr	r0, [pc, #408]	@ (8006fd8 <lfs_init+0x288>)
 8006e40:	f001 fc50 	bl	80086e4 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	3b08      	subs	r3, #8
 8006e4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fa fd01 	bl	800185c <lfs_npw2>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	009a      	lsls	r2, r3, #2
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d906      	bls.n	8006e76 <lfs_init+0x126>
 8006e68:	4b62      	ldr	r3, [pc, #392]	@ (8006ff4 <lfs_init+0x2a4>)
 8006e6a:	4a5a      	ldr	r2, [pc, #360]	@ (8006fd4 <lfs_init+0x284>)
 8006e6c:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8006e70:	4859      	ldr	r0, [pc, #356]	@ (8006fd8 <lfs_init+0x288>)
 8006e72:	f001 fc37 	bl	80086e4 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d106      	bne.n	8006e8e <lfs_init+0x13e>
 8006e80:	4b5d      	ldr	r3, [pc, #372]	@ (8006ff8 <lfs_init+0x2a8>)
 8006e82:	4a54      	ldr	r2, [pc, #336]	@ (8006fd4 <lfs_init+0x284>)
 8006e84:	f241 0169 	movw	r1, #4201	@ 0x1069
 8006e88:	4853      	ldr	r0, [pc, #332]	@ (8006fd8 <lfs_init+0x288>)
 8006e8a:	f001 fc2b 	bl	80086e4 <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00f      	beq.n	8006eb8 <lfs_init+0x168>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	085b      	lsrs	r3, r3, #1
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d206      	bcs.n	8006eb8 <lfs_init+0x168>
 8006eaa:	4b54      	ldr	r3, [pc, #336]	@ (8006ffc <lfs_init+0x2ac>)
 8006eac:	4a49      	ldr	r2, [pc, #292]	@ (8006fd4 <lfs_init+0x284>)
 8006eae:	f241 016f 	movw	r1, #4207	@ 0x106f
 8006eb2:	4849      	ldr	r0, [pc, #292]	@ (8006fd8 <lfs_init+0x288>)
 8006eb4:	f001 fc16 	bl	80086e4 <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ec2:	d00e      	beq.n	8006ee2 <lfs_init+0x192>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d906      	bls.n	8006ee2 <lfs_init+0x192>
 8006ed4:	4b4a      	ldr	r3, [pc, #296]	@ (8007000 <lfs_init+0x2b0>)
 8006ed6:	4a3f      	ldr	r2, [pc, #252]	@ (8006fd4 <lfs_init+0x284>)
 8006ed8:	f241 0171 	movw	r1, #4209	@ 0x1071
 8006edc:	483e      	ldr	r0, [pc, #248]	@ (8006fd8 <lfs_init+0x288>)
 8006ede:	f001 fc01 	bl	80086e4 <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d005      	beq.n	8006ef8 <lfs_init+0x1a8>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ef0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	60da      	str	r2, [r3, #12]
 8006ef6:	e010      	b.n	8006f1a <lfs_init+0x1ca>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fa fd14 	bl	800192c <lfs_malloc>
 8006f04:	4602      	mov	r2, r0
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d103      	bne.n	8006f1a <lfs_init+0x1ca>
            err = LFS_ERR_NOMEM;
 8006f12:	f06f 030b 	mvn.w	r3, #11
 8006f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8006f18:	e163      	b.n	80071e2 <lfs_init+0x492>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d005      	beq.n	8006f30 <lfs_init+0x1e0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	61da      	str	r2, [r3, #28]
 8006f2e:	e010      	b.n	8006f52 <lfs_init+0x202>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fa fcf8 	bl	800192c <lfs_malloc>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d103      	bne.n	8006f52 <lfs_init+0x202>
            err = LFS_ERR_NOMEM;
 8006f4a:	f06f 030b 	mvn.w	r3, #11
 8006f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8006f50:	e147      	b.n	80071e2 <lfs_init+0x492>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7fa fd0e 	bl	8001978 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3310      	adds	r3, #16
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7fa fd08 	bl	8001978 <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d106      	bne.n	8006f80 <lfs_init+0x230>
 8006f72:	4b24      	ldr	r3, [pc, #144]	@ (8007004 <lfs_init+0x2b4>)
 8006f74:	4a17      	ldr	r2, [pc, #92]	@ (8006fd4 <lfs_init+0x284>)
 8006f76:	f241 0190 	movw	r1, #4240	@ 0x1090
 8006f7a:	4817      	ldr	r0, [pc, #92]	@ (8006fd8 <lfs_init+0x288>)
 8006f7c:	f001 fbb2 	bl	80086e4 <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d005      	beq.n	8006f96 <lfs_init+0x246>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	665a      	str	r2, [r3, #100]	@ 0x64
 8006f94:	e010      	b.n	8006fb8 <lfs_init+0x268>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fa fcc5 	bl	800192c <lfs_malloc>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d103      	bne.n	8006fb8 <lfs_init+0x268>
            err = LFS_ERR_NOMEM;
 8006fb0:	f06f 030b 	mvn.w	r3, #11
 8006fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8006fb6:	e114      	b.n	80071e2 <lfs_init+0x492>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fbe:	2bff      	cmp	r3, #255	@ 0xff
 8006fc0:	d924      	bls.n	800700c <lfs_init+0x2bc>
 8006fc2:	4b11      	ldr	r3, [pc, #68]	@ (8007008 <lfs_init+0x2b8>)
 8006fc4:	4a03      	ldr	r2, [pc, #12]	@ (8006fd4 <lfs_init+0x284>)
 8006fc6:	f241 019c 	movw	r1, #4252	@ 0x109c
 8006fca:	4803      	ldr	r0, [pc, #12]	@ (8006fd8 <lfs_init+0x288>)
 8006fcc:	f001 fb8a 	bl	80086e4 <__assert_func>
 8006fd0:	08009bc4 	.word	0x08009bc4
 8006fd4:	0800a550 	.word	0x0800a550
 8006fd8:	0800982c 	.word	0x0800982c
 8006fdc:	08009be0 	.word	0x08009be0
 8006fe0:	08009bfc 	.word	0x08009bfc
 8006fe4:	08009c18 	.word	0x08009c18
 8006fe8:	08009c48 	.word	0x08009c48
 8006fec:	08009c78 	.word	0x08009c78
 8006ff0:	08009cac 	.word	0x08009cac
 8006ff4:	08009cc8 	.word	0x08009cc8
 8006ff8:	08009d14 	.word	0x08009d14
 8006ffc:	08009d30 	.word	0x08009d30
 8007000:	08009d84 	.word	0x08009d84
 8007004:	08009de4 	.word	0x08009de4
 8007008:	08009e04 	.word	0x08009e04
    lfs->name_max = lfs->cfg->name_max;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007010:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->name_max) {
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800701a:	2b00      	cmp	r3, #0
 800701c:	d102      	bne.n	8007024 <lfs_init+0x2d4>
        lfs->name_max = LFS_NAME_MAX;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	22ff      	movs	r2, #255	@ 0xff
 8007022:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800702a:	2b00      	cmp	r3, #0
 800702c:	da06      	bge.n	800703c <lfs_init+0x2ec>
 800702e:	4b71      	ldr	r3, [pc, #452]	@ (80071f4 <lfs_init+0x4a4>)
 8007030:	4a71      	ldr	r2, [pc, #452]	@ (80071f8 <lfs_init+0x4a8>)
 8007032:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 8007036:	4871      	ldr	r0, [pc, #452]	@ (80071fc <lfs_init+0x4ac>)
 8007038:	f001 fb54 	bl	80086e4 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007040:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->file_max) {
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800704a:	2b00      	cmp	r3, #0
 800704c:	d103      	bne.n	8007056 <lfs_init+0x306>
        lfs->file_max = LFS_FILE_MAX;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8007054:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800705a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800705c:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8007060:	4293      	cmp	r3, r2
 8007062:	d906      	bls.n	8007072 <lfs_init+0x322>
 8007064:	4b66      	ldr	r3, [pc, #408]	@ (8007200 <lfs_init+0x4b0>)
 8007066:	4a64      	ldr	r2, [pc, #400]	@ (80071f8 <lfs_init+0x4a8>)
 8007068:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 800706c:	4863      	ldr	r0, [pc, #396]	@ (80071fc <lfs_init+0x4ac>)
 800706e:	f001 fb39 	bl	80086e4 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007076:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	679a      	str	r2, [r3, #120]	@ 0x78
    if (!lfs->attr_max) {
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007080:	2b00      	cmp	r3, #0
 8007082:	d103      	bne.n	800708c <lfs_init+0x33c>
        lfs->attr_max = LFS_ATTR_MAX;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800708a:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007090:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	429a      	cmp	r2, r3
 800709a:	d906      	bls.n	80070aa <lfs_init+0x35a>
 800709c:	4b59      	ldr	r3, [pc, #356]	@ (8007204 <lfs_init+0x4b4>)
 800709e:	4a56      	ldr	r2, [pc, #344]	@ (80071f8 <lfs_init+0x4a8>)
 80070a0:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 80070a4:	4855      	ldr	r0, [pc, #340]	@ (80071fc <lfs_init+0x4ac>)
 80070a6:	f001 fb1d 	bl	80086e4 <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070b4:	d00e      	beq.n	80070d4 <lfs_init+0x384>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d906      	bls.n	80070d4 <lfs_init+0x384>
 80070c6:	4b50      	ldr	r3, [pc, #320]	@ (8007208 <lfs_init+0x4b8>)
 80070c8:	4a4b      	ldr	r2, [pc, #300]	@ (80071f8 <lfs_init+0x4a8>)
 80070ca:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 80070ce:	484b      	ldr	r0, [pc, #300]	@ (80071fc <lfs_init+0x4ac>)
 80070d0:	f001 fb08 	bl	80086e4 <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070de:	d00d      	beq.n	80070fc <lfs_init+0x3ac>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d906      	bls.n	80070fc <lfs_init+0x3ac>
 80070ee:	4b47      	ldr	r3, [pc, #284]	@ (800720c <lfs_init+0x4bc>)
 80070f0:	4a41      	ldr	r2, [pc, #260]	@ (80071f8 <lfs_init+0x4a8>)
 80070f2:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 80070f6:	4841      	ldr	r0, [pc, #260]	@ (80071fc <lfs_init+0x4ac>)
 80070f8:	f001 faf4 	bl	80086e4 <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007102:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007106:	d019      	beq.n	800713c <lfs_init+0x3ec>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800710c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007114:	2b00      	cmp	r3, #0
 8007116:	d004      	beq.n	8007122 <lfs_init+0x3d2>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800711c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800711e:	08db      	lsrs	r3, r3, #3
 8007120:	e003      	b.n	800712a <lfs_init+0x3da>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007126:	69db      	ldr	r3, [r3, #28]
 8007128:	08db      	lsrs	r3, r3, #3
 800712a:	4293      	cmp	r3, r2
 800712c:	d206      	bcs.n	800713c <lfs_init+0x3ec>
 800712e:	4b38      	ldr	r3, [pc, #224]	@ (8007210 <lfs_init+0x4c0>)
 8007130:	4a31      	ldr	r2, [pc, #196]	@ (80071f8 <lfs_init+0x4a8>)
 8007132:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8007136:	4831      	ldr	r0, [pc, #196]	@ (80071fc <lfs_init+0x4ac>)
 8007138:	f001 fad4 	bl	80086e4 <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007140:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800714a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800714e:	d103      	bne.n	8007158 <lfs_init+0x408>
        lfs->inline_max = 0;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	67da      	str	r2, [r3, #124]	@ 0x7c
 8007156:	e022      	b.n	800719e <lfs_init+0x44e>
    } else if (lfs->inline_max == 0) {
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800715c:	2b00      	cmp	r3, #0
 800715e:	d11e      	bne.n	800719e <lfs_init+0x44e>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007164:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
        lfs->inline_max = lfs_min(
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800716e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 8007170:	2b00      	cmp	r3, #0
 8007172:	d004      	beq.n	800717e <lfs_init+0x42e>
                        ? lfs->cfg->metadata_max
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 800717a:	08db      	lsrs	r3, r3, #3
 800717c:	e003      	b.n	8007186 <lfs_init+0x436>
                        : lfs->cfg->block_size)/8));
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007182:	69db      	ldr	r3, [r3, #28]
        lfs->inline_max = lfs_min(
 8007184:	08db      	lsrs	r3, r3, #3
 8007186:	4619      	mov	r1, r3
 8007188:	4610      	mov	r0, r2
 800718a:	f7fa fb30 	bl	80017ee <lfs_min>
 800718e:	4603      	mov	r3, r0
 8007190:	4619      	mov	r1, r3
 8007192:	4620      	mov	r0, r4
 8007194:	f7fa fb2b 	bl	80017ee <lfs_min>
 8007198:	4602      	mov	r2, r0
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071a4:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071ac:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	333c      	adds	r3, #60	@ 0x3c
 80071be:	2200      	movs	r2, #0
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	605a      	str	r2, [r3, #4]
 80071c4:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3330      	adds	r3, #48	@ 0x30
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	605a      	str	r2, [r3, #4]
 80071d0:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	3348      	adds	r3, #72	@ 0x48
 80071d6:	2200      	movs	r2, #0
 80071d8:	601a      	str	r2, [r3, #0]
 80071da:	605a      	str	r2, [r3, #4]
 80071dc:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	e003      	b.n	80071ea <lfs_init+0x49a>

cleanup:
    lfs_deinit(lfs);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f816 	bl	8007214 <lfs_deinit>
    return err;
 80071e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3734      	adds	r7, #52	@ 0x34
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd90      	pop	{r4, r7, pc}
 80071f2:	bf00      	nop
 80071f4:	08009e20 	.word	0x08009e20
 80071f8:	0800a550 	.word	0x0800a550
 80071fc:	0800982c 	.word	0x0800982c
 8007200:	08009e44 	.word	0x08009e44
 8007204:	08009e60 	.word	0x08009e60
 8007208:	08009e90 	.word	0x08009e90
 800720c:	08009ee8 	.word	0x08009ee8
 8007210:	08009f38 	.word	0x08009f38

08007214 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007222:	2b00      	cmp	r3, #0
 8007224:	d104      	bne.n	8007230 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	4618      	mov	r0, r3
 800722c:	f7fa fb8a 	bl	8001944 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007236:	2b00      	cmp	r3, #0
 8007238:	d104      	bne.n	8007244 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	4618      	mov	r0, r3
 8007240:	f7fa fb80 	bl	8001944 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800724a:	2b00      	cmp	r3, #0
 800724c:	d104      	bne.n	8007258 <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007252:	4618      	mov	r0, r3
 8007254:	f7fa fb76 	bl	8001944 <lfs_free>
    }

    return 0;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 8007264:	b580      	push	{r7, lr}
 8007266:	b0a0      	sub	sp, #128	@ 0x80
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
    int err = 0;
 800726e:	2300      	movs	r3, #0
 8007270:	67fb      	str	r3, [r7, #124]	@ 0x7c
    {
        err = lfs_init(lfs, cfg);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7ff fd6b 	bl	8006d50 <lfs_init>
 800727a:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 800727c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <lfs_format_+0x22>
            return err;
 8007282:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007284:	e08d      	b.n	80073a2 <lfs_format_+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d106      	bne.n	800729c <lfs_format_+0x38>
 800728e:	4b47      	ldr	r3, [pc, #284]	@ (80073ac <lfs_format_+0x148>)
 8007290:	4a47      	ldr	r2, [pc, #284]	@ (80073b0 <lfs_format_+0x14c>)
 8007292:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 8007296:	4847      	ldr	r0, [pc, #284]	@ (80073b4 <lfs_format_+0x150>)
 8007298:	f001 fa24 	bl	80086e4 <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a6:	461a      	mov	r2, r3
 80072a8:	2100      	movs	r1, #0
 80072aa:	f001 fbed 	bl	8008a88 <memset>
        lfs->lookahead.start = 0;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ba:	00da      	lsls	r2, r3, #3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072c0:	4619      	mov	r1, r3
 80072c2:	4610      	mov	r0, r2
 80072c4:	f7fa fa93 	bl	80017ee <lfs_min>
 80072c8:	4602      	mov	r2, r0
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	659a      	str	r2, [r3, #88]	@ 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	65da      	str	r2, [r3, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7fb fa64 	bl	80027a2 <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 80072da:	f107 030c 	add.w	r3, r7, #12
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f7fd f931 	bl	8004548 <lfs_dir_alloc>
 80072e6:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 80072e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d150      	bne.n	8007390 <lfs_format_+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7fb fa2e 	bl	8002750 <lfs_fs_disk_version>
 80072f4:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 80072f6:	667b      	str	r3, [r7, #100]	@ 0x64
            .block_size  = lfs->cfg->block_size,
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072fc:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 80072fe:	66bb      	str	r3, [r7, #104]	@ 0x68
            .block_count = lfs->block_count,
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 8007304:	66fb      	str	r3, [r7, #108]	@ 0x6c
            .name_max    = lfs->name_max,
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
        lfs_superblock_t superblock = {
 800730a:	673b      	str	r3, [r7, #112]	@ 0x70
            .file_max    = lfs->file_max,
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        lfs_superblock_t superblock = {
 8007310:	677b      	str	r3, [r7, #116]	@ 0x74
            .attr_max    = lfs->attr_max,
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
        lfs_superblock_t superblock = {
 8007316:	67bb      	str	r3, [r7, #120]	@ 0x78
        };

        lfs_superblock_tole32(&superblock);
 8007318:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800731c:	4618      	mov	r0, r3
 800731e:	f7fb f98d 	bl	800263c <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8007322:	4b25      	ldr	r3, [pc, #148]	@ (80073b8 <lfs_format_+0x154>)
 8007324:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007326:	2300      	movs	r3, #0
 8007328:	653b      	str	r3, [r7, #80]	@ 0x50
 800732a:	4b24      	ldr	r3, [pc, #144]	@ (80073bc <lfs_format_+0x158>)
 800732c:	657b      	str	r3, [r7, #84]	@ 0x54
 800732e:	4b24      	ldr	r3, [pc, #144]	@ (80073c0 <lfs_format_+0x15c>)
 8007330:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007332:	4b24      	ldr	r3, [pc, #144]	@ (80073c4 <lfs_format_+0x160>)
 8007334:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007336:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800733a:	663b      	str	r3, [r7, #96]	@ 0x60
 800733c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8007340:	f107 010c 	add.w	r1, r7, #12
 8007344:	2303      	movs	r3, #3
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7fe fae8 	bl	800591c <lfs_dir_commit>
 800734c:	67f8      	str	r0, [r7, #124]	@ 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 800734e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007350:	2b00      	cmp	r3, #0
 8007352:	d11f      	bne.n	8007394 <lfs_format_+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8007354:	2300      	movs	r3, #0
 8007356:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 800735a:	f107 010c 	add.w	r1, r7, #12
 800735e:	2300      	movs	r3, #0
 8007360:	2200      	movs	r2, #0
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7fe fada 	bl	800591c <lfs_dir_commit>
 8007368:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 800736a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800736c:	2b00      	cmp	r3, #0
 800736e:	d113      	bne.n	8007398 <lfs_format_+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8007370:	2300      	movs	r3, #0
 8007372:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007374:	2301      	movs	r3, #1
 8007376:	633b      	str	r3, [r7, #48]	@ 0x30
 8007378:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800737c:	f107 030c 	add.w	r3, r7, #12
 8007380:	4619      	mov	r1, r3
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7fc fd28 	bl	8003dd8 <lfs_dir_fetch>
 8007388:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 800738a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800738c:	2b00      	cmp	r3, #0
 800738e:	e004      	b.n	800739a <lfs_format_+0x136>
            goto cleanup;
 8007390:	bf00      	nop
 8007392:	e002      	b.n	800739a <lfs_format_+0x136>
            goto cleanup;
 8007394:	bf00      	nop
 8007396:	e000      	b.n	800739a <lfs_format_+0x136>
            goto cleanup;
 8007398:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff ff3a 	bl	8007214 <lfs_deinit>
    return err;
 80073a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c

}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3780      	adds	r7, #128	@ 0x80
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	08009fc8 	.word	0x08009fc8
 80073b0:	0800a55c 	.word	0x0800a55c
 80073b4:	0800982c 	.word	0x0800982c
 80073b8:	40100000 	.word	0x40100000
 80073bc:	0ff00008 	.word	0x0ff00008
 80073c0:	08009fe0 	.word	0x08009fe0
 80073c4:	20100018 	.word	0x20100018

080073c8 <lfs_mount_>:
#endif

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 80073c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ca:	b0a1      	sub	sp, #132	@ 0x84
 80073cc:	af04      	add	r7, sp, #16
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7ff fcbb 	bl	8006d50 <lfs_init>
 80073da:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (err) {
 80073dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <lfs_mount_+0x1e>
        return err;
 80073e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073e4:	e202      	b.n	80077ec <lfs_mount_+0x424>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 80073e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80073ea:	2220      	movs	r2, #32
 80073ec:	2100      	movs	r1, #0
 80073ee:	4618      	mov	r0, r3
 80073f0:	f001 fb4a 	bl	8008a88 <memset>
 80073f4:	2301      	movs	r3, #1
 80073f6:	657b      	str	r3, [r7, #84]	@ 0x54
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80073f8:	4a9a      	ldr	r2, [pc, #616]	@ (8007664 <lfs_mount_+0x29c>)
 80073fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80073fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007402:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8007406:	2301      	movs	r3, #1
 8007408:	66bb      	str	r3, [r7, #104]	@ 0x68
    lfs_size_t tortoise_period = 1;
 800740a:	2301      	movs	r3, #1
 800740c:	667b      	str	r3, [r7, #100]	@ 0x64
    while (!lfs_pair_isnull(dir.tail)) {
 800740e:	e199      	b.n	8007744 <lfs_mount_+0x37c>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8007410:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007414:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007418:	3318      	adds	r3, #24
 800741a:	4611      	mov	r1, r2
 800741c:	4618      	mov	r0, r3
 800741e:	f7fa fe8d 	bl	800213c <lfs_pair_issync>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00a      	beq.n	800743e <lfs_mount_+0x76>
            LFS_WARN("Cycle detected in tail list");
 8007428:	4b8f      	ldr	r3, [pc, #572]	@ (8007668 <lfs_mount_+0x2a0>)
 800742a:	f241 123d 	movw	r2, #4413	@ 0x113d
 800742e:	498f      	ldr	r1, [pc, #572]	@ (800766c <lfs_mount_+0x2a4>)
 8007430:	488f      	ldr	r0, [pc, #572]	@ (8007670 <lfs_mount_+0x2a8>)
 8007432:	f001 fb07 	bl	8008a44 <iprintf>
            err = LFS_ERR_CORRUPT;
 8007436:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800743a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 800743c:	e1d2      	b.n	80077e4 <lfs_mount_+0x41c>
        }
        if (tortoise_i == tortoise_period) {
 800743e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007440:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007442:	429a      	cmp	r2, r3
 8007444:	d108      	bne.n	8007458 <lfs_mount_+0x90>
            tortoise[0] = dir.tail[0];
 8007446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007448:	633b      	str	r3, [r7, #48]	@ 0x30
            tortoise[1] = dir.tail[1];
 800744a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800744c:	637b      	str	r3, [r7, #52]	@ 0x34
            tortoise_i = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	66bb      	str	r3, [r7, #104]	@ 0x68
            tortoise_period *= 2;
 8007452:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	667b      	str	r3, [r7, #100]	@ 0x64
        }
        tortoise_i += 1;
 8007458:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800745a:	3301      	adds	r3, #1
 800745c:	66bb      	str	r3, [r7, #104]	@ 0x68
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	627b      	str	r3, [r7, #36]	@ 0x24
 8007462:	4b84      	ldr	r3, [pc, #528]	@ (8007674 <lfs_mount_+0x2ac>)
 8007464:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007466:	2308      	movs	r3, #8
 8007468:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800746a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800746e:	f103 0218 	add.w	r2, r3, #24
 8007472:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8007476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800747a:	9303      	str	r3, [sp, #12]
 800747c:	4b7e      	ldr	r3, [pc, #504]	@ (8007678 <lfs_mount_+0x2b0>)
 800747e:	9302      	str	r3, [sp, #8]
 8007480:	2300      	movs	r3, #0
 8007482:	9301      	str	r3, [sp, #4]
 8007484:	4b7d      	ldr	r3, [pc, #500]	@ (800767c <lfs_mount_+0x2b4>)
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	4b7d      	ldr	r3, [pc, #500]	@ (8007680 <lfs_mount_+0x2b8>)
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7fc f8d4 	bl	8003638 <lfs_dir_fetchmatch>
 8007490:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8007492:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007494:	2b00      	cmp	r3, #0
 8007496:	da02      	bge.n	800749e <lfs_mount_+0xd6>
            err = tag;
 8007498:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800749a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 800749c:	e1a2      	b.n	80077e4 <lfs_mount_+0x41c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 800749e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 8142 	beq.w	800772a <lfs_mount_+0x362>
 80074a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fa feb6 	bl	800221a <lfs_tag_isdelete>
 80074ae:	4603      	mov	r3, r0
 80074b0:	f083 0301 	eor.w	r3, r3, #1
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f000 8137 	beq.w	800772a <lfs_mount_+0x362>
            // update root
            lfs->root[0] = dir.pair[0];
 80074bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 80074c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 80074c8:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80074cc:	f107 030c 	add.w	r3, r7, #12
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	4b6c      	ldr	r3, [pc, #432]	@ (8007684 <lfs_mount_+0x2bc>)
 80074d4:	4a6a      	ldr	r2, [pc, #424]	@ (8007680 <lfs_mount_+0x2b8>)
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7fb fb78 	bl	8002bcc <lfs_dir_get>
 80074dc:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 80074de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	da02      	bge.n	80074ea <lfs_mount_+0x122>
                err = tag;
 80074e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 80074e8:	e11e      	b.n	8007728 <lfs_mount_+0x360>
            }
            lfs_superblock_fromle32(&superblock);
 80074ea:	f107 030c 	add.w	r3, r7, #12
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fb f86c 	bl	80025cc <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	0c1b      	lsrs	r3, r3, #16
 80074f8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
            if (major_version != lfs_fs_disk_version_major(lfs)
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7fb f932 	bl	800276c <lfs_fs_disk_version_major>
 8007508:	4603      	mov	r3, r0
 800750a:	461a      	mov	r2, r3
 800750c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007510:	4293      	cmp	r3, r2
 8007512:	d108      	bne.n	8007526 <lfs_mount_+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7fb f937 	bl	8002788 <lfs_fs_disk_version_minor>
 800751a:	4603      	mov	r3, r0
 800751c:	461a      	mov	r2, r3
 800751e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8007522:	4293      	cmp	r3, r2
 8007524:	d91d      	bls.n	8007562 <lfs_mount_+0x19a>
                LFS_ERROR("Invalid version "
 8007526:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 800752a:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7fb f91c 	bl	800276c <lfs_fs_disk_version_major>
 8007534:	4603      	mov	r3, r0
 8007536:	461e      	mov	r6, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f7fb f925 	bl	8002788 <lfs_fs_disk_version_minor>
 800753e:	4603      	mov	r3, r0
 8007540:	461a      	mov	r2, r3
 8007542:	4b49      	ldr	r3, [pc, #292]	@ (8007668 <lfs_mount_+0x2a0>)
 8007544:	9303      	str	r3, [sp, #12]
 8007546:	9202      	str	r2, [sp, #8]
 8007548:	9601      	str	r6, [sp, #4]
 800754a:	9400      	str	r4, [sp, #0]
 800754c:	462b      	mov	r3, r5
 800754e:	f241 126b 	movw	r2, #4459	@ 0x116b
 8007552:	4946      	ldr	r1, [pc, #280]	@ (800766c <lfs_mount_+0x2a4>)
 8007554:	484c      	ldr	r0, [pc, #304]	@ (8007688 <lfs_mount_+0x2c0>)
 8007556:	f001 fa75 	bl	8008a44 <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 800755a:	f06f 0315 	mvn.w	r3, #21
 800755e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8007560:	e0e2      	b.n	8007728 <lfs_mount_+0x360>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 8007562:	2300      	movs	r3, #0
 8007564:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7fb f90d 	bl	8002788 <lfs_fs_disk_version_minor>
 800756e:	4603      	mov	r3, r0
 8007570:	461a      	mov	r2, r3
 8007572:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8007576:	4293      	cmp	r3, r2
 8007578:	d21c      	bcs.n	80075b4 <lfs_mount_+0x1ec>
                LFS_DEBUG("Found older minor version "
 800757a:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 800757e:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7fb f8f2 	bl	800276c <lfs_fs_disk_version_major>
 8007588:	4603      	mov	r3, r0
 800758a:	461e      	mov	r6, r3
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7fb f8fb 	bl	8002788 <lfs_fs_disk_version_minor>
 8007592:	4603      	mov	r3, r0
 8007594:	461a      	mov	r2, r3
 8007596:	4b34      	ldr	r3, [pc, #208]	@ (8007668 <lfs_mount_+0x2a0>)
 8007598:	9303      	str	r3, [sp, #12]
 800759a:	9202      	str	r2, [sp, #8]
 800759c:	9601      	str	r6, [sp, #4]
 800759e:	9400      	str	r4, [sp, #0]
 80075a0:	462b      	mov	r3, r5
 80075a2:	f241 127a 	movw	r2, #4474	@ 0x117a
 80075a6:	4931      	ldr	r1, [pc, #196]	@ (800766c <lfs_mount_+0x2a4>)
 80075a8:	4838      	ldr	r0, [pc, #224]	@ (800768c <lfs_mount_+0x2c4>)
 80075aa:	f001 fa4b 	bl	8008a44 <iprintf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 80075ae:	2301      	movs	r3, #1
 80075b0:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 80075b4:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fbb4 	bl	8007d28 <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d018      	beq.n	80075f8 <lfs_mount_+0x230>
                if (superblock.name_max > lfs->name_max) {
 80075c6:	69ba      	ldr	r2, [r7, #24]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d910      	bls.n	80075f2 <lfs_mount_+0x22a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075d6:	4924      	ldr	r1, [pc, #144]	@ (8007668 <lfs_mount_+0x2a0>)
 80075d8:	9101      	str	r1, [sp, #4]
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	4613      	mov	r3, r2
 80075de:	f241 1289 	movw	r2, #4489	@ 0x1189
 80075e2:	4922      	ldr	r1, [pc, #136]	@ (800766c <lfs_mount_+0x2a4>)
 80075e4:	482a      	ldr	r0, [pc, #168]	@ (8007690 <lfs_mount_+0x2c8>)
 80075e6:	f001 fa2d 	bl	8008a44 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 80075ea:	f06f 0315 	mvn.w	r3, #21
 80075ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 80075f0:	e09a      	b.n	8007728 <lfs_mount_+0x360>
                }

                lfs->name_max = superblock.name_max;
 80075f2:	69ba      	ldr	r2, [r7, #24]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.file_max) {
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d018      	beq.n	8007630 <lfs_mount_+0x268>
                if (superblock.file_max > lfs->file_max) {
 80075fe:	69fa      	ldr	r2, [r7, #28]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007604:	429a      	cmp	r2, r3
 8007606:	d910      	bls.n	800762a <lfs_mount_+0x262>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8007608:	69fa      	ldr	r2, [r7, #28]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800760e:	4916      	ldr	r1, [pc, #88]	@ (8007668 <lfs_mount_+0x2a0>)
 8007610:	9101      	str	r1, [sp, #4]
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	4613      	mov	r3, r2
 8007616:	f241 1294 	movw	r2, #4500	@ 0x1194
 800761a:	4914      	ldr	r1, [pc, #80]	@ (800766c <lfs_mount_+0x2a4>)
 800761c:	481d      	ldr	r0, [pc, #116]	@ (8007694 <lfs_mount_+0x2cc>)
 800761e:	f001 fa11 	bl	8008a44 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8007622:	f06f 0315 	mvn.w	r3, #21
 8007626:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8007628:	e07e      	b.n	8007728 <lfs_mount_+0x360>
                }

                lfs->file_max = superblock.file_max;
 800762a:	69fa      	ldr	r2, [r7, #28]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.attr_max) {
 8007630:	6a3b      	ldr	r3, [r7, #32]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d040      	beq.n	80076b8 <lfs_mount_+0x2f0>
                if (superblock.attr_max > lfs->attr_max) {
 8007636:	6a3a      	ldr	r2, [r7, #32]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800763c:	429a      	cmp	r2, r3
 800763e:	d92d      	bls.n	800769c <lfs_mount_+0x2d4>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8007640:	6a3a      	ldr	r2, [r7, #32]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007646:	4908      	ldr	r1, [pc, #32]	@ (8007668 <lfs_mount_+0x2a0>)
 8007648:	9101      	str	r1, [sp, #4]
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	4613      	mov	r3, r2
 800764e:	f241 129f 	movw	r2, #4511	@ 0x119f
 8007652:	4906      	ldr	r1, [pc, #24]	@ (800766c <lfs_mount_+0x2a4>)
 8007654:	4810      	ldr	r0, [pc, #64]	@ (8007698 <lfs_mount_+0x2d0>)
 8007656:	f001 f9f5 	bl	8008a44 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 800765a:	f06f 0315 	mvn.w	r3, #21
 800765e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8007660:	e062      	b.n	8007728 <lfs_mount_+0x360>
 8007662:	bf00      	nop
 8007664:	08009980 	.word	0x08009980
 8007668:	0800993c 	.word	0x0800993c
 800766c:	0800982c 	.word	0x0800982c
 8007670:	08009fec 	.word	0x08009fec
 8007674:	08009fe0 	.word	0x08009fe0
 8007678:	08003e75 	.word	0x08003e75
 800767c:	0ff00008 	.word	0x0ff00008
 8007680:	7ffffc00 	.word	0x7ffffc00
 8007684:	20100018 	.word	0x20100018
 8007688:	0800a018 	.word	0x0800a018
 800768c:	0800a050 	.word	0x0800a050
 8007690:	0800a090 	.word	0x0800a090
 8007694:	0800a0c4 	.word	0x0800a0c4
 8007698:	0800a0f8 	.word	0x0800a0f8
                }

                lfs->attr_max = superblock.attr_max;
 800769c:	6a3a      	ldr	r2, [r7, #32]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	679a      	str	r2, [r3, #120]	@ 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076aa:	4619      	mov	r1, r3
 80076ac:	4610      	mov	r0, r2
 80076ae:	f7fa f89e 	bl	80017ee <lfs_min>
 80076b2:	4602      	mov	r2, r0
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d017      	beq.n	80076f2 <lfs_mount_+0x32a>
                    && superblock.block_count != lfs->cfg->block_count) {
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d011      	beq.n	80076f2 <lfs_mount_+0x32a>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	4947      	ldr	r1, [pc, #284]	@ (80077f4 <lfs_mount_+0x42c>)
 80076d8:	9101      	str	r1, [sp, #4]
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	4613      	mov	r3, r2
 80076de:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 80076e2:	4945      	ldr	r1, [pc, #276]	@ (80077f8 <lfs_mount_+0x430>)
 80076e4:	4845      	ldr	r0, [pc, #276]	@ (80077fc <lfs_mount_+0x434>)
 80076e6:	f001 f9ad 	bl	8008a44 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 80076ea:	f06f 0315 	mvn.w	r3, #21
 80076ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 80076f0:	e01a      	b.n	8007728 <lfs_mount_+0x360>
            }

            lfs->block_count = superblock.block_count;
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	66da      	str	r2, [r3, #108]	@ 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	429a      	cmp	r2, r3
 8007702:	d012      	beq.n	800772a <lfs_mount_+0x362>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	4939      	ldr	r1, [pc, #228]	@ (80077f4 <lfs_mount_+0x42c>)
 800770e:	9101      	str	r1, [sp, #4]
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	4613      	mov	r3, r2
 8007714:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 8007718:	4937      	ldr	r1, [pc, #220]	@ (80077f8 <lfs_mount_+0x430>)
 800771a:	4839      	ldr	r0, [pc, #228]	@ (8007800 <lfs_mount_+0x438>)
 800771c:	f001 f992 	bl	8008a44 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8007720:	f06f 0315 	mvn.w	r3, #21
 8007724:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8007726:	bf00      	nop
            goto cleanup;
 8007728:	e05c      	b.n	80077e4 <lfs_mount_+0x41c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007730:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007734:	4619      	mov	r1, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7fc fb6a 	bl	8003e10 <lfs_dir_getgstate>
 800773c:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err) {
 800773e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007740:	2b00      	cmp	r3, #0
 8007742:	d14e      	bne.n	80077e2 <lfs_mount_+0x41a>
    while (!lfs_pair_isnull(dir.tail)) {
 8007744:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007748:	3318      	adds	r3, #24
 800774a:	4618      	mov	r0, r3
 800774c:	f7fa fcb1 	bl	80020b2 <lfs_pair_isnull>
 8007750:	4603      	mov	r3, r0
 8007752:	f083 0301 	eor.w	r3, r3, #1
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b00      	cmp	r3, #0
 800775a:	f47f ae59 	bne.w	8007410 <lfs_mount_+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	3330      	adds	r3, #48	@ 0x30
 8007762:	4618      	mov	r0, r3
 8007764:	f7fa fe0c 	bl	8002380 <lfs_gstate_iszero>
 8007768:	4603      	mov	r3, r0
 800776a:	f083 0301 	eor.w	r3, r3, #1
 800776e:	b2db      	uxtb	r3, r3
 8007770:	2b00      	cmp	r3, #0
 8007772:	d010      	beq.n	8007796 <lfs_mount_+0x3ce>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007780:	481c      	ldr	r0, [pc, #112]	@ (80077f4 <lfs_mount_+0x42c>)
 8007782:	9002      	str	r0, [sp, #8]
 8007784:	9201      	str	r2, [sp, #4]
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	460b      	mov	r3, r1
 800778a:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 800778e:	491a      	ldr	r1, [pc, #104]	@ (80077f8 <lfs_mount_+0x430>)
 8007790:	481c      	ldr	r0, [pc, #112]	@ (8007804 <lfs_mount_+0x43c>)
 8007792:	f001 f957 	bl	8008a44 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800779a:	4618      	mov	r0, r3
 800779c:	f7fa fd2f 	bl	80021fe <lfs_tag_isvalid>
 80077a0:	4603      	mov	r3, r0
 80077a2:	f083 0301 	eor.w	r3, r3, #1
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	461a      	mov	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ae:	441a      	add	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	333c      	adds	r3, #60	@ 0x3c
 80077ba:	3230      	adds	r2, #48	@ 0x30
 80077bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80077be:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80077ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80077ce:	fb01 f202 	mul.w	r2, r1, r2
 80077d2:	1a9a      	subs	r2, r3, r2
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7fa fff0 	bl	80027be <lfs_alloc_drop>

    return 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	e004      	b.n	80077ec <lfs_mount_+0x424>
            goto cleanup;
 80077e2:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f80f 	bl	8007808 <lfs_unmount_>
    return err;
 80077ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3774      	adds	r7, #116	@ 0x74
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077f4:	0800993c 	.word	0x0800993c
 80077f8:	0800982c 	.word	0x0800982c
 80077fc:	0800a12c 	.word	0x0800a12c
 8007800:	0800a160 	.word	0x0800a160
 8007804:	0800a190 	.word	0x0800a190

08007808 <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7ff fcff 	bl	8007214 <lfs_deinit>
 8007816:	4603      	mov	r3, r0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8007820:	b590      	push	{r4, r7, lr}
 8007822:	b0a1      	sub	sp, #132	@ 0x84
 8007824:	af04      	add	r7, sp, #16
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
 800782c:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 800782e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007832:	2220      	movs	r2, #32
 8007834:	2100      	movs	r1, #0
 8007836:	4618      	mov	r0, r3
 8007838:	f001 f926 	bl	8008a88 <memset>
 800783c:	2301      	movs	r3, #1
 800783e:	643b      	str	r3, [r7, #64]	@ 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8007840:	4a9a      	ldr	r2, [pc, #616]	@ (8007aac <lfs_fs_traverse_+0x28c>)
 8007842:	f107 031c 	add.w	r3, r7, #28
 8007846:	e892 0003 	ldmia.w	r2, {r0, r1}
 800784a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800784e:	2301      	movs	r3, #1
 8007850:	66fb      	str	r3, [r7, #108]	@ 0x6c
    lfs_size_t tortoise_period = 1;
 8007852:	2301      	movs	r3, #1
 8007854:	66bb      	str	r3, [r7, #104]	@ 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 8007856:	e0c0      	b.n	80079da <lfs_fs_traverse_+0x1ba>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8007858:	f107 021c 	add.w	r2, r7, #28
 800785c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007860:	3318      	adds	r3, #24
 8007862:	4611      	mov	r1, r2
 8007864:	4618      	mov	r0, r3
 8007866:	f7fa fc69 	bl	800213c <lfs_pair_issync>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d009      	beq.n	8007884 <lfs_fs_traverse_+0x64>
            LFS_WARN("Cycle detected in tail list");
 8007870:	4b8f      	ldr	r3, [pc, #572]	@ (8007ab0 <lfs_fs_traverse_+0x290>)
 8007872:	f241 2222 	movw	r2, #4642	@ 0x1222
 8007876:	498f      	ldr	r1, [pc, #572]	@ (8007ab4 <lfs_fs_traverse_+0x294>)
 8007878:	488f      	ldr	r0, [pc, #572]	@ (8007ab8 <lfs_fs_traverse_+0x298>)
 800787a:	f001 f8e3 	bl	8008a44 <iprintf>
            return LFS_ERR_CORRUPT;
 800787e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8007882:	e10f      	b.n	8007aa4 <lfs_fs_traverse_+0x284>
        }
        if (tortoise_i == tortoise_period) {
 8007884:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007886:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007888:	429a      	cmp	r2, r3
 800788a:	d108      	bne.n	800789e <lfs_fs_traverse_+0x7e>
            tortoise[0] = dir.tail[0];
 800788c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800788e:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 8007890:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007892:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8007894:	2300      	movs	r3, #0
 8007896:	66fb      	str	r3, [r7, #108]	@ 0x6c
            tortoise_period *= 2;
 8007898:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800789a:	005b      	lsls	r3, r3, #1
 800789c:	66bb      	str	r3, [r7, #104]	@ 0x68
        }
        tortoise_i += 1;
 800789e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078a0:	3301      	adds	r3, #1
 80078a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

        for (int i = 0; i < 2; i++) {
 80078a4:	2300      	movs	r3, #0
 80078a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80078a8:	e013      	b.n	80078d2 <lfs_fs_traverse_+0xb2>
            int err = cb(data, dir.tail[i]);
 80078aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078ac:	3306      	adds	r3, #6
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	3370      	adds	r3, #112	@ 0x70
 80078b2:	443b      	add	r3, r7
 80078b4:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	4611      	mov	r1, r2
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	4798      	blx	r3
 80078c0:	6478      	str	r0, [r7, #68]	@ 0x44
            if (err) {
 80078c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <lfs_fs_traverse_+0xac>
                return err;
 80078c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078ca:	e0eb      	b.n	8007aa4 <lfs_fs_traverse_+0x284>
        for (int i = 0; i < 2; i++) {
 80078cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078ce:	3301      	adds	r3, #1
 80078d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80078d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	dde8      	ble.n	80078aa <lfs_fs_traverse_+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 80078d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078dc:	f103 0218 	add.w	r2, r3, #24
 80078e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078e4:	4619      	mov	r1, r3
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f7fc fa76 	bl	8003dd8 <lfs_dir_fetch>
 80078ec:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (err) {
 80078ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <lfs_fs_traverse_+0xd8>
            return err;
 80078f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078f6:	e0d5      	b.n	8007aa4 <lfs_fs_traverse_+0x284>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 80078f8:	2300      	movs	r3, #0
 80078fa:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80078fe:	e067      	b.n	80079d0 <lfs_fs_traverse_+0x1b0>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8007900:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007904:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8007906:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800790a:	f043 0308 	orr.w	r3, r3, #8
 800790e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8007912:	f107 0214 	add.w	r2, r7, #20
 8007916:	9200      	str	r2, [sp, #0]
 8007918:	4a68      	ldr	r2, [pc, #416]	@ (8007abc <lfs_fs_traverse_+0x29c>)
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f7fb f956 	bl	8002bcc <lfs_dir_get>
 8007920:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (tag < 0) {
 8007922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007924:	2b00      	cmp	r3, #0
 8007926:	da05      	bge.n	8007934 <lfs_fs_traverse_+0x114>
                if (tag == LFS_ERR_NOENT) {
 8007928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800792a:	f113 0f02 	cmn.w	r3, #2
 800792e:	d049      	beq.n	80079c4 <lfs_fs_traverse_+0x1a4>
                    continue;
                }
                return tag;
 8007930:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007932:	e0b7      	b.n	8007aa4 <lfs_fs_traverse_+0x284>
            }
            lfs_ctz_fromle32(&ctz);
 8007934:	f107 0314 	add.w	r3, r7, #20
 8007938:	4618      	mov	r0, r3
 800793a:	f7fa fe17 	bl	800256c <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800793e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007940:	4618      	mov	r0, r3
 8007942:	f7fa fc9d 	bl	8002280 <lfs_tag_type3>
 8007946:	4603      	mov	r3, r0
 8007948:	461a      	mov	r2, r3
 800794a:	f240 2302 	movw	r3, #514	@ 0x202
 800794e:	429a      	cmp	r2, r3
 8007950:	d113      	bne.n	800797a <lfs_fs_traverse_+0x15a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8007952:	68f9      	ldr	r1, [r7, #12]
 8007954:	6978      	ldr	r0, [r7, #20]
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	9202      	str	r2, [sp, #8]
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	9201      	str	r2, [sp, #4]
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	4603      	mov	r3, r0
 8007964:	460a      	mov	r2, r1
 8007966:	2100      	movs	r1, #0
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f7fe f9a9 	bl	8005cc0 <lfs_ctz_traverse>
 800796e:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8007970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007972:	2b00      	cmp	r3, #0
 8007974:	d027      	beq.n	80079c6 <lfs_fs_traverse_+0x1a6>
                    return err;
 8007976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007978:	e094      	b.n	8007aa4 <lfs_fs_traverse_+0x284>
                }
            } else if (includeorphans &&
 800797a:	78fb      	ldrb	r3, [r7, #3]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d022      	beq.n	80079c6 <lfs_fs_traverse_+0x1a6>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8007980:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007982:	4618      	mov	r0, r3
 8007984:	f7fa fc7c 	bl	8002280 <lfs_tag_type3>
 8007988:	4603      	mov	r3, r0
            } else if (includeorphans &&
 800798a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800798e:	d11a      	bne.n	80079c6 <lfs_fs_traverse_+0x1a6>
                for (int i = 0; i < 2; i++) {
 8007990:	2300      	movs	r3, #0
 8007992:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007994:	e012      	b.n	80079bc <lfs_fs_traverse_+0x19c>
                    err = cb(data, (&ctz.head)[i]);
 8007996:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	f107 0214 	add.w	r2, r7, #20
 800799e:	4413      	add	r3, r2
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	4611      	mov	r1, r2
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	4798      	blx	r3
 80079aa:	64f8      	str	r0, [r7, #76]	@ 0x4c
                    if (err) {
 80079ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <lfs_fs_traverse_+0x196>
                        return err;
 80079b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079b4:	e076      	b.n	8007aa4 <lfs_fs_traverse_+0x284>
                for (int i = 0; i < 2; i++) {
 80079b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079b8:	3301      	adds	r3, #1
 80079ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079be:	2b01      	cmp	r3, #1
 80079c0:	dde9      	ble.n	8007996 <lfs_fs_traverse_+0x176>
 80079c2:	e000      	b.n	80079c6 <lfs_fs_traverse_+0x1a6>
                    continue;
 80079c4:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 80079c6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80079ca:	3301      	adds	r3, #1
 80079cc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80079d0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80079d2:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d392      	bcc.n	8007900 <lfs_fs_traverse_+0xe0>
    while (!lfs_pair_isnull(dir.tail)) {
 80079da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079de:	3318      	adds	r3, #24
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fa fb66 	bl	80020b2 <lfs_pair_isnull>
 80079e6:	4603      	mov	r3, r0
 80079e8:	f083 0301 	eor.w	r3, r3, #1
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f47f af32 	bne.w	8007858 <lfs_fs_traverse_+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80079fa:	e04f      	b.n	8007a9c <lfs_fs_traverse_+0x27c>
        if (f->type != LFS_TYPE_REG) {
 80079fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079fe:	799b      	ldrb	r3, [r3, #6]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d147      	bne.n	8007a94 <lfs_fs_traverse_+0x274>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8007a04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d01d      	beq.n	8007a4c <lfs_fs_traverse_+0x22c>
 8007a10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d117      	bne.n	8007a4c <lfs_fs_traverse_+0x22c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8007a1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a1e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a26:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8007a28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	9202      	str	r2, [sp, #8]
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	9201      	str	r2, [sp, #4]
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	4623      	mov	r3, r4
 8007a38:	4602      	mov	r2, r0
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f7fe f940 	bl	8005cc0 <lfs_ctz_traverse>
 8007a40:	6578      	str	r0, [r7, #84]	@ 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8007a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d001      	beq.n	8007a4c <lfs_fs_traverse_+0x22c>
                return err;
 8007a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a4a:	e02b      	b.n	8007aa4 <lfs_fs_traverse_+0x284>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8007a4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d01e      	beq.n	8007a96 <lfs_fs_traverse_+0x276>
 8007a58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d118      	bne.n	8007a96 <lfs_fs_traverse_+0x276>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8007a64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a66:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a6e:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8007a70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	9202      	str	r2, [sp, #8]
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	9201      	str	r2, [sp, #4]
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	4623      	mov	r3, r4
 8007a80:	4602      	mov	r2, r0
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f7fe f91c 	bl	8005cc0 <lfs_ctz_traverse>
 8007a88:	6538      	str	r0, [r7, #80]	@ 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 8007a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <lfs_fs_traverse_+0x276>
                return err;
 8007a90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a92:	e007      	b.n	8007aa4 <lfs_fs_traverse_+0x284>
            continue;
 8007a94:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8007a96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1ac      	bne.n	80079fc <lfs_fs_traverse_+0x1dc>
            }
        }
    }
#endif

    return 0;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3774      	adds	r7, #116	@ 0x74
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd90      	pop	{r4, r7, pc}
 8007aac:	08009980 	.word	0x08009980
 8007ab0:	0800993c 	.word	0x0800993c
 8007ab4:	0800982c 	.word	0x0800982c
 8007ab8:	08009fec 	.word	0x08009fec
 8007abc:	700ffc00 	.word	0x700ffc00

08007ac0 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08a      	sub	sp, #40	@ 0x28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8007ad8:	4a2d      	ldr	r2, [pc, #180]	@ (8007b90 <lfs_fs_pred+0xd0>)
 8007ada:	f107 0314 	add.w	r3, r7, #20
 8007ade:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007ae2:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t tortoise_period = 1;
 8007aea:	2301      	movs	r3, #1
 8007aec:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8007aee:	e03e      	b.n	8007b6e <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3318      	adds	r3, #24
 8007af4:	f107 0214 	add.w	r2, r7, #20
 8007af8:	4611      	mov	r1, r2
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fa fb1e 	bl	800213c <lfs_pair_issync>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d009      	beq.n	8007b1a <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8007b06:	4b23      	ldr	r3, [pc, #140]	@ (8007b94 <lfs_fs_pred+0xd4>)
 8007b08:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 8007b0c:	4922      	ldr	r1, [pc, #136]	@ (8007b98 <lfs_fs_pred+0xd8>)
 8007b0e:	4823      	ldr	r0, [pc, #140]	@ (8007b9c <lfs_fs_pred+0xdc>)
 8007b10:	f000 ff98 	bl	8008a44 <iprintf>
            return LFS_ERR_CORRUPT;
 8007b14:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8007b18:	e036      	b.n	8007b88 <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 8007b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d10a      	bne.n	8007b38 <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	69db      	ldr	r3, [r3, #28]
 8007b2c:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	627b      	str	r3, [r7, #36]	@ 0x24
            tortoise_period *= 2;
 8007b32:	6a3b      	ldr	r3, [r7, #32]
 8007b34:	005b      	lsls	r3, r3, #1
 8007b36:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 8007b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	627b      	str	r3, [r7, #36]	@ 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	3318      	adds	r3, #24
 8007b42:	68b9      	ldr	r1, [r7, #8]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fa facf 	bl	80020e8 <lfs_pair_cmp>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <lfs_fs_pred+0x94>
            return 0;
 8007b50:	2300      	movs	r3, #0
 8007b52:	e019      	b.n	8007b88 <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	3318      	adds	r3, #24
 8007b58:	461a      	mov	r2, r3
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f7fc f93b 	bl	8003dd8 <lfs_dir_fetch>
 8007b62:	61f8      	str	r0, [r7, #28]
        if (err) {
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <lfs_fs_pred+0xae>
            return err;
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	e00c      	b.n	8007b88 <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	3318      	adds	r3, #24
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fa fa9d 	bl	80020b2 <lfs_pair_isnull>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	f083 0301 	eor.w	r3, r3, #1
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1b5      	bne.n	8007af0 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8007b84:	f06f 0301 	mvn.w	r3, #1
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3728      	adds	r7, #40	@ 0x28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	08009980 	.word	0x08009980
 8007b94:	0800993c 	.word	0x0800993c
 8007b98:	0800982c 	.word	0x0800982c
 8007b9c:	08009fec 	.word	0x08009fec

08007ba0 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8007ba0:	b5b0      	push	{r4, r5, r7, lr}
 8007ba2:	b08e      	sub	sp, #56	@ 0x38
 8007ba4:	af04      	add	r7, sp, #16
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8007bc0:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bc6:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	69fa      	ldr	r2, [r7, #28]
 8007bce:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8007bd0:	2108      	movs	r1, #8
 8007bd2:	9103      	str	r1, [sp, #12]
 8007bd4:	f107 0110 	add.w	r1, r7, #16
 8007bd8:	9102      	str	r1, [sp, #8]
 8007bda:	9201      	str	r2, [sp, #4]
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	462b      	mov	r3, r5
 8007be0:	4622      	mov	r2, r4
 8007be2:	4601      	mov	r1, r0
 8007be4:	6a38      	ldr	r0, [r7, #32]
 8007be6:	f7f9 fedd 	bl	80019a4 <lfs_bd_read>
 8007bea:	61b8      	str	r0, [r7, #24]
    if (err) {
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <lfs_fs_parent_match+0x56>
        return err;
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	e012      	b.n	8007c1c <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8007bf6:	f107 0310 	add.w	r3, r7, #16
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fa facb 	bl	8002196 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8007c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c02:	1d1a      	adds	r2, r3, #4
 8007c04:	f107 0310 	add.w	r3, r7, #16
 8007c08:	4611      	mov	r1, r2
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fa fa6c 	bl	80020e8 <lfs_pair_cmp>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	bf14      	ite	ne
 8007c16:	2301      	movne	r3, #1
 8007c18:	2300      	moveq	r3, #0
 8007c1a:	b2db      	uxtb	r3, r3
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3728      	adds	r7, #40	@ 0x28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bdb0      	pop	{r4, r5, r7, pc}

08007c24 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b090      	sub	sp, #64	@ 0x40
 8007c28:	af04      	add	r7, sp, #16
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8007c3c:	4a33      	ldr	r2, [pc, #204]	@ (8007d0c <lfs_fs_parent+0xe8>)
 8007c3e:	f107 031c 	add.w	r3, r7, #28
 8007c42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c46:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t tortoise_period = 1;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 8007c52:	e04a      	b.n	8007cea <lfs_fs_parent+0xc6>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	3318      	adds	r3, #24
 8007c58:	f107 021c 	add.w	r2, r7, #28
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fa fa6c 	bl	800213c <lfs_pair_issync>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d009      	beq.n	8007c7e <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8007c6a:	4b29      	ldr	r3, [pc, #164]	@ (8007d10 <lfs_fs_parent+0xec>)
 8007c6c:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 8007c70:	4928      	ldr	r1, [pc, #160]	@ (8007d14 <lfs_fs_parent+0xf0>)
 8007c72:	4829      	ldr	r0, [pc, #164]	@ (8007d18 <lfs_fs_parent+0xf4>)
 8007c74:	f000 fee6 	bl	8008a44 <iprintf>
            return LFS_ERR_CORRUPT;
 8007c78:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8007c7c:	e042      	b.n	8007d04 <lfs_fs_parent+0xe0>
        }
        if (tortoise_i == tortoise_period) {
 8007c7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d10a      	bne.n	8007c9c <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	69db      	ldr	r3, [r3, #28]
 8007c90:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
            tortoise_period *= 2;
 8007c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c98:	005b      	lsls	r3, r3, #1
 8007c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        tortoise_i += 1;
 8007c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8007cb0:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8007cb8:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8007cba:	f107 0310 	add.w	r3, r7, #16
 8007cbe:	9303      	str	r3, [sp, #12]
 8007cc0:	4b16      	ldr	r3, [pc, #88]	@ (8007d1c <lfs_fs_parent+0xf8>)
 8007cc2:	9302      	str	r3, [sp, #8]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	9301      	str	r3, [sp, #4]
 8007cc8:	4b15      	ldr	r3, [pc, #84]	@ (8007d20 <lfs_fs_parent+0xfc>)
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	4b15      	ldr	r3, [pc, #84]	@ (8007d24 <lfs_fs_parent+0x100>)
 8007cce:	6879      	ldr	r1, [r7, #4]
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f7fb fcb1 	bl	8003638 <lfs_dir_fetchmatch>
 8007cd6:	6278      	str	r0, [r7, #36]	@ 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d005      	beq.n	8007cea <lfs_fs_parent+0xc6>
 8007cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce0:	f113 0f02 	cmn.w	r3, #2
 8007ce4:	d001      	beq.n	8007cea <lfs_fs_parent+0xc6>
            return tag;
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce8:	e00c      	b.n	8007d04 <lfs_fs_parent+0xe0>
    while (!lfs_pair_isnull(parent->tail)) {
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	3318      	adds	r3, #24
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fa f9df 	bl	80020b2 <lfs_pair_isnull>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	f083 0301 	eor.w	r3, r3, #1
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1a9      	bne.n	8007c54 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8007d00:	f06f 0301 	mvn.w	r3, #1
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3730      	adds	r7, #48	@ 0x30
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	08009980 	.word	0x08009980
 8007d10:	0800993c 	.word	0x0800993c
 8007d14:	0800982c 	.word	0x0800982c
 8007d18:	08009fec 	.word	0x08009fec
 8007d1c:	08007ba1 	.word	0x08007ba1
 8007d20:	20000008 	.word	0x20000008
 8007d24:	7ff003ff 	.word	0x7ff003ff

08007d28 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d38:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 8007d3c:	78fb      	ldrb	r3, [r7, #3]
 8007d3e:	025b      	lsls	r3, r3, #9
 8007d40:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007d46:	bf00      	nop
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
	...

08007d54 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8007d54:	b590      	push	{r4, r7, lr}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fa fac5 	bl	80022f4 <lfs_tag_size>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10a      	bne.n	8007d86 <lfs_fs_preporphans+0x32>
 8007d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	da06      	bge.n	8007d86 <lfs_fs_preporphans+0x32>
 8007d78:	4b1a      	ldr	r3, [pc, #104]	@ (8007de4 <lfs_fs_preporphans+0x90>)
 8007d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8007de8 <lfs_fs_preporphans+0x94>)
 8007d7c:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 8007d80:	481a      	ldr	r0, [pc, #104]	@ (8007dec <lfs_fs_preporphans+0x98>)
 8007d82:	f000 fcaf 	bl	80086e4 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fa fab2 	bl	80022f4 <lfs_tag_size>
 8007d90:	4603      	mov	r3, r0
 8007d92:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8007d96:	d90a      	bls.n	8007dae <lfs_fs_preporphans+0x5a>
 8007d98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	dd06      	ble.n	8007dae <lfs_fs_preporphans+0x5a>
 8007da0:	4b13      	ldr	r3, [pc, #76]	@ (8007df0 <lfs_fs_preporphans+0x9c>)
 8007da2:	4a11      	ldr	r2, [pc, #68]	@ (8007de8 <lfs_fs_preporphans+0x94>)
 8007da4:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 8007da8:	4810      	ldr	r0, [pc, #64]	@ (8007dec <lfs_fs_preporphans+0x98>)
 8007daa:	f000 fc9b 	bl	80086e4 <__assert_func>
    lfs->gstate.tag += orphans;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007db2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007db6:	441a      	add	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dc0:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3330      	adds	r3, #48	@ 0x30
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fa faf6 	bl	80023ba <lfs_gstate_hasorphans>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8007dd2:	ea44 0203 	orr.w	r2, r4, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd90      	pop	{r4, r7, pc}
 8007de4:	0800a1c8 	.word	0x0800a1c8
 8007de8:	0800a568 	.word	0x0800a568
 8007dec:	0800982c 	.word	0x0800982c
 8007df0:	0800a200 	.word	0x0800a200

08007df4 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e06:	4a17      	ldr	r2, [pc, #92]	@ (8007e64 <lfs_fs_prepmove+0x70>)
 8007e08:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8007e0a:	897b      	ldrh	r3, [r7, #10]
 8007e0c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8007e10:	428b      	cmp	r3, r1
 8007e12:	d006      	beq.n	8007e22 <lfs_fs_prepmove+0x2e>
 8007e14:	897b      	ldrh	r3, [r7, #10]
 8007e16:	029b      	lsls	r3, r3, #10
 8007e18:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8007e1c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8007e20:	e000      	b.n	8007e24 <lfs_fs_prepmove+0x30>
 8007e22:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8007e24:	431a      	orrs	r2, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8007e2a:	897b      	ldrh	r3, [r7, #10]
 8007e2c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d002      	beq.n	8007e3a <lfs_fs_prepmove+0x46>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	e000      	b.n	8007e3c <lfs_fs_prepmove+0x48>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8007e40:	897b      	ldrh	r3, [r7, #10]
 8007e42:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d003      	beq.n	8007e52 <lfs_fs_prepmove+0x5e>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	e000      	b.n	8007e54 <lfs_fs_prepmove+0x60>
 8007e52:	2300      	movs	r3, #0
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8007e58:	bf00      	nop
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	800003ff 	.word	0x800003ff

08007e68 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b098      	sub	sp, #96	@ 0x60
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3330      	adds	r3, #48	@ 0x30
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7fa fad5 	bl	8002424 <lfs_gstate_needssuperblock>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	f083 0301 	eor.w	r3, r3, #1
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <lfs_fs_desuperblock+0x22>
        return 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	e04e      	b.n	8007f28 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a1a      	ldr	r2, [r3, #32]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e92:	4927      	ldr	r1, [pc, #156]	@ (8007f30 <lfs_fs_desuperblock+0xc8>)
 8007e94:	9101      	str	r1, [sp, #4]
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 8007e9e:	4925      	ldr	r1, [pc, #148]	@ (8007f34 <lfs_fs_desuperblock+0xcc>)
 8007ea0:	4825      	ldr	r0, [pc, #148]	@ (8007f38 <lfs_fs_desuperblock+0xd0>)
 8007ea2:	f000 fdcf 	bl	8008a44 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f103 0220 	add.w	r2, r3, #32
 8007eac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7fb ff90 	bl	8003dd8 <lfs_dir_fetch>
 8007eb8:	6578      	str	r0, [r7, #84]	@ 0x54
    if (err) {
 8007eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <lfs_fs_desuperblock+0x5c>
        return err;
 8007ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ec2:	e031      	b.n	8007f28 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7fa fc43 	bl	8002750 <lfs_fs_disk_version>
 8007eca:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8007ecc:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ed2:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 8007ed4:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 8007eda:	627b      	str	r3, [r7, #36]	@ 0x24
        .name_max    = lfs->name_max,
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    lfs_superblock_t superblock = {
 8007ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
        .file_max    = lfs->file_max,
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    lfs_superblock_t superblock = {
 8007ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .attr_max    = lfs->attr_max,
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    lfs_superblock_t superblock = {
 8007eec:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    lfs_superblock_tole32(&superblock);
 8007eee:	f107 031c 	add.w	r3, r7, #28
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fa fba2 	bl	800263c <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8007ef8:	4b10      	ldr	r3, [pc, #64]	@ (8007f3c <lfs_fs_desuperblock+0xd4>)
 8007efa:	617b      	str	r3, [r7, #20]
 8007efc:	f107 031c 	add.w	r3, r7, #28
 8007f00:	61bb      	str	r3, [r7, #24]
 8007f02:	f107 0214 	add.w	r2, r7, #20
 8007f06:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7fd fd05 	bl	800591c <lfs_dir_commit>
 8007f12:	6578      	str	r0, [r7, #84]	@ 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8007f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <lfs_fs_desuperblock+0xb6>
        return err;
 8007f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f1c:	e004      	b.n	8007f28 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8007f1e:	2100      	movs	r1, #0
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff ff01 	bl	8007d28 <lfs_fs_prepsuperblock>
    return 0;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3758      	adds	r7, #88	@ 0x58
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	0800993c 	.word	0x0800993c
 8007f34:	0800982c 	.word	0x0800982c
 8007f38:	0800a238 	.word	0x0800a238
 8007f3c:	20100018 	.word	0x20100018

08007f40 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8007f40:	b5b0      	push	{r4, r5, r7, lr}
 8007f42:	b094      	sub	sp, #80	@ 0x50
 8007f44:	af04      	add	r7, sp, #16
 8007f46:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	333c      	adds	r3, #60	@ 0x3c
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7fa fa56 	bl	80023fe <lfs_gstate_hasmove>
 8007f52:	4603      	mov	r3, r0
 8007f54:	f083 0301 	eor.w	r3, r3, #1
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <lfs_fs_demove+0x22>
        return 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e05b      	b.n	800801a <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fa f9b0 	bl	80022d4 <lfs_tag_id>
 8007f74:	4603      	mov	r3, r0
 8007f76:	461a      	mov	r2, r3
 8007f78:	4b2a      	ldr	r3, [pc, #168]	@ (8008024 <lfs_fs_demove+0xe4>)
 8007f7a:	9302      	str	r3, [sp, #8]
 8007f7c:	9201      	str	r2, [sp, #4]
 8007f7e:	9400      	str	r4, [sp, #0]
 8007f80:	462b      	mov	r3, r5
 8007f82:	f241 3224 	movw	r2, #4900	@ 0x1324
 8007f86:	4928      	ldr	r1, [pc, #160]	@ (8008028 <lfs_fs_demove+0xe8>)
 8007f88:	4828      	ldr	r0, [pc, #160]	@ (800802c <lfs_fs_demove+0xec>)
 8007f8a:	f000 fd5b 	bl	8008a44 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fa f974 	bl	8002280 <lfs_tag_type3>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d006      	beq.n	8007fb2 <lfs_fs_demove+0x72>
 8007fa4:	4b22      	ldr	r3, [pc, #136]	@ (8008030 <lfs_fs_demove+0xf0>)
 8007fa6:	4a23      	ldr	r2, [pc, #140]	@ (8008034 <lfs_fs_demove+0xf4>)
 8007fa8:	f241 312b 	movw	r1, #4907	@ 0x132b
 8007fac:	481e      	ldr	r0, [pc, #120]	@ (8008028 <lfs_fs_demove+0xe8>)
 8007fae:	f000 fb99 	bl	80086e4 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8007fb8:	f107 0318 	add.w	r3, r7, #24
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7fb ff0a 	bl	8003dd8 <lfs_dir_fetch>
 8007fc4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 8007fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <lfs_fs_demove+0x90>
        return err;
 8007fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fce:	e024      	b.n	800801a <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7fa f97d 	bl	80022d4 <lfs_tag_id>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff ff05 	bl	8007df4 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8007fea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007fec:	029b      	lsls	r3, r3, #10
 8007fee:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8007ff2:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8007ff6:	613b      	str	r3, [r7, #16]
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	617b      	str	r3, [r7, #20]
 8007ffc:	f107 0210 	add.w	r2, r7, #16
 8008000:	f107 0118 	add.w	r1, r7, #24
 8008004:	2301      	movs	r3, #1
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7fd fc88 	bl	800591c <lfs_dir_commit>
 800800c:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800800e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <lfs_fs_demove+0xd8>
        return err;
 8008014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008016:	e000      	b.n	800801a <lfs_fs_demove+0xda>
    }

    return 0;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3740      	adds	r7, #64	@ 0x40
 800801e:	46bd      	mov	sp, r7
 8008020:	bdb0      	pop	{r4, r5, r7, pc}
 8008022:	bf00      	nop
 8008024:	0800993c 	.word	0x0800993c
 8008028:	0800982c 	.word	0x0800982c
 800802c:	0800a26c 	.word	0x0800a26c
 8008030:	0800a2a0 	.word	0x0800a2a0
 8008034:	0800a57c 	.word	0x0800a57c

08008038 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8008038:	b5b0      	push	{r4, r5, r7, lr}
 800803a:	b0b2      	sub	sp, #200	@ 0xc8
 800803c:	af04      	add	r7, sp, #16
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	460b      	mov	r3, r1
 8008042:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3330      	adds	r3, #48	@ 0x30
 8008048:	4618      	mov	r0, r3
 800804a:	f7fa f9b6 	bl	80023ba <lfs_gstate_hasorphans>
 800804e:	4603      	mov	r3, r0
 8008050:	f083 0301 	eor.w	r3, r3, #1
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d001      	beq.n	800805e <lfs_fs_deorphan+0x26>
        return 0;
 800805a:	2300      	movs	r3, #0
 800805c:	e188      	b.n	8008370 <lfs_fs_deorphan+0x338>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 8008064:	e171      	b.n	800834a <lfs_fs_deorphan+0x312>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8008066:	f107 0308 	add.w	r3, r7, #8
 800806a:	2220      	movs	r2, #32
 800806c:	2100      	movs	r1, #0
 800806e:	4618      	mov	r0, r3
 8008070:	f000 fd0a 	bl	8008a88 <memset>
 8008074:	2301      	movs	r3, #1
 8008076:	77fb      	strb	r3, [r7, #31]
 8008078:	2301      	movs	r3, #1
 800807a:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 800807c:	2300      	movs	r3, #0
 800807e:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8008082:	e14a      	b.n	800831a <lfs_fs_deorphan+0x2e2>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8008084:	f107 0308 	add.w	r3, r7, #8
 8008088:	f103 0218 	add.w	r2, r3, #24
 800808c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7fb fea0 	bl	8003dd8 <lfs_dir_fetch>
 8008098:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
            if (err) {
 800809c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <lfs_fs_deorphan+0x72>
                return err;
 80080a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080a8:	e162      	b.n	8008370 <lfs_fs_deorphan+0x338>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 80080aa:	7ffb      	ldrb	r3, [r7, #31]
 80080ac:	f083 0301 	eor.w	r3, r3, #1
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 8125 	beq.w	8008302 <lfs_fs_deorphan+0x2ca>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 80080b8:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80080bc:	f107 0308 	add.w	r3, r7, #8
 80080c0:	3318      	adds	r3, #24
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7ff fdad 	bl	8007c24 <lfs_fs_parent>
 80080ca:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 80080ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	da07      	bge.n	80080e6 <lfs_fs_deorphan+0xae>
 80080d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080da:	f113 0f02 	cmn.w	r3, #2
 80080de:	d002      	beq.n	80080e6 <lfs_fs_deorphan+0xae>
                    return tag;
 80080e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080e4:	e10c      	b.n	8008300 <lfs_fs_deorphan+0x2c8>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 80080e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f040 80ac 	bne.w	8008248 <lfs_fs_deorphan+0x210>
 80080f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080f4:	f113 0f02 	cmn.w	r3, #2
 80080f8:	f000 80a6 	beq.w	8008248 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 80080fc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008100:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8008104:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	4613      	mov	r3, r2
 800810c:	4a9a      	ldr	r2, [pc, #616]	@ (8008378 <lfs_fs_deorphan+0x340>)
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7fa fd5c 	bl	8002bcc <lfs_dir_get>
 8008114:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8008118:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800811c:	2b00      	cmp	r3, #0
 800811e:	da02      	bge.n	8008126 <lfs_fs_deorphan+0xee>
                        return state;
 8008120:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                    return tag;
 8008124:	e124      	b.n	8008370 <lfs_fs_deorphan+0x338>
                    }
                    lfs_pair_fromle32(pair);
 8008126:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800812a:	4618      	mov	r0, r3
 800812c:	f7fa f833 	bl	8002196 <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 8008130:	f107 0308 	add.w	r3, r7, #8
 8008134:	f103 0218 	add.w	r2, r3, #24
 8008138:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800813c:	4611      	mov	r1, r2
 800813e:	4618      	mov	r0, r3
 8008140:	f7f9 fffc 	bl	800213c <lfs_pair_issync>
 8008144:	4603      	mov	r3, r0
 8008146:	f083 0301 	eor.w	r3, r3, #1
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b00      	cmp	r3, #0
 800814e:	d07b      	beq.n	8008248 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8008150:	6a38      	ldr	r0, [r7, #32]
 8008152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008154:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008158:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800815c:	4c87      	ldr	r4, [pc, #540]	@ (800837c <lfs_fs_deorphan+0x344>)
 800815e:	9403      	str	r4, [sp, #12]
 8008160:	9102      	str	r1, [sp, #8]
 8008162:	9201      	str	r2, [sp, #4]
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	4603      	mov	r3, r0
 8008168:	f241 3271 	movw	r2, #4977	@ 0x1371
 800816c:	4984      	ldr	r1, [pc, #528]	@ (8008380 <lfs_fs_deorphan+0x348>)
 800816e:	4885      	ldr	r0, [pc, #532]	@ (8008384 <lfs_fs_deorphan+0x34c>)
 8008170:	f000 fc68 	bl	8008a44 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8008174:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8008178:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	3330      	adds	r3, #48	@ 0x30
 8008180:	f107 0208 	add.w	r2, r7, #8
 8008184:	4611      	mov	r1, r2
 8008186:	4618      	mov	r0, r3
 8008188:	f7fa f960 	bl	800244c <lfs_gstate_hasmovehere>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d01c      	beq.n	80081cc <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008196:	4618      	mov	r0, r3
 8008198:	f7fa f89c 	bl	80022d4 <lfs_tag_id>
 800819c:	4603      	mov	r3, r0
 800819e:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 80081a2:	68b9      	ldr	r1, [r7, #8]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 80081aa:	4874      	ldr	r0, [pc, #464]	@ (800837c <lfs_fs_deorphan+0x344>)
 80081ac:	9002      	str	r0, [sp, #8]
 80081ae:	9201      	str	r2, [sp, #4]
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	460b      	mov	r3, r1
 80081b4:	f241 327c 	movw	r2, #4988	@ 0x137c
 80081b8:	4971      	ldr	r1, [pc, #452]	@ (8008380 <lfs_fs_deorphan+0x348>)
 80081ba:	4873      	ldr	r0, [pc, #460]	@ (8008388 <lfs_fs_deorphan+0x350>)
 80081bc:	f000 fc42 	bl	8008a44 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80081c0:	2200      	movs	r2, #0
 80081c2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f7ff fe14 	bl	8007df4 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 80081cc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7f9 fffa 	bl	80021ca <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80081d6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80081da:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80081de:	4293      	cmp	r3, r2
 80081e0:	d007      	beq.n	80081f2 <lfs_fs_deorphan+0x1ba>
 80081e2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80081e6:	029b      	lsls	r3, r3, #10
 80081e8:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80081ec:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80081f0:	e000      	b.n	80081f4 <lfs_fs_deorphan+0x1bc>
 80081f2:	2300      	movs	r3, #0
 80081f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081f8:	2300      	movs	r3, #0
 80081fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80081fe:	4b63      	ldr	r3, [pc, #396]	@ (800838c <lfs_fs_deorphan+0x354>)
 8008200:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008204:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008208:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800820c:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8008210:	f107 0108 	add.w	r1, r7, #8
 8008214:	2302      	movs	r3, #2
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7fd f886 	bl	8005328 <lfs_dir_orphaningcommit>
 800821c:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8008220:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008224:	4618      	mov	r0, r3
 8008226:	f7f9 ffb6 	bl	8002196 <lfs_pair_fromle32>
                        if (state < 0) {
 800822a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800822e:	2b00      	cmp	r3, #0
 8008230:	da02      	bge.n	8008238 <lfs_fs_deorphan+0x200>
                            return state;
 8008232:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 8008236:	e063      	b.n	8008300 <lfs_fs_deorphan+0x2c8>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8008238:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800823c:	2b03      	cmp	r3, #3
 800823e:	d16c      	bne.n	800831a <lfs_fs_deorphan+0x2e2>
                            moreorphans = true;
 8008240:	2301      	movs	r3, #1
 8008242:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8008246:	e068      	b.n	800831a <lfs_fs_deorphan+0x2e2>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 8008248:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800824c:	2b01      	cmp	r3, #1
 800824e:	d158      	bne.n	8008302 <lfs_fs_deorphan+0x2ca>
 8008250:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008254:	f113 0f02 	cmn.w	r3, #2
 8008258:	d153      	bne.n	8008302 <lfs_fs_deorphan+0x2ca>
 800825a:	78fb      	ldrb	r3, [r7, #3]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d050      	beq.n	8008302 <lfs_fs_deorphan+0x2ca>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8008260:	6a3a      	ldr	r2, [r7, #32]
 8008262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008264:	4945      	ldr	r1, [pc, #276]	@ (800837c <lfs_fs_deorphan+0x344>)
 8008266:	9101      	str	r1, [sp, #4]
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	4613      	mov	r3, r2
 800826c:	f241 329c 	movw	r2, #5020	@ 0x139c
 8008270:	4943      	ldr	r1, [pc, #268]	@ (8008380 <lfs_fs_deorphan+0x348>)
 8008272:	4847      	ldr	r0, [pc, #284]	@ (8008390 <lfs_fs_deorphan+0x358>)
 8008274:	f000 fbe6 	bl	8008a44 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800827e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008282:	4619      	mov	r1, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7fb fdc3 	bl	8003e10 <lfs_dir_getgstate>
 800828a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                    if (err) {
 800828e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008292:	2b00      	cmp	r3, #0
 8008294:	d002      	beq.n	800829c <lfs_fs_deorphan+0x264>
                        return err;
 8008296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800829a:	e030      	b.n	80082fe <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 800829c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80082a0:	3318      	adds	r3, #24
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7f9 ff91 	bl	80021ca <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80082a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80082ac:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80082b0:	051a      	lsls	r2, r3, #20
 80082b2:	4b38      	ldr	r3, [pc, #224]	@ (8008394 <lfs_fs_deorphan+0x35c>)
 80082b4:	4313      	orrs	r3, r2
 80082b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80082b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80082bc:	3318      	adds	r3, #24
 80082be:	677b      	str	r3, [r7, #116]	@ 0x74
 80082c0:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80082c4:	f107 0108 	add.w	r1, r7, #8
 80082c8:	2301      	movs	r3, #1
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7fd f82c 	bl	8005328 <lfs_dir_orphaningcommit>
 80082d0:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 80082d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80082d8:	3318      	adds	r3, #24
 80082da:	4618      	mov	r0, r3
 80082dc:	f7f9 ff5b 	bl	8002196 <lfs_pair_fromle32>
                    if (state < 0) {
 80082e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	da02      	bge.n	80082ee <lfs_fs_deorphan+0x2b6>
                        return state;
 80082e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082ec:	e007      	b.n	80082fe <lfs_fs_deorphan+0x2c6>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 80082ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	d110      	bne.n	8008318 <lfs_fs_deorphan+0x2e0>
                        moreorphans = true;
 80082f6:	2301      	movs	r3, #1
 80082f8:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 80082fc:	e00d      	b.n	800831a <lfs_fs_deorphan+0x2e2>
                    return tag;
 80082fe:	e037      	b.n	8008370 <lfs_fs_deorphan+0x338>
                return err;
 8008300:	e036      	b.n	8008370 <lfs_fs_deorphan+0x338>
                    // refetch tail
                    continue;
                }
            }

            pdir = dir;
 8008302:	f107 0408 	add.w	r4, r7, #8
 8008306:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 800830a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800830c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800830e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008312:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008316:	e000      	b.n	800831a <lfs_fs_deorphan+0x2e2>
                    continue;
 8008318:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 800831a:	f107 0308 	add.w	r3, r7, #8
 800831e:	3318      	adds	r3, #24
 8008320:	4618      	mov	r0, r3
 8008322:	f7f9 fec6 	bl	80020b2 <lfs_pair_isnull>
 8008326:	4603      	mov	r3, r0
 8008328:	f083 0301 	eor.w	r3, r3, #1
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	f47f aea8 	bne.w	8008084 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 8008334:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8008338:	2b00      	cmp	r3, #0
 800833a:	d001      	beq.n	8008340 <lfs_fs_deorphan+0x308>
 800833c:	2300      	movs	r3, #0
 800833e:	e002      	b.n	8008346 <lfs_fs_deorphan+0x30e>
 8008340:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008344:	3301      	adds	r3, #1
 8008346:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 800834a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800834e:	2b01      	cmp	r3, #1
 8008350:	f77f ae89 	ble.w	8008066 <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3330      	adds	r3, #48	@ 0x30
 8008358:	4618      	mov	r0, r3
 800835a:	f7fa f841 	bl	80023e0 <lfs_gstate_getorphans>
 800835e:	4603      	mov	r3, r0
 8008360:	425b      	negs	r3, r3
 8008362:	b2db      	uxtb	r3, r3
 8008364:	b25b      	sxtb	r3, r3
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7ff fcf3 	bl	8007d54 <lfs_fs_preporphans>
 800836e:	4603      	mov	r3, r0
}
 8008370:	4618      	mov	r0, r3
 8008372:	37b8      	adds	r7, #184	@ 0xb8
 8008374:	46bd      	mov	sp, r7
 8008376:	bdb0      	pop	{r4, r5, r7, pc}
 8008378:	7ffffc00 	.word	0x7ffffc00
 800837c:	0800993c 	.word	0x0800993c
 8008380:	0800982c 	.word	0x0800982c
 8008384:	0800a2d4 	.word	0x0800a2d4
 8008388:	0800a318 	.word	0x0800a318
 800838c:	600ffc08 	.word	0x600ffc08
 8008390:	0800a360 	.word	0x0800a360
 8008394:	000ffc08 	.word	0x000ffc08

08008398 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f7ff fd61 	bl	8007e68 <lfs_fs_desuperblock>
 80083a6:	60f8      	str	r0, [r7, #12]
    if (err) {
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <lfs_fs_forceconsistency+0x1a>
        return err;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	e013      	b.n	80083da <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7ff fdc4 	bl	8007f40 <lfs_fs_demove>
 80083b8:	60f8      	str	r0, [r7, #12]
    if (err) {
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <lfs_fs_forceconsistency+0x2c>
        return err;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	e00a      	b.n	80083da <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 80083c4:	2101      	movs	r1, #1
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7ff fe36 	bl	8008038 <lfs_fs_deorphan>
 80083cc:	60f8      	str	r0, [r7, #12]
    if (err) {
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d001      	beq.n	80083d8 <lfs_fs_forceconsistency+0x40>
        return err;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	e000      	b.n	80083da <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 80083e2:	b480      	push	{r7}
 80083e4:	b085      	sub	sp, #20
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	60fb      	str	r3, [r7, #12]
    *size += 1;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	1c5a      	adds	r2, r3, #1
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	601a      	str	r2, [r3, #0]
    return 0;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8008410:	2300      	movs	r3, #0
 8008412:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 8008414:	f107 0208 	add.w	r2, r7, #8
 8008418:	2300      	movs	r3, #0
 800841a:	4907      	ldr	r1, [pc, #28]	@ (8008438 <lfs_fs_size_+0x30>)
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f7ff f9ff 	bl	8007820 <lfs_fs_traverse_>
 8008422:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <lfs_fs_size_+0x26>
        return err;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	e000      	b.n	8008430 <lfs_fs_size_+0x28>
    }

    return size;
 800842e:	68bb      	ldr	r3, [r7, #8]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	080083e3 	.word	0x080083e3

0800843c <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8008446:	2300      	movs	r3, #0
 8008448:	60fb      	str	r3, [r7, #12]
    if (err) {
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <lfs_format+0x18>
        return err;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	e005      	b.n	8008460 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7fe ff04 	bl	8007264 <lfs_format_>
 800845c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800845e:	68fb      	ldr	r3, [r7, #12]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8008472:	2300      	movs	r3, #0
 8008474:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <lfs_mount+0x18>
        return err;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	e005      	b.n	800848c <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7fe ffa0 	bl	80073c8 <lfs_mount_>
 8008488:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800848a:	68fb      	ldr	r3, [r7, #12]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <lfs_unmount>:

int lfs_unmount(lfs_t *lfs) {
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 800849c:	2300      	movs	r3, #0
 800849e:	60fb      	str	r3, [r7, #12]
    if (err) {
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <lfs_unmount+0x16>
        return err;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	e004      	b.n	80084b4 <lfs_unmount+0x20>
    }
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);

    err = lfs_unmount_(lfs);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7ff f9ac 	bl	8007808 <lfs_unmount_>
 80084b0:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_unmount -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80084b2:	68fb      	ldr	r3, [r7, #12]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
 80084c8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80084ca:	2300      	movs	r3, #0
 80084cc:	617b      	str	r3, [r7, #20]
    if (err) {
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <lfs_file_open+0x1c>
        return err;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	e01a      	b.n	800850e <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084dc:	68b9      	ldr	r1, [r7, #8]
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fa f8e4 	bl	80026ac <lfs_mlist_isopen>
 80084e4:	4603      	mov	r3, r0
 80084e6:	f083 0301 	eor.w	r3, r3, #1
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d106      	bne.n	80084fe <lfs_file_open+0x42>
 80084f0:	4b09      	ldr	r3, [pc, #36]	@ (8008518 <lfs_file_open+0x5c>)
 80084f2:	4a0a      	ldr	r2, [pc, #40]	@ (800851c <lfs_file_open+0x60>)
 80084f4:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 80084f8:	4809      	ldr	r0, [pc, #36]	@ (8008520 <lfs_file_open+0x64>)
 80084fa:	f000 f8f3 	bl	80086e4 <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	68b9      	ldr	r1, [r7, #8]
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f7fd fe27 	bl	8006158 <lfs_file_open_>
 800850a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800850c:	697b      	ldr	r3, [r7, #20]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3718      	adds	r7, #24
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	0800a3b0 	.word	0x0800a3b0
 800851c:	0800a58c 	.word	0x0800a58c
 8008520:	0800982c 	.word	0x0800982c

08008524 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800852e:	2300      	movs	r3, #0
 8008530:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <lfs_file_close+0x18>
        return err;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	e015      	b.n	8008568 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	4618      	mov	r0, r3
 8008544:	f7fa f8b2 	bl	80026ac <lfs_mlist_isopen>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d106      	bne.n	800855c <lfs_file_close+0x38>
 800854e:	4b08      	ldr	r3, [pc, #32]	@ (8008570 <lfs_file_close+0x4c>)
 8008550:	4a08      	ldr	r2, [pc, #32]	@ (8008574 <lfs_file_close+0x50>)
 8008552:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 8008556:	4808      	ldr	r0, [pc, #32]	@ (8008578 <lfs_file_close+0x54>)
 8008558:	f000 f8c4 	bl	80086e4 <__assert_func>

    err = lfs_file_close_(lfs, file);
 800855c:	6839      	ldr	r1, [r7, #0]
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7fd fe12 	bl	8006188 <lfs_file_close_>
 8008564:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8008566:	68fb      	ldr	r3, [r7, #12]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	0800a3e8 	.word	0x0800a3e8
 8008574:	0800a59c 	.word	0x0800a59c
 8008578:	0800982c 	.word	0x0800982c

0800857c <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800858a:	2300      	movs	r3, #0
 800858c:	617b      	str	r3, [r7, #20]
    if (err) {
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <lfs_file_read+0x1c>
        return err;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	e017      	b.n	80085c8 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800859c:	68b9      	ldr	r1, [r7, #8]
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fa f884 	bl	80026ac <lfs_mlist_isopen>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d106      	bne.n	80085b8 <lfs_file_read+0x3c>
 80085aa:	4b09      	ldr	r3, [pc, #36]	@ (80085d0 <lfs_file_read+0x54>)
 80085ac:	4a09      	ldr	r2, [pc, #36]	@ (80085d4 <lfs_file_read+0x58>)
 80085ae:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 80085b2:	4809      	ldr	r0, [pc, #36]	@ (80085d8 <lfs_file_read+0x5c>)
 80085b4:	f000 f896 	bl	80086e4 <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	68b9      	ldr	r1, [r7, #8]
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f7fe f942 	bl	8006848 <lfs_file_read_>
 80085c4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 80085c6:	693b      	ldr	r3, [r7, #16]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3718      	adds	r7, #24
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	0800a3e8 	.word	0x0800a3e8
 80085d4:	0800a5ac 	.word	0x0800a5ac
 80085d8:	0800982c 	.word	0x0800982c

080085dc <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
 80085e8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80085ea:	2300      	movs	r3, #0
 80085ec:	617b      	str	r3, [r7, #20]
    if (err) {
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <lfs_file_write+0x1c>
        return err;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	e017      	b.n	8008628 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085fc:	68b9      	ldr	r1, [r7, #8]
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fa f854 	bl	80026ac <lfs_mlist_isopen>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d106      	bne.n	8008618 <lfs_file_write+0x3c>
 800860a:	4b09      	ldr	r3, [pc, #36]	@ (8008630 <lfs_file_write+0x54>)
 800860c:	4a09      	ldr	r2, [pc, #36]	@ (8008634 <lfs_file_write+0x58>)
 800860e:	f641 0105 	movw	r1, #6149	@ 0x1805
 8008612:	4809      	ldr	r0, [pc, #36]	@ (8008638 <lfs_file_write+0x5c>)
 8008614:	f000 f866 	bl	80086e4 <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	68b9      	ldr	r1, [r7, #8]
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f7fe fa58 	bl	8006ad4 <lfs_file_write_>
 8008624:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8008626:	693b      	ldr	r3, [r7, #16]
}
 8008628:	4618      	mov	r0, r3
 800862a:	3718      	adds	r7, #24
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	0800a3e8 	.word	0x0800a3e8
 8008634:	0800a5bc 	.word	0x0800a5bc
 8008638:	0800982c 	.word	0x0800982c

0800863c <lfs_file_rewind>:
    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}

int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008646:	2300      	movs	r3, #0
 8008648:	60fb      	str	r3, [r7, #12]
    if (err) {
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <lfs_file_rewind+0x18>
        return err;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	e005      	b.n	8008660 <lfs_file_rewind+0x24>
    }
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);

    err = lfs_file_rewind_(lfs, file);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7fe fb49 	bl	8006cee <lfs_file_rewind_>
 800865c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800865e:	68fb      	ldr	r3, [r7, #12]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8008678:	2300      	movs	r3, #0
 800867a:	617b      	str	r3, [r7, #20]
 800867c:	e024      	b.n	80086c8 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	091a      	lsrs	r2, r3, #4
 8008682:	6939      	ldr	r1, [r7, #16]
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	440b      	add	r3, r1
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	4619      	mov	r1, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	404b      	eors	r3, r1
 8008690:	f003 030f 	and.w	r3, r3, #15
 8008694:	4912      	ldr	r1, [pc, #72]	@ (80086e0 <lfs_crc+0x78>)
 8008696:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800869a:	4053      	eors	r3, r2
 800869c:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	091a      	lsrs	r2, r3, #4
 80086a2:	6939      	ldr	r1, [r7, #16]
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	440b      	add	r3, r1
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	091b      	lsrs	r3, r3, #4
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	4619      	mov	r1, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	404b      	eors	r3, r1
 80086b4:	f003 030f 	and.w	r3, r3, #15
 80086b8:	4909      	ldr	r1, [pc, #36]	@ (80086e0 <lfs_crc+0x78>)
 80086ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80086be:	4053      	eors	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	3301      	adds	r3, #1
 80086c6:	617b      	str	r3, [r7, #20]
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d3d6      	bcc.n	800867e <lfs_crc+0x16>
    }

    return crc;
 80086d0:	68fb      	ldr	r3, [r7, #12]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	371c      	adds	r7, #28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	0800a5cc 	.word	0x0800a5cc

080086e4 <__assert_func>:
 80086e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086e6:	4614      	mov	r4, r2
 80086e8:	461a      	mov	r2, r3
 80086ea:	4b09      	ldr	r3, [pc, #36]	@ (8008710 <__assert_func+0x2c>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4605      	mov	r5, r0
 80086f0:	68d8      	ldr	r0, [r3, #12]
 80086f2:	b14c      	cbz	r4, 8008708 <__assert_func+0x24>
 80086f4:	4b07      	ldr	r3, [pc, #28]	@ (8008714 <__assert_func+0x30>)
 80086f6:	9100      	str	r1, [sp, #0]
 80086f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086fc:	4906      	ldr	r1, [pc, #24]	@ (8008718 <__assert_func+0x34>)
 80086fe:	462b      	mov	r3, r5
 8008700:	f000 f970 	bl	80089e4 <fiprintf>
 8008704:	f000 fa41 	bl	8008b8a <abort>
 8008708:	4b04      	ldr	r3, [pc, #16]	@ (800871c <__assert_func+0x38>)
 800870a:	461c      	mov	r4, r3
 800870c:	e7f3      	b.n	80086f6 <__assert_func+0x12>
 800870e:	bf00      	nop
 8008710:	20000010 	.word	0x20000010
 8008714:	0800a60c 	.word	0x0800a60c
 8008718:	0800a619 	.word	0x0800a619
 800871c:	0800a647 	.word	0x0800a647

08008720 <malloc>:
 8008720:	4b02      	ldr	r3, [pc, #8]	@ (800872c <malloc+0xc>)
 8008722:	4601      	mov	r1, r0
 8008724:	6818      	ldr	r0, [r3, #0]
 8008726:	f000 b82d 	b.w	8008784 <_malloc_r>
 800872a:	bf00      	nop
 800872c:	20000010 	.word	0x20000010

08008730 <free>:
 8008730:	4b02      	ldr	r3, [pc, #8]	@ (800873c <free+0xc>)
 8008732:	4601      	mov	r1, r0
 8008734:	6818      	ldr	r0, [r3, #0]
 8008736:	f000 ba2f 	b.w	8008b98 <_free_r>
 800873a:	bf00      	nop
 800873c:	20000010 	.word	0x20000010

08008740 <sbrk_aligned>:
 8008740:	b570      	push	{r4, r5, r6, lr}
 8008742:	4e0f      	ldr	r6, [pc, #60]	@ (8008780 <sbrk_aligned+0x40>)
 8008744:	460c      	mov	r4, r1
 8008746:	6831      	ldr	r1, [r6, #0]
 8008748:	4605      	mov	r5, r0
 800874a:	b911      	cbnz	r1, 8008752 <sbrk_aligned+0x12>
 800874c:	f000 f9d2 	bl	8008af4 <_sbrk_r>
 8008750:	6030      	str	r0, [r6, #0]
 8008752:	4621      	mov	r1, r4
 8008754:	4628      	mov	r0, r5
 8008756:	f000 f9cd 	bl	8008af4 <_sbrk_r>
 800875a:	1c43      	adds	r3, r0, #1
 800875c:	d103      	bne.n	8008766 <sbrk_aligned+0x26>
 800875e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008762:	4620      	mov	r0, r4
 8008764:	bd70      	pop	{r4, r5, r6, pc}
 8008766:	1cc4      	adds	r4, r0, #3
 8008768:	f024 0403 	bic.w	r4, r4, #3
 800876c:	42a0      	cmp	r0, r4
 800876e:	d0f8      	beq.n	8008762 <sbrk_aligned+0x22>
 8008770:	1a21      	subs	r1, r4, r0
 8008772:	4628      	mov	r0, r5
 8008774:	f000 f9be 	bl	8008af4 <_sbrk_r>
 8008778:	3001      	adds	r0, #1
 800877a:	d1f2      	bne.n	8008762 <sbrk_aligned+0x22>
 800877c:	e7ef      	b.n	800875e <sbrk_aligned+0x1e>
 800877e:	bf00      	nop
 8008780:	20000098 	.word	0x20000098

08008784 <_malloc_r>:
 8008784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008788:	1ccd      	adds	r5, r1, #3
 800878a:	f025 0503 	bic.w	r5, r5, #3
 800878e:	3508      	adds	r5, #8
 8008790:	2d0c      	cmp	r5, #12
 8008792:	bf38      	it	cc
 8008794:	250c      	movcc	r5, #12
 8008796:	2d00      	cmp	r5, #0
 8008798:	4606      	mov	r6, r0
 800879a:	db01      	blt.n	80087a0 <_malloc_r+0x1c>
 800879c:	42a9      	cmp	r1, r5
 800879e:	d904      	bls.n	80087aa <_malloc_r+0x26>
 80087a0:	230c      	movs	r3, #12
 80087a2:	6033      	str	r3, [r6, #0]
 80087a4:	2000      	movs	r0, #0
 80087a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008880 <_malloc_r+0xfc>
 80087ae:	f000 f869 	bl	8008884 <__malloc_lock>
 80087b2:	f8d8 3000 	ldr.w	r3, [r8]
 80087b6:	461c      	mov	r4, r3
 80087b8:	bb44      	cbnz	r4, 800880c <_malloc_r+0x88>
 80087ba:	4629      	mov	r1, r5
 80087bc:	4630      	mov	r0, r6
 80087be:	f7ff ffbf 	bl	8008740 <sbrk_aligned>
 80087c2:	1c43      	adds	r3, r0, #1
 80087c4:	4604      	mov	r4, r0
 80087c6:	d158      	bne.n	800887a <_malloc_r+0xf6>
 80087c8:	f8d8 4000 	ldr.w	r4, [r8]
 80087cc:	4627      	mov	r7, r4
 80087ce:	2f00      	cmp	r7, #0
 80087d0:	d143      	bne.n	800885a <_malloc_r+0xd6>
 80087d2:	2c00      	cmp	r4, #0
 80087d4:	d04b      	beq.n	800886e <_malloc_r+0xea>
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	4639      	mov	r1, r7
 80087da:	4630      	mov	r0, r6
 80087dc:	eb04 0903 	add.w	r9, r4, r3
 80087e0:	f000 f988 	bl	8008af4 <_sbrk_r>
 80087e4:	4581      	cmp	r9, r0
 80087e6:	d142      	bne.n	800886e <_malloc_r+0xea>
 80087e8:	6821      	ldr	r1, [r4, #0]
 80087ea:	1a6d      	subs	r5, r5, r1
 80087ec:	4629      	mov	r1, r5
 80087ee:	4630      	mov	r0, r6
 80087f0:	f7ff ffa6 	bl	8008740 <sbrk_aligned>
 80087f4:	3001      	adds	r0, #1
 80087f6:	d03a      	beq.n	800886e <_malloc_r+0xea>
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	442b      	add	r3, r5
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	bb62      	cbnz	r2, 8008860 <_malloc_r+0xdc>
 8008806:	f8c8 7000 	str.w	r7, [r8]
 800880a:	e00f      	b.n	800882c <_malloc_r+0xa8>
 800880c:	6822      	ldr	r2, [r4, #0]
 800880e:	1b52      	subs	r2, r2, r5
 8008810:	d420      	bmi.n	8008854 <_malloc_r+0xd0>
 8008812:	2a0b      	cmp	r2, #11
 8008814:	d917      	bls.n	8008846 <_malloc_r+0xc2>
 8008816:	1961      	adds	r1, r4, r5
 8008818:	42a3      	cmp	r3, r4
 800881a:	6025      	str	r5, [r4, #0]
 800881c:	bf18      	it	ne
 800881e:	6059      	strne	r1, [r3, #4]
 8008820:	6863      	ldr	r3, [r4, #4]
 8008822:	bf08      	it	eq
 8008824:	f8c8 1000 	streq.w	r1, [r8]
 8008828:	5162      	str	r2, [r4, r5]
 800882a:	604b      	str	r3, [r1, #4]
 800882c:	4630      	mov	r0, r6
 800882e:	f000 f82f 	bl	8008890 <__malloc_unlock>
 8008832:	f104 000b 	add.w	r0, r4, #11
 8008836:	1d23      	adds	r3, r4, #4
 8008838:	f020 0007 	bic.w	r0, r0, #7
 800883c:	1ac2      	subs	r2, r0, r3
 800883e:	bf1c      	itt	ne
 8008840:	1a1b      	subne	r3, r3, r0
 8008842:	50a3      	strne	r3, [r4, r2]
 8008844:	e7af      	b.n	80087a6 <_malloc_r+0x22>
 8008846:	6862      	ldr	r2, [r4, #4]
 8008848:	42a3      	cmp	r3, r4
 800884a:	bf0c      	ite	eq
 800884c:	f8c8 2000 	streq.w	r2, [r8]
 8008850:	605a      	strne	r2, [r3, #4]
 8008852:	e7eb      	b.n	800882c <_malloc_r+0xa8>
 8008854:	4623      	mov	r3, r4
 8008856:	6864      	ldr	r4, [r4, #4]
 8008858:	e7ae      	b.n	80087b8 <_malloc_r+0x34>
 800885a:	463c      	mov	r4, r7
 800885c:	687f      	ldr	r7, [r7, #4]
 800885e:	e7b6      	b.n	80087ce <_malloc_r+0x4a>
 8008860:	461a      	mov	r2, r3
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	42a3      	cmp	r3, r4
 8008866:	d1fb      	bne.n	8008860 <_malloc_r+0xdc>
 8008868:	2300      	movs	r3, #0
 800886a:	6053      	str	r3, [r2, #4]
 800886c:	e7de      	b.n	800882c <_malloc_r+0xa8>
 800886e:	230c      	movs	r3, #12
 8008870:	6033      	str	r3, [r6, #0]
 8008872:	4630      	mov	r0, r6
 8008874:	f000 f80c 	bl	8008890 <__malloc_unlock>
 8008878:	e794      	b.n	80087a4 <_malloc_r+0x20>
 800887a:	6005      	str	r5, [r0, #0]
 800887c:	e7d6      	b.n	800882c <_malloc_r+0xa8>
 800887e:	bf00      	nop
 8008880:	2000009c 	.word	0x2000009c

08008884 <__malloc_lock>:
 8008884:	4801      	ldr	r0, [pc, #4]	@ (800888c <__malloc_lock+0x8>)
 8008886:	f000 b970 	b.w	8008b6a <__retarget_lock_acquire_recursive>
 800888a:	bf00      	nop
 800888c:	200001dc 	.word	0x200001dc

08008890 <__malloc_unlock>:
 8008890:	4801      	ldr	r0, [pc, #4]	@ (8008898 <__malloc_unlock+0x8>)
 8008892:	f000 b96b 	b.w	8008b6c <__retarget_lock_release_recursive>
 8008896:	bf00      	nop
 8008898:	200001dc 	.word	0x200001dc

0800889c <std>:
 800889c:	2300      	movs	r3, #0
 800889e:	b510      	push	{r4, lr}
 80088a0:	4604      	mov	r4, r0
 80088a2:	e9c0 3300 	strd	r3, r3, [r0]
 80088a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088aa:	6083      	str	r3, [r0, #8]
 80088ac:	8181      	strh	r1, [r0, #12]
 80088ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80088b0:	81c2      	strh	r2, [r0, #14]
 80088b2:	6183      	str	r3, [r0, #24]
 80088b4:	4619      	mov	r1, r3
 80088b6:	2208      	movs	r2, #8
 80088b8:	305c      	adds	r0, #92	@ 0x5c
 80088ba:	f000 f8e5 	bl	8008a88 <memset>
 80088be:	4b0d      	ldr	r3, [pc, #52]	@ (80088f4 <std+0x58>)
 80088c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80088c2:	4b0d      	ldr	r3, [pc, #52]	@ (80088f8 <std+0x5c>)
 80088c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80088c6:	4b0d      	ldr	r3, [pc, #52]	@ (80088fc <std+0x60>)
 80088c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80088ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008900 <std+0x64>)
 80088cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80088ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008904 <std+0x68>)
 80088d0:	6224      	str	r4, [r4, #32]
 80088d2:	429c      	cmp	r4, r3
 80088d4:	d006      	beq.n	80088e4 <std+0x48>
 80088d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80088da:	4294      	cmp	r4, r2
 80088dc:	d002      	beq.n	80088e4 <std+0x48>
 80088de:	33d0      	adds	r3, #208	@ 0xd0
 80088e0:	429c      	cmp	r4, r3
 80088e2:	d105      	bne.n	80088f0 <std+0x54>
 80088e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80088e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088ec:	f000 b93c 	b.w	8008b68 <__retarget_lock_init_recursive>
 80088f0:	bd10      	pop	{r4, pc}
 80088f2:	bf00      	nop
 80088f4:	08009321 	.word	0x08009321
 80088f8:	08009343 	.word	0x08009343
 80088fc:	0800937b 	.word	0x0800937b
 8008900:	0800939f 	.word	0x0800939f
 8008904:	200000a0 	.word	0x200000a0

08008908 <stdio_exit_handler>:
 8008908:	4a02      	ldr	r2, [pc, #8]	@ (8008914 <stdio_exit_handler+0xc>)
 800890a:	4903      	ldr	r1, [pc, #12]	@ (8008918 <stdio_exit_handler+0x10>)
 800890c:	4803      	ldr	r0, [pc, #12]	@ (800891c <stdio_exit_handler+0x14>)
 800890e:	f000 b87b 	b.w	8008a08 <_fwalk_sglue>
 8008912:	bf00      	nop
 8008914:	20000004 	.word	0x20000004
 8008918:	080092d1 	.word	0x080092d1
 800891c:	20000014 	.word	0x20000014

08008920 <cleanup_stdio>:
 8008920:	6841      	ldr	r1, [r0, #4]
 8008922:	4b0c      	ldr	r3, [pc, #48]	@ (8008954 <cleanup_stdio+0x34>)
 8008924:	4299      	cmp	r1, r3
 8008926:	b510      	push	{r4, lr}
 8008928:	4604      	mov	r4, r0
 800892a:	d001      	beq.n	8008930 <cleanup_stdio+0x10>
 800892c:	f000 fcd0 	bl	80092d0 <_fflush_r>
 8008930:	68a1      	ldr	r1, [r4, #8]
 8008932:	4b09      	ldr	r3, [pc, #36]	@ (8008958 <cleanup_stdio+0x38>)
 8008934:	4299      	cmp	r1, r3
 8008936:	d002      	beq.n	800893e <cleanup_stdio+0x1e>
 8008938:	4620      	mov	r0, r4
 800893a:	f000 fcc9 	bl	80092d0 <_fflush_r>
 800893e:	68e1      	ldr	r1, [r4, #12]
 8008940:	4b06      	ldr	r3, [pc, #24]	@ (800895c <cleanup_stdio+0x3c>)
 8008942:	4299      	cmp	r1, r3
 8008944:	d004      	beq.n	8008950 <cleanup_stdio+0x30>
 8008946:	4620      	mov	r0, r4
 8008948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800894c:	f000 bcc0 	b.w	80092d0 <_fflush_r>
 8008950:	bd10      	pop	{r4, pc}
 8008952:	bf00      	nop
 8008954:	200000a0 	.word	0x200000a0
 8008958:	20000108 	.word	0x20000108
 800895c:	20000170 	.word	0x20000170

08008960 <global_stdio_init.part.0>:
 8008960:	b510      	push	{r4, lr}
 8008962:	4b0b      	ldr	r3, [pc, #44]	@ (8008990 <global_stdio_init.part.0+0x30>)
 8008964:	4c0b      	ldr	r4, [pc, #44]	@ (8008994 <global_stdio_init.part.0+0x34>)
 8008966:	4a0c      	ldr	r2, [pc, #48]	@ (8008998 <global_stdio_init.part.0+0x38>)
 8008968:	601a      	str	r2, [r3, #0]
 800896a:	4620      	mov	r0, r4
 800896c:	2200      	movs	r2, #0
 800896e:	2104      	movs	r1, #4
 8008970:	f7ff ff94 	bl	800889c <std>
 8008974:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008978:	2201      	movs	r2, #1
 800897a:	2109      	movs	r1, #9
 800897c:	f7ff ff8e 	bl	800889c <std>
 8008980:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008984:	2202      	movs	r2, #2
 8008986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800898a:	2112      	movs	r1, #18
 800898c:	f7ff bf86 	b.w	800889c <std>
 8008990:	200001d8 	.word	0x200001d8
 8008994:	200000a0 	.word	0x200000a0
 8008998:	08008909 	.word	0x08008909

0800899c <__sfp_lock_acquire>:
 800899c:	4801      	ldr	r0, [pc, #4]	@ (80089a4 <__sfp_lock_acquire+0x8>)
 800899e:	f000 b8e4 	b.w	8008b6a <__retarget_lock_acquire_recursive>
 80089a2:	bf00      	nop
 80089a4:	200001dd 	.word	0x200001dd

080089a8 <__sfp_lock_release>:
 80089a8:	4801      	ldr	r0, [pc, #4]	@ (80089b0 <__sfp_lock_release+0x8>)
 80089aa:	f000 b8df 	b.w	8008b6c <__retarget_lock_release_recursive>
 80089ae:	bf00      	nop
 80089b0:	200001dd 	.word	0x200001dd

080089b4 <__sinit>:
 80089b4:	b510      	push	{r4, lr}
 80089b6:	4604      	mov	r4, r0
 80089b8:	f7ff fff0 	bl	800899c <__sfp_lock_acquire>
 80089bc:	6a23      	ldr	r3, [r4, #32]
 80089be:	b11b      	cbz	r3, 80089c8 <__sinit+0x14>
 80089c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089c4:	f7ff bff0 	b.w	80089a8 <__sfp_lock_release>
 80089c8:	4b04      	ldr	r3, [pc, #16]	@ (80089dc <__sinit+0x28>)
 80089ca:	6223      	str	r3, [r4, #32]
 80089cc:	4b04      	ldr	r3, [pc, #16]	@ (80089e0 <__sinit+0x2c>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1f5      	bne.n	80089c0 <__sinit+0xc>
 80089d4:	f7ff ffc4 	bl	8008960 <global_stdio_init.part.0>
 80089d8:	e7f2      	b.n	80089c0 <__sinit+0xc>
 80089da:	bf00      	nop
 80089dc:	08008921 	.word	0x08008921
 80089e0:	200001d8 	.word	0x200001d8

080089e4 <fiprintf>:
 80089e4:	b40e      	push	{r1, r2, r3}
 80089e6:	b503      	push	{r0, r1, lr}
 80089e8:	4601      	mov	r1, r0
 80089ea:	ab03      	add	r3, sp, #12
 80089ec:	4805      	ldr	r0, [pc, #20]	@ (8008a04 <fiprintf+0x20>)
 80089ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80089f2:	6800      	ldr	r0, [r0, #0]
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	f000 f943 	bl	8008c80 <_vfiprintf_r>
 80089fa:	b002      	add	sp, #8
 80089fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a00:	b003      	add	sp, #12
 8008a02:	4770      	bx	lr
 8008a04:	20000010 	.word	0x20000010

08008a08 <_fwalk_sglue>:
 8008a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a0c:	4607      	mov	r7, r0
 8008a0e:	4688      	mov	r8, r1
 8008a10:	4614      	mov	r4, r2
 8008a12:	2600      	movs	r6, #0
 8008a14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a18:	f1b9 0901 	subs.w	r9, r9, #1
 8008a1c:	d505      	bpl.n	8008a2a <_fwalk_sglue+0x22>
 8008a1e:	6824      	ldr	r4, [r4, #0]
 8008a20:	2c00      	cmp	r4, #0
 8008a22:	d1f7      	bne.n	8008a14 <_fwalk_sglue+0xc>
 8008a24:	4630      	mov	r0, r6
 8008a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a2a:	89ab      	ldrh	r3, [r5, #12]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d907      	bls.n	8008a40 <_fwalk_sglue+0x38>
 8008a30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a34:	3301      	adds	r3, #1
 8008a36:	d003      	beq.n	8008a40 <_fwalk_sglue+0x38>
 8008a38:	4629      	mov	r1, r5
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	47c0      	blx	r8
 8008a3e:	4306      	orrs	r6, r0
 8008a40:	3568      	adds	r5, #104	@ 0x68
 8008a42:	e7e9      	b.n	8008a18 <_fwalk_sglue+0x10>

08008a44 <iprintf>:
 8008a44:	b40f      	push	{r0, r1, r2, r3}
 8008a46:	b507      	push	{r0, r1, r2, lr}
 8008a48:	4906      	ldr	r1, [pc, #24]	@ (8008a64 <iprintf+0x20>)
 8008a4a:	ab04      	add	r3, sp, #16
 8008a4c:	6808      	ldr	r0, [r1, #0]
 8008a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a52:	6881      	ldr	r1, [r0, #8]
 8008a54:	9301      	str	r3, [sp, #4]
 8008a56:	f000 f913 	bl	8008c80 <_vfiprintf_r>
 8008a5a:	b003      	add	sp, #12
 8008a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a60:	b004      	add	sp, #16
 8008a62:	4770      	bx	lr
 8008a64:	20000010 	.word	0x20000010

08008a68 <memcmp>:
 8008a68:	b510      	push	{r4, lr}
 8008a6a:	3901      	subs	r1, #1
 8008a6c:	4402      	add	r2, r0
 8008a6e:	4290      	cmp	r0, r2
 8008a70:	d101      	bne.n	8008a76 <memcmp+0xe>
 8008a72:	2000      	movs	r0, #0
 8008a74:	e005      	b.n	8008a82 <memcmp+0x1a>
 8008a76:	7803      	ldrb	r3, [r0, #0]
 8008a78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	d001      	beq.n	8008a84 <memcmp+0x1c>
 8008a80:	1b18      	subs	r0, r3, r4
 8008a82:	bd10      	pop	{r4, pc}
 8008a84:	3001      	adds	r0, #1
 8008a86:	e7f2      	b.n	8008a6e <memcmp+0x6>

08008a88 <memset>:
 8008a88:	4402      	add	r2, r0
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d100      	bne.n	8008a92 <memset+0xa>
 8008a90:	4770      	bx	lr
 8008a92:	f803 1b01 	strb.w	r1, [r3], #1
 8008a96:	e7f9      	b.n	8008a8c <memset+0x4>

08008a98 <strchr>:
 8008a98:	b2c9      	uxtb	r1, r1
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aa2:	b112      	cbz	r2, 8008aaa <strchr+0x12>
 8008aa4:	428a      	cmp	r2, r1
 8008aa6:	d1f9      	bne.n	8008a9c <strchr+0x4>
 8008aa8:	4770      	bx	lr
 8008aaa:	2900      	cmp	r1, #0
 8008aac:	bf18      	it	ne
 8008aae:	2000      	movne	r0, #0
 8008ab0:	4770      	bx	lr

08008ab2 <strcspn>:
 8008ab2:	b570      	push	{r4, r5, r6, lr}
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	461e      	mov	r6, r3
 8008ab8:	f813 4b01 	ldrb.w	r4, [r3], #1
 8008abc:	b144      	cbz	r4, 8008ad0 <strcspn+0x1e>
 8008abe:	1e4a      	subs	r2, r1, #1
 8008ac0:	e001      	b.n	8008ac6 <strcspn+0x14>
 8008ac2:	42a5      	cmp	r5, r4
 8008ac4:	d004      	beq.n	8008ad0 <strcspn+0x1e>
 8008ac6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8008aca:	2d00      	cmp	r5, #0
 8008acc:	d1f9      	bne.n	8008ac2 <strcspn+0x10>
 8008ace:	e7f2      	b.n	8008ab6 <strcspn+0x4>
 8008ad0:	1a30      	subs	r0, r6, r0
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}

08008ad4 <strspn>:
 8008ad4:	b570      	push	{r4, r5, r6, lr}
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	461e      	mov	r6, r3
 8008ada:	f813 4b01 	ldrb.w	r4, [r3], #1
 8008ade:	b13c      	cbz	r4, 8008af0 <strspn+0x1c>
 8008ae0:	1e4a      	subs	r2, r1, #1
 8008ae2:	e001      	b.n	8008ae8 <strspn+0x14>
 8008ae4:	42a5      	cmp	r5, r4
 8008ae6:	d0f7      	beq.n	8008ad8 <strspn+0x4>
 8008ae8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8008aec:	2d00      	cmp	r5, #0
 8008aee:	d1f9      	bne.n	8008ae4 <strspn+0x10>
 8008af0:	1a30      	subs	r0, r6, r0
 8008af2:	bd70      	pop	{r4, r5, r6, pc}

08008af4 <_sbrk_r>:
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	4d06      	ldr	r5, [pc, #24]	@ (8008b10 <_sbrk_r+0x1c>)
 8008af8:	2300      	movs	r3, #0
 8008afa:	4604      	mov	r4, r0
 8008afc:	4608      	mov	r0, r1
 8008afe:	602b      	str	r3, [r5, #0]
 8008b00:	f7f8 f956 	bl	8000db0 <_sbrk>
 8008b04:	1c43      	adds	r3, r0, #1
 8008b06:	d102      	bne.n	8008b0e <_sbrk_r+0x1a>
 8008b08:	682b      	ldr	r3, [r5, #0]
 8008b0a:	b103      	cbz	r3, 8008b0e <_sbrk_r+0x1a>
 8008b0c:	6023      	str	r3, [r4, #0]
 8008b0e:	bd38      	pop	{r3, r4, r5, pc}
 8008b10:	200001e0 	.word	0x200001e0

08008b14 <__errno>:
 8008b14:	4b01      	ldr	r3, [pc, #4]	@ (8008b1c <__errno+0x8>)
 8008b16:	6818      	ldr	r0, [r3, #0]
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	20000010 	.word	0x20000010

08008b20 <__libc_init_array>:
 8008b20:	b570      	push	{r4, r5, r6, lr}
 8008b22:	4d0d      	ldr	r5, [pc, #52]	@ (8008b58 <__libc_init_array+0x38>)
 8008b24:	4c0d      	ldr	r4, [pc, #52]	@ (8008b5c <__libc_init_array+0x3c>)
 8008b26:	1b64      	subs	r4, r4, r5
 8008b28:	10a4      	asrs	r4, r4, #2
 8008b2a:	2600      	movs	r6, #0
 8008b2c:	42a6      	cmp	r6, r4
 8008b2e:	d109      	bne.n	8008b44 <__libc_init_array+0x24>
 8008b30:	4d0b      	ldr	r5, [pc, #44]	@ (8008b60 <__libc_init_array+0x40>)
 8008b32:	4c0c      	ldr	r4, [pc, #48]	@ (8008b64 <__libc_init_array+0x44>)
 8008b34:	f000 fdee 	bl	8009714 <_init>
 8008b38:	1b64      	subs	r4, r4, r5
 8008b3a:	10a4      	asrs	r4, r4, #2
 8008b3c:	2600      	movs	r6, #0
 8008b3e:	42a6      	cmp	r6, r4
 8008b40:	d105      	bne.n	8008b4e <__libc_init_array+0x2e>
 8008b42:	bd70      	pop	{r4, r5, r6, pc}
 8008b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b48:	4798      	blx	r3
 8008b4a:	3601      	adds	r6, #1
 8008b4c:	e7ee      	b.n	8008b2c <__libc_init_array+0xc>
 8008b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b52:	4798      	blx	r3
 8008b54:	3601      	adds	r6, #1
 8008b56:	e7f2      	b.n	8008b3e <__libc_init_array+0x1e>
 8008b58:	0800a684 	.word	0x0800a684
 8008b5c:	0800a684 	.word	0x0800a684
 8008b60:	0800a684 	.word	0x0800a684
 8008b64:	0800a688 	.word	0x0800a688

08008b68 <__retarget_lock_init_recursive>:
 8008b68:	4770      	bx	lr

08008b6a <__retarget_lock_acquire_recursive>:
 8008b6a:	4770      	bx	lr

08008b6c <__retarget_lock_release_recursive>:
 8008b6c:	4770      	bx	lr

08008b6e <memcpy>:
 8008b6e:	440a      	add	r2, r1
 8008b70:	4291      	cmp	r1, r2
 8008b72:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008b76:	d100      	bne.n	8008b7a <memcpy+0xc>
 8008b78:	4770      	bx	lr
 8008b7a:	b510      	push	{r4, lr}
 8008b7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b84:	4291      	cmp	r1, r2
 8008b86:	d1f9      	bne.n	8008b7c <memcpy+0xe>
 8008b88:	bd10      	pop	{r4, pc}

08008b8a <abort>:
 8008b8a:	b508      	push	{r3, lr}
 8008b8c:	2006      	movs	r0, #6
 8008b8e:	f000 fd29 	bl	80095e4 <raise>
 8008b92:	2001      	movs	r0, #1
 8008b94:	f7f8 f894 	bl	8000cc0 <_exit>

08008b98 <_free_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4605      	mov	r5, r0
 8008b9c:	2900      	cmp	r1, #0
 8008b9e:	d041      	beq.n	8008c24 <_free_r+0x8c>
 8008ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ba4:	1f0c      	subs	r4, r1, #4
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	bfb8      	it	lt
 8008baa:	18e4      	addlt	r4, r4, r3
 8008bac:	f7ff fe6a 	bl	8008884 <__malloc_lock>
 8008bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8008c28 <_free_r+0x90>)
 8008bb2:	6813      	ldr	r3, [r2, #0]
 8008bb4:	b933      	cbnz	r3, 8008bc4 <_free_r+0x2c>
 8008bb6:	6063      	str	r3, [r4, #4]
 8008bb8:	6014      	str	r4, [r2, #0]
 8008bba:	4628      	mov	r0, r5
 8008bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bc0:	f7ff be66 	b.w	8008890 <__malloc_unlock>
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	d908      	bls.n	8008bda <_free_r+0x42>
 8008bc8:	6820      	ldr	r0, [r4, #0]
 8008bca:	1821      	adds	r1, r4, r0
 8008bcc:	428b      	cmp	r3, r1
 8008bce:	bf01      	itttt	eq
 8008bd0:	6819      	ldreq	r1, [r3, #0]
 8008bd2:	685b      	ldreq	r3, [r3, #4]
 8008bd4:	1809      	addeq	r1, r1, r0
 8008bd6:	6021      	streq	r1, [r4, #0]
 8008bd8:	e7ed      	b.n	8008bb6 <_free_r+0x1e>
 8008bda:	461a      	mov	r2, r3
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	b10b      	cbz	r3, 8008be4 <_free_r+0x4c>
 8008be0:	42a3      	cmp	r3, r4
 8008be2:	d9fa      	bls.n	8008bda <_free_r+0x42>
 8008be4:	6811      	ldr	r1, [r2, #0]
 8008be6:	1850      	adds	r0, r2, r1
 8008be8:	42a0      	cmp	r0, r4
 8008bea:	d10b      	bne.n	8008c04 <_free_r+0x6c>
 8008bec:	6820      	ldr	r0, [r4, #0]
 8008bee:	4401      	add	r1, r0
 8008bf0:	1850      	adds	r0, r2, r1
 8008bf2:	4283      	cmp	r3, r0
 8008bf4:	6011      	str	r1, [r2, #0]
 8008bf6:	d1e0      	bne.n	8008bba <_free_r+0x22>
 8008bf8:	6818      	ldr	r0, [r3, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	6053      	str	r3, [r2, #4]
 8008bfe:	4408      	add	r0, r1
 8008c00:	6010      	str	r0, [r2, #0]
 8008c02:	e7da      	b.n	8008bba <_free_r+0x22>
 8008c04:	d902      	bls.n	8008c0c <_free_r+0x74>
 8008c06:	230c      	movs	r3, #12
 8008c08:	602b      	str	r3, [r5, #0]
 8008c0a:	e7d6      	b.n	8008bba <_free_r+0x22>
 8008c0c:	6820      	ldr	r0, [r4, #0]
 8008c0e:	1821      	adds	r1, r4, r0
 8008c10:	428b      	cmp	r3, r1
 8008c12:	bf04      	itt	eq
 8008c14:	6819      	ldreq	r1, [r3, #0]
 8008c16:	685b      	ldreq	r3, [r3, #4]
 8008c18:	6063      	str	r3, [r4, #4]
 8008c1a:	bf04      	itt	eq
 8008c1c:	1809      	addeq	r1, r1, r0
 8008c1e:	6021      	streq	r1, [r4, #0]
 8008c20:	6054      	str	r4, [r2, #4]
 8008c22:	e7ca      	b.n	8008bba <_free_r+0x22>
 8008c24:	bd38      	pop	{r3, r4, r5, pc}
 8008c26:	bf00      	nop
 8008c28:	2000009c 	.word	0x2000009c

08008c2c <__sfputc_r>:
 8008c2c:	6893      	ldr	r3, [r2, #8]
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	b410      	push	{r4}
 8008c34:	6093      	str	r3, [r2, #8]
 8008c36:	da08      	bge.n	8008c4a <__sfputc_r+0x1e>
 8008c38:	6994      	ldr	r4, [r2, #24]
 8008c3a:	42a3      	cmp	r3, r4
 8008c3c:	db01      	blt.n	8008c42 <__sfputc_r+0x16>
 8008c3e:	290a      	cmp	r1, #10
 8008c40:	d103      	bne.n	8008c4a <__sfputc_r+0x1e>
 8008c42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c46:	f000 bbae 	b.w	80093a6 <__swbuf_r>
 8008c4a:	6813      	ldr	r3, [r2, #0]
 8008c4c:	1c58      	adds	r0, r3, #1
 8008c4e:	6010      	str	r0, [r2, #0]
 8008c50:	7019      	strb	r1, [r3, #0]
 8008c52:	4608      	mov	r0, r1
 8008c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <__sfputs_r>:
 8008c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5c:	4606      	mov	r6, r0
 8008c5e:	460f      	mov	r7, r1
 8008c60:	4614      	mov	r4, r2
 8008c62:	18d5      	adds	r5, r2, r3
 8008c64:	42ac      	cmp	r4, r5
 8008c66:	d101      	bne.n	8008c6c <__sfputs_r+0x12>
 8008c68:	2000      	movs	r0, #0
 8008c6a:	e007      	b.n	8008c7c <__sfputs_r+0x22>
 8008c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c70:	463a      	mov	r2, r7
 8008c72:	4630      	mov	r0, r6
 8008c74:	f7ff ffda 	bl	8008c2c <__sfputc_r>
 8008c78:	1c43      	adds	r3, r0, #1
 8008c7a:	d1f3      	bne.n	8008c64 <__sfputs_r+0xa>
 8008c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c80 <_vfiprintf_r>:
 8008c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c84:	460d      	mov	r5, r1
 8008c86:	b09d      	sub	sp, #116	@ 0x74
 8008c88:	4614      	mov	r4, r2
 8008c8a:	4698      	mov	r8, r3
 8008c8c:	4606      	mov	r6, r0
 8008c8e:	b118      	cbz	r0, 8008c98 <_vfiprintf_r+0x18>
 8008c90:	6a03      	ldr	r3, [r0, #32]
 8008c92:	b90b      	cbnz	r3, 8008c98 <_vfiprintf_r+0x18>
 8008c94:	f7ff fe8e 	bl	80089b4 <__sinit>
 8008c98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c9a:	07d9      	lsls	r1, r3, #31
 8008c9c:	d405      	bmi.n	8008caa <_vfiprintf_r+0x2a>
 8008c9e:	89ab      	ldrh	r3, [r5, #12]
 8008ca0:	059a      	lsls	r2, r3, #22
 8008ca2:	d402      	bmi.n	8008caa <_vfiprintf_r+0x2a>
 8008ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ca6:	f7ff ff60 	bl	8008b6a <__retarget_lock_acquire_recursive>
 8008caa:	89ab      	ldrh	r3, [r5, #12]
 8008cac:	071b      	lsls	r3, r3, #28
 8008cae:	d501      	bpl.n	8008cb4 <_vfiprintf_r+0x34>
 8008cb0:	692b      	ldr	r3, [r5, #16]
 8008cb2:	b99b      	cbnz	r3, 8008cdc <_vfiprintf_r+0x5c>
 8008cb4:	4629      	mov	r1, r5
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	f000 fbb4 	bl	8009424 <__swsetup_r>
 8008cbc:	b170      	cbz	r0, 8008cdc <_vfiprintf_r+0x5c>
 8008cbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cc0:	07dc      	lsls	r4, r3, #31
 8008cc2:	d504      	bpl.n	8008cce <_vfiprintf_r+0x4e>
 8008cc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cc8:	b01d      	add	sp, #116	@ 0x74
 8008cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cce:	89ab      	ldrh	r3, [r5, #12]
 8008cd0:	0598      	lsls	r0, r3, #22
 8008cd2:	d4f7      	bmi.n	8008cc4 <_vfiprintf_r+0x44>
 8008cd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cd6:	f7ff ff49 	bl	8008b6c <__retarget_lock_release_recursive>
 8008cda:	e7f3      	b.n	8008cc4 <_vfiprintf_r+0x44>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ce0:	2320      	movs	r3, #32
 8008ce2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ce6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cea:	2330      	movs	r3, #48	@ 0x30
 8008cec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e9c <_vfiprintf_r+0x21c>
 8008cf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cf4:	f04f 0901 	mov.w	r9, #1
 8008cf8:	4623      	mov	r3, r4
 8008cfa:	469a      	mov	sl, r3
 8008cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d00:	b10a      	cbz	r2, 8008d06 <_vfiprintf_r+0x86>
 8008d02:	2a25      	cmp	r2, #37	@ 0x25
 8008d04:	d1f9      	bne.n	8008cfa <_vfiprintf_r+0x7a>
 8008d06:	ebba 0b04 	subs.w	fp, sl, r4
 8008d0a:	d00b      	beq.n	8008d24 <_vfiprintf_r+0xa4>
 8008d0c:	465b      	mov	r3, fp
 8008d0e:	4622      	mov	r2, r4
 8008d10:	4629      	mov	r1, r5
 8008d12:	4630      	mov	r0, r6
 8008d14:	f7ff ffa1 	bl	8008c5a <__sfputs_r>
 8008d18:	3001      	adds	r0, #1
 8008d1a:	f000 80a7 	beq.w	8008e6c <_vfiprintf_r+0x1ec>
 8008d1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d20:	445a      	add	r2, fp
 8008d22:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d24:	f89a 3000 	ldrb.w	r3, [sl]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 809f 	beq.w	8008e6c <_vfiprintf_r+0x1ec>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d38:	f10a 0a01 	add.w	sl, sl, #1
 8008d3c:	9304      	str	r3, [sp, #16]
 8008d3e:	9307      	str	r3, [sp, #28]
 8008d40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d44:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d46:	4654      	mov	r4, sl
 8008d48:	2205      	movs	r2, #5
 8008d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d4e:	4853      	ldr	r0, [pc, #332]	@ (8008e9c <_vfiprintf_r+0x21c>)
 8008d50:	f7f7 fa26 	bl	80001a0 <memchr>
 8008d54:	9a04      	ldr	r2, [sp, #16]
 8008d56:	b9d8      	cbnz	r0, 8008d90 <_vfiprintf_r+0x110>
 8008d58:	06d1      	lsls	r1, r2, #27
 8008d5a:	bf44      	itt	mi
 8008d5c:	2320      	movmi	r3, #32
 8008d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d62:	0713      	lsls	r3, r2, #28
 8008d64:	bf44      	itt	mi
 8008d66:	232b      	movmi	r3, #43	@ 0x2b
 8008d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d70:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d72:	d015      	beq.n	8008da0 <_vfiprintf_r+0x120>
 8008d74:	9a07      	ldr	r2, [sp, #28]
 8008d76:	4654      	mov	r4, sl
 8008d78:	2000      	movs	r0, #0
 8008d7a:	f04f 0c0a 	mov.w	ip, #10
 8008d7e:	4621      	mov	r1, r4
 8008d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d84:	3b30      	subs	r3, #48	@ 0x30
 8008d86:	2b09      	cmp	r3, #9
 8008d88:	d94b      	bls.n	8008e22 <_vfiprintf_r+0x1a2>
 8008d8a:	b1b0      	cbz	r0, 8008dba <_vfiprintf_r+0x13a>
 8008d8c:	9207      	str	r2, [sp, #28]
 8008d8e:	e014      	b.n	8008dba <_vfiprintf_r+0x13a>
 8008d90:	eba0 0308 	sub.w	r3, r0, r8
 8008d94:	fa09 f303 	lsl.w	r3, r9, r3
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	9304      	str	r3, [sp, #16]
 8008d9c:	46a2      	mov	sl, r4
 8008d9e:	e7d2      	b.n	8008d46 <_vfiprintf_r+0xc6>
 8008da0:	9b03      	ldr	r3, [sp, #12]
 8008da2:	1d19      	adds	r1, r3, #4
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	9103      	str	r1, [sp, #12]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	bfbb      	ittet	lt
 8008dac:	425b      	neglt	r3, r3
 8008dae:	f042 0202 	orrlt.w	r2, r2, #2
 8008db2:	9307      	strge	r3, [sp, #28]
 8008db4:	9307      	strlt	r3, [sp, #28]
 8008db6:	bfb8      	it	lt
 8008db8:	9204      	strlt	r2, [sp, #16]
 8008dba:	7823      	ldrb	r3, [r4, #0]
 8008dbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dbe:	d10a      	bne.n	8008dd6 <_vfiprintf_r+0x156>
 8008dc0:	7863      	ldrb	r3, [r4, #1]
 8008dc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dc4:	d132      	bne.n	8008e2c <_vfiprintf_r+0x1ac>
 8008dc6:	9b03      	ldr	r3, [sp, #12]
 8008dc8:	1d1a      	adds	r2, r3, #4
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	9203      	str	r2, [sp, #12]
 8008dce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dd2:	3402      	adds	r4, #2
 8008dd4:	9305      	str	r3, [sp, #20]
 8008dd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008eac <_vfiprintf_r+0x22c>
 8008dda:	7821      	ldrb	r1, [r4, #0]
 8008ddc:	2203      	movs	r2, #3
 8008dde:	4650      	mov	r0, sl
 8008de0:	f7f7 f9de 	bl	80001a0 <memchr>
 8008de4:	b138      	cbz	r0, 8008df6 <_vfiprintf_r+0x176>
 8008de6:	9b04      	ldr	r3, [sp, #16]
 8008de8:	eba0 000a 	sub.w	r0, r0, sl
 8008dec:	2240      	movs	r2, #64	@ 0x40
 8008dee:	4082      	lsls	r2, r0
 8008df0:	4313      	orrs	r3, r2
 8008df2:	3401      	adds	r4, #1
 8008df4:	9304      	str	r3, [sp, #16]
 8008df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dfa:	4829      	ldr	r0, [pc, #164]	@ (8008ea0 <_vfiprintf_r+0x220>)
 8008dfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e00:	2206      	movs	r2, #6
 8008e02:	f7f7 f9cd 	bl	80001a0 <memchr>
 8008e06:	2800      	cmp	r0, #0
 8008e08:	d03f      	beq.n	8008e8a <_vfiprintf_r+0x20a>
 8008e0a:	4b26      	ldr	r3, [pc, #152]	@ (8008ea4 <_vfiprintf_r+0x224>)
 8008e0c:	bb1b      	cbnz	r3, 8008e56 <_vfiprintf_r+0x1d6>
 8008e0e:	9b03      	ldr	r3, [sp, #12]
 8008e10:	3307      	adds	r3, #7
 8008e12:	f023 0307 	bic.w	r3, r3, #7
 8008e16:	3308      	adds	r3, #8
 8008e18:	9303      	str	r3, [sp, #12]
 8008e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e1c:	443b      	add	r3, r7
 8008e1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e20:	e76a      	b.n	8008cf8 <_vfiprintf_r+0x78>
 8008e22:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e26:	460c      	mov	r4, r1
 8008e28:	2001      	movs	r0, #1
 8008e2a:	e7a8      	b.n	8008d7e <_vfiprintf_r+0xfe>
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	3401      	adds	r4, #1
 8008e30:	9305      	str	r3, [sp, #20]
 8008e32:	4619      	mov	r1, r3
 8008e34:	f04f 0c0a 	mov.w	ip, #10
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e3e:	3a30      	subs	r2, #48	@ 0x30
 8008e40:	2a09      	cmp	r2, #9
 8008e42:	d903      	bls.n	8008e4c <_vfiprintf_r+0x1cc>
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d0c6      	beq.n	8008dd6 <_vfiprintf_r+0x156>
 8008e48:	9105      	str	r1, [sp, #20]
 8008e4a:	e7c4      	b.n	8008dd6 <_vfiprintf_r+0x156>
 8008e4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e50:	4604      	mov	r4, r0
 8008e52:	2301      	movs	r3, #1
 8008e54:	e7f0      	b.n	8008e38 <_vfiprintf_r+0x1b8>
 8008e56:	ab03      	add	r3, sp, #12
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	462a      	mov	r2, r5
 8008e5c:	4b12      	ldr	r3, [pc, #72]	@ (8008ea8 <_vfiprintf_r+0x228>)
 8008e5e:	a904      	add	r1, sp, #16
 8008e60:	4630      	mov	r0, r6
 8008e62:	f3af 8000 	nop.w
 8008e66:	4607      	mov	r7, r0
 8008e68:	1c78      	adds	r0, r7, #1
 8008e6a:	d1d6      	bne.n	8008e1a <_vfiprintf_r+0x19a>
 8008e6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e6e:	07d9      	lsls	r1, r3, #31
 8008e70:	d405      	bmi.n	8008e7e <_vfiprintf_r+0x1fe>
 8008e72:	89ab      	ldrh	r3, [r5, #12]
 8008e74:	059a      	lsls	r2, r3, #22
 8008e76:	d402      	bmi.n	8008e7e <_vfiprintf_r+0x1fe>
 8008e78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e7a:	f7ff fe77 	bl	8008b6c <__retarget_lock_release_recursive>
 8008e7e:	89ab      	ldrh	r3, [r5, #12]
 8008e80:	065b      	lsls	r3, r3, #25
 8008e82:	f53f af1f 	bmi.w	8008cc4 <_vfiprintf_r+0x44>
 8008e86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e88:	e71e      	b.n	8008cc8 <_vfiprintf_r+0x48>
 8008e8a:	ab03      	add	r3, sp, #12
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	462a      	mov	r2, r5
 8008e90:	4b05      	ldr	r3, [pc, #20]	@ (8008ea8 <_vfiprintf_r+0x228>)
 8008e92:	a904      	add	r1, sp, #16
 8008e94:	4630      	mov	r0, r6
 8008e96:	f000 f879 	bl	8008f8c <_printf_i>
 8008e9a:	e7e4      	b.n	8008e66 <_vfiprintf_r+0x1e6>
 8008e9c:	0800a648 	.word	0x0800a648
 8008ea0:	0800a652 	.word	0x0800a652
 8008ea4:	00000000 	.word	0x00000000
 8008ea8:	08008c5b 	.word	0x08008c5b
 8008eac:	0800a64e 	.word	0x0800a64e

08008eb0 <_printf_common>:
 8008eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb4:	4616      	mov	r6, r2
 8008eb6:	4698      	mov	r8, r3
 8008eb8:	688a      	ldr	r2, [r1, #8]
 8008eba:	690b      	ldr	r3, [r1, #16]
 8008ebc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	bfb8      	it	lt
 8008ec4:	4613      	movlt	r3, r2
 8008ec6:	6033      	str	r3, [r6, #0]
 8008ec8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ecc:	4607      	mov	r7, r0
 8008ece:	460c      	mov	r4, r1
 8008ed0:	b10a      	cbz	r2, 8008ed6 <_printf_common+0x26>
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	6033      	str	r3, [r6, #0]
 8008ed6:	6823      	ldr	r3, [r4, #0]
 8008ed8:	0699      	lsls	r1, r3, #26
 8008eda:	bf42      	ittt	mi
 8008edc:	6833      	ldrmi	r3, [r6, #0]
 8008ede:	3302      	addmi	r3, #2
 8008ee0:	6033      	strmi	r3, [r6, #0]
 8008ee2:	6825      	ldr	r5, [r4, #0]
 8008ee4:	f015 0506 	ands.w	r5, r5, #6
 8008ee8:	d106      	bne.n	8008ef8 <_printf_common+0x48>
 8008eea:	f104 0a19 	add.w	sl, r4, #25
 8008eee:	68e3      	ldr	r3, [r4, #12]
 8008ef0:	6832      	ldr	r2, [r6, #0]
 8008ef2:	1a9b      	subs	r3, r3, r2
 8008ef4:	42ab      	cmp	r3, r5
 8008ef6:	dc26      	bgt.n	8008f46 <_printf_common+0x96>
 8008ef8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008efc:	6822      	ldr	r2, [r4, #0]
 8008efe:	3b00      	subs	r3, #0
 8008f00:	bf18      	it	ne
 8008f02:	2301      	movne	r3, #1
 8008f04:	0692      	lsls	r2, r2, #26
 8008f06:	d42b      	bmi.n	8008f60 <_printf_common+0xb0>
 8008f08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f0c:	4641      	mov	r1, r8
 8008f0e:	4638      	mov	r0, r7
 8008f10:	47c8      	blx	r9
 8008f12:	3001      	adds	r0, #1
 8008f14:	d01e      	beq.n	8008f54 <_printf_common+0xa4>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	6922      	ldr	r2, [r4, #16]
 8008f1a:	f003 0306 	and.w	r3, r3, #6
 8008f1e:	2b04      	cmp	r3, #4
 8008f20:	bf02      	ittt	eq
 8008f22:	68e5      	ldreq	r5, [r4, #12]
 8008f24:	6833      	ldreq	r3, [r6, #0]
 8008f26:	1aed      	subeq	r5, r5, r3
 8008f28:	68a3      	ldr	r3, [r4, #8]
 8008f2a:	bf0c      	ite	eq
 8008f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f30:	2500      	movne	r5, #0
 8008f32:	4293      	cmp	r3, r2
 8008f34:	bfc4      	itt	gt
 8008f36:	1a9b      	subgt	r3, r3, r2
 8008f38:	18ed      	addgt	r5, r5, r3
 8008f3a:	2600      	movs	r6, #0
 8008f3c:	341a      	adds	r4, #26
 8008f3e:	42b5      	cmp	r5, r6
 8008f40:	d11a      	bne.n	8008f78 <_printf_common+0xc8>
 8008f42:	2000      	movs	r0, #0
 8008f44:	e008      	b.n	8008f58 <_printf_common+0xa8>
 8008f46:	2301      	movs	r3, #1
 8008f48:	4652      	mov	r2, sl
 8008f4a:	4641      	mov	r1, r8
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	47c8      	blx	r9
 8008f50:	3001      	adds	r0, #1
 8008f52:	d103      	bne.n	8008f5c <_printf_common+0xac>
 8008f54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f5c:	3501      	adds	r5, #1
 8008f5e:	e7c6      	b.n	8008eee <_printf_common+0x3e>
 8008f60:	18e1      	adds	r1, r4, r3
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	2030      	movs	r0, #48	@ 0x30
 8008f66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f6a:	4422      	add	r2, r4
 8008f6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f74:	3302      	adds	r3, #2
 8008f76:	e7c7      	b.n	8008f08 <_printf_common+0x58>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	4622      	mov	r2, r4
 8008f7c:	4641      	mov	r1, r8
 8008f7e:	4638      	mov	r0, r7
 8008f80:	47c8      	blx	r9
 8008f82:	3001      	adds	r0, #1
 8008f84:	d0e6      	beq.n	8008f54 <_printf_common+0xa4>
 8008f86:	3601      	adds	r6, #1
 8008f88:	e7d9      	b.n	8008f3e <_printf_common+0x8e>
	...

08008f8c <_printf_i>:
 8008f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f90:	7e0f      	ldrb	r7, [r1, #24]
 8008f92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f94:	2f78      	cmp	r7, #120	@ 0x78
 8008f96:	4691      	mov	r9, r2
 8008f98:	4680      	mov	r8, r0
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	469a      	mov	sl, r3
 8008f9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008fa2:	d807      	bhi.n	8008fb4 <_printf_i+0x28>
 8008fa4:	2f62      	cmp	r7, #98	@ 0x62
 8008fa6:	d80a      	bhi.n	8008fbe <_printf_i+0x32>
 8008fa8:	2f00      	cmp	r7, #0
 8008faa:	f000 80d1 	beq.w	8009150 <_printf_i+0x1c4>
 8008fae:	2f58      	cmp	r7, #88	@ 0x58
 8008fb0:	f000 80b8 	beq.w	8009124 <_printf_i+0x198>
 8008fb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008fbc:	e03a      	b.n	8009034 <_printf_i+0xa8>
 8008fbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008fc2:	2b15      	cmp	r3, #21
 8008fc4:	d8f6      	bhi.n	8008fb4 <_printf_i+0x28>
 8008fc6:	a101      	add	r1, pc, #4	@ (adr r1, 8008fcc <_printf_i+0x40>)
 8008fc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fcc:	08009025 	.word	0x08009025
 8008fd0:	08009039 	.word	0x08009039
 8008fd4:	08008fb5 	.word	0x08008fb5
 8008fd8:	08008fb5 	.word	0x08008fb5
 8008fdc:	08008fb5 	.word	0x08008fb5
 8008fe0:	08008fb5 	.word	0x08008fb5
 8008fe4:	08009039 	.word	0x08009039
 8008fe8:	08008fb5 	.word	0x08008fb5
 8008fec:	08008fb5 	.word	0x08008fb5
 8008ff0:	08008fb5 	.word	0x08008fb5
 8008ff4:	08008fb5 	.word	0x08008fb5
 8008ff8:	08009137 	.word	0x08009137
 8008ffc:	08009063 	.word	0x08009063
 8009000:	080090f1 	.word	0x080090f1
 8009004:	08008fb5 	.word	0x08008fb5
 8009008:	08008fb5 	.word	0x08008fb5
 800900c:	08009159 	.word	0x08009159
 8009010:	08008fb5 	.word	0x08008fb5
 8009014:	08009063 	.word	0x08009063
 8009018:	08008fb5 	.word	0x08008fb5
 800901c:	08008fb5 	.word	0x08008fb5
 8009020:	080090f9 	.word	0x080090f9
 8009024:	6833      	ldr	r3, [r6, #0]
 8009026:	1d1a      	adds	r2, r3, #4
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	6032      	str	r2, [r6, #0]
 800902c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009030:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009034:	2301      	movs	r3, #1
 8009036:	e09c      	b.n	8009172 <_printf_i+0x1e6>
 8009038:	6833      	ldr	r3, [r6, #0]
 800903a:	6820      	ldr	r0, [r4, #0]
 800903c:	1d19      	adds	r1, r3, #4
 800903e:	6031      	str	r1, [r6, #0]
 8009040:	0606      	lsls	r6, r0, #24
 8009042:	d501      	bpl.n	8009048 <_printf_i+0xbc>
 8009044:	681d      	ldr	r5, [r3, #0]
 8009046:	e003      	b.n	8009050 <_printf_i+0xc4>
 8009048:	0645      	lsls	r5, r0, #25
 800904a:	d5fb      	bpl.n	8009044 <_printf_i+0xb8>
 800904c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009050:	2d00      	cmp	r5, #0
 8009052:	da03      	bge.n	800905c <_printf_i+0xd0>
 8009054:	232d      	movs	r3, #45	@ 0x2d
 8009056:	426d      	negs	r5, r5
 8009058:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800905c:	4858      	ldr	r0, [pc, #352]	@ (80091c0 <_printf_i+0x234>)
 800905e:	230a      	movs	r3, #10
 8009060:	e011      	b.n	8009086 <_printf_i+0xfa>
 8009062:	6821      	ldr	r1, [r4, #0]
 8009064:	6833      	ldr	r3, [r6, #0]
 8009066:	0608      	lsls	r0, r1, #24
 8009068:	f853 5b04 	ldr.w	r5, [r3], #4
 800906c:	d402      	bmi.n	8009074 <_printf_i+0xe8>
 800906e:	0649      	lsls	r1, r1, #25
 8009070:	bf48      	it	mi
 8009072:	b2ad      	uxthmi	r5, r5
 8009074:	2f6f      	cmp	r7, #111	@ 0x6f
 8009076:	4852      	ldr	r0, [pc, #328]	@ (80091c0 <_printf_i+0x234>)
 8009078:	6033      	str	r3, [r6, #0]
 800907a:	bf14      	ite	ne
 800907c:	230a      	movne	r3, #10
 800907e:	2308      	moveq	r3, #8
 8009080:	2100      	movs	r1, #0
 8009082:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009086:	6866      	ldr	r6, [r4, #4]
 8009088:	60a6      	str	r6, [r4, #8]
 800908a:	2e00      	cmp	r6, #0
 800908c:	db05      	blt.n	800909a <_printf_i+0x10e>
 800908e:	6821      	ldr	r1, [r4, #0]
 8009090:	432e      	orrs	r6, r5
 8009092:	f021 0104 	bic.w	r1, r1, #4
 8009096:	6021      	str	r1, [r4, #0]
 8009098:	d04b      	beq.n	8009132 <_printf_i+0x1a6>
 800909a:	4616      	mov	r6, r2
 800909c:	fbb5 f1f3 	udiv	r1, r5, r3
 80090a0:	fb03 5711 	mls	r7, r3, r1, r5
 80090a4:	5dc7      	ldrb	r7, [r0, r7]
 80090a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090aa:	462f      	mov	r7, r5
 80090ac:	42bb      	cmp	r3, r7
 80090ae:	460d      	mov	r5, r1
 80090b0:	d9f4      	bls.n	800909c <_printf_i+0x110>
 80090b2:	2b08      	cmp	r3, #8
 80090b4:	d10b      	bne.n	80090ce <_printf_i+0x142>
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	07df      	lsls	r7, r3, #31
 80090ba:	d508      	bpl.n	80090ce <_printf_i+0x142>
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	6861      	ldr	r1, [r4, #4]
 80090c0:	4299      	cmp	r1, r3
 80090c2:	bfde      	ittt	le
 80090c4:	2330      	movle	r3, #48	@ 0x30
 80090c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090ca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80090ce:	1b92      	subs	r2, r2, r6
 80090d0:	6122      	str	r2, [r4, #16]
 80090d2:	f8cd a000 	str.w	sl, [sp]
 80090d6:	464b      	mov	r3, r9
 80090d8:	aa03      	add	r2, sp, #12
 80090da:	4621      	mov	r1, r4
 80090dc:	4640      	mov	r0, r8
 80090de:	f7ff fee7 	bl	8008eb0 <_printf_common>
 80090e2:	3001      	adds	r0, #1
 80090e4:	d14a      	bne.n	800917c <_printf_i+0x1f0>
 80090e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090ea:	b004      	add	sp, #16
 80090ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090f0:	6823      	ldr	r3, [r4, #0]
 80090f2:	f043 0320 	orr.w	r3, r3, #32
 80090f6:	6023      	str	r3, [r4, #0]
 80090f8:	4832      	ldr	r0, [pc, #200]	@ (80091c4 <_printf_i+0x238>)
 80090fa:	2778      	movs	r7, #120	@ 0x78
 80090fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009100:	6823      	ldr	r3, [r4, #0]
 8009102:	6831      	ldr	r1, [r6, #0]
 8009104:	061f      	lsls	r7, r3, #24
 8009106:	f851 5b04 	ldr.w	r5, [r1], #4
 800910a:	d402      	bmi.n	8009112 <_printf_i+0x186>
 800910c:	065f      	lsls	r7, r3, #25
 800910e:	bf48      	it	mi
 8009110:	b2ad      	uxthmi	r5, r5
 8009112:	6031      	str	r1, [r6, #0]
 8009114:	07d9      	lsls	r1, r3, #31
 8009116:	bf44      	itt	mi
 8009118:	f043 0320 	orrmi.w	r3, r3, #32
 800911c:	6023      	strmi	r3, [r4, #0]
 800911e:	b11d      	cbz	r5, 8009128 <_printf_i+0x19c>
 8009120:	2310      	movs	r3, #16
 8009122:	e7ad      	b.n	8009080 <_printf_i+0xf4>
 8009124:	4826      	ldr	r0, [pc, #152]	@ (80091c0 <_printf_i+0x234>)
 8009126:	e7e9      	b.n	80090fc <_printf_i+0x170>
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	f023 0320 	bic.w	r3, r3, #32
 800912e:	6023      	str	r3, [r4, #0]
 8009130:	e7f6      	b.n	8009120 <_printf_i+0x194>
 8009132:	4616      	mov	r6, r2
 8009134:	e7bd      	b.n	80090b2 <_printf_i+0x126>
 8009136:	6833      	ldr	r3, [r6, #0]
 8009138:	6825      	ldr	r5, [r4, #0]
 800913a:	6961      	ldr	r1, [r4, #20]
 800913c:	1d18      	adds	r0, r3, #4
 800913e:	6030      	str	r0, [r6, #0]
 8009140:	062e      	lsls	r6, r5, #24
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	d501      	bpl.n	800914a <_printf_i+0x1be>
 8009146:	6019      	str	r1, [r3, #0]
 8009148:	e002      	b.n	8009150 <_printf_i+0x1c4>
 800914a:	0668      	lsls	r0, r5, #25
 800914c:	d5fb      	bpl.n	8009146 <_printf_i+0x1ba>
 800914e:	8019      	strh	r1, [r3, #0]
 8009150:	2300      	movs	r3, #0
 8009152:	6123      	str	r3, [r4, #16]
 8009154:	4616      	mov	r6, r2
 8009156:	e7bc      	b.n	80090d2 <_printf_i+0x146>
 8009158:	6833      	ldr	r3, [r6, #0]
 800915a:	1d1a      	adds	r2, r3, #4
 800915c:	6032      	str	r2, [r6, #0]
 800915e:	681e      	ldr	r6, [r3, #0]
 8009160:	6862      	ldr	r2, [r4, #4]
 8009162:	2100      	movs	r1, #0
 8009164:	4630      	mov	r0, r6
 8009166:	f7f7 f81b 	bl	80001a0 <memchr>
 800916a:	b108      	cbz	r0, 8009170 <_printf_i+0x1e4>
 800916c:	1b80      	subs	r0, r0, r6
 800916e:	6060      	str	r0, [r4, #4]
 8009170:	6863      	ldr	r3, [r4, #4]
 8009172:	6123      	str	r3, [r4, #16]
 8009174:	2300      	movs	r3, #0
 8009176:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800917a:	e7aa      	b.n	80090d2 <_printf_i+0x146>
 800917c:	6923      	ldr	r3, [r4, #16]
 800917e:	4632      	mov	r2, r6
 8009180:	4649      	mov	r1, r9
 8009182:	4640      	mov	r0, r8
 8009184:	47d0      	blx	sl
 8009186:	3001      	adds	r0, #1
 8009188:	d0ad      	beq.n	80090e6 <_printf_i+0x15a>
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	079b      	lsls	r3, r3, #30
 800918e:	d413      	bmi.n	80091b8 <_printf_i+0x22c>
 8009190:	68e0      	ldr	r0, [r4, #12]
 8009192:	9b03      	ldr	r3, [sp, #12]
 8009194:	4298      	cmp	r0, r3
 8009196:	bfb8      	it	lt
 8009198:	4618      	movlt	r0, r3
 800919a:	e7a6      	b.n	80090ea <_printf_i+0x15e>
 800919c:	2301      	movs	r3, #1
 800919e:	4632      	mov	r2, r6
 80091a0:	4649      	mov	r1, r9
 80091a2:	4640      	mov	r0, r8
 80091a4:	47d0      	blx	sl
 80091a6:	3001      	adds	r0, #1
 80091a8:	d09d      	beq.n	80090e6 <_printf_i+0x15a>
 80091aa:	3501      	adds	r5, #1
 80091ac:	68e3      	ldr	r3, [r4, #12]
 80091ae:	9903      	ldr	r1, [sp, #12]
 80091b0:	1a5b      	subs	r3, r3, r1
 80091b2:	42ab      	cmp	r3, r5
 80091b4:	dcf2      	bgt.n	800919c <_printf_i+0x210>
 80091b6:	e7eb      	b.n	8009190 <_printf_i+0x204>
 80091b8:	2500      	movs	r5, #0
 80091ba:	f104 0619 	add.w	r6, r4, #25
 80091be:	e7f5      	b.n	80091ac <_printf_i+0x220>
 80091c0:	0800a659 	.word	0x0800a659
 80091c4:	0800a66a 	.word	0x0800a66a

080091c8 <__sflush_r>:
 80091c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d0:	0716      	lsls	r6, r2, #28
 80091d2:	4605      	mov	r5, r0
 80091d4:	460c      	mov	r4, r1
 80091d6:	d454      	bmi.n	8009282 <__sflush_r+0xba>
 80091d8:	684b      	ldr	r3, [r1, #4]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	dc02      	bgt.n	80091e4 <__sflush_r+0x1c>
 80091de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	dd48      	ble.n	8009276 <__sflush_r+0xae>
 80091e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091e6:	2e00      	cmp	r6, #0
 80091e8:	d045      	beq.n	8009276 <__sflush_r+0xae>
 80091ea:	2300      	movs	r3, #0
 80091ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80091f0:	682f      	ldr	r7, [r5, #0]
 80091f2:	6a21      	ldr	r1, [r4, #32]
 80091f4:	602b      	str	r3, [r5, #0]
 80091f6:	d030      	beq.n	800925a <__sflush_r+0x92>
 80091f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80091fa:	89a3      	ldrh	r3, [r4, #12]
 80091fc:	0759      	lsls	r1, r3, #29
 80091fe:	d505      	bpl.n	800920c <__sflush_r+0x44>
 8009200:	6863      	ldr	r3, [r4, #4]
 8009202:	1ad2      	subs	r2, r2, r3
 8009204:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009206:	b10b      	cbz	r3, 800920c <__sflush_r+0x44>
 8009208:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800920a:	1ad2      	subs	r2, r2, r3
 800920c:	2300      	movs	r3, #0
 800920e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009210:	6a21      	ldr	r1, [r4, #32]
 8009212:	4628      	mov	r0, r5
 8009214:	47b0      	blx	r6
 8009216:	1c43      	adds	r3, r0, #1
 8009218:	89a3      	ldrh	r3, [r4, #12]
 800921a:	d106      	bne.n	800922a <__sflush_r+0x62>
 800921c:	6829      	ldr	r1, [r5, #0]
 800921e:	291d      	cmp	r1, #29
 8009220:	d82b      	bhi.n	800927a <__sflush_r+0xb2>
 8009222:	4a2a      	ldr	r2, [pc, #168]	@ (80092cc <__sflush_r+0x104>)
 8009224:	40ca      	lsrs	r2, r1
 8009226:	07d6      	lsls	r6, r2, #31
 8009228:	d527      	bpl.n	800927a <__sflush_r+0xb2>
 800922a:	2200      	movs	r2, #0
 800922c:	6062      	str	r2, [r4, #4]
 800922e:	04d9      	lsls	r1, r3, #19
 8009230:	6922      	ldr	r2, [r4, #16]
 8009232:	6022      	str	r2, [r4, #0]
 8009234:	d504      	bpl.n	8009240 <__sflush_r+0x78>
 8009236:	1c42      	adds	r2, r0, #1
 8009238:	d101      	bne.n	800923e <__sflush_r+0x76>
 800923a:	682b      	ldr	r3, [r5, #0]
 800923c:	b903      	cbnz	r3, 8009240 <__sflush_r+0x78>
 800923e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009240:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009242:	602f      	str	r7, [r5, #0]
 8009244:	b1b9      	cbz	r1, 8009276 <__sflush_r+0xae>
 8009246:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800924a:	4299      	cmp	r1, r3
 800924c:	d002      	beq.n	8009254 <__sflush_r+0x8c>
 800924e:	4628      	mov	r0, r5
 8009250:	f7ff fca2 	bl	8008b98 <_free_r>
 8009254:	2300      	movs	r3, #0
 8009256:	6363      	str	r3, [r4, #52]	@ 0x34
 8009258:	e00d      	b.n	8009276 <__sflush_r+0xae>
 800925a:	2301      	movs	r3, #1
 800925c:	4628      	mov	r0, r5
 800925e:	47b0      	blx	r6
 8009260:	4602      	mov	r2, r0
 8009262:	1c50      	adds	r0, r2, #1
 8009264:	d1c9      	bne.n	80091fa <__sflush_r+0x32>
 8009266:	682b      	ldr	r3, [r5, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d0c6      	beq.n	80091fa <__sflush_r+0x32>
 800926c:	2b1d      	cmp	r3, #29
 800926e:	d001      	beq.n	8009274 <__sflush_r+0xac>
 8009270:	2b16      	cmp	r3, #22
 8009272:	d11e      	bne.n	80092b2 <__sflush_r+0xea>
 8009274:	602f      	str	r7, [r5, #0]
 8009276:	2000      	movs	r0, #0
 8009278:	e022      	b.n	80092c0 <__sflush_r+0xf8>
 800927a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800927e:	b21b      	sxth	r3, r3
 8009280:	e01b      	b.n	80092ba <__sflush_r+0xf2>
 8009282:	690f      	ldr	r7, [r1, #16]
 8009284:	2f00      	cmp	r7, #0
 8009286:	d0f6      	beq.n	8009276 <__sflush_r+0xae>
 8009288:	0793      	lsls	r3, r2, #30
 800928a:	680e      	ldr	r6, [r1, #0]
 800928c:	bf08      	it	eq
 800928e:	694b      	ldreq	r3, [r1, #20]
 8009290:	600f      	str	r7, [r1, #0]
 8009292:	bf18      	it	ne
 8009294:	2300      	movne	r3, #0
 8009296:	eba6 0807 	sub.w	r8, r6, r7
 800929a:	608b      	str	r3, [r1, #8]
 800929c:	f1b8 0f00 	cmp.w	r8, #0
 80092a0:	dde9      	ble.n	8009276 <__sflush_r+0xae>
 80092a2:	6a21      	ldr	r1, [r4, #32]
 80092a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80092a6:	4643      	mov	r3, r8
 80092a8:	463a      	mov	r2, r7
 80092aa:	4628      	mov	r0, r5
 80092ac:	47b0      	blx	r6
 80092ae:	2800      	cmp	r0, #0
 80092b0:	dc08      	bgt.n	80092c4 <__sflush_r+0xfc>
 80092b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092ba:	81a3      	strh	r3, [r4, #12]
 80092bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092c4:	4407      	add	r7, r0
 80092c6:	eba8 0800 	sub.w	r8, r8, r0
 80092ca:	e7e7      	b.n	800929c <__sflush_r+0xd4>
 80092cc:	20400001 	.word	0x20400001

080092d0 <_fflush_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	690b      	ldr	r3, [r1, #16]
 80092d4:	4605      	mov	r5, r0
 80092d6:	460c      	mov	r4, r1
 80092d8:	b913      	cbnz	r3, 80092e0 <_fflush_r+0x10>
 80092da:	2500      	movs	r5, #0
 80092dc:	4628      	mov	r0, r5
 80092de:	bd38      	pop	{r3, r4, r5, pc}
 80092e0:	b118      	cbz	r0, 80092ea <_fflush_r+0x1a>
 80092e2:	6a03      	ldr	r3, [r0, #32]
 80092e4:	b90b      	cbnz	r3, 80092ea <_fflush_r+0x1a>
 80092e6:	f7ff fb65 	bl	80089b4 <__sinit>
 80092ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d0f3      	beq.n	80092da <_fflush_r+0xa>
 80092f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80092f4:	07d0      	lsls	r0, r2, #31
 80092f6:	d404      	bmi.n	8009302 <_fflush_r+0x32>
 80092f8:	0599      	lsls	r1, r3, #22
 80092fa:	d402      	bmi.n	8009302 <_fflush_r+0x32>
 80092fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092fe:	f7ff fc34 	bl	8008b6a <__retarget_lock_acquire_recursive>
 8009302:	4628      	mov	r0, r5
 8009304:	4621      	mov	r1, r4
 8009306:	f7ff ff5f 	bl	80091c8 <__sflush_r>
 800930a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800930c:	07da      	lsls	r2, r3, #31
 800930e:	4605      	mov	r5, r0
 8009310:	d4e4      	bmi.n	80092dc <_fflush_r+0xc>
 8009312:	89a3      	ldrh	r3, [r4, #12]
 8009314:	059b      	lsls	r3, r3, #22
 8009316:	d4e1      	bmi.n	80092dc <_fflush_r+0xc>
 8009318:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800931a:	f7ff fc27 	bl	8008b6c <__retarget_lock_release_recursive>
 800931e:	e7dd      	b.n	80092dc <_fflush_r+0xc>

08009320 <__sread>:
 8009320:	b510      	push	{r4, lr}
 8009322:	460c      	mov	r4, r1
 8009324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009328:	f000 f986 	bl	8009638 <_read_r>
 800932c:	2800      	cmp	r0, #0
 800932e:	bfab      	itete	ge
 8009330:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009332:	89a3      	ldrhlt	r3, [r4, #12]
 8009334:	181b      	addge	r3, r3, r0
 8009336:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800933a:	bfac      	ite	ge
 800933c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800933e:	81a3      	strhlt	r3, [r4, #12]
 8009340:	bd10      	pop	{r4, pc}

08009342 <__swrite>:
 8009342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009346:	461f      	mov	r7, r3
 8009348:	898b      	ldrh	r3, [r1, #12]
 800934a:	05db      	lsls	r3, r3, #23
 800934c:	4605      	mov	r5, r0
 800934e:	460c      	mov	r4, r1
 8009350:	4616      	mov	r6, r2
 8009352:	d505      	bpl.n	8009360 <__swrite+0x1e>
 8009354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009358:	2302      	movs	r3, #2
 800935a:	2200      	movs	r2, #0
 800935c:	f000 f95a 	bl	8009614 <_lseek_r>
 8009360:	89a3      	ldrh	r3, [r4, #12]
 8009362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009366:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800936a:	81a3      	strh	r3, [r4, #12]
 800936c:	4632      	mov	r2, r6
 800936e:	463b      	mov	r3, r7
 8009370:	4628      	mov	r0, r5
 8009372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009376:	f000 b985 	b.w	8009684 <_write_r>

0800937a <__sseek>:
 800937a:	b510      	push	{r4, lr}
 800937c:	460c      	mov	r4, r1
 800937e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009382:	f000 f947 	bl	8009614 <_lseek_r>
 8009386:	1c43      	adds	r3, r0, #1
 8009388:	89a3      	ldrh	r3, [r4, #12]
 800938a:	bf15      	itete	ne
 800938c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800938e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009392:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009396:	81a3      	strheq	r3, [r4, #12]
 8009398:	bf18      	it	ne
 800939a:	81a3      	strhne	r3, [r4, #12]
 800939c:	bd10      	pop	{r4, pc}

0800939e <__sclose>:
 800939e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a2:	f000 b981 	b.w	80096a8 <_close_r>

080093a6 <__swbuf_r>:
 80093a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a8:	460e      	mov	r6, r1
 80093aa:	4614      	mov	r4, r2
 80093ac:	4605      	mov	r5, r0
 80093ae:	b118      	cbz	r0, 80093b8 <__swbuf_r+0x12>
 80093b0:	6a03      	ldr	r3, [r0, #32]
 80093b2:	b90b      	cbnz	r3, 80093b8 <__swbuf_r+0x12>
 80093b4:	f7ff fafe 	bl	80089b4 <__sinit>
 80093b8:	69a3      	ldr	r3, [r4, #24]
 80093ba:	60a3      	str	r3, [r4, #8]
 80093bc:	89a3      	ldrh	r3, [r4, #12]
 80093be:	071a      	lsls	r2, r3, #28
 80093c0:	d501      	bpl.n	80093c6 <__swbuf_r+0x20>
 80093c2:	6923      	ldr	r3, [r4, #16]
 80093c4:	b943      	cbnz	r3, 80093d8 <__swbuf_r+0x32>
 80093c6:	4621      	mov	r1, r4
 80093c8:	4628      	mov	r0, r5
 80093ca:	f000 f82b 	bl	8009424 <__swsetup_r>
 80093ce:	b118      	cbz	r0, 80093d8 <__swbuf_r+0x32>
 80093d0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80093d4:	4638      	mov	r0, r7
 80093d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	6922      	ldr	r2, [r4, #16]
 80093dc:	1a98      	subs	r0, r3, r2
 80093de:	6963      	ldr	r3, [r4, #20]
 80093e0:	b2f6      	uxtb	r6, r6
 80093e2:	4283      	cmp	r3, r0
 80093e4:	4637      	mov	r7, r6
 80093e6:	dc05      	bgt.n	80093f4 <__swbuf_r+0x4e>
 80093e8:	4621      	mov	r1, r4
 80093ea:	4628      	mov	r0, r5
 80093ec:	f7ff ff70 	bl	80092d0 <_fflush_r>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d1ed      	bne.n	80093d0 <__swbuf_r+0x2a>
 80093f4:	68a3      	ldr	r3, [r4, #8]
 80093f6:	3b01      	subs	r3, #1
 80093f8:	60a3      	str	r3, [r4, #8]
 80093fa:	6823      	ldr	r3, [r4, #0]
 80093fc:	1c5a      	adds	r2, r3, #1
 80093fe:	6022      	str	r2, [r4, #0]
 8009400:	701e      	strb	r6, [r3, #0]
 8009402:	6962      	ldr	r2, [r4, #20]
 8009404:	1c43      	adds	r3, r0, #1
 8009406:	429a      	cmp	r2, r3
 8009408:	d004      	beq.n	8009414 <__swbuf_r+0x6e>
 800940a:	89a3      	ldrh	r3, [r4, #12]
 800940c:	07db      	lsls	r3, r3, #31
 800940e:	d5e1      	bpl.n	80093d4 <__swbuf_r+0x2e>
 8009410:	2e0a      	cmp	r6, #10
 8009412:	d1df      	bne.n	80093d4 <__swbuf_r+0x2e>
 8009414:	4621      	mov	r1, r4
 8009416:	4628      	mov	r0, r5
 8009418:	f7ff ff5a 	bl	80092d0 <_fflush_r>
 800941c:	2800      	cmp	r0, #0
 800941e:	d0d9      	beq.n	80093d4 <__swbuf_r+0x2e>
 8009420:	e7d6      	b.n	80093d0 <__swbuf_r+0x2a>
	...

08009424 <__swsetup_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	4b29      	ldr	r3, [pc, #164]	@ (80094cc <__swsetup_r+0xa8>)
 8009428:	4605      	mov	r5, r0
 800942a:	6818      	ldr	r0, [r3, #0]
 800942c:	460c      	mov	r4, r1
 800942e:	b118      	cbz	r0, 8009438 <__swsetup_r+0x14>
 8009430:	6a03      	ldr	r3, [r0, #32]
 8009432:	b90b      	cbnz	r3, 8009438 <__swsetup_r+0x14>
 8009434:	f7ff fabe 	bl	80089b4 <__sinit>
 8009438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800943c:	0719      	lsls	r1, r3, #28
 800943e:	d422      	bmi.n	8009486 <__swsetup_r+0x62>
 8009440:	06da      	lsls	r2, r3, #27
 8009442:	d407      	bmi.n	8009454 <__swsetup_r+0x30>
 8009444:	2209      	movs	r2, #9
 8009446:	602a      	str	r2, [r5, #0]
 8009448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800944c:	81a3      	strh	r3, [r4, #12]
 800944e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009452:	e033      	b.n	80094bc <__swsetup_r+0x98>
 8009454:	0758      	lsls	r0, r3, #29
 8009456:	d512      	bpl.n	800947e <__swsetup_r+0x5a>
 8009458:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800945a:	b141      	cbz	r1, 800946e <__swsetup_r+0x4a>
 800945c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009460:	4299      	cmp	r1, r3
 8009462:	d002      	beq.n	800946a <__swsetup_r+0x46>
 8009464:	4628      	mov	r0, r5
 8009466:	f7ff fb97 	bl	8008b98 <_free_r>
 800946a:	2300      	movs	r3, #0
 800946c:	6363      	str	r3, [r4, #52]	@ 0x34
 800946e:	89a3      	ldrh	r3, [r4, #12]
 8009470:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009474:	81a3      	strh	r3, [r4, #12]
 8009476:	2300      	movs	r3, #0
 8009478:	6063      	str	r3, [r4, #4]
 800947a:	6923      	ldr	r3, [r4, #16]
 800947c:	6023      	str	r3, [r4, #0]
 800947e:	89a3      	ldrh	r3, [r4, #12]
 8009480:	f043 0308 	orr.w	r3, r3, #8
 8009484:	81a3      	strh	r3, [r4, #12]
 8009486:	6923      	ldr	r3, [r4, #16]
 8009488:	b94b      	cbnz	r3, 800949e <__swsetup_r+0x7a>
 800948a:	89a3      	ldrh	r3, [r4, #12]
 800948c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009494:	d003      	beq.n	800949e <__swsetup_r+0x7a>
 8009496:	4621      	mov	r1, r4
 8009498:	4628      	mov	r0, r5
 800949a:	f000 f83f 	bl	800951c <__smakebuf_r>
 800949e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094a2:	f013 0201 	ands.w	r2, r3, #1
 80094a6:	d00a      	beq.n	80094be <__swsetup_r+0x9a>
 80094a8:	2200      	movs	r2, #0
 80094aa:	60a2      	str	r2, [r4, #8]
 80094ac:	6962      	ldr	r2, [r4, #20]
 80094ae:	4252      	negs	r2, r2
 80094b0:	61a2      	str	r2, [r4, #24]
 80094b2:	6922      	ldr	r2, [r4, #16]
 80094b4:	b942      	cbnz	r2, 80094c8 <__swsetup_r+0xa4>
 80094b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80094ba:	d1c5      	bne.n	8009448 <__swsetup_r+0x24>
 80094bc:	bd38      	pop	{r3, r4, r5, pc}
 80094be:	0799      	lsls	r1, r3, #30
 80094c0:	bf58      	it	pl
 80094c2:	6962      	ldrpl	r2, [r4, #20]
 80094c4:	60a2      	str	r2, [r4, #8]
 80094c6:	e7f4      	b.n	80094b2 <__swsetup_r+0x8e>
 80094c8:	2000      	movs	r0, #0
 80094ca:	e7f7      	b.n	80094bc <__swsetup_r+0x98>
 80094cc:	20000010 	.word	0x20000010

080094d0 <__swhatbuf_r>:
 80094d0:	b570      	push	{r4, r5, r6, lr}
 80094d2:	460c      	mov	r4, r1
 80094d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d8:	2900      	cmp	r1, #0
 80094da:	b096      	sub	sp, #88	@ 0x58
 80094dc:	4615      	mov	r5, r2
 80094de:	461e      	mov	r6, r3
 80094e0:	da0d      	bge.n	80094fe <__swhatbuf_r+0x2e>
 80094e2:	89a3      	ldrh	r3, [r4, #12]
 80094e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80094e8:	f04f 0100 	mov.w	r1, #0
 80094ec:	bf14      	ite	ne
 80094ee:	2340      	movne	r3, #64	@ 0x40
 80094f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80094f4:	2000      	movs	r0, #0
 80094f6:	6031      	str	r1, [r6, #0]
 80094f8:	602b      	str	r3, [r5, #0]
 80094fa:	b016      	add	sp, #88	@ 0x58
 80094fc:	bd70      	pop	{r4, r5, r6, pc}
 80094fe:	466a      	mov	r2, sp
 8009500:	f000 f8e2 	bl	80096c8 <_fstat_r>
 8009504:	2800      	cmp	r0, #0
 8009506:	dbec      	blt.n	80094e2 <__swhatbuf_r+0x12>
 8009508:	9901      	ldr	r1, [sp, #4]
 800950a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800950e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009512:	4259      	negs	r1, r3
 8009514:	4159      	adcs	r1, r3
 8009516:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800951a:	e7eb      	b.n	80094f4 <__swhatbuf_r+0x24>

0800951c <__smakebuf_r>:
 800951c:	898b      	ldrh	r3, [r1, #12]
 800951e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009520:	079d      	lsls	r5, r3, #30
 8009522:	4606      	mov	r6, r0
 8009524:	460c      	mov	r4, r1
 8009526:	d507      	bpl.n	8009538 <__smakebuf_r+0x1c>
 8009528:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800952c:	6023      	str	r3, [r4, #0]
 800952e:	6123      	str	r3, [r4, #16]
 8009530:	2301      	movs	r3, #1
 8009532:	6163      	str	r3, [r4, #20]
 8009534:	b003      	add	sp, #12
 8009536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009538:	ab01      	add	r3, sp, #4
 800953a:	466a      	mov	r2, sp
 800953c:	f7ff ffc8 	bl	80094d0 <__swhatbuf_r>
 8009540:	9f00      	ldr	r7, [sp, #0]
 8009542:	4605      	mov	r5, r0
 8009544:	4639      	mov	r1, r7
 8009546:	4630      	mov	r0, r6
 8009548:	f7ff f91c 	bl	8008784 <_malloc_r>
 800954c:	b948      	cbnz	r0, 8009562 <__smakebuf_r+0x46>
 800954e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009552:	059a      	lsls	r2, r3, #22
 8009554:	d4ee      	bmi.n	8009534 <__smakebuf_r+0x18>
 8009556:	f023 0303 	bic.w	r3, r3, #3
 800955a:	f043 0302 	orr.w	r3, r3, #2
 800955e:	81a3      	strh	r3, [r4, #12]
 8009560:	e7e2      	b.n	8009528 <__smakebuf_r+0xc>
 8009562:	89a3      	ldrh	r3, [r4, #12]
 8009564:	6020      	str	r0, [r4, #0]
 8009566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800956a:	81a3      	strh	r3, [r4, #12]
 800956c:	9b01      	ldr	r3, [sp, #4]
 800956e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009572:	b15b      	cbz	r3, 800958c <__smakebuf_r+0x70>
 8009574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009578:	4630      	mov	r0, r6
 800957a:	f000 f83b 	bl	80095f4 <_isatty_r>
 800957e:	b128      	cbz	r0, 800958c <__smakebuf_r+0x70>
 8009580:	89a3      	ldrh	r3, [r4, #12]
 8009582:	f023 0303 	bic.w	r3, r3, #3
 8009586:	f043 0301 	orr.w	r3, r3, #1
 800958a:	81a3      	strh	r3, [r4, #12]
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	431d      	orrs	r5, r3
 8009590:	81a5      	strh	r5, [r4, #12]
 8009592:	e7cf      	b.n	8009534 <__smakebuf_r+0x18>

08009594 <_raise_r>:
 8009594:	291f      	cmp	r1, #31
 8009596:	b538      	push	{r3, r4, r5, lr}
 8009598:	4605      	mov	r5, r0
 800959a:	460c      	mov	r4, r1
 800959c:	d904      	bls.n	80095a8 <_raise_r+0x14>
 800959e:	2316      	movs	r3, #22
 80095a0:	6003      	str	r3, [r0, #0]
 80095a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095a6:	bd38      	pop	{r3, r4, r5, pc}
 80095a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80095aa:	b112      	cbz	r2, 80095b2 <_raise_r+0x1e>
 80095ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095b0:	b94b      	cbnz	r3, 80095c6 <_raise_r+0x32>
 80095b2:	4628      	mov	r0, r5
 80095b4:	f000 f864 	bl	8009680 <_getpid_r>
 80095b8:	4622      	mov	r2, r4
 80095ba:	4601      	mov	r1, r0
 80095bc:	4628      	mov	r0, r5
 80095be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095c2:	f000 b84b 	b.w	800965c <_kill_r>
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d00a      	beq.n	80095e0 <_raise_r+0x4c>
 80095ca:	1c59      	adds	r1, r3, #1
 80095cc:	d103      	bne.n	80095d6 <_raise_r+0x42>
 80095ce:	2316      	movs	r3, #22
 80095d0:	6003      	str	r3, [r0, #0]
 80095d2:	2001      	movs	r0, #1
 80095d4:	e7e7      	b.n	80095a6 <_raise_r+0x12>
 80095d6:	2100      	movs	r1, #0
 80095d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80095dc:	4620      	mov	r0, r4
 80095de:	4798      	blx	r3
 80095e0:	2000      	movs	r0, #0
 80095e2:	e7e0      	b.n	80095a6 <_raise_r+0x12>

080095e4 <raise>:
 80095e4:	4b02      	ldr	r3, [pc, #8]	@ (80095f0 <raise+0xc>)
 80095e6:	4601      	mov	r1, r0
 80095e8:	6818      	ldr	r0, [r3, #0]
 80095ea:	f7ff bfd3 	b.w	8009594 <_raise_r>
 80095ee:	bf00      	nop
 80095f0:	20000010 	.word	0x20000010

080095f4 <_isatty_r>:
 80095f4:	b538      	push	{r3, r4, r5, lr}
 80095f6:	4d06      	ldr	r5, [pc, #24]	@ (8009610 <_isatty_r+0x1c>)
 80095f8:	2300      	movs	r3, #0
 80095fa:	4604      	mov	r4, r0
 80095fc:	4608      	mov	r0, r1
 80095fe:	602b      	str	r3, [r5, #0]
 8009600:	f7f7 fbbe 	bl	8000d80 <_isatty>
 8009604:	1c43      	adds	r3, r0, #1
 8009606:	d102      	bne.n	800960e <_isatty_r+0x1a>
 8009608:	682b      	ldr	r3, [r5, #0]
 800960a:	b103      	cbz	r3, 800960e <_isatty_r+0x1a>
 800960c:	6023      	str	r3, [r4, #0]
 800960e:	bd38      	pop	{r3, r4, r5, pc}
 8009610:	200001e0 	.word	0x200001e0

08009614 <_lseek_r>:
 8009614:	b538      	push	{r3, r4, r5, lr}
 8009616:	4d07      	ldr	r5, [pc, #28]	@ (8009634 <_lseek_r+0x20>)
 8009618:	4604      	mov	r4, r0
 800961a:	4608      	mov	r0, r1
 800961c:	4611      	mov	r1, r2
 800961e:	2200      	movs	r2, #0
 8009620:	602a      	str	r2, [r5, #0]
 8009622:	461a      	mov	r2, r3
 8009624:	f7f7 fbb7 	bl	8000d96 <_lseek>
 8009628:	1c43      	adds	r3, r0, #1
 800962a:	d102      	bne.n	8009632 <_lseek_r+0x1e>
 800962c:	682b      	ldr	r3, [r5, #0]
 800962e:	b103      	cbz	r3, 8009632 <_lseek_r+0x1e>
 8009630:	6023      	str	r3, [r4, #0]
 8009632:	bd38      	pop	{r3, r4, r5, pc}
 8009634:	200001e0 	.word	0x200001e0

08009638 <_read_r>:
 8009638:	b538      	push	{r3, r4, r5, lr}
 800963a:	4d07      	ldr	r5, [pc, #28]	@ (8009658 <_read_r+0x20>)
 800963c:	4604      	mov	r4, r0
 800963e:	4608      	mov	r0, r1
 8009640:	4611      	mov	r1, r2
 8009642:	2200      	movs	r2, #0
 8009644:	602a      	str	r2, [r5, #0]
 8009646:	461a      	mov	r2, r3
 8009648:	f7f7 fb45 	bl	8000cd6 <_read>
 800964c:	1c43      	adds	r3, r0, #1
 800964e:	d102      	bne.n	8009656 <_read_r+0x1e>
 8009650:	682b      	ldr	r3, [r5, #0]
 8009652:	b103      	cbz	r3, 8009656 <_read_r+0x1e>
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	bd38      	pop	{r3, r4, r5, pc}
 8009658:	200001e0 	.word	0x200001e0

0800965c <_kill_r>:
 800965c:	b538      	push	{r3, r4, r5, lr}
 800965e:	4d07      	ldr	r5, [pc, #28]	@ (800967c <_kill_r+0x20>)
 8009660:	2300      	movs	r3, #0
 8009662:	4604      	mov	r4, r0
 8009664:	4608      	mov	r0, r1
 8009666:	4611      	mov	r1, r2
 8009668:	602b      	str	r3, [r5, #0]
 800966a:	f7f7 fb19 	bl	8000ca0 <_kill>
 800966e:	1c43      	adds	r3, r0, #1
 8009670:	d102      	bne.n	8009678 <_kill_r+0x1c>
 8009672:	682b      	ldr	r3, [r5, #0]
 8009674:	b103      	cbz	r3, 8009678 <_kill_r+0x1c>
 8009676:	6023      	str	r3, [r4, #0]
 8009678:	bd38      	pop	{r3, r4, r5, pc}
 800967a:	bf00      	nop
 800967c:	200001e0 	.word	0x200001e0

08009680 <_getpid_r>:
 8009680:	f7f7 bb06 	b.w	8000c90 <_getpid>

08009684 <_write_r>:
 8009684:	b538      	push	{r3, r4, r5, lr}
 8009686:	4d07      	ldr	r5, [pc, #28]	@ (80096a4 <_write_r+0x20>)
 8009688:	4604      	mov	r4, r0
 800968a:	4608      	mov	r0, r1
 800968c:	4611      	mov	r1, r2
 800968e:	2200      	movs	r2, #0
 8009690:	602a      	str	r2, [r5, #0]
 8009692:	461a      	mov	r2, r3
 8009694:	f7f7 fb3c 	bl	8000d10 <_write>
 8009698:	1c43      	adds	r3, r0, #1
 800969a:	d102      	bne.n	80096a2 <_write_r+0x1e>
 800969c:	682b      	ldr	r3, [r5, #0]
 800969e:	b103      	cbz	r3, 80096a2 <_write_r+0x1e>
 80096a0:	6023      	str	r3, [r4, #0]
 80096a2:	bd38      	pop	{r3, r4, r5, pc}
 80096a4:	200001e0 	.word	0x200001e0

080096a8 <_close_r>:
 80096a8:	b538      	push	{r3, r4, r5, lr}
 80096aa:	4d06      	ldr	r5, [pc, #24]	@ (80096c4 <_close_r+0x1c>)
 80096ac:	2300      	movs	r3, #0
 80096ae:	4604      	mov	r4, r0
 80096b0:	4608      	mov	r0, r1
 80096b2:	602b      	str	r3, [r5, #0]
 80096b4:	f7f7 fb48 	bl	8000d48 <_close>
 80096b8:	1c43      	adds	r3, r0, #1
 80096ba:	d102      	bne.n	80096c2 <_close_r+0x1a>
 80096bc:	682b      	ldr	r3, [r5, #0]
 80096be:	b103      	cbz	r3, 80096c2 <_close_r+0x1a>
 80096c0:	6023      	str	r3, [r4, #0]
 80096c2:	bd38      	pop	{r3, r4, r5, pc}
 80096c4:	200001e0 	.word	0x200001e0

080096c8 <_fstat_r>:
 80096c8:	b538      	push	{r3, r4, r5, lr}
 80096ca:	4d07      	ldr	r5, [pc, #28]	@ (80096e8 <_fstat_r+0x20>)
 80096cc:	2300      	movs	r3, #0
 80096ce:	4604      	mov	r4, r0
 80096d0:	4608      	mov	r0, r1
 80096d2:	4611      	mov	r1, r2
 80096d4:	602b      	str	r3, [r5, #0]
 80096d6:	f7f7 fb43 	bl	8000d60 <_fstat>
 80096da:	1c43      	adds	r3, r0, #1
 80096dc:	d102      	bne.n	80096e4 <_fstat_r+0x1c>
 80096de:	682b      	ldr	r3, [r5, #0]
 80096e0:	b103      	cbz	r3, 80096e4 <_fstat_r+0x1c>
 80096e2:	6023      	str	r3, [r4, #0]
 80096e4:	bd38      	pop	{r3, r4, r5, pc}
 80096e6:	bf00      	nop
 80096e8:	200001e0 	.word	0x200001e0

080096ec <__popcountsi2>:
 80096ec:	0843      	lsrs	r3, r0, #1
 80096ee:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80096f2:	1ac0      	subs	r0, r0, r3
 80096f4:	0883      	lsrs	r3, r0, #2
 80096f6:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80096fa:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 80096fe:	4418      	add	r0, r3
 8009700:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8009704:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8009708:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 800970c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8009710:	0e00      	lsrs	r0, r0, #24
 8009712:	4770      	bx	lr

08009714 <_init>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	bf00      	nop
 8009718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971a:	bc08      	pop	{r3}
 800971c:	469e      	mov	lr, r3
 800971e:	4770      	bx	lr

08009720 <_fini>:
 8009720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009722:	bf00      	nop
 8009724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009726:	bc08      	pop	{r3}
 8009728:	469e      	mov	lr, r3
 800972a:	4770      	bx	lr
