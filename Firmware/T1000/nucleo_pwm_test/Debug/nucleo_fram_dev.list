
nucleo_fram_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000199c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001b28  08001b28  00002b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b40  08001b40  00003004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001b40  08001b40  00003004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001b40  08001b40  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b40  08001b40  00002b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001b44  08001b44  00002b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001b48  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08001b4c  00003004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08001b4c  00003020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004f25  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d0f  00000000  00000000  00007f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b0  00000000  00000000  00008c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000435  00000000  00000000  00009218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014dad  00000000  00000000  0000964d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003558  00000000  00000000  0001e3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007496c  00000000  00000000  00021952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000045  00000000  00000000  000962be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001750  00000000  00000000  00096304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00097a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <deregister_tm_clones>:
 800018c:	4803      	ldr	r0, [pc, #12]	@ (800019c <deregister_tm_clones+0x10>)
 800018e:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <deregister_tm_clones+0x14>)
 8000190:	4283      	cmp	r3, r0
 8000192:	d002      	beq.n	800019a <deregister_tm_clones+0xe>
 8000194:	4b03      	ldr	r3, [pc, #12]	@ (80001a4 <deregister_tm_clones+0x18>)
 8000196:	b103      	cbz	r3, 800019a <deregister_tm_clones+0xe>
 8000198:	4718      	bx	r3
 800019a:	4770      	bx	lr
 800019c:	20000004 	.word	0x20000004
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <register_tm_clones+0x18>)
 80001aa:	4b06      	ldr	r3, [pc, #24]	@ (80001c4 <register_tm_clones+0x1c>)
 80001ac:	1a1b      	subs	r3, r3, r0
 80001ae:	0fd9      	lsrs	r1, r3, #31
 80001b0:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b4:	1049      	asrs	r1, r1, #1
 80001b6:	d002      	beq.n	80001be <register_tm_clones+0x16>
 80001b8:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <register_tm_clones+0x20>)
 80001ba:	b103      	cbz	r3, 80001be <register_tm_clones+0x16>
 80001bc:	4718      	bx	r3
 80001be:	4770      	bx	lr
 80001c0:	20000004 	.word	0x20000004
 80001c4:	20000004 	.word	0x20000004
 80001c8:	00000000 	.word	0x00000000

080001cc <__do_global_dtors_aux>:
 80001cc:	b510      	push	{r4, lr}
 80001ce:	4c06      	ldr	r4, [pc, #24]	@ (80001e8 <__do_global_dtors_aux+0x1c>)
 80001d0:	7823      	ldrb	r3, [r4, #0]
 80001d2:	b943      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x1a>
 80001d4:	f7ff ffda 	bl	800018c <deregister_tm_clones>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x20>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x16>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x24>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000004 	.word	0x20000004
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001b10 	.word	0x08001b10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b05      	ldr	r3, [pc, #20]	@ (800020c <frame_dummy+0x18>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4905      	ldr	r1, [pc, #20]	@ (8000210 <frame_dummy+0x1c>)
 80001fc:	4805      	ldr	r0, [pc, #20]	@ (8000214 <frame_dummy+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000206:	f7ff bfcf 	b.w	80001a8 <register_tm_clones>
 800020a:	bf00      	nop
 800020c:	00000000 	.word	0x00000000
 8000210:	20000008 	.word	0x20000008
 8000214:	08001b10 	.word	0x08001b10

08000218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f003 0307 	and.w	r3, r3, #7
 8000226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000228:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <__NVIC_SetPriorityGrouping+0x44>)
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800022e:	68ba      	ldr	r2, [r7, #8]
 8000230:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000234:	4013      	ands	r3, r2
 8000236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000240:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000244:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800024a:	4a04      	ldr	r2, [pc, #16]	@ (800025c <__NVIC_SetPriorityGrouping+0x44>)
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	60d3      	str	r3, [r2, #12]
}
 8000250:	bf00      	nop
 8000252:	3714      	adds	r7, #20
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000ed00 	.word	0xe000ed00

08000260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000264:	4b04      	ldr	r3, [pc, #16]	@ (8000278 <__NVIC_GetPriorityGrouping+0x18>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	0a1b      	lsrs	r3, r3, #8
 800026a:	f003 0307 	and.w	r3, r3, #7
}
 800026e:	4618      	mov	r0, r3
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	6039      	str	r1, [r7, #0]
 8000286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028c:	2b00      	cmp	r3, #0
 800028e:	db0a      	blt.n	80002a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	b2da      	uxtb	r2, r3
 8000294:	490c      	ldr	r1, [pc, #48]	@ (80002c8 <__NVIC_SetPriority+0x4c>)
 8000296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029a:	0112      	lsls	r2, r2, #4
 800029c:	b2d2      	uxtb	r2, r2
 800029e:	440b      	add	r3, r1
 80002a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002a4:	e00a      	b.n	80002bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	b2da      	uxtb	r2, r3
 80002aa:	4908      	ldr	r1, [pc, #32]	@ (80002cc <__NVIC_SetPriority+0x50>)
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	f003 030f 	and.w	r3, r3, #15
 80002b2:	3b04      	subs	r3, #4
 80002b4:	0112      	lsls	r2, r2, #4
 80002b6:	b2d2      	uxtb	r2, r2
 80002b8:	440b      	add	r3, r1
 80002ba:	761a      	strb	r2, [r3, #24]
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	e000e100 	.word	0xe000e100
 80002cc:	e000ed00 	.word	0xe000ed00

080002d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b089      	sub	sp, #36	@ 0x24
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	60b9      	str	r1, [r7, #8]
 80002da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	f003 0307 	and.w	r3, r3, #7
 80002e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002e4:	69fb      	ldr	r3, [r7, #28]
 80002e6:	f1c3 0307 	rsb	r3, r3, #7
 80002ea:	2b04      	cmp	r3, #4
 80002ec:	bf28      	it	cs
 80002ee:	2304      	movcs	r3, #4
 80002f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002f2:	69fb      	ldr	r3, [r7, #28]
 80002f4:	3304      	adds	r3, #4
 80002f6:	2b06      	cmp	r3, #6
 80002f8:	d902      	bls.n	8000300 <NVIC_EncodePriority+0x30>
 80002fa:	69fb      	ldr	r3, [r7, #28]
 80002fc:	3b03      	subs	r3, #3
 80002fe:	e000      	b.n	8000302 <NVIC_EncodePriority+0x32>
 8000300:	2300      	movs	r3, #0
 8000302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000304:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000308:	69bb      	ldr	r3, [r7, #24]
 800030a:	fa02 f303 	lsl.w	r3, r2, r3
 800030e:	43da      	mvns	r2, r3
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	401a      	ands	r2, r3
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000318:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	fa01 f303 	lsl.w	r3, r1, r3
 8000322:	43d9      	mvns	r1, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000328:	4313      	orrs	r3, r2
         );
}
 800032a:	4618      	mov	r0, r3
 800032c:	3724      	adds	r7, #36	@ 0x24
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
	...

08000338 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800033c:	4b05      	ldr	r3, [pc, #20]	@ (8000354 <LL_RCC_MSI_Enable+0x1c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a04      	ldr	r2, [pc, #16]	@ (8000354 <LL_RCC_MSI_Enable+0x1c>)
 8000342:	f043 0301 	orr.w	r3, r3, #1
 8000346:	6013      	str	r3, [r2, #0]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40021000 	.word	0x40021000

08000358 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 800035c:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <LL_RCC_MSI_IsReady+0x20>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f003 0302 	and.w	r3, r3, #2
 8000364:	2b02      	cmp	r3, #2
 8000366:	d101      	bne.n	800036c <LL_RCC_MSI_IsReady+0x14>
 8000368:	2301      	movs	r3, #1
 800036a:	e000      	b.n	800036e <LL_RCC_MSI_IsReady+0x16>
 800036c:	2300      	movs	r3, #0
}
 800036e:	4618      	mov	r0, r3
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	40021000 	.word	0x40021000

0800037c <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8000380:	4b05      	ldr	r3, [pc, #20]	@ (8000398 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a04      	ldr	r2, [pc, #16]	@ (8000398 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	6013      	str	r3, [r2, #0]
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000

0800039c <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80003a4:	4b06      	ldr	r3, [pc, #24]	@ (80003c0 <LL_RCC_MSI_SetRange+0x24>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80003ac:	4904      	ldr	r1, [pc, #16]	@ (80003c0 <LL_RCC_MSI_SetRange+0x24>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	600b      	str	r3, [r1, #0]
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr
 80003c0:	40021000 	.word	0x40021000

080003c4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80003cc:	4b07      	ldr	r3, [pc, #28]	@ (80003ec <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	021b      	lsls	r3, r3, #8
 80003d8:	4904      	ldr	r1, [pc, #16]	@ (80003ec <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80003da:	4313      	orrs	r3, r2
 80003dc:	604b      	str	r3, [r1, #4]
}
 80003de:	bf00      	nop
 80003e0:	370c      	adds	r7, #12
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000

080003f0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003f8:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <LL_RCC_SetSysClkSource+0x24>)
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	f023 0203 	bic.w	r2, r3, #3
 8000400:	4904      	ldr	r1, [pc, #16]	@ (8000414 <LL_RCC_SetSysClkSource+0x24>)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4313      	orrs	r3, r2
 8000406:	608b      	str	r3, [r1, #8]
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	40021000 	.word	0x40021000

08000418 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800041c:	4b04      	ldr	r3, [pc, #16]	@ (8000430 <LL_RCC_GetSysClkSource+0x18>)
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	f003 030c 	and.w	r3, r3, #12
}
 8000424:	4618      	mov	r0, r3
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000

08000434 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800043c:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <LL_RCC_SetAHBPrescaler+0x24>)
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000444:	4904      	ldr	r1, [pc, #16]	@ (8000458 <LL_RCC_SetAHBPrescaler+0x24>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4313      	orrs	r3, r2
 800044a:	608b      	str	r3, [r1, #8]
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000

0800045c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000464:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800046c:	4904      	ldr	r1, [pc, #16]	@ (8000480 <LL_RCC_SetAPB1Prescaler+0x24>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4313      	orrs	r3, r2
 8000472:	608b      	str	r3, [r1, #8]
}
 8000474:	bf00      	nop
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr
 8000480:	40021000 	.word	0x40021000

08000484 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800048c:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <LL_RCC_SetAPB2Prescaler+0x24>)
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000494:	4904      	ldr	r1, [pc, #16]	@ (80004a8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4313      	orrs	r3, r2
 800049a:	608b      	str	r3, [r1, #8]
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000

080004ac <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b4:	4b08      	ldr	r3, [pc, #32]	@ (80004d8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004b8:	4907      	ldr	r1, [pc, #28]	@ (80004d8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4313      	orrs	r3, r2
 80004be:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c0:	4b05      	ldr	r3, [pc, #20]	@ (80004d8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4013      	ands	r3, r2
 80004c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ca:	68fb      	ldr	r3, [r7, #12]
}
 80004cc:	bf00      	nop
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	40021000 	.word	0x40021000

080004dc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80004e4:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <LL_APB1_GRP1_EnableClock+0x2c>)
 80004e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80004e8:	4907      	ldr	r1, [pc, #28]	@ (8000508 <LL_APB1_GRP1_EnableClock+0x2c>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80004f0:	4b05      	ldr	r3, [pc, #20]	@ (8000508 <LL_APB1_GRP1_EnableClock+0x2c>)
 80004f2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4013      	ands	r3, r2
 80004f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004fa:	68fb      	ldr	r3, [r7, #12]
}
 80004fc:	bf00      	nop
 80004fe:	3714      	adds	r7, #20
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	40021000 	.word	0x40021000

0800050c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000514:	4b08      	ldr	r3, [pc, #32]	@ (8000538 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000516:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000518:	4907      	ldr	r1, [pc, #28]	@ (8000538 <LL_APB2_GRP1_EnableClock+0x2c>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4313      	orrs	r3, r2
 800051e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000520:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000522:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4013      	ands	r3, r2
 8000528:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800052a:	68fb      	ldr	r3, [r7, #12]
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	40021000 	.word	0x40021000

0800053c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000544:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <LL_FLASH_SetLatency+0x24>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f023 0207 	bic.w	r2, r3, #7
 800054c:	4904      	ldr	r1, [pc, #16]	@ (8000560 <LL_FLASH_SetLatency+0x24>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4313      	orrs	r3, r2
 8000552:	600b      	str	r3, [r1, #0]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	40022000 	.word	0x40022000

08000564 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000568:	4b04      	ldr	r3, [pc, #16]	@ (800057c <LL_FLASH_GetLatency+0x18>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f003 0307 	and.w	r3, r3, #7
}
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40022000 	.word	0x40022000

08000580 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000588:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8000590:	4904      	ldr	r1, [pc, #16]	@ (80005a4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4313      	orrs	r3, r2
 8000596:	600b      	str	r3, [r1, #0]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40007000 	.word	0x40007000

080005a8 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 80005ac:	4b07      	ldr	r3, [pc, #28]	@ (80005cc <LL_PWR_IsActiveFlag_VOS+0x24>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80005b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80005b8:	d101      	bne.n	80005be <LL_PWR_IsActiveFlag_VOS+0x16>
 80005ba:	2301      	movs	r3, #1
 80005bc:	e000      	b.n	80005c0 <LL_PWR_IsActiveFlag_VOS+0x18>
 80005be:	2300      	movs	r3, #0
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40007000 	.word	0x40007000

080005d0 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	601a      	str	r2, [r3, #0]
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	f023 0210 	bic.w	r2, r3, #16
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	431a      	orrs	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	605a      	str	r2, [r3, #4]
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8000616:	b480      	push	{r7}
 8000618:	b083      	sub	sp, #12
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	f043 0208 	orr.w	r2, r3, #8
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	605a      	str	r2, [r3, #4]
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000636:	b480      	push	{r7}
 8000638:	b083      	sub	sp, #12
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f043 0201 	orr.w	r2, r3, #1
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	601a      	str	r2, [r3, #0]
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	601a      	str	r2, [r3, #0]
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000676:	b480      	push	{r7}
 8000678:	b083      	sub	sp, #12
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6a1a      	ldr	r2, [r3, #32]
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	431a      	orrs	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	621a      	str	r2, [r3, #32]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d028      	beq.n	80006fa <LL_TIM_OC_DisableFast+0x62>
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	2b04      	cmp	r3, #4
 80006ac:	d023      	beq.n	80006f6 <LL_TIM_OC_DisableFast+0x5e>
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	2b10      	cmp	r3, #16
 80006b2:	d01e      	beq.n	80006f2 <LL_TIM_OC_DisableFast+0x5a>
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	2b40      	cmp	r3, #64	@ 0x40
 80006b8:	d019      	beq.n	80006ee <LL_TIM_OC_DisableFast+0x56>
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80006c0:	d013      	beq.n	80006ea <LL_TIM_OC_DisableFast+0x52>
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006c8:	d00d      	beq.n	80006e6 <LL_TIM_OC_DisableFast+0x4e>
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80006d0:	d007      	beq.n	80006e2 <LL_TIM_OC_DisableFast+0x4a>
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80006d8:	d101      	bne.n	80006de <LL_TIM_OC_DisableFast+0x46>
 80006da:	2307      	movs	r3, #7
 80006dc:	e00e      	b.n	80006fc <LL_TIM_OC_DisableFast+0x64>
 80006de:	2308      	movs	r3, #8
 80006e0:	e00c      	b.n	80006fc <LL_TIM_OC_DisableFast+0x64>
 80006e2:	2306      	movs	r3, #6
 80006e4:	e00a      	b.n	80006fc <LL_TIM_OC_DisableFast+0x64>
 80006e6:	2305      	movs	r3, #5
 80006e8:	e008      	b.n	80006fc <LL_TIM_OC_DisableFast+0x64>
 80006ea:	2304      	movs	r3, #4
 80006ec:	e006      	b.n	80006fc <LL_TIM_OC_DisableFast+0x64>
 80006ee:	2303      	movs	r3, #3
 80006f0:	e004      	b.n	80006fc <LL_TIM_OC_DisableFast+0x64>
 80006f2:	2302      	movs	r3, #2
 80006f4:	e002      	b.n	80006fc <LL_TIM_OC_DisableFast+0x64>
 80006f6:	2301      	movs	r3, #1
 80006f8:	e000      	b.n	80006fc <LL_TIM_OC_DisableFast+0x64>
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3318      	adds	r3, #24
 8000702:	4619      	mov	r1, r3
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	4a0b      	ldr	r2, [pc, #44]	@ (8000734 <LL_TIM_OC_DisableFast+0x9c>)
 8000708:	5cd3      	ldrb	r3, [r2, r3]
 800070a:	440b      	add	r3, r1
 800070c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	4908      	ldr	r1, [pc, #32]	@ (8000738 <LL_TIM_OC_DisableFast+0xa0>)
 8000716:	5ccb      	ldrb	r3, [r1, r3]
 8000718:	4619      	mov	r1, r3
 800071a:	2304      	movs	r3, #4
 800071c:	408b      	lsls	r3, r1
 800071e:	43db      	mvns	r3, r3
 8000720:	401a      	ands	r2, r3
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	601a      	str	r2, [r3, #0]

}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	08001b28 	.word	0x08001b28
 8000738:	08001b34 	.word	0x08001b34

0800073c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d028      	beq.n	800079e <LL_TIM_OC_EnablePreload+0x62>
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	2b04      	cmp	r3, #4
 8000750:	d023      	beq.n	800079a <LL_TIM_OC_EnablePreload+0x5e>
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	2b10      	cmp	r3, #16
 8000756:	d01e      	beq.n	8000796 <LL_TIM_OC_EnablePreload+0x5a>
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	2b40      	cmp	r3, #64	@ 0x40
 800075c:	d019      	beq.n	8000792 <LL_TIM_OC_EnablePreload+0x56>
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000764:	d013      	beq.n	800078e <LL_TIM_OC_EnablePreload+0x52>
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800076c:	d00d      	beq.n	800078a <LL_TIM_OC_EnablePreload+0x4e>
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000774:	d007      	beq.n	8000786 <LL_TIM_OC_EnablePreload+0x4a>
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800077c:	d101      	bne.n	8000782 <LL_TIM_OC_EnablePreload+0x46>
 800077e:	2307      	movs	r3, #7
 8000780:	e00e      	b.n	80007a0 <LL_TIM_OC_EnablePreload+0x64>
 8000782:	2308      	movs	r3, #8
 8000784:	e00c      	b.n	80007a0 <LL_TIM_OC_EnablePreload+0x64>
 8000786:	2306      	movs	r3, #6
 8000788:	e00a      	b.n	80007a0 <LL_TIM_OC_EnablePreload+0x64>
 800078a:	2305      	movs	r3, #5
 800078c:	e008      	b.n	80007a0 <LL_TIM_OC_EnablePreload+0x64>
 800078e:	2304      	movs	r3, #4
 8000790:	e006      	b.n	80007a0 <LL_TIM_OC_EnablePreload+0x64>
 8000792:	2303      	movs	r3, #3
 8000794:	e004      	b.n	80007a0 <LL_TIM_OC_EnablePreload+0x64>
 8000796:	2302      	movs	r3, #2
 8000798:	e002      	b.n	80007a0 <LL_TIM_OC_EnablePreload+0x64>
 800079a:	2301      	movs	r3, #1
 800079c:	e000      	b.n	80007a0 <LL_TIM_OC_EnablePreload+0x64>
 800079e:	2300      	movs	r3, #0
 80007a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3318      	adds	r3, #24
 80007a6:	4619      	mov	r1, r3
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	4a0a      	ldr	r2, [pc, #40]	@ (80007d4 <LL_TIM_OC_EnablePreload+0x98>)
 80007ac:	5cd3      	ldrb	r3, [r2, r3]
 80007ae:	440b      	add	r3, r1
 80007b0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	4907      	ldr	r1, [pc, #28]	@ (80007d8 <LL_TIM_OC_EnablePreload+0x9c>)
 80007ba:	5ccb      	ldrb	r3, [r1, r3]
 80007bc:	4619      	mov	r1, r3
 80007be:	2308      	movs	r3, #8
 80007c0:	408b      	lsls	r3, r1
 80007c2:	431a      	orrs	r2, r3
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	601a      	str	r2, [r3, #0]
}
 80007c8:	bf00      	nop
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	08001b28 	.word	0x08001b28
 80007d8:	08001b34 	.word	0x08001b34

080007dc <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	683a      	ldr	r2, [r7, #0]
 80007ea:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <LL_TIM_DisableExternalClock>:
  * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	609a      	str	r2, [r3, #8]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800082a:	f023 0307 	bic.w	r3, r3, #7
 800082e:	683a      	ldr	r2, [r7, #0]
 8000830:	431a      	orrs	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	609a      	str	r2, [r3, #8]
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
 800084a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	431a      	orrs	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	605a      	str	r2, [r3, #4]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	431a      	orrs	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	605a      	str	r2, [r3, #4]
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	609a      	str	r2, [r3, #8]
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <LL_TIM_ConfigETR>:
  *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ConfigETR(TIM_TypeDef *TIMx, uint32_t ETRPolarity, uint32_t ETRPrescaler,
                                      uint32_t ETRFilter)
{
 80008ae:	b480      	push	{r7}
 80008b0:	b085      	sub	sp, #20
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	60f8      	str	r0, [r7, #12]
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
 80008ba:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	f423 423f 	bic.w	r2, r3, #48896	@ 0xbf00
 80008c4:	68b9      	ldr	r1, [r7, #8]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4319      	orrs	r1, r3
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	430b      	orrs	r3, r1
 80008ce:	431a      	orrs	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	609a      	str	r2, [r3, #8]
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ec:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <LL_TIM_SetOCRefClearInputSource>:
  *         @arg @ref LL_TIM_OCREF_CLR_INT_NC
  *         @arg @ref LL_TIM_OCREF_CLR_INT_ETR
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOCRefClearInputSource(TIM_TypeDef *TIMx, uint32_t OCRefClearInputSource)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	f023 0208 	bic.w	r2, r3, #8
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	431a      	orrs	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	609a      	str	r2, [r3, #8]
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
	...

08000944 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* MCU
   * Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the
   * Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000948:	2001      	movs	r0, #1
 800094a:	f7ff fddf 	bl	800050c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800094e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000952:	f7ff fdc3 	bl	80004dc <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000956:	2003      	movs	r0, #3
 8000958:	f7ff fc5e 	bl	8000218 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn,
 800095c:	f7ff fc80 	bl	8000260 <__NVIC_GetPriorityGrouping>
 8000960:	4603      	mov	r3, r0
 8000962:	2200      	movs	r2, #0
 8000964:	210f      	movs	r1, #15
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fcb2 	bl	80002d0 <NVIC_EncodePriority>
 800096c:	4603      	mov	r3, r0
 800096e:	4619      	mov	r1, r3
 8000970:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000974:	f7ff fc82 	bl	800027c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000978:	f000 f81a 	bl	80009b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097c:	f000 f8b4 	bl	8000ae8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000980:	f000 f858 	bl	8000a34 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000984:	f000 f8d8 	bl	8000b38 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_EnableCounter(TIM1);
 8000988:	4808      	ldr	r0, [pc, #32]	@ (80009ac <main+0x68>)
 800098a:	f7ff fe54 	bl	8000636 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM1, (LL_TIM_CHANNEL_CH1 || LL_TIM_CHANNEL_CH1N));
 800098e:	2101      	movs	r1, #1
 8000990:	4806      	ldr	r0, [pc, #24]	@ (80009ac <main+0x68>)
 8000992:	f7ff fe70 	bl	8000676 <LL_TIM_CC_EnableChannel>
  LL_TIM_OC_SetCompareCH1(TIM1, 32768);
 8000996:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800099a:	4804      	ldr	r0, [pc, #16]	@ (80009ac <main+0x68>)
 800099c:	f7ff ff1e 	bl	80007dc <LL_TIM_OC_SetCompareCH1>
  LL_TIM_EnableAllOutputs(TIM1);
 80009a0:	4802      	ldr	r0, [pc, #8]	@ (80009ac <main+0x68>)
 80009a2:	f7ff ff9d 	bl	80008e0 <LL_TIM_EnableAllOutputs>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 80009a6:	bf00      	nop
 80009a8:	e7fd      	b.n	80009a6 <main+0x62>
 80009aa:	bf00      	nop
 80009ac:	40012c00 	.word	0x40012c00

080009b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff fdc1 	bl	800053c <LL_FLASH_SetLatency>
  while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0) {
 80009ba:	bf00      	nop
 80009bc:	f7ff fdd2 	bl	8000564 <LL_FLASH_GetLatency>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d1fa      	bne.n	80009bc <SystemClock_Config+0xc>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80009c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009ca:	f7ff fdd9 	bl	8000580 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0) {
 80009ce:	bf00      	nop
 80009d0:	f7ff fdea 	bl	80005a8 <LL_PWR_IsActiveFlag_VOS>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d1fa      	bne.n	80009d0 <SystemClock_Config+0x20>
  }
  LL_RCC_MSI_Enable();
 80009da:	f7ff fcad 	bl	8000338 <LL_RCC_MSI_Enable>

  /* Wait till MSI is ready */
  while (LL_RCC_MSI_IsReady() != 1) {
 80009de:	bf00      	nop
 80009e0:	f7ff fcba 	bl	8000358 <LL_RCC_MSI_IsReady>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d1fa      	bne.n	80009e0 <SystemClock_Config+0x30>
  }
  LL_RCC_MSI_EnableRangeSelection();
 80009ea:	f7ff fcc7 	bl	800037c <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 80009ee:	2060      	movs	r0, #96	@ 0x60
 80009f0:	f7ff fcd4 	bl	800039c <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f7ff fce5 	bl	80003c4 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff fcf8 	bl	80003f0 <LL_RCC_SetSysClkSource>

  /* Wait till System clock is ready */
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI) {
 8000a00:	bf00      	nop
 8000a02:	f7ff fd09 	bl	8000418 <LL_RCC_GetSysClkSource>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1fa      	bne.n	8000a02 <SystemClock_Config+0x52>
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f7ff fd11 	bl	8000434 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff fd22 	bl	800045c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f7ff fd33 	bl	8000484 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(4000000);
 8000a1e:	4804      	ldr	r0, [pc, #16]	@ (8000a30 <SystemClock_Config+0x80>)
 8000a20:	f000 fc06 	bl	8001230 <LL_Init1msTick>

  LL_SetSystemCoreClock(4000000);
 8000a24:	4802      	ldr	r0, [pc, #8]	@ (8000a30 <SystemClock_Config+0x80>)
 8000a26:	f000 fc11 	bl	800124c <LL_SetSystemCoreClock>
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	003d0900 	.word	0x003d0900

08000a34 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b090      	sub	sp, #64	@ 0x40
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000a3a:	f107 0318 	add.w	r3, r7, #24
 8000a3e:	2228      	movs	r2, #40	@ 0x28
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 f838 	bl	8001ab8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	463b      	mov	r3, r7
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]
 8000a56:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8000a58:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000a5c:	f7ff fd3e 	bl	80004dc <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000a60:	2002      	movs	r0, #2
 8000a62:	f7ff fd23 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13 | LL_GPIO_PIN_14 | LL_GPIO_PIN_15;
 8000a66:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000a6a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000a7c:	2305      	movs	r3, #5
 8000a7e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	463b      	mov	r3, r7
 8000a82:	4619      	mov	r1, r3
 8000a84:	4816      	ldr	r0, [pc, #88]	@ (8000ae0 <MX_SPI2_Init+0xac>)
 8000a86:	f000 fabd 	bl	8001004 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000a8e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000a92:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000a94:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000a98:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000aa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000aac:	2300      	movs	r3, #0
 8000aae:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8000ab8:	f107 0318 	add.w	r3, r7, #24
 8000abc:	4619      	mov	r1, r3
 8000abe:	4809      	ldr	r0, [pc, #36]	@ (8000ae4 <MX_SPI2_Init+0xb0>)
 8000ac0:	f000 fb44 	bl	800114c <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4807      	ldr	r0, [pc, #28]	@ (8000ae4 <MX_SPI2_Init+0xb0>)
 8000ac8:	f7ff fd92 	bl	80005f0 <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI2);
 8000acc:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_SPI2_Init+0xb0>)
 8000ace:	f7ff fda2 	bl	8000616 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  LL_SPI_Enable(SPI2);
 8000ad2:	4804      	ldr	r0, [pc, #16]	@ (8000ae4 <MX_SPI2_Init+0xb0>)
 8000ad4:	f7ff fd7c 	bl	80005d0 <LL_SPI_Enable>

  /* USER CODE END SPI2_Init 2 */
}
 8000ad8:	bf00      	nop
 8000ada:	3740      	adds	r7, #64	@ 0x40
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	48000400 	.word	0x48000400
 8000ae4:	40003800 	.word	0x40003800

08000ae8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	463b      	mov	r3, r7
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
 8000afc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000afe:	2002      	movs	r0, #2
 8000b00:	f7ff fcd4 	bl	80004ac <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8000b04:	2140      	movs	r1, #64	@ 0x40
 8000b06:	480b      	ldr	r0, [pc, #44]	@ (8000b34 <MX_GPIO_Init+0x4c>)
 8000b08:	f7ff ff0d 	bl	8000926 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000b0c:	2340      	movs	r3, #64	@ 0x40
 8000b0e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b10:	2301      	movs	r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	463b      	mov	r3, r7
 8000b22:	4619      	mov	r1, r3
 8000b24:	4803      	ldr	r0, [pc, #12]	@ (8000b34 <MX_GPIO_Init+0x4c>)
 8000b26:	f000 fa6d 	bl	8001004 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	48000400 	.word	0x48000400

08000b38 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b09e      	sub	sp, #120	@ 0x78
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000b3e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000b4e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000b52:	2220      	movs	r2, #32
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 ffae 	bl	8001ab8 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	2228      	movs	r2, #40	@ 0x28
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 ffa7 	bl	8001ab8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
 8000b78:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000b7a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000b7e:	f7ff fcc5 	bl	800050c <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	66bb      	str	r3, [r7, #104]	@ 0x68
  TIM_InitStruct.Autoreload = 65535;
 8000b8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b90:	66fb      	str	r3, [r7, #108]	@ 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	673b      	str	r3, [r7, #112]	@ 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	677b      	str	r3, [r7, #116]	@ 0x74
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000b9a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	483c      	ldr	r0, [pc, #240]	@ (8000c94 <MX_TIM1_Init+0x15c>)
 8000ba2:	f000 fbf3 	bl	800138c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000ba6:	483b      	ldr	r0, [pc, #236]	@ (8000c94 <MX_TIM1_Init+0x15c>)
 8000ba8:	f7ff fd55 	bl	8000656 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000bac:	2100      	movs	r1, #0
 8000bae:	4839      	ldr	r0, [pc, #228]	@ (8000c94 <MX_TIM1_Init+0x15c>)
 8000bb0:	f7ff fe32 	bl	8000818 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	4837      	ldr	r0, [pc, #220]	@ (8000c94 <MX_TIM1_Init+0x15c>)
 8000bb8:	f7ff fdc0 	bl	800073c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000bbc:	2360      	movs	r3, #96	@ 0x60
 8000bbe:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.CompareValue = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	653b      	str	r3, [r7, #80]	@ 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	657b      	str	r3, [r7, #84]	@ 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	663b      	str	r3, [r7, #96]	@ 0x60
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000bdc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000be0:	461a      	mov	r2, r3
 8000be2:	2101      	movs	r1, #1
 8000be4:	482b      	ldr	r0, [pc, #172]	@ (8000c94 <MX_TIM1_Init+0x15c>)
 8000be6:	f000 fc2f 	bl	8001448 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8000bea:	2101      	movs	r1, #1
 8000bec:	4829      	ldr	r0, [pc, #164]	@ (8000c94 <MX_TIM1_Init+0x15c>)
 8000bee:	f7ff fd53 	bl	8000698 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOCRefClearInputSource(TIM1, LL_TIM_OCREF_CLR_INT_NC);
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4827      	ldr	r0, [pc, #156]	@ (8000c94 <MX_TIM1_Init+0x15c>)
 8000bf6:	f7ff fe83 	bl	8000900 <LL_TIM_SetOCRefClearInputSource>
  LL_TIM_DisableExternalClock(TIM1);
 8000bfa:	4826      	ldr	r0, [pc, #152]	@ (8000c94 <MX_TIM1_Init+0x15c>)
 8000bfc:	f7ff fdfc 	bl	80007f8 <LL_TIM_DisableExternalClock>
  LL_TIM_ConfigETR(TIM1, LL_TIM_ETR_POLARITY_NONINVERTED,
 8000c00:	2300      	movs	r3, #0
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	4823      	ldr	r0, [pc, #140]	@ (8000c94 <MX_TIM1_Init+0x15c>)
 8000c08:	f7ff fe51 	bl	80008ae <LL_TIM_ConfigETR>
                   LL_TIM_ETR_PRESCALER_DIV1, LL_TIM_ETR_FILTER_FDIV1);
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4821      	ldr	r0, [pc, #132]	@ (8000c94 <MX_TIM1_Init+0x15c>)
 8000c10:	f7ff fe17 	bl	8000842 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8000c14:	2100      	movs	r1, #0
 8000c16:	481f      	ldr	r0, [pc, #124]	@ (8000c94 <MX_TIM1_Init+0x15c>)
 8000c18:	f7ff fe26 	bl	8000868 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000c1c:	481d      	ldr	r0, [pc, #116]	@ (8000c94 <MX_TIM1_Init+0x15c>)
 8000c1e:	f7ff fe36 	bl	800088e <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000c38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	@ 0x30
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8000c46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	643b      	str	r3, [r7, #64]	@ 0x40
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480e      	ldr	r0, [pc, #56]	@ (8000c94 <MX_TIM1_Init+0x15c>)
 8000c5c:	f000 fc54 	bl	8001508 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f7ff fc23 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA7   ------> TIM1_CH1N
  PA8   ------> TIM1_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7 | LL_GPIO_PIN_8;
 8000c66:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	4619      	mov	r1, r3
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c88:	f000 f9bc 	bl	8001004 <LL_GPIO_Init>
}
 8000c8c:	bf00      	nop
 8000c8e:	3778      	adds	r7, #120	@ 0x78
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40012c00 	.word	0x40012c00

08000c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <NMI_Handler+0x4>

08000ca0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <MemManage_Handler+0x4>

08000cb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <BusFault_Handler+0x4>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <UsageFault_Handler+0x4>

08000cc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <SystemInit+0x20>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d02:	4a05      	ldr	r2, [pc, #20]	@ (8000d18 <SystemInit+0x20>)
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d20:	f7ff ffea 	bl	8000cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d24:	480c      	ldr	r0, [pc, #48]	@ (8000d58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d26:	490d      	ldr	r1, [pc, #52]	@ (8000d5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d28:	4a0d      	ldr	r2, [pc, #52]	@ (8000d60 <LoopForever+0xe>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d68 <LoopForever+0x16>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d4a:	f000 febd 	bl	8001ac8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d4e:	f7ff fdf9 	bl	8000944 <main>

08000d52 <LoopForever>:

LoopForever:
    b LoopForever
 8000d52:	e7fe      	b.n	8000d52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d54:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000d60:	08001b48 	.word	0x08001b48
  ldr r2, =_sbss
 8000d64:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000d68:	20000020 	.word	0x20000020

08000d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC1_2_IRQHandler>

08000d6e <LL_GPIO_SetPinMode>:
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b08b      	sub	sp, #44	@ 0x2c
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	fa93 f3a3 	rbit	r3, r3
 8000d88:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d101      	bne.n	8000d98 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000d94:	2320      	movs	r3, #32
 8000d96:	e003      	b.n	8000da0 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fab3 f383 	clz	r3, r3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2103      	movs	r1, #3
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	401a      	ands	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db0:	6a3b      	ldr	r3, [r7, #32]
 8000db2:	fa93 f3a3 	rbit	r3, r3
 8000db6:	61fb      	str	r3, [r7, #28]
  return result;
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000dc2:	2320      	movs	r3, #32
 8000dc4:	e003      	b.n	8000dce <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc8:	fab3 f383 	clz	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	372c      	adds	r7, #44	@ 0x2c
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <LL_GPIO_SetPinOutputType>:
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	6879      	ldr	r1, [r7, #4]
 8000e02:	fb01 f303 	mul.w	r3, r1, r3
 8000e06:	431a      	orrs	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	605a      	str	r2, [r3, #4]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <LL_GPIO_SetPinSpeed>:
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b08b      	sub	sp, #44	@ 0x2c
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa93 f3a3 	rbit	r3, r3
 8000e32:	613b      	str	r3, [r7, #16]
  return result;
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000e3e:	2320      	movs	r3, #32
 8000e40:	e003      	b.n	8000e4a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	fab3 f383 	clz	r3, r3
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2103      	movs	r1, #3
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	401a      	ands	r2, r3
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5a:	6a3b      	ldr	r3, [r7, #32]
 8000e5c:	fa93 f3a3 	rbit	r3, r3
 8000e60:	61fb      	str	r3, [r7, #28]
  return result;
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d101      	bne.n	8000e70 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8000e6c:	2320      	movs	r3, #32
 8000e6e:	e003      	b.n	8000e78 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e72:	fab3 f383 	clz	r3, r3
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e80:	431a      	orrs	r2, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	609a      	str	r2, [r3, #8]
}
 8000e86:	bf00      	nop
 8000e88:	372c      	adds	r7, #44	@ 0x2c
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <LL_GPIO_SetPinPull>:
{
 8000e92:	b480      	push	{r7}
 8000e94:	b08b      	sub	sp, #44	@ 0x2c
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	fa93 f3a3 	rbit	r3, r3
 8000eac:	613b      	str	r3, [r7, #16]
  return result;
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d101      	bne.n	8000ebc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000eb8:	2320      	movs	r3, #32
 8000eba:	e003      	b.n	8000ec4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	fab3 f383 	clz	r3, r3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2103      	movs	r1, #3
 8000ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	401a      	ands	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed4:	6a3b      	ldr	r3, [r7, #32]
 8000ed6:	fa93 f3a3 	rbit	r3, r3
 8000eda:	61fb      	str	r3, [r7, #28]
  return result;
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	e003      	b.n	8000ef2 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eec:	fab3 f383 	clz	r3, r3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	431a      	orrs	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	60da      	str	r2, [r3, #12]
}
 8000f00:	bf00      	nop
 8000f02:	372c      	adds	r7, #44	@ 0x2c
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_GPIO_SetAFPin_0_7>:
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b08b      	sub	sp, #44	@ 0x2c
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6a1a      	ldr	r2, [r3, #32]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa93 f3a3 	rbit	r3, r3
 8000f26:	613b      	str	r3, [r7, #16]
  return result;
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8000f32:	2320      	movs	r3, #32
 8000f34:	e003      	b.n	8000f3e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	fab3 f383 	clz	r3, r3
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	210f      	movs	r1, #15
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	401a      	ands	r2, r3
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4e:	6a3b      	ldr	r3, [r7, #32]
 8000f50:	fa93 f3a3 	rbit	r3, r3
 8000f54:	61fb      	str	r3, [r7, #28]
  return result;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8000f60:	2320      	movs	r3, #32
 8000f62:	e003      	b.n	8000f6c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8000f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f66:	fab3 f383 	clz	r3, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	431a      	orrs	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	621a      	str	r2, [r3, #32]
}
 8000f7a:	bf00      	nop
 8000f7c:	372c      	adds	r7, #44	@ 0x2c
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <LL_GPIO_SetAFPin_8_15>:
{
 8000f86:	b480      	push	{r7}
 8000f88:	b08b      	sub	sp, #44	@ 0x2c
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	60f8      	str	r0, [r7, #12]
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa93 f3a3 	rbit	r3, r3
 8000fa2:	613b      	str	r3, [r7, #16]
  return result;
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8000fae:	2320      	movs	r3, #32
 8000fb0:	e003      	b.n	8000fba <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	fab3 f383 	clz	r3, r3
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	210f      	movs	r1, #15
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fcc:	6a3b      	ldr	r3, [r7, #32]
 8000fce:	fa93 f3a3 	rbit	r3, r3
 8000fd2:	61fb      	str	r3, [r7, #28]
  return result;
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8000fde:	2320      	movs	r3, #32
 8000fe0:	e003      	b.n	8000fea <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe4:	fab3 f383 	clz	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000ff8:	bf00      	nop
 8000ffa:	372c      	adds	r7, #44	@ 0x2c
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	fa93 f3a3 	rbit	r3, r3
 800101a:	60fb      	str	r3, [r7, #12]
  return result;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <LL_GPIO_Init+0x26>
    return 32U;
 8001026:	2320      	movs	r3, #32
 8001028:	e003      	b.n	8001032 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	fab3 f383 	clz	r3, r3
 8001030:	b2db      	uxtb	r3, r3
 8001032:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001034:	e048      	b.n	80010c8 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	2101      	movs	r1, #1
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d03a      	beq.n	80010c2 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d003      	beq.n	800105c <LL_GPIO_Init+0x58>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d10e      	bne.n	800107a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	461a      	mov	r2, r3
 8001062:	69b9      	ldr	r1, [r7, #24]
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff fed7 	bl	8000e18 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	6819      	ldr	r1, [r3, #0]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	461a      	mov	r2, r3
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff feb7 	bl	8000de8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	461a      	mov	r2, r3
 8001080:	69b9      	ldr	r1, [r7, #24]
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ff05 	bl	8000e92 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d111      	bne.n	80010b4 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	2bff      	cmp	r3, #255	@ 0xff
 8001094:	d807      	bhi.n	80010a6 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	461a      	mov	r2, r3
 800109c:	69b9      	ldr	r1, [r7, #24]
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ff34 	bl	8000f0c <LL_GPIO_SetAFPin_0_7>
 80010a4:	e006      	b.n	80010b4 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	461a      	mov	r2, r3
 80010ac:	69b9      	ldr	r1, [r7, #24]
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff69 	bl	8000f86 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	461a      	mov	r2, r3
 80010ba:	69b9      	ldr	r1, [r7, #24]
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff fe56 	bl	8000d6e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3301      	adds	r3, #1
 80010c6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	fa22 f303 	lsr.w	r3, r2, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1af      	bne.n	8001036 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <LL_SPI_IsEnabled>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010f0:	2b40      	cmp	r3, #64	@ 0x40
 80010f2:	d101      	bne.n	80010f8 <LL_SPI_IsEnabled+0x18>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <LL_SPI_IsEnabled+0x1a>
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <LL_SPI_SetRxFIFOThreshold>:
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	431a      	orrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	605a      	str	r2, [r3, #4]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_SPI_SetCRCPolynomial>:
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b29b      	uxth	r3, r3
 800113a:	461a      	mov	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	611a      	str	r2, [r3, #16]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffc0 	bl	80010e0 <LL_SPI_IsEnabled>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d145      	bne.n	80011f2 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800116e:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	6811      	ldr	r1, [r2, #0]
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	6852      	ldr	r2, [r2, #4]
 800117a:	4311      	orrs	r1, r2
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	68d2      	ldr	r2, [r2, #12]
 8001180:	4311      	orrs	r1, r2
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	6912      	ldr	r2, [r2, #16]
 8001186:	4311      	orrs	r1, r2
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	6952      	ldr	r2, [r2, #20]
 800118c:	4311      	orrs	r1, r2
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	6992      	ldr	r2, [r2, #24]
 8001192:	4311      	orrs	r1, r2
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	69d2      	ldr	r2, [r2, #28]
 8001198:	4311      	orrs	r1, r2
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	6a12      	ldr	r2, [r2, #32]
 800119e:	430a      	orrs	r2, r1
 80011a0:	431a      	orrs	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80011ae:	f023 0304 	bic.w	r3, r3, #4
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	6891      	ldr	r1, [r2, #8]
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	6952      	ldr	r2, [r2, #20]
 80011ba:	0c12      	lsrs	r2, r2, #16
 80011bc:	430a      	orrs	r2, r1
 80011be:	431a      	orrs	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80011cc:	d204      	bcs.n	80011d8 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 80011ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ff97 	bl	8001106 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011e0:	d105      	bne.n	80011ee <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e6:	4619      	mov	r1, r3
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff9f 	bl	800112c <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80011ee:	2300      	movs	r3, #0
 80011f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4a07      	ldr	r2, [pc, #28]	@ (800122c <LL_InitTick+0x30>)
 8001210:	3b01      	subs	r3, #1
 8001212:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <LL_InitTick+0x30>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	@ (800122c <LL_InitTick+0x30>)
 800121c:	2205      	movs	r2, #5
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000e010 	.word	0xe000e010

08001230 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001238:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ffdd 	bl	80011fc <LL_InitTick>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001254:	4a04      	ldr	r2, [pc, #16]	@ (8001268 <LL_SetSystemCoreClock+0x1c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000000 	.word	0x20000000

0800126c <LL_TIM_SetPrescaler>:
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_TIM_SetAutoReload>:
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <LL_TIM_SetRepetitionCounter>:
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_TIM_OC_SetCompareCH1>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_TIM_OC_SetCompareCH2>:
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <LL_TIM_OC_SetCompareCH3>:
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_TIM_OC_SetCompareCH4>:
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_TIM_OC_SetCompareCH5>:
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_TIM_OC_SetCompareCH6>:
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	695b      	ldr	r3, [r3, #20]
 8001378:	f043 0201 	orr.w	r2, r3, #1
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	615a      	str	r2, [r3, #20]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a27      	ldr	r2, [pc, #156]	@ (800143c <LL_TIM_Init+0xb0>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d003      	beq.n	80013ac <LL_TIM_Init+0x20>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013aa:	d106      	bne.n	80013ba <LL_TIM_Init+0x2e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a1f      	ldr	r2, [pc, #124]	@ (800143c <LL_TIM_Init+0xb0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00b      	beq.n	80013da <LL_TIM_Init+0x4e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013c8:	d007      	beq.n	80013da <LL_TIM_Init+0x4e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001440 <LL_TIM_Init+0xb4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d003      	beq.n	80013da <LL_TIM_Init+0x4e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001444 <LL_TIM_Init+0xb8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d106      	bne.n	80013e8 <LL_TIM_Init+0x5c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	4619      	mov	r1, r3
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff47 	bl	8001288 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	4619      	mov	r1, r3
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff33 	bl	800126c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a0c      	ldr	r2, [pc, #48]	@ (800143c <LL_TIM_Init+0xb0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d007      	beq.n	800141e <LL_TIM_Init+0x92>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a0b      	ldr	r2, [pc, #44]	@ (8001440 <LL_TIM_Init+0xb4>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d003      	beq.n	800141e <LL_TIM_Init+0x92>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <LL_TIM_Init+0xb8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d105      	bne.n	800142a <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	4619      	mov	r1, r3
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff3d 	bl	80012a4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ff9e 	bl	800136c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40012c00 	.word	0x40012c00
 8001440:	40014000 	.word	0x40014000
 8001444:	40014400 	.word	0x40014400

08001448 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800145e:	d045      	beq.n	80014ec <LL_TIM_OC_Init+0xa4>
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001466:	d848      	bhi.n	80014fa <LL_TIM_OC_Init+0xb2>
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800146e:	d036      	beq.n	80014de <LL_TIM_OC_Init+0x96>
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001476:	d840      	bhi.n	80014fa <LL_TIM_OC_Init+0xb2>
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800147e:	d027      	beq.n	80014d0 <LL_TIM_OC_Init+0x88>
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001486:	d838      	bhi.n	80014fa <LL_TIM_OC_Init+0xb2>
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800148e:	d018      	beq.n	80014c2 <LL_TIM_OC_Init+0x7a>
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001496:	d830      	bhi.n	80014fa <LL_TIM_OC_Init+0xb2>
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d003      	beq.n	80014a6 <LL_TIM_OC_Init+0x5e>
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2b10      	cmp	r3, #16
 80014a2:	d007      	beq.n	80014b4 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80014a4:	e029      	b.n	80014fa <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f000 f891 	bl	80015d0 <OC1Config>
 80014ae:	4603      	mov	r3, r0
 80014b0:	75fb      	strb	r3, [r7, #23]
      break;
 80014b2:	e023      	b.n	80014fc <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f000 f8fe 	bl	80016b8 <OC2Config>
 80014bc:	4603      	mov	r3, r0
 80014be:	75fb      	strb	r3, [r7, #23]
      break;
 80014c0:	e01c      	b.n	80014fc <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f000 f96f 	bl	80017a8 <OC3Config>
 80014ca:	4603      	mov	r3, r0
 80014cc:	75fb      	strb	r3, [r7, #23]
      break;
 80014ce:	e015      	b.n	80014fc <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f000 f9e0 	bl	8001898 <OC4Config>
 80014d8:	4603      	mov	r3, r0
 80014da:	75fb      	strb	r3, [r7, #23]
      break;
 80014dc:	e00e      	b.n	80014fc <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f000 fa39 	bl	8001958 <OC5Config>
 80014e6:	4603      	mov	r3, r0
 80014e8:	75fb      	strb	r3, [r7, #23]
      break;
 80014ea:	e007      	b.n	80014fc <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 fa8a 	bl	8001a08 <OC6Config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	75fb      	strb	r3, [r7, #23]
      break;
 80014f8:	e000      	b.n	80014fc <LL_TIM_OC_Init+0xb4>
      break;
 80014fa:	bf00      	nop
  }

  return result;
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	7b12      	ldrb	r2, [r2, #12]
 8001520:	4313      	orrs	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	4313      	orrs	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4313      	orrs	r3, r2
 800153e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4313      	orrs	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	89d2      	ldrh	r2, [r2, #14]
 8001558:	4313      	orrs	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001574:	4313      	orrs	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	4313      	orrs	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a10      	ldr	r2, [pc, #64]	@ (80015cc <LL_TIM_BDTR_Init+0xc4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d114      	bne.n	80015b8 <LL_TIM_BDTR_Init+0xb0>
    assert_param(IS_LL_TIM_BREAK2_STATE(TIM_BDTRInitStruct->Break2State));
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	4313      	orrs	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012c00 	.word	0x40012c00

080015d0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	f023 0201 	bic.w	r2, r3, #1
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f023 0303 	bic.w	r3, r3, #3
 80015fe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	4313      	orrs	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f023 0202 	bic.w	r2, r3, #2
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f023 0201 	bic.w	r2, r3, #1
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	4313      	orrs	r3, r2
 800162c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a1e      	ldr	r2, [pc, #120]	@ (80016ac <OC1Config+0xdc>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d007      	beq.n	8001646 <OC1Config+0x76>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a1d      	ldr	r2, [pc, #116]	@ (80016b0 <OC1Config+0xe0>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d003      	beq.n	8001646 <OC1Config+0x76>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a1c      	ldr	r2, [pc, #112]	@ (80016b4 <OC1Config+0xe4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d11e      	bne.n	8001684 <OC1Config+0xb4>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f023 0208 	bic.w	r2, r3, #8
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4313      	orrs	r3, r2
 8001654:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f023 0204 	bic.w	r2, r3, #4
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4313      	orrs	r3, r2
 8001664:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	4619      	mov	r1, r3
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff fe12 	bl	80012c0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40012c00 	.word	0x40012c00
 80016b0:	40014000 	.word	0x40014000
 80016b4:	40014400 	.word	0x40014400

080016b8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	f023 0210 	bic.w	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80016e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	0212      	lsls	r2, r2, #8
 80016f8:	4313      	orrs	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f023 0220 	bic.w	r2, r3, #32
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	4313      	orrs	r3, r2
 800170a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	f023 0210 	bic.w	r2, r3, #16
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	4313      	orrs	r3, r2
 800171a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a1f      	ldr	r2, [pc, #124]	@ (800179c <OC2Config+0xe4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d007      	beq.n	8001734 <OC2Config+0x7c>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a1e      	ldr	r2, [pc, #120]	@ (80017a0 <OC2Config+0xe8>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d003      	beq.n	8001734 <OC2Config+0x7c>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a1d      	ldr	r2, [pc, #116]	@ (80017a4 <OC2Config+0xec>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d11f      	bne.n	8001774 <OC2Config+0xbc>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	019b      	lsls	r3, r3, #6
 8001740:	4313      	orrs	r3, r2
 8001742:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	019b      	lsls	r3, r3, #6
 8001750:	4313      	orrs	r3, r2
 8001752:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	4619      	mov	r1, r3
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff fda8 	bl	80012dc <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40012c00 	.word	0x40012c00
 80017a0:	40014000 	.word	0x40014000
 80017a4:	40014400 	.word	0x40014400

080017a8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f023 0303 	bic.w	r3, r3, #3
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	4313      	orrs	r3, r2
 80017f8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	4313      	orrs	r3, r2
 8001808:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a1f      	ldr	r2, [pc, #124]	@ (800188c <OC3Config+0xe4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d007      	beq.n	8001822 <OC3Config+0x7a>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a1e      	ldr	r2, [pc, #120]	@ (8001890 <OC3Config+0xe8>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d003      	beq.n	8001822 <OC3Config+0x7a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a1d      	ldr	r2, [pc, #116]	@ (8001894 <OC3Config+0xec>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d11f      	bne.n	8001862 <OC3Config+0xba>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	029b      	lsls	r3, r3, #10
 800182e:	4313      	orrs	r3, r2
 8001830:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	029b      	lsls	r3, r3, #10
 800183e:	4313      	orrs	r3, r2
 8001840:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	015b      	lsls	r3, r3, #5
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	4619      	mov	r1, r3
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff fd3f 	bl	80012f8 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40012c00 	.word	0x40012c00
 8001890:	40014000 	.word	0x40014000
 8001894:	40014400 	.word	0x40014400

08001898 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	0212      	lsls	r2, r2, #8
 80018d8:	4313      	orrs	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	031b      	lsls	r3, r3, #12
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	031b      	lsls	r3, r3, #12
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a13      	ldr	r2, [pc, #76]	@ (800194c <OC4Config+0xb4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d007      	beq.n	8001914 <OC4Config+0x7c>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a12      	ldr	r2, [pc, #72]	@ (8001950 <OC4Config+0xb8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d003      	beq.n	8001914 <OC4Config+0x7c>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a11      	ldr	r2, [pc, #68]	@ (8001954 <OC4Config+0xbc>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d107      	bne.n	8001924 <OC4Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	019b      	lsls	r3, r3, #6
 8001920:	4313      	orrs	r3, r2
 8001922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4619      	mov	r1, r3
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff fcec 	bl	8001314 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40012c00 	.word	0x40012c00
 8001950:	40014000 	.word	0x40014000
 8001954:	40014400 	.word	0x40014400

08001958 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001978:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	4313      	orrs	r3, r2
 800198a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	041b      	lsls	r3, r3, #16
 8001998:	4313      	orrs	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	041b      	lsls	r3, r3, #16
 80019a8:	4313      	orrs	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a13      	ldr	r2, [pc, #76]	@ (80019fc <OC5Config+0xa4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d007      	beq.n	80019c4 <OC5Config+0x6c>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a12      	ldr	r2, [pc, #72]	@ (8001a00 <OC5Config+0xa8>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d003      	beq.n	80019c4 <OC5Config+0x6c>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a11      	ldr	r2, [pc, #68]	@ (8001a04 <OC5Config+0xac>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d109      	bne.n	80019d8 <OC5Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	4619      	mov	r1, r3
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff fca3 	bl	8001330 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40012c00 	.word	0x40012c00
 8001a00:	40014000 	.word	0x40014000
 8001a04:	40014400 	.word	0x40014400

08001a08 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a28:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	0212      	lsls	r2, r2, #8
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	051b      	lsls	r3, r3, #20
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	051b      	lsls	r3, r3, #20
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <OC6Config+0xa4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d007      	beq.n	8001a76 <OC6Config+0x6e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a11      	ldr	r2, [pc, #68]	@ (8001ab0 <OC6Config+0xa8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d003      	beq.n	8001a76 <OC6Config+0x6e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a10      	ldr	r2, [pc, #64]	@ (8001ab4 <OC6Config+0xac>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d109      	bne.n	8001a8a <OC6Config+0x82>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	029b      	lsls	r3, r3, #10
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4619      	mov	r1, r3
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fc5a 	bl	8001350 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40012c00 	.word	0x40012c00
 8001ab0:	40014000 	.word	0x40014000
 8001ab4:	40014400 	.word	0x40014400

08001ab8 <memset>:
 8001ab8:	4402      	add	r2, r0
 8001aba:	4603      	mov	r3, r0
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d100      	bne.n	8001ac2 <memset+0xa>
 8001ac0:	4770      	bx	lr
 8001ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ac6:	e7f9      	b.n	8001abc <memset+0x4>

08001ac8 <__libc_init_array>:
 8001ac8:	b570      	push	{r4, r5, r6, lr}
 8001aca:	4d0d      	ldr	r5, [pc, #52]	@ (8001b00 <__libc_init_array+0x38>)
 8001acc:	4c0d      	ldr	r4, [pc, #52]	@ (8001b04 <__libc_init_array+0x3c>)
 8001ace:	1b64      	subs	r4, r4, r5
 8001ad0:	10a4      	asrs	r4, r4, #2
 8001ad2:	2600      	movs	r6, #0
 8001ad4:	42a6      	cmp	r6, r4
 8001ad6:	d109      	bne.n	8001aec <__libc_init_array+0x24>
 8001ad8:	4d0b      	ldr	r5, [pc, #44]	@ (8001b08 <__libc_init_array+0x40>)
 8001ada:	4c0c      	ldr	r4, [pc, #48]	@ (8001b0c <__libc_init_array+0x44>)
 8001adc:	f000 f818 	bl	8001b10 <_init>
 8001ae0:	1b64      	subs	r4, r4, r5
 8001ae2:	10a4      	asrs	r4, r4, #2
 8001ae4:	2600      	movs	r6, #0
 8001ae6:	42a6      	cmp	r6, r4
 8001ae8:	d105      	bne.n	8001af6 <__libc_init_array+0x2e>
 8001aea:	bd70      	pop	{r4, r5, r6, pc}
 8001aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8001af0:	4798      	blx	r3
 8001af2:	3601      	adds	r6, #1
 8001af4:	e7ee      	b.n	8001ad4 <__libc_init_array+0xc>
 8001af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001afa:	4798      	blx	r3
 8001afc:	3601      	adds	r6, #1
 8001afe:	e7f2      	b.n	8001ae6 <__libc_init_array+0x1e>
 8001b00:	08001b40 	.word	0x08001b40
 8001b04:	08001b40 	.word	0x08001b40
 8001b08:	08001b40 	.word	0x08001b40
 8001b0c:	08001b44 	.word	0x08001b44

08001b10 <_init>:
 8001b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b12:	bf00      	nop
 8001b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b16:	bc08      	pop	{r3}
 8001b18:	469e      	mov	lr, r3
 8001b1a:	4770      	bx	lr

08001b1c <_fini>:
 8001b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b1e:	bf00      	nop
 8001b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b22:	bc08      	pop	{r3}
 8001b24:	469e      	mov	lr, r3
 8001b26:	4770      	bx	lr
