
nucleo_fram_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002078  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002204  08002204  00003204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800221c  0800221c  00004004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800221c  0800221c  00004004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800221c  0800221c  00004004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800221c  0800221c  0000321c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002220  08002220  00003220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08002224  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08002228  00004004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08002228  00004020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063c6  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fe8  00000000  00000000  0000a3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  0000b3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000551  00000000  00000000  0000bb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015efe  00000000  00000000  0000c069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000407b  00000000  00000000  00021f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081690  00000000  00000000  00025fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000045  00000000  00000000  000a7672  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dd8  00000000  00000000  000a76b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000a9490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <deregister_tm_clones>:
 800018c:	4803      	ldr	r0, [pc, #12]	@ (800019c <deregister_tm_clones+0x10>)
 800018e:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <deregister_tm_clones+0x14>)
 8000190:	4283      	cmp	r3, r0
 8000192:	d002      	beq.n	800019a <deregister_tm_clones+0xe>
 8000194:	4b03      	ldr	r3, [pc, #12]	@ (80001a4 <deregister_tm_clones+0x18>)
 8000196:	b103      	cbz	r3, 800019a <deregister_tm_clones+0xe>
 8000198:	4718      	bx	r3
 800019a:	4770      	bx	lr
 800019c:	20000004 	.word	0x20000004
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <register_tm_clones+0x18>)
 80001aa:	4b06      	ldr	r3, [pc, #24]	@ (80001c4 <register_tm_clones+0x1c>)
 80001ac:	1a1b      	subs	r3, r3, r0
 80001ae:	0fd9      	lsrs	r1, r3, #31
 80001b0:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b4:	1049      	asrs	r1, r1, #1
 80001b6:	d002      	beq.n	80001be <register_tm_clones+0x16>
 80001b8:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <register_tm_clones+0x20>)
 80001ba:	b103      	cbz	r3, 80001be <register_tm_clones+0x16>
 80001bc:	4718      	bx	r3
 80001be:	4770      	bx	lr
 80001c0:	20000004 	.word	0x20000004
 80001c4:	20000004 	.word	0x20000004
 80001c8:	00000000 	.word	0x00000000

080001cc <__do_global_dtors_aux>:
 80001cc:	b510      	push	{r4, lr}
 80001ce:	4c06      	ldr	r4, [pc, #24]	@ (80001e8 <__do_global_dtors_aux+0x1c>)
 80001d0:	7823      	ldrb	r3, [r4, #0]
 80001d2:	b943      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x1a>
 80001d4:	f7ff ffda 	bl	800018c <deregister_tm_clones>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x20>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x16>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x24>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000004 	.word	0x20000004
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080021ec 	.word	0x080021ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b05      	ldr	r3, [pc, #20]	@ (800020c <frame_dummy+0x18>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4905      	ldr	r1, [pc, #20]	@ (8000210 <frame_dummy+0x1c>)
 80001fc:	4805      	ldr	r0, [pc, #20]	@ (8000214 <frame_dummy+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000206:	f7ff bfcf 	b.w	80001a8 <register_tm_clones>
 800020a:	bf00      	nop
 800020c:	00000000 	.word	0x00000000
 8000210:	20000008 	.word	0x20000008
 8000214:	080021ec 	.word	0x080021ec

08000218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f003 0307 	and.w	r3, r3, #7
 8000226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000228:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <__NVIC_SetPriorityGrouping+0x44>)
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800022e:	68ba      	ldr	r2, [r7, #8]
 8000230:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000234:	4013      	ands	r3, r2
 8000236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000240:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000244:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800024a:	4a04      	ldr	r2, [pc, #16]	@ (800025c <__NVIC_SetPriorityGrouping+0x44>)
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	60d3      	str	r3, [r2, #12]
}
 8000250:	bf00      	nop
 8000252:	3714      	adds	r7, #20
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000ed00 	.word	0xe000ed00

08000260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000264:	4b04      	ldr	r3, [pc, #16]	@ (8000278 <__NVIC_GetPriorityGrouping+0x18>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	0a1b      	lsrs	r3, r3, #8
 800026a:	f003 0307 	and.w	r3, r3, #7
}
 800026e:	4618      	mov	r0, r3
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	6039      	str	r1, [r7, #0]
 8000286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028c:	2b00      	cmp	r3, #0
 800028e:	db0a      	blt.n	80002a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	b2da      	uxtb	r2, r3
 8000294:	490c      	ldr	r1, [pc, #48]	@ (80002c8 <__NVIC_SetPriority+0x4c>)
 8000296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029a:	0112      	lsls	r2, r2, #4
 800029c:	b2d2      	uxtb	r2, r2
 800029e:	440b      	add	r3, r1
 80002a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002a4:	e00a      	b.n	80002bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	b2da      	uxtb	r2, r3
 80002aa:	4908      	ldr	r1, [pc, #32]	@ (80002cc <__NVIC_SetPriority+0x50>)
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	f003 030f 	and.w	r3, r3, #15
 80002b2:	3b04      	subs	r3, #4
 80002b4:	0112      	lsls	r2, r2, #4
 80002b6:	b2d2      	uxtb	r2, r2
 80002b8:	440b      	add	r3, r1
 80002ba:	761a      	strb	r2, [r3, #24]
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	e000e100 	.word	0xe000e100
 80002cc:	e000ed00 	.word	0xe000ed00

080002d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b089      	sub	sp, #36	@ 0x24
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	60b9      	str	r1, [r7, #8]
 80002da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	f003 0307 	and.w	r3, r3, #7
 80002e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002e4:	69fb      	ldr	r3, [r7, #28]
 80002e6:	f1c3 0307 	rsb	r3, r3, #7
 80002ea:	2b04      	cmp	r3, #4
 80002ec:	bf28      	it	cs
 80002ee:	2304      	movcs	r3, #4
 80002f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002f2:	69fb      	ldr	r3, [r7, #28]
 80002f4:	3304      	adds	r3, #4
 80002f6:	2b06      	cmp	r3, #6
 80002f8:	d902      	bls.n	8000300 <NVIC_EncodePriority+0x30>
 80002fa:	69fb      	ldr	r3, [r7, #28]
 80002fc:	3b03      	subs	r3, #3
 80002fe:	e000      	b.n	8000302 <NVIC_EncodePriority+0x32>
 8000300:	2300      	movs	r3, #0
 8000302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000304:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000308:	69bb      	ldr	r3, [r7, #24]
 800030a:	fa02 f303 	lsl.w	r3, r2, r3
 800030e:	43da      	mvns	r2, r3
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	401a      	ands	r2, r3
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000318:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	fa01 f303 	lsl.w	r3, r1, r3
 8000322:	43d9      	mvns	r1, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000328:	4313      	orrs	r3, r2
         );
}
 800032a:	4618      	mov	r0, r3
 800032c:	3724      	adds	r7, #36	@ 0x24
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr

08000336 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000336:	b480      	push	{r7}
 8000338:	b083      	sub	sp, #12
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]
 800033e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	431a      	orrs	r2, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	609a      	str	r2, [r3, #8]
}
 8000350:	bf00      	nop
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800035c:	b480      	push	{r7}
 800035e:	b087      	sub	sp, #28
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	3330      	adds	r3, #48	@ 0x30
 800036c:	461a      	mov	r2, r3
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	0a1b      	lsrs	r3, r3, #8
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	f003 030c 	and.w	r3, r3, #12
 8000378:	4413      	add	r3, r2
 800037a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	f003 031f 	and.w	r3, r3, #31
 8000386:	211f      	movs	r1, #31
 8000388:	fa01 f303 	lsl.w	r3, r1, r3
 800038c:	43db      	mvns	r3, r3
 800038e:	401a      	ands	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	0e9b      	lsrs	r3, r3, #26
 8000394:	f003 011f 	and.w	r1, r3, #31
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	f003 031f 	and.w	r3, r3, #31
 800039e:	fa01 f303 	lsl.w	r3, r1, r3
 80003a2:	431a      	orrs	r2, r3
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80003a8:	bf00      	nop
 80003aa:	371c      	adds	r7, #28
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr

080003b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b087      	sub	sp, #28
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	60f8      	str	r0, [r7, #12]
 80003bc:	60b9      	str	r1, [r7, #8]
 80003be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	3314      	adds	r3, #20
 80003c4:	461a      	mov	r2, r3
 80003c6:	68bb      	ldr	r3, [r7, #8]
 80003c8:	0e5b      	lsrs	r3, r3, #25
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	f003 0304 	and.w	r3, r3, #4
 80003d0:	4413      	add	r3, r2
 80003d2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	0d1b      	lsrs	r3, r3, #20
 80003dc:	f003 031f 	and.w	r3, r3, #31
 80003e0:	2107      	movs	r1, #7
 80003e2:	fa01 f303 	lsl.w	r3, r1, r3
 80003e6:	43db      	mvns	r3, r3
 80003e8:	401a      	ands	r2, r3
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	0d1b      	lsrs	r3, r3, #20
 80003ee:	f003 031f 	and.w	r3, r3, #31
 80003f2:	6879      	ldr	r1, [r7, #4]
 80003f4:	fa01 f303 	lsl.w	r3, r1, r3
 80003f8:	431a      	orrs	r2, r3
 80003fa:	697b      	ldr	r3, [r7, #20]
 80003fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80003fe:	bf00      	nop
 8000400:	371c      	adds	r7, #28
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
	...

0800040c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
 8000412:	60f8      	str	r0, [r7, #12]
 8000414:	60b9      	str	r1, [r7, #8]
 8000416:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000424:	43db      	mvns	r3, r3
 8000426:	401a      	ands	r2, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	f003 0318 	and.w	r3, r3, #24
 800042e:	4908      	ldr	r1, [pc, #32]	@ (8000450 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000430:	40d9      	lsrs	r1, r3
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	400b      	ands	r3, r1
 8000436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800043a:	431a      	orrs	r2, r3
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000442:	bf00      	nop
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	0007ffff 	.word	0x0007ffff

08000454 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	691b      	ldr	r3, [r3, #16]
 8000462:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000466:	f023 0303 	bic.w	r3, r3, #3
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	431a      	orrs	r2, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	611a      	str	r2, [r3, #16]
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr

0800047e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800047e:	b480      	push	{r7}
 8000480:	b083      	sub	sp, #12
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800048e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	6093      	str	r3, [r2, #8]
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b083      	sub	sp, #12
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	689b      	ldr	r3, [r3, #8]
 80004ae:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80004b2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80004b6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80004be:	bf00      	nop
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80004ca:	b480      	push	{r7}
 80004cc:	b083      	sub	sp, #12
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	689b      	ldr	r3, [r3, #8]
 80004d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80004da:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80004de:	f043 0201 	orr.w	r2, r3, #1
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80004f2:	b480      	push	{r7}
 80004f4:	b083      	sub	sp, #12
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000502:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000506:	f043 0204 	orr.w	r2, r3, #4
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(const ADC_TypeDef *ADCx)
{
 800051a:	b480      	push	{r7}
 800051c:	b083      	sub	sp, #12
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000526:	b29b      	uxth	r3, r3
}
 8000528:	4618      	mov	r0, r3
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(const ADC_TypeDef *ADCx)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f003 0304 	and.w	r3, r3, #4
 8000544:	2b04      	cmp	r3, #4
 8000546:	d101      	bne.n	800054c <LL_ADC_IsActiveFlag_EOC+0x18>
 8000548:	2301      	movs	r3, #1
 800054a:	e000      	b.n	800054e <LL_ADC_IsActiveFlag_EOC+0x1a>
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2204      	movs	r2, #4
 8000566:	601a      	str	r2, [r3, #0]
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000578:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <LL_RCC_MSI_Enable+0x1c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a04      	ldr	r2, [pc, #16]	@ (8000590 <LL_RCC_MSI_Enable+0x1c>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	6013      	str	r3, [r2, #0]
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000

08000594 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000598:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <LL_RCC_MSI_IsReady+0x20>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f003 0302 	and.w	r3, r3, #2
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	d101      	bne.n	80005a8 <LL_RCC_MSI_IsReady+0x14>
 80005a4:	2301      	movs	r3, #1
 80005a6:	e000      	b.n	80005aa <LL_RCC_MSI_IsReady+0x16>
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	40021000 	.word	0x40021000

080005b8 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80005bc:	4b05      	ldr	r3, [pc, #20]	@ (80005d4 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a04      	ldr	r2, [pc, #16]	@ (80005d4 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80005c2:	f043 0308 	orr.w	r3, r3, #8
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000

080005d8 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <LL_RCC_MSI_SetRange+0x24>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80005e8:	4904      	ldr	r1, [pc, #16]	@ (80005fc <LL_RCC_MSI_SetRange+0x24>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	600b      	str	r3, [r1, #0]
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	40021000 	.word	0x40021000

08000600 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000608:	4b07      	ldr	r3, [pc, #28]	@ (8000628 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	021b      	lsls	r3, r3, #8
 8000614:	4904      	ldr	r1, [pc, #16]	@ (8000628 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8000616:	4313      	orrs	r3, r2
 8000618:	604b      	str	r3, [r1, #4]
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000

0800062c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000634:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <LL_RCC_SetSysClkSource+0x24>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	f023 0203 	bic.w	r2, r3, #3
 800063c:	4904      	ldr	r1, [pc, #16]	@ (8000650 <LL_RCC_SetSysClkSource+0x24>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4313      	orrs	r3, r2
 8000642:	608b      	str	r3, [r1, #8]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	40021000 	.word	0x40021000

08000654 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000658:	4b04      	ldr	r3, [pc, #16]	@ (800066c <LL_RCC_GetSysClkSource+0x18>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	f003 030c 	and.w	r3, r3, #12
}
 8000660:	4618      	mov	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40021000 	.word	0x40021000

08000670 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <LL_RCC_SetAHBPrescaler+0x24>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000680:	4904      	ldr	r1, [pc, #16]	@ (8000694 <LL_RCC_SetAHBPrescaler+0x24>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4313      	orrs	r3, r2
 8000686:	608b      	str	r3, [r1, #8]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	40021000 	.word	0x40021000

08000698 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <LL_RCC_SetAPB1Prescaler+0x24>)
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80006a8:	4904      	ldr	r1, [pc, #16]	@ (80006bc <LL_RCC_SetAPB1Prescaler+0x24>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4313      	orrs	r3, r2
 80006ae:	608b      	str	r3, [r1, #8]
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	40021000 	.word	0x40021000

080006c0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80006d0:	4904      	ldr	r1, [pc, #16]	@ (80006e4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	608b      	str	r3, [r1, #8]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	40021000 	.word	0x40021000

080006e8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80006ec:	4b05      	ldr	r3, [pc, #20]	@ (8000704 <LL_RCC_PLL_Enable+0x1c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a04      	ldr	r2, [pc, #16]	@ (8000704 <LL_RCC_PLL_Enable+0x1c>)
 80006f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80006f6:	6013      	str	r3, [r2, #0]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <LL_RCC_PLL_IsReady+0x24>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000714:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000718:	d101      	bne.n	800071e <LL_RCC_PLL_IsReady+0x16>
 800071a:	2301      	movs	r3, #1
 800071c:	e000      	b.n	8000720 <LL_RCC_PLL_IsReady+0x18>
 800071e:	2300      	movs	r3, #0
}
 8000720:	4618      	mov	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
 800073c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800073e:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000740:	68da      	ldr	r2, [r3, #12]
 8000742:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000744:	4013      	ands	r3, r2
 8000746:	68f9      	ldr	r1, [r7, #12]
 8000748:	68ba      	ldr	r2, [r7, #8]
 800074a:	4311      	orrs	r1, r2
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	0212      	lsls	r2, r2, #8
 8000750:	4311      	orrs	r1, r2
 8000752:	683a      	ldr	r2, [r7, #0]
 8000754:	430a      	orrs	r2, r1
 8000756:	4904      	ldr	r1, [pc, #16]	@ (8000768 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000758:	4313      	orrs	r3, r2
 800075a:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	40021000 	.word	0x40021000
 800076c:	f9ff808c 	.word	0xf9ff808c

08000770 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000774:	4b05      	ldr	r3, [pc, #20]	@ (800078c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	4a04      	ldr	r2, [pc, #16]	@ (800078c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800077a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800077e:	60d3      	str	r3, [r2, #12]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000

08000790 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000798:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <LL_AHB2_GRP1_EnableClock+0x2c>)
 800079a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800079c:	4907      	ldr	r1, [pc, #28]	@ (80007bc <LL_AHB2_GRP1_EnableClock+0x2c>)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007a4:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80007a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4013      	ands	r3, r2
 80007ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ae:	68fb      	ldr	r3, [r7, #12]
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	40021000 	.word	0x40021000

080007c0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80007c8:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80007ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80007cc:	4907      	ldr	r1, [pc, #28]	@ (80007ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80007d4:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80007d6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4013      	ands	r3, r2
 80007dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007de:	68fb      	ldr	r3, [r7, #12]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	40021000 	.word	0x40021000

080007f0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007f8:	4b08      	ldr	r3, [pc, #32]	@ (800081c <LL_APB2_GRP1_EnableClock+0x2c>)
 80007fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80007fc:	4907      	ldr	r1, [pc, #28]	@ (800081c <LL_APB2_GRP1_EnableClock+0x2c>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4313      	orrs	r3, r2
 8000802:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000804:	4b05      	ldr	r3, [pc, #20]	@ (800081c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000806:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4013      	ands	r3, r2
 800080c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800080e:	68fb      	ldr	r3, [r7, #12]
}
 8000810:	bf00      	nop
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	40021000 	.word	0x40021000

08000820 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <LL_FLASH_SetLatency+0x24>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f023 0207 	bic.w	r2, r3, #7
 8000830:	4904      	ldr	r1, [pc, #16]	@ (8000844 <LL_FLASH_SetLatency+0x24>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4313      	orrs	r3, r2
 8000836:	600b      	str	r3, [r1, #0]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	40022000 	.word	0x40022000

08000848 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800084c:	4b04      	ldr	r3, [pc, #16]	@ (8000860 <LL_FLASH_GetLatency+0x18>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f003 0307 	and.w	r3, r3, #7
}
 8000854:	4618      	mov	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40022000 	.word	0x40022000

08000864 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8000874:	4904      	ldr	r1, [pc, #16]	@ (8000888 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4313      	orrs	r3, r2
 800087a:	600b      	str	r3, [r1, #0]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	40007000 	.word	0x40007000

0800088c <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8000890:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000892:	695b      	ldr	r3, [r3, #20]
 8000894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800089c:	d101      	bne.n	80008a2 <LL_PWR_IsActiveFlag_VOS+0x16>
 800089e:	2301      	movs	r3, #1
 80008a0:	e000      	b.n	80008a4 <LL_PWR_IsActiveFlag_VOS+0x18>
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40007000 	.word	0x40007000

080008b4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	601a      	str	r2, [r3, #0]
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	f023 0210 	bic.w	r2, r3, #16
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	431a      	orrs	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	605a      	str	r2, [r3, #4]
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f043 0208 	orr.w	r2, r3, #8
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	605a      	str	r2, [r3, #4]
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800091a:	b480      	push	{r7}
 800091c:	b083      	sub	sp, #12
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f043 0201 	orr.w	r2, r3, #1
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	601a      	str	r2, [r3, #0]
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800095a:	b480      	push	{r7}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6a1a      	ldr	r2, [r3, #32]
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	431a      	orrs	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	621a      	str	r2, [r3, #32]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d028      	beq.n	80009de <LL_TIM_OC_DisableFast+0x62>
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	2b04      	cmp	r3, #4
 8000990:	d023      	beq.n	80009da <LL_TIM_OC_DisableFast+0x5e>
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	2b10      	cmp	r3, #16
 8000996:	d01e      	beq.n	80009d6 <LL_TIM_OC_DisableFast+0x5a>
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	2b40      	cmp	r3, #64	@ 0x40
 800099c:	d019      	beq.n	80009d2 <LL_TIM_OC_DisableFast+0x56>
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009a4:	d013      	beq.n	80009ce <LL_TIM_OC_DisableFast+0x52>
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80009ac:	d00d      	beq.n	80009ca <LL_TIM_OC_DisableFast+0x4e>
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80009b4:	d007      	beq.n	80009c6 <LL_TIM_OC_DisableFast+0x4a>
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80009bc:	d101      	bne.n	80009c2 <LL_TIM_OC_DisableFast+0x46>
 80009be:	2307      	movs	r3, #7
 80009c0:	e00e      	b.n	80009e0 <LL_TIM_OC_DisableFast+0x64>
 80009c2:	2308      	movs	r3, #8
 80009c4:	e00c      	b.n	80009e0 <LL_TIM_OC_DisableFast+0x64>
 80009c6:	2306      	movs	r3, #6
 80009c8:	e00a      	b.n	80009e0 <LL_TIM_OC_DisableFast+0x64>
 80009ca:	2305      	movs	r3, #5
 80009cc:	e008      	b.n	80009e0 <LL_TIM_OC_DisableFast+0x64>
 80009ce:	2304      	movs	r3, #4
 80009d0:	e006      	b.n	80009e0 <LL_TIM_OC_DisableFast+0x64>
 80009d2:	2303      	movs	r3, #3
 80009d4:	e004      	b.n	80009e0 <LL_TIM_OC_DisableFast+0x64>
 80009d6:	2302      	movs	r3, #2
 80009d8:	e002      	b.n	80009e0 <LL_TIM_OC_DisableFast+0x64>
 80009da:	2301      	movs	r3, #1
 80009dc:	e000      	b.n	80009e0 <LL_TIM_OC_DisableFast+0x64>
 80009de:	2300      	movs	r3, #0
 80009e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	3318      	adds	r3, #24
 80009e6:	4619      	mov	r1, r3
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000a18 <LL_TIM_OC_DisableFast+0x9c>)
 80009ec:	5cd3      	ldrb	r3, [r2, r3]
 80009ee:	440b      	add	r3, r1
 80009f0:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	4908      	ldr	r1, [pc, #32]	@ (8000a1c <LL_TIM_OC_DisableFast+0xa0>)
 80009fa:	5ccb      	ldrb	r3, [r1, r3]
 80009fc:	4619      	mov	r1, r3
 80009fe:	2304      	movs	r3, #4
 8000a00:	408b      	lsls	r3, r1
 8000a02:	43db      	mvns	r3, r3
 8000a04:	401a      	ands	r2, r3
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	601a      	str	r2, [r3, #0]

}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	08002204 	.word	0x08002204
 8000a1c:	08002210 	.word	0x08002210

08000a20 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d028      	beq.n	8000a82 <LL_TIM_OC_EnablePreload+0x62>
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	d023      	beq.n	8000a7e <LL_TIM_OC_EnablePreload+0x5e>
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	2b10      	cmp	r3, #16
 8000a3a:	d01e      	beq.n	8000a7a <LL_TIM_OC_EnablePreload+0x5a>
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	2b40      	cmp	r3, #64	@ 0x40
 8000a40:	d019      	beq.n	8000a76 <LL_TIM_OC_EnablePreload+0x56>
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a48:	d013      	beq.n	8000a72 <LL_TIM_OC_EnablePreload+0x52>
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a50:	d00d      	beq.n	8000a6e <LL_TIM_OC_EnablePreload+0x4e>
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000a58:	d007      	beq.n	8000a6a <LL_TIM_OC_EnablePreload+0x4a>
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a60:	d101      	bne.n	8000a66 <LL_TIM_OC_EnablePreload+0x46>
 8000a62:	2307      	movs	r3, #7
 8000a64:	e00e      	b.n	8000a84 <LL_TIM_OC_EnablePreload+0x64>
 8000a66:	2308      	movs	r3, #8
 8000a68:	e00c      	b.n	8000a84 <LL_TIM_OC_EnablePreload+0x64>
 8000a6a:	2306      	movs	r3, #6
 8000a6c:	e00a      	b.n	8000a84 <LL_TIM_OC_EnablePreload+0x64>
 8000a6e:	2305      	movs	r3, #5
 8000a70:	e008      	b.n	8000a84 <LL_TIM_OC_EnablePreload+0x64>
 8000a72:	2304      	movs	r3, #4
 8000a74:	e006      	b.n	8000a84 <LL_TIM_OC_EnablePreload+0x64>
 8000a76:	2303      	movs	r3, #3
 8000a78:	e004      	b.n	8000a84 <LL_TIM_OC_EnablePreload+0x64>
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	e002      	b.n	8000a84 <LL_TIM_OC_EnablePreload+0x64>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e000      	b.n	8000a84 <LL_TIM_OC_EnablePreload+0x64>
 8000a82:	2300      	movs	r3, #0
 8000a84:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3318      	adds	r3, #24
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <LL_TIM_OC_EnablePreload+0x98>)
 8000a90:	5cd3      	ldrb	r3, [r2, r3]
 8000a92:	440b      	add	r3, r1
 8000a94:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	4907      	ldr	r1, [pc, #28]	@ (8000abc <LL_TIM_OC_EnablePreload+0x9c>)
 8000a9e:	5ccb      	ldrb	r3, [r1, r3]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	408b      	lsls	r3, r1
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	08002204 	.word	0x08002204
 8000abc:	08002210 	.word	0x08002210

08000ac0 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <LL_TIM_DisableExternalClock>:
  * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	609a      	str	r2, [r3, #8]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8000b0e:	f023 0307 	bic.w	r3, r3, #7
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	431a      	orrs	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	609a      	str	r2, [r3, #8]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	431a      	orrs	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	605a      	str	r2, [r3, #4]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	431a      	orrs	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	605a      	str	r2, [r3, #4]
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	609a      	str	r2, [r3, #8]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <LL_TIM_ConfigETR>:
  *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ConfigETR(TIM_TypeDef *TIMx, uint32_t ETRPolarity, uint32_t ETRPrescaler,
                                      uint32_t ETRFilter)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b085      	sub	sp, #20
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	60f8      	str	r0, [r7, #12]
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	f423 423f 	bic.w	r2, r3, #48896	@ 0xbf00
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4319      	orrs	r1, r3
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	430b      	orrs	r3, r1
 8000bb2:	431a      	orrs	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	609a      	str	r2, [r3, #8]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd0:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <LL_TIM_SetOCRefClearInputSource>:
  *         @arg @ref LL_TIM_OCREF_CLR_INT_NC
  *         @arg @ref LL_TIM_OCREF_CLR_INT_ETR
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOCRefClearInputSource(TIM_TypeDef *TIMx, uint32_t OCRefClearInputSource)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	f023 0208 	bic.w	r2, r3, #8
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b090      	sub	sp, #64	@ 0x40
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  uint16_t adcValCh1 = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint32_t realValue = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	63bb      	str	r3, [r7, #56]	@ 0x38

  PIDController pid = {PID_KP,          PID_KI,          PID_KD,
 8000c36:	463b      	mov	r3, r7
 8000c38:	2238      	movs	r2, #56	@ 0x38
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f001 faa9 	bl	8002194 <memset>
 8000c42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	4b33      	ldr	r3, [pc, #204]	@ (8000d1c <main+0xf4>)
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b33      	ldr	r3, [pc, #204]	@ (8000d20 <main+0xf8>)
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	4b33      	ldr	r3, [pc, #204]	@ (8000d24 <main+0xfc>)
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	4b33      	ldr	r3, [pc, #204]	@ (8000d28 <main+0x100>)
 8000c5c:	61fb      	str	r3, [r7, #28]
 8000c5e:	4b33      	ldr	r3, [pc, #204]	@ (8000d2c <main+0x104>)
 8000c60:	623b      	str	r3, [r7, #32]
                       PID_TAU,         PID_LIM_MIN,     PID_LIM_MAX,
                       PID_LIM_MIN_INT, PID_LIM_MAX_INT, SAMPLE_TIME_S};

  PIDController_Init(&pid);
 8000c62:	463b      	mov	r3, r7
 8000c64:	4618      	mov	r0, r3
 8000c66:	f001 fa77 	bl	8002158 <PIDController_Init>
  /* MCU
   * Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the
   * Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f7ff fdc0 	bl	80007f0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000c70:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000c74:	f7ff fda4 	bl	80007c0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f7ff facd 	bl	8000218 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn,
 8000c7e:	f7ff faef 	bl	8000260 <__NVIC_GetPriorityGrouping>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2200      	movs	r2, #0
 8000c86:	210f      	movs	r1, #15
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fb21 	bl	80002d0 <NVIC_EncodePriority>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4619      	mov	r1, r3
 8000c92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c96:	f7ff faf1 	bl	800027c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9a:	f000 f84f 	bl	8000d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9e:	f000 f8f9 	bl	8000e94 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000ca2:	f000 f89d 	bl	8000de0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000ca6:	f000 f91d 	bl	8000ee4 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000caa:	f000 f9cb 	bl	8001044 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_EnableCounter(TIM1);
 8000cae:	4820      	ldr	r0, [pc, #128]	@ (8000d30 <main+0x108>)
 8000cb0:	f7ff fe33 	bl	800091a <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1N);
 8000cb4:	2104      	movs	r1, #4
 8000cb6:	481e      	ldr	r0, [pc, #120]	@ (8000d30 <main+0x108>)
 8000cb8:	f7ff fe4f 	bl	800095a <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	481c      	ldr	r0, [pc, #112]	@ (8000d30 <main+0x108>)
 8000cc0:	f7ff fe4b 	bl	800095a <LL_TIM_CC_EnableChannel>
  LL_TIM_OC_SetCompareCH1(TIM1, 50);
 8000cc4:	2132      	movs	r1, #50	@ 0x32
 8000cc6:	481a      	ldr	r0, [pc, #104]	@ (8000d30 <main+0x108>)
 8000cc8:	f7ff fefa 	bl	8000ac0 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_EnableAllOutputs(TIM1);
 8000ccc:	4818      	ldr	r0, [pc, #96]	@ (8000d30 <main+0x108>)
 8000cce:	f7ff ff79 	bl	8000bc4 <LL_TIM_EnableAllOutputs>

  LL_ADC_Enable(ADC1);
 8000cd2:	4818      	ldr	r0, [pc, #96]	@ (8000d34 <main+0x10c>)
 8000cd4:	f7ff fbf9 	bl	80004ca <LL_ADC_Enable>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    // start conversion
    LL_ADC_REG_StartConversion(ADC1);
 8000cd8:	4816      	ldr	r0, [pc, #88]	@ (8000d34 <main+0x10c>)
 8000cda:	f7ff fc0a 	bl	80004f2 <LL_ADC_REG_StartConversion>

    // wait end of conversion flag
    while (!LL_ADC_IsActiveFlag_EOC(ADC1))
 8000cde:	bf00      	nop
 8000ce0:	4814      	ldr	r0, [pc, #80]	@ (8000d34 <main+0x10c>)
 8000ce2:	f7ff fc27 	bl	8000534 <LL_ADC_IsActiveFlag_EOC>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0f9      	beq.n	8000ce0 <main+0xb8>
      ;

    // clear flag
    LL_ADC_ClearFlag_EOC(ADC1);
 8000cec:	4811      	ldr	r0, [pc, #68]	@ (8000d34 <main+0x10c>)
 8000cee:	f7ff fc34 	bl	800055a <LL_ADC_ClearFlag_EOC>

    // read channel1 data
    adcValCh1 = LL_ADC_REG_ReadConversionData12(ADC1);
 8000cf2:	4810      	ldr	r0, [pc, #64]	@ (8000d34 <main+0x10c>)
 8000cf4:	f7ff fc11 	bl	800051a <LL_ADC_REG_ReadConversionData12>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    realValue =
        __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, adcValCh1, LL_ADC_RESOLUTION_12B);
 8000cfc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000cfe:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000d02:	fb02 f303 	mul.w	r3, r2, r3
 8000d06:	461a      	mov	r2, r3
    realValue =
 8000d08:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <main+0x110>)
 8000d0a:	fba3 1302 	umull	r1, r3, r3, r2
 8000d0e:	1ad2      	subs	r2, r2, r3
 8000d10:	0852      	lsrs	r2, r2, #1
 8000d12:	4413      	add	r3, r2
 8000d14:	0adb      	lsrs	r3, r3, #11
 8000d16:	63bb      	str	r3, [r7, #56]	@ 0x38
    LL_ADC_REG_StartConversion(ADC1);
 8000d18:	e7de      	b.n	8000cd8 <main+0xb0>
 8000d1a:	bf00      	nop
 8000d1c:	3ca3d70a 	.word	0x3ca3d70a
 8000d20:	42b40000 	.word	0x42b40000
 8000d24:	c2c80000 	.word	0xc2c80000
 8000d28:	42c80000 	.word	0x42c80000
 8000d2c:	3c23d70a 	.word	0x3c23d70a
 8000d30:	40012c00 	.word	0x40012c00
 8000d34:	50040000 	.word	0x50040000
 8000d38:	00100101 	.word	0x00100101

08000d3c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000d40:	2001      	movs	r0, #1
 8000d42:	f7ff fd6d 	bl	8000820 <LL_FLASH_SetLatency>
  while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1) {
 8000d46:	bf00      	nop
 8000d48:	f7ff fd7e 	bl	8000848 <LL_FLASH_GetLatency>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d1fa      	bne.n	8000d48 <SystemClock_Config+0xc>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000d52:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d56:	f7ff fd85 	bl	8000864 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0) {
 8000d5a:	bf00      	nop
 8000d5c:	f7ff fd96 	bl	800088c <LL_PWR_IsActiveFlag_VOS>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1fa      	bne.n	8000d5c <SystemClock_Config+0x20>
  }
  LL_RCC_MSI_Enable();
 8000d66:	f7ff fc05 	bl	8000574 <LL_RCC_MSI_Enable>

  /* Wait till MSI is ready */
  while (LL_RCC_MSI_IsReady() != 1) {
 8000d6a:	bf00      	nop
 8000d6c:	f7ff fc12 	bl	8000594 <LL_RCC_MSI_IsReady>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d1fa      	bne.n	8000d6c <SystemClock_Config+0x30>
  }
  LL_RCC_MSI_EnableRangeSelection();
 8000d76:	f7ff fc1f 	bl	80005b8 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8000d7a:	2060      	movs	r0, #96	@ 0x60
 8000d7c:	f7ff fc2c 	bl	80005d8 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff fc3d 	bl	8000600 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 20,
 8000d86:	2300      	movs	r3, #0
 8000d88:	2214      	movs	r2, #20
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f7ff fccf 	bl	8000730 <LL_RCC_PLL_ConfigDomain_SYS>
                              LL_RCC_PLLR_DIV_2);
  LL_RCC_PLL_EnableDomain_SYS();
 8000d92:	f7ff fced 	bl	8000770 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8000d96:	f7ff fca7 	bl	80006e8 <LL_RCC_PLL_Enable>

  /* Wait till PLL is ready */
  while (LL_RCC_PLL_IsReady() != 1) {
 8000d9a:	bf00      	nop
 8000d9c:	f7ff fcb4 	bl	8000708 <LL_RCC_PLL_IsReady>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d1fa      	bne.n	8000d9c <SystemClock_Config+0x60>
  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000da6:	2003      	movs	r0, #3
 8000da8:	f7ff fc40 	bl	800062c <LL_RCC_SetSysClkSource>

  /* Wait till System clock is ready */
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8000dac:	bf00      	nop
 8000dae:	f7ff fc51 	bl	8000654 <LL_RCC_GetSysClkSource>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b0c      	cmp	r3, #12
 8000db6:	d1fa      	bne.n	8000dae <SystemClock_Config+0x72>
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8000db8:	2080      	movs	r0, #128	@ 0x80
 8000dba:	f7ff fc59 	bl	8000670 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff fc6a 	bl	8000698 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f7ff fc7b 	bl	80006c0 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(20000000);
 8000dca:	4804      	ldr	r0, [pc, #16]	@ (8000ddc <SystemClock_Config+0xa0>)
 8000dcc:	f000 fd80 	bl	80018d0 <LL_Init1msTick>

  LL_SetSystemCoreClock(20000000);
 8000dd0:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <SystemClock_Config+0xa0>)
 8000dd2:	f000 fd8b 	bl	80018ec <LL_SetSystemCoreClock>
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	01312d00 	.word	0x01312d00

08000de0 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b090      	sub	sp, #64	@ 0x40
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000de6:	f107 0318 	add.w	r3, r7, #24
 8000dea:	2228      	movs	r2, #40	@ 0x28
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 f9d0 	bl	8002194 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	463b      	mov	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]
 8000e02:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8000e04:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e08:	f7ff fcda 	bl	80007c0 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f7ff fcbf 	bl	8000790 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13 | LL_GPIO_PIN_14 | LL_GPIO_PIN_15;
 8000e12:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000e16:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000e28:	2305      	movs	r3, #5
 8000e2a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4816      	ldr	r0, [pc, #88]	@ (8000e8c <MX_SPI2_Init+0xac>)
 8000e32:	f000 fc36 	bl	80016a2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000e3a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000e3e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000e40:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000e44:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000e4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8000e54:	2308      	movs	r3, #8
 8000e56:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 8000e60:	2307      	movs	r3, #7
 8000e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8000e64:	f107 0318 	add.w	r3, r7, #24
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4809      	ldr	r0, [pc, #36]	@ (8000e90 <MX_SPI2_Init+0xb0>)
 8000e6c:	f000 fcbd 	bl	80017ea <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8000e70:	2100      	movs	r1, #0
 8000e72:	4807      	ldr	r0, [pc, #28]	@ (8000e90 <MX_SPI2_Init+0xb0>)
 8000e74:	f7ff fd2e 	bl	80008d4 <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI2);
 8000e78:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <MX_SPI2_Init+0xb0>)
 8000e7a:	f7ff fd3e 	bl	80008fa <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  LL_SPI_Enable(SPI2);
 8000e7e:	4804      	ldr	r0, [pc, #16]	@ (8000e90 <MX_SPI2_Init+0xb0>)
 8000e80:	f7ff fd18 	bl	80008b4 <LL_SPI_Enable>

  /* USER CODE END SPI2_Init 2 */
}
 8000e84:	bf00      	nop
 8000e86:	3740      	adds	r7, #64	@ 0x40
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	48000400 	.word	0x48000400
 8000e90:	40003800 	.word	0x40003800

08000e94 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
 8000ea8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f7ff fc70 	bl	8000790 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8000eb0:	2140      	movs	r1, #64	@ 0x40
 8000eb2:	480b      	ldr	r0, [pc, #44]	@ (8000ee0 <MX_GPIO_Init+0x4c>)
 8000eb4:	f7ff fea9 	bl	8000c0a <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000eb8:	2340      	movs	r3, #64	@ 0x40
 8000eba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ecc:	463b      	mov	r3, r7
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4803      	ldr	r0, [pc, #12]	@ (8000ee0 <MX_GPIO_Init+0x4c>)
 8000ed2:	f000 fbe6 	bl	80016a2 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	48000400 	.word	0x48000400

08000ee4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b09e      	sub	sp, #120	@ 0x78
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000eea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000efa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000efe:	2220      	movs	r2, #32
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 f946 	bl	8002194 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	2228      	movs	r2, #40	@ 0x28
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f001 f93f 	bl	8002194 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
 8000f24:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000f26:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000f2a:	f7ff fc61 	bl	80007f0 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000f34:	2300      	movs	r3, #0
 8000f36:	66bb      	str	r3, [r7, #104]	@ 0x68
  TIM_InitStruct.Autoreload = 99;
 8000f38:	2363      	movs	r3, #99	@ 0x63
 8000f3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	673b      	str	r3, [r7, #112]	@ 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	677b      	str	r3, [r7, #116]	@ 0x74
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000f44:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f48:	4619      	mov	r1, r3
 8000f4a:	483d      	ldr	r0, [pc, #244]	@ (8001040 <MX_TIM1_Init+0x15c>)
 8000f4c:	f000 fd6e 	bl	8001a2c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000f50:	483b      	ldr	r0, [pc, #236]	@ (8001040 <MX_TIM1_Init+0x15c>)
 8000f52:	f7ff fcf2 	bl	800093a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000f56:	2100      	movs	r1, #0
 8000f58:	4839      	ldr	r0, [pc, #228]	@ (8001040 <MX_TIM1_Init+0x15c>)
 8000f5a:	f7ff fdcf 	bl	8000afc <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8000f5e:	2101      	movs	r1, #1
 8000f60:	4837      	ldr	r0, [pc, #220]	@ (8001040 <MX_TIM1_Init+0x15c>)
 8000f62:	f7ff fd5d 	bl	8000a20 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000f66:	2360      	movs	r3, #96	@ 0x60
 8000f68:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.CompareValue = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	653b      	str	r3, [r7, #80]	@ 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000f76:	2300      	movs	r3, #0
 8000f78:	657b      	str	r3, [r7, #84]	@ 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	663b      	str	r3, [r7, #96]	@ 0x60
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000f86:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	482c      	ldr	r0, [pc, #176]	@ (8001040 <MX_TIM1_Init+0x15c>)
 8000f90:	f000 fdaa 	bl	8001ae8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8000f94:	2101      	movs	r1, #1
 8000f96:	482a      	ldr	r0, [pc, #168]	@ (8001040 <MX_TIM1_Init+0x15c>)
 8000f98:	f7ff fcf0 	bl	800097c <LL_TIM_OC_DisableFast>
  LL_TIM_SetOCRefClearInputSource(TIM1, LL_TIM_OCREF_CLR_INT_NC);
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4828      	ldr	r0, [pc, #160]	@ (8001040 <MX_TIM1_Init+0x15c>)
 8000fa0:	f7ff fe20 	bl	8000be4 <LL_TIM_SetOCRefClearInputSource>
  LL_TIM_DisableExternalClock(TIM1);
 8000fa4:	4826      	ldr	r0, [pc, #152]	@ (8001040 <MX_TIM1_Init+0x15c>)
 8000fa6:	f7ff fd99 	bl	8000adc <LL_TIM_DisableExternalClock>
  LL_TIM_ConfigETR(TIM1, LL_TIM_ETR_POLARITY_NONINVERTED,
 8000faa:	2300      	movs	r3, #0
 8000fac:	2200      	movs	r2, #0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4823      	ldr	r0, [pc, #140]	@ (8001040 <MX_TIM1_Init+0x15c>)
 8000fb2:	f7ff fdee 	bl	8000b92 <LL_TIM_ConfigETR>
                   LL_TIM_ETR_PRESCALER_DIV1, LL_TIM_ETR_FILTER_FDIV1);
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4821      	ldr	r0, [pc, #132]	@ (8001040 <MX_TIM1_Init+0x15c>)
 8000fba:	f7ff fdb4 	bl	8000b26 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	481f      	ldr	r0, [pc, #124]	@ (8001040 <MX_TIM1_Init+0x15c>)
 8000fc2:	f7ff fdc3 	bl	8000b4c <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000fc6:	481e      	ldr	r0, [pc, #120]	@ (8001040 <MX_TIM1_Init+0x15c>)
 8000fc8:	f7ff fdd3 	bl	8000b72 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000fe2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	633b      	str	r3, [r7, #48]	@ 0x30
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8000ff0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	643b      	str	r3, [r7, #64]	@ 0x40
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	480e      	ldr	r0, [pc, #56]	@ (8001040 <MX_TIM1_Init+0x15c>)
 8001006:	f000 fdcf 	bl	8001ba8 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff fbc0 	bl	8000790 <LL_AHB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA7   ------> TIM1_CH1N
  PA8   ------> TIM1_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7 | LL_GPIO_PIN_8;
 8001010:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001014:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001016:	2302      	movs	r3, #2
 8001018:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001026:	2301      	movs	r3, #1
 8001028:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4619      	mov	r1, r3
 800102e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001032:	f000 fb36 	bl	80016a2 <LL_GPIO_Init>
}
 8001036:	bf00      	nop
 8001038:	3778      	adds	r7, #120	@ 0x78
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40012c00 	.word	0x40012c00

08001044 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	@ 0x50
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800104a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001056:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
 8001066:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001068:	f107 0318 	add.w	r3, r7, #24
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	463b      	mov	r3, r7
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
 8001084:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8001086:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800108a:	f7ff fb81 	bl	8000790 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff fb7e 	bl	8000790 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN5
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001094:	2301      	movs	r3, #1
 8001096:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001098:	2303      	movs	r3, #3
 800109a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	463b      	mov	r3, r7
 80010a2:	4619      	mov	r1, r3
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a8:	f000 fafb 	bl	80016a2 <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80010ac:	2300      	movs	r3, #0
 80010ae:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80010b0:	2300      	movs	r3, #0
 80010b2:	647b      	str	r3, [r7, #68]	@ 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80010b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010bc:	4619      	mov	r1, r3
 80010be:	482c      	ldr	r0, [pc, #176]	@ (8001170 <MX_ADC1_Init+0x12c>)
 80010c0:	f000 f934 	bl	800132c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80010d8:	2300      	movs	r3, #0
 80010da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80010dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010e0:	4619      	mov	r1, r3
 80010e2:	4823      	ldr	r0, [pc, #140]	@ (8001170 <MX_ADC1_Init+0x12c>)
 80010e4:	f000 f948 	bl	8001378 <LL_ADC_REG_Init>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 80010e8:	2100      	movs	r1, #0
 80010ea:	4821      	ldr	r0, [pc, #132]	@ (8001170 <MX_ADC1_Init+0x12c>)
 80010ec:	f7ff f9b2 	bl	8000454 <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80010f8:	f107 0318 	add.w	r3, r7, #24
 80010fc:	4619      	mov	r1, r3
 80010fe:	481d      	ldr	r0, [pc, #116]	@ (8001174 <MX_ADC1_Init+0x130>)
 8001100:	f000 f8d4 	bl	80012ac <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1),
 8001104:	2100      	movs	r1, #0
 8001106:	481b      	ldr	r0, [pc, #108]	@ (8001174 <MX_ADC1_Init+0x130>)
 8001108:	f7ff f915 	bl	8000336 <LL_ADC_SetCommonPathInternalCh>
                                 LL_ADC_PATH_INTERNAL_NONE);

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 800110c:	4818      	ldr	r0, [pc, #96]	@ (8001170 <MX_ADC1_Init+0x12c>)
 800110e:	f7ff f9b6 	bl	800047e <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8001112:	4817      	ldr	r0, [pc, #92]	@ (8001170 <MX_ADC1_Init+0x12c>)
 8001114:	f7ff f9c5 	bl	80004a2 <LL_ADC_EnableInternalRegulator>
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US *
                      (SystemCoreClock / (100000 * 2))) /
 8001118:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <MX_ADC1_Init+0x134>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	099b      	lsrs	r3, r3, #6
 800111e:	4a17      	ldr	r2, [pc, #92]	@ (800117c <MX_ADC1_Init+0x138>)
 8001120:	fba2 2303 	umull	r2, r3, r2, r3
 8001124:	099a      	lsrs	r2, r3, #6
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US *
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	461a      	mov	r2, r3
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <MX_ADC1_Init+0x13c>)
 8001132:	fba3 2302 	umull	r2, r3, r3, r2
 8001136:	08db      	lsrs	r3, r3, #3
 8001138:	64fb      	str	r3, [r7, #76]	@ 0x4c
                     10);
  while (wait_loop_index != 0) {
 800113a:	e002      	b.n	8001142 <MX_ADC1_Init+0xfe>
    wait_loop_index--;
 800113c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800113e:	3b01      	subs	r3, #1
 8001140:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (wait_loop_index != 0) {
 8001142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1f9      	bne.n	800113c <MX_ADC1_Init+0xf8>
  }

  /** Configure Regular Channel
   */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_5);
 8001148:	4a0e      	ldr	r2, [pc, #56]	@ (8001184 <MX_ADC1_Init+0x140>)
 800114a:	2106      	movs	r1, #6
 800114c:	4808      	ldr	r0, [pc, #32]	@ (8001170 <MX_ADC1_Init+0x12c>)
 800114e:	f7ff f905 	bl	800035c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5,
 8001152:	2200      	movs	r2, #0
 8001154:	490b      	ldr	r1, [pc, #44]	@ (8001184 <MX_ADC1_Init+0x140>)
 8001156:	4806      	ldr	r0, [pc, #24]	@ (8001170 <MX_ADC1_Init+0x12c>)
 8001158:	f7ff f92c 	bl	80003b4 <LL_ADC_SetChannelSamplingTime>
                                LL_ADC_SAMPLINGTIME_2CYCLES_5);
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SINGLE_ENDED);
 800115c:	227f      	movs	r2, #127	@ 0x7f
 800115e:	4909      	ldr	r1, [pc, #36]	@ (8001184 <MX_ADC1_Init+0x140>)
 8001160:	4803      	ldr	r0, [pc, #12]	@ (8001170 <MX_ADC1_Init+0x12c>)
 8001162:	f7ff f953 	bl	800040c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8001166:	bf00      	nop
 8001168:	3750      	adds	r7, #80	@ 0x50
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	50040000 	.word	0x50040000
 8001174:	50040300 	.word	0x50040300
 8001178:	20000000 	.word	0x20000000
 800117c:	053e2d63 	.word	0x053e2d63
 8001180:	cccccccd 	.word	0xcccccccd
 8001184:	14f00020 	.word	0x14f00020

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <NMI_Handler+0x4>

08001190 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <MemManage_Handler+0x4>

080011a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <BusFault_Handler+0x4>

080011a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <UsageFault_Handler+0x4>

080011b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <SystemInit+0x20>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011f2:	4a05      	ldr	r2, [pc, #20]	@ (8001208 <SystemInit+0x20>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001244 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001210:	f7ff ffea 	bl	80011e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001214:	480c      	ldr	r0, [pc, #48]	@ (8001248 <LoopForever+0x6>)
  ldr r1, =_edata
 8001216:	490d      	ldr	r1, [pc, #52]	@ (800124c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001218:	4a0d      	ldr	r2, [pc, #52]	@ (8001250 <LoopForever+0xe>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122a:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <LoopForever+0x12>)
  ldr r4, =_ebss
 800122c:	4c0a      	ldr	r4, [pc, #40]	@ (8001258 <LoopForever+0x16>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800123a:	f000 ffb3 	bl	80021a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800123e:	f7ff fcf3 	bl	8000c28 <main>

08001242 <LoopForever>:

LoopForever:
    b LoopForever
 8001242:	e7fe      	b.n	8001242 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001244:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001250:	08002224 	.word	0x08002224
  ldr r2, =_sbss
 8001254:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001258:	20000020 	.word	0x20000020

0800125c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC1_2_IRQHandler>

0800125e <LL_ADC_REG_SetSequencerLength>:
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126c:	f023 020f 	bic.w	r2, r3, #15
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	431a      	orrs	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_ADC_IsEnabled>:
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b01      	cmp	r3, #1
 8001296:	d101      	bne.n	800129c <LL_ADC_IsEnabled+0x18>
 8001298:	2301      	movs	r3, #1
 800129a:	e000      	b.n	800129e <LL_ADC_IsEnabled+0x1a>
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, const LL_ADC_CommonInitTypeDef *pADC_CommonInitStruct)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80012b6:	2300      	movs	r3, #0
 80012b8:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 80012ba:	4819      	ldr	r0, [pc, #100]	@ (8001320 <LL_ADC_CommonInit+0x74>)
 80012bc:	f7ff ffe2 	bl	8001284 <LL_ADC_IsEnabled>
 80012c0:	4604      	mov	r4, r0
 80012c2:	4818      	ldr	r0, [pc, #96]	@ (8001324 <LL_ADC_CommonInit+0x78>)
 80012c4:	f7ff ffde 	bl	8001284 <LL_ADC_IsEnabled>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4323      	orrs	r3, r4
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d120      	bne.n	8001312 <LL_ADC_CommonInit+0x66>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (pADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d012      	beq.n	80012fe <LL_ADC_CommonInit+0x52>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <LL_ADC_CommonInit+0x7c>)
 80012de:	4013      	ands	r3, r2
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	6811      	ldr	r1, [r2, #0]
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	6852      	ldr	r2, [r2, #4]
 80012e8:	4311      	orrs	r1, r2
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	6892      	ldr	r2, [r2, #8]
 80012ee:	4311      	orrs	r1, r2
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	68d2      	ldr	r2, [r2, #12]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	e00b      	b.n	8001316 <LL_ADC_CommonInit+0x6a>
                 | pADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <LL_ADC_CommonInit+0x7c>)
 8001304:	4013      	ands	r3, r2
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	6812      	ldr	r2, [r2, #0]
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	e001      	b.n	8001316 <LL_ADC_CommonInit+0x6a>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001316:	7bfb      	ldrb	r3, [r7, #15]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bd90      	pop	{r4, r7, pc}
 8001320:	50040000 	.word	0x50040000
 8001324:	50040100 	.word	0x50040100
 8001328:	ffc030e0 	.word	0xffc030e0

0800132c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, const LL_ADC_InitTypeDef *pADC_InitStruct)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001336:	2300      	movs	r3, #0
 8001338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(pADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(pADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ffa2 	bl	8001284 <LL_ADC_IsEnabled>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d111      	bne.n	800136a <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800134e:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	6811      	ldr	r1, [r2, #0]
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	6852      	ldr	r2, [r2, #4]
 800135a:	4311      	orrs	r1, r2
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	6892      	ldr	r2, [r2, #8]
 8001360:	430a      	orrs	r2, r1
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	e001      	b.n	800136e <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, const LL_ADC_REG_InitTypeDef *pADC_RegInitStruct)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001382:	2300      	movs	r3, #0
 8001384:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(pADC_RegInitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(pADC_RegInitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff7c 	bl	8001284 <LL_ADC_IsEnabled>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d132      	bne.n	80013f8 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (pADC_RegInitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d015      	beq.n	80013c6 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <LL_ADC_REG_Init+0x90>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	6811      	ldr	r1, [r2, #0]
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	6892      	ldr	r2, [r2, #8]
 80013aa:	4311      	orrs	r1, r2
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	68d2      	ldr	r2, [r2, #12]
 80013b0:	4311      	orrs	r1, r2
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	6912      	ldr	r2, [r2, #16]
 80013b6:	4311      	orrs	r1, r2
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	6952      	ldr	r2, [r2, #20]
 80013bc:	430a      	orrs	r2, r1
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	e011      	b.n	80013ea <LL_ADC_REG_Init+0x72>
                 | pADC_RegInitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <LL_ADC_REG_Init+0x90>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	6811      	ldr	r1, [r2, #0]
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	68d2      	ldr	r2, [r2, #12]
 80013d6:	4311      	orrs	r1, r2
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	6912      	ldr	r2, [r2, #16]
 80013dc:	4311      	orrs	r1, r2
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	6952      	ldr	r2, [r2, #20]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	431a      	orrs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	60da      	str	r2, [r3, #12]
                 | pADC_RegInitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, pADC_RegInitStruct->SequencerLength);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	4619      	mov	r1, r3
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff34 	bl	800125e <LL_ADC_REG_SetSequencerLength>
 80013f6:	e001      	b.n	80013fc <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	fff0c03c 	.word	0xfff0c03c

0800140c <LL_GPIO_SetPinMode>:
{
 800140c:	b480      	push	{r7}
 800140e:	b08b      	sub	sp, #44	@ 0x2c
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa93 f3a3 	rbit	r3, r3
 8001426:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8001432:	2320      	movs	r3, #32
 8001434:	e003      	b.n	800143e <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	fab3 f383 	clz	r3, r3
 800143c:	b2db      	uxtb	r3, r3
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	2103      	movs	r1, #3
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	401a      	ands	r2, r3
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	6a3b      	ldr	r3, [r7, #32]
 8001450:	fa93 f3a3 	rbit	r3, r3
 8001454:	61fb      	str	r3, [r7, #28]
  return result;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800145a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001460:	2320      	movs	r3, #32
 8001462:	e003      	b.n	800146c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001466:	fab3 f383 	clz	r3, r3
 800146a:	b2db      	uxtb	r3, r3
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	fa01 f303 	lsl.w	r3, r1, r3
 8001474:	431a      	orrs	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	601a      	str	r2, [r3, #0]
}
 800147a:	bf00      	nop
 800147c:	372c      	adds	r7, #44	@ 0x2c
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <LL_GPIO_SetPinOutputType>:
{
 8001486:	b480      	push	{r7}
 8001488:	b085      	sub	sp, #20
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	43db      	mvns	r3, r3
 800149a:	401a      	ands	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	fb01 f303 	mul.w	r3, r1, r3
 80014a4:	431a      	orrs	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	605a      	str	r2, [r3, #4]
}
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <LL_GPIO_SetPinSpeed>:
{
 80014b6:	b480      	push	{r7}
 80014b8:	b08b      	sub	sp, #44	@ 0x2c
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	fa93 f3a3 	rbit	r3, r3
 80014d0:	613b      	str	r3, [r7, #16]
  return result;
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80014dc:	2320      	movs	r3, #32
 80014de:	e003      	b.n	80014e8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	fab3 f383 	clz	r3, r3
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	2103      	movs	r1, #3
 80014ec:	fa01 f303 	lsl.w	r3, r1, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	401a      	ands	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	fa93 f3a3 	rbit	r3, r3
 80014fe:	61fb      	str	r3, [r7, #28]
  return result;
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800150a:	2320      	movs	r3, #32
 800150c:	e003      	b.n	8001516 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800150e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001510:	fab3 f383 	clz	r3, r3
 8001514:	b2db      	uxtb	r3, r3
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	431a      	orrs	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	609a      	str	r2, [r3, #8]
}
 8001524:	bf00      	nop
 8001526:	372c      	adds	r7, #44	@ 0x2c
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_GPIO_SetPinPull>:
{
 8001530:	b480      	push	{r7}
 8001532:	b08b      	sub	sp, #44	@ 0x2c
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa93 f3a3 	rbit	r3, r3
 800154a:	613b      	str	r3, [r7, #16]
  return result;
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001556:	2320      	movs	r3, #32
 8001558:	e003      	b.n	8001562 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	fab3 f383 	clz	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	2103      	movs	r1, #3
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	401a      	ands	r2, r3
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	fa93 f3a3 	rbit	r3, r3
 8001578:	61fb      	str	r3, [r7, #28]
  return result;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001584:	2320      	movs	r3, #32
 8001586:	e003      	b.n	8001590 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158a:	fab3 f383 	clz	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
 8001598:	431a      	orrs	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	60da      	str	r2, [r3, #12]
}
 800159e:	bf00      	nop
 80015a0:	372c      	adds	r7, #44	@ 0x2c
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <LL_GPIO_SetAFPin_0_7>:
{
 80015aa:	b480      	push	{r7}
 80015ac:	b08b      	sub	sp, #44	@ 0x2c
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a1a      	ldr	r2, [r3, #32]
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	fa93 f3a3 	rbit	r3, r3
 80015c4:	613b      	str	r3, [r7, #16]
  return result;
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80015d0:	2320      	movs	r3, #32
 80015d2:	e003      	b.n	80015dc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fab3 f383 	clz	r3, r3
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	210f      	movs	r1, #15
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	401a      	ands	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	fa93 f3a3 	rbit	r3, r3
 80015f2:	61fb      	str	r3, [r7, #28]
  return result;
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80015f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80015fe:	2320      	movs	r3, #32
 8001600:	e003      	b.n	800160a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001604:	fab3 f383 	clz	r3, r3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	431a      	orrs	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	621a      	str	r2, [r3, #32]
}
 8001618:	bf00      	nop
 800161a:	372c      	adds	r7, #44	@ 0x2c
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_GPIO_SetAFPin_8_15>:
{
 8001624:	b480      	push	{r7}
 8001626:	b08b      	sub	sp, #44	@ 0x2c
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	0a1b      	lsrs	r3, r3, #8
 8001638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	fa93 f3a3 	rbit	r3, r3
 8001640:	613b      	str	r3, [r7, #16]
  return result;
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800164c:	2320      	movs	r3, #32
 800164e:	e003      	b.n	8001658 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	fab3 f383 	clz	r3, r3
 8001656:	b2db      	uxtb	r3, r3
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	210f      	movs	r1, #15
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	401a      	ands	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	0a1b      	lsrs	r3, r3, #8
 8001668:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	fa93 f3a3 	rbit	r3, r3
 8001670:	61fb      	str	r3, [r7, #28]
  return result;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800167c:	2320      	movs	r3, #32
 800167e:	e003      	b.n	8001688 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001682:	fab3 f383 	clz	r3, r3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	431a      	orrs	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001696:	bf00      	nop
 8001698:	372c      	adds	r7, #44	@ 0x2c
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b088      	sub	sp, #32
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	fa93 f3a3 	rbit	r3, r3
 80016b8:	60fb      	str	r3, [r7, #12]
  return result;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <LL_GPIO_Init+0x26>
    return 32U;
 80016c4:	2320      	movs	r3, #32
 80016c6:	e003      	b.n	80016d0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fab3 f383 	clz	r3, r3
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80016d2:	e048      	b.n	8001766 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2101      	movs	r1, #1
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d03a      	beq.n	8001760 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d003      	beq.n	80016fa <LL_GPIO_Init+0x58>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d10e      	bne.n	8001718 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	461a      	mov	r2, r3
 8001700:	69b9      	ldr	r1, [r7, #24]
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fed7 	bl	80014b6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	6819      	ldr	r1, [r3, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	461a      	mov	r2, r3
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff feb7 	bl	8001486 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	461a      	mov	r2, r3
 800171e:	69b9      	ldr	r1, [r7, #24]
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ff05 	bl	8001530 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d111      	bne.n	8001752 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	2bff      	cmp	r3, #255	@ 0xff
 8001732:	d807      	bhi.n	8001744 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	461a      	mov	r2, r3
 800173a:	69b9      	ldr	r1, [r7, #24]
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff34 	bl	80015aa <LL_GPIO_SetAFPin_0_7>
 8001742:	e006      	b.n	8001752 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	461a      	mov	r2, r3
 800174a:	69b9      	ldr	r1, [r7, #24]
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ff69 	bl	8001624 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	461a      	mov	r2, r3
 8001758:	69b9      	ldr	r1, [r7, #24]
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff fe56 	bl	800140c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	3301      	adds	r3, #1
 8001764:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	fa22 f303 	lsr.w	r3, r2, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1af      	bne.n	80016d4 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3720      	adds	r7, #32
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <LL_SPI_IsEnabled>:
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800178e:	2b40      	cmp	r3, #64	@ 0x40
 8001790:	d101      	bne.n	8001796 <LL_SPI_IsEnabled+0x18>
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <LL_SPI_IsEnabled+0x1a>
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_SPI_SetRxFIFOThreshold>:
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	605a      	str	r2, [r3, #4]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <LL_SPI_SetCRCPolynomial>:
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	461a      	mov	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	611a      	str	r2, [r3, #16]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ffc0 	bl	800177e <LL_SPI_IsEnabled>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d145      	bne.n	8001890 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800180c:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	6811      	ldr	r1, [r2, #0]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	6852      	ldr	r2, [r2, #4]
 8001818:	4311      	orrs	r1, r2
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	68d2      	ldr	r2, [r2, #12]
 800181e:	4311      	orrs	r1, r2
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	6912      	ldr	r2, [r2, #16]
 8001824:	4311      	orrs	r1, r2
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	6952      	ldr	r2, [r2, #20]
 800182a:	4311      	orrs	r1, r2
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	6992      	ldr	r2, [r2, #24]
 8001830:	4311      	orrs	r1, r2
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	69d2      	ldr	r2, [r2, #28]
 8001836:	4311      	orrs	r1, r2
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	6a12      	ldr	r2, [r2, #32]
 800183c:	430a      	orrs	r2, r1
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800184c:	f023 0304 	bic.w	r3, r3, #4
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	6891      	ldr	r1, [r2, #8]
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	6952      	ldr	r2, [r2, #20]
 8001858:	0c12      	lsrs	r2, r2, #16
 800185a:	430a      	orrs	r2, r1
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800186a:	d204      	bcs.n	8001876 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 800186c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ff97 	bl	80017a4 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800187e:	d105      	bne.n	800188c <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001884:	4619      	mov	r1, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ff9f 	bl	80017ca <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800188c:	2300      	movs	r3, #0
 800188e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	4a07      	ldr	r2, [pc, #28]	@ (80018cc <LL_InitTick+0x30>)
 80018b0:	3b01      	subs	r3, #1
 80018b2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80018b4:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <LL_InitTick+0x30>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ba:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <LL_InitTick+0x30>)
 80018bc:	2205      	movs	r2, #5
 80018be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000e010 	.word	0xe000e010

080018d0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80018d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ffdd 	bl	800189c <LL_InitTick>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80018f4:	4a04      	ldr	r2, [pc, #16]	@ (8001908 <LL_SetSystemCoreClock+0x1c>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6013      	str	r3, [r2, #0]
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000000 	.word	0x20000000

0800190c <LL_TIM_SetPrescaler>:
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <LL_TIM_SetAutoReload>:
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_TIM_SetRepetitionCounter>:
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_TIM_OC_SetCompareCH1>:
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_TIM_OC_SetCompareCH2>:
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_TIM_OC_SetCompareCH3>:
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_TIM_OC_SetCompareCH4>:
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_TIM_OC_SetCompareCH5>:
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_TIM_OC_SetCompareCH6>:
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	f043 0201 	orr.w	r2, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	615a      	str	r2, [r3, #20]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a27      	ldr	r2, [pc, #156]	@ (8001adc <LL_TIM_Init+0xb0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d003      	beq.n	8001a4c <LL_TIM_Init+0x20>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a4a:	d106      	bne.n	8001a5a <LL_TIM_Init+0x2e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8001adc <LL_TIM_Init+0xb0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d00b      	beq.n	8001a7a <LL_TIM_Init+0x4e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a68:	d007      	beq.n	8001a7a <LL_TIM_Init+0x4e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae0 <LL_TIM_Init+0xb4>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d003      	beq.n	8001a7a <LL_TIM_Init+0x4e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a1b      	ldr	r2, [pc, #108]	@ (8001ae4 <LL_TIM_Init+0xb8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d106      	bne.n	8001a88 <LL_TIM_Init+0x5c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	4619      	mov	r1, r3
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff47 	bl	8001928 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff33 	bl	800190c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a0c      	ldr	r2, [pc, #48]	@ (8001adc <LL_TIM_Init+0xb0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d007      	beq.n	8001abe <LL_TIM_Init+0x92>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae0 <LL_TIM_Init+0xb4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d003      	beq.n	8001abe <LL_TIM_Init+0x92>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <LL_TIM_Init+0xb8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d105      	bne.n	8001aca <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff3d 	bl	8001944 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ff9e 	bl	8001a0c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40012c00 	.word	0x40012c00
 8001ae0:	40014000 	.word	0x40014000
 8001ae4:	40014400 	.word	0x40014400

08001ae8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001afe:	d045      	beq.n	8001b8c <LL_TIM_OC_Init+0xa4>
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b06:	d848      	bhi.n	8001b9a <LL_TIM_OC_Init+0xb2>
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b0e:	d036      	beq.n	8001b7e <LL_TIM_OC_Init+0x96>
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b16:	d840      	bhi.n	8001b9a <LL_TIM_OC_Init+0xb2>
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b1e:	d027      	beq.n	8001b70 <LL_TIM_OC_Init+0x88>
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b26:	d838      	bhi.n	8001b9a <LL_TIM_OC_Init+0xb2>
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b2e:	d018      	beq.n	8001b62 <LL_TIM_OC_Init+0x7a>
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b36:	d830      	bhi.n	8001b9a <LL_TIM_OC_Init+0xb2>
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d003      	beq.n	8001b46 <LL_TIM_OC_Init+0x5e>
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b10      	cmp	r3, #16
 8001b42:	d007      	beq.n	8001b54 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001b44:	e029      	b.n	8001b9a <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 f891 	bl	8001c70 <OC1Config>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	75fb      	strb	r3, [r7, #23]
      break;
 8001b52:	e023      	b.n	8001b9c <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f8fe 	bl	8001d58 <OC2Config>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8001b60:	e01c      	b.n	8001b9c <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 f96f 	bl	8001e48 <OC3Config>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8001b6e:	e015      	b.n	8001b9c <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f9e0 	bl	8001f38 <OC4Config>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8001b7c:	e00e      	b.n	8001b9c <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 fa39 	bl	8001ff8 <OC5Config>
 8001b86:	4603      	mov	r3, r0
 8001b88:	75fb      	strb	r3, [r7, #23]
      break;
 8001b8a:	e007      	b.n	8001b9c <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 fa8a 	bl	80020a8 <OC6Config>
 8001b94:	4603      	mov	r3, r0
 8001b96:	75fb      	strb	r3, [r7, #23]
      break;
 8001b98:	e000      	b.n	8001b9c <LL_TIM_OC_Init+0xb4>
      break;
 8001b9a:	bf00      	nop
  }

  return result;
 8001b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	7b12      	ldrb	r2, [r2, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	89d2      	ldrh	r2, [r2, #14]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c14:	4313      	orrs	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a10      	ldr	r2, [pc, #64]	@ (8001c6c <LL_TIM_BDTR_Init+0xc4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d114      	bne.n	8001c58 <LL_TIM_BDTR_Init+0xb0>
    assert_param(IS_LL_TIM_BREAK2_STATE(TIM_BDTRInitStruct->Break2State));
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	40012c00 	.word	0x40012c00

08001c70 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	f023 0201 	bic.w	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f023 0303 	bic.w	r3, r3, #3
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f023 0202 	bic.w	r2, r3, #2
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f023 0201 	bic.w	r2, r3, #1
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a1e      	ldr	r2, [pc, #120]	@ (8001d4c <OC1Config+0xdc>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d007      	beq.n	8001ce6 <OC1Config+0x76>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d50 <OC1Config+0xe0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d003      	beq.n	8001ce6 <OC1Config+0x76>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8001d54 <OC1Config+0xe4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d11e      	bne.n	8001d24 <OC1Config+0xb4>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f023 0208 	bic.w	r2, r3, #8
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f023 0204 	bic.w	r2, r3, #4
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4313      	orrs	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4619      	mov	r1, r3
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff fe12 	bl	8001960 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40012c00 	.word	0x40012c00
 8001d50:	40014000 	.word	0x40014000
 8001d54:	40014400 	.word	0x40014400

08001d58 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	f023 0210 	bic.w	r2, r3, #16
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	0212      	lsls	r2, r2, #8
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f023 0220 	bic.w	r2, r3, #32
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	4313      	orrs	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f023 0210 	bic.w	r2, r3, #16
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	4313      	orrs	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a1f      	ldr	r2, [pc, #124]	@ (8001e3c <OC2Config+0xe4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d007      	beq.n	8001dd4 <OC2Config+0x7c>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e40 <OC2Config+0xe8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d003      	beq.n	8001dd4 <OC2Config+0x7c>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a1d      	ldr	r2, [pc, #116]	@ (8001e44 <OC2Config+0xec>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d11f      	bne.n	8001e14 <OC2Config+0xbc>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	019b      	lsls	r3, r3, #6
 8001de0:	4313      	orrs	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	019b      	lsls	r3, r3, #6
 8001df0:	4313      	orrs	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4619      	mov	r1, r3
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fda8 	bl	800197c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40012c00 	.word	0x40012c00
 8001e40:	40014000 	.word	0x40014000
 8001e44:	40014400 	.word	0x40014400

08001e48 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f023 0303 	bic.w	r3, r3, #3
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	4313      	orrs	r3, r2
 8001e98:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a1f      	ldr	r2, [pc, #124]	@ (8001f2c <OC3Config+0xe4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <OC3Config+0x7a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f30 <OC3Config+0xe8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d003      	beq.n	8001ec2 <OC3Config+0x7a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f34 <OC3Config+0xec>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d11f      	bne.n	8001f02 <OC3Config+0xba>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	029b      	lsls	r3, r3, #10
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	029b      	lsls	r3, r3, #10
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	015b      	lsls	r3, r3, #5
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	4619      	mov	r1, r3
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff fd3f 	bl	8001998 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40012c00 	.word	0x40012c00
 8001f30:	40014000 	.word	0x40014000
 8001f34:	40014400 	.word	0x40014400

08001f38 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	0212      	lsls	r2, r2, #8
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	031b      	lsls	r3, r3, #12
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	031b      	lsls	r3, r3, #12
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a13      	ldr	r2, [pc, #76]	@ (8001fec <OC4Config+0xb4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d007      	beq.n	8001fb4 <OC4Config+0x7c>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a12      	ldr	r2, [pc, #72]	@ (8001ff0 <OC4Config+0xb8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d003      	beq.n	8001fb4 <OC4Config+0x7c>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a11      	ldr	r2, [pc, #68]	@ (8001ff4 <OC4Config+0xbc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d107      	bne.n	8001fc4 <OC4Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	019b      	lsls	r3, r3, #6
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff fcec 	bl	80019b4 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40012c00 	.word	0x40012c00
 8001ff0:	40014000 	.word	0x40014000
 8001ff4:	40014400 	.word	0x40014400

08001ff8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002018:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	6812      	ldr	r2, [r2, #0]
 8002028:	4313      	orrs	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	041b      	lsls	r3, r3, #16
 8002038:	4313      	orrs	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	041b      	lsls	r3, r3, #16
 8002048:	4313      	orrs	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a13      	ldr	r2, [pc, #76]	@ (800209c <OC5Config+0xa4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d007      	beq.n	8002064 <OC5Config+0x6c>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a12      	ldr	r2, [pc, #72]	@ (80020a0 <OC5Config+0xa8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d003      	beq.n	8002064 <OC5Config+0x6c>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a11      	ldr	r2, [pc, #68]	@ (80020a4 <OC5Config+0xac>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d109      	bne.n	8002078 <OC5Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	021b      	lsls	r3, r3, #8
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	4619      	mov	r1, r3
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff fca3 	bl	80019d0 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40012c00 	.word	0x40012c00
 80020a0:	40014000 	.word	0x40014000
 80020a4:	40014400 	.word	0x40014400

080020a8 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	0212      	lsls	r2, r2, #8
 80020da:	4313      	orrs	r3, r2
 80020dc:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	051b      	lsls	r3, r3, #20
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	051b      	lsls	r3, r3, #20
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a12      	ldr	r2, [pc, #72]	@ (800214c <OC6Config+0xa4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d007      	beq.n	8002116 <OC6Config+0x6e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a11      	ldr	r2, [pc, #68]	@ (8002150 <OC6Config+0xa8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d003      	beq.n	8002116 <OC6Config+0x6e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a10      	ldr	r2, [pc, #64]	@ (8002154 <OC6Config+0xac>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d109      	bne.n	800212a <OC6Config+0x82>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	029b      	lsls	r3, r3, #10
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4619      	mov	r1, r3
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff fc5a 	bl	80019f0 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40012c00 	.word	0x40012c00
 8002150:	40014000 	.word	0x40014000
 8002154:	40014400 	.word	0x40014400

08002158 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid) {
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->prevError  = 0.0f;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	629a      	str	r2, [r3, #40]	@ 0x28

	pid->differentiator  = 0.0f;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->prevMeasurement = 0.0f;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	631a      	str	r2, [r3, #48]	@ 0x30

	pid->out = 0.0f;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <memset>:
 8002194:	4402      	add	r2, r0
 8002196:	4603      	mov	r3, r0
 8002198:	4293      	cmp	r3, r2
 800219a:	d100      	bne.n	800219e <memset+0xa>
 800219c:	4770      	bx	lr
 800219e:	f803 1b01 	strb.w	r1, [r3], #1
 80021a2:	e7f9      	b.n	8002198 <memset+0x4>

080021a4 <__libc_init_array>:
 80021a4:	b570      	push	{r4, r5, r6, lr}
 80021a6:	4d0d      	ldr	r5, [pc, #52]	@ (80021dc <__libc_init_array+0x38>)
 80021a8:	4c0d      	ldr	r4, [pc, #52]	@ (80021e0 <__libc_init_array+0x3c>)
 80021aa:	1b64      	subs	r4, r4, r5
 80021ac:	10a4      	asrs	r4, r4, #2
 80021ae:	2600      	movs	r6, #0
 80021b0:	42a6      	cmp	r6, r4
 80021b2:	d109      	bne.n	80021c8 <__libc_init_array+0x24>
 80021b4:	4d0b      	ldr	r5, [pc, #44]	@ (80021e4 <__libc_init_array+0x40>)
 80021b6:	4c0c      	ldr	r4, [pc, #48]	@ (80021e8 <__libc_init_array+0x44>)
 80021b8:	f000 f818 	bl	80021ec <_init>
 80021bc:	1b64      	subs	r4, r4, r5
 80021be:	10a4      	asrs	r4, r4, #2
 80021c0:	2600      	movs	r6, #0
 80021c2:	42a6      	cmp	r6, r4
 80021c4:	d105      	bne.n	80021d2 <__libc_init_array+0x2e>
 80021c6:	bd70      	pop	{r4, r5, r6, pc}
 80021c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80021cc:	4798      	blx	r3
 80021ce:	3601      	adds	r6, #1
 80021d0:	e7ee      	b.n	80021b0 <__libc_init_array+0xc>
 80021d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80021d6:	4798      	blx	r3
 80021d8:	3601      	adds	r6, #1
 80021da:	e7f2      	b.n	80021c2 <__libc_init_array+0x1e>
 80021dc:	0800221c 	.word	0x0800221c
 80021e0:	0800221c 	.word	0x0800221c
 80021e4:	0800221c 	.word	0x0800221c
 80021e8:	08002220 	.word	0x08002220

080021ec <_init>:
 80021ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ee:	bf00      	nop
 80021f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021f2:	bc08      	pop	{r3}
 80021f4:	469e      	mov	lr, r3
 80021f6:	4770      	bx	lr

080021f8 <_fini>:
 80021f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021fa:	bf00      	nop
 80021fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021fe:	bc08      	pop	{r3}
 8002200:	469e      	mov	lr, r3
 8002202:	4770      	bx	lr
