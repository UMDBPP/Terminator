
digital_cube_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001190  0800c11c  0800c11c  0000d11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2ac  0800d2ac  0000f064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d2ac  0800d2ac  0000e2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2b4  0800d2b4  0000f064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2b4  0800d2b4  0000e2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d2b8  0800d2b8  0000e2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800d2bc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  20000064  0800d320  0000f064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  0800d320  0000f464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f784  00000000  00000000  0000f094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9a  00000000  00000000  0001e818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  000206b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2a  00000000  00000000  00021748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197ce  00000000  00000000  00022572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdd2  00000000  00000000  0003bd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089aa1  00000000  00000000  00047b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000045  00000000  00000000  000d15b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056c4  00000000  00000000  000d15f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000172  00000000  00000000  000d6cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <deregister_tm_clones>:
 8000240:	4803      	ldr	r0, [pc, #12]	@ (8000250 <deregister_tm_clones+0x10>)
 8000242:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <deregister_tm_clones+0x14>)
 8000244:	4283      	cmp	r3, r0
 8000246:	d002      	beq.n	800024e <deregister_tm_clones+0xe>
 8000248:	4b03      	ldr	r3, [pc, #12]	@ (8000258 <deregister_tm_clones+0x18>)
 800024a:	b103      	cbz	r3, 800024e <deregister_tm_clones+0xe>
 800024c:	4718      	bx	r3
 800024e:	4770      	bx	lr
 8000250:	20000064 	.word	0x20000064
 8000254:	20000064 	.word	0x20000064
 8000258:	00000000 	.word	0x00000000

0800025c <register_tm_clones>:
 800025c:	4805      	ldr	r0, [pc, #20]	@ (8000274 <register_tm_clones+0x18>)
 800025e:	4b06      	ldr	r3, [pc, #24]	@ (8000278 <register_tm_clones+0x1c>)
 8000260:	1a1b      	subs	r3, r3, r0
 8000262:	0fd9      	lsrs	r1, r3, #31
 8000264:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000268:	1049      	asrs	r1, r1, #1
 800026a:	d002      	beq.n	8000272 <register_tm_clones+0x16>
 800026c:	4b03      	ldr	r3, [pc, #12]	@ (800027c <register_tm_clones+0x20>)
 800026e:	b103      	cbz	r3, 8000272 <register_tm_clones+0x16>
 8000270:	4718      	bx	r3
 8000272:	4770      	bx	lr
 8000274:	20000064 	.word	0x20000064
 8000278:	20000064 	.word	0x20000064
 800027c:	00000000 	.word	0x00000000

08000280 <__do_global_dtors_aux>:
 8000280:	b510      	push	{r4, lr}
 8000282:	4c06      	ldr	r4, [pc, #24]	@ (800029c <__do_global_dtors_aux+0x1c>)
 8000284:	7823      	ldrb	r3, [r4, #0]
 8000286:	b943      	cbnz	r3, 800029a <__do_global_dtors_aux+0x1a>
 8000288:	f7ff ffda 	bl	8000240 <deregister_tm_clones>
 800028c:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <__do_global_dtors_aux+0x20>)
 800028e:	b113      	cbz	r3, 8000296 <__do_global_dtors_aux+0x16>
 8000290:	4804      	ldr	r0, [pc, #16]	@ (80002a4 <__do_global_dtors_aux+0x24>)
 8000292:	f3af 8000 	nop.w
 8000296:	2301      	movs	r3, #1
 8000298:	7023      	strb	r3, [r4, #0]
 800029a:	bd10      	pop	{r4, pc}
 800029c:	20000064 	.word	0x20000064
 80002a0:	00000000 	.word	0x00000000
 80002a4:	0800c104 	.word	0x0800c104

080002a8 <frame_dummy>:
 80002a8:	b508      	push	{r3, lr}
 80002aa:	4b05      	ldr	r3, [pc, #20]	@ (80002c0 <frame_dummy+0x18>)
 80002ac:	b11b      	cbz	r3, 80002b6 <frame_dummy+0xe>
 80002ae:	4905      	ldr	r1, [pc, #20]	@ (80002c4 <frame_dummy+0x1c>)
 80002b0:	4805      	ldr	r0, [pc, #20]	@ (80002c8 <frame_dummy+0x20>)
 80002b2:	f3af 8000 	nop.w
 80002b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80002ba:	f7ff bfcf 	b.w	800025c <register_tm_clones>
 80002be:	bf00      	nop
 80002c0:	00000000 	.word	0x00000000
 80002c4:	20000068 	.word	0x20000068
 80002c8:	0800c104 	.word	0x0800c104

080002cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b085      	sub	sp, #20
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f003 0307 	and.w	r3, r3, #7
 80002da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000310 <__NVIC_SetPriorityGrouping+0x44>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002e2:	68ba      	ldr	r2, [r7, #8]
 80002e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80002e8:	4013      	ands	r3, r2
 80002ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80002f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002fe:	4a04      	ldr	r2, [pc, #16]	@ (8000310 <__NVIC_SetPriorityGrouping+0x44>)
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	60d3      	str	r3, [r2, #12]
}
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000318:	4b04      	ldr	r3, [pc, #16]	@ (800032c <__NVIC_GetPriorityGrouping+0x18>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	0a1b      	lsrs	r3, r3, #8
 800031e:	f003 0307 	and.w	r3, r3, #7
}
 8000322:	4618      	mov	r0, r3
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800033a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033e:	2b00      	cmp	r3, #0
 8000340:	db0b      	blt.n	800035a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	f003 021f 	and.w	r2, r3, #31
 8000348:	4907      	ldr	r1, [pc, #28]	@ (8000368 <__NVIC_EnableIRQ+0x38>)
 800034a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034e:	095b      	lsrs	r3, r3, #5
 8000350:	2001      	movs	r0, #1
 8000352:	fa00 f202 	lsl.w	r2, r0, r2
 8000356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	e000e100 	.word	0xe000e100

0800036c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	6039      	str	r1, [r7, #0]
 8000376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800037c:	2b00      	cmp	r3, #0
 800037e:	db0a      	blt.n	8000396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	b2da      	uxtb	r2, r3
 8000384:	490c      	ldr	r1, [pc, #48]	@ (80003b8 <__NVIC_SetPriority+0x4c>)
 8000386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800038a:	0112      	lsls	r2, r2, #4
 800038c:	b2d2      	uxtb	r2, r2
 800038e:	440b      	add	r3, r1
 8000390:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000394:	e00a      	b.n	80003ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	b2da      	uxtb	r2, r3
 800039a:	4908      	ldr	r1, [pc, #32]	@ (80003bc <__NVIC_SetPriority+0x50>)
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	f003 030f 	and.w	r3, r3, #15
 80003a2:	3b04      	subs	r3, #4
 80003a4:	0112      	lsls	r2, r2, #4
 80003a6:	b2d2      	uxtb	r2, r2
 80003a8:	440b      	add	r3, r1
 80003aa:	761a      	strb	r2, [r3, #24]
}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr
 80003b8:	e000e100 	.word	0xe000e100
 80003bc:	e000ed00 	.word	0xe000ed00

080003c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b089      	sub	sp, #36	@ 0x24
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	60b9      	str	r1, [r7, #8]
 80003ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f003 0307 	and.w	r3, r3, #7
 80003d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003d4:	69fb      	ldr	r3, [r7, #28]
 80003d6:	f1c3 0307 	rsb	r3, r3, #7
 80003da:	2b04      	cmp	r3, #4
 80003dc:	bf28      	it	cs
 80003de:	2304      	movcs	r3, #4
 80003e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003e2:	69fb      	ldr	r3, [r7, #28]
 80003e4:	3304      	adds	r3, #4
 80003e6:	2b06      	cmp	r3, #6
 80003e8:	d902      	bls.n	80003f0 <NVIC_EncodePriority+0x30>
 80003ea:	69fb      	ldr	r3, [r7, #28]
 80003ec:	3b03      	subs	r3, #3
 80003ee:	e000      	b.n	80003f2 <NVIC_EncodePriority+0x32>
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80003f8:	69bb      	ldr	r3, [r7, #24]
 80003fa:	fa02 f303 	lsl.w	r3, r2, r3
 80003fe:	43da      	mvns	r2, r3
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	401a      	ands	r2, r3
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000408:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	fa01 f303 	lsl.w	r3, r1, r3
 8000412:	43d9      	mvns	r1, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000418:	4313      	orrs	r3, r2
         );
}
 800041a:	4618      	mov	r0, r3
 800041c:	3724      	adds	r7, #36	@ 0x24
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr

08000426 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000426:	b480      	push	{r7}
 8000428:	b083      	sub	sp, #12
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
 800042e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	431a      	orrs	r2, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	609a      	str	r2, [r3, #8]
}
 8000440:	bf00      	nop
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800044c:	b480      	push	{r7}
 800044e:	b087      	sub	sp, #28
 8000450:	af00      	add	r7, sp, #0
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	60b9      	str	r1, [r7, #8]
 8000456:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	3330      	adds	r3, #48	@ 0x30
 800045c:	461a      	mov	r2, r3
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	0a1b      	lsrs	r3, r3, #8
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	f003 030c 	and.w	r3, r3, #12
 8000468:	4413      	add	r3, r2
 800046a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	f003 031f 	and.w	r3, r3, #31
 8000476:	211f      	movs	r1, #31
 8000478:	fa01 f303 	lsl.w	r3, r1, r3
 800047c:	43db      	mvns	r3, r3
 800047e:	401a      	ands	r2, r3
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	0e9b      	lsrs	r3, r3, #26
 8000484:	f003 011f 	and.w	r1, r3, #31
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	f003 031f 	and.w	r3, r3, #31
 800048e:	fa01 f303 	lsl.w	r3, r1, r3
 8000492:	431a      	orrs	r2, r3
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000498:	bf00      	nop
 800049a:	371c      	adds	r7, #28
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b087      	sub	sp, #28
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	3314      	adds	r3, #20
 80004b4:	461a      	mov	r2, r3
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	0e5b      	lsrs	r3, r3, #25
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	f003 0304 	and.w	r3, r3, #4
 80004c0:	4413      	add	r3, r2
 80004c2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	68bb      	ldr	r3, [r7, #8]
 80004ca:	0d1b      	lsrs	r3, r3, #20
 80004cc:	f003 031f 	and.w	r3, r3, #31
 80004d0:	2107      	movs	r1, #7
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	43db      	mvns	r3, r3
 80004d8:	401a      	ands	r2, r3
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	0d1b      	lsrs	r3, r3, #20
 80004de:	f003 031f 	and.w	r3, r3, #31
 80004e2:	6879      	ldr	r1, [r7, #4]
 80004e4:	fa01 f303 	lsl.w	r3, r1, r3
 80004e8:	431a      	orrs	r2, r3
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80004ee:	bf00      	nop
 80004f0:	371c      	adds	r7, #28
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
	...

080004fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000514:	43db      	mvns	r3, r3
 8000516:	401a      	ands	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f003 0318 	and.w	r3, r3, #24
 800051e:	4908      	ldr	r1, [pc, #32]	@ (8000540 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000520:	40d9      	lsrs	r1, r3
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	400b      	ands	r3, r1
 8000526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800052a:	431a      	orrs	r2, r3
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	0007ffff 	.word	0x0007ffff

08000544 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	691b      	ldr	r3, [r3, #16]
 8000552:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000556:	f023 0303 	bic.w	r3, r3, #3
 800055a:	683a      	ldr	r2, [r7, #0]
 800055c:	431a      	orrs	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	611a      	str	r2, [r3, #16]
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800057e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	6093      	str	r3, [r2, #8]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80005a2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80005a6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80005ba:	b480      	push	{r7}
 80005bc:	b083      	sub	sp, #12
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80005ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80005ce:	f043 0201 	orr.w	r2, r3, #1
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <LL_EXTI_DisableIT_0_31+0x24>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	43db      	mvns	r3, r3
 80005f4:	4904      	ldr	r1, [pc, #16]	@ (8000608 <LL_EXTI_DisableIT_0_31+0x24>)
 80005f6:	4013      	ands	r3, r2
 80005f8:	600b      	str	r3, [r1, #0]
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40010400 	.word	0x40010400

0800060c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000616:	685a      	ldr	r2, [r3, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	43db      	mvns	r3, r3
 800061c:	4904      	ldr	r1, [pc, #16]	@ (8000630 <LL_EXTI_DisableEvent_0_31+0x24>)
 800061e:	4013      	ands	r3, r2
 8000620:	604b      	str	r3, [r1, #4]
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40010400 	.word	0x40010400

08000634 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f043 0201 	orr.w	r2, r3, #1
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	601a      	str	r2, [r3, #0]
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	601a      	str	r2, [r3, #0]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80006a8:	f023 0306 	bic.w	r3, r3, #6
 80006ac:	68b9      	ldr	r1, [r7, #8]
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	430a      	orrs	r2, r1
 80006b2:	431a      	orrs	r2, r3
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	60da      	str	r2, [r3, #12]
}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	60da      	str	r2, [r3, #12]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0304 	and.w	r3, r3, #4
 80006f4:	2b04      	cmp	r3, #4
 80006f6:	d101      	bne.n	80006fc <LL_I2C_IsActiveFlag_RXNE+0x18>
 80006f8:	2301      	movs	r3, #1
 80006fa:	e000      	b.n	80006fe <LL_I2C_IsActiveFlag_RXNE+0x1a>
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 800070a:	b480      	push	{r7}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	605a      	str	r2, [r3, #4]
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 800072c:	b480      	push	{r7}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
 8000738:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8000746:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	041b      	lsls	r3, r3, #16
 800074c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8000750:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8000752:	6a3b      	ldr	r3, [r7, #32]
 8000754:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8000756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000758:	4313      	orrs	r3, r2
 800075a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800075e:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	685a      	ldr	r2, [r3, #4]
 8000764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000766:	0d5b      	lsrs	r3, r3, #21
 8000768:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <LL_I2C_HandleTransfer+0x5c>)
 800076e:	430b      	orrs	r3, r1
 8000770:	43db      	mvns	r3, r3
 8000772:	401a      	ands	r2, r3
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	431a      	orrs	r2, r3
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 800077c:	bf00      	nop
 800077e:	371c      	adds	r7, #28
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	03ff7bff 	.word	0x03ff7bff

0800078c <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000798:	b2db      	uxtb	r3, r3
}
 800079a:	4618      	mov	r0, r3
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80007ac:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <LL_RCC_HSE_EnableBypass+0x1c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a04      	ldr	r2, [pc, #16]	@ (80007c4 <LL_RCC_HSE_EnableBypass+0x1c>)
 80007b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007b6:	6013      	str	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000

080007c8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80007cc:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <LL_RCC_HSE_Enable+0x1c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a04      	ldr	r2, [pc, #16]	@ (80007e4 <LL_RCC_HSE_Enable+0x1c>)
 80007d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007d6:	6013      	str	r3, [r2, #0]
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000

080007e8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 80007ec:	4b07      	ldr	r3, [pc, #28]	@ (800080c <LL_RCC_HSE_IsReady+0x24>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80007f8:	d101      	bne.n	80007fe <LL_RCC_HSE_IsReady+0x16>
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <LL_RCC_HSE_IsReady+0x18>
 80007fe:	2300      	movs	r3, #0
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <LL_RCC_LSI_Enable+0x20>)
 8000816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800081a:	4a05      	ldr	r2, [pc, #20]	@ (8000830 <LL_RCC_LSI_Enable+0x20>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <LL_RCC_LSI_IsReady+0x24>)
 800083a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	2b02      	cmp	r3, #2
 8000844:	d101      	bne.n	800084a <LL_RCC_LSI_IsReady+0x16>
 8000846:	2301      	movs	r3, #1
 8000848:	e000      	b.n	800084c <LL_RCC_LSI_IsReady+0x18>
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000

0800085c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <LL_RCC_SetSysClkSource+0x24>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	f023 0203 	bic.w	r2, r3, #3
 800086c:	4904      	ldr	r1, [pc, #16]	@ (8000880 <LL_RCC_SetSysClkSource+0x24>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4313      	orrs	r3, r2
 8000872:	608b      	str	r3, [r1, #8]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	40021000 	.word	0x40021000

08000884 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000888:	4b04      	ldr	r3, [pc, #16]	@ (800089c <LL_RCC_GetSysClkSource+0x18>)
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	f003 030c 	and.w	r3, r3, #12
}
 8000890:	4618      	mov	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <LL_RCC_SetAHBPrescaler+0x24>)
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80008b0:	4904      	ldr	r1, [pc, #16]	@ (80008c4 <LL_RCC_SetAHBPrescaler+0x24>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	608b      	str	r3, [r1, #8]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	40021000 	.word	0x40021000

080008c8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <LL_RCC_SetAPB1Prescaler+0x24>)
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80008d8:	4904      	ldr	r1, [pc, #16]	@ (80008ec <LL_RCC_SetAPB1Prescaler+0x24>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4313      	orrs	r3, r2
 80008de:	608b      	str	r3, [r1, #8]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	40021000 	.word	0x40021000

080008f0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <LL_RCC_SetAPB2Prescaler+0x24>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000900:	4904      	ldr	r1, [pc, #16]	@ (8000914 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4313      	orrs	r3, r2
 8000906:	608b      	str	r3, [r1, #8]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	40021000 	.word	0x40021000

08000918 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	0e1a      	lsrs	r2, r3, #24
 8000924:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <LL_RCC_SetI2CClockSource+0x4c>)
 8000926:	4413      	add	r3, r2
 8000928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3UL << ((I2CxSource & 0x001F0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x001F0000U) >> 16U)));
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	0c1b      	lsrs	r3, r3, #16
 8000932:	f003 031f 	and.w	r3, r3, #31
 8000936:	2103      	movs	r1, #3
 8000938:	fa01 f303 	lsl.w	r3, r1, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	401a      	ands	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	b2d9      	uxtb	r1, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	0c1b      	lsrs	r3, r3, #16
 8000948:	f003 031f 	and.w	r3, r3, #31
 800094c:	fa01 f303 	lsl.w	r3, r1, r3
 8000950:	431a      	orrs	r2, r3
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	601a      	str	r2, [r3, #0]
}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40021088 	.word	0x40021088

08000968 <LL_RCC_SetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM2_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM2_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 8000970:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <LL_RCC_SetLPTIMClockSource+0x30>)
 8000972:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	0c1b      	lsrs	r3, r3, #16
 800097a:	041b      	lsls	r3, r3, #16
 800097c:	43db      	mvns	r3, r3
 800097e:	401a      	ands	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	041b      	lsls	r3, r3, #16
 8000984:	4904      	ldr	r1, [pc, #16]	@ (8000998 <LL_RCC_SetLPTIMClockSource+0x30>)
 8000986:	4313      	orrs	r3, r2
 8000988:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	40021000 	.word	0x40021000

0800099c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009a4:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80009a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80009a8:	4907      	ldr	r1, [pc, #28]	@ (80009c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009b0:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80009b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4013      	ands	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009ba:	68fb      	ldr	r3, [r7, #12]
}
 80009bc:	bf00      	nop
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	40021000 	.word	0x40021000

080009cc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80009d4:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009d6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80009d8:	4907      	ldr	r1, [pc, #28]	@ (80009f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4313      	orrs	r3, r2
 80009de:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80009e0:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4013      	ands	r3, r2
 80009e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009ea:	68fb      	ldr	r3, [r7, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	40021000 	.word	0x40021000

080009fc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a04:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a06:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a08:	4907      	ldr	r1, [pc, #28]	@ (8000a28 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a10:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a12:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4013      	ands	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	40021000 	.word	0x40021000

08000a2c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <LL_FLASH_SetLatency+0x24>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f023 0207 	bic.w	r2, r3, #7
 8000a3c:	4904      	ldr	r1, [pc, #16]	@ (8000a50 <LL_FLASH_SetLatency+0x24>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	600b      	str	r3, [r1, #0]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	40022000 	.word	0x40022000

08000a54 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000a58:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <LL_FLASH_GetLatency+0x18>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f003 0307 	and.w	r3, r3, #7
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40022000 	.word	0x40022000

08000a70 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8000a80:	4904      	ldr	r1, [pc, #16]	@ (8000a94 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	600b      	str	r3, [r1, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	40007000 	.word	0x40007000

08000a98 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8000a9c:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000aa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000aa8:	d101      	bne.n	8000aae <LL_PWR_IsActiveFlag_VOS+0x16>
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e000      	b.n	8000ab0 <LL_PWR_IsActiveFlag_VOS+0x18>
 8000aae:	2300      	movs	r3, #0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40007000 	.word	0x40007000

08000ac0 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f023 0210 	bic.w	r2, r3, #16
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	431a      	orrs	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	605a      	str	r2, [r3, #4]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f043 0208 	orr.w	r2, r3, #8
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	605a      	str	r2, [r3, #4]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f043 0201 	orr.w	r2, r3, #1
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	601a      	str	r2, [r3, #0]
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f023 0201 	bic.w	r2, r3, #1
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	601a      	str	r2, [r3, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	601a      	str	r2, [r3, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6a1a      	ldr	r2, [r3, #32]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	431a      	orrs	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	621a      	str	r2, [r3, #32]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d028      	beq.n	8000c0a <LL_TIM_OC_DisableFast+0x62>
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	d023      	beq.n	8000c06 <LL_TIM_OC_DisableFast+0x5e>
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	2b10      	cmp	r3, #16
 8000bc2:	d01e      	beq.n	8000c02 <LL_TIM_OC_DisableFast+0x5a>
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	2b40      	cmp	r3, #64	@ 0x40
 8000bc8:	d019      	beq.n	8000bfe <LL_TIM_OC_DisableFast+0x56>
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bd0:	d013      	beq.n	8000bfa <LL_TIM_OC_DisableFast+0x52>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bd8:	d00d      	beq.n	8000bf6 <LL_TIM_OC_DisableFast+0x4e>
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000be0:	d007      	beq.n	8000bf2 <LL_TIM_OC_DisableFast+0x4a>
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000be8:	d101      	bne.n	8000bee <LL_TIM_OC_DisableFast+0x46>
 8000bea:	2307      	movs	r3, #7
 8000bec:	e00e      	b.n	8000c0c <LL_TIM_OC_DisableFast+0x64>
 8000bee:	2308      	movs	r3, #8
 8000bf0:	e00c      	b.n	8000c0c <LL_TIM_OC_DisableFast+0x64>
 8000bf2:	2306      	movs	r3, #6
 8000bf4:	e00a      	b.n	8000c0c <LL_TIM_OC_DisableFast+0x64>
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	e008      	b.n	8000c0c <LL_TIM_OC_DisableFast+0x64>
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	e006      	b.n	8000c0c <LL_TIM_OC_DisableFast+0x64>
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e004      	b.n	8000c0c <LL_TIM_OC_DisableFast+0x64>
 8000c02:	2302      	movs	r3, #2
 8000c04:	e002      	b.n	8000c0c <LL_TIM_OC_DisableFast+0x64>
 8000c06:	2301      	movs	r3, #1
 8000c08:	e000      	b.n	8000c0c <LL_TIM_OC_DisableFast+0x64>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3318      	adds	r3, #24
 8000c12:	4619      	mov	r1, r3
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	4a0b      	ldr	r2, [pc, #44]	@ (8000c44 <LL_TIM_OC_DisableFast+0x9c>)
 8000c18:	5cd3      	ldrb	r3, [r2, r3]
 8000c1a:	440b      	add	r3, r1
 8000c1c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	4908      	ldr	r1, [pc, #32]	@ (8000c48 <LL_TIM_OC_DisableFast+0xa0>)
 8000c26:	5ccb      	ldrb	r3, [r1, r3]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	408b      	lsls	r3, r1
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	401a      	ands	r2, r3
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	601a      	str	r2, [r3, #0]

}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	0800ceec 	.word	0x0800ceec
 8000c48:	0800cef8 	.word	0x0800cef8

08000c4c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d028      	beq.n	8000cae <LL_TIM_OC_EnablePreload+0x62>
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	d023      	beq.n	8000caa <LL_TIM_OC_EnablePreload+0x5e>
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	2b10      	cmp	r3, #16
 8000c66:	d01e      	beq.n	8000ca6 <LL_TIM_OC_EnablePreload+0x5a>
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	2b40      	cmp	r3, #64	@ 0x40
 8000c6c:	d019      	beq.n	8000ca2 <LL_TIM_OC_EnablePreload+0x56>
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c74:	d013      	beq.n	8000c9e <LL_TIM_OC_EnablePreload+0x52>
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c7c:	d00d      	beq.n	8000c9a <LL_TIM_OC_EnablePreload+0x4e>
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c84:	d007      	beq.n	8000c96 <LL_TIM_OC_EnablePreload+0x4a>
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c8c:	d101      	bne.n	8000c92 <LL_TIM_OC_EnablePreload+0x46>
 8000c8e:	2307      	movs	r3, #7
 8000c90:	e00e      	b.n	8000cb0 <LL_TIM_OC_EnablePreload+0x64>
 8000c92:	2308      	movs	r3, #8
 8000c94:	e00c      	b.n	8000cb0 <LL_TIM_OC_EnablePreload+0x64>
 8000c96:	2306      	movs	r3, #6
 8000c98:	e00a      	b.n	8000cb0 <LL_TIM_OC_EnablePreload+0x64>
 8000c9a:	2305      	movs	r3, #5
 8000c9c:	e008      	b.n	8000cb0 <LL_TIM_OC_EnablePreload+0x64>
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	e006      	b.n	8000cb0 <LL_TIM_OC_EnablePreload+0x64>
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e004      	b.n	8000cb0 <LL_TIM_OC_EnablePreload+0x64>
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	e002      	b.n	8000cb0 <LL_TIM_OC_EnablePreload+0x64>
 8000caa:	2301      	movs	r3, #1
 8000cac:	e000      	b.n	8000cb0 <LL_TIM_OC_EnablePreload+0x64>
 8000cae:	2300      	movs	r3, #0
 8000cb0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3318      	adds	r3, #24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <LL_TIM_OC_EnablePreload+0x98>)
 8000cbc:	5cd3      	ldrb	r3, [r2, r3]
 8000cbe:	440b      	add	r3, r1
 8000cc0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	4907      	ldr	r1, [pc, #28]	@ (8000ce8 <LL_TIM_OC_EnablePreload+0x9c>)
 8000cca:	5ccb      	ldrb	r3, [r1, r3]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	2308      	movs	r3, #8
 8000cd0:	408b      	lsls	r3, r1
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	601a      	str	r2, [r3, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	0800ceec 	.word	0x0800ceec
 8000ce8:	0800cef8 	.word	0x0800cef8

08000cec <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	683a      	ldr	r2, [r7, #0]
 8000cfa:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <LL_TIM_DisableExternalClock>:
  * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8000d3a:	f023 0307 	bic.w	r3, r3, #7
 8000d3e:	683a      	ldr	r2, [r7, #0]
 8000d40:	431a      	orrs	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	609a      	str	r2, [r3, #8]
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	431a      	orrs	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	605a      	str	r2, [r3, #4]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	605a      	str	r2, [r3, #4]
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	609a      	str	r2, [r3, #8]
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <LL_TIM_ConfigETR>:
  *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ConfigETR(TIM_TypeDef *TIMx, uint32_t ETRPolarity, uint32_t ETRPrescaler,
                                      uint32_t ETRFilter)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b085      	sub	sp, #20
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f423 423f 	bic.w	r2, r3, #48896	@ 0xbf00
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4319      	orrs	r1, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	430b      	orrs	r3, r1
 8000dde:	431a      	orrs	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	609a      	str	r2, [r3, #8]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfc:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <LL_TIM_SetOCRefClearInputSource>:
  *         @arg @ref LL_TIM_OCREF_CLR_INT_NC
  *         @arg @ref LL_TIM_OCREF_CLR_INT_ETR
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOCRefClearInputSource(TIM_TypeDef *TIMx, uint32_t OCRefClearInputSource)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f023 0208 	bic.w	r2, r3, #8
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	431a      	orrs	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	609a      	str	r2, [r3, #8]
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	619a      	str	r2, [r3, #24]
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <LL_LPTIM_Enable>:
  * @rmtoll CR           ENABLE        LL_LPTIM_Enable
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_Enable(LPTIM_TypeDef *LPTIMx)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	f043 0201 	orr.w	r2, r3, #1
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	611a      	str	r2, [r3, #16]
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <LL_LPTIM_StartCounter>:
  *         @arg @ref LL_LPTIM_OPERATING_MODE_CONTINUOUS
  *         @arg @ref LL_LPTIM_OPERATING_MODE_ONESHOT
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_StartCounter(LPTIM_TypeDef *LPTIMx, uint32_t OperatingMode)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	f023 0206 	bic.w	r2, r3, #6
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	611a      	str	r2, [r3, #16]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60da      	str	r2, [r3, #12]
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <LL_LPTIM_SetAutoReload>:
  * @param  LPTIMx Low-Power Timer instance
  * @param  AutoReload Value between Min_Data=0x0001 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetAutoReload(LPTIM_TypeDef *LPTIMx, uint32_t AutoReload)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	0c1b      	lsrs	r3, r3, #16
 8000eea:	041b      	lsls	r3, r3, #16
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	619a      	str	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	431a      	orrs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	60da      	str	r2, [r3, #12]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	60da      	str	r2, [r3, #12]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	431a      	orrs	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	60da      	str	r2, [r3, #12]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
 8000f80:	f023 0203 	bic.w	r2, r3, #3
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	621a      	str	r2, [r3, #32]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_LPTIM_SetInput2Src>:
  *         @arg @ref LL_LPTIM_INPUT2_SRC_GPIO
  *         @arg @ref LL_LPTIM_INPUT2_SRC_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput2Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	f023 0203 	bic.w	r2, r3, #3
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	621a      	str	r2, [r3, #32]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	60da      	str	r2, [r3, #12]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	f023 0201 	bic.w	r2, r3, #1
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	60da      	str	r2, [r3, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_LPTIM_ClearFlag_ARRM>:
  * @rmtoll ICR          ARRMCF        LL_LPTIM_ClearFlag_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_ClearFlag_ARRM(LPTIM_TypeDef *LPTIMx)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f043 0202 	orr.w	r2, r3, #2
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	605a      	str	r2, [r3, #4]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <LL_LPTIM_IsActiveFlag_ARRM>:
  * @rmtoll ISR          ARRM          LL_LPTIM_IsActiveFlag_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPTIM_IsActiveFlag_ARRM(const LPTIM_TypeDef *LPTIMx)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b02      	cmp	r3, #2
 8001036:	d101      	bne.n	800103c <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f043 0202 	orr.w	r2, r3, #2
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	609a      	str	r2, [r3, #8]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800106c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800106e:	b08f      	sub	sp, #60	@ 0x3c
 8001070:	af08      	add	r7, sp, #32

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001072:	2001      	movs	r0, #1
 8001074:	f7ff fcc2 	bl	80009fc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001078:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800107c:	f7ff fca6 	bl	80009cc <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f7ff f923 	bl	80002cc <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn,
 8001086:	f7ff f945 	bl	8000314 <__NVIC_GetPriorityGrouping>
 800108a:	4603      	mov	r3, r0
 800108c:	2200      	movs	r2, #0
 800108e:	210f      	movs	r1, #15
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f995 	bl	80003c0 <NVIC_EncodePriority>
 8001096:	4603      	mov	r3, r0
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800109e:	f7ff f965 	bl	800036c <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 15, 0));

  SystemClock_Config();
 80010a2:	f000 fa2d 	bl	8001500 <SystemClock_Config>

  MX_GPIO_Init();
 80010a6:	f000 fd05 	bl	8001ab4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80010aa:	f000 fa6d 	bl	8001588 <MX_ADC1_Init>
  MX_COMP1_Init();
 80010ae:	f000 fb0d 	bl	80016cc <MX_COMP1_Init>
  MX_I2C1_Init();
 80010b2:	f000 fb6b 	bl	800178c <MX_I2C1_Init>
  MX_SPI1_Init();
 80010b6:	f000 fbc9 	bl	800184c <MX_SPI1_Init>
  MX_TIM1_Init();
 80010ba:	f000 fc33 	bl	8001924 <MX_TIM1_Init>
  MX_LPTIM1_Init();
 80010be:	f000 fd53 	bl	8001b68 <MX_LPTIM1_Init>
  // LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH3N);
  // LL_TIM_OC_SetCompareCH3(TIM1, 50); // change this
  // LL_TIM_EnableAllOutputs(TIM1);

  // enable LPTIM1 which triggers interrupt every ~30 seconds
  LL_LPTIM_Enable(LPTIM1);
 80010c2:	486c      	ldr	r0, [pc, #432]	@ (8001274 <main+0x208>)
 80010c4:	f7ff fed3 	bl	8000e6e <LL_LPTIM_Enable>
  LL_LPTIM_EnableIT_ARRM(LPTIM1);
 80010c8:	486a      	ldr	r0, [pc, #424]	@ (8001274 <main+0x208>)
 80010ca:	f7ff ffbe 	bl	800104a <LL_LPTIM_EnableIT_ARRM>
  LL_LPTIM_SetAutoReload(LPTIM1, 8533);
 80010ce:	f242 1155 	movw	r1, #8533	@ 0x2155
 80010d2:	4868      	ldr	r0, [pc, #416]	@ (8001274 <main+0x208>)
 80010d4:	f7ff ff01 	bl	8000eda <LL_LPTIM_SetAutoReload>
  LL_LPTIM_StartCounter(LPTIM1, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 80010d8:	2104      	movs	r1, #4
 80010da:	4866      	ldr	r0, [pc, #408]	@ (8001274 <main+0x208>)
 80010dc:	f7ff fed7 	bl	8000e8e <LL_LPTIM_StartCounter>

  // Enable Peripherals
  LL_ADC_Enable(ADC1);
 80010e0:	4865      	ldr	r0, [pc, #404]	@ (8001278 <main+0x20c>)
 80010e2:	f7ff fa6a 	bl	80005ba <LL_ADC_Enable>
  LL_I2C_Enable(I2C1);
 80010e6:	4865      	ldr	r0, [pc, #404]	@ (800127c <main+0x210>)
 80010e8:	f7ff faa4 	bl	8000634 <LL_I2C_Enable>
  LL_SPI_Enable(SPI1);
 80010ec:	4864      	ldr	r0, [pc, #400]	@ (8001280 <main+0x214>)
 80010ee:	f7ff fce7 	bl	8000ac0 <LL_SPI_Enable>

  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_0); // Radio NSS high
 80010f2:	2101      	movs	r1, #1
 80010f4:	4863      	ldr	r0, [pc, #396]	@ (8001284 <main+0x218>)
 80010f6:	f7ff fe9e 	bl	8000e36 <LL_GPIO_SetOutputPin>

  fram_init(&memory, SPI1, 0, 0, 0, 0);
 80010fa:	2300      	movs	r3, #0
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	2300      	movs	r3, #0
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	2200      	movs	r2, #0
 8001106:	495e      	ldr	r1, [pc, #376]	@ (8001280 <main+0x214>)
 8001108:	485f      	ldr	r0, [pc, #380]	@ (8001288 <main+0x21c>)
 800110a:	f002 f81d 	bl	8003148 <fram_init>

  // mount the filesystem
  int err = lfs_mount(&lfs, &cfg);
 800110e:	495f      	ldr	r1, [pc, #380]	@ (800128c <main+0x220>)
 8001110:	485f      	ldr	r0, [pc, #380]	@ (8001290 <main+0x224>)
 8001112:	f008 ffad 	bl	800a070 <lfs_mount>
 8001116:	6178      	str	r0, [r7, #20]

  // reformat if we can't mount the filesystem
  // this should only happen on the first boot
  if (err) {
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <main+0xba>
    exit(-1); // trouble mounting FS
 800111e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001122:	f009 f959 	bl	800a3d8 <exit>
    // lfs_format(&lfs, &cfg);
    // lfs_mount(&lfs, &cfg);
  }

  // read current count
  uint32_t boot_count = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  lfs_file_open(&lfs, &file, "boot_count", LFS_O_RDWR | LFS_O_CREAT);
 800112a:	f240 1303 	movw	r3, #259	@ 0x103
 800112e:	4a59      	ldr	r2, [pc, #356]	@ (8001294 <main+0x228>)
 8001130:	4959      	ldr	r1, [pc, #356]	@ (8001298 <main+0x22c>)
 8001132:	4857      	ldr	r0, [pc, #348]	@ (8001290 <main+0x224>)
 8001134:	f008 ffc6 	bl	800a0c4 <lfs_file_open>
  lfs_file_read(&lfs, &file, &boot_count, sizeof(boot_count));
 8001138:	f107 0210 	add.w	r2, r7, #16
 800113c:	2304      	movs	r3, #4
 800113e:	4956      	ldr	r1, [pc, #344]	@ (8001298 <main+0x22c>)
 8001140:	4853      	ldr	r0, [pc, #332]	@ (8001290 <main+0x224>)
 8001142:	f009 f81f 	bl	800a184 <lfs_file_read>

  // update boot count
  boot_count += 1;
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	3301      	adds	r3, #1
 800114a:	613b      	str	r3, [r7, #16]
  lfs_file_rewind(&lfs, &file);
 800114c:	4952      	ldr	r1, [pc, #328]	@ (8001298 <main+0x22c>)
 800114e:	4850      	ldr	r0, [pc, #320]	@ (8001290 <main+0x224>)
 8001150:	f009 f8a4 	bl	800a29c <lfs_file_rewind>
  lfs_file_write(&lfs, &file, &boot_count, sizeof(boot_count));
 8001154:	f107 0210 	add.w	r2, r7, #16
 8001158:	2304      	movs	r3, #4
 800115a:	494f      	ldr	r1, [pc, #316]	@ (8001298 <main+0x22c>)
 800115c:	484c      	ldr	r0, [pc, #304]	@ (8001290 <main+0x224>)
 800115e:	f009 f841 	bl	800a1e4 <lfs_file_write>

  // remember the storage is not updated until the file is closed successfully
  lfs_file_close(&lfs, &file);
 8001162:	494d      	ldr	r1, [pc, #308]	@ (8001298 <main+0x22c>)
 8001164:	484a      	ldr	r0, [pc, #296]	@ (8001290 <main+0x224>)
 8001166:	f008 ffe1 	bl	800a12c <lfs_file_close>

  // release any resources we were using
  lfs_unmount(&lfs);
 800116a:	4849      	ldr	r0, [pc, #292]	@ (8001290 <main+0x224>)
 800116c:	f008 ff96 	bl	800a09c <lfs_unmount>

  err = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  read_log();
 8001174:	f000 f952 	bl	800141c <read_log>

  log_item.lat_dir = '0';
 8001178:	4b48      	ldr	r3, [pc, #288]	@ (800129c <main+0x230>)
 800117a:	2230      	movs	r2, #48	@ 0x30
 800117c:	731a      	strb	r2, [r3, #12]
  log_item.lon_dir = '0';
 800117e:	4b47      	ldr	r3, [pc, #284]	@ (800129c <main+0x230>)
 8001180:	2230      	movs	r2, #48	@ 0x30
 8001182:	761a      	strb	r2, [r3, #24]

  while (1) {

    if (LL_LPTIM_IsActiveFlag_ARRM(LPTIM1) ||
 8001184:	483b      	ldr	r0, [pc, #236]	@ (8001274 <main+0x208>)
 8001186:	f7ff ff4d 	bl	8001024 <LL_LPTIM_IsActiveFlag_ARRM>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d105      	bne.n	800119c <main+0x130>
        (flags & LOG_FLAG)) { // flags & LOG_FLAG // regular logging event
 8001190:	4b43      	ldr	r3, [pc, #268]	@ (80012a0 <main+0x234>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0301 	and.w	r3, r3, #1
    if (LL_LPTIM_IsActiveFlag_ARRM(LPTIM1) ||
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f3      	beq.n	8001184 <main+0x118>

      LL_TIM_EnableCounter(TIM1);
 800119c:	4841      	ldr	r0, [pc, #260]	@ (80012a4 <main+0x238>)
 800119e:	f7ff fcc2 	bl	8000b26 <LL_TIM_EnableCounter>
      LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH3N);
 80011a2:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 80011a6:	483f      	ldr	r0, [pc, #252]	@ (80012a4 <main+0x238>)
 80011a8:	f7ff fced 	bl	8000b86 <LL_TIM_CC_EnableChannel>
      LL_TIM_OC_SetCompareCH3(TIM1, 50); // change this
 80011ac:	2132      	movs	r1, #50	@ 0x32
 80011ae:	483d      	ldr	r0, [pc, #244]	@ (80012a4 <main+0x238>)
 80011b0:	f7ff fd9c 	bl	8000cec <LL_TIM_OC_SetCompareCH3>
      LL_TIM_EnableAllOutputs(TIM1);
 80011b4:	483b      	ldr	r0, [pc, #236]	@ (80012a4 <main+0x238>)
 80011b6:	f7ff fe1b 	bl	8000df0 <LL_TIM_EnableAllOutputs>

      get_gps_data();
 80011ba:	f000 f87d 	bl	80012b8 <get_gps_data>

      err = lfs_mount(&lfs, &cfg);
 80011be:	4933      	ldr	r1, [pc, #204]	@ (800128c <main+0x220>)
 80011c0:	4833      	ldr	r0, [pc, #204]	@ (8001290 <main+0x224>)
 80011c2:	f008 ff55 	bl	800a070 <lfs_mount>
 80011c6:	6178      	str	r0, [r7, #20]

      if (err) {
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <main+0x16a>
        exit(-1); // trouble mounting FS
 80011ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011d2:	f009 f901 	bl	800a3d8 <exit>
        // lfs_format(&lfs, &cfg);
        // lfs_mount(&lfs, &cfg);
      }

      lfs_file_open(&lfs, &log, "flight_log",
 80011d6:	f640 1303 	movw	r3, #2307	@ 0x903
 80011da:	4a33      	ldr	r2, [pc, #204]	@ (80012a8 <main+0x23c>)
 80011dc:	4933      	ldr	r1, [pc, #204]	@ (80012ac <main+0x240>)
 80011de:	482c      	ldr	r0, [pc, #176]	@ (8001290 <main+0x224>)
 80011e0:	f008 ff70 	bl	800a0c4 <lfs_file_open>
                    LFS_O_RDWR | LFS_O_CREAT | LFS_O_APPEND);

      sprintf(log_buf, "%lu,%lu,%lu.%lu,%c,%lu.%lu,%c,%lu,%lu \n", boot_count,
 80011e4:	693e      	ldr	r6, [r7, #16]
 80011e6:	4b2d      	ldr	r3, [pc, #180]	@ (800129c <main+0x230>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	4b2b      	ldr	r3, [pc, #172]	@ (800129c <main+0x230>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	4a2a      	ldr	r2, [pc, #168]	@ (800129c <main+0x230>)
 80011f2:	6892      	ldr	r2, [r2, #8]
              log_item.time, log_item.lat_int, log_item.lat_frac,
              log_item.lat_dir, log_item.lon_int, log_item.lon_frac,
 80011f4:	4929      	ldr	r1, [pc, #164]	@ (800129c <main+0x230>)
 80011f6:	7b09      	ldrb	r1, [r1, #12]
      sprintf(log_buf, "%lu,%lu,%lu.%lu,%c,%lu.%lu,%c,%lu,%lu \n", boot_count,
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	4928      	ldr	r1, [pc, #160]	@ (800129c <main+0x230>)
 80011fc:	6909      	ldr	r1, [r1, #16]
 80011fe:	4827      	ldr	r0, [pc, #156]	@ (800129c <main+0x230>)
 8001200:	6940      	ldr	r0, [r0, #20]
              log_item.lon_dir, log_item.altitude, log_item.date);
 8001202:	4c26      	ldr	r4, [pc, #152]	@ (800129c <main+0x230>)
 8001204:	7e24      	ldrb	r4, [r4, #24]
      sprintf(log_buf, "%lu,%lu,%lu.%lu,%c,%lu.%lu,%c,%lu,%lu \n", boot_count,
 8001206:	607c      	str	r4, [r7, #4]
 8001208:	4c24      	ldr	r4, [pc, #144]	@ (800129c <main+0x230>)
 800120a:	69e4      	ldr	r4, [r4, #28]
 800120c:	4d23      	ldr	r5, [pc, #140]	@ (800129c <main+0x230>)
 800120e:	6a2d      	ldr	r5, [r5, #32]
 8001210:	9507      	str	r5, [sp, #28]
 8001212:	9406      	str	r4, [sp, #24]
 8001214:	687c      	ldr	r4, [r7, #4]
 8001216:	9405      	str	r4, [sp, #20]
 8001218:	9004      	str	r0, [sp, #16]
 800121a:	9103      	str	r1, [sp, #12]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	9102      	str	r1, [sp, #8]
 8001220:	9201      	str	r2, [sp, #4]
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4632      	mov	r2, r6
 8001228:	4921      	ldr	r1, [pc, #132]	@ (80012b0 <main+0x244>)
 800122a:	4822      	ldr	r0, [pc, #136]	@ (80012b4 <main+0x248>)
 800122c:	f009 f9a4 	bl	800a578 <siprintf>
      log_buf[99] = 0x00;
 8001230:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <main+0x248>)
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63

      lfs_file_write(&lfs, &log, log_buf, strlen(log_buf));
 8001238:	481e      	ldr	r0, [pc, #120]	@ (80012b4 <main+0x248>)
 800123a:	f7fe ffa9 	bl	8000190 <strlen>
 800123e:	4603      	mov	r3, r0
 8001240:	4a1c      	ldr	r2, [pc, #112]	@ (80012b4 <main+0x248>)
 8001242:	491a      	ldr	r1, [pc, #104]	@ (80012ac <main+0x240>)
 8001244:	4812      	ldr	r0, [pc, #72]	@ (8001290 <main+0x224>)
 8001246:	f008 ffcd 	bl	800a1e4 <lfs_file_write>

      lfs_file_close(&lfs, &log);
 800124a:	4918      	ldr	r1, [pc, #96]	@ (80012ac <main+0x240>)
 800124c:	4810      	ldr	r0, [pc, #64]	@ (8001290 <main+0x224>)
 800124e:	f008 ff6d 	bl	800a12c <lfs_file_close>
      lfs_unmount(&lfs);
 8001252:	480f      	ldr	r0, [pc, #60]	@ (8001290 <main+0x224>)
 8001254:	f008 ff22 	bl	800a09c <lfs_unmount>
      flags = flags & ~(LOG_FLAG);
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <main+0x234>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	4a0f      	ldr	r2, [pc, #60]	@ (80012a0 <main+0x234>)
 8001262:	6013      	str	r3, [r2, #0]

      LL_TIM_DisableCounter(TIM1);
 8001264:	480f      	ldr	r0, [pc, #60]	@ (80012a4 <main+0x238>)
 8001266:	f7ff fc6e 	bl	8000b46 <LL_TIM_DisableCounter>

      LL_LPTIM_ClearFLAG_ARRM(LPTIM1);
 800126a:	4802      	ldr	r0, [pc, #8]	@ (8001274 <main+0x208>)
 800126c:	f7ff feca 	bl	8001004 <LL_LPTIM_ClearFlag_ARRM>
    if (LL_LPTIM_IsActiveFlag_ARRM(LPTIM1) ||
 8001270:	e788      	b.n	8001184 <main+0x118>
 8001272:	bf00      	nop
 8001274:	40007c00 	.word	0x40007c00
 8001278:	50040000 	.word	0x50040000
 800127c:	40005400 	.word	0x40005400
 8001280:	40013000 	.word	0x40013000
 8001284:	48000400 	.word	0x48000400
 8001288:	20000084 	.word	0x20000084
 800128c:	0800cf04 	.word	0x0800cf04
 8001290:	20000120 	.word	0x20000120
 8001294:	0800c11c 	.word	0x0800c11c
 8001298:	200001a0 	.word	0x200001a0
 800129c:	20000098 	.word	0x20000098
 80012a0:	20000080 	.word	0x20000080
 80012a4:	40012c00 	.word	0x40012c00
 80012a8:	0800c128 	.word	0x0800c128
 80012ac:	200001f4 	.word	0x200001f4
 80012b0:	0800c134 	.word	0x0800c134
 80012b4:	200000bc 	.word	0x200000bc

080012b8 <get_gps_data>:
  }
}

// this function waits for a NMEA GGA message and parses it into the log item
// struct above
void get_gps_data() {
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b089      	sub	sp, #36	@ 0x24
 80012bc:	af08      	add	r7, sp, #32
  static uint32_t len = 100;
  static uint32_t i = 0;

  while (1) { // poll I2C bus until end of line is received

    LL_I2C_HandleTransfer(I2C1, (0x42 << 1), LL_I2C_ADDRSLAVE_7BIT, 1,
 80012be:	4b44      	ldr	r3, [pc, #272]	@ (80013d0 <get_gps_data+0x118>)
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	2301      	movs	r3, #1
 80012ca:	2200      	movs	r2, #0
 80012cc:	2184      	movs	r1, #132	@ 0x84
 80012ce:	4841      	ldr	r0, [pc, #260]	@ (80013d4 <get_gps_data+0x11c>)
 80012d0:	f7ff fa2c 	bl	800072c <LL_I2C_HandleTransfer>
                          LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);

    while (LL_I2C_IsActiveFlag_RXNE(I2C1) == 0)
 80012d4:	bf00      	nop
 80012d6:	483f      	ldr	r0, [pc, #252]	@ (80013d4 <get_gps_data+0x11c>)
 80012d8:	f7ff fa04 	bl	80006e4 <LL_I2C_IsActiveFlag_RXNE>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f9      	beq.n	80012d6 <get_gps_data+0x1e>
      ;

    buf[i] = (char)LL_I2C_ReceiveData8(I2C1);
 80012e2:	4b3d      	ldr	r3, [pc, #244]	@ (80013d8 <get_gps_data+0x120>)
 80012e4:	681c      	ldr	r4, [r3, #0]
 80012e6:	483b      	ldr	r0, [pc, #236]	@ (80013d4 <get_gps_data+0x11c>)
 80012e8:	f7ff fa50 	bl	800078c <LL_I2C_ReceiveData8>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b3a      	ldr	r3, [pc, #232]	@ (80013dc <get_gps_data+0x124>)
 80012f2:	551a      	strb	r2, [r3, r4]

    if (buf[i] == '$') {
 80012f4:	4b38      	ldr	r3, [pc, #224]	@ (80013d8 <get_gps_data+0x120>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a38      	ldr	r2, [pc, #224]	@ (80013dc <get_gps_data+0x124>)
 80012fa:	5cd3      	ldrb	r3, [r2, r3]
 80012fc:	2b24      	cmp	r3, #36	@ 0x24
 80012fe:	d107      	bne.n	8001310 <get_gps_data+0x58>
      i = 0;
 8001300:	4b35      	ldr	r3, [pc, #212]	@ (80013d8 <get_gps_data+0x120>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
      buf[i] = '$';
 8001306:	4b34      	ldr	r3, [pc, #208]	@ (80013d8 <get_gps_data+0x120>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a34      	ldr	r2, [pc, #208]	@ (80013dc <get_gps_data+0x124>)
 800130c:	2124      	movs	r1, #36	@ 0x24
 800130e:	54d1      	strb	r1, [r2, r3]
    }

    if (i >= (len - 1) || buf[i] == 10) {
 8001310:	4b33      	ldr	r3, [pc, #204]	@ (80013e0 <get_gps_data+0x128>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	1e5a      	subs	r2, r3, #1
 8001316:	4b30      	ldr	r3, [pc, #192]	@ (80013d8 <get_gps_data+0x120>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	429a      	cmp	r2, r3
 800131c:	d905      	bls.n	800132a <get_gps_data+0x72>
 800131e:	4b2e      	ldr	r3, [pc, #184]	@ (80013d8 <get_gps_data+0x120>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a2e      	ldr	r2, [pc, #184]	@ (80013dc <get_gps_data+0x124>)
 8001324:	5cd3      	ldrb	r3, [r2, r3]
 8001326:	2b0a      	cmp	r3, #10
 8001328:	d141      	bne.n	80013ae <get_gps_data+0xf6>
      buf[len - 1] = 0x00;
 800132a:	4b2d      	ldr	r3, [pc, #180]	@ (80013e0 <get_gps_data+0x128>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	3b01      	subs	r3, #1
 8001330:	4a2a      	ldr	r2, [pc, #168]	@ (80013dc <get_gps_data+0x124>)
 8001332:	2100      	movs	r1, #0
 8001334:	54d1      	strb	r1, [r2, r3]
      i = 0;
 8001336:	4b28      	ldr	r3, [pc, #160]	@ (80013d8 <get_gps_data+0x120>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]

      if (strncmp((buf + 3), "GGA", 3) == 0) { // parse GGA message
 800133c:	4b29      	ldr	r3, [pc, #164]	@ (80013e4 <get_gps_data+0x12c>)
 800133e:	2203      	movs	r2, #3
 8001340:	4929      	ldr	r1, [pc, #164]	@ (80013e8 <get_gps_data+0x130>)
 8001342:	4618      	mov	r0, r3
 8001344:	f009 fac8 	bl	800a8d8 <strncmp>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d112      	bne.n	8001374 <get_gps_data+0xbc>

        sscanf(buf, "%*[^,],%lu.%*lu,%lu.%lu,%c,%lu.%lu,%c,%*d,%*d,%*d,%lu",
 800134e:	4b27      	ldr	r3, [pc, #156]	@ (80013ec <get_gps_data+0x134>)
 8001350:	9305      	str	r3, [sp, #20]
 8001352:	4b27      	ldr	r3, [pc, #156]	@ (80013f0 <get_gps_data+0x138>)
 8001354:	9304      	str	r3, [sp, #16]
 8001356:	4b27      	ldr	r3, [pc, #156]	@ (80013f4 <get_gps_data+0x13c>)
 8001358:	9303      	str	r3, [sp, #12]
 800135a:	4b27      	ldr	r3, [pc, #156]	@ (80013f8 <get_gps_data+0x140>)
 800135c:	9302      	str	r3, [sp, #8]
 800135e:	4b27      	ldr	r3, [pc, #156]	@ (80013fc <get_gps_data+0x144>)
 8001360:	9301      	str	r3, [sp, #4]
 8001362:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <get_gps_data+0x148>)
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	4b27      	ldr	r3, [pc, #156]	@ (8001404 <get_gps_data+0x14c>)
 8001368:	4a27      	ldr	r2, [pc, #156]	@ (8001408 <get_gps_data+0x150>)
 800136a:	4928      	ldr	r1, [pc, #160]	@ (800140c <get_gps_data+0x154>)
 800136c:	481b      	ldr	r0, [pc, #108]	@ (80013dc <get_gps_data+0x124>)
 800136e:	f009 f925 	bl	800a5bc <siscanf>
               &(log_item.time), &(log_item.lat_int), &(log_item.lat_frac),
               &(log_item.lat_dir), &(log_item.lon_int), &(log_item.lon_frac),
               &(log_item.lon_dir), &(log_item.altitude));
        break;
 8001372:	e028      	b.n	80013c6 <get_gps_data+0x10e>
      }

      if (strncmp((buf + 3), "RMC", 3) == 0) { // parse RMC message
 8001374:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <get_gps_data+0x12c>)
 8001376:	2203      	movs	r2, #3
 8001378:	4925      	ldr	r1, [pc, #148]	@ (8001410 <get_gps_data+0x158>)
 800137a:	4618      	mov	r0, r3
 800137c:	f009 faac 	bl	800a8d8 <strncmp>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d113      	bne.n	80013ae <get_gps_data+0xf6>

        sscanf(buf,
 8001386:	4b23      	ldr	r3, [pc, #140]	@ (8001414 <get_gps_data+0x15c>)
 8001388:	9306      	str	r3, [sp, #24]
 800138a:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <get_gps_data+0x134>)
 800138c:	9305      	str	r3, [sp, #20]
 800138e:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <get_gps_data+0x138>)
 8001390:	9304      	str	r3, [sp, #16]
 8001392:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <get_gps_data+0x13c>)
 8001394:	9303      	str	r3, [sp, #12]
 8001396:	4b18      	ldr	r3, [pc, #96]	@ (80013f8 <get_gps_data+0x140>)
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <get_gps_data+0x144>)
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <get_gps_data+0x148>)
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	4b18      	ldr	r3, [pc, #96]	@ (8001404 <get_gps_data+0x14c>)
 80013a4:	4a18      	ldr	r2, [pc, #96]	@ (8001408 <get_gps_data+0x150>)
 80013a6:	491c      	ldr	r1, [pc, #112]	@ (8001418 <get_gps_data+0x160>)
 80013a8:	480c      	ldr	r0, [pc, #48]	@ (80013dc <get_gps_data+0x124>)
 80013aa:	f009 f907 	bl	800a5bc <siscanf>
               &(log_item.lat_dir), &(log_item.lon_int), &(log_item.lon_frac),
               &(log_item.lon_dir), &(log_item.altitude), &(log_item.date));
      }
    }

    if (buf[i] != 0xFF)
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <get_gps_data+0x120>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a0a      	ldr	r2, [pc, #40]	@ (80013dc <get_gps_data+0x124>)
 80013b4:	5cd3      	ldrb	r3, [r2, r3]
 80013b6:	2bff      	cmp	r3, #255	@ 0xff
 80013b8:	d081      	beq.n	80012be <get_gps_data+0x6>
      i++;
 80013ba:	4b07      	ldr	r3, [pc, #28]	@ (80013d8 <get_gps_data+0x120>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	3301      	adds	r3, #1
 80013c0:	4a05      	ldr	r2, [pc, #20]	@ (80013d8 <get_gps_data+0x120>)
 80013c2:	6013      	str	r3, [r2, #0]
    LL_I2C_HandleTransfer(I2C1, (0x42 << 1), LL_I2C_ADDRSLAVE_7BIT, 1,
 80013c4:	e77b      	b.n	80012be <get_gps_data+0x6>
  }
}
 80013c6:	bf00      	nop
 80013c8:	3704      	adds	r7, #4
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd90      	pop	{r4, r7, pc}
 80013ce:	bf00      	nop
 80013d0:	80002400 	.word	0x80002400
 80013d4:	40005400 	.word	0x40005400
 80013d8:	20000248 	.word	0x20000248
 80013dc:	2000024c 	.word	0x2000024c
 80013e0:	20000000 	.word	0x20000000
 80013e4:	2000024f 	.word	0x2000024f
 80013e8:	0800c15c 	.word	0x0800c15c
 80013ec:	200000b4 	.word	0x200000b4
 80013f0:	200000b0 	.word	0x200000b0
 80013f4:	200000ac 	.word	0x200000ac
 80013f8:	200000a8 	.word	0x200000a8
 80013fc:	200000a4 	.word	0x200000a4
 8001400:	200000a0 	.word	0x200000a0
 8001404:	2000009c 	.word	0x2000009c
 8001408:	20000098 	.word	0x20000098
 800140c:	0800c160 	.word	0x0800c160
 8001410:	0800c198 	.word	0x0800c198
 8001414:	200000b8 	.word	0x200000b8
 8001418:	0800c19c 	.word	0x0800c19c

0800141c <read_log>:

// read the log file line by line
void read_log() {
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0

  static char buf[100] = {0};
  uint32_t file_size = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]

  int err = lfs_mount(&lfs, &cfg);
 8001426:	4931      	ldr	r1, [pc, #196]	@ (80014ec <read_log+0xd0>)
 8001428:	4831      	ldr	r0, [pc, #196]	@ (80014f0 <read_log+0xd4>)
 800142a:	f008 fe21 	bl	800a070 <lfs_mount>
 800142e:	6078      	str	r0, [r7, #4]

  if (err) {
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <read_log+0x22>
    exit(-1); // trouble mounting FS
 8001436:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800143a:	f008 ffcd 	bl	800a3d8 <exit>
    // lfs_format(&lfs, &cfg);
    // lfs_mount(&lfs, &cfg);
  }

  lfs_file_open(&lfs, &log, "flight_log", LFS_O_RDONLY);
 800143e:	2301      	movs	r3, #1
 8001440:	4a2c      	ldr	r2, [pc, #176]	@ (80014f4 <read_log+0xd8>)
 8001442:	492d      	ldr	r1, [pc, #180]	@ (80014f8 <read_log+0xdc>)
 8001444:	482a      	ldr	r0, [pc, #168]	@ (80014f0 <read_log+0xd4>)
 8001446:	f008 fe3d 	bl	800a0c4 <lfs_file_open>
  lfs_file_rewind(&lfs, &log);
 800144a:	492b      	ldr	r1, [pc, #172]	@ (80014f8 <read_log+0xdc>)
 800144c:	4828      	ldr	r0, [pc, #160]	@ (80014f0 <read_log+0xd4>)
 800144e:	f008 ff25 	bl	800a29c <lfs_file_rewind>

  file_size = lfs_file_size(&lfs, &log);
 8001452:	4929      	ldr	r1, [pc, #164]	@ (80014f8 <read_log+0xdc>)
 8001454:	4826      	ldr	r0, [pc, #152]	@ (80014f0 <read_log+0xd4>)
 8001456:	f008 ff37 	bl	800a2c8 <lfs_file_size>
 800145a:	4603      	mov	r3, r0
 800145c:	60bb      	str	r3, [r7, #8]

  uint32_t pos = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	603b      	str	r3, [r7, #0]

  while (lfs_file_tell(&lfs, &log) < lfs_file_size(&lfs, &log)) {
 8001462:	e02b      	b.n	80014bc <read_log+0xa0>
    for (int i = 0; i < 99; i++) {
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	e01d      	b.n	80014a6 <read_log+0x8a>
      lfs_file_read(&lfs, &log, (buf + i), 1);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4a23      	ldr	r2, [pc, #140]	@ (80014fc <read_log+0xe0>)
 800146e:	441a      	add	r2, r3
 8001470:	2301      	movs	r3, #1
 8001472:	4921      	ldr	r1, [pc, #132]	@ (80014f8 <read_log+0xdc>)
 8001474:	481e      	ldr	r0, [pc, #120]	@ (80014f0 <read_log+0xd4>)
 8001476:	f008 fe85 	bl	800a184 <lfs_file_read>
      if (buf[i] == 10) {
 800147a:	4a20      	ldr	r2, [pc, #128]	@ (80014fc <read_log+0xe0>)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4413      	add	r3, r2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b0a      	cmp	r3, #10
 8001484:	d10c      	bne.n	80014a0 <read_log+0x84>
        buf[99] = 0x00;
 8001486:	4b1d      	ldr	r3, [pc, #116]	@ (80014fc <read_log+0xe0>)
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
        if (i < 98)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2b61      	cmp	r3, #97	@ 0x61
 8001492:	dc0c      	bgt.n	80014ae <read_log+0x92>
          buf[i + 1] = 0x00;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3301      	adds	r3, #1
 8001498:	4a18      	ldr	r2, [pc, #96]	@ (80014fc <read_log+0xe0>)
 800149a:	2100      	movs	r1, #0
 800149c:	54d1      	strb	r1, [r2, r3]
        break;
 800149e:	e006      	b.n	80014ae <read_log+0x92>
    for (int i = 0; i < 99; i++) {
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	3301      	adds	r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b62      	cmp	r3, #98	@ 0x62
 80014aa:	ddde      	ble.n	800146a <read_log+0x4e>
 80014ac:	e000      	b.n	80014b0 <read_log+0x94>
        break;
 80014ae:	bf00      	nop
      }
    }
    pos = lfs_file_tell(&lfs, &log);
 80014b0:	4911      	ldr	r1, [pc, #68]	@ (80014f8 <read_log+0xdc>)
 80014b2:	480f      	ldr	r0, [pc, #60]	@ (80014f0 <read_log+0xd4>)
 80014b4:	f008 fec6 	bl	800a244 <lfs_file_tell>
 80014b8:	4603      	mov	r3, r0
 80014ba:	603b      	str	r3, [r7, #0]
  while (lfs_file_tell(&lfs, &log) < lfs_file_size(&lfs, &log)) {
 80014bc:	490e      	ldr	r1, [pc, #56]	@ (80014f8 <read_log+0xdc>)
 80014be:	480c      	ldr	r0, [pc, #48]	@ (80014f0 <read_log+0xd4>)
 80014c0:	f008 fec0 	bl	800a244 <lfs_file_tell>
 80014c4:	4604      	mov	r4, r0
 80014c6:	490c      	ldr	r1, [pc, #48]	@ (80014f8 <read_log+0xdc>)
 80014c8:	4809      	ldr	r0, [pc, #36]	@ (80014f0 <read_log+0xd4>)
 80014ca:	f008 fefd 	bl	800a2c8 <lfs_file_size>
 80014ce:	4603      	mov	r3, r0
 80014d0:	429c      	cmp	r4, r3
 80014d2:	dbc7      	blt.n	8001464 <read_log+0x48>
  }

  lfs_file_close(&lfs, &log);
 80014d4:	4908      	ldr	r1, [pc, #32]	@ (80014f8 <read_log+0xdc>)
 80014d6:	4806      	ldr	r0, [pc, #24]	@ (80014f0 <read_log+0xd4>)
 80014d8:	f008 fe28 	bl	800a12c <lfs_file_close>
  lfs_unmount(&lfs);
 80014dc:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <read_log+0xd4>)
 80014de:	f008 fddd 	bl	800a09c <lfs_unmount>
}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd90      	pop	{r4, r7, pc}
 80014ea:	bf00      	nop
 80014ec:	0800cf04 	.word	0x0800cf04
 80014f0:	20000120 	.word	0x20000120
 80014f4:	0800c128 	.word	0x0800c128
 80014f8:	200001f4 	.word	0x200001f4
 80014fc:	200002b0 	.word	0x200002b0

08001500 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */

void SystemClock_Config(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8001504:	2001      	movs	r0, #1
 8001506:	f7ff fa91 	bl	8000a2c <LL_FLASH_SetLatency>
  while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1) {
 800150a:	bf00      	nop
 800150c:	f7ff faa2 	bl	8000a54 <LL_FLASH_GetLatency>
 8001510:	4603      	mov	r3, r0
 8001512:	2b01      	cmp	r3, #1
 8001514:	d1fa      	bne.n	800150c <SystemClock_Config+0xc>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001516:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800151a:	f7ff faa9 	bl	8000a70 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0) {
 800151e:	bf00      	nop
 8001520:	f7ff faba 	bl	8000a98 <LL_PWR_IsActiveFlag_VOS>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1fa      	bne.n	8001520 <SystemClock_Config+0x20>
  }
  LL_RCC_HSE_EnableBypass();
 800152a:	f7ff f93d 	bl	80007a8 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 800152e:	f7ff f94b 	bl	80007c8 <LL_RCC_HSE_Enable>

  /* Wait till HSE is ready */
  while (LL_RCC_HSE_IsReady() != 1) {
 8001532:	bf00      	nop
 8001534:	f7ff f958 	bl	80007e8 <LL_RCC_HSE_IsReady>
 8001538:	4603      	mov	r3, r0
 800153a:	2b01      	cmp	r3, #1
 800153c:	d1fa      	bne.n	8001534 <SystemClock_Config+0x34>
  }
  LL_RCC_LSI_Enable();
 800153e:	f7ff f967 	bl	8000810 <LL_RCC_LSI_Enable>

  /* Wait till LSI is ready */
  while (LL_RCC_LSI_IsReady() != 1) {
 8001542:	bf00      	nop
 8001544:	f7ff f976 	bl	8000834 <LL_RCC_LSI_IsReady>
 8001548:	4603      	mov	r3, r0
 800154a:	2b01      	cmp	r3, #1
 800154c:	d1fa      	bne.n	8001544 <SystemClock_Config+0x44>
  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 800154e:	2002      	movs	r0, #2
 8001550:	f7ff f984 	bl	800085c <LL_RCC_SetSysClkSource>

  /* Wait till System clock is ready */
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE) {
 8001554:	bf00      	nop
 8001556:	f7ff f995 	bl	8000884 <LL_RCC_GetSysClkSource>
 800155a:	4603      	mov	r3, r0
 800155c:	2b08      	cmp	r3, #8
 800155e:	d1fa      	bne.n	8001556 <SystemClock_Config+0x56>
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001560:	2000      	movs	r0, #0
 8001562:	f7ff f99d 	bl	80008a0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001566:	2000      	movs	r0, #0
 8001568:	f7ff f9ae 	bl	80008c8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff f9bf 	bl	80008f0 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(25000000);
 8001572:	4804      	ldr	r0, [pc, #16]	@ (8001584 <SystemClock_Config+0x84>)
 8001574:	f001 fdae 	bl	80030d4 <LL_Init1msTick>

  LL_SetSystemCoreClock(25000000);
 8001578:	4802      	ldr	r0, [pc, #8]	@ (8001584 <SystemClock_Config+0x84>)
 800157a:	f001 fdb9 	bl	80030f0 <LL_SetSystemCoreClock>
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	017d7840 	.word	0x017d7840

08001588 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b094      	sub	sp, #80	@ 0x50
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800158e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800159a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]
 80015aa:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80015ac:	f107 0318 	add.w	r3, r7, #24
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	463b      	mov	r3, r7
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
 80015c8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 80015ca:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80015ce:	f7ff f9e5 	bl	800099c <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80015d2:	2001      	movs	r0, #1
 80015d4:	f7ff f9e2 	bl	800099c <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA2   ------> ADC1_IN7
  PA3   ------> ADC1_IN8
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2 | LL_GPIO_PIN_3;
 80015d8:	230c      	movs	r3, #12
 80015da:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80015dc:	2303      	movs	r3, #3
 80015de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	463b      	mov	r3, r7
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ec:	f000 ff57 	bl	800249e <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80015f0:	2300      	movs	r3, #0
 80015f2:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	647b      	str	r3, [r7, #68]	@ 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80015fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001600:	4619      	mov	r1, r3
 8001602:	482c      	ldr	r0, [pc, #176]	@ (80016b4 <MX_ADC1_Init+0x12c>)
 8001604:	f000 fd4c 	bl	80020a0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001608:	2300      	movs	r3, #0
 800160a:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001614:	2300      	movs	r3, #0
 8001616:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001618:	2300      	movs	r3, #0
 800161a:	63bb      	str	r3, [r7, #56]	@ 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 800161c:	2300      	movs	r3, #0
 800161e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001620:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001624:	4619      	mov	r1, r3
 8001626:	4823      	ldr	r0, [pc, #140]	@ (80016b4 <MX_ADC1_Init+0x12c>)
 8001628:	f000 fd60 	bl	80020ec <LL_ADC_REG_Init>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 800162c:	2100      	movs	r1, #0
 800162e:	4821      	ldr	r0, [pc, #132]	@ (80016b4 <MX_ADC1_Init+0x12c>)
 8001630:	f7fe ff88 	bl	8000544 <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800163c:	f107 0318 	add.w	r3, r7, #24
 8001640:	4619      	mov	r1, r3
 8001642:	481d      	ldr	r0, [pc, #116]	@ (80016b8 <MX_ADC1_Init+0x130>)
 8001644:	f000 fcec 	bl	8002020 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1),
 8001648:	2100      	movs	r1, #0
 800164a:	481b      	ldr	r0, [pc, #108]	@ (80016b8 <MX_ADC1_Init+0x130>)
 800164c:	f7fe feeb 	bl	8000426 <LL_ADC_SetCommonPathInternalCh>
                                 LL_ADC_PATH_INTERNAL_NONE);

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8001650:	4818      	ldr	r0, [pc, #96]	@ (80016b4 <MX_ADC1_Init+0x12c>)
 8001652:	f7fe ff8c 	bl	800056e <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8001656:	4817      	ldr	r0, [pc, #92]	@ (80016b4 <MX_ADC1_Init+0x12c>)
 8001658:	f7fe ff9b 	bl	8000592 <LL_ADC_EnableInternalRegulator>
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US *
                      (SystemCoreClock / (100000 * 2))) /
 800165c:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <MX_ADC1_Init+0x134>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	099b      	lsrs	r3, r3, #6
 8001662:	4a17      	ldr	r2, [pc, #92]	@ (80016c0 <MX_ADC1_Init+0x138>)
 8001664:	fba2 2303 	umull	r2, r3, r2, r3
 8001668:	099a      	lsrs	r2, r3, #6
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US *
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	461a      	mov	r2, r3
 8001674:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <MX_ADC1_Init+0x13c>)
 8001676:	fba3 2302 	umull	r2, r3, r3, r2
 800167a:	08db      	lsrs	r3, r3, #3
 800167c:	64fb      	str	r3, [r7, #76]	@ 0x4c
                     10);
  while (wait_loop_index != 0) {
 800167e:	e002      	b.n	8001686 <MX_ADC1_Init+0xfe>
    wait_loop_index--;
 8001680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001682:	3b01      	subs	r3, #1
 8001684:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (wait_loop_index != 0) {
 8001686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f9      	bne.n	8001680 <MX_ADC1_Init+0xf8>
  }

  /** Configure Regular Channel
   */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 800168c:	4a0e      	ldr	r2, [pc, #56]	@ (80016c8 <MX_ADC1_Init+0x140>)
 800168e:	2106      	movs	r1, #6
 8001690:	4808      	ldr	r0, [pc, #32]	@ (80016b4 <MX_ADC1_Init+0x12c>)
 8001692:	f7fe fedb 	bl	800044c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7,
 8001696:	2200      	movs	r2, #0
 8001698:	490b      	ldr	r1, [pc, #44]	@ (80016c8 <MX_ADC1_Init+0x140>)
 800169a:	4806      	ldr	r0, [pc, #24]	@ (80016b4 <MX_ADC1_Init+0x12c>)
 800169c:	f7fe ff02 	bl	80004a4 <LL_ADC_SetChannelSamplingTime>
                                LL_ADC_SAMPLINGTIME_2CYCLES_5);
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SINGLE_ENDED);
 80016a0:	227f      	movs	r2, #127	@ 0x7f
 80016a2:	4909      	ldr	r1, [pc, #36]	@ (80016c8 <MX_ADC1_Init+0x140>)
 80016a4:	4803      	ldr	r0, [pc, #12]	@ (80016b4 <MX_ADC1_Init+0x12c>)
 80016a6:	f7fe ff29 	bl	80004fc <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80016aa:	bf00      	nop
 80016ac:	3750      	adds	r7, #80	@ 0x50
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	50040000 	.word	0x50040000
 80016b8:	50040300 	.word	0x50040300
 80016bc:	20000004 	.word	0x20000004
 80016c0:	053e2d63 	.word	0x053e2d63
 80016c4:	cccccccd 	.word	0xcccccccd
 80016c8:	1d500080 	.word	0x1d500080

080016cc <MX_COMP1_Init>:
/**
 * @brief COMP1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_COMP1_Init(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08e      	sub	sp, #56	@ 0x38
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN COMP1_Init 0 */

  /* USER CODE END COMP1_Init 0 */

  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 80016d2:	f107 0320 	add.w	r3, r7, #32
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]
 80016e2:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0308 	add.w	r3, r7, #8
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
 80016f4:	615a      	str	r2, [r3, #20]

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80016f6:	2001      	movs	r0, #1
 80016f8:	f7ff f950 	bl	800099c <LL_AHB2_GRP1_EnableClock>
  /**COMP1 GPIO Configuration
  PA1   ------> COMP1_INP
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80016fc:	2302      	movs	r3, #2
 80016fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001700:	2303      	movs	r3, #3
 8001702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001704:	2300      	movs	r3, #0
 8001706:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	4619      	mov	r1, r3
 800170e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001712:	f000 fec4 	bl	800249e <LL_GPIO_Init>

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  COMP_InitStruct.PowerMode = LL_COMP_POWERMODE_HIGHSPEED;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
  COMP_InitStruct.InputPlus = LL_COMP_INPUT_PLUS_IO3;
 800171a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800171e:	627b      	str	r3, [r7, #36]	@ 0x24
  COMP_InitStruct.InputMinus = LL_COMP_INPUT_MINUS_1_2VREFINT;
 8001720:	4b16      	ldr	r3, [pc, #88]	@ (800177c <MX_COMP1_Init+0xb0>)
 8001722:	62bb      	str	r3, [r7, #40]	@ 0x28
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_NONE;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  COMP_InitStruct.OutputPolarity = LL_COMP_OUTPUTPOL_NONINVERTED;
 8001728:	2300      	movs	r3, #0
 800172a:	633b      	str	r3, [r7, #48]	@ 0x30
  COMP_InitStruct.OutputBlankingSource = LL_COMP_BLANKINGSRC_NONE;
 800172c:	2300      	movs	r3, #0
 800172e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_COMP_Init(COMP1, &COMP_InitStruct);
 8001730:	f107 0320 	add.w	r3, r7, #32
 8001734:	4619      	mov	r1, r3
 8001736:	4812      	ldr	r0, [pc, #72]	@ (8001780 <MX_COMP1_Init+0xb4>)
 8001738:	f000 fd36 	bl	80021a8 <LL_COMP_Init>

  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles
   */
  __IO uint32_t wait_loop_index = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US *
                     (SystemCoreClock / (1000000 * 2)));
 8001740:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <MX_COMP1_Init+0xb8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a10      	ldr	r2, [pc, #64]	@ (8001788 <MX_COMP1_Init+0xbc>)
 8001746:	fba2 2303 	umull	r2, r3, r2, r3
 800174a:	0cdb      	lsrs	r3, r3, #19
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US *
 800174c:	22c8      	movs	r2, #200	@ 0xc8
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	607b      	str	r3, [r7, #4]
  while (wait_loop_index != 0) {
 8001754:	e002      	b.n	800175c <MX_COMP1_Init+0x90>
    wait_loop_index--;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3b01      	subs	r3, #1
 800175a:	607b      	str	r3, [r7, #4]
  while (wait_loop_index != 0) {
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f9      	bne.n	8001756 <MX_COMP1_Init+0x8a>
  }
  LL_EXTI_DisableEvent_0_31(LL_EXTI_LINE_21);
 8001762:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001766:	f7fe ff51 	bl	800060c <LL_EXTI_DisableEvent_0_31>
  LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_21);
 800176a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800176e:	f7fe ff39 	bl	80005e4 <LL_EXTI_DisableIT_0_31>
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */
}
 8001772:	bf00      	nop
 8001774:	3738      	adds	r7, #56	@ 0x38
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	00c00010 	.word	0x00c00010
 8001780:	40010200 	.word	0x40010200
 8001784:	20000004 	.word	0x20000004
 8001788:	431bde83 	.word	0x431bde83

0800178c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b08e      	sub	sp, #56	@ 0x38
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001792:	f107 031c 	add.w	r3, r7, #28
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
 80017b4:	615a      	str	r2, [r3, #20]

  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 80017b6:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 80017ba:	f7ff f8ad 	bl	8000918 <LL_RCC_SetI2CClockSource>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80017be:	2002      	movs	r0, #2
 80017c0:	f7ff f8ec 	bl	800099c <LL_AHB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6 | LL_GPIO_PIN_7;
 80017c4:	23c0      	movs	r3, #192	@ 0xc0
 80017c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017c8:	2302      	movs	r3, #2
 80017ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80017d0:	2301      	movs	r3, #1
 80017d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80017d8:	2304      	movs	r3, #4
 80017da:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	4619      	mov	r1, r3
 80017e0:	4817      	ldr	r0, [pc, #92]	@ (8001840 <MX_I2C1_Init+0xb4>)
 80017e2:	f000 fe5c 	bl	800249e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80017e6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80017ea:	f7ff f8ef 	bl	80009cc <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
   */
  LL_I2C_EnableAutoEndMode(I2C1);
 80017ee:	4815      	ldr	r0, [pc, #84]	@ (8001844 <MX_I2C1_Init+0xb8>)
 80017f0:	f7fe ff8b 	bl	800070a <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80017f4:	4813      	ldr	r0, [pc, #76]	@ (8001844 <MX_I2C1_Init+0xb8>)
 80017f6:	f7fe ff65 	bl	80006c4 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80017fa:	4812      	ldr	r0, [pc, #72]	@ (8001844 <MX_I2C1_Init+0xb8>)
 80017fc:	f7fe ff3a 	bl	8000674 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001800:	4810      	ldr	r0, [pc, #64]	@ (8001844 <MX_I2C1_Init+0xb8>)
 8001802:	f7fe ff27 	bl	8000654 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x004018D5;
 800180a:	4b0f      	ldr	r3, [pc, #60]	@ (8001848 <MX_I2C1_Init+0xbc>)
 800180c:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800181a:	2300      	movs	r3, #0
 800181c:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800181e:	2300      	movs	r3, #0
 8001820:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	4619      	mov	r1, r3
 8001828:	4806      	ldr	r0, [pc, #24]	@ (8001844 <MX_I2C1_Init+0xb8>)
 800182a:	f000 ff49 	bl	80026c0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	4804      	ldr	r0, [pc, #16]	@ (8001844 <MX_I2C1_Init+0xb8>)
 8001834:	f7fe ff2e 	bl	8000694 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001838:	bf00      	nop
 800183a:	3738      	adds	r7, #56	@ 0x38
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	48000400 	.word	0x48000400
 8001844:	40005400 	.word	0x40005400
 8001848:	004018d5 	.word	0x004018d5

0800184c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b090      	sub	sp, #64	@ 0x40
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001852:	f107 0318 	add.w	r3, r7, #24
 8001856:	2228      	movs	r2, #40	@ 0x28
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f009 f816 	bl	800a88c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	463b      	mov	r3, r7
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]
 800186e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001870:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001874:	f7ff f8c2 	bl	80009fc <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001878:	2001      	movs	r0, #1
 800187a:	f7ff f88f 	bl	800099c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800187e:	2002      	movs	r0, #2
 8001880:	f7ff f88c 	bl	800099c <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA7   ------> SPI1_MOSI
  PB4 (NJTRST)   ------> SPI1_MISO
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5 | LL_GPIO_PIN_7;
 8001884:	23a0      	movs	r3, #160	@ 0xa0
 8001886:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001888:	2302      	movs	r3, #2
 800188a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001898:	2305      	movs	r3, #5
 800189a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	463b      	mov	r3, r7
 800189e:	4619      	mov	r1, r3
 80018a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018a4:	f000 fdfb 	bl	800249e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80018a8:	2310      	movs	r3, #16
 80018aa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018ac:	2302      	movs	r3, #2
 80018ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80018bc:	2305      	movs	r3, #5
 80018be:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c0:	463b      	mov	r3, r7
 80018c2:	4619      	mov	r1, r3
 80018c4:	4815      	ldr	r0, [pc, #84]	@ (800191c <MX_SPI1_Init+0xd0>)
 80018c6:	f000 fdea 	bl	800249e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80018ce:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80018d2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80018d4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80018d8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80018de:	2300      	movs	r3, #0
 80018e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80018e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80018e8:	2318      	movs	r3, #24
 80018ea:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80018ec:	2300      	movs	r3, #0
 80018ee:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 80018f4:	2307      	movs	r3, #7
 80018f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80018f8:	f107 0318 	add.w	r3, r7, #24
 80018fc:	4619      	mov	r1, r3
 80018fe:	4808      	ldr	r0, [pc, #32]	@ (8001920 <MX_SPI1_Init+0xd4>)
 8001900:	f000 ff50 	bl	80027a4 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001904:	2100      	movs	r1, #0
 8001906:	4806      	ldr	r0, [pc, #24]	@ (8001920 <MX_SPI1_Init+0xd4>)
 8001908:	f7ff f8ea 	bl	8000ae0 <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 800190c:	4804      	ldr	r0, [pc, #16]	@ (8001920 <MX_SPI1_Init+0xd4>)
 800190e:	f7ff f8fa 	bl	8000b06 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8001912:	bf00      	nop
 8001914:	3740      	adds	r7, #64	@ 0x40
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	48000400 	.word	0x48000400
 8001920:	40013000 	.word	0x40013000

08001924 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b09e      	sub	sp, #120	@ 0x78
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800192a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800193a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800193e:	2220      	movs	r2, #32
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f008 ffa2 	bl	800a88c <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	2228      	movs	r2, #40	@ 0x28
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f008 ff9b 	bl	800a88c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
 8001964:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001966:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800196a:	f7ff f847 	bl	80009fc <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001974:	2300      	movs	r3, #0
 8001976:	66bb      	str	r3, [r7, #104]	@ 0x68
  TIM_InitStruct.Autoreload = 100;
 8001978:	2364      	movs	r3, #100	@ 0x64
 800197a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800197c:	2300      	movs	r3, #0
 800197e:	673b      	str	r3, [r7, #112]	@ 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	677b      	str	r3, [r7, #116]	@ 0x74
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001984:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001988:	4619      	mov	r1, r3
 800198a:	4848      	ldr	r0, [pc, #288]	@ (8001aac <MX_TIM1_Init+0x188>)
 800198c:	f000 fff2 	bl	8002974 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8001990:	4846      	ldr	r0, [pc, #280]	@ (8001aac <MX_TIM1_Init+0x188>)
 8001992:	f7ff f8e8 	bl	8000b66 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001996:	2100      	movs	r1, #0
 8001998:	4844      	ldr	r0, [pc, #272]	@ (8001aac <MX_TIM1_Init+0x188>)
 800199a:	f7ff f9c5 	bl	8000d28 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 800199e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019a2:	4842      	ldr	r0, [pc, #264]	@ (8001aac <MX_TIM1_Init+0x188>)
 80019a4:	f7ff f952 	bl	8000c4c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80019a8:	2360      	movs	r3, #96	@ 0x60
 80019aa:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.CompareValue = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	653b      	str	r3, [r7, #80]	@ 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80019b8:	2300      	movs	r3, #0
 80019ba:	657b      	str	r3, [r7, #84]	@ 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80019bc:	2300      	movs	r3, #0
 80019be:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	663b      	str	r3, [r7, #96]	@ 0x60
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80019c8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80019cc:	461a      	mov	r2, r3
 80019ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019d2:	4836      	ldr	r0, [pc, #216]	@ (8001aac <MX_TIM1_Init+0x188>)
 80019d4:	f001 f82c 	bl	8002a30 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 80019d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019dc:	4833      	ldr	r0, [pc, #204]	@ (8001aac <MX_TIM1_Init+0x188>)
 80019de:	f7ff f8e3 	bl	8000ba8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOCRefClearInputSource(TIM1, LL_TIM_OCREF_CLR_INT_NC);
 80019e2:	2100      	movs	r1, #0
 80019e4:	4831      	ldr	r0, [pc, #196]	@ (8001aac <MX_TIM1_Init+0x188>)
 80019e6:	f7ff fa13 	bl	8000e10 <LL_TIM_SetOCRefClearInputSource>
  LL_TIM_DisableExternalClock(TIM1);
 80019ea:	4830      	ldr	r0, [pc, #192]	@ (8001aac <MX_TIM1_Init+0x188>)
 80019ec:	f7ff f98c 	bl	8000d08 <LL_TIM_DisableExternalClock>
  LL_TIM_ConfigETR(TIM1, LL_TIM_ETR_POLARITY_NONINVERTED,
 80019f0:	2300      	movs	r3, #0
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	482d      	ldr	r0, [pc, #180]	@ (8001aac <MX_TIM1_Init+0x188>)
 80019f8:	f7ff f9e1 	bl	8000dbe <LL_TIM_ConfigETR>
                   LL_TIM_ETR_PRESCALER_DIV1, LL_TIM_ETR_FILTER_FDIV1);
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 80019fc:	2100      	movs	r1, #0
 80019fe:	482b      	ldr	r0, [pc, #172]	@ (8001aac <MX_TIM1_Init+0x188>)
 8001a00:	f7ff f9a7 	bl	8000d52 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8001a04:	2100      	movs	r1, #0
 8001a06:	4829      	ldr	r0, [pc, #164]	@ (8001aac <MX_TIM1_Init+0x188>)
 8001a08:	f7ff f9b6 	bl	8000d78 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001a0c:	4827      	ldr	r0, [pc, #156]	@ (8001aac <MX_TIM1_Init+0x188>)
 8001a0e:	f7ff f9c6 	bl	8000d9e <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001a28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	633b      	str	r3, [r7, #48]	@ 0x30
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8001a36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	643b      	str	r3, [r7, #64]	@ 0x40
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4818      	ldr	r0, [pc, #96]	@ (8001aac <MX_TIM1_Init+0x188>)
 8001a4c:	f001 f850 	bl	8002af0 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001a50:	2002      	movs	r0, #2
 8001a52:	f7fe ffa3 	bl	800099c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001a56:	2001      	movs	r0, #1
 8001a58:	f7fe ffa0 	bl	800099c <LL_AHB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PB1   ------> TIM1_CH3N
  PA10   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a60:	2302      	movs	r3, #2
 8001a62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001a70:	2301      	movs	r3, #1
 8001a72:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	4619      	mov	r1, r3
 8001a78:	480d      	ldr	r0, [pc, #52]	@ (8001ab0 <MX_TIM1_Init+0x18c>)
 8001a7a:	f000 fd10 	bl	800249e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001a7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a84:	2302      	movs	r3, #2
 8001a86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aa0:	f000 fcfd 	bl	800249e <LL_GPIO_Init>
}
 8001aa4:	bf00      	nop
 8001aa6:	3778      	adds	r7, #120	@ 0x78
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40012c00 	.word	0x40012c00
 8001ab0:	48000400 	.word	0x48000400

08001ab4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aba:	463b      	mov	r3, r7
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
 8001ac8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001aca:	2004      	movs	r0, #4
 8001acc:	f7fe ff66 	bl	800099c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7fe ff63 	bl	800099c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	f7fe ff60 	bl	800099c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8001adc:	2110      	movs	r1, #16
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae2:	f7ff f9b6 	bl	8000e52 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	481e      	ldr	r0, [pc, #120]	@ (8001b64 <MX_GPIO_Init+0xb0>)
 8001aea:	f7ff f9b2 	bl	8000e52 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001aee:	2310      	movs	r3, #16
 8001af0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001af2:	2301      	movs	r3, #1
 8001af4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	463b      	mov	r3, r7
 8001b04:	4619      	mov	r1, r3
 8001b06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b0a:	f000 fcc8 	bl	800249e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b12:	2301      	movs	r3, #1
 8001b14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b22:	463b      	mov	r3, r7
 8001b24:	4619      	mov	r1, r3
 8001b26:	480f      	ldr	r0, [pc, #60]	@ (8001b64 <MX_GPIO_Init+0xb0>)
 8001b28:	f000 fcb9 	bl	800249e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001b2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b30:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b42:	f000 fcac 	bl	800249e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001b46:	2308      	movs	r3, #8
 8001b48:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b52:	463b      	mov	r3, r7
 8001b54:	4619      	mov	r1, r3
 8001b56:	4803      	ldr	r0, [pc, #12]	@ (8001b64 <MX_GPIO_Init+0xb0>)
 8001b58:	f000 fca1 	bl	800249e <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b5c:	bf00      	nop
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	48000400 	.word	0x48000400

08001b68 <MX_LPTIM1_Init>:
/**
 * @brief LPTIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPTIM1_Init(void) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM1_Init 0 */

  /* USER CODE END LPTIM1_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE_LSI);
 8001b6c:	481c      	ldr	r0, [pc, #112]	@ (8001be0 <MX_LPTIM1_Init+0x78>)
 8001b6e:	f7fe fefb 	bl	8000968 <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_LPTIM1);
 8001b72:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8001b76:	f7fe ff29 	bl	80009cc <LL_APB1_GRP1_EnableClock>

  /* LPTIM1 interrupt Init */
  NVIC_SetPriority(LPTIM1_IRQn,
 8001b7a:	f7fe fbcb 	bl	8000314 <__NVIC_GetPriorityGrouping>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2200      	movs	r2, #0
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fc1b 	bl	80003c0 <NVIC_EncodePriority>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	2041      	movs	r0, #65	@ 0x41
 8001b90:	f7fe fbec 	bl	800036c <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
  NVIC_EnableIRQ(LPTIM1_IRQn);
 8001b94:	2041      	movs	r0, #65	@ 0x41
 8001b96:	f7fe fbcb 	bl	8000330 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM1, LL_LPTIM_CLK_SOURCE_INTERNAL);
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4811      	ldr	r0, [pc, #68]	@ (8001be4 <MX_LPTIM1_Init+0x7c>)
 8001b9e:	f7ff fa1e 	bl	8000fde <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM1, LL_LPTIM_PRESCALER_DIV128);
 8001ba2:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8001ba6:	480f      	ldr	r0, [pc, #60]	@ (8001be4 <MX_LPTIM1_Init+0x7c>)
 8001ba8:	f7ff f9d0 	bl	8000f4c <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM1, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 8001bac:	2100      	movs	r1, #0
 8001bae:	480d      	ldr	r0, [pc, #52]	@ (8001be4 <MX_LPTIM1_Init+0x7c>)
 8001bb0:	f7ff f9b9 	bl	8000f26 <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM1, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	480b      	ldr	r0, [pc, #44]	@ (8001be4 <MX_LPTIM1_Init+0x7c>)
 8001bb8:	f7ff f97c 	bl	8000eb4 <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM1, LL_LPTIM_COUNTER_MODE_INTERNAL);
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4809      	ldr	r0, [pc, #36]	@ (8001be4 <MX_LPTIM1_Init+0x7c>)
 8001bc0:	f7ff f99e 	bl	8000f00 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM1);
 8001bc4:	4807      	ldr	r0, [pc, #28]	@ (8001be4 <MX_LPTIM1_Init+0x7c>)
 8001bc6:	f7ff f9fa 	bl	8000fbe <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM1, LL_LPTIM_INPUT1_SRC_GPIO);
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <MX_LPTIM1_Init+0x7c>)
 8001bce:	f7ff f9d0 	bl	8000f72 <LL_LPTIM_SetInput1Src>
  LL_LPTIM_SetInput2Src(LPTIM1, LL_LPTIM_INPUT2_SRC_GPIO);
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4803      	ldr	r0, [pc, #12]	@ (8001be4 <MX_LPTIM1_Init+0x7c>)
 8001bd6:	f7ff f9df 	bl	8000f98 <LL_LPTIM_SetInput2Src>
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	000c0004 	.word	0x000c0004
 8001be4:	40007c00 	.word	0x40007c00

08001be8 <LPTIM1_IRQHandler>:

void LPTIM1_IRQHandler(void) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  flags = flags | LOG_FLAG; // set log flag to signal to main loop to do a log
 8001bec:	4b0c      	ldr	r3, [pc, #48]	@ (8001c20 <LPTIM1_IRQHandler+0x38>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c20 <LPTIM1_IRQHandler+0x38>)
 8001bf6:	6013      	str	r3, [r2, #0]

  LL_TIM_EnableCounter(TIM1);
 8001bf8:	480a      	ldr	r0, [pc, #40]	@ (8001c24 <LPTIM1_IRQHandler+0x3c>)
 8001bfa:	f7fe ff94 	bl	8000b26 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH3N);
 8001bfe:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001c02:	4808      	ldr	r0, [pc, #32]	@ (8001c24 <LPTIM1_IRQHandler+0x3c>)
 8001c04:	f7fe ffbf 	bl	8000b86 <LL_TIM_CC_EnableChannel>
  LL_TIM_OC_SetCompareCH3(TIM1, 50); // change this
 8001c08:	2132      	movs	r1, #50	@ 0x32
 8001c0a:	4806      	ldr	r0, [pc, #24]	@ (8001c24 <LPTIM1_IRQHandler+0x3c>)
 8001c0c:	f7ff f86e 	bl	8000cec <LL_TIM_OC_SetCompareCH3>
  LL_TIM_EnableAllOutputs(TIM1);
 8001c10:	4804      	ldr	r0, [pc, #16]	@ (8001c24 <LPTIM1_IRQHandler+0x3c>)
 8001c12:	f7ff f8ed 	bl	8000df0 <LL_TIM_EnableAllOutputs>

  LL_LPTIM_ClearFLAG_ARRM(LPTIM1);
 8001c16:	4804      	ldr	r0, [pc, #16]	@ (8001c28 <LPTIM1_IRQHandler+0x40>)
 8001c18:	f7ff f9f4 	bl	8001004 <LL_LPTIM_ClearFlag_ARRM>
}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000080 	.word	0x20000080
 8001c24:	40012c00 	.word	0x40012c00
 8001c28:	40007c00 	.word	0x40007c00

08001c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <NMI_Handler+0x4>

08001c34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <HardFault_Handler+0x4>

08001c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <MemManage_Handler+0x4>

08001c44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <BusFault_Handler+0x4>

08001c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <UsageFault_Handler+0x4>

08001c54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return 1;
 8001c90:	2301      	movs	r3, #1
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <_kill>:

int _kill(int pid, int sig)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ca6:	f008 fe7f 	bl	800a9a8 <__errno>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2216      	movs	r2, #22
 8001cae:	601a      	str	r2, [r3, #0]
  return -1;
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <_exit>:

void _exit (int status)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ffe7 	bl	8001c9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cce:	bf00      	nop
 8001cd0:	e7fd      	b.n	8001cce <_exit+0x12>

08001cd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	e00a      	b.n	8001cfa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ce4:	f3af 8000 	nop.w
 8001ce8:	4601      	mov	r1, r0
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	60ba      	str	r2, [r7, #8]
 8001cf0:	b2ca      	uxtb	r2, r1
 8001cf2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	dbf0      	blt.n	8001ce4 <_read+0x12>
  }

  return len;
 8001d02:	687b      	ldr	r3, [r7, #4]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	e009      	b.n	8001d32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	60ba      	str	r2, [r7, #8]
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	dbf1      	blt.n	8001d1e <_write+0x12>
  }
  return len;
 8001d3a:	687b      	ldr	r3, [r7, #4]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <_close>:

int _close(int file)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d6c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <_isatty>:

int _isatty(int file)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d84:	2301      	movs	r3, #1
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b085      	sub	sp, #20
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db4:	4a14      	ldr	r2, [pc, #80]	@ (8001e08 <_sbrk+0x5c>)
 8001db6:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <_sbrk+0x60>)
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc0:	4b13      	ldr	r3, [pc, #76]	@ (8001e10 <_sbrk+0x64>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <_sbrk+0x64>)
 8001dca:	4a12      	ldr	r2, [pc, #72]	@ (8001e14 <_sbrk+0x68>)
 8001dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dce:	4b10      	ldr	r3, [pc, #64]	@ (8001e10 <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d207      	bcs.n	8001dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ddc:	f008 fde4 	bl	800a9a8 <__errno>
 8001de0:	4603      	mov	r3, r0
 8001de2:	220c      	movs	r2, #12
 8001de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dea:	e009      	b.n	8001e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dec:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <_sbrk+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001df2:	4b07      	ldr	r3, [pc, #28]	@ (8001e10 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	4a05      	ldr	r2, [pc, #20]	@ (8001e10 <_sbrk+0x64>)
 8001dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	2000a000 	.word	0x2000a000
 8001e0c:	00000400 	.word	0x00000400
 8001e10:	20000314 	.word	0x20000314
 8001e14:	20000468 	.word	0x20000468

08001e18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <SystemInit+0x20>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e22:	4a05      	ldr	r2, [pc, #20]	@ (8001e38 <SystemInit+0x20>)
 8001e24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e40:	f7ff ffea 	bl	8001e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e44:	480c      	ldr	r0, [pc, #48]	@ (8001e78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e46:	490d      	ldr	r1, [pc, #52]	@ (8001e7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e48:	4a0d      	ldr	r2, [pc, #52]	@ (8001e80 <LoopForever+0xe>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e4c:	e002      	b.n	8001e54 <LoopCopyDataInit>

08001e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e52:	3304      	adds	r3, #4

08001e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e58:	d3f9      	bcc.n	8001e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e88 <LoopForever+0x16>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e60:	e001      	b.n	8001e66 <LoopFillZerobss>

08001e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e64:	3204      	adds	r2, #4

08001e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e68:	d3fb      	bcc.n	8001e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e6a:	f008 fda3 	bl	800a9b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e6e:	f7ff f8fd 	bl	800106c <main>

08001e72 <LoopForever>:

LoopForever:
    b LoopForever
 8001e72:	e7fe      	b.n	8001e72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e74:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e7c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001e80:	0800d2bc 	.word	0x0800d2bc
  ldr r2, =_sbss
 8001e84:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001e88:	20000464 	.word	0x20000464

08001e8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e8c:	e7fe      	b.n	8001e8c <ADC1_2_IRQHandler>

08001e8e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d101      	bne.n	8001ecc <LL_SPI_IsActiveFlag_TXE+0x18>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	330c      	adds	r3, #12
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	b2db      	uxtb	r3, r3
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b085      	sub	sp, #20
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	330c      	adds	r3, #12
 8001f06:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	78fa      	ldrb	r2, [r7, #3]
 8001f0c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <spi_read>:
#include "stm32_helper.h"
#include <stdlib.h>
#include <string.h>

void spi_read(SPI_TypeDef *spix, uint8_t *const buf, uint32_t num_bytes) {
 8001f1a:	b590      	push	{r4, r7, lr}
 8001f1c:	b087      	sub	sp, #28
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < num_bytes; i++) {
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	e00b      	b.n	8001f44 <spi_read+0x2a>
    buf[i] = SPI_TxRx(spix, 0x00);
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	18d4      	adds	r4, r2, r3
 8001f32:	2100      	movs	r1, #0
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 f82b 	bl	8001f90 <SPI_TxRx>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	7023      	strb	r3, [r4, #0]
  for (int i = 0; i < num_bytes; i++) {
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	3301      	adds	r3, #1
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d8ef      	bhi.n	8001f2c <spi_read+0x12>
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	371c      	adds	r7, #28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd90      	pop	{r4, r7, pc}

08001f56 <spi_write>:

void spi_write(SPI_TypeDef *spix, const uint8_t *const buf,
               uint32_t num_bytes) {
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < num_bytes; i++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e00a      	b.n	8001f7e <spi_write+0x28>
    SPI_TxRx(spix, buf[i]);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 f80c 	bl	8001f90 <SPI_TxRx>
  for (int i = 0; i < num_bytes; i++)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d8f0      	bhi.n	8001f68 <spi_write+0x12>
}
 8001f86:	bf00      	nop
 8001f88:	bf00      	nop
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <SPI_TxRx>:

// Lifted and modified from https://github.com/eziya/STM32_LL_EXAMPLES
// is blocking
uint8_t SPI_TxRx(SPI_TypeDef *spix, uint8_t data) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	70fb      	strb	r3, [r7, #3]
  // transmit
  LL_SPI_TransmitData8(spix, data);
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ffa8 	bl	8001ef6 <LL_SPI_TransmitData8>
  while (!LL_SPI_IsActiveFlag_TXE(spix))
 8001fa6:	bf00      	nop
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ff83 	bl	8001eb4 <LL_SPI_IsActiveFlag_TXE>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f9      	beq.n	8001fa8 <SPI_TxRx+0x18>
    ;

  // receive
  while (!LL_SPI_IsActiveFlag_RXNE(spix))
 8001fb4:	bf00      	nop
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ff69 	bl	8001e8e <LL_SPI_IsActiveFlag_RXNE>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f9      	beq.n	8001fb6 <SPI_TxRx+0x26>
    ;
  return LL_SPI_ReceiveData8(spix);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ff89 	bl	8001eda <LL_SPI_ReceiveData8>
 8001fc8:	4603      	mov	r3, r0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <LL_ADC_REG_SetSequencerLength>:
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	f023 020f 	bic.w	r2, r3, #15
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <LL_ADC_IsEnabled+0x18>
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <LL_ADC_IsEnabled+0x1a>
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, const LL_ADC_CommonInitTypeDef *pADC_CommonInitStruct)
{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800202a:	2300      	movs	r3, #0
 800202c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800202e:	4819      	ldr	r0, [pc, #100]	@ (8002094 <LL_ADC_CommonInit+0x74>)
 8002030:	f7ff ffe2 	bl	8001ff8 <LL_ADC_IsEnabled>
 8002034:	4604      	mov	r4, r0
 8002036:	4818      	ldr	r0, [pc, #96]	@ (8002098 <LL_ADC_CommonInit+0x78>)
 8002038:	f7ff ffde 	bl	8001ff8 <LL_ADC_IsEnabled>
 800203c:	4603      	mov	r3, r0
 800203e:	4323      	orrs	r3, r4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d120      	bne.n	8002086 <LL_ADC_CommonInit+0x66>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (pADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d012      	beq.n	8002072 <LL_ADC_CommonInit+0x52>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	4b12      	ldr	r3, [pc, #72]	@ (800209c <LL_ADC_CommonInit+0x7c>)
 8002052:	4013      	ands	r3, r2
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	6811      	ldr	r1, [r2, #0]
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	6852      	ldr	r2, [r2, #4]
 800205c:	4311      	orrs	r1, r2
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	6892      	ldr	r2, [r2, #8]
 8002062:	4311      	orrs	r1, r2
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	68d2      	ldr	r2, [r2, #12]
 8002068:	430a      	orrs	r2, r1
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	e00b      	b.n	800208a <LL_ADC_CommonInit+0x6a>
                 | pADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	4b09      	ldr	r3, [pc, #36]	@ (800209c <LL_ADC_CommonInit+0x7c>)
 8002078:	4013      	ands	r3, r2
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	6812      	ldr	r2, [r2, #0]
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	e001      	b.n	800208a <LL_ADC_CommonInit+0x6a>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800208a:	7bfb      	ldrb	r3, [r7, #15]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	bd90      	pop	{r4, r7, pc}
 8002094:	50040000 	.word	0x50040000
 8002098:	50040100 	.word	0x50040100
 800209c:	ffc030e0 	.word	0xffc030e0

080020a0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, const LL_ADC_InitTypeDef *pADC_InitStruct)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80020aa:	2300      	movs	r3, #0
 80020ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(pADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(pADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ffa2 	bl	8001ff8 <LL_ADC_IsEnabled>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d111      	bne.n	80020de <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020c2:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	6811      	ldr	r1, [r2, #0]
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	6852      	ldr	r2, [r2, #4]
 80020ce:	4311      	orrs	r1, r2
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	6892      	ldr	r2, [r2, #8]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	60da      	str	r2, [r3, #12]
 80020dc:	e001      	b.n	80020e2 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, const LL_ADC_REG_InitTypeDef *pADC_RegInitStruct)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80020f6:	2300      	movs	r3, #0
 80020f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(pADC_RegInitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(pADC_RegInitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff ff7c 	bl	8001ff8 <LL_ADC_IsEnabled>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d132      	bne.n	800216c <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (pADC_RegInitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d015      	beq.n	800213a <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	4b1a      	ldr	r3, [pc, #104]	@ (800217c <LL_ADC_REG_Init+0x90>)
 8002114:	4013      	ands	r3, r2
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	6811      	ldr	r1, [r2, #0]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	6892      	ldr	r2, [r2, #8]
 800211e:	4311      	orrs	r1, r2
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	68d2      	ldr	r2, [r2, #12]
 8002124:	4311      	orrs	r1, r2
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	6912      	ldr	r2, [r2, #16]
 800212a:	4311      	orrs	r1, r2
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	6952      	ldr	r2, [r2, #20]
 8002130:	430a      	orrs	r2, r1
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	60da      	str	r2, [r3, #12]
 8002138:	e011      	b.n	800215e <LL_ADC_REG_Init+0x72>
                 | pADC_RegInitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	4b0f      	ldr	r3, [pc, #60]	@ (800217c <LL_ADC_REG_Init+0x90>)
 8002140:	4013      	ands	r3, r2
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	6811      	ldr	r1, [r2, #0]
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	68d2      	ldr	r2, [r2, #12]
 800214a:	4311      	orrs	r1, r2
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	6912      	ldr	r2, [r2, #16]
 8002150:	4311      	orrs	r1, r2
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	6952      	ldr	r2, [r2, #20]
 8002156:	430a      	orrs	r2, r1
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	60da      	str	r2, [r3, #12]
                 | pADC_RegInitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, pADC_RegInitStruct->SequencerLength);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	4619      	mov	r1, r3
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ff34 	bl	8001fd2 <LL_ADC_REG_SetSequencerLength>
 800216a:	e001      	b.n	8002170 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002170:	7bfb      	ldrb	r3, [r7, #15]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	fff0c03c 	.word	0xfff0c03c

08002180 <LL_COMP_IsLocked>:
  * @rmtoll CSR      LOCK           LL_COMP_IsLocked
  * @param  COMPx Comparator instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_COMP_IsLocked(const COMP_TypeDef *COMPx)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(COMPx->CSR, COMP_CSR_LOCK) == (COMP_CSR_LOCK)) ? 1UL : 0UL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002190:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002194:	d101      	bne.n	800219a <LL_COMP_IsLocked+0x1a>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <LL_COMP_IsLocked+0x1c>
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_COMP_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: COMP registers are initialized
  *          - ERROR: COMP registers are not initialized
  */
ErrorStatus LL_COMP_Init(COMP_TypeDef *COMPx, const LL_COMP_InitTypeDef *COMP_InitStruct)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80021b2:	2300      	movs	r3, #0
 80021b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_COMP_OUTPUT_POLARITY(COMP_InitStruct->OutputPolarity));
  assert_param(IS_LL_COMP_OUTPUT_BLANKING_SOURCE(COMPx, COMP_InitStruct->OutputBlankingSource));

  /* Note: Hardware constraint (refer to description of this function)        */
  /*       COMP instance must not be locked.                                  */
  if (LL_COMP_IsLocked(COMPx) == 0UL)
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff ffe2 	bl	8002180 <LL_COMP_IsLocked>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d118      	bne.n	80021f4 <LL_COMP_Init+0x4c>
    /*  - InputMinus                                                          */
    /*  - InputHysteresis                                                     */
    /*  - OutputPolarity                                                      */
    /*  - OutputBlankingSource                                                */
#if defined(COMP_CSR_INMESEL_1)
    MODIFY_REG(COMPx->CSR,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002204 <LL_COMP_Init+0x5c>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	6811      	ldr	r1, [r2, #0]
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	6852      	ldr	r2, [r2, #4]
 80021d2:	4311      	orrs	r1, r2
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	6892      	ldr	r2, [r2, #8]
 80021d8:	4311      	orrs	r1, r2
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	68d2      	ldr	r2, [r2, #12]
 80021de:	4311      	orrs	r1, r2
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	6912      	ldr	r2, [r2, #16]
 80021e4:	4311      	orrs	r1, r2
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	6952      	ldr	r2, [r2, #20]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e001      	b.n	80021f8 <LL_COMP_Init+0x50>

  }
  else
  {
    /* Initialization error: COMP instance is locked.                         */
    status = ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	f9207e03 	.word	0xf9207e03

08002208 <LL_GPIO_SetPinMode>:
{
 8002208:	b480      	push	{r7}
 800220a:	b08b      	sub	sp, #44	@ 0x2c
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800222e:	2320      	movs	r3, #32
 8002230:	e003      	b.n	800223a <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	fab3 f383 	clz	r3, r3
 8002238:	b2db      	uxtb	r3, r3
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2103      	movs	r1, #3
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	401a      	ands	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	61fb      	str	r3, [r7, #28]
  return result;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800225c:	2320      	movs	r3, #32
 800225e:	e003      	b.n	8002268 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	fa01 f303 	lsl.w	r3, r1, r3
 8002270:	431a      	orrs	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	601a      	str	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	372c      	adds	r7, #44	@ 0x2c
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <LL_GPIO_SetPinOutputType>:
{
 8002282:	b480      	push	{r7}
 8002284:	b085      	sub	sp, #20
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	43db      	mvns	r3, r3
 8002296:	401a      	ands	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	431a      	orrs	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	605a      	str	r2, [r3, #4]
}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <LL_GPIO_SetPinSpeed>:
{
 80022b2:	b480      	push	{r7}
 80022b4:	b08b      	sub	sp, #44	@ 0x2c
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	613b      	str	r3, [r7, #16]
  return result;
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80022d8:	2320      	movs	r3, #32
 80022da:	e003      	b.n	80022e4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2103      	movs	r1, #3
 80022e8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	401a      	ands	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	61fb      	str	r3, [r7, #28]
  return result;
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002306:	2320      	movs	r3, #32
 8002308:	e003      	b.n	8002312 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	431a      	orrs	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	609a      	str	r2, [r3, #8]
}
 8002320:	bf00      	nop
 8002322:	372c      	adds	r7, #44	@ 0x2c
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_GPIO_SetPinPull>:
{
 800232c:	b480      	push	{r7}
 800232e:	b08b      	sub	sp, #44	@ 0x2c
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	613b      	str	r3, [r7, #16]
  return result;
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002352:	2320      	movs	r3, #32
 8002354:	e003      	b.n	800235e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	b2db      	uxtb	r3, r3
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	2103      	movs	r1, #3
 8002362:	fa01 f303 	lsl.w	r3, r1, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	401a      	ands	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	fa93 f3a3 	rbit	r3, r3
 8002374:	61fb      	str	r3, [r7, #28]
  return result;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800237a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002380:	2320      	movs	r3, #32
 8002382:	e003      	b.n	800238c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	fa01 f303 	lsl.w	r3, r1, r3
 8002394:	431a      	orrs	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	60da      	str	r2, [r3, #12]
}
 800239a:	bf00      	nop
 800239c:	372c      	adds	r7, #44	@ 0x2c
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <LL_GPIO_SetAFPin_0_7>:
{
 80023a6:	b480      	push	{r7}
 80023a8:	b08b      	sub	sp, #44	@ 0x2c
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a1a      	ldr	r2, [r3, #32]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	613b      	str	r3, [r7, #16]
  return result;
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80023cc:	2320      	movs	r3, #32
 80023ce:	e003      	b.n	80023d8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	210f      	movs	r1, #15
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	401a      	ands	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	61fb      	str	r3, [r7, #28]
  return result;
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80023f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80023fa:	2320      	movs	r3, #32
 80023fc:	e003      	b.n	8002406 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	431a      	orrs	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	621a      	str	r2, [r3, #32]
}
 8002414:	bf00      	nop
 8002416:	372c      	adds	r7, #44	@ 0x2c
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_GPIO_SetAFPin_8_15>:
{
 8002420:	b480      	push	{r7}
 8002422:	b08b      	sub	sp, #44	@ 0x2c
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	0a1b      	lsrs	r3, r3, #8
 8002434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	613b      	str	r3, [r7, #16]
  return result;
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002448:	2320      	movs	r3, #32
 800244a:	e003      	b.n	8002454 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	fab3 f383 	clz	r3, r3
 8002452:	b2db      	uxtb	r3, r3
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	210f      	movs	r1, #15
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	401a      	ands	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	0a1b      	lsrs	r3, r3, #8
 8002464:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	61fb      	str	r3, [r7, #28]
  return result;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002478:	2320      	movs	r3, #32
 800247a:	e003      	b.n	8002484 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800247c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	fa01 f303 	lsl.w	r3, r1, r3
 800248c:	431a      	orrs	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002492:	bf00      	nop
 8002494:	372c      	adds	r7, #44	@ 0x2c
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b088      	sub	sp, #32
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	60fb      	str	r3, [r7, #12]
  return result;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <LL_GPIO_Init+0x26>
    return 32U;
 80024c0:	2320      	movs	r3, #32
 80024c2:	e003      	b.n	80024cc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fab3 f383 	clz	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80024ce:	e048      	b.n	8002562 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2101      	movs	r1, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d03a      	beq.n	800255c <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d003      	beq.n	80024f6 <LL_GPIO_Init+0x58>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d10e      	bne.n	8002514 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	461a      	mov	r2, r3
 80024fc:	69b9      	ldr	r1, [r7, #24]
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff fed7 	bl	80022b2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	6819      	ldr	r1, [r3, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	461a      	mov	r2, r3
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff feb7 	bl	8002282 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	461a      	mov	r2, r3
 800251a:	69b9      	ldr	r1, [r7, #24]
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ff05 	bl	800232c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d111      	bne.n	800254e <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	2bff      	cmp	r3, #255	@ 0xff
 800252e:	d807      	bhi.n	8002540 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	461a      	mov	r2, r3
 8002536:	69b9      	ldr	r1, [r7, #24]
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ff34 	bl	80023a6 <LL_GPIO_SetAFPin_0_7>
 800253e:	e006      	b.n	800254e <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	461a      	mov	r2, r3
 8002546:	69b9      	ldr	r1, [r7, #24]
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff69 	bl	8002420 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	461a      	mov	r2, r3
 8002554:	69b9      	ldr	r1, [r7, #24]
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff fe56 	bl	8002208 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	3301      	adds	r3, #1
 8002560:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1af      	bne.n	80024d0 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3720      	adds	r7, #32
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <LL_I2C_Enable>:
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f043 0201 	orr.w	r2, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	601a      	str	r2, [r3, #0]
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <LL_I2C_Disable>:
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 0201 	bic.w	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	601a      	str	r2, [r3, #0]
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <LL_I2C_ConfigFilters>:
{
 80025ba:	b480      	push	{r7}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	0219      	lsls	r1, r3, #8
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	430b      	orrs	r3, r1
 80025d6:	431a      	orrs	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	601a      	str	r2, [r3, #0]
}
 80025dc:	bf00      	nop
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <LL_I2C_SetOwnAddress1>:
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025fc:	f023 0307 	bic.w	r3, r3, #7
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	430a      	orrs	r2, r1
 8002606:	431a      	orrs	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	609a      	str	r2, [r3, #8]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <LL_I2C_EnableOwnAddress1>:
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	609a      	str	r2, [r3, #8]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <LL_I2C_DisableOwnAddress1>:
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	609a      	str	r2, [r3, #8]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_I2C_SetTiming>:
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	611a      	str	r2, [r3, #16]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_I2C_SetMode>:
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	601a      	str	r2, [r3, #0]
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <LL_I2C_AcknowledgeNextData>:
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	605a      	str	r2, [r3, #4]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff ff65 	bl	800259a <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	6899      	ldr	r1, [r3, #8]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	461a      	mov	r2, r3
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff ff6d 	bl	80025ba <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4619      	mov	r1, r3
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ffb6 	bl	8002658 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ff44 	bl	800257a <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff ffa0 	bl	8002638 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	6919      	ldr	r1, [r3, #16]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	461a      	mov	r2, r3
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff ff70 	bl	80025e8 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ff81 	bl	8002618 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4619      	mov	r1, r3
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff ffa9 	bl	8002674 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	4619      	mov	r1, r3
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff ffb6 	bl	800269a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <LL_SPI_IsEnabled>:
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002748:	2b40      	cmp	r3, #64	@ 0x40
 800274a:	d101      	bne.n	8002750 <LL_SPI_IsEnabled+0x18>
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <LL_SPI_IsEnabled+0x1a>
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <LL_SPI_SetRxFIFOThreshold>:
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	605a      	str	r2, [r3, #4]
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <LL_SPI_SetCRCPolynomial>:
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	b29b      	uxth	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	611a      	str	r2, [r3, #16]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff ffc0 	bl	8002738 <LL_SPI_IsEnabled>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d145      	bne.n	800284a <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027c6:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	6811      	ldr	r1, [r2, #0]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	6852      	ldr	r2, [r2, #4]
 80027d2:	4311      	orrs	r1, r2
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	68d2      	ldr	r2, [r2, #12]
 80027d8:	4311      	orrs	r1, r2
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	6912      	ldr	r2, [r2, #16]
 80027de:	4311      	orrs	r1, r2
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	6952      	ldr	r2, [r2, #20]
 80027e4:	4311      	orrs	r1, r2
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	6992      	ldr	r2, [r2, #24]
 80027ea:	4311      	orrs	r1, r2
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	69d2      	ldr	r2, [r2, #28]
 80027f0:	4311      	orrs	r1, r2
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	6a12      	ldr	r2, [r2, #32]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002806:	f023 0304 	bic.w	r3, r3, #4
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	6891      	ldr	r1, [r2, #8]
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	6952      	ldr	r2, [r2, #20]
 8002812:	0c12      	lsrs	r2, r2, #16
 8002814:	430a      	orrs	r2, r1
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002824:	d204      	bcs.n	8002830 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8002826:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff ff97 	bl	800275e <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002838:	d105      	bne.n	8002846 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283e:	4619      	mov	r1, r3
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff ff9f 	bl	8002784 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800284a:	7bfb      	ldrb	r3, [r7, #15]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <LL_TIM_SetPrescaler>:
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_TIM_SetAutoReload>:
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_TIM_SetRepetitionCounter>:
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_TIM_OC_SetCompareCH1>:
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <LL_TIM_OC_SetCompareCH2>:
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_TIM_OC_SetCompareCH3>:
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_TIM_OC_SetCompareCH4>:
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_TIM_OC_SetCompareCH5>:
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_TIM_OC_SetCompareCH6>:
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f043 0201 	orr.w	r2, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	615a      	str	r2, [r3, #20]
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a27      	ldr	r2, [pc, #156]	@ (8002a24 <LL_TIM_Init+0xb0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d003      	beq.n	8002994 <LL_TIM_Init+0x20>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002992:	d106      	bne.n	80029a2 <LL_TIM_Init+0x2e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002a24 <LL_TIM_Init+0xb0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00b      	beq.n	80029c2 <LL_TIM_Init+0x4e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b0:	d007      	beq.n	80029c2 <LL_TIM_Init+0x4e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a28 <LL_TIM_Init+0xb4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d003      	beq.n	80029c2 <LL_TIM_Init+0x4e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a1b      	ldr	r2, [pc, #108]	@ (8002a2c <LL_TIM_Init+0xb8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d106      	bne.n	80029d0 <LL_TIM_Init+0x5c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	4619      	mov	r1, r3
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff ff47 	bl	8002870 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	4619      	mov	r1, r3
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff ff33 	bl	8002854 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002a24 <LL_TIM_Init+0xb0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d007      	beq.n	8002a06 <LL_TIM_Init+0x92>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002a28 <LL_TIM_Init+0xb4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d003      	beq.n	8002a06 <LL_TIM_Init+0x92>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a0a      	ldr	r2, [pc, #40]	@ (8002a2c <LL_TIM_Init+0xb8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d105      	bne.n	8002a12 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff ff3d 	bl	800288c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff ff9e 	bl	8002954 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40012c00 	.word	0x40012c00
 8002a28:	40014000 	.word	0x40014000
 8002a2c:	40014400 	.word	0x40014400

08002a30 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a46:	d045      	beq.n	8002ad4 <LL_TIM_OC_Init+0xa4>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a4e:	d848      	bhi.n	8002ae2 <LL_TIM_OC_Init+0xb2>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a56:	d036      	beq.n	8002ac6 <LL_TIM_OC_Init+0x96>
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a5e:	d840      	bhi.n	8002ae2 <LL_TIM_OC_Init+0xb2>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a66:	d027      	beq.n	8002ab8 <LL_TIM_OC_Init+0x88>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a6e:	d838      	bhi.n	8002ae2 <LL_TIM_OC_Init+0xb2>
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a76:	d018      	beq.n	8002aaa <LL_TIM_OC_Init+0x7a>
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a7e:	d830      	bhi.n	8002ae2 <LL_TIM_OC_Init+0xb2>
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d003      	beq.n	8002a8e <LL_TIM_OC_Init+0x5e>
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b10      	cmp	r3, #16
 8002a8a:	d007      	beq.n	8002a9c <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002a8c:	e029      	b.n	8002ae2 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f891 	bl	8002bb8 <OC1Config>
 8002a96:	4603      	mov	r3, r0
 8002a98:	75fb      	strb	r3, [r7, #23]
      break;
 8002a9a:	e023      	b.n	8002ae4 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f8fe 	bl	8002ca0 <OC2Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8002aa8:	e01c      	b.n	8002ae4 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 f96f 	bl	8002d90 <OC3Config>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ab6:	e015      	b.n	8002ae4 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f9e0 	bl	8002e80 <OC4Config>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ac4:	e00e      	b.n	8002ae4 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 fa39 	bl	8002f40 <OC5Config>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ad2:	e007      	b.n	8002ae4 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fa8a 	bl	8002ff0 <OC6Config>
 8002adc:	4603      	mov	r3, r0
 8002ade:	75fb      	strb	r3, [r7, #23]
      break;
 8002ae0:	e000      	b.n	8002ae4 <LL_TIM_OC_Init+0xb4>
      break;
 8002ae2:	bf00      	nop
  }

  return result;
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	7b12      	ldrb	r2, [r2, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	89d2      	ldrh	r2, [r2, #14]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a10      	ldr	r2, [pc, #64]	@ (8002bb4 <LL_TIM_BDTR_Init+0xc4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d114      	bne.n	8002ba0 <LL_TIM_BDTR_Init+0xb0>
    assert_param(IS_LL_TIM_BREAK2_STATE(TIM_BDTRInitStruct->Break2State));
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	40012c00 	.word	0x40012c00

08002bb8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	f023 0201 	bic.w	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0303 	bic.w	r3, r3, #3
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f023 0202 	bic.w	r2, r3, #2
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f023 0201 	bic.w	r2, r3, #1
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a1e      	ldr	r2, [pc, #120]	@ (8002c94 <OC1Config+0xdc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d007      	beq.n	8002c2e <OC1Config+0x76>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a1d      	ldr	r2, [pc, #116]	@ (8002c98 <OC1Config+0xe0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d003      	beq.n	8002c2e <OC1Config+0x76>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a1c      	ldr	r2, [pc, #112]	@ (8002c9c <OC1Config+0xe4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d11e      	bne.n	8002c6c <OC1Config+0xb4>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f023 0208 	bic.w	r2, r3, #8
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f023 0204 	bic.w	r2, r3, #4
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff fe12 	bl	80028a8 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40012c00 	.word	0x40012c00
 8002c98:	40014000 	.word	0x40014000
 8002c9c:	40014400 	.word	0x40014400

08002ca0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	f023 0210 	bic.w	r2, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	0212      	lsls	r2, r2, #8
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f023 0220 	bic.w	r2, r3, #32
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f023 0210 	bic.w	r2, r3, #16
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a1f      	ldr	r2, [pc, #124]	@ (8002d84 <OC2Config+0xe4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d007      	beq.n	8002d1c <OC2Config+0x7c>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002d88 <OC2Config+0xe8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d003      	beq.n	8002d1c <OC2Config+0x7c>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a1d      	ldr	r2, [pc, #116]	@ (8002d8c <OC2Config+0xec>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d11f      	bne.n	8002d5c <OC2Config+0xbc>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	019b      	lsls	r3, r3, #6
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	019b      	lsls	r3, r3, #6
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff fda8 	bl	80028c4 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40012c00 	.word	0x40012c00
 8002d88:	40014000 	.word	0x40014000
 8002d8c:	40014400 	.word	0x40014400

08002d90 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f023 0303 	bic.w	r3, r3, #3
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	4313      	orrs	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	021b      	lsls	r3, r3, #8
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a1f      	ldr	r2, [pc, #124]	@ (8002e74 <OC3Config+0xe4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d007      	beq.n	8002e0a <OC3Config+0x7a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8002e78 <OC3Config+0xe8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d003      	beq.n	8002e0a <OC3Config+0x7a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a1d      	ldr	r2, [pc, #116]	@ (8002e7c <OC3Config+0xec>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d11f      	bne.n	8002e4a <OC3Config+0xba>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	029b      	lsls	r3, r3, #10
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	029b      	lsls	r3, r3, #10
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	015b      	lsls	r3, r3, #5
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff fd3f 	bl	80028e0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40012c00 	.word	0x40012c00
 8002e78:	40014000 	.word	0x40014000
 8002e7c:	40014400 	.word	0x40014400

08002e80 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	0212      	lsls	r2, r2, #8
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	031b      	lsls	r3, r3, #12
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	031b      	lsls	r3, r3, #12
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a13      	ldr	r2, [pc, #76]	@ (8002f34 <OC4Config+0xb4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d007      	beq.n	8002efc <OC4Config+0x7c>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a12      	ldr	r2, [pc, #72]	@ (8002f38 <OC4Config+0xb8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d003      	beq.n	8002efc <OC4Config+0x7c>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a11      	ldr	r2, [pc, #68]	@ (8002f3c <OC4Config+0xbc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d107      	bne.n	8002f0c <OC4Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	019b      	lsls	r3, r3, #6
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff fcec 	bl	80028fc <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40012c00 	.word	0x40012c00
 8002f38:	40014000 	.word	0x40014000
 8002f3c:	40014400 	.word	0x40014400

08002f40 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f60:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	041b      	lsls	r3, r3, #16
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	041b      	lsls	r3, r3, #16
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a13      	ldr	r2, [pc, #76]	@ (8002fe4 <OC5Config+0xa4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d007      	beq.n	8002fac <OC5Config+0x6c>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a12      	ldr	r2, [pc, #72]	@ (8002fe8 <OC5Config+0xa8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d003      	beq.n	8002fac <OC5Config+0x6c>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a11      	ldr	r2, [pc, #68]	@ (8002fec <OC5Config+0xac>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d109      	bne.n	8002fc0 <OC5Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	4619      	mov	r1, r3
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff fca3 	bl	8002918 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40012c00 	.word	0x40012c00
 8002fe8:	40014000 	.word	0x40014000
 8002fec:	40014400 	.word	0x40014400

08002ff0 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003010:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003018:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	0212      	lsls	r2, r2, #8
 8003022:	4313      	orrs	r3, r2
 8003024:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	051b      	lsls	r3, r3, #20
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	051b      	lsls	r3, r3, #20
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a12      	ldr	r2, [pc, #72]	@ (8003094 <OC6Config+0xa4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d007      	beq.n	800305e <OC6Config+0x6e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a11      	ldr	r2, [pc, #68]	@ (8003098 <OC6Config+0xa8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d003      	beq.n	800305e <OC6Config+0x6e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a10      	ldr	r2, [pc, #64]	@ (800309c <OC6Config+0xac>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d109      	bne.n	8003072 <OC6Config+0x82>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	029b      	lsls	r3, r3, #10
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4619      	mov	r1, r3
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff fc5a 	bl	8002938 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40012c00 	.word	0x40012c00
 8003098:	40014000 	.word	0x40014000
 800309c:	40014400 	.word	0x40014400

080030a0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	4a07      	ldr	r2, [pc, #28]	@ (80030d0 <LL_InitTick+0x30>)
 80030b4:	3b01      	subs	r3, #1
 80030b6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80030b8:	4b05      	ldr	r3, [pc, #20]	@ (80030d0 <LL_InitTick+0x30>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030be:	4b04      	ldr	r3, [pc, #16]	@ (80030d0 <LL_InitTick+0x30>)
 80030c0:	2205      	movs	r2, #5
 80030c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000e010 	.word	0xe000e010

080030d4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80030dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff ffdd 	bl	80030a0 <LL_InitTick>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80030f8:	4a04      	ldr	r2, [pc, #16]	@ (800310c <LL_SetSystemCoreClock+0x1c>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6013      	str	r3, [r2, #0]
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000004 	.word	0x20000004

08003110 <LL_GPIO_SetOutputPin>:
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	619a      	str	r2, [r3, #24]
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <LL_GPIO_ResetOutputPin>:
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <fram_init>:
int fram_rdsr(fram_t *dev);
int fram_wrsr(fram_t *dev);
int fram_get_id(fram_t *dev);

int fram_init(fram_t *dev, SPI_TypeDef *SPIx, uint8_t cs_pin, uint8_t sck_pin,
              uint8_t mosi_pin, uint8_t miso_pin) {
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	4611      	mov	r1, r2
 8003154:	461a      	mov	r2, r3
 8003156:	460b      	mov	r3, r1
 8003158:	71fb      	strb	r3, [r7, #7]
 800315a:	4613      	mov	r3, r2
 800315c:	71bb      	strb	r3, [r7, #6]
  dev->spi_device = SPIx;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	601a      	str	r2, [r3, #0]

  dev->cs_pin = cs_pin;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	79fa      	ldrb	r2, [r7, #7]
 8003168:	711a      	strb	r2, [r3, #4]
  dev->sck_pin = sck_pin;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	79ba      	ldrb	r2, [r7, #6]
 800316e:	715a      	strb	r2, [r3, #5]
  dev->mosi_pin = mosi_pin;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	7e3a      	ldrb	r2, [r7, #24]
 8003174:	719a      	strb	r2, [r3, #6]
  dev->miso_pin = miso_pin;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	7f3a      	ldrb	r2, [r7, #28]
 800317a:	71da      	strb	r2, [r3, #7]

  dev->wp_pin = 255;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	22ff      	movs	r2, #255	@ 0xff
 8003180:	721a      	strb	r2, [r3, #8]
  dev->hold_pin = 255;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	22ff      	movs	r2, #255	@ 0xff
 8003186:	725a      	strb	r2, [r3, #9]

  // TODO actually make this driver use the given CS pin
  CS_HIGH
 8003188:	2110      	movs	r1, #16
 800318a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800318e:	f7ff ffbf 	bl	8003110 <LL_GPIO_SetOutputPin>

  fram_get_id(dev);
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f805 	bl	80031a2 <fram_get_id>

  return 0;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <fram_get_id>:

int fram_get_id(fram_t *dev) {
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  uint8_t cmd = RDID_CMD;
 80031aa:	239f      	movs	r3, #159	@ 0x9f
 80031ac:	73fb      	strb	r3, [r7, #15]

  CS_LOW
 80031ae:	2110      	movs	r1, #16
 80031b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031b4:	f7ff ffba 	bl	800312c <LL_GPIO_ResetOutputPin>

  spi_write(dev->spi_device, &cmd, 1);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f107 010f 	add.w	r1, r7, #15
 80031c0:	2201      	movs	r2, #1
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fe fec7 	bl	8001f56 <spi_write>

  spi_read(dev->spi_device, (uint8_t *)&(dev->device_id), 4);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3310      	adds	r3, #16
 80031d0:	2204      	movs	r2, #4
 80031d2:	4619      	mov	r1, r3
 80031d4:	f7fe fea1 	bl	8001f1a <spi_read>

  CS_HIGH
 80031d8:	2110      	movs	r1, #16
 80031da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031de:	f7ff ff97 	bl	8003110 <LL_GPIO_SetOutputPin>

  return 0;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <fram_wren>:

// TODO actually check for errors
// Set write enable latch (enable writes)
int fram_wren(fram_t *dev) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint8_t cmd = WREN_CMD;
 80031f4:	2306      	movs	r3, #6
 80031f6:	73fb      	strb	r3, [r7, #15]

  CS_LOW
 80031f8:	2110      	movs	r1, #16
 80031fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031fe:	f7ff ff95 	bl	800312c <LL_GPIO_ResetOutputPin>

  spi_write(dev->spi_device, &cmd, 1);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f107 010f 	add.w	r1, r7, #15
 800320a:	2201      	movs	r2, #1
 800320c:	4618      	mov	r0, r3
 800320e:	f7fe fea2 	bl	8001f56 <spi_write>

  CS_HIGH
 8003212:	2110      	movs	r1, #16
 8003214:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003218:	f7ff ff7a 	bl	8003110 <LL_GPIO_SetOutputPin>

  return 0;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <fram_write>:
  // TODO
  return -1;
}

int fram_write(fram_t *dev, SPI_TypeDef *SPIx, uint32_t addr, uint8_t *buf,
               uint32_t num_bytes) {
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	603b      	str	r3, [r7, #0]
  uint8_t cmd = WRITE_CMD;
 8003234:	2302      	movs	r3, #2
 8003236:	75fb      	strb	r3, [r7, #23]

  uint8_t addr_byte_1 = (addr >> 16) & 0xFF;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	0c1b      	lsrs	r3, r3, #16
 800323c:	b2db      	uxtb	r3, r3
 800323e:	75bb      	strb	r3, [r7, #22]
  uint8_t addr_byte_2 = (addr >> 8) & 0xFF;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	0a1b      	lsrs	r3, r3, #8
 8003244:	b2db      	uxtb	r3, r3
 8003246:	757b      	strb	r3, [r7, #21]
  uint8_t addr_byte_3 = addr & 0xFF;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	b2db      	uxtb	r3, r3
 800324c:	753b      	strb	r3, [r7, #20]

  fram_wren(dev);
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f7ff ffcc 	bl	80031ec <fram_wren>

  CS_LOW
 8003254:	2110      	movs	r1, #16
 8003256:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800325a:	f7ff ff67 	bl	800312c <LL_GPIO_ResetOutputPin>

  spi_write(dev->spi_device, &cmd, 1);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f107 0117 	add.w	r1, r7, #23
 8003266:	2201      	movs	r2, #1
 8003268:	4618      	mov	r0, r3
 800326a:	f7fe fe74 	bl	8001f56 <spi_write>

  spi_write(dev->spi_device, &addr_byte_1, 1);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f107 0116 	add.w	r1, r7, #22
 8003276:	2201      	movs	r2, #1
 8003278:	4618      	mov	r0, r3
 800327a:	f7fe fe6c 	bl	8001f56 <spi_write>
  spi_write(dev->spi_device, &addr_byte_2, 1);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f107 0115 	add.w	r1, r7, #21
 8003286:	2201      	movs	r2, #1
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe fe64 	bl	8001f56 <spi_write>
  spi_write(dev->spi_device, &addr_byte_3, 1);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f107 0114 	add.w	r1, r7, #20
 8003296:	2201      	movs	r2, #1
 8003298:	4618      	mov	r0, r3
 800329a:	f7fe fe5c 	bl	8001f56 <spi_write>

  spi_write(dev->spi_device, buf, num_bytes);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6a3a      	ldr	r2, [r7, #32]
 80032a4:	6839      	ldr	r1, [r7, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe fe55 	bl	8001f56 <spi_write>

  CS_HIGH
 80032ac:	2110      	movs	r1, #16
 80032ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032b2:	f7ff ff2d 	bl	8003110 <LL_GPIO_SetOutputPin>

  return 0;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <fram_read>:

int fram_read(fram_t *dev, SPI_TypeDef *SPIx, uint32_t addr, uint8_t *buf,
              uint32_t num_bytes) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
  uint8_t cmd = READ_CMD;
 80032ce:	2303      	movs	r3, #3
 80032d0:	75fb      	strb	r3, [r7, #23]

  uint8_t addr_byte_1 = (addr >> 16) & 0xFF;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	0c1b      	lsrs	r3, r3, #16
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	75bb      	strb	r3, [r7, #22]
  uint8_t addr_byte_2 = (addr >> 8) & 0xFF;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	757b      	strb	r3, [r7, #21]
  uint8_t addr_byte_3 = addr & 0xFF;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	753b      	strb	r3, [r7, #20]

  CS_LOW
 80032e8:	2110      	movs	r1, #16
 80032ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032ee:	f7ff ff1d 	bl	800312c <LL_GPIO_ResetOutputPin>

  spi_write(dev->spi_device, &cmd, 1);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f107 0117 	add.w	r1, r7, #23
 80032fa:	2201      	movs	r2, #1
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fe fe2a 	bl	8001f56 <spi_write>

  spi_write(dev->spi_device, &addr_byte_1, 1);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f107 0116 	add.w	r1, r7, #22
 800330a:	2201      	movs	r2, #1
 800330c:	4618      	mov	r0, r3
 800330e:	f7fe fe22 	bl	8001f56 <spi_write>
  spi_write(dev->spi_device, &addr_byte_2, 1);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f107 0115 	add.w	r1, r7, #21
 800331a:	2201      	movs	r2, #1
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe fe1a 	bl	8001f56 <spi_write>
  spi_write(dev->spi_device, &addr_byte_3, 1);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f107 0114 	add.w	r1, r7, #20
 800332a:	2201      	movs	r2, #1
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe fe12 	bl	8001f56 <spi_write>

  spi_read(dev->spi_device, buf, num_bytes);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6a3a      	ldr	r2, [r7, #32]
 8003338:	6839      	ldr	r1, [r7, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe fded 	bl	8001f1a <spi_read>

  CS_HIGH
 8003340:	2110      	movs	r1, #16
 8003342:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003346:	f7ff fee3 	bl	8003110 <LL_GPIO_SetOutputPin>

  return 0;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <fs_flash_read>:
}
*/
// littleFS port functions

int fs_flash_read(const struct lfs_config *cfg, lfs_block_t block,
                  lfs_off_t off, void *buffer, lfs_size_t size) {
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	603b      	str	r3, [r7, #0]
  assert(off % cfg->read_size == 0);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	fbb3 f1f2 	udiv	r1, r3, r2
 800336c:	fb01 f202 	mul.w	r2, r1, r2
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <fs_flash_read+0x2e>
 8003376:	4b1f      	ldr	r3, [pc, #124]	@ (80033f4 <fs_flash_read+0xa0>)
 8003378:	4a1f      	ldr	r2, [pc, #124]	@ (80033f8 <fs_flash_read+0xa4>)
 800337a:	215c      	movs	r1, #92	@ 0x5c
 800337c:	481f      	ldr	r0, [pc, #124]	@ (80033fc <fs_flash_read+0xa8>)
 800337e:	f007 f80d 	bl	800a39c <__assert_func>
  assert(size % cfg->read_size == 0);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	fbb3 f1f2 	udiv	r1, r3, r2
 800338c:	fb01 f202 	mul.w	r2, r1, r2
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d005      	beq.n	80033a2 <fs_flash_read+0x4e>
 8003396:	4b1a      	ldr	r3, [pc, #104]	@ (8003400 <fs_flash_read+0xac>)
 8003398:	4a17      	ldr	r2, [pc, #92]	@ (80033f8 <fs_flash_read+0xa4>)
 800339a:	215d      	movs	r1, #93	@ 0x5d
 800339c:	4817      	ldr	r0, [pc, #92]	@ (80033fc <fs_flash_read+0xa8>)
 800339e:	f006 fffd 	bl	800a39c <__assert_func>
  assert(block < cfg->block_count);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d305      	bcc.n	80033b8 <fs_flash_read+0x64>
 80033ac:	4b15      	ldr	r3, [pc, #84]	@ (8003404 <fs_flash_read+0xb0>)
 80033ae:	4a12      	ldr	r2, [pc, #72]	@ (80033f8 <fs_flash_read+0xa4>)
 80033b0:	215e      	movs	r1, #94	@ 0x5e
 80033b2:	4812      	ldr	r0, [pc, #72]	@ (80033fc <fs_flash_read+0xa8>)
 80033b4:	f006 fff2 	bl	800a39c <__assert_func>

  uint32_t startAddress = block * (cfg->block_size) + off;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	4413      	add	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
  int ret = fram_read(&memory, memory.spi_device, startAddress,
 80033c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003408 <fs_flash_read+0xb4>)
 80033ca:	6819      	ldr	r1, [r3, #0]
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	480c      	ldr	r0, [pc, #48]	@ (8003408 <fs_flash_read+0xb4>)
 80033d6:	f7ff ff73 	bl	80032c0 <fram_read>
 80033da:	6138      	str	r0, [r7, #16]
                      (uint8_t *)buffer, size);

  if (ret == -1) {
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033e2:	d102      	bne.n	80033ea <fs_flash_read+0x96>
    return -1;
 80033e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033e8:	e000      	b.n	80033ec <fs_flash_read+0x98>
  } else {
    return 0;
 80033ea:	2300      	movs	r3, #0
  }
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	0800c1dc 	.word	0x0800c1dc
 80033f8:	0800cf58 	.word	0x0800cf58
 80033fc:	0800c1f8 	.word	0x0800c1f8
 8003400:	0800c214 	.word	0x0800c214
 8003404:	0800c230 	.word	0x0800c230
 8003408:	20000084 	.word	0x20000084

0800340c <fs_flash_prog>:

int fs_flash_prog(const struct lfs_config *cfg, lfs_block_t block,
                  lfs_off_t off, const void *buffer, lfs_size_t size) {
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	603b      	str	r3, [r7, #0]

  assert(off % cfg->prog_size == 0);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	fbb3 f1f2 	udiv	r1, r3, r2
 8003424:	fb01 f202 	mul.w	r2, r1, r2
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <fs_flash_prog+0x2e>
 800342e:	4b1f      	ldr	r3, [pc, #124]	@ (80034ac <fs_flash_prog+0xa0>)
 8003430:	4a1f      	ldr	r2, [pc, #124]	@ (80034b0 <fs_flash_prog+0xa4>)
 8003432:	216e      	movs	r1, #110	@ 0x6e
 8003434:	481f      	ldr	r0, [pc, #124]	@ (80034b4 <fs_flash_prog+0xa8>)
 8003436:	f006 ffb1 	bl	800a39c <__assert_func>
  assert(size % cfg->prog_size == 0);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	fbb3 f1f2 	udiv	r1, r3, r2
 8003444:	fb01 f202 	mul.w	r2, r1, r2
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <fs_flash_prog+0x4e>
 800344e:	4b1a      	ldr	r3, [pc, #104]	@ (80034b8 <fs_flash_prog+0xac>)
 8003450:	4a17      	ldr	r2, [pc, #92]	@ (80034b0 <fs_flash_prog+0xa4>)
 8003452:	216f      	movs	r1, #111	@ 0x6f
 8003454:	4817      	ldr	r0, [pc, #92]	@ (80034b4 <fs_flash_prog+0xa8>)
 8003456:	f006 ffa1 	bl	800a39c <__assert_func>
  assert(block < cfg->block_count);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	429a      	cmp	r2, r3
 8003462:	d305      	bcc.n	8003470 <fs_flash_prog+0x64>
 8003464:	4b15      	ldr	r3, [pc, #84]	@ (80034bc <fs_flash_prog+0xb0>)
 8003466:	4a12      	ldr	r2, [pc, #72]	@ (80034b0 <fs_flash_prog+0xa4>)
 8003468:	2170      	movs	r1, #112	@ 0x70
 800346a:	4812      	ldr	r0, [pc, #72]	@ (80034b4 <fs_flash_prog+0xa8>)
 800346c:	f006 ff96 	bl	800a39c <__assert_func>

  uint32_t startAddress = block * (cfg->block_size) + off;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4413      	add	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
  int ret = fram_write(&memory, memory.spi_device, startAddress,
 8003480:	4b0f      	ldr	r3, [pc, #60]	@ (80034c0 <fs_flash_prog+0xb4>)
 8003482:	6819      	ldr	r1, [r3, #0]
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	480c      	ldr	r0, [pc, #48]	@ (80034c0 <fs_flash_prog+0xb4>)
 800348e:	f7ff feca 	bl	8003226 <fram_write>
 8003492:	6138      	str	r0, [r7, #16]
                       (uint8_t *)buffer, size);

  if (ret == -1) {
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800349a:	d102      	bne.n	80034a2 <fs_flash_prog+0x96>
    return -1;
 800349c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034a0:	e000      	b.n	80034a4 <fs_flash_prog+0x98>
  } else {
    return 0;
 80034a2:	2300      	movs	r3, #0
  }
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	0800c24c 	.word	0x0800c24c
 80034b0:	0800cf68 	.word	0x0800cf68
 80034b4:	0800c1f8 	.word	0x0800c1f8
 80034b8:	0800c268 	.word	0x0800c268
 80034bc:	0800c230 	.word	0x0800c230
 80034c0:	20000084 	.word	0x20000084

080034c4 <fs_flash_erase>:

int fs_flash_erase(const struct lfs_config *cfg, lfs_block_t block) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b088      	sub	sp, #32
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  assert(block < cfg->block_count);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d305      	bcc.n	80034e4 <fs_flash_erase+0x20>
 80034d8:	4b12      	ldr	r3, [pc, #72]	@ (8003524 <fs_flash_erase+0x60>)
 80034da:	4a13      	ldr	r2, [pc, #76]	@ (8003528 <fs_flash_erase+0x64>)
 80034dc:	217e      	movs	r1, #126	@ 0x7e
 80034de:	4813      	ldr	r0, [pc, #76]	@ (800352c <fs_flash_erase+0x68>)
 80034e0:	f006 ff5c 	bl	800a39c <__assert_func>
  uint8_t zero = 0x00;
 80034e4:	2300      	movs	r3, #0
 80034e6:	73fb      	strb	r3, [r7, #15]

  uint32_t startAddress = block * (cfg->block_size);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	fb02 f303 	mul.w	r3, r2, r3
 80034f2:	617b      	str	r3, [r7, #20]
  int ret = fram_write(&memory, memory.spi_device, startAddress, &zero, 128);
 80034f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003530 <fs_flash_erase+0x6c>)
 80034f6:	6819      	ldr	r1, [r3, #0]
 80034f8:	f107 030f 	add.w	r3, r7, #15
 80034fc:	2280      	movs	r2, #128	@ 0x80
 80034fe:	9200      	str	r2, [sp, #0]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	480b      	ldr	r0, [pc, #44]	@ (8003530 <fs_flash_erase+0x6c>)
 8003504:	f7ff fe8f 	bl	8003226 <fram_write>
 8003508:	6138      	str	r0, [r7, #16]

  if (ret == -1) {
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003510:	d102      	bne.n	8003518 <fs_flash_erase+0x54>
    return -1;
 8003512:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003516:	e000      	b.n	800351a <fs_flash_erase+0x56>
  } else {
    return 0;
 8003518:	2300      	movs	r3, #0
  }
}
 800351a:	4618      	mov	r0, r3
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	0800c230 	.word	0x0800c230
 8003528:	0800cf78 	.word	0x0800cf78
 800352c:	0800c1f8 	.word	0x0800c1f8
 8003530:	20000084 	.word	0x20000084

08003534 <fs_flash_sync>:

// SPI implementation is blocking
int fs_flash_sync(const struct lfs_config *c) { return 0; }
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	2300      	movs	r3, #0
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4293      	cmp	r3, r2
 800355a:	bf38      	it	cc
 800355c:	4613      	movcc	r3, r2
}
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4293      	cmp	r3, r2
 800357a:	bf28      	it	cs
 800357c:	4613      	movcs	r3, r2
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	fbb3 f2f2 	udiv	r2, r3, r2
 800359c:	6839      	ldr	r1, [r7, #0]
 800359e:	fb01 f202 	mul.w	r2, r1, r2
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	1ad3      	subs	r3, r2, r3
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	4413      	add	r3, r2
 80035c4:	3b01      	subs	r3, #1
 80035c6:	6839      	ldr	r1, [r7, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ffde 	bl	800358a <lfs_aligndown>
 80035ce:	4603      	mov	r3, r0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	fab3 f383 	clz	r3, r3
 80035e8:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f008 fd5c 	bl	800c0dc <__popcountsi2>
 8003624:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	1ad3      	subs	r3, r2, r3
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8003652:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8003654:	4618      	mov	r0, r3
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ffee 	bl	800364a <lfs_fromle32>
 800366e:	4603      	mov	r3, r0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8003684:	4618      	mov	r0, r3
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff ffed 	bl	8003678 <lfs_frombe32>
 800369e:	4603      	mov	r3, r0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f006 fea3 	bl	800a3fc <malloc>
 80036b6:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f006 fe9f 	bl	800a40c <free>
#else
    (void)p;
#endif
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80036e6:	601a      	str	r2, [r3, #0]
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68d8      	ldr	r0, [r3, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003708:	461a      	mov	r2, r3
 800370a:	21ff      	movs	r1, #255	@ 0xff
 800370c:	f007 f8be 	bl	800a88c <memset>
    pcache->block = LFS_BLOCK_NULL;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003716:	601a      	str	r2, [r3, #0]
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8003720:	b5b0      	push	{r4, r5, r7, lr}
 8003722:	b08a      	sub	sp, #40	@ 0x28
 8003724:	af02      	add	r7, sp, #8
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800372e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003730:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 8003732:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003736:	441a      	add	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	429a      	cmp	r2, r3
 8003740:	d80a      	bhi.n	8003758 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 8124 	beq.w	8003994 <lfs_bd_read+0x274>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003750:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003752:	429a      	cmp	r2, r3
 8003754:	f0c0 811e 	bcc.w	8003994 <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 8003758:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800375c:	e11f      	b.n	800399e <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800375e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003760:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d03f      	beq.n	80037e8 <lfs_bd_read+0xc8>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800376e:	429a      	cmp	r2, r3
 8003770:	d13a      	bne.n	80037e8 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 800377c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800377e:	429a      	cmp	r2, r3
 8003780:	d232      	bcs.n	80037e8 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003788:	429a      	cmp	r2, r3
 800378a:	d324      	bcc.n	80037d6 <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	6859      	ldr	r1, [r3, #4]
 8003794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003796:	1acb      	subs	r3, r1, r3
 8003798:	4413      	add	r3, r2
 800379a:	4619      	mov	r1, r3
 800379c:	69b8      	ldr	r0, [r7, #24]
 800379e:	f7ff fee4 	bl	800356a <lfs_min>
 80037a2:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80037ae:	1acb      	subs	r3, r1, r3
 80037b0:	4413      	add	r3, r2
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4619      	mov	r1, r3
 80037b6:	69f8      	ldr	r0, [r7, #28]
 80037b8:	f007 f934 	bl	800aa24 <memcpy>

                data += diff;
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	4413      	add	r3, r2
 80037c2:	61fb      	str	r3, [r7, #28]
                off += diff;
 80037c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	4413      	add	r3, r2
 80037ca:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 80037cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 80037d4:	e0de      	b.n	8003994 <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	4619      	mov	r1, r3
 80037e0:	69b8      	ldr	r0, [r7, #24]
 80037e2:	f7ff fec2 	bl	800356a <lfs_min>
 80037e6:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d13a      	bne.n	8003868 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	4413      	add	r3, r2
        if (block == rcache->block &&
 80037fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037fe:	429a      	cmp	r2, r3
 8003800:	d232      	bcs.n	8003868 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003808:	429a      	cmp	r2, r3
 800380a:	d324      	bcc.n	8003856 <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003816:	1acb      	subs	r3, r1, r3
 8003818:	4413      	add	r3, r2
 800381a:	4619      	mov	r1, r3
 800381c:	69b8      	ldr	r0, [r7, #24]
 800381e:	f7ff fea4 	bl	800356a <lfs_min>
 8003822:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800382e:	1acb      	subs	r3, r1, r3
 8003830:	4413      	add	r3, r2
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4619      	mov	r1, r3
 8003836:	69f8      	ldr	r0, [r7, #28]
 8003838:	f007 f8f4 	bl	800aa24 <memcpy>

                data += diff;
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	4413      	add	r3, r2
 8003842:	61fb      	str	r3, [r7, #28]
                off += diff;
 8003844:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	4413      	add	r3, r2
 800384a:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800384c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8003854:	e09e      	b.n	8003994 <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	4619      	mov	r1, r3
 8003860:	69b8      	ldr	r0, [r7, #24]
 8003862:	f7ff fe82 	bl	800356a <lfs_min>
 8003866:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8003868:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d336      	bcc.n	80038de <lfs_bd_read+0x1be>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003878:	fbb3 f1f2 	udiv	r1, r3, r2
 800387c:	fb01 f202 	mul.w	r2, r1, r2
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d12b      	bne.n	80038de <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800388a:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800388c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800388e:	429a      	cmp	r2, r3
 8003890:	d325      	bcc.n	80038de <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	4619      	mov	r1, r3
 800389a:	69b8      	ldr	r0, [r7, #24]
 800389c:	f7ff fe75 	bl	800358a <lfs_aligndown>
 80038a0:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038a6:	685c      	ldr	r4, [r3, #4]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038b6:	47a0      	blx	r4
 80038b8:	6178      	str	r0, [r7, #20]
            if (err) {
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <lfs_bd_read+0x1a4>
                return err;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	e06c      	b.n	800399e <lfs_bd_read+0x27e>
            }

            data += diff;
 80038c4:	69fa      	ldr	r2, [r7, #28]
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	4413      	add	r3, r2
 80038ca:	61fb      	str	r3, [r7, #28]
            off += diff;
 80038cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	4413      	add	r3, r2
 80038d2:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 80038d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 80038dc:	e05a      	b.n	8003994 <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <lfs_bd_read+0x1dc>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d305      	bcc.n	80038fc <lfs_bd_read+0x1dc>
 80038f0:	4b2d      	ldr	r3, [pc, #180]	@ (80039a8 <lfs_bd_read+0x288>)
 80038f2:	4a2e      	ldr	r2, [pc, #184]	@ (80039ac <lfs_bd_read+0x28c>)
 80038f4:	216b      	movs	r1, #107	@ 0x6b
 80038f6:	482e      	ldr	r0, [pc, #184]	@ (80039b0 <lfs_bd_read+0x290>)
 80038f8:	f006 fd50 	bl	800a39c <__assert_func>
        rcache->block = block;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003900:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	4619      	mov	r1, r3
 800390a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800390c:	f7ff fe3d 	bl	800358a <lfs_aligndown>
 8003910:	4602      	mov	r2, r0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8003916:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003920:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8003922:	4619      	mov	r1, r3
 8003924:	4610      	mov	r0, r2
 8003926:	f7ff fe45 	bl	80035b4 <lfs_alignup>
 800392a:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003930:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8003932:	4619      	mov	r1, r3
 8003934:	4610      	mov	r0, r2
 8003936:	f7ff fe18 	bl	800356a <lfs_min>
 800393a:	4602      	mov	r2, r0
                - rcache->off,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8003940:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(
 8003948:	4619      	mov	r1, r3
 800394a:	4610      	mov	r0, r2
 800394c:	f7ff fe0d 	bl	800356a <lfs_min>
 8003950:	4602      	mov	r2, r0
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800395a:	685c      	ldr	r4, [r3, #4]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6819      	ldr	r1, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	462b      	mov	r3, r5
 8003974:	47a0      	blx	r4
 8003976:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	dd05      	ble.n	800398a <lfs_bd_read+0x26a>
 800397e:	4b0d      	ldr	r3, [pc, #52]	@ (80039b4 <lfs_bd_read+0x294>)
 8003980:	4a0a      	ldr	r2, [pc, #40]	@ (80039ac <lfs_bd_read+0x28c>)
 8003982:	2176      	movs	r1, #118	@ 0x76
 8003984:	480a      	ldr	r0, [pc, #40]	@ (80039b0 <lfs_bd_read+0x290>)
 8003986:	f006 fd09 	bl	800a39c <__assert_func>
        if (err) {
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <lfs_bd_read+0x274>
            return err;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	e004      	b.n	800399e <lfs_bd_read+0x27e>
    while (size > 0) {
 8003994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003996:	2b00      	cmp	r3, #0
 8003998:	f47f aee1 	bne.w	800375e <lfs_bd_read+0x3e>
        }
    }

    return 0;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3720      	adds	r7, #32
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bdb0      	pop	{r4, r5, r7, pc}
 80039a6:	bf00      	nop
 80039a8:	0800c284 	.word	0x0800c284
 80039ac:	0800cf88 	.word	0x0800cf88
 80039b0:	0800c2b4 	.word	0x0800c2b4
 80039b4:	0800c2cc 	.word	0x0800c2cc

080039b8 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b090      	sub	sp, #64	@ 0x40
 80039bc:	af04      	add	r7, sp, #16
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80039c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    lfs_size_t diff = 0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	627b      	str	r3, [r7, #36]	@ 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 80039ce:	2300      	movs	r3, #0
 80039d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039d2:	e039      	b.n	8003a48 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 80039d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2108      	movs	r1, #8
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff fdc4 	bl	800356a <lfs_min>
 80039e2:	6278      	str	r0, [r7, #36]	@ 0x24
        int err = lfs_bd_read(lfs,
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e8:	1ad1      	subs	r1, r2, r3
 80039ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ee:	4413      	add	r3, r2
 80039f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f2:	9203      	str	r2, [sp, #12]
 80039f4:	f107 0214 	add.w	r2, r7, #20
 80039f8:	9202      	str	r2, [sp, #8]
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	460b      	mov	r3, r1
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f7ff fe8a 	bl	8003720 <lfs_bd_read>
 8003a0c:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <lfs_bd_cmp+0x60>
            return err;
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	e01c      	b.n	8003a52 <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8003a18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a1c:	18d1      	adds	r1, r2, r3
 8003a1e:	f107 0314 	add.w	r3, r7, #20
 8003a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a24:	4618      	mov	r0, r3
 8003a26:	f006 ff21 	bl	800a86c <memcmp>
 8003a2a:	61f8      	str	r0, [r7, #28]
        if (res) {
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d006      	beq.n	8003a40 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	da01      	bge.n	8003a3c <lfs_bd_cmp+0x84>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e00a      	b.n	8003a52 <lfs_bd_cmp+0x9a>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e008      	b.n	8003a52 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8003a40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	4413      	add	r3, r2
 8003a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d3c1      	bcc.n	80039d4 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3730      	adds	r7, #48	@ 0x30
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b08e      	sub	sp, #56	@ 0x38
 8003a5e:	af04      	add	r7, sp, #16
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a70:	e030      	b.n	8003ad4 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 8003a72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2108      	movs	r1, #8
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff fd75 	bl	800356a <lfs_min>
 8003a80:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a86:	1ad1      	subs	r1, r2, r3
 8003a88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8c:	4413      	add	r3, r2
 8003a8e:	6a3a      	ldr	r2, [r7, #32]
 8003a90:	9203      	str	r2, [sp, #12]
 8003a92:	f107 0214 	add.w	r2, r7, #20
 8003a96:	9202      	str	r2, [sp, #8]
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	68b9      	ldr	r1, [r7, #8]
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f7ff fe3b 	bl	8003720 <lfs_bd_read>
 8003aaa:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <lfs_bd_crc+0x5c>
            return err;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	e013      	b.n	8003ade <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 8003ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f107 0114 	add.w	r1, r7, #20
 8003abe:	6a3a      	ldr	r2, [r7, #32]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f006 fc2d 	bl	800a320 <lfs_crc>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aca:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8003acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d3ca      	bcc.n	8003a72 <lfs_bd_crc+0x18>
    }

    return 0;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3728      	adds	r7, #40	@ 0x28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8003ae8:	b5b0      	push	{r4, r5, r7, lr}
 8003aea:	b08c      	sub	sp, #48	@ 0x30
 8003aec:	af04      	add	r7, sp, #16
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003afe:	d060      	beq.n	8003bc2 <lfs_bd_flush+0xda>
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f113 0f02 	cmn.w	r3, #2
 8003b08:	d05b      	beq.n	8003bc2 <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d305      	bcc.n	8003b22 <lfs_bd_flush+0x3a>
 8003b16:	4b2d      	ldr	r3, [pc, #180]	@ (8003bcc <lfs_bd_flush+0xe4>)
 8003b18:	4a2d      	ldr	r2, [pc, #180]	@ (8003bd0 <lfs_bd_flush+0xe8>)
 8003b1a:	21b3      	movs	r1, #179	@ 0xb3
 8003b1c:	482d      	ldr	r0, [pc, #180]	@ (8003bd4 <lfs_bd_flush+0xec>)
 8003b1e:	f006 fc3d 	bl	800a39c <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	f7ff fd40 	bl	80035b4 <lfs_alignup>
 8003b34:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b3a:	689c      	ldr	r4, [r3, #8]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	6819      	ldr	r1, [r3, #0]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	462b      	mov	r3, r5
 8003b52:	47a0      	blx	r4
 8003b54:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	dd05      	ble.n	8003b68 <lfs_bd_flush+0x80>
 8003b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8003bd8 <lfs_bd_flush+0xf0>)
 8003b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd0 <lfs_bd_flush+0xe8>)
 8003b60:	21b7      	movs	r1, #183	@ 0xb7
 8003b62:	481c      	ldr	r0, [pc, #112]	@ (8003bd4 <lfs_bd_flush+0xec>)
 8003b64:	f006 fc1a 	bl	800a39c <__assert_func>
        if (err) {
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <lfs_bd_flush+0x8a>
            return err;
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	e028      	b.n	8003bc4 <lfs_bd_flush+0xdc>
        }

        if (validate) {
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d020      	beq.n	8003bba <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f7ff fdab 	bl	80036d6 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8003b8c:	69f8      	ldr	r0, [r7, #28]
 8003b8e:	9003      	str	r0, [sp, #12]
 8003b90:	9102      	str	r1, [sp, #8]
 8003b92:	9201      	str	r2, [sp, #4]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f7ff ff0b 	bl	80039b8 <lfs_bd_cmp>
 8003ba2:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	da01      	bge.n	8003bae <lfs_bd_flush+0xc6>
                return res;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	e00a      	b.n	8003bc4 <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 8003bb4:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8003bb8:	e004      	b.n	8003bc4 <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f7ff fd99 	bl	80036f4 <lfs_cache_zero>
    }

    return 0;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3720      	adds	r7, #32
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bdb0      	pop	{r4, r5, r7, pc}
 8003bcc:	0800c2d8 	.word	0x0800c2d8
 8003bd0:	0800cf94 	.word	0x0800cf94
 8003bd4:	0800c2b4 	.word	0x0800c2b4
 8003bd8:	0800c2cc 	.word	0x0800c2cc

08003bdc <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f7ff fd72 	bl	80036d6 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	68b9      	ldr	r1, [r7, #8]
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f7ff ff75 	bl	8003ae8 <lfs_bd_flush>
 8003bfe:	6178      	str	r0, [r7, #20]
    if (err) {
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <lfs_bd_sync+0x2e>
        return err;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	e011      	b.n	8003c2e <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c14:	4610      	mov	r0, r2
 8003c16:	4798      	blx	r3
 8003c18:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	dd05      	ble.n	8003c2c <lfs_bd_sync+0x50>
 8003c20:	4b05      	ldr	r3, [pc, #20]	@ (8003c38 <lfs_bd_sync+0x5c>)
 8003c22:	4a06      	ldr	r2, [pc, #24]	@ (8003c3c <lfs_bd_sync+0x60>)
 8003c24:	21dd      	movs	r1, #221	@ 0xdd
 8003c26:	4806      	ldr	r0, [pc, #24]	@ (8003c40 <lfs_bd_sync+0x64>)
 8003c28:	f006 fbb8 	bl	800a39c <__assert_func>
    return err;
 8003c2c:	697b      	ldr	r3, [r7, #20]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	0800c2cc 	.word	0x0800c2cc
 8003c3c:	0800cfa4 	.word	0x0800cfa4
 8003c40:	0800c2b4 	.word	0x0800c2b4

08003c44 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8003c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c54:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 8003c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c58:	f113 0f02 	cmn.w	r3, #2
 8003c5c:	d00a      	beq.n	8003c74 <lfs_bd_prog+0x30>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d305      	bcc.n	8003c74 <lfs_bd_prog+0x30>
 8003c68:	4b48      	ldr	r3, [pc, #288]	@ (8003d8c <lfs_bd_prog+0x148>)
 8003c6a:	4a49      	ldr	r2, [pc, #292]	@ (8003d90 <lfs_bd_prog+0x14c>)
 8003c6c:	21e8      	movs	r1, #232	@ 0xe8
 8003c6e:	4849      	ldr	r0, [pc, #292]	@ (8003d94 <lfs_bd_prog+0x150>)
 8003c70:	f006 fb94 	bl	800a39c <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8003c74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c78:	441a      	add	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d97a      	bls.n	8003d7a <lfs_bd_prog+0x136>
 8003c84:	4b44      	ldr	r3, [pc, #272]	@ (8003d98 <lfs_bd_prog+0x154>)
 8003c86:	4a42      	ldr	r2, [pc, #264]	@ (8003d90 <lfs_bd_prog+0x14c>)
 8003c88:	21e9      	movs	r1, #233	@ 0xe9
 8003c8a:	4842      	ldr	r0, [pc, #264]	@ (8003d94 <lfs_bd_prog+0x150>)
 8003c8c:	f006 fb86 	bl	800a39c <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d151      	bne.n	8003d3e <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8003c9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d34c      	bcc.n	8003d3e <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cae:	4413      	add	r3, r2
                off >= pcache->off &&
 8003cb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d243      	bcs.n	8003d3e <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	6859      	ldr	r1, [r3, #4]
 8003cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc2:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8003cc4:	4413      	add	r3, r2
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003cca:	f7ff fc4e 	bl	800356a <lfs_min>
 8003cce:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cda:	1acb      	subs	r3, r1, r3
 8003cdc:	4413      	add	r3, r2
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	69f9      	ldr	r1, [r7, #28]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f006 fe9e 	bl	800aa24 <memcpy>

            data += diff;
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	4413      	add	r3, r2
 8003cee:	61fb      	str	r3, [r7, #28]
            off += diff;
 8003cf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 8003cf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	6898      	ldr	r0, [r3, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	f7ff fc1c 	bl	800354a <lfs_max>
 8003d12:	4602      	mov	r2, r0
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d128      	bne.n	8003d78 <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f7ff fedb 	bl	8003ae8 <lfs_bd_flush>
 8003d32:	6178      	str	r0, [r7, #20]
                if (err) {
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d01e      	beq.n	8003d78 <lfs_bd_prog+0x134>
                    return err;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	e021      	b.n	8003d82 <lfs_bd_prog+0x13e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d46:	d006      	beq.n	8003d56 <lfs_bd_prog+0x112>
 8003d48:	4b14      	ldr	r3, [pc, #80]	@ (8003d9c <lfs_bd_prog+0x158>)
 8003d4a:	4a11      	ldr	r2, [pc, #68]	@ (8003d90 <lfs_bd_prog+0x14c>)
 8003d4c:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8003d50:	4810      	ldr	r0, [pc, #64]	@ (8003d94 <lfs_bd_prog+0x150>)
 8003d52:	f006 fb23 	bl	800a39c <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d5a:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	4619      	mov	r1, r3
 8003d64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d66:	f7ff fc10 	bl	800358a <lfs_aligndown>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2200      	movs	r2, #0
 8003d74:	609a      	str	r2, [r3, #8]
 8003d76:	e000      	b.n	8003d7a <lfs_bd_prog+0x136>
            continue;
 8003d78:	bf00      	nop
    while (size > 0) {
 8003d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d187      	bne.n	8003c90 <lfs_bd_prog+0x4c>
    }

    return 0;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3720      	adds	r7, #32
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	0800c2fc 	.word	0x0800c2fc
 8003d90:	0800cfb0 	.word	0x0800cfb0
 8003d94:	0800c2b4 	.word	0x0800c2b4
 8003d98:	0800c334 	.word	0x0800c334
 8003d9c:	0800c358 	.word	0x0800c358

08003da0 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d306      	bcc.n	8003dc2 <lfs_bd_erase+0x22>
 8003db4:	4b0f      	ldr	r3, [pc, #60]	@ (8003df4 <lfs_bd_erase+0x54>)
 8003db6:	4a10      	ldr	r2, [pc, #64]	@ (8003df8 <lfs_bd_erase+0x58>)
 8003db8:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8003dbc:	480f      	ldr	r0, [pc, #60]	@ (8003dfc <lfs_bd_erase+0x5c>)
 8003dbe:	f006 faed 	bl	800a39c <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003dcc:	6839      	ldr	r1, [r7, #0]
 8003dce:	4610      	mov	r0, r2
 8003dd0:	4798      	blx	r3
 8003dd2:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	dd06      	ble.n	8003de8 <lfs_bd_erase+0x48>
 8003dda:	4b09      	ldr	r3, [pc, #36]	@ (8003e00 <lfs_bd_erase+0x60>)
 8003ddc:	4a06      	ldr	r2, [pc, #24]	@ (8003df8 <lfs_bd_erase+0x58>)
 8003dde:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8003de2:	4806      	ldr	r0, [pc, #24]	@ (8003dfc <lfs_bd_erase+0x5c>)
 8003de4:	f006 fada 	bl	800a39c <__assert_func>
    return err;
 8003de8:	68fb      	ldr	r3, [r7, #12]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	0800c37c 	.word	0x0800c37c
 8003df8:	0800cfbc 	.word	0x0800cfbc
 8003dfc:	0800c2b4 	.word	0x0800c2b4
 8003e00:	0800c2cc 	.word	0x0800c2cc

08003e04 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	601a      	str	r2, [r3, #0]
}
 8003e22:	bf00      	nop
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e3e:	d005      	beq.n	8003e4c <lfs_pair_isnull+0x1e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3304      	adds	r3, #4
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e4a:	d101      	bne.n	8003e50 <lfs_pair_isnull+0x22>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e000      	b.n	8003e52 <lfs_pair_isnull+0x24>
 8003e50:	2300      	movs	r3, #0
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	b2db      	uxtb	r3, r3
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d017      	beq.n	8003eaa <lfs_pair_cmp+0x46>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	3304      	adds	r3, #4
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d00f      	beq.n	8003eaa <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	3304      	adds	r3, #4
 8003e92:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d008      	beq.n	8003eaa <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d001      	beq.n	8003eaa <lfs_pair_cmp+0x46>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <lfs_pair_cmp+0x48>
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d107      	bne.n	8003ede <lfs_pair_issync+0x26>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d00d      	beq.n	8003efa <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d108      	bne.n	8003efe <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d101      	bne.n	8003efe <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <lfs_pair_issync+0x48>
 8003efe:	2300      	movs	r3, #0
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	b2db      	uxtb	r3, r3
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8003f12:	b590      	push	{r4, r7, lr}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fb93 	bl	800364a <lfs_fromle32>
 8003f24:	4602      	mov	r2, r0
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	1d1c      	adds	r4, r3, #4
 8003f34:	4610      	mov	r0, r2
 8003f36:	f7ff fb88 	bl	800364a <lfs_fromle32>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	6023      	str	r3, [r4, #0]
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd90      	pop	{r4, r7, pc}

08003f46 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8003f46:	b590      	push	{r4, r7, lr}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff fb84 	bl	8003660 <lfs_tole32>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3304      	adds	r3, #4
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	1d1c      	adds	r4, r3, #4
 8003f68:	4610      	mov	r0, r2
 8003f6a:	f7ff fb79 	bl	8003660 <lfs_tole32>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	6023      	str	r3, [r4, #0]
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd90      	pop	{r4, r7, pc}

08003f7a <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	43db      	mvns	r3, r3
 8003f86:	0fdb      	lsrs	r3, r3, #31
 8003f88:	b2db      	uxtb	r3, r3
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	059b      	lsls	r3, r3, #22
 8003fa2:	159b      	asrs	r3, r3, #22
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fa8:	bf0c      	ite	eq
 8003faa:	2301      	moveq	r3, #1
 8003fac:	2300      	movne	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	0d1b      	lsrs	r3, r3, #20
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003fce:	b29b      	uxth	r3, r3
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	0d1b      	lsrs	r3, r3, #20
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
 8003fee:	b29b      	uxth	r3, r3
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	0d1b      	lsrs	r3, r3, #20
 8004008:	b29b      	uxth	r3, r3
 800400a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800400e:	b29b      	uxth	r3, r3
}
 8004010:	4618      	mov	r0, r3
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	0d1b      	lsrs	r3, r3, #20
 8004028:	b2db      	uxtb	r3, r3
}
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff ffec 	bl	800401c <lfs_tag_chunk>
 8004044:	4603      	mov	r3, r0
 8004046:	b25b      	sxtb	r3, r3
}
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	0a9b      	lsrs	r3, r3, #10
 800405c:	b29b      	uxth	r3, r3
 800405e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004062:	b29b      	uxth	r3, r3
}
 8004064:	4618      	mov	r0, r3
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800407e:	4618      	mov	r0, r3
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff ff7f 	bl	8003f96 <lfs_tag_isdelete>
 8004098:	4603      	mov	r3, r0
 800409a:	461a      	mov	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4413      	add	r3, r2
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff ffe5 	bl	8004070 <lfs_tag_size>
 80040a6:	4603      	mov	r3, r0
 80040a8:	3304      	adds	r3, #4
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 80040b2:	b480      	push	{r7}
 80040b4:	b085      	sub	sp, #20
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	e012      	b.n	80040e8 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	4413      	add	r3, r2
 80040ca:	6819      	ldr	r1, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	4413      	add	r3, r2
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4403      	add	r3, r0
 80040de:	404a      	eors	r2, r1
 80040e0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3301      	adds	r3, #1
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	dde9      	ble.n	80040c2 <lfs_gstate_xor+0x10>
    }
}
 80040ee:	bf00      	nop
 80040f0:	bf00      	nop
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8004104:	2300      	movs	r3, #0
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	e00b      	b.n	8004122 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	4413      	add	r3, r2
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <lfs_gstate_iszero+0x20>
            return false;
 8004118:	2300      	movs	r3, #0
 800411a:	e006      	b.n	800412a <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	3301      	adds	r3, #1
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b02      	cmp	r3, #2
 8004126:	ddf0      	ble.n	800410a <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8004128:	2301      	movs	r3, #1
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff ff94 	bl	8004070 <lfs_tag_size>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	bf14      	ite	ne
 800414e:	2301      	movne	r3, #1
 8004150:	2300      	moveq	r3, #0
 8004152:	b2db      	uxtb	r3, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff ff81 	bl	8004070 <lfs_tag_size>
 800416e:	4603      	mov	r3, r0
 8004170:	b2db      	uxtb	r3, r3
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800417a:	b580      	push	{r7, lr}
 800417c:	b082      	sub	sp, #8
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff ff18 	bl	8003fbc <lfs_tag_type1>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	bf14      	ite	ne
 8004192:	2301      	movne	r3, #1
 8004194:	2300      	moveq	r3, #0
 8004196:	b2db      	uxtb	r3, r3
}
 8004198:	4618      	mov	r0, r3
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff ff5f 	bl	8004070 <lfs_tag_size>
 80041b2:	4603      	mov	r3, r0
 80041b4:	0a5b      	lsrs	r3, r3, #9
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bf14      	ite	ne
 80041ba:	2301      	movne	r3, #1
 80041bc:	2300      	moveq	r3, #0
 80041be:	b2db      	uxtb	r3, r3
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fef0 	bl	8003fbc <lfs_tag_type1>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <lfs_gstate_hasmovehere+0x30>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3304      	adds	r3, #4
 80041e6:	6839      	ldr	r1, [r7, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff fe3b 	bl	8003e64 <lfs_pair_cmp>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <lfs_gstate_hasmovehere+0x30>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <lfs_gstate_hasmovehere+0x32>
 80041f8:	2300      	movs	r3, #0
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	b2db      	uxtb	r3, r3
}
 8004200:	4618      	mov	r0, r3
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff fa18 	bl	800364a <lfs_fromle32>
 800421a:	4602      	mov	r2, r0
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff fa10 	bl	800364a <lfs_fromle32>
 800422a:	4602      	mov	r2, r0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fa08 	bl	800364a <lfs_fromle32>
 800423a:	4602      	mov	r2, r0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	609a      	str	r2, [r3, #8]
}
 8004240:	bf00      	nop
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fa03 	bl	8003660 <lfs_tole32>
 800425a:	4602      	mov	r2, r0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff f9fb 	bl	8003660 <lfs_tole32>
 800426a:	4602      	mov	r2, r0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff f9f3 	bl	8003660 <lfs_tole32>
 800427a:	4602      	mov	r2, r0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	609a      	str	r2, [r3, #8]
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff f9d8 	bl	800364a <lfs_fromle32>
 800429a:	4602      	mov	r2, r0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff f9d0 	bl	800364a <lfs_fromle32>
 80042aa:	4602      	mov	r2, r0
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	605a      	str	r2, [r3, #4]
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff f9cb 	bl	8003660 <lfs_tole32>
 80042ca:	4602      	mov	r2, r0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff f9c3 	bl	8003660 <lfs_tole32>
 80042da:	4602      	mov	r2, r0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	605a      	str	r2, [r3, #4]
}
 80042e0:	bf00      	nop
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff f9a8 	bl	800364a <lfs_fromle32>
 80042fa:	4602      	mov	r2, r0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff f9a0 	bl	800364a <lfs_fromle32>
 800430a:	4602      	mov	r2, r0
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	605a      	str	r2, [r3, #4]
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff f99b 	bl	8003660 <lfs_tole32>
 800432a:	4602      	mov	r2, r0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff f993 	bl	8003660 <lfs_tole32>
 800433a:	4602      	mov	r2, r0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	605a      	str	r2, [r3, #4]
}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff f978 	bl	800364a <lfs_fromle32>
 800435a:	4602      	mov	r2, r0
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff f970 	bl	800364a <lfs_fromle32>
 800436a:	4602      	mov	r2, r0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff f968 	bl	800364a <lfs_fromle32>
 800437a:	4602      	mov	r2, r0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff f960 	bl	800364a <lfs_fromle32>
 800438a:	4602      	mov	r2, r0
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff f958 	bl	800364a <lfs_fromle32>
 800439a:	4602      	mov	r2, r0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff f950 	bl	800364a <lfs_fromle32>
 80043aa:	4602      	mov	r2, r0
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	615a      	str	r2, [r3, #20]
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff f94b 	bl	8003660 <lfs_tole32>
 80043ca:	4602      	mov	r2, r0
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff f943 	bl	8003660 <lfs_tole32>
 80043da:	4602      	mov	r2, r0
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff f93b 	bl	8003660 <lfs_tole32>
 80043ea:	4602      	mov	r2, r0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff f933 	bl	8003660 <lfs_tole32>
 80043fa:	4602      	mov	r2, r0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff f92b 	bl	8003660 <lfs_tole32>
 800440a:	4602      	mov	r2, r0
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff f923 	bl	8003660 <lfs_tole32>
 800441a:	4602      	mov	r2, r0
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	615a      	str	r2, [r3, #20]
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8004432:	1d3b      	adds	r3, r7, #4
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	e009      	b.n	800444c <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d101      	bne.n	8004446 <lfs_mlist_isopen+0x1e>
            return true;
 8004442:	2301      	movs	r3, #1
 8004444:	e007      	b.n	8004456 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1f1      	bne.n	8004438 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8004462:	b480      	push	{r7}
 8004464:	b085      	sub	sp, #20
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3328      	adds	r3, #40	@ 0x28
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	e00d      	b.n	8004490 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d105      	bne.n	800448a <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	601a      	str	r2, [r3, #0]
            break;
 8004488:	e007      	b.n	800449a <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1ed      	bne.n	8004474 <lfs_mlist_remove+0x12>
        }
    }
}
 8004498:	bf00      	nop
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 80044d4:	4b03      	ldr	r3, [pc, #12]	@ (80044e4 <lfs_fs_disk_version+0x18>)
    }
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	00020001 	.word	0x00020001

080044e8 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff ffeb 	bl	80044cc <lfs_fs_disk_version>
 80044f6:	4603      	mov	r3, r0
 80044f8:	0c1b      	lsrs	r3, r3, #16
 80044fa:	b29b      	uxth	r3, r3

}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff ffdd 	bl	80044cc <lfs_fs_disk_version>
 8004512:	4603      	mov	r3, r0
 8004514:	b29b      	uxth	r3, r3
}
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	661a      	str	r2, [r3, #96]	@ 0x60
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 800453a:	b580      	push	{r7, lr}
 800453c:	b082      	sub	sp, #8
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->lookahead.next = 0;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff ffe5 	bl	800451e <lfs_alloc_ckpoint>
}
 8004554:	bf00      	nop
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004576:	4413      	add	r3, r2
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 800457c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004580:	fb01 f202 	mul.w	r2, r1, r2
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	429a      	cmp	r2, r3
 8004590:	d212      	bcs.n	80045b8 <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	08db      	lsrs	r3, r3, #3
 800459a:	441a      	add	r2, r3
 800459c:	7811      	ldrb	r1, [r2, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	f002 0207 	and.w	r2, r2, #7
 80045a4:	2001      	movs	r0, #1
 80045a6:	fa00 f202 	lsl.w	r2, r0, r2
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 80045b0:	4403      	add	r3, r0
 80045b2:	430a      	orrs	r2, r1
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
	...

080045c8 <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d8:	4413      	add	r3, r2
            % lfs->block_count;
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80045de:	fbb3 f1f2 	udiv	r1, r3, r2
 80045e2:	fb01 f202 	mul.w	r2, r1, r2
 80045e6:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs->lookahead.next = 0;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    lfs->lookahead.size = lfs_min(
 80045f8:	00da      	lsls	r2, r3, #3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045fe:	4619      	mov	r1, r3
 8004600:	4610      	mov	r0, r2
 8004602:	f7fe ffb2 	bl	800356a <lfs_min>
 8004606:	4602      	mov	r2, r0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	659a      	str	r2, [r3, #88]	@ 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004616:	461a      	mov	r2, r3
 8004618:	2100      	movs	r1, #0
 800461a:	f006 f937 	bl	800a88c <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 800461e:	2301      	movs	r3, #1
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	4909      	ldr	r1, [pc, #36]	@ (8004648 <lfs_alloc_scan+0x80>)
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f004 ff15 	bl	8009454 <lfs_fs_traverse_>
 800462a:	60f8      	str	r0, [r7, #12]
    if (err) {
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d004      	beq.n	800463c <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff ff81 	bl	800453a <lfs_alloc_drop>
        return err;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	e000      	b.n	800463e <lfs_alloc_scan+0x76>
    }

    return 0;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	0800455d 	.word	0x0800455d

0800464c <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af02      	add	r7, sp, #8
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 8004656:	e04d      	b.n	80046f4 <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004660:	08db      	lsrs	r3, r3, #3
 8004662:	4413      	add	r3, r2
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800466c:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8004670:	fa22 f303 	lsr.w	r3, r2, r3
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d131      	bne.n	80046e0 <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004684:	4413      	add	r3, r2
                        % lfs->block_count;
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800468a:	fbb3 f1f2 	udiv	r1, r3, r2
 800468e:	fb01 f202 	mul.w	r2, r1, r2
 8004692:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a6:	1e5a      	subs	r2, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	661a      	str	r2, [r3, #96]	@ 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d211      	bcs.n	80046dc <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c0:	08db      	lsrs	r3, r3, #3
 80046c2:	4413      	add	r3, r2
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046cc:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80046d0:	fa22 f303 	lsr.w	r3, r2, r3
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1dd      	bne.n	8004698 <lfs_alloc+0x4c>
                        return 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	e032      	b.n	8004746 <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ee:	1e5a      	subs	r2, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	661a      	str	r2, [r3, #96]	@ 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d3ab      	bcc.n	8004658 <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004704:	2b00      	cmp	r3, #0
 8004706:	d116      	bne.n	8004736 <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004710:	4413      	add	r3, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004716:	fbb3 f1f2 	udiv	r1, r3, r2
 800471a:	fb01 f202 	mul.w	r2, r1, r2
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	4a0b      	ldr	r2, [pc, #44]	@ (8004750 <lfs_alloc+0x104>)
 8004722:	9200      	str	r2, [sp, #0]
 8004724:	f240 22b1 	movw	r2, #689	@ 0x2b1
 8004728:	490a      	ldr	r1, [pc, #40]	@ (8004754 <lfs_alloc+0x108>)
 800472a:	480b      	ldr	r0, [pc, #44]	@ (8004758 <lfs_alloc+0x10c>)
 800472c:	f006 f88c 	bl	800a848 <iprintf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 8004730:	f06f 031b 	mvn.w	r3, #27
 8004734:	e007      	b.n	8004746 <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff ff46 	bl	80045c8 <lfs_alloc_scan>
 800473c:	60f8      	str	r0, [r7, #12]
        if(err) {
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d088      	beq.n	8004656 <lfs_alloc+0xa>
            return err;
 8004744:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	0800c3c4 	.word	0x0800c3c4
 8004754:	0800c2b4 	.word	0x0800c2b4
 8004758:	0800c398 	.word	0x0800c398

0800475c <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800475c:	b590      	push	{r4, r7, lr}
 800475e:	b08f      	sub	sp, #60	@ 0x3c
 8004760:	af04      	add	r7, sp, #16
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8004776:	2300      	movs	r3, #0
 8004778:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	333c      	adds	r3, #60	@ 0x3c
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	4611      	mov	r1, r2
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fd20 	bl	80041c8 <lfs_gstate_hasmovehere>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 80ca 	beq.w	8004924 <lfs_dir_getslice+0x1c8>
            lfs_tag_id(gmask) != 0) {
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff fc5d 	bl	8004050 <lfs_tag_id>
 8004796:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80c3 	beq.w	8004924 <lfs_dir_getslice+0x1c8>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff fc54 	bl	8004050 <lfs_tag_id>
 80047a8:	4603      	mov	r3, r0
 80047aa:	461c      	mov	r4, r3
 80047ac:	6838      	ldr	r0, [r7, #0]
 80047ae:	f7ff fc4f 	bl	8004050 <lfs_tag_id>
 80047b2:	4603      	mov	r3, r0
 80047b4:	429c      	cmp	r4, r3
 80047b6:	d102      	bne.n	80047be <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 80047b8:	f06f 0301 	mvn.w	r3, #1
 80047bc:	e0be      	b.n	800493c <lfs_dir_getslice+0x1e0>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff fc44 	bl	8004050 <lfs_tag_id>
 80047c8:	4603      	mov	r3, r0
 80047ca:	461c      	mov	r4, r3
 80047cc:	6838      	ldr	r0, [r7, #0]
 80047ce:	f7ff fc3f 	bl	8004050 <lfs_tag_id>
 80047d2:	4603      	mov	r3, r0
 80047d4:	429c      	cmp	r4, r3
 80047d6:	f080 80a5 	bcs.w	8004924 <lfs_dir_getslice+0x1c8>
            gdiff -= LFS_MKTAG(0, 1, 0);
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80047e0:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80047e2:	e09f      	b.n	8004924 <lfs_dir_getslice+0x1c8>
        off -= lfs_tag_dsize(ntag);
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fc4f 	bl	800408a <lfs_tag_dsize>
 80047ec:	4602      	mov	r2, r0
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 80047f8:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 80047fe:	2204      	movs	r2, #4
 8004800:	9203      	str	r2, [sp, #12]
 8004802:	f107 0210 	add.w	r2, r7, #16
 8004806:	9202      	str	r2, [sp, #8]
 8004808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800480a:	9201      	str	r2, [sp, #4]
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	2304      	movs	r3, #4
 8004810:	460a      	mov	r2, r1
 8004812:	2100      	movs	r1, #0
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f7fe ff83 	bl	8003720 <lfs_bd_read>
 800481a:	61b8      	str	r0, [r7, #24]
        if (err) {
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <lfs_dir_getslice+0xca>
            return err;
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	e08a      	b.n	800493c <lfs_dir_getslice+0x1e0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	4618      	mov	r0, r3
 800482a:	f7fe ff25 	bl	8003678 <lfs_frombe32>
 800482e:	4602      	mov	r2, r0
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	4053      	eors	r3, r2
 8004834:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004838:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7ff fc08 	bl	8004050 <lfs_tag_id>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d02b      	beq.n	800489e <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8004846:	69f8      	ldr	r0, [r7, #28]
 8004848:	f7ff fbb8 	bl	8003fbc <lfs_tag_type1>
 800484c:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800484e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004852:	d124      	bne.n	800489e <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8004854:	69f8      	ldr	r0, [r7, #28]
 8004856:	f7ff fbfb 	bl	8004050 <lfs_tag_id>
 800485a:	4603      	mov	r3, r0
 800485c:	461c      	mov	r4, r3
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff fbf3 	bl	8004050 <lfs_tag_id>
 800486a:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800486c:	429c      	cmp	r4, r3
 800486e:	d816      	bhi.n	800489e <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	1ad2      	subs	r2, r2, r3
 8004876:	4b33      	ldr	r3, [pc, #204]	@ (8004944 <lfs_dir_getslice+0x1e8>)
 8004878:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800487a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800487e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	429a      	cmp	r2, r3
 8004886:	d102      	bne.n	800488e <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 8004888:	f06f 0301 	mvn.w	r3, #1
 800488c:	e056      	b.n	800493c <lfs_dir_getslice+0x1e0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800488e:	69f8      	ldr	r0, [r7, #28]
 8004890:	f7ff fbd1 	bl	8004036 <lfs_tag_splice>
 8004894:	4603      	mov	r3, r0
 8004896:	029a      	lsls	r2, r3, #10
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	4413      	add	r3, r2
 800489c:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	401a      	ands	r2, r3
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	6839      	ldr	r1, [r7, #0]
 80048a8:	1ac9      	subs	r1, r1, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	400b      	ands	r3, r1
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d138      	bne.n	8004924 <lfs_dir_getslice+0x1c8>
            if (lfs_tag_isdelete(tag)) {
 80048b2:	69f8      	ldr	r0, [r7, #28]
 80048b4:	f7ff fb6f 	bl	8003f96 <lfs_tag_isdelete>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <lfs_dir_getslice+0x168>
                return LFS_ERR_NOENT;
 80048be:	f06f 0301 	mvn.w	r3, #1
 80048c2:	e03b      	b.n	800493c <lfs_dir_getslice+0x1e0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 80048c4:	69f8      	ldr	r0, [r7, #28]
 80048c6:	f7ff fbd3 	bl	8004070 <lfs_tag_size>
 80048ca:	4603      	mov	r3, r0
 80048cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe fe4b 	bl	800356a <lfs_min>
 80048d4:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 80048d6:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80048e0:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 80048e2:	3204      	adds	r2, #4
 80048e4:	6979      	ldr	r1, [r7, #20]
 80048e6:	9103      	str	r1, [sp, #12]
 80048e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048ea:	9102      	str	r1, [sp, #8]
 80048ec:	9201      	str	r2, [sp, #4]
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	4602      	mov	r2, r0
 80048f4:	2100      	movs	r1, #0
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f7fe ff12 	bl	8003720 <lfs_bd_read>
 80048fc:	61b8      	str	r0, [r7, #24]
            if (err) {
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <lfs_dir_getslice+0x1ac>
                return err;
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	e019      	b.n	800493c <lfs_dir_getslice+0x1e0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8004908:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	18d0      	adds	r0, r2, r3
 800490e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	461a      	mov	r2, r3
 8004916:	2100      	movs	r1, #0
 8004918:	f005 ffb8 	bl	800a88c <memset>

            return tag + gdiff;
 800491c:	6a3a      	ldr	r2, [r7, #32]
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	4413      	add	r3, r2
 8004922:	e00b      	b.n	800493c <lfs_dir_getslice+0x1e0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff fbaf 	bl	800408a <lfs_tag_dsize>
 800492c:	4603      	mov	r3, r0
 800492e:	3304      	adds	r3, #4
 8004930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004932:	429a      	cmp	r2, r3
 8004934:	f4bf af56 	bcs.w	80047e4 <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 8004938:	f06f 0301 	mvn.w	r3, #1
}
 800493c:	4618      	mov	r0, r3
 800493e:	372c      	adds	r7, #44	@ 0x2c
 8004940:	46bd      	mov	sp, r7
 8004942:	bd90      	pop	{r4, r7, pc}
 8004944:	000ffc00 	.word	0x000ffc00

08004948 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af04      	add	r7, sp, #16
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8004956:	6838      	ldr	r0, [r7, #0]
 8004958:	f7ff fb8a 	bl	8004070 <lfs_tag_size>
 800495c:	4603      	mov	r3, r0
 800495e:	9302      	str	r3, [sp, #8]
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	9301      	str	r3, [sp, #4]
 8004964:	2300      	movs	r3, #0
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f7ff fef4 	bl	800475c <lfs_dir_getslice>
 8004974:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800497e:	b580      	push	{r7, lr}
 8004980:	b08c      	sub	sp, #48	@ 0x30
 8004982:	af04      	add	r7, sp, #16
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	607a      	str	r2, [r7, #4]
 800498a:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800498c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800498e:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8004990:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004994:	441a      	add	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	429a      	cmp	r2, r3
 800499e:	f240 80c0 	bls.w	8004b22 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 80049a2:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80049a6:	e0c1      	b.n	8004b2c <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80049a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049aa:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d03f      	beq.n	8004a32 <lfs_dir_getread+0xb4>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f113 0f02 	cmn.w	r3, #2
 80049ba:	d13a      	bne.n	8004a32 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 80049c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d232      	bcs.n	8004a32 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d324      	bcc.n	8004a20 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6859      	ldr	r1, [r3, #4]
 80049de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e0:	1acb      	subs	r3, r1, r3
 80049e2:	4413      	add	r3, r2
 80049e4:	4619      	mov	r1, r3
 80049e6:	69b8      	ldr	r0, [r7, #24]
 80049e8:	f7fe fdbf 	bl	800356a <lfs_min>
 80049ec:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80049f8:	1acb      	subs	r3, r1, r3
 80049fa:	4413      	add	r3, r2
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4619      	mov	r1, r3
 8004a00:	69f8      	ldr	r0, [r7, #28]
 8004a02:	f006 f80f 	bl	800aa24 <memcpy>

                data += diff;
 8004a06:	69fa      	ldr	r2, [r7, #28]
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	61fb      	str	r3, [r7, #28]
                off += diff;
 8004a0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	4413      	add	r3, r2
 8004a14:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8004a16:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8004a1e:	e080      	b.n	8004b22 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	4619      	mov	r1, r3
 8004a2a:	69b8      	ldr	r0, [r7, #24]
 8004a2c:	f7fe fd9d 	bl	800356a <lfs_min>
 8004a30:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f113 0f02 	cmn.w	r3, #2
 8004a3a:	d13a      	bne.n	8004ab2 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8004a46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d232      	bcs.n	8004ab2 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d324      	bcc.n	8004aa0 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6859      	ldr	r1, [r3, #4]
 8004a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a60:	1acb      	subs	r3, r1, r3
 8004a62:	4413      	add	r3, r2
 8004a64:	4619      	mov	r1, r3
 8004a66:	69b8      	ldr	r0, [r7, #24]
 8004a68:	f7fe fd7f 	bl	800356a <lfs_min>
 8004a6c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004a78:	1acb      	subs	r3, r1, r3
 8004a7a:	4413      	add	r3, r2
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	69f8      	ldr	r0, [r7, #28]
 8004a82:	f005 ffcf 	bl	800aa24 <memcpy>

                data += diff;
 8004a86:	69fa      	ldr	r2, [r7, #28]
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	61fb      	str	r3, [r7, #28]
                off += diff;
 8004a8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	4413      	add	r3, r2
 8004a94:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8004a96:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8004a9e:	e040      	b.n	8004b22 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	69b8      	ldr	r0, [r7, #24]
 8004aac:	f7fe fd5d 	bl	800356a <lfs_min>
 8004ab0:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	f06f 0201 	mvn.w	r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004ac4:	f7fe fd61 	bl	800358a <lfs_aligndown>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8004ace:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad2:	441a      	add	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	4619      	mov	r1, r3
 8004adc:	4610      	mov	r0, r2
 8004ade:	f7fe fd69 	bl	80035b4 <lfs_alignup>
 8004ae2:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8004aea:	4619      	mov	r1, r3
 8004aec:	4610      	mov	r0, r2
 8004aee:	f7fe fd3c 	bl	800356a <lfs_min>
 8004af2:	4602      	mov	r2, r0
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8004b00:	6839      	ldr	r1, [r7, #0]
 8004b02:	6889      	ldr	r1, [r1, #8]
 8004b04:	9102      	str	r1, [sp, #8]
 8004b06:	9201      	str	r2, [sp, #4]
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f7ff fe23 	bl	800475c <lfs_dir_getslice>
 8004b16:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	da01      	bge.n	8004b22 <lfs_dir_getread+0x1a4>
            return err;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	e004      	b.n	8004b2c <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8004b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f47f af3f 	bne.w	80049a8 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3720      	adds	r7, #32
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8004b34:	b590      	push	{r4, r7, lr}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <lfs_dir_traverse_filter+0x1e>
 8004b4e:	4b24      	ldr	r3, [pc, #144]	@ (8004be0 <lfs_dir_traverse_filter+0xac>)
 8004b50:	e000      	b.n	8004b54 <lfs_dir_traverse_filter+0x20>
 8004b52:	4b24      	ldr	r3, [pc, #144]	@ (8004be4 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8004b54:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	405a      	eors	r2, r3
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d014      	beq.n	8004b90 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff fa13 	bl	8003f96 <lfs_tag_isdelete>
 8004b70:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10c      	bne.n	8004b90 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	4a19      	ldr	r2, [pc, #100]	@ (8004be0 <lfs_dir_traverse_filter+0xac>)
 8004b7a:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	6819      	ldr	r1, [r3, #0]
 8004b80:	4b19      	ldr	r3, [pc, #100]	@ (8004be8 <lfs_dir_traverse_filter+0xb4>)
 8004b82:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8004b84:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8004b88:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d104      	bne.n	8004b9a <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
        return true;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e01e      	b.n	8004bd8 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8004b9a:	68b8      	ldr	r0, [r7, #8]
 8004b9c:	f7ff fa0e 	bl	8003fbc <lfs_tag_type1>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ba6:	d116      	bne.n	8004bd6 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8004ba8:	68b8      	ldr	r0, [r7, #8]
 8004baa:	f7ff fa51 	bl	8004050 <lfs_tag_id>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	461c      	mov	r4, r3
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff fa4a 	bl	8004050 <lfs_tag_id>
 8004bbc:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8004bbe:	429c      	cmp	r4, r3
 8004bc0:	d809      	bhi.n	8004bd6 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8004bc2:	68b8      	ldr	r0, [r7, #8]
 8004bc4:	f7ff fa37 	bl	8004036 <lfs_tag_splice>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	029a      	lsls	r2, r3, #10
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	441a      	add	r2, r3
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	601a      	str	r2, [r3, #0]
    }

    return false;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	371c      	adds	r7, #28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd90      	pop	{r4, r7, pc}
 8004be0:	7ffffc00 	.word	0x7ffffc00
 8004be4:	700ffc00 	.word	0x700ffc00
 8004be8:	000ffc00 	.word	0x000ffc00

08004bec <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8004bec:	b590      	push	{r4, r7, lr}
 8004bee:	b0c1      	sub	sp, #260	@ 0x104
 8004bf0:	af04      	add	r7, sp, #16
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 8004c00:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8004c0a:	6838      	ldr	r0, [r7, #0]
 8004c0c:	f7ff fa3d 	bl	800408a <lfs_tag_dsize>
 8004c10:	4602      	mov	r2, r0
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	441a      	add	r2, r3
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d237      	bcs.n	8004c8e <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 8004c1e:	6838      	ldr	r0, [r7, #0]
 8004c20:	f7ff fa33 	bl	800408a <lfs_tag_dsize>
 8004c24:	4602      	mov	r2, r0
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4413      	add	r3, r2
 8004c2a:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8004c2c:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8004c32:	2204      	movs	r2, #4
 8004c34:	9203      	str	r2, [sp, #12]
 8004c36:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8004c3a:	9202      	str	r2, [sp, #8]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	9201      	str	r2, [sp, #4]
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	2304      	movs	r3, #4
 8004c44:	460a      	mov	r2, r1
 8004c46:	2100      	movs	r1, #0
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f7fe fd69 	bl	8003720 <lfs_bd_read>
 8004c4e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 8004c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <lfs_dir_traverse+0x74>
                    return err;
 8004c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c5e:	e3a5      	b.n	80053ac <lfs_dir_traverse+0x7c0>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8004c60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fe fd08 	bl	8003678 <lfs_frombe32>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	4053      	eors	r3, r2
 8004c6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c72:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 8004c80:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004c84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 8004c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c8a:	603b      	str	r3, [r7, #0]
 8004c8c:	e01b      	b.n	8004cc6 <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 8004c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	dd13      	ble.n	8004cbe <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 8004c96:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 8004c9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 8004ca8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004cac:	3308      	adds	r3, #8
 8004cae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 8004cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004cbc:	e003      	b.n	8004cc6 <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 8004cc4:	e2a1      	b.n	800520a <lfs_dir_traverse+0x61e>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8004cc6:	4b7e      	ldr	r3, [pc, #504]	@ (8004ec0 <lfs_dir_traverse+0x2d4>)
 8004cc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8004ccc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cd2:	405a      	eors	r2, r3
 8004cd4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8004cd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004cdc:	400b      	ands	r3, r1
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f040 8284 	bne.w	80051ee <lfs_dir_traverse+0x602>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8004ce6:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8004cea:	f7ff f9b1 	bl	8004050 <lfs_tag_id>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 80ef 	beq.w	8004ed4 <lfs_dir_traverse+0x2e8>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8004cf6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d906      	bls.n	8004d0c <lfs_dir_traverse+0x120>
 8004cfe:	4b71      	ldr	r3, [pc, #452]	@ (8004ec4 <lfs_dir_traverse+0x2d8>)
 8004d00:	4a71      	ldr	r2, [pc, #452]	@ (8004ec8 <lfs_dir_traverse+0x2dc>)
 8004d02:	f240 31b6 	movw	r1, #950	@ 0x3b6
 8004d06:	4871      	ldr	r0, [pc, #452]	@ (8004ecc <lfs_dir_traverse+0x2e0>)
 8004d08:	f005 fb48 	bl	800a39c <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8004d0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d0e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004d12:	4613      	mov	r3, r2
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	1a9b      	subs	r3, r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	33f0      	adds	r3, #240	@ 0xf0
 8004d1c:	443b      	add	r3, r7
 8004d1e:	3b98      	subs	r3, #152	@ 0x98
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004d28:	4613      	mov	r3, r2
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	1a9b      	subs	r3, r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	33f0      	adds	r3, #240	@ 0xf0
 8004d32:	443b      	add	r3, r7
 8004d34:	3b94      	subs	r3, #148	@ 0x94
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004d3e:	4613      	mov	r3, r2
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	1a9b      	subs	r3, r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	33f0      	adds	r3, #240	@ 0xf0
 8004d48:	443b      	add	r3, r7
 8004d4a:	3b90      	subs	r3, #144	@ 0x90
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004d54:	4613      	mov	r3, r2
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	1a9b      	subs	r3, r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	33f0      	adds	r3, #240	@ 0xf0
 8004d5e:	443b      	add	r3, r7
 8004d60:	3b8c      	subs	r3, #140	@ 0x8c
 8004d62:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	33f0      	adds	r3, #240	@ 0xf0
 8004d76:	443b      	add	r3, r7
 8004d78:	3b88      	subs	r3, #136	@ 0x88
 8004d7a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004d84:	4613      	mov	r3, r2
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	1a9b      	subs	r3, r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	33f0      	adds	r3, #240	@ 0xf0
 8004d8e:	443b      	add	r3, r7
 8004d90:	3b84      	subs	r3, #132	@ 0x84
 8004d92:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	1a9b      	subs	r3, r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	33f0      	adds	r3, #240	@ 0xf0
 8004da6:	443b      	add	r3, r7
 8004da8:	3b80      	subs	r3, #128	@ 0x80
 8004daa:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004db4:	4613      	mov	r3, r2
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	33f0      	adds	r3, #240	@ 0xf0
 8004dbe:	443b      	add	r3, r7
 8004dc0:	3b7c      	subs	r3, #124	@ 0x7c
 8004dc2:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 8004dc6:	801a      	strh	r2, [r3, #0]
 8004dc8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004dcc:	4613      	mov	r3, r2
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	33f0      	adds	r3, #240	@ 0xf0
 8004dd6:	443b      	add	r3, r7
 8004dd8:	3b7a      	subs	r3, #122	@ 0x7a
 8004dda:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 8004dde:	801a      	strh	r2, [r3, #0]
 8004de0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004de4:	4613      	mov	r3, r2
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	1a9b      	subs	r3, r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	33f0      	adds	r3, #240	@ 0xf0
 8004dee:	443b      	add	r3, r7
 8004df0:	3b78      	subs	r3, #120	@ 0x78
 8004df2:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 8004df6:	801a      	strh	r2, [r3, #0]
 8004df8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	1a9b      	subs	r3, r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	33f0      	adds	r3, #240	@ 0xf0
 8004e06:	443b      	add	r3, r7
 8004e08:	3b74      	subs	r3, #116	@ 0x74
 8004e0a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004e14:	4613      	mov	r3, r2
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	33f0      	adds	r3, #240	@ 0xf0
 8004e1e:	443b      	add	r3, r7
 8004e20:	3b70      	subs	r3, #112	@ 0x70
 8004e22:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	1a9b      	subs	r3, r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	33f0      	adds	r3, #240	@ 0xf0
 8004e36:	443b      	add	r3, r7
 8004e38:	3b6c      	subs	r3, #108	@ 0x6c
 8004e3a:	6019      	str	r1, [r3, #0]
 8004e3c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004e40:	4613      	mov	r3, r2
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	33f0      	adds	r3, #240	@ 0xf0
 8004e4a:	443b      	add	r3, r7
 8004e4c:	3b68      	subs	r3, #104	@ 0x68
 8004e4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004e58:	4613      	mov	r3, r2
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	1a9b      	subs	r3, r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	33f0      	adds	r3, #240	@ 0xf0
 8004e62:	443b      	add	r3, r7
 8004e64:	3b68      	subs	r3, #104	@ 0x68
 8004e66:	3304      	adds	r3, #4
 8004e68:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8004e6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e70:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8004e74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004e78:	3301      	adds	r3, #1
 8004e7a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 8004e90:	2300      	movs	r3, #0
 8004e92:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 8004e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed0 <lfs_dir_traverse+0x2e4>)
 8004e9e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 8004ea2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004ea6:	1e5a      	subs	r2, r3, #1
 8004ea8:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8004eac:	4613      	mov	r3, r2
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	1a9b      	subs	r3, r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	3328      	adds	r3, #40	@ 0x28
 8004eb6:	440b      	add	r3, r1
 8004eb8:	3304      	adds	r3, #4
 8004eba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 8004ebe:	e19d      	b.n	80051fc <lfs_dir_traverse+0x610>
 8004ec0:	7ff00000 	.word	0x7ff00000
 8004ec4:	0800c3c8 	.word	0x0800c3c8
 8004ec8:	0800cfcc 	.word	0x0800cfcc
 8004ecc:	0800c2b4 	.word	0x0800c2b4
 8004ed0:	08004b35 	.word	0x08004b35
            }
        }

popped:
 8004ed4:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8004ed6:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8004eda:	f7ff f8b9 	bl	8004050 <lfs_tag_id>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d015      	beq.n	8004f10 <lfs_dir_traverse+0x324>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8004ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff f8b2 	bl	8004050 <lfs_tag_id>
 8004eec:	4603      	mov	r3, r0
 8004eee:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8004ef0:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	f200 817c 	bhi.w	80051f2 <lfs_dir_traverse+0x606>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8004efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff f8a7 	bl	8004050 <lfs_tag_id>
 8004f02:	4603      	mov	r3, r0
 8004f04:	461a      	mov	r2, r3
 8004f06:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	f240 8171 	bls.w	80051f2 <lfs_dir_traverse+0x606>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8004f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff f872 	bl	8003ffc <lfs_tag_type3>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f43f ae75 	beq.w	8004c0a <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8004f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff f86a 	bl	8003ffc <lfs_tag_type3>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f240 1301 	movw	r3, #257	@ 0x101
 8004f30:	429a      	cmp	r2, r3
 8004f32:	f040 80e0 	bne.w	80050f6 <lfs_dir_traverse+0x50a>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8004f36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f3a:	4ab1      	ldr	r2, [pc, #708]	@ (8005200 <lfs_dir_traverse+0x614>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	f000 815a 	beq.w	80051f6 <lfs_dir_traverse+0x60a>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8004f42:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004f46:	4613      	mov	r3, r2
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	1a9b      	subs	r3, r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	33f0      	adds	r3, #240	@ 0xf0
 8004f50:	443b      	add	r3, r7
 8004f52:	3b98      	subs	r3, #152	@ 0x98
 8004f54:	4618      	mov	r0, r3
 8004f56:	233c      	movs	r3, #60	@ 0x3c
 8004f58:	461a      	mov	r2, r3
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	f005 fc96 	bl	800a88c <memset>
 8004f60:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004f64:	4613      	mov	r3, r2
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	33f0      	adds	r3, #240	@ 0xf0
 8004f6e:	443b      	add	r3, r7
 8004f70:	3b98      	subs	r3, #152	@ 0x98
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	33f0      	adds	r3, #240	@ 0xf0
 8004f84:	443b      	add	r3, r7
 8004f86:	3b94      	subs	r3, #148	@ 0x94
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004f90:	4613      	mov	r3, r2
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	1a9b      	subs	r3, r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	33f0      	adds	r3, #240	@ 0xf0
 8004f9a:	443b      	add	r3, r7
 8004f9c:	3b90      	subs	r3, #144	@ 0x90
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	1a9b      	subs	r3, r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	33f0      	adds	r3, #240	@ 0xf0
 8004fb0:	443b      	add	r3, r7
 8004fb2:	3b8c      	subs	r3, #140	@ 0x8c
 8004fb4:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	1a9b      	subs	r3, r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	33f0      	adds	r3, #240	@ 0xf0
 8004fc8:	443b      	add	r3, r7
 8004fca:	3b88      	subs	r3, #136	@ 0x88
 8004fcc:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	1a9b      	subs	r3, r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	33f0      	adds	r3, #240	@ 0xf0
 8004fe0:	443b      	add	r3, r7
 8004fe2:	3b84      	subs	r3, #132	@ 0x84
 8004fe4:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004fee:	4613      	mov	r3, r2
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	1a9b      	subs	r3, r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	33f0      	adds	r3, #240	@ 0xf0
 8004ff8:	443b      	add	r3, r7
 8004ffa:	3b80      	subs	r3, #128	@ 0x80
 8004ffc:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005006:	4613      	mov	r3, r2
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	1a9b      	subs	r3, r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	33f0      	adds	r3, #240	@ 0xf0
 8005010:	443b      	add	r3, r7
 8005012:	3b7c      	subs	r3, #124	@ 0x7c
 8005014:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 8005018:	801a      	strh	r2, [r3, #0]
 800501a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800501e:	4613      	mov	r3, r2
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	1a9b      	subs	r3, r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	33f0      	adds	r3, #240	@ 0xf0
 8005028:	443b      	add	r3, r7
 800502a:	3b7a      	subs	r3, #122	@ 0x7a
 800502c:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 8005030:	801a      	strh	r2, [r3, #0]
 8005032:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005036:	4613      	mov	r3, r2
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	33f0      	adds	r3, #240	@ 0xf0
 8005040:	443b      	add	r3, r7
 8005042:	3b78      	subs	r3, #120	@ 0x78
 8005044:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 8005048:	801a      	strh	r2, [r3, #0]
 800504a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800504e:	4613      	mov	r3, r2
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	1a9b      	subs	r3, r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	33f0      	adds	r3, #240	@ 0xf0
 8005058:	443b      	add	r3, r7
 800505a:	3b74      	subs	r3, #116	@ 0x74
 800505c:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005066:	4613      	mov	r3, r2
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	1a9b      	subs	r3, r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	33f0      	adds	r3, #240	@ 0xf0
 8005070:	443b      	add	r3, r7
 8005072:	3b70      	subs	r3, #112	@ 0x70
 8005074:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8005078:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 800507a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800507e:	3301      	adds	r3, #1
 8005080:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8005084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005086:	4618      	mov	r0, r3
 8005088:	f7fe fff2 	bl	8004070 <lfs_tag_size>
 800508c:	4603      	mov	r3, r0
 800508e:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8005092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005094:	4618      	mov	r0, r3
 8005096:	f7fe ffdb 	bl	8004050 <lfs_tag_id>
 800509a:	4603      	mov	r3, r0
 800509c:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 80050a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a4:	60bb      	str	r3, [r7, #8]
            off = 0;
 80050a6:	2300      	movs	r3, #0
 80050a8:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 80050aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050ae:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 80050b0:	2300      	movs	r3, #0
 80050b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 80050b6:	2300      	movs	r3, #0
 80050b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 80050bc:	4b51      	ldr	r3, [pc, #324]	@ (8005204 <lfs_dir_traverse+0x618>)
 80050be:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 80050c2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80050c6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 80050ca:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 80050ce:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 80050d2:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 80050d6:	3301      	adds	r3, #1
 80050d8:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 80050dc:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 80050e0:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 80050ec:	4413      	add	r3, r2
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 80050f4:	e589      	b.n	8004c0a <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 80050f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7fe ff7f 	bl	8003ffc <lfs_tag_type3>
 80050fe:	4603      	mov	r3, r0
 8005100:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8005104:	d159      	bne.n	80051ba <lfs_dir_traverse+0x5ce>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8005106:	2300      	movs	r3, #0
 8005108:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800510c:	e04b      	b.n	80051a6 <lfs_dir_traverse+0x5ba>
                const struct lfs_attr *a = buffer;
 800510e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005112:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8005116:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800511a:	4613      	mov	r3, r2
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	461a      	mov	r2, r3
 8005124:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005128:	4413      	add	r3, r2
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005130:	051c      	lsls	r4, r3, #20
 8005132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005134:	4618      	mov	r0, r3
 8005136:	f7fe ff8b 	bl	8004050 <lfs_tag_id>
 800513a:	4603      	mov	r3, r0
 800513c:	461a      	mov	r2, r3
 800513e:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 8005142:	4413      	add	r3, r2
 8005144:	029b      	lsls	r3, r3, #10
 8005146:	ea44 0103 	orr.w	r1, r4, r3
 800514a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800514e:	4613      	mov	r3, r2
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	4413      	add	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	461a      	mov	r2, r3
 8005158:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800515c:	4413      	add	r3, r2
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8005162:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005166:	4613      	mov	r3, r2
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	4413      	add	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	461a      	mov	r2, r3
 8005170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005174:	4413      	add	r3, r2
 8005176:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8005178:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800517c:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8005180:	4798      	blx	r3
 8005182:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 8005186:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800518a:	2b00      	cmp	r3, #0
 800518c:	da02      	bge.n	8005194 <lfs_dir_traverse+0x5a8>
                    return res;
 800518e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005192:	e10b      	b.n	80053ac <lfs_dir_traverse+0x7c0>
                }

                if (res) {
 8005194:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005198:	2b00      	cmp	r3, #0
 800519a:	d12e      	bne.n	80051fa <lfs_dir_traverse+0x60e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800519c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051a0:	3301      	adds	r3, #1
 80051a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7fe ff61 	bl	8004070 <lfs_tag_size>
 80051ae:	4602      	mov	r2, r0
 80051b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d3aa      	bcc.n	800510e <lfs_dir_traverse+0x522>
 80051b8:	e527      	b.n	8004c0a <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 80051ba:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 80051be:	029a      	lsls	r2, r3, #10
 80051c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051c2:	18d1      	adds	r1, r2, r3
 80051c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051c8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80051cc:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80051d0:	4798      	blx	r3
 80051d2:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 80051d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80051da:	2b00      	cmp	r3, #0
 80051dc:	da02      	bge.n	80051e4 <lfs_dir_traverse+0x5f8>
                return res;
 80051de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80051e2:	e0e3      	b.n	80053ac <lfs_dir_traverse+0x7c0>
            }

            if (res) {
 80051e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10d      	bne.n	8005208 <lfs_dir_traverse+0x61c>
 80051ec:	e50d      	b.n	8004c0a <lfs_dir_traverse+0x1e>
                continue;
 80051ee:	bf00      	nop
 80051f0:	e50b      	b.n	8004c0a <lfs_dir_traverse+0x1e>
            continue;
 80051f2:	bf00      	nop
 80051f4:	e509      	b.n	8004c0a <lfs_dir_traverse+0x1e>
                continue;
 80051f6:	bf00      	nop
 80051f8:	e507      	b.n	8004c0a <lfs_dir_traverse+0x1e>
                    break;
 80051fa:	bf00      	nop
        {
 80051fc:	e505      	b.n	8004c0a <lfs_dir_traverse+0x1e>
 80051fe:	bf00      	nop
 8005200:	08004b35 	.word	0x08004b35
 8005204:	600ffc00 	.word	0x600ffc00
                break;
 8005208:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800520a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800520e:	2b00      	cmp	r3, #0
 8005210:	f000 80ca 	beq.w	80053a8 <lfs_dir_traverse+0x7bc>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8005214:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005218:	1e5a      	subs	r2, r3, #1
 800521a:	4613      	mov	r3, r2
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	1a9b      	subs	r3, r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	33f0      	adds	r3, #240	@ 0xf0
 8005224:	443b      	add	r3, r7
 8005226:	3b98      	subs	r3, #152	@ 0x98
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 800522c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005230:	1e5a      	subs	r2, r3, #1
 8005232:	4613      	mov	r3, r2
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	1a9b      	subs	r3, r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	33f0      	adds	r3, #240	@ 0xf0
 800523c:	443b      	add	r3, r7
 800523e:	3b94      	subs	r3, #148	@ 0x94
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8005244:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005248:	1e5a      	subs	r2, r3, #1
 800524a:	4613      	mov	r3, r2
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	1a9b      	subs	r3, r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	33f0      	adds	r3, #240	@ 0xf0
 8005254:	443b      	add	r3, r7
 8005256:	3b90      	subs	r3, #144	@ 0x90
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 800525c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005260:	1e5a      	subs	r2, r3, #1
 8005262:	4613      	mov	r3, r2
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	1a9b      	subs	r3, r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	33f0      	adds	r3, #240	@ 0xf0
 800526c:	443b      	add	r3, r7
 800526e:	3b8c      	subs	r3, #140	@ 0x8c
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 8005276:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800527a:	1e5a      	subs	r2, r3, #1
 800527c:	4613      	mov	r3, r2
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	33f0      	adds	r3, #240	@ 0xf0
 8005286:	443b      	add	r3, r7
 8005288:	3b88      	subs	r3, #136	@ 0x88
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 8005290:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005294:	1e5a      	subs	r2, r3, #1
 8005296:	4613      	mov	r3, r2
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	1a9b      	subs	r3, r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	33f0      	adds	r3, #240	@ 0xf0
 80052a0:	443b      	add	r3, r7
 80052a2:	3b84      	subs	r3, #132	@ 0x84
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 80052aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80052ae:	1e5a      	subs	r2, r3, #1
 80052b0:	4613      	mov	r3, r2
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	1a9b      	subs	r3, r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	33f0      	adds	r3, #240	@ 0xf0
 80052ba:	443b      	add	r3, r7
 80052bc:	3b80      	subs	r3, #128	@ 0x80
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 80052c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80052c8:	1e5a      	subs	r2, r3, #1
 80052ca:	4613      	mov	r3, r2
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	1a9b      	subs	r3, r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	33f0      	adds	r3, #240	@ 0xf0
 80052d4:	443b      	add	r3, r7
 80052d6:	3b7c      	subs	r3, #124	@ 0x7c
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 80052de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80052e2:	1e5a      	subs	r2, r3, #1
 80052e4:	4613      	mov	r3, r2
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	1a9b      	subs	r3, r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	33f0      	adds	r3, #240	@ 0xf0
 80052ee:	443b      	add	r3, r7
 80052f0:	3b7a      	subs	r3, #122	@ 0x7a
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 80052f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80052fc:	1e5a      	subs	r2, r3, #1
 80052fe:	4613      	mov	r3, r2
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	1a9b      	subs	r3, r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	33f0      	adds	r3, #240	@ 0xf0
 8005308:	443b      	add	r3, r7
 800530a:	3b78      	subs	r3, #120	@ 0x78
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 8005312:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005316:	1e5a      	subs	r2, r3, #1
 8005318:	4613      	mov	r3, r2
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	1a9b      	subs	r3, r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	33f0      	adds	r3, #240	@ 0xf0
 8005322:	443b      	add	r3, r7
 8005324:	3b74      	subs	r3, #116	@ 0x74
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 800532c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005330:	1e5a      	subs	r2, r3, #1
 8005332:	4613      	mov	r3, r2
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	1a9b      	subs	r3, r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	33f0      	adds	r3, #240	@ 0xf0
 800533c:	443b      	add	r3, r7
 800533e:	3b70      	subs	r3, #112	@ 0x70
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 8005346:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800534a:	1e5a      	subs	r2, r3, #1
 800534c:	4613      	mov	r3, r2
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	33f0      	adds	r3, #240	@ 0xf0
 8005356:	443b      	add	r3, r7
 8005358:	3b6c      	subs	r3, #108	@ 0x6c
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 800535e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005362:	1e5a      	subs	r2, r3, #1
 8005364:	4613      	mov	r3, r2
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	1a9b      	subs	r3, r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	33f0      	adds	r3, #240	@ 0xf0
 800536e:	443b      	add	r3, r7
 8005370:	3b68      	subs	r3, #104	@ 0x68
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 8005378:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800537c:	1e5a      	subs	r2, r3, #1
 800537e:	4613      	mov	r3, r2
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	1a9b      	subs	r3, r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	33f0      	adds	r3, #240	@ 0xf0
 8005388:	443b      	add	r3, r7
 800538a:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 800538e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005392:	3204      	adds	r2, #4
 8005394:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005398:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 800539c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80053a0:	3b01      	subs	r3, #1
 80053a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 80053a6:	e596      	b.n	8004ed6 <lfs_dir_traverse+0x2ea>
    } else {
        return res;
 80053a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	37f4      	adds	r7, #244	@ 0xf4
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd90      	pop	{r4, r7, pc}

080053b4 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80053b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053b6:	b0a5      	sub	sp, #148	@ 0x94
 80053b8:	af04      	add	r7, sp, #16
 80053ba:	6178      	str	r0, [r7, #20]
 80053bc:	6139      	str	r1, [r7, #16]
 80053be:	60fa      	str	r2, [r7, #12]
 80053c0:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 80053c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053c6:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00f      	beq.n	80053f0 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053d8:	429a      	cmp	r2, r3
 80053da:	d206      	bcs.n	80053ea <lfs_dir_fetchmatch+0x36>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3304      	adds	r3, #4
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d302      	bcc.n	80053f0 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 80053ea:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80053ee:	e3a4      	b.n	8005b3a <lfs_dir_fetchmatch+0x786>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 80053f0:	2300      	movs	r3, #0
 80053f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053f4:	2300      	movs	r3, #0
 80053f6:	64bb      	str	r3, [r7, #72]	@ 0x48
    int r = 0;
 80053f8:	2300      	movs	r3, #0
 80053fa:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 80053fc:	2300      	movs	r3, #0
 80053fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8005400:	e05a      	b.n	80054b8 <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 8005402:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8005404:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800540c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800540e:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8005412:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005414:	0092      	lsls	r2, r2, #2
 8005416:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8005418:	2104      	movs	r1, #4
 800541a:	9103      	str	r1, [sp, #12]
 800541c:	9202      	str	r2, [sp, #8]
 800541e:	2200      	movs	r2, #0
 8005420:	9201      	str	r2, [sp, #4]
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	2304      	movs	r3, #4
 8005426:	4602      	mov	r2, r0
 8005428:	2100      	movs	r1, #0
 800542a:	6978      	ldr	r0, [r7, #20]
 800542c:	f7fe f978 	bl	8003720 <lfs_bd_read>
 8005430:	64f8      	str	r0, [r7, #76]	@ 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 8005432:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	3378      	adds	r3, #120	@ 0x78
 8005438:	f107 0208 	add.w	r2, r7, #8
 800543c:	4413      	add	r3, r2
 800543e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005442:	4618      	mov	r0, r3
 8005444:	f7fe f901 	bl	800364a <lfs_fromle32>
 8005448:	4602      	mov	r2, r0
 800544a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	3378      	adds	r3, #120	@ 0x78
 8005450:	f107 0108 	add.w	r1, r7, #8
 8005454:	440b      	add	r3, r1
 8005456:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 800545a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <lfs_dir_fetchmatch+0xb8>
 8005460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005462:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005466:	d001      	beq.n	800546c <lfs_dir_fetchmatch+0xb8>
            return err;
 8005468:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800546a:	e366      	b.n	8005b3a <lfs_dir_fetchmatch+0x786>
        }

        if (err != LFS_ERR_CORRUPT &&
 800546c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800546e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005472:	d01e      	beq.n	80054b2 <lfs_dir_fetchmatch+0xfe>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8005474:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	3378      	adds	r3, #120	@ 0x78
 800547a:	f107 0208 	add.w	r2, r7, #8
 800547e:	4413      	add	r3, r2
 8005480:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8005484:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005486:	3301      	adds	r3, #1
 8005488:	2b00      	cmp	r3, #0
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	bfb8      	it	lt
 8005490:	425b      	neglt	r3, r3
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	3378      	adds	r3, #120	@ 0x78
 8005496:	f107 0108 	add.w	r1, r7, #8
 800549a:	440b      	add	r3, r1
 800549c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80054a0:	4619      	mov	r1, r3
 80054a2:	4610      	mov	r0, r2
 80054a4:	f7fe f8c3 	bl	800362e <lfs_scmp>
 80054a8:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	dd01      	ble.n	80054b2 <lfs_dir_fetchmatch+0xfe>
            r = i;
 80054ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054b0:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 80054b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054b4:	3301      	adds	r3, #1
 80054b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80054b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	dda1      	ble.n	8005402 <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 80054be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	bfb8      	it	lt
 80054c8:	425b      	neglt	r3, r3
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 80054d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054d8:	3301      	adds	r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	bfb8      	it	lt
 80054e2:	425b      	neglt	r3, r3
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4413      	add	r3, r2
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 80054f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	bfb8      	it	lt
 80054fa:	425b      	neglt	r3, r3
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	3378      	adds	r3, #120	@ 0x78
 8005500:	f107 0208 	add.w	r2, r7, #8
 8005504:	4413      	add	r3, r2
 8005506:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	2200      	movs	r2, #0
 8005512:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8005514:	2300      	movs	r3, #0
 8005516:	673b      	str	r3, [r7, #112]	@ 0x70
 8005518:	e2fb      	b.n	8005b12 <lfs_dir_fetchmatch+0x75e>
        lfs_off_t off = 0;
 800551a:	2300      	movs	r3, #0
 800551c:	66fb      	str	r3, [r7, #108]	@ 0x6c
        lfs_tag_t ptag = 0xffffffff;
 800551e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005522:	66bb      	str	r3, [r7, #104]	@ 0x68

        uint16_t tempcount = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800552a:	4aa9      	ldr	r2, [pc, #676]	@ (80057d0 <lfs_dir_fetchmatch+0x41c>)
 800552c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005530:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005534:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8005538:	2300      	movs	r3, #0
 800553a:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        lfs_stag_t tempbesttag = besttag;
 800553e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005540:	663b      	str	r3, [r7, #96]	@ 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 8005542:	2300      	movs	r3, #0
 8005544:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        bool hasfcrc = false;
 8005548:	2300      	movs	r3, #0
 800554a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	4618      	mov	r0, r3
 8005554:	f7fe f884 	bl	8003660 <lfs_tole32>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	3308      	adds	r3, #8
 8005562:	2204      	movs	r2, #4
 8005564:	4619      	mov	r1, r3
 8005566:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800556a:	f004 fed9 	bl	800a320 <lfs_crc>
 800556e:	4603      	mov	r3, r0
 8005570:	633b      	str	r3, [r7, #48]	@ 0x30
        dir->rev = lfs_fromle32(dir->rev);
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	4618      	mov	r0, r3
 8005578:	f7fe f867 	bl	800364a <lfs_fromle32>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8005582:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8005584:	f7fe fd81 	bl	800408a <lfs_tag_dsize>
 8005588:	4602      	mov	r2, r0
 800558a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800558c:	4413      	add	r3, r2
 800558e:	66fb      	str	r3, [r7, #108]	@ 0x6c
            int err = lfs_bd_read(lfs,
 8005590:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005596:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2204      	movs	r2, #4
 800559e:	9203      	str	r2, [sp, #12]
 80055a0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80055a4:	9202      	str	r2, [sp, #8]
 80055a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055a8:	9201      	str	r2, [sp, #4]
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	4603      	mov	r3, r0
 80055ae:	460a      	mov	r2, r1
 80055b0:	2100      	movs	r1, #0
 80055b2:	6978      	ldr	r0, [r7, #20]
 80055b4:	f7fe f8b4 	bl	8003720 <lfs_bd_read>
 80055b8:	65b8      	str	r0, [r7, #88]	@ 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 80055ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d006      	beq.n	80055ce <lfs_dir_fetchmatch+0x21a>
                if (err == LFS_ERR_CORRUPT) {
 80055c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055c2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80055c6:	f000 81d6 	beq.w	8005976 <lfs_dir_fetchmatch+0x5c2>
                    // can't continue?
                    break;
                }
                return err;
 80055ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055cc:	e2b5      	b.n	8005b3a <lfs_dir_fetchmatch+0x786>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 80055ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d0:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80055d4:	2204      	movs	r2, #4
 80055d6:	4618      	mov	r0, r3
 80055d8:	f004 fea2 	bl	800a320 <lfs_crc>
 80055dc:	4603      	mov	r3, r0
 80055de:	633b      	str	r3, [r7, #48]	@ 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 80055e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe f848 	bl	8003678 <lfs_frombe32>
 80055e8:	4602      	mov	r2, r0
 80055ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055ec:	4053      	eors	r3, r2
 80055ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 80055f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fe fcc1 	bl	8003f7a <lfs_tag_isvalid>
 80055f8:	4603      	mov	r3, r0
 80055fa:	f083 0301 	eor.w	r3, r3, #1
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00b      	beq.n	800561c <lfs_dir_fetchmatch+0x268>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 8005604:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8005606:	f7fe fce9 	bl	8003fdc <lfs_tag_type2>
 800560a:	4603      	mov	r3, r0
 800560c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005610:	bf0c      	ite	eq
 8005612:	2301      	moveq	r3, #1
 8005614:	2300      	movne	r3, #0
 8005616:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                break;
 800561a:	e1bb      	b.n	8005994 <lfs_dir_fetchmatch+0x5e0>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800561c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800561e:	4618      	mov	r0, r3
 8005620:	f7fe fd33 	bl	800408a <lfs_tag_dsize>
 8005624:	4602      	mov	r2, r0
 8005626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005628:	441a      	add	r2, r3
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	429a      	cmp	r2, r3
 8005632:	f200 81a2 	bhi.w	800597a <lfs_dir_fetchmatch+0x5c6>
                break;
            }

            ptag = tag;
 8005636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005638:	66bb      	str	r3, [r7, #104]	@ 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 800563a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800563c:	4618      	mov	r0, r3
 800563e:	f7fe fccd 	bl	8003fdc <lfs_tag_type2>
 8005642:	4603      	mov	r3, r0
 8005644:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005648:	d15e      	bne.n	8005708 <lfs_dir_fetchmatch+0x354>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800564a:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005650:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005658:	3204      	adds	r2, #4
 800565a:	2104      	movs	r1, #4
 800565c:	9103      	str	r1, [sp, #12]
 800565e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8005662:	9102      	str	r1, [sp, #8]
 8005664:	9201      	str	r2, [sp, #4]
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	4623      	mov	r3, r4
 800566a:	4602      	mov	r2, r0
 800566c:	2100      	movs	r1, #0
 800566e:	6978      	ldr	r0, [r7, #20]
 8005670:	f7fe f856 	bl	8003720 <lfs_bd_read>
 8005674:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8005676:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005678:	2b00      	cmp	r3, #0
 800567a:	d006      	beq.n	800568a <lfs_dir_fetchmatch+0x2d6>
                    if (err == LFS_ERR_CORRUPT) {
 800567c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800567e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005682:	f000 817c 	beq.w	800597e <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 8005686:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                return err;
 8005688:	e257      	b.n	8005b3a <lfs_dir_fetchmatch+0x786>
                }
                dcrc = lfs_fromle32(dcrc);
 800568a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568c:	4618      	mov	r0, r3
 800568e:	f7fd ffdc 	bl	800364a <lfs_fromle32>
 8005692:	4603      	mov	r3, r0
 8005694:	62bb      	str	r3, [r7, #40]	@ 0x28

                if (crc != dcrc) {
 8005696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569a:	429a      	cmp	r2, r3
 800569c:	f040 8171 	bne.w	8005982 <lfs_dir_fetchmatch+0x5ce>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 80056a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fe fcba 	bl	800401c <lfs_tag_chunk>
 80056a8:	4603      	mov	r3, r0
 80056aa:	07db      	lsls	r3, r3, #31
 80056ac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80056ae:	4053      	eors	r3, r2
 80056b0:	66bb      	str	r3, [r7, #104]	@ 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80056ba:	2204      	movs	r2, #4
 80056bc:	4618      	mov	r0, r3
 80056be:	f004 fe2f 	bl	800a320 <lfs_crc>
 80056c2:	4602      	mov	r2, r0
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 80056c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 80056cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fe fcdb 	bl	800408a <lfs_tag_dsize>
 80056d4:	4602      	mov	r2, r0
 80056d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056d8:	441a      	add	r2, r3
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80056e2:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80056ea:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 80056ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 80056f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 80056fe:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8005700:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005704:	633b      	str	r3, [r7, #48]	@ 0x30
 8005706:	e73c      	b.n	8005582 <lfs_dir_fetchmatch+0x1ce>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 8005708:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	681c      	ldr	r4, [r3, #0]
 8005716:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005718:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 800571a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571c:	4618      	mov	r0, r3
 800571e:	f7fe fcb4 	bl	800408a <lfs_tag_dsize>
 8005722:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 8005724:	3b04      	subs	r3, #4
 8005726:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800572a:	9203      	str	r2, [sp, #12]
 800572c:	9302      	str	r3, [sp, #8]
 800572e:	9501      	str	r5, [sp, #4]
 8005730:	9400      	str	r4, [sp, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4632      	mov	r2, r6
 8005736:	2100      	movs	r1, #0
 8005738:	6978      	ldr	r0, [r7, #20]
 800573a:	f7fe f98e 	bl	8003a5a <lfs_bd_crc>
 800573e:	65b8      	str	r0, [r7, #88]	@ 0x58
            if (err) {
 8005740:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005742:	2b00      	cmp	r3, #0
 8005744:	d006      	beq.n	8005754 <lfs_dir_fetchmatch+0x3a0>
                if (err == LFS_ERR_CORRUPT) {
 8005746:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005748:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800574c:	f000 811b 	beq.w	8005986 <lfs_dir_fetchmatch+0x5d2>
                    break;
                }
                return err;
 8005750:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005752:	e1f2      	b.n	8005b3a <lfs_dir_fetchmatch+0x786>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8005754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005756:	4618      	mov	r0, r3
 8005758:	f7fe fc30 	bl	8003fbc <lfs_tag_type1>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d113      	bne.n	800578a <lfs_dir_fetchmatch+0x3d6>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8005762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005764:	4618      	mov	r0, r3
 8005766:	f7fe fc73 	bl	8004050 <lfs_tag_id>
 800576a:	4603      	mov	r3, r0
 800576c:	461a      	mov	r2, r3
 800576e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005772:	4293      	cmp	r3, r2
 8005774:	f200 80b6 	bhi.w	80058e4 <lfs_dir_fetchmatch+0x530>
                    tempcount = lfs_tag_id(tag) + 1;
 8005778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577a:	4618      	mov	r0, r3
 800577c:	f7fe fc68 	bl	8004050 <lfs_tag_id>
 8005780:	4603      	mov	r3, r0
 8005782:	3301      	adds	r3, #1
 8005784:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005788:	e0ac      	b.n	80058e4 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800578a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578c:	4618      	mov	r0, r3
 800578e:	f7fe fc15 	bl	8003fbc <lfs_tag_type1>
 8005792:	4603      	mov	r3, r0
 8005794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005798:	d13a      	bne.n	8005810 <lfs_dir_fetchmatch+0x45c>
                tempcount += lfs_tag_splice(tag);
 800579a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800579c:	4618      	mov	r0, r3
 800579e:	f7fe fc4a 	bl	8004036 <lfs_tag_splice>
 80057a2:	4603      	mov	r3, r0
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80057aa:	4413      	add	r3, r2
 80057ac:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 80057b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80057b2:	4b08      	ldr	r3, [pc, #32]	@ (80057d4 <lfs_dir_fetchmatch+0x420>)
 80057b4:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80057b6:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80057ba:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80057be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d109      	bne.n	80057d8 <lfs_dir_fetchmatch+0x424>
                    tempbesttag |= 0x80000000;
 80057c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80057ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80057cc:	e08a      	b.n	80058e4 <lfs_dir_fetchmatch+0x530>
 80057ce:	bf00      	nop
 80057d0:	0800c408 	.word	0x0800c408
 80057d4:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 80057d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057de:	f000 8081 	beq.w	80058e4 <lfs_dir_fetchmatch+0x530>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 80057e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fe fc33 	bl	8004050 <lfs_tag_id>
 80057ea:	4603      	mov	r3, r0
 80057ec:	461c      	mov	r4, r3
 80057ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fe fc2d 	bl	8004050 <lfs_tag_id>
 80057f6:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 80057f8:	429c      	cmp	r4, r3
 80057fa:	d873      	bhi.n	80058e4 <lfs_dir_fetchmatch+0x530>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80057fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fe fc19 	bl	8004036 <lfs_tag_splice>
 8005804:	4603      	mov	r3, r0
 8005806:	029a      	lsls	r2, r3, #10
 8005808:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800580a:	4413      	add	r3, r2
 800580c:	663b      	str	r3, [r7, #96]	@ 0x60
 800580e:	e069      	b.n	80058e4 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8005810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005812:	4618      	mov	r0, r3
 8005814:	f7fe fbd2 	bl	8003fbc <lfs_tag_type1>
 8005818:	4603      	mov	r3, r0
 800581a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800581e:	d132      	bne.n	8005886 <lfs_dir_fetchmatch+0x4d2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8005820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005822:	4618      	mov	r0, r3
 8005824:	f7fe fbfa 	bl	800401c <lfs_tag_chunk>
 8005828:	4603      	mov	r3, r0
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	bf14      	ite	ne
 8005832:	2301      	movne	r3, #1
 8005834:	2300      	moveq	r3, #0
 8005836:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

                err = lfs_bd_read(lfs,
 800583a:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005840:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005848:	3204      	adds	r2, #4
 800584a:	2108      	movs	r1, #8
 800584c:	9103      	str	r1, [sp, #12]
 800584e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8005852:	9102      	str	r1, [sp, #8]
 8005854:	9201      	str	r2, [sp, #4]
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	4623      	mov	r3, r4
 800585a:	4602      	mov	r2, r0
 800585c:	2100      	movs	r1, #0
 800585e:	6978      	ldr	r0, [r7, #20]
 8005860:	f7fd ff5e 	bl	8003720 <lfs_bd_read>
 8005864:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8005866:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005868:	2b00      	cmp	r3, #0
 800586a:	d006      	beq.n	800587a <lfs_dir_fetchmatch+0x4c6>
                    if (err == LFS_ERR_CORRUPT) {
 800586c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800586e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005872:	f000 808a 	beq.w	800598a <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                    return err;
 8005876:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005878:	e15f      	b.n	8005b3a <lfs_dir_fetchmatch+0x786>
                }
                lfs_pair_fromle32(temptail);
 800587a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800587e:	4618      	mov	r0, r3
 8005880:	f7fe fb47 	bl	8003f12 <lfs_pair_fromle32>
 8005884:	e02e      	b.n	80058e4 <lfs_dir_fetchmatch+0x530>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8005886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005888:	4618      	mov	r0, r3
 800588a:	f7fe fbb7 	bl	8003ffc <lfs_tag_type3>
 800588e:	4603      	mov	r3, r0
 8005890:	461a      	mov	r2, r3
 8005892:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 8005896:	429a      	cmp	r2, r3
 8005898:	d124      	bne.n	80058e4 <lfs_dir_fetchmatch+0x530>
                err = lfs_bd_read(lfs,
 800589a:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058a0:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80058a8:	3204      	adds	r2, #4
 80058aa:	2108      	movs	r1, #8
 80058ac:	9103      	str	r1, [sp, #12]
 80058ae:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80058b2:	9102      	str	r1, [sp, #8]
 80058b4:	9201      	str	r2, [sp, #4]
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	4623      	mov	r3, r4
 80058ba:	4602      	mov	r2, r0
 80058bc:	2100      	movs	r1, #0
 80058be:	6978      	ldr	r0, [r7, #20]
 80058c0:	f7fd ff2e 	bl	8003720 <lfs_bd_read>
 80058c4:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 80058c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <lfs_dir_fetchmatch+0x520>
                    if (err == LFS_ERR_CORRUPT) {
 80058cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058ce:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80058d2:	d05c      	beq.n	800598e <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 80058d4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fe fcd5 	bl	8004288 <lfs_fcrc_fromle32>
                hasfcrc = true;
 80058de:	2301      	movs	r3, #1
 80058e0:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 80058e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058ea:	405a      	eors	r2, r3
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4013      	ands	r3, r2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f47f ae46 	bne.w	8005582 <lfs_dir_fetchmatch+0x1ce>
                int res = cb(data, tag, &(struct lfs_diskoff){
 80058f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
                        dir->pair[0], off+sizeof(tag)});
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 80058fc:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 80058fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005900:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8005902:	627b      	str	r3, [r7, #36]	@ 0x24
 8005904:	f107 0220 	add.w	r2, r7, #32
 8005908:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800590c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8005910:	4798      	blx	r3
 8005912:	6578      	str	r0, [r7, #84]	@ 0x54
                if (res < 0) {
 8005914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005916:	2b00      	cmp	r3, #0
 8005918:	da05      	bge.n	8005926 <lfs_dir_fetchmatch+0x572>
                    if (res == LFS_ERR_CORRUPT) {
 800591a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800591c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005920:	d037      	beq.n	8005992 <lfs_dir_fetchmatch+0x5de>
                        break;
                    }
                    return res;
 8005922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                return err;
 8005924:	e109      	b.n	8005b3a <lfs_dir_fetchmatch+0x786>
                }

                if (res == LFS_CMP_EQ) {
 8005926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005928:	2b00      	cmp	r3, #0
 800592a:	d102      	bne.n	8005932 <lfs_dir_fetchmatch+0x57e>
                    // found a match
                    tempbesttag = tag;
 800592c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005930:	e627      	b.n	8005582 <lfs_dir_fetchmatch+0x1ce>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8005932:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005934:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005936:	405a      	eors	r2, r3
 8005938:	4b82      	ldr	r3, [pc, #520]	@ (8005b44 <lfs_dir_fetchmatch+0x790>)
 800593a:	4013      	ands	r3, r2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d103      	bne.n	8005948 <lfs_dir_fetchmatch+0x594>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8005940:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005944:	663b      	str	r3, [r7, #96]	@ 0x60
 8005946:	e61c      	b.n	8005582 <lfs_dir_fetchmatch+0x1ce>
                } else if (res == LFS_CMP_GT &&
 8005948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800594a:	2b02      	cmp	r3, #2
 800594c:	f47f ae19 	bne.w	8005582 <lfs_dir_fetchmatch+0x1ce>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8005950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005952:	4618      	mov	r0, r3
 8005954:	f7fe fb7c 	bl	8004050 <lfs_tag_id>
 8005958:	4603      	mov	r3, r0
 800595a:	461c      	mov	r4, r3
 800595c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800595e:	4618      	mov	r0, r3
 8005960:	f7fe fb76 	bl	8004050 <lfs_tag_id>
 8005964:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8005966:	429c      	cmp	r4, r3
 8005968:	f63f ae0b 	bhi.w	8005582 <lfs_dir_fetchmatch+0x1ce>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800596c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005972:	663b      	str	r3, [r7, #96]	@ 0x60
 8005974:	e605      	b.n	8005582 <lfs_dir_fetchmatch+0x1ce>
                    break;
 8005976:	bf00      	nop
 8005978:	e00c      	b.n	8005994 <lfs_dir_fetchmatch+0x5e0>
                break;
 800597a:	bf00      	nop
 800597c:	e00a      	b.n	8005994 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800597e:	bf00      	nop
 8005980:	e008      	b.n	8005994 <lfs_dir_fetchmatch+0x5e0>
                    break;
 8005982:	bf00      	nop
 8005984:	e006      	b.n	8005994 <lfs_dir_fetchmatch+0x5e0>
                    break;
 8005986:	bf00      	nop
 8005988:	e004      	b.n	8005994 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800598a:	bf00      	nop
 800598c:	e002      	b.n	8005994 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800598e:	bf00      	nop
 8005990:	e000      	b.n	8005994 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8005992:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d000      	beq.n	800599e <lfs_dir_fetchmatch+0x5ea>
 800599c:	e017      	b.n	80059ce <lfs_dir_fetchmatch+0x61a>
            // try the other block?
            lfs_pair_swap(dir->pair);
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7fe fa2f 	bl	8003e04 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 80059a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059a8:	3301      	adds	r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	bfb8      	it	lt
 80059b2:	425b      	neglt	r3, r3
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	3378      	adds	r3, #120	@ 0x78
 80059b8:	f107 0208 	add.w	r2, r7, #8
 80059bc:	4413      	add	r3, r2
 80059be:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 80059c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059c8:	3301      	adds	r3, #1
 80059ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80059cc:	e0a1      	b.n	8005b12 <lfs_dir_fetchmatch+0x75e>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	2200      	movs	r2, #0
 80059d2:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 80059d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d03a      	beq.n	8005a52 <lfs_dir_fetchmatch+0x69e>
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80059e4:	6992      	ldr	r2, [r2, #24]
 80059e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80059ea:	fb01 f202 	mul.w	r2, r1, r2
 80059ee:	1a9b      	subs	r3, r3, r2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d12e      	bne.n	8005a52 <lfs_dir_fetchmatch+0x69e>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 80059f4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d02a      	beq.n	8005a52 <lfs_dir_fetchmatch+0x69e>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 80059fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a00:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 8005a02:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a08:	69dd      	ldr	r5, [r3, #28]
                int err = lfs_bd_crc(lfs,
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	68d2      	ldr	r2, [r2, #12]
 8005a12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005a14:	f107 001c 	add.w	r0, r7, #28
 8005a18:	9003      	str	r0, [sp, #12]
 8005a1a:	9102      	str	r1, [sp, #8]
 8005a1c:	9201      	str	r2, [sp, #4]
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	462b      	mov	r3, r5
 8005a22:	4622      	mov	r2, r4
 8005a24:	2100      	movs	r1, #0
 8005a26:	6978      	ldr	r0, [r7, #20]
 8005a28:	f7fe f817 	bl	8003a5a <lfs_bd_crc>
 8005a2c:	6538      	str	r0, [r7, #80]	@ 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8005a2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d005      	beq.n	8005a40 <lfs_dir_fetchmatch+0x68c>
 8005a34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a36:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005a3a:	d001      	beq.n	8005a40 <lfs_dir_fetchmatch+0x68c>
                    return err;
 8005a3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a3e:	e07c      	b.n	8005b3a <lfs_dir_fetchmatch+0x786>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8005a40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	bf0c      	ite	eq
 8005a48:	2301      	moveq	r3, #1
 8005a4a:	2300      	movne	r3, #0
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	333c      	adds	r3, #60	@ 0x3c
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	4611      	mov	r1, r2
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe fbb4 	bl	80041c8 <lfs_gstate_hasmovehere>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d028      	beq.n	8005ab8 <lfs_dir_fetchmatch+0x704>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fe faf0 	bl	8004050 <lfs_tag_id>
 8005a70:	4603      	mov	r3, r0
 8005a72:	461c      	mov	r4, r3
 8005a74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fe faea 	bl	8004050 <lfs_tag_id>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	429c      	cmp	r4, r3
 8005a80:	d104      	bne.n	8005a8c <lfs_dir_fetchmatch+0x6d8>
                besttag |= 0x80000000;
 8005a82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a88:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a8a:	e015      	b.n	8005ab8 <lfs_dir_fetchmatch+0x704>
            } else if (besttag != -1 &&
 8005a8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a92:	d011      	beq.n	8005ab8 <lfs_dir_fetchmatch+0x704>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fe fad9 	bl	8004050 <lfs_tag_id>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	461c      	mov	r4, r3
 8005aa2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7fe fad3 	bl	8004050 <lfs_tag_id>
 8005aaa:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 8005aac:	429c      	cmp	r4, r3
 8005aae:	d203      	bcs.n	8005ab8 <lfs_dir_fetchmatch+0x704>
                besttag -= LFS_MKTAG(0, 1, 0);
 8005ab0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ab2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8005ab6:	67fb      	str	r3, [r7, #124]	@ 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8005ab8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d010      	beq.n	8005ae2 <lfs_dir_fetchmatch+0x72e>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8005ac0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe fac4 	bl	8004050 <lfs_tag_id>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	461a      	mov	r2, r3
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	8a9b      	ldrh	r3, [r3, #20]
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	f7fd fd49 	bl	800356a <lfs_min>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ae0:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8005ae2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fe fa48 	bl	8003f7a <lfs_tag_isvalid>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <lfs_dir_fetchmatch+0x740>
            return besttag;
 8005af0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005af2:	e022      	b.n	8005b3a <lfs_dir_fetchmatch+0x786>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8005af4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fe faaa 	bl	8004050 <lfs_tag_id>
 8005afc:	4603      	mov	r3, r0
 8005afe:	461a      	mov	r2, r3
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	8a9b      	ldrh	r3, [r3, #20]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d202      	bcs.n	8005b0e <lfs_dir_fetchmatch+0x75a>
            return LFS_ERR_NOENT;
 8005b08:	f06f 0301 	mvn.w	r3, #1
 8005b0c:	e015      	b.n	8005b3a <lfs_dir_fetchmatch+0x786>
        } else {
            return 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e013      	b.n	8005b3a <lfs_dir_fetchmatch+0x786>
    for (int i = 0; i < 2; i++) {
 8005b12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	f77f ad00 	ble.w	800551a <lfs_dir_fetchmatch+0x166>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	4909      	ldr	r1, [pc, #36]	@ (8005b48 <lfs_dir_fetchmatch+0x794>)
 8005b24:	9101      	str	r1, [sp, #4]
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	f240 5259 	movw	r2, #1369	@ 0x559
 8005b2e:	4907      	ldr	r1, [pc, #28]	@ (8005b4c <lfs_dir_fetchmatch+0x798>)
 8005b30:	4807      	ldr	r0, [pc, #28]	@ (8005b50 <lfs_dir_fetchmatch+0x79c>)
 8005b32:	f004 fe89 	bl	800a848 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8005b36:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3784      	adds	r7, #132	@ 0x84
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b42:	bf00      	nop
 8005b44:	7ffffc00 	.word	0x7ffffc00
 8005b48:	0800c3c4 	.word	0x0800c3c4
 8005b4c:	0800c2b4 	.word	0x0800c2b4
 8005b50:	0800c3d0 	.word	0x0800c3d0

08005b54 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b088      	sub	sp, #32
 8005b58:	af04      	add	r7, sp, #16
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8005b60:	2300      	movs	r3, #0
 8005b62:	9303      	str	r3, [sp, #12]
 8005b64:	2300      	movs	r3, #0
 8005b66:	9302      	str	r3, [sp, #8]
 8005b68:	2300      	movs	r3, #0
 8005b6a:	9301      	str	r3, [sp, #4]
 8005b6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	68b9      	ldr	r1, [r7, #8]
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f7ff fc1a 	bl	80053b4 <lfs_dir_fetchmatch>
 8005b80:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08a      	sub	sp, #40	@ 0x28
 8005b90:	af02      	add	r7, sp, #8
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8005b98:	f107 0310 	add.w	r3, r7, #16
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	4b12      	ldr	r3, [pc, #72]	@ (8005be8 <lfs_dir_getgstate+0x5c>)
 8005ba0:	4a12      	ldr	r2, [pc, #72]	@ (8005bec <lfs_dir_getgstate+0x60>)
 8005ba2:	68b9      	ldr	r1, [r7, #8]
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f7fe fecf 	bl	8004948 <lfs_dir_get>
 8005baa:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	da05      	bge.n	8005bbe <lfs_dir_getgstate+0x32>
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	f113 0f02 	cmn.w	r3, #2
 8005bb8:	d001      	beq.n	8005bbe <lfs_dir_getgstate+0x32>
        return res;
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	e00f      	b.n	8005bde <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	f113 0f02 	cmn.w	r3, #2
 8005bc4:	d00a      	beq.n	8005bdc <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8005bc6:	f107 0310 	add.w	r3, r7, #16
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fe fb1c 	bl	8004208 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8005bd0:	f107 0310 	add.w	r3, r7, #16
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fe fa6b 	bl	80040b2 <lfs_gstate_xor>
    }

    return 0;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3720      	adds	r7, #32
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	7ff0000c 	.word	0x7ff0000c
 8005bec:	7ff00000 	.word	0x7ff00000

08005bf0 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8005bf0:	b590      	push	{r4, r7, lr}
 8005bf2:	b08f      	sub	sp, #60	@ 0x3c
 8005bf4:	af04      	add	r7, sp, #16
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 8005c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0c:	689c      	ldr	r4, [r3, #8]
 8005c0e:	68b8      	ldr	r0, [r7, #8]
 8005c10:	f7fe fa2e 	bl	8004070 <lfs_tag_size>
 8005c14:	4603      	mov	r3, r0
 8005c16:	4619      	mov	r1, r3
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f7fd fca6 	bl	800356a <lfs_min>
 8005c1e:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8005c20:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 8005c2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c2c:	6849      	ldr	r1, [r1, #4]
 8005c2e:	69b8      	ldr	r0, [r7, #24]
 8005c30:	9003      	str	r0, [sp, #12]
 8005c32:	9102      	str	r1, [sp, #8]
 8005c34:	9201      	str	r2, [sp, #4]
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	4622      	mov	r2, r4
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	6a38      	ldr	r0, [r7, #32]
 8005c40:	f7fd feba 	bl	80039b8 <lfs_bd_cmp>
 8005c44:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <lfs_dir_find_match+0x60>
        return res;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	e014      	b.n	8005c7a <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8005c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c52:	689c      	ldr	r4, [r3, #8]
 8005c54:	68b8      	ldr	r0, [r7, #8]
 8005c56:	f7fe fa0b 	bl	8004070 <lfs_tag_size>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	429c      	cmp	r4, r3
 8005c5e:	d00b      	beq.n	8005c78 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8005c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c62:	689c      	ldr	r4, [r3, #8]
 8005c64:	68b8      	ldr	r0, [r7, #8]
 8005c66:	f7fe fa03 	bl	8004070 <lfs_tag_size>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	429c      	cmp	r4, r3
 8005c6e:	d201      	bcs.n	8005c74 <lfs_dir_find_match+0x84>
 8005c70:	2301      	movs	r3, #1
 8005c72:	e002      	b.n	8005c7a <lfs_dir_find_match+0x8a>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e000      	b.n	8005c7a <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	372c      	adds	r7, #44	@ 0x2c
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd90      	pop	{r4, r7, pc}
	...

08005c84 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8005c84:	b590      	push	{r4, r7, lr}
 8005c86:	b093      	sub	sp, #76	@ 0x4c
 8005c88:	af04      	add	r7, sp, #16
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	637b      	str	r3, [r7, #52]	@ 0x34
    if (id) {
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <lfs_dir_find+0x22>
        *id = 0x3ff;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8005ca4:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8005ca6:	4b6e      	ldr	r3, [pc, #440]	@ (8005e60 <lfs_dir_find+0x1dc>)
 8005ca8:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6a1a      	ldr	r2, [r3, #32]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8005cba:	496a      	ldr	r1, [pc, #424]	@ (8005e64 <lfs_dir_find+0x1e0>)
 8005cbc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005cbe:	f004 fe1d 	bl	800a8fc <strspn>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cc6:	4413      	add	r3, r2
 8005cc8:	637b      	str	r3, [r7, #52]	@ 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8005cca:	4966      	ldr	r1, [pc, #408]	@ (8005e64 <lfs_dir_find+0x1e0>)
 8005ccc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005cce:	f004 fdf2 	bl	800a8b6 <strcspn>
 8005cd2:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d105      	bne.n	8005ce6 <lfs_dir_find+0x62>
 8005cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cdc:	781a      	ldrb	r2, [r3, #0]
 8005cde:	4b62      	ldr	r3, [pc, #392]	@ (8005e68 <lfs_dir_find+0x1e4>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d00a      	beq.n	8005cfc <lfs_dir_find+0x78>
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d10c      	bne.n	8005d06 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8005cec:	2202      	movs	r2, #2
 8005cee:	495f      	ldr	r1, [pc, #380]	@ (8005e6c <lfs_dir_find+0x1e8>)
 8005cf0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005cf2:	f004 fdbb 	bl	800a86c <memcmp>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d104      	bne.n	8005d06 <lfs_dir_find+0x82>
            name += namelen;
 8005cfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d00:	4413      	add	r3, r2
 8005d02:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 8005d04:	e7d9      	b.n	8005cba <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8005d06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0a:	4413      	add	r3, r2
 8005d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8005d12:	4954      	ldr	r1, [pc, #336]	@ (8005e64 <lfs_dir_find+0x1e0>)
 8005d14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d16:	f004 fdf1 	bl	800a8fc <strspn>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d1e:	4413      	add	r3, r2
 8005d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 8005d22:	4950      	ldr	r1, [pc, #320]	@ (8005e64 <lfs_dir_find+0x1e0>)
 8005d24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d26:	f004 fdc6 	bl	800a8b6 <strcspn>
 8005d2a:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d01d      	beq.n	8005d6e <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d112      	bne.n	8005d5e <lfs_dir_find+0xda>
 8005d38:	2202      	movs	r2, #2
 8005d3a:	494c      	ldr	r1, [pc, #304]	@ (8005e6c <lfs_dir_find+0x1e8>)
 8005d3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d3e:	f004 fd95 	bl	800a86c <memcmp>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10a      	bne.n	8005d5e <lfs_dir_find+0xda>
                depth -= 1;
 8005d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 8005d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d107      	bne.n	8005d64 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8005d54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	4413      	add	r3, r2
 8005d5a:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 8005d5c:	e7ad      	b.n	8005cba <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8005d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d60:	3301      	adds	r3, #1
 8005d62:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 8005d64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	4413      	add	r3, r2
 8005d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 8005d6c:	e7d1      	b.n	8005d12 <lfs_dir_find+0x8e>
                break;
 8005d6e:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8005d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <lfs_dir_find+0xf8>
            return tag;
 8005d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7a:	e06c      	b.n	8005e56 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d80:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8005d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fe f939 	bl	8003ffc <lfs_tag_type3>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d002      	beq.n	8005d96 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8005d90:	f06f 0313 	mvn.w	r3, #19
 8005d94:	e05f      	b.n	8005e56 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8005d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7fe f959 	bl	8004050 <lfs_tag_id>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	461a      	mov	r2, r3
 8005da2:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d01c      	beq.n	8005de4 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8005daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fe f94f 	bl	8004050 <lfs_tag_id>
 8005db2:	4603      	mov	r3, r0
 8005db4:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8005db6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005dba:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8005dc2:	9200      	str	r2, [sp, #0]
 8005dc4:	4a2a      	ldr	r2, [pc, #168]	@ (8005e70 <lfs_dir_find+0x1ec>)
 8005dc6:	68b9      	ldr	r1, [r7, #8]
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f7fe fdbd 	bl	8004948 <lfs_dir_get>
 8005dce:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	da01      	bge.n	8005dda <lfs_dir_find+0x156>
                return res;
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	e03d      	b.n	8005e56 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	3318      	adds	r3, #24
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fe f897 	bl	8003f12 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8005dea:	212f      	movs	r1, #47	@ 0x2f
 8005dec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005dee:	f004 fd55 	bl	800a89c <strchr>
 8005df2:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <lfs_dir_find+0x178>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	e000      	b.n	8005dfe <lfs_dir_find+0x17a>
 8005dfc:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	613a      	str	r2, [r7, #16]
 8005e02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e04:	617a      	str	r2, [r7, #20]
 8005e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e08:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8005e0a:	f107 0210 	add.w	r2, r7, #16
 8005e0e:	9203      	str	r2, [sp, #12]
 8005e10:	4a18      	ldr	r2, [pc, #96]	@ (8005e74 <lfs_dir_find+0x1f0>)
 8005e12:	9202      	str	r2, [sp, #8]
 8005e14:	9301      	str	r3, [sp, #4]
 8005e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 8005e1e:	4622      	mov	r2, r4
 8005e20:	68b9      	ldr	r1, [r7, #8]
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f7ff fac6 	bl	80053b4 <lfs_dir_fetchmatch>
 8005e28:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	da01      	bge.n	8005e34 <lfs_dir_find+0x1b0>
                return tag;
 8005e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e32:	e010      	b.n	8005e56 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8005e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d004      	beq.n	8005e44 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8005e3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3e:	4413      	add	r3, r2
 8005e40:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 8005e42:	e73a      	b.n	8005cba <lfs_dir_find+0x36>
            if (!dir->split) {
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	7ddb      	ldrb	r3, [r3, #23]
 8005e48:	f083 0301 	eor.w	r3, r3, #1
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0c8      	beq.n	8005de4 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8005e52:	f06f 0301 	mvn.w	r3, #1
    }
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	373c      	adds	r7, #60	@ 0x3c
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd90      	pop	{r4, r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	002ffc00 	.word	0x002ffc00
 8005e64:	0800c410 	.word	0x0800c410
 8005e68:	0800c414 	.word	0x0800c414
 8005e6c:	0800c418 	.word	0x0800c418
 8005e70:	700ffc00 	.word	0x700ffc00
 8005e74:	08005bf1 	.word	0x08005bf1

08005e78 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8005e78:	b590      	push	{r4, r7, lr}
 8005e7a:	b08b      	sub	sp, #44	@ 0x2c
 8005e7c:	af04      	add	r7, sp, #16
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f103 0010 	add.w	r0, r3, #16
 8005e8c:	68fc      	ldr	r4, [r7, #12]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	6852      	ldr	r2, [r2, #4]
 8005e96:	6839      	ldr	r1, [r7, #0]
 8005e98:	9103      	str	r1, [sp, #12]
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	9102      	str	r1, [sp, #8]
 8005e9e:	9201      	str	r2, [sp, #4]
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	4601      	mov	r1, r0
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f7fd fecb 	bl	8003c44 <lfs_bd_prog>
 8005eae:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <lfs_dir_commitprog+0x42>
        return err;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	e010      	b.n	8005edc <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f004 fa2c 	bl	800a320 <lfs_crc>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	441a      	add	r2, r3
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	605a      	str	r2, [r3, #4]
    return 0;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd90      	pop	{r4, r7, pc}

08005ee4 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8005ee4:	b590      	push	{r4, r7, lr}
 8005ee6:	b08f      	sub	sp, #60	@ 0x3c
 8005ee8:	af04      	add	r7, sp, #16
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7fe f8c9 	bl	800408a <lfs_tag_dsize>
 8005ef8:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	441a      	add	r2, r3
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d902      	bls.n	8005f10 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8005f0a:	f06f 031b 	mvn.w	r3, #27
 8005f0e:	e065      	b.n	8005fdc <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	4053      	eors	r3, r2
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fd fbb7 	bl	8003690 <lfs_tobe32>
 8005f22:	4603      	mov	r3, r0
 8005f24:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8005f26:	f107 0214 	add.w	r2, r7, #20
 8005f2a:	2304      	movs	r3, #4
 8005f2c:	68b9      	ldr	r1, [r7, #8]
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f7ff ffa2 	bl	8005e78 <lfs_dir_commitprog>
 8005f34:	61f8      	str	r0, [r7, #28]
    if (err) {
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <lfs_dir_commitattr+0x5c>
        return err;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	e04d      	b.n	8005fdc <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	db0c      	blt.n	8005f60 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	3b04      	subs	r3, #4
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	68b9      	ldr	r1, [r7, #8]
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f7ff ff92 	bl	8005e78 <lfs_dir_commitprog>
 8005f54:	61f8      	str	r0, [r7, #28]
        if (err) {
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d039      	beq.n	8005fd0 <lfs_dir_commitattr+0xec>
            return err;
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	e03d      	b.n	8005fdc <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8005f64:	2300      	movs	r3, #0
 8005f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f68:	e02d      	b.n	8005fc6 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8005f6a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8005f6c:	6a3a      	ldr	r2, [r7, #32]
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8005f72:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8005f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f7e:	440a      	add	r2, r1
 8005f80:	2101      	movs	r1, #1
 8005f82:	9103      	str	r1, [sp, #12]
 8005f84:	f107 0113 	add.w	r1, r7, #19
 8005f88:	9102      	str	r1, [sp, #8]
 8005f8a:	9201      	str	r2, [sp, #4]
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	4623      	mov	r3, r4
 8005f90:	4602      	mov	r2, r0
 8005f92:	2100      	movs	r1, #0
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f7fd fbc3 	bl	8003720 <lfs_bd_read>
 8005f9a:	61f8      	str	r0, [r7, #28]
            if (err) {
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <lfs_dir_commitattr+0xc2>
                return err;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	e01a      	b.n	8005fdc <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8005fa6:	f107 0213 	add.w	r2, r7, #19
 8005faa:	2301      	movs	r3, #1
 8005fac:	68b9      	ldr	r1, [r7, #8]
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f7ff ff62 	bl	8005e78 <lfs_dir_commitprog>
 8005fb4:	61f8      	str	r0, [r7, #28]
            if (err) {
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <lfs_dir_commitattr+0xdc>
                return err;
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	e00d      	b.n	8005fdc <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	3b04      	subs	r3, #4
 8005fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d3cc      	bcc.n	8005f6a <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	609a      	str	r2, [r3, #8]
    return 0;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	372c      	adds	r7, #44	@ 0x2c
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd90      	pop	{r4, r7, pc}

08005fe4 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8005fe4:	b590      	push	{r4, r7, lr}
 8005fe6:	b097      	sub	sp, #92	@ 0x5c
 8005fe8:	af04      	add	r7, sp, #16
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 8005ff2:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ffa:	69db      	ldr	r3, [r3, #28]
    const lfs_off_t end = lfs_alignup(
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	4610      	mov	r0, r2
 8006000:	f7fd fab3 	bl	800356a <lfs_min>
 8006004:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800600a:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(
 800600c:	4619      	mov	r1, r3
 800600e:	4610      	mov	r0, r2
 8006010:	f7fd fad0 	bl	80035b4 <lfs_alignup>
 8006014:	63b8      	str	r0, [r7, #56]	@ 0x38

    lfs_off_t off1 = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 800601a:	2300      	movs	r3, #0
 800601c:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800601e:	e0fe      	b.n	800621e <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	3b04      	subs	r3, #4
 800602a:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 800602e:	4618      	mov	r0, r3
 8006030:	f7fd fa9b 	bl	800356a <lfs_min>
 8006034:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	4413      	add	r3, r2
        lfs_off_t noff = (
 800603c:	3304      	adds	r3, #4
 800603e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 8006040:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006044:	429a      	cmp	r2, r3
 8006046:	d206      	bcs.n	8006056 <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 8006048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604a:	3b14      	subs	r3, #20
 800604c:	4619      	mov	r1, r3
 800604e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006050:	f7fd fa8b 	bl	800356a <lfs_min>
 8006054:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 8006056:	23ff      	movs	r3, #255	@ 0xff
 8006058:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 800605a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800605c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800605e:	429a      	cmp	r2, r3
 8006060:	d35f      	bcc.n	8006122 <lfs_dir_commitcrc+0x13e>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006066:	69da      	ldr	r2, [r3, #28]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006072:	429a      	cmp	r2, r3
 8006074:	d855      	bhi.n	8006122 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 8006076:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800607c:	6998      	ldr	r0, [r3, #24]
            int err = lfs_bd_read(lfs,
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2201      	movs	r2, #1
 8006084:	9203      	str	r2, [sp, #12]
 8006086:	f107 021b 	add.w	r2, r7, #27
 800608a:	9202      	str	r2, [sp, #8]
 800608c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800608e:	9201      	str	r2, [sp, #4]
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	4603      	mov	r3, r0
 8006094:	460a      	mov	r2, r1
 8006096:	2100      	movs	r1, #0
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7fd fb41 	bl	8003720 <lfs_bd_read>
 800609e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 80060a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d005      	beq.n	80060b2 <lfs_dir_commitcrc+0xce>
 80060a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80060ac:	d001      	beq.n	80060b2 <lfs_dir_commitcrc+0xce>
                return err;
 80060ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b0:	e101      	b.n	80062b6 <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060b6:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 80060b8:	60bb      	str	r3, [r7, #8]
 80060ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80060be:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 80060c0:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060c6:	699c      	ldr	r4, [r3, #24]
                err = lfs_bd_crc(lfs,
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	f107 0108 	add.w	r1, r7, #8
 80060d2:	3104      	adds	r1, #4
 80060d4:	9103      	str	r1, [sp, #12]
 80060d6:	9202      	str	r2, [sp, #8]
 80060d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80060da:	9201      	str	r2, [sp, #4]
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	4623      	mov	r3, r4
 80060e0:	4602      	mov	r2, r0
 80060e2:	2100      	movs	r1, #0
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7fd fcb8 	bl	8003a5a <lfs_bd_crc>
 80060ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 80060ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d005      	beq.n	80060fe <lfs_dir_commitcrc+0x11a>
 80060f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80060f8:	d001      	beq.n	80060fe <lfs_dir_commitcrc+0x11a>
                    return err;
 80060fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060fc:	e010      	b.n	8006120 <lfs_dir_commitcrc+0x13c>
                }

                lfs_fcrc_tole32(&fcrc);
 80060fe:	f107 0308 	add.w	r3, r7, #8
 8006102:	4618      	mov	r0, r3
 8006104:	f7fe f8d8 	bl	80042b8 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 8006108:	f107 0308 	add.w	r3, r7, #8
 800610c:	4a6c      	ldr	r2, [pc, #432]	@ (80062c0 <lfs_dir_commitcrc+0x2dc>)
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7ff fee7 	bl	8005ee4 <lfs_dir_commitattr>
 8006116:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 8006118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <lfs_dir_commitcrc+0x13e>
                    return err;
 800611e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 8006120:	e0c9      	b.n	80062b6 <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 8006122:	7efb      	ldrb	r3, [r7, #27]
 8006124:	43db      	mvns	r3, r3
 8006126:	b2db      	uxtb	r3, r3
 8006128:	09db      	lsrs	r3, r3, #7
 800612a:	b2db      	uxtb	r3, r3
 800612c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006130:	051a      	lsls	r2, r3, #20
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006138:	1acb      	subs	r3, r1, r3
 800613a:	3b04      	subs	r3, #4
 800613c:	4313      	orrs	r3, r2
 800613e:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 8006142:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8006146:	62bb      	str	r3, [r7, #40]	@ 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614e:	4053      	eors	r3, r2
 8006150:	4618      	mov	r0, r3
 8006152:	f7fd fa9d 	bl	8003690 <lfs_tobe32>
 8006156:	4603      	mov	r3, r0
 8006158:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f107 0110 	add.w	r1, r7, #16
 8006162:	2204      	movs	r2, #4
 8006164:	4618      	mov	r0, r3
 8006166:	f004 f8db 	bl	800a320 <lfs_crc>
 800616a:	4602      	mov	r2, r0
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	4618      	mov	r0, r3
 8006176:	f7fd fa73 	bl	8003660 <lfs_tole32>
 800617a:	4603      	mov	r3, r0
 800617c:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f103 0010 	add.w	r0, r3, #16
 8006184:	687c      	ldr	r4, [r7, #4]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	6852      	ldr	r2, [r2, #4]
 800618e:	2108      	movs	r1, #8
 8006190:	9103      	str	r1, [sp, #12]
 8006192:	f107 0110 	add.w	r1, r7, #16
 8006196:	9102      	str	r1, [sp, #8]
 8006198:	9201      	str	r2, [sp, #4]
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	2300      	movs	r3, #0
 800619e:	4622      	mov	r2, r4
 80061a0:	4601      	mov	r1, r0
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7fd fd4e 	bl	8003c44 <lfs_bd_prog>
 80061a8:	6278      	str	r0, [r7, #36]	@ 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 80061aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <lfs_dir_commitcrc+0x1d0>
            return err;
 80061b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b2:	e080      	b.n	80062b6 <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 80061b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	3304      	adds	r3, #4
 80061c0:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off = noff;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80061cc:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 80061ce:	7efb      	ldrb	r3, [r7, #27]
 80061d0:	43db      	mvns	r3, r3
 80061d2:	061b      	lsls	r3, r3, #24
 80061d4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	405a      	eors	r2, r3
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80061e6:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 80061e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80061ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d208      	bcs.n	8006202 <lfs_dir_commitcrc+0x21e>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	695a      	ldr	r2, [r3, #20]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fa:	4413      	add	r3, r2
 80061fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80061fe:	429a      	cmp	r2, r3
 8006200:	d30d      	bcc.n	800621e <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f103 0110 	add.w	r1, r3, #16
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	2300      	movs	r3, #0
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7fd fce5 	bl	8003bdc <lfs_bd_sync>
 8006212:	6238      	str	r0, [r7, #32]
            if (err) {
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <lfs_dir_commitcrc+0x23a>
                return err;
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	e04b      	b.n	80062b6 <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006224:	429a      	cmp	r2, r3
 8006226:	f63f aefb 	bhi.w	8006020 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t crc = 0xffffffff;
 8006230:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006234:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800623a:	1d1c      	adds	r4, r3, #4
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006242:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006244:	1a8a      	subs	r2, r1, r2
 8006246:	f107 011c 	add.w	r1, r7, #28
 800624a:	9103      	str	r1, [sp, #12]
 800624c:	9202      	str	r2, [sp, #8]
 800624e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006250:	9201      	str	r2, [sp, #4]
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	4623      	mov	r3, r4
 8006256:	4602      	mov	r2, r0
 8006258:	2100      	movs	r1, #0
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fd fbfd 	bl	8003a5a <lfs_bd_crc>
 8006260:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <lfs_dir_commitcrc+0x288>
        return err;
 8006268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626a:	e024      	b.n	80062b6 <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006270:	429a      	cmp	r2, r3
 8006272:	d002      	beq.n	800627a <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 8006274:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8006278:	e01d      	b.n	80062b6 <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 800627a:	6879      	ldr	r1, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f107 021c 	add.w	r2, r7, #28
 8006284:	9203      	str	r2, [sp, #12]
 8006286:	2204      	movs	r2, #4
 8006288:	9202      	str	r2, [sp, #8]
 800628a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800628c:	9201      	str	r2, [sp, #4]
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	2304      	movs	r3, #4
 8006292:	460a      	mov	r2, r1
 8006294:	2100      	movs	r1, #0
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7fd fbdf 	bl	8003a5a <lfs_bd_crc>
 800629c:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 800629e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <lfs_dir_commitcrc+0x2c4>
        return err;
 80062a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a6:	e006      	b.n	80062b6 <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 80062ae:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80062b2:	e000      	b.n	80062b6 <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	374c      	adds	r7, #76	@ 0x4c
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd90      	pop	{r4, r7, pc}
 80062be:	bf00      	nop
 80062c0:	5ffffc08 	.word	0x5ffffc08

080062c4 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08a      	sub	sp, #40	@ 0x28
 80062c8:	af04      	add	r7, sp, #16
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 80062ce:	2300      	movs	r3, #0
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	e016      	b.n	8006302 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	3301      	adds	r3, #1
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	bfb8      	it	lt
 80062e0:	425b      	neglt	r3, r3
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	4413      	add	r3, r2
 80062e8:	4619      	mov	r1, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7fe f9ae 	bl	800464c <lfs_alloc>
 80062f0:	60f8      	str	r0, [r7, #12]
        if (err) {
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <lfs_dir_alloc+0x38>
            return err;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	e058      	b.n	80063ae <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	3301      	adds	r3, #1
 8006300:	617b      	str	r3, [r7, #20]
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2b01      	cmp	r3, #1
 8006306:	dde5      	ble.n	80062d4 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2200      	movs	r2, #0
 800630c:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8006318:	2004      	movs	r0, #4
 800631a:	9003      	str	r0, [sp, #12]
 800631c:	9202      	str	r2, [sp, #8]
 800631e:	2200      	movs	r2, #0
 8006320:	9201      	str	r2, [sp, #4]
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	2304      	movs	r3, #4
 8006326:	460a      	mov	r2, r1
 8006328:	2100      	movs	r1, #0
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7fd f9f8 	bl	8003720 <lfs_bd_read>
 8006330:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	4618      	mov	r0, r3
 8006338:	f7fd f987 	bl	800364a <lfs_fromle32>
 800633c:	4602      	mov	r2, r0
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d005      	beq.n	8006354 <lfs_dir_alloc+0x90>
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800634e:	d001      	beq.n	8006354 <lfs_dir_alloc+0x90>
        return err;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	e02c      	b.n	80063ae <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635a:	2b00      	cmp	r3, #0
 800635c:	dd0e      	ble.n	800637c <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006368:	3301      	adds	r3, #1
 800636a:	f043 0301 	orr.w	r3, r3, #1
 800636e:	4619      	mov	r1, r3
 8006370:	4610      	mov	r0, r2
 8006372:	f7fd f91f 	bl	80035b4 <lfs_alignup>
 8006376:	4602      	mov	r2, r0
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2204      	movs	r2, #4
 8006380:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006388:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2200      	movs	r2, #0
 800638e:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006396:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800639e:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2200      	movs	r2, #0
 80063a4:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2200      	movs	r2, #0
 80063aa:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b092      	sub	sp, #72	@ 0x48
 80063ba:	af04      	add	r7, sp, #16
 80063bc:	60f8      	str	r0, [r7, #12]
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	607a      	str	r2, [r7, #4]
 80063c2:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 80063c4:	f107 0310 	add.w	r3, r7, #16
 80063c8:	4619      	mov	r1, r3
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f7ff ff7a 	bl	80062c4 <lfs_dir_alloc>
 80063d0:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 80063d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <lfs_dir_split+0x26>
        return err;
 80063d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063da:	e03c      	b.n	8006456 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	7ddb      	ldrb	r3, [r3, #23]
 80063e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 80063f0:	f107 0110 	add.w	r1, r7, #16
 80063f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80063f8:	9302      	str	r3, [sp, #8]
 80063fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80063fe:	9301      	str	r3, [sp, #4]
 8006400:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 f879 	bl	8006500 <lfs_dir_compact>
 800640e:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 8006410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006412:	2b00      	cmp	r3, #0
 8006414:	da01      	bge.n	800641a <lfs_dir_split+0x64>
        return res;
 8006416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006418:	e01d      	b.n	8006456 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2201      	movs	r2, #1
 800642a:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3320      	adds	r3, #32
 8006432:	4619      	mov	r1, r3
 8006434:	4610      	mov	r0, r2
 8006436:	f7fd fd15 	bl	8003e64 <lfs_pair_cmp>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d109      	bne.n	8006454 <lfs_dir_split+0x9e>
 8006440:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006444:	2b00      	cmp	r3, #0
 8006446:	d105      	bne.n	8006454 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3738      	adds	r7, #56	@ 0x38
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800645e:	b580      	push	{r7, lr}
 8006460:	b086      	sub	sp, #24
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800646e:	68b8      	ldr	r0, [r7, #8]
 8006470:	f7fd fe0b 	bl	800408a <lfs_tag_dsize>
 8006474:	4602      	mov	r2, r0
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	441a      	add	r2, r3
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	601a      	str	r2, [r3, #0]
    return 0;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800648a:	b580      	push	{r7, lr}
 800648c:	b086      	sub	sp, #24
 800648e:	af00      	add	r7, sp, #0
 8006490:	60f8      	str	r0, [r7, #12]
 8006492:	60b9      	str	r1, [r7, #8]
 8006494:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	6818      	ldr	r0, [r3, #0]
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	6859      	ldr	r1, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	f7ff fd1d 	bl	8005ee4 <lfs_dir_commitattr>
 80064aa:	4603      	mov	r3, r0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	dd11      	ble.n	80064ec <lfs_dir_needsrelocation+0x38>
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	3301      	adds	r3, #1
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80064d2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064d4:	3201      	adds	r2, #1
 80064d6:	f042 0201 	orr.w	r2, r2, #1
 80064da:	fbb3 f1f2 	udiv	r1, r3, r2
 80064de:	fb01 f202 	mul.w	r2, r1, r2
 80064e2:	1a9b      	subs	r3, r3, r2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <lfs_dir_needsrelocation+0x38>
 80064e8:	2301      	movs	r3, #1
 80064ea:	e000      	b.n	80064ee <lfs_dir_needsrelocation+0x3a>
 80064ec:	2300      	movs	r3, #0
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	b2db      	uxtb	r3, r3
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8006500:	b580      	push	{r7, lr}
 8006502:	b0a4      	sub	sp, #144	@ 0x90
 8006504:	af0a      	add	r7, sp, #40	@ 0x28
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 800650e:	2300      	movs	r3, #0
 8006510:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f7ff ffcc 	bl	80064b4 <lfs_dir_needsrelocation>
 800651c:	4603      	mov	r3, r0
 800651e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 800652c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00e      	beq.n	8006552 <lfs_dir_compact+0x52>
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2200      	movs	r2, #0
 8006538:	657a      	str	r2, [r7, #84]	@ 0x54
 800653a:	2201      	movs	r2, #1
 800653c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800653e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8006542:	4611      	mov	r1, r2
 8006544:	4618      	mov	r0, r3
 8006546:	f7fd fc8d 	bl	8003e64 <lfs_pair_cmp>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	f040 8155 	bne.w	80067fc <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8006556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006558:	2300      	movs	r3, #0
 800655a:	643b      	str	r3, [r7, #64]	@ 0x40
 800655c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006560:	647b      	str	r3, [r7, #68]	@ 0x44
 8006562:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006566:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006568:	2300      	movs	r3, #0
 800656a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8006572:	2b00      	cmp	r3, #0
 8006574:	d004      	beq.n	8006580 <lfs_dir_compact+0x80>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800657a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800657c:	3b08      	subs	r3, #8
 800657e:	e003      	b.n	8006588 <lfs_dir_compact+0x88>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8006588:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	4619      	mov	r1, r3
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f7fd fc05 	bl	8003da0 <lfs_bd_erase>
 8006596:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8006598:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800659a:	2b00      	cmp	r3, #0
 800659c:	d006      	beq.n	80065ac <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 800659e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065a0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80065a4:	f000 812c 	beq.w	8006800 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 80065a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065aa:	e188      	b.n	80068be <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fd f855 	bl	8003660 <lfs_tole32>
 80065b6:	4602      	mov	r2, r0
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 80065c2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80065c6:	2304      	movs	r3, #4
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f7ff fc55 	bl	8005e78 <lfs_dir_commitprog>
 80065ce:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fd f838 	bl	800364a <lfs_fromle32>
 80065da:	4602      	mov	r2, r0
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	609a      	str	r2, [r3, #8]
            if (err) {
 80065e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d006      	beq.n	80065f4 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 80065e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065e8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80065ec:	f000 810a 	beq.w	8006804 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 80065f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065f2:	e164      	b.n	80068be <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 80065f4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80065f8:	425b      	negs	r3, r3
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	637a      	str	r2, [r7, #52]	@ 0x34
 8006602:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8006606:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 8006608:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800660c:	9208      	str	r2, [sp, #32]
 800660e:	4aae      	ldr	r2, [pc, #696]	@ (80068c8 <lfs_dir_compact+0x3c8>)
 8006610:	9207      	str	r2, [sp, #28]
 8006612:	9306      	str	r3, [sp, #24]
 8006614:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8006618:	9305      	str	r3, [sp, #20]
 800661a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800661e:	9304      	str	r3, [sp, #16]
 8006620:	2300      	movs	r3, #0
 8006622:	9303      	str	r3, [sp, #12]
 8006624:	4ba9      	ldr	r3, [pc, #676]	@ (80068cc <lfs_dir_compact+0x3cc>)
 8006626:	9302      	str	r3, [sp, #8]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	9301      	str	r3, [sp, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006634:	2200      	movs	r2, #0
 8006636:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f7fe fad7 	bl	8004bec <lfs_dir_traverse>
 800663e:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 8006640:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006642:	2b00      	cmp	r3, #0
 8006644:	d006      	beq.n	8006654 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8006646:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006648:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800664c:	f000 80dc 	beq.w	8006808 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8006650:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006652:	e134      	b.n	80068be <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	3318      	adds	r3, #24
 8006658:	4618      	mov	r0, r3
 800665a:	f7fd fbe8 	bl	8003e2e <lfs_pair_isnull>
 800665e:	4603      	mov	r3, r0
 8006660:	f083 0301 	eor.w	r3, r3, #1
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d022      	beq.n	80066b0 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	3318      	adds	r3, #24
 800666e:	4618      	mov	r0, r3
 8006670:	f7fd fc69 	bl	8003f46 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	7ddb      	ldrb	r3, [r3, #23]
 8006678:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800667c:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800667e:	4a94      	ldr	r2, [pc, #592]	@ (80068d0 <lfs_dir_compact+0x3d0>)
 8006680:	431a      	orrs	r2, r3
                        dir->tail);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8006686:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f7ff fc2a 	bl	8005ee4 <lfs_dir_commitattr>
 8006690:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	3318      	adds	r3, #24
 8006696:	4618      	mov	r0, r3
 8006698:	f7fd fc3b 	bl	8003f12 <lfs_pair_fromle32>
                if (err) {
 800669c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d006      	beq.n	80066b0 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 80066a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066a4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80066a8:	f000 80b0 	beq.w	800680c <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 80066ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066ae:	e106      	b.n	80068be <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 80066b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	605a      	str	r2, [r3, #4]
 80066ba:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80066bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80066c0:	f083 0301 	eor.w	r3, r3, #1
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d011      	beq.n	80066ee <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80066d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80066d4:	4611      	mov	r1, r2
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fd fceb 	bl	80040b2 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80066e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80066e6:	4611      	mov	r1, r2
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7fd fce2 	bl	80040b2 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80066f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80066f8:	4611      	mov	r1, r2
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fd fcd9 	bl	80040b2 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8006700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006702:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006706:	f023 0303 	bic.w	r3, r3, #3
 800670a:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 800670c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006710:	461a      	mov	r2, r3
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f7ff fa39 	bl	8005b8c <lfs_dir_getgstate>
 800671a:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800671c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <lfs_dir_compact+0x226>
                return err;
 8006722:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006724:	e0cb      	b.n	80068be <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8006726:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800672a:	4618      	mov	r0, r3
 800672c:	f7fd fce6 	bl	80040fc <lfs_gstate_iszero>
 8006730:	4603      	mov	r3, r0
 8006732:	f083 0301 	eor.w	r3, r3, #1
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	d016      	beq.n	800676a <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 800673c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006740:	4618      	mov	r0, r3
 8006742:	f7fd fd81 	bl	8004248 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8006746:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800674a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800674e:	4a61      	ldr	r2, [pc, #388]	@ (80068d4 <lfs_dir_compact+0x3d4>)
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f7ff fbc7 	bl	8005ee4 <lfs_dir_commitattr>
 8006756:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8006758:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d005      	beq.n	800676a <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 800675e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006760:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006764:	d054      	beq.n	8006810 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8006766:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006768:	e0a9      	b.n	80068be <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800676a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800676e:	4619      	mov	r1, r3
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f7ff fc37 	bl	8005fe4 <lfs_dir_commitcrc>
 8006776:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8006778:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800677a:	2b00      	cmp	r3, #0
 800677c:	d005      	beq.n	800678a <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 800677e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006780:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006784:	d046      	beq.n	8006814 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8006786:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006788:	e099      	b.n	80068be <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800678a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006790:	6992      	ldr	r2, [r2, #24]
 8006792:	fbb3 f1f2 	udiv	r1, r3, r2
 8006796:	fb01 f202 	mul.w	r2, r1, r2
 800679a:	1a9b      	subs	r3, r3, r2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d006      	beq.n	80067ae <lfs_dir_compact+0x2ae>
 80067a0:	4b4d      	ldr	r3, [pc, #308]	@ (80068d8 <lfs_dir_compact+0x3d8>)
 80067a2:	4a4e      	ldr	r2, [pc, #312]	@ (80068dc <lfs_dir_compact+0x3dc>)
 80067a4:	f640 0106 	movw	r1, #2054	@ 0x806
 80067a8:	484d      	ldr	r0, [pc, #308]	@ (80068e0 <lfs_dir_compact+0x3e0>)
 80067aa:	f003 fdf7 	bl	800a39c <__assert_func>
            lfs_pair_swap(dir->pair);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7fd fb27 	bl	8003e04 <lfs_pair_swap>
            dir->count = end - begin;
 80067b6:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 80067ba:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 80067c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 80067cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3348      	adds	r3, #72	@ 0x48
 80067d6:	2200      	movs	r2, #0
 80067d8:	601a      	str	r2, [r3, #0]
 80067da:	605a      	str	r2, [r3, #4]
 80067dc:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80067de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80067e2:	f083 0301 	eor.w	r3, r3, #1
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d065      	beq.n	80068b8 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	333c      	adds	r3, #60	@ 0x3c
 80067f2:	3230      	adds	r2, #48	@ 0x30
 80067f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80067f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 80067fa:	e05d      	b.n	80068b8 <lfs_dir_compact+0x3b8>
        goto relocate;
 80067fc:	bf00      	nop
 80067fe:	e00a      	b.n	8006816 <lfs_dir_compact+0x316>
                    goto relocate;
 8006800:	bf00      	nop
 8006802:	e008      	b.n	8006816 <lfs_dir_compact+0x316>
                    goto relocate;
 8006804:	bf00      	nop
 8006806:	e006      	b.n	8006816 <lfs_dir_compact+0x316>
                    goto relocate;
 8006808:	bf00      	nop
 800680a:	e004      	b.n	8006816 <lfs_dir_compact+0x316>
                        goto relocate;
 800680c:	bf00      	nop
 800680e:	e002      	b.n	8006816 <lfs_dir_compact+0x316>
                        goto relocate;
 8006810:	bf00      	nop
 8006812:	e000      	b.n	8006816 <lfs_dir_compact+0x316>
                    goto relocate;
 8006814:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8006816:	2301      	movs	r3, #1
 8006818:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	3310      	adds	r3, #16
 8006820:	4619      	mov	r1, r3
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f7fc ff57 	bl	80036d6 <lfs_cache_drop>
        if (!tired) {
 8006828:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800682c:	f083 0301 	eor.w	r3, r3, #1
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d009      	beq.n	800684a <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	4a2a      	ldr	r2, [pc, #168]	@ (80068e4 <lfs_dir_compact+0x3e4>)
 800683c:	9200      	str	r2, [sp, #0]
 800683e:	f640 0218 	movw	r2, #2072	@ 0x818
 8006842:	4927      	ldr	r1, [pc, #156]	@ (80068e0 <lfs_dir_compact+0x3e0>)
 8006844:	4828      	ldr	r0, [pc, #160]	@ (80068e8 <lfs_dir_compact+0x3e8>)
 8006846:	f003 ffff 	bl	800a848 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2200      	movs	r2, #0
 800684e:	617a      	str	r2, [r7, #20]
 8006850:	2201      	movs	r2, #1
 8006852:	61ba      	str	r2, [r7, #24]
 8006854:	f107 0214 	add.w	r2, r7, #20
 8006858:	4611      	mov	r1, r2
 800685a:	4618      	mov	r0, r3
 800685c:	f7fd fb02 	bl	8003e64 <lfs_pair_cmp>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10c      	bne.n	8006880 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	4a1e      	ldr	r2, [pc, #120]	@ (80068e4 <lfs_dir_compact+0x3e4>)
 800686c:	9200      	str	r2, [sp, #0]
 800686e:	f640 021d 	movw	r2, #2077	@ 0x81d
 8006872:	491b      	ldr	r1, [pc, #108]	@ (80068e0 <lfs_dir_compact+0x3e0>)
 8006874:	481d      	ldr	r0, [pc, #116]	@ (80068ec <lfs_dir_compact+0x3ec>)
 8006876:	f003 ffe7 	bl	800a848 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800687a:	f06f 031b 	mvn.w	r3, #27
 800687e:	e01e      	b.n	80068be <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	3304      	adds	r3, #4
 8006884:	4619      	mov	r1, r3
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f7fd fee0 	bl	800464c <lfs_alloc>
 800688c:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800688e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00c      	beq.n	80068ae <lfs_dir_compact+0x3ae>
 8006894:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006896:	f113 0f1c 	cmn.w	r3, #28
 800689a:	d106      	bne.n	80068aa <lfs_dir_compact+0x3aa>
 800689c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80068a0:	f083 0301 	eor.w	r3, r3, #1
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <lfs_dir_compact+0x3ae>
            return err;
 80068aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068ac:	e007      	b.n	80068be <lfs_dir_compact+0x3be>
        }

        tired = false;
 80068ae:	2300      	movs	r3, #0
 80068b0:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 80068b4:	bf00      	nop
    while (true) {
 80068b6:	e64c      	b.n	8006552 <lfs_dir_compact+0x52>
        break;
 80068b8:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 80068ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3768      	adds	r7, #104	@ 0x68
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	0800648b 	.word	0x0800648b
 80068cc:	400ffc00 	.word	0x400ffc00
 80068d0:	000ffc08 	.word	0x000ffc08
 80068d4:	7ffffc0c 	.word	0x7ffffc0c
 80068d8:	0800c41c 	.word	0x0800c41c
 80068dc:	0800cfe0 	.word	0x0800cfe0
 80068e0:	0800c2b4 	.word	0x0800c2b4
 80068e4:	0800c3c4 	.word	0x0800c3c4
 80068e8:	0800c444 	.word	0x0800c444
 80068ec:	0800c468 	.word	0x0800c468

080068f0 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80068f0:	b590      	push	{r4, r7, lr}
 80068f2:	b097      	sub	sp, #92	@ 0x5c
 80068f4:	af0a      	add	r7, sp, #40	@ 0x28
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 80068fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006902:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 8006904:	e058      	b.n	80069b8 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8006906:	2300      	movs	r3, #0
 8006908:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 800690a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800690c:	b29b      	uxth	r3, r3
 800690e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006910:	b292      	uxth	r2, r2
 8006912:	4252      	negs	r2, r2
 8006914:	b292      	uxth	r2, r2
 8006916:	b212      	sxth	r2, r2
 8006918:	f107 0118 	add.w	r1, r7, #24
 800691c:	9108      	str	r1, [sp, #32]
 800691e:	4979      	ldr	r1, [pc, #484]	@ (8006b04 <lfs_dir_splittingcompact+0x214>)
 8006920:	9107      	str	r1, [sp, #28]
 8006922:	9206      	str	r2, [sp, #24]
 8006924:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8006928:	9205      	str	r2, [sp, #20]
 800692a:	9304      	str	r3, [sp, #16]
 800692c:	2300      	movs	r3, #0
 800692e:	9303      	str	r3, [sp, #12]
 8006930:	4b75      	ldr	r3, [pc, #468]	@ (8006b08 <lfs_dir_splittingcompact+0x218>)
 8006932:	9302      	str	r3, [sp, #8]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	9301      	str	r3, [sp, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006940:	2200      	movs	r2, #0
 8006942:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f7fe f951 	bl	8004bec <lfs_dir_traverse>
 800694a:	62b8      	str	r0, [r7, #40]	@ 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 800694c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <lfs_dir_splittingcompact+0x66>
                return err;
 8006952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006954:	e0d2      	b.n	8006afc <lfs_dir_splittingcompact+0x20c>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8006956:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800695a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2bfe      	cmp	r3, #254	@ 0xfe
 8006960:	d822      	bhi.n	80069a8 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006966:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8006968:	f1a3 0428 	sub.w	r4, r3, #40	@ 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    && size <= lfs_min(
 8006972:	2b00      	cmp	r3, #0
 8006974:	d004      	beq.n	8006980 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800697a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    && size <= lfs_min(
 800697c:	085b      	lsrs	r3, r3, #1
 800697e:	e003      	b.n	8006988 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006984:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8006986:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800698c:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(
 800698e:	4611      	mov	r1, r2
 8006990:	4618      	mov	r0, r3
 8006992:	f7fc fe0f 	bl	80035b4 <lfs_alignup>
 8006996:	4603      	mov	r3, r0
 8006998:	4619      	mov	r1, r3
 800699a:	4620      	mov	r0, r4
 800699c:	f7fc fde5 	bl	800356a <lfs_min>
 80069a0:	4602      	mov	r2, r0
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d20e      	bcs.n	80069c6 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 80069a8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80069ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	085b      	lsrs	r3, r3, #1
 80069b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069b4:	4413      	add	r3, r2
 80069b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 80069b8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80069bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d8a0      	bhi.n	8006906 <lfs_dir_splittingcompact+0x16>
 80069c4:	e000      	b.n	80069c8 <lfs_dir_splittingcompact+0xd8>
                break;
 80069c6:	bf00      	nop
        }

        if (split == begin) {
 80069c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80069cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d02d      	beq.n	8006a2e <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80069d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80069da:	9202      	str	r2, [sp, #8]
 80069dc:	9301      	str	r3, [sp, #4]
 80069de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	68b9      	ldr	r1, [r7, #8]
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f7ff fce4 	bl	80063b6 <lfs_dir_split>
 80069ee:	6278      	str	r0, [r7, #36]	@ 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d005      	beq.n	8006a02 <lfs_dir_splittingcompact+0x112>
 80069f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f8:	f113 0f1c 	cmn.w	r3, #28
 80069fc:	d001      	beq.n	8006a02 <lfs_dir_splittingcompact+0x112>
            return err;
 80069fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a00:	e07c      	b.n	8006afc <lfs_dir_splittingcompact+0x20c>
        }

        if (err) {
 8006a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00e      	beq.n	8006a26 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	493e      	ldr	r1, [pc, #248]	@ (8006b0c <lfs_dir_splittingcompact+0x21c>)
 8006a12:	9101      	str	r1, [sp, #4]
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	4613      	mov	r3, r2
 8006a18:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 8006a1c:	493c      	ldr	r1, [pc, #240]	@ (8006b10 <lfs_dir_splittingcompact+0x220>)
 8006a1e:	483d      	ldr	r0, [pc, #244]	@ (8006b14 <lfs_dir_splittingcompact+0x224>)
 8006a20:	f003 ff12 	bl	800a848 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8006a24:	e004      	b.n	8006a30 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8006a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a28:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    while (true) {
 8006a2c:	e767      	b.n	80068fe <lfs_dir_splittingcompact+0xe>
            break;
 8006a2e:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8006a30:	68b9      	ldr	r1, [r7, #8]
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f7ff fd3e 	bl	80064b4 <lfs_dir_needsrelocation>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d04f      	beq.n	8006ade <lfs_dir_splittingcompact+0x1ee>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2200      	movs	r2, #0
 8006a42:	613a      	str	r2, [r7, #16]
 8006a44:	2201      	movs	r2, #1
 8006a46:	617a      	str	r2, [r7, #20]
 8006a48:	f107 0210 	add.w	r2, r7, #16
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fd fa08 	bl	8003e64 <lfs_pair_cmp>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d141      	bne.n	8006ade <lfs_dir_splittingcompact+0x1ee>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f003 faee 	bl	800a03c <lfs_fs_size_>
 8006a60:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	da01      	bge.n	8006a6c <lfs_dir_splittingcompact+0x17c>
            return size;
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	e047      	b.n	8006afc <lfs_dir_splittingcompact+0x20c>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006a70:	6a3b      	ldr	r3, [r7, #32]
 8006a72:	1ad2      	subs	r2, r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a78:	08db      	lsrs	r3, r3, #3
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d92f      	bls.n	8006ade <lfs_dir_splittingcompact+0x1ee>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	4a22      	ldr	r2, [pc, #136]	@ (8006b0c <lfs_dir_splittingcompact+0x21c>)
 8006a84:	9200      	str	r2, [sp, #0]
 8006a86:	f640 0286 	movw	r2, #2182	@ 0x886
 8006a8a:	4921      	ldr	r1, [pc, #132]	@ (8006b10 <lfs_dir_splittingcompact+0x220>)
 8006a8c:	4822      	ldr	r0, [pc, #136]	@ (8006b18 <lfs_dir_splittingcompact+0x228>)
 8006a8e:	f003 fedb 	bl	800a848 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8006a92:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006a96:	9302      	str	r3, [sp, #8]
 8006a98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006a9c:	9301      	str	r3, [sp, #4]
 8006a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	68b9      	ldr	r1, [r7, #8]
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f7ff fc84 	bl	80063b6 <lfs_dir_split>
 8006aae:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <lfs_dir_splittingcompact+0x1d2>
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	f113 0f1c 	cmn.w	r3, #28
 8006abc:	d001      	beq.n	8006ac2 <lfs_dir_splittingcompact+0x1d2>
                return err;
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	e01c      	b.n	8006afc <lfs_dir_splittingcompact+0x20c>
            }

            if (err) {
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d007      	beq.n	8006ad8 <lfs_dir_splittingcompact+0x1e8>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8006ac8:	4b10      	ldr	r3, [pc, #64]	@ (8006b0c <lfs_dir_splittingcompact+0x21c>)
 8006aca:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 8006ace:	4910      	ldr	r1, [pc, #64]	@ (8006b10 <lfs_dir_splittingcompact+0x220>)
 8006ad0:	4812      	ldr	r0, [pc, #72]	@ (8006b1c <lfs_dir_splittingcompact+0x22c>)
 8006ad2:	f003 feb9 	bl	800a848 <iprintf>
 8006ad6:	e002      	b.n	8006ade <lfs_dir_splittingcompact+0x1ee>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8006ade:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006ae2:	9302      	str	r3, [sp, #8]
 8006ae4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006ae8:	9301      	str	r3, [sp, #4]
 8006aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	68b9      	ldr	r1, [r7, #8]
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f7ff fd03 	bl	8006500 <lfs_dir_compact>
 8006afa:	4603      	mov	r3, r0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3734      	adds	r7, #52	@ 0x34
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd90      	pop	{r4, r7, pc}
 8006b04:	0800645f 	.word	0x0800645f
 8006b08:	400ffc00 	.word	0x400ffc00
 8006b0c:	0800c3c4 	.word	0x0800c3c4
 8006b10:	0800c2b4 	.word	0x0800c2b4
 8006b14:	0800c4a0 	.word	0x0800c4a0
 8006b18:	0800c4d0 	.word	0x0800c4d0
 8006b1c:	0800c500 	.word	0x0800c500

08006b20 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8006b20:	b5b0      	push	{r4, r5, r7, lr}
 8006b22:	b0a6      	sub	sp, #152	@ 0x98
 8006b24:	af0a      	add	r7, sp, #40	@ 0x28
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
    int state = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8006b32:	2300      	movs	r3, #0
 8006b34:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 8006b38:	2300      	movs	r3, #0
 8006b3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b3c:	e06d      	b.n	8006c1a <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8006b3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b40:	00db      	lsls	r3, r3, #3
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	4413      	add	r3, r2
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7fd fa57 	bl	8003ffc <lfs_tag_type3>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	461a      	mov	r2, r3
 8006b52:	f240 4301 	movw	r3, #1025	@ 0x401
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d106      	bne.n	8006b68 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	8a9b      	ldrh	r3, [r3, #20]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	829a      	strh	r2, [r3, #20]
 8006b66:	e055      	b.n	8006c14 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8006b68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	4413      	add	r3, r2
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fd fa42 	bl	8003ffc <lfs_tag_type3>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d114      	bne.n	8006bae <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	8a9b      	ldrh	r3, [r3, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d106      	bne.n	8006b9a <lfs_dir_relocatingcommit+0x7a>
 8006b8c:	4ba4      	ldr	r3, [pc, #656]	@ (8006e20 <lfs_dir_relocatingcommit+0x300>)
 8006b8e:	4aa5      	ldr	r2, [pc, #660]	@ (8006e24 <lfs_dir_relocatingcommit+0x304>)
 8006b90:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 8006b94:	48a4      	ldr	r0, [pc, #656]	@ (8006e28 <lfs_dir_relocatingcommit+0x308>)
 8006b96:	f003 fc01 	bl	800a39c <__assert_func>
            dir->count -= 1;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	8a9b      	ldrh	r3, [r3, #20]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8006bac:	e032      	b.n	8006c14 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8006bae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7fd f9ff 	bl	8003fbc <lfs_tag_type1>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006bc4:	d126      	bne.n	8006c14 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8006bc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	4413      	add	r3, r2
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8006bd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bd8:	00db      	lsls	r3, r3, #3
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	4413      	add	r3, r2
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8006be6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006be8:	00db      	lsls	r3, r3, #3
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	4413      	add	r3, r2
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fd fa13 	bl	800401c <lfs_tag_chunk>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	bf14      	ite	ne
 8006c00:	2301      	movne	r3, #1
 8006c02:	2300      	moveq	r3, #0
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	3318      	adds	r3, #24
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7fd f97f 	bl	8003f12 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8006c14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c16:	3301      	adds	r3, #1
 8006c18:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c1a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006c1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006c20:	429a      	cmp	r2, r3
 8006c22:	db8c      	blt.n	8006b3e <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8006c24:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d02b      	beq.n	8006c84 <lfs_dir_relocatingcommit+0x164>
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	8a9b      	ldrh	r3, [r3, #20]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d127      	bne.n	8006c84 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8006c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d106      	bne.n	8006c4a <lfs_dir_relocatingcommit+0x12a>
 8006c3c:	4b7b      	ldr	r3, [pc, #492]	@ (8006e2c <lfs_dir_relocatingcommit+0x30c>)
 8006c3e:	4a79      	ldr	r2, [pc, #484]	@ (8006e24 <lfs_dir_relocatingcommit+0x304>)
 8006c40:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 8006c44:	4878      	ldr	r0, [pc, #480]	@ (8006e28 <lfs_dir_relocatingcommit+0x308>)
 8006c46:	f003 fba9 	bl	800a39c <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006c50:	4619      	mov	r1, r3
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f002 fd4e 	bl	80096f4 <lfs_fs_pred>
 8006c58:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 8006c5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d005      	beq.n	8006c6c <lfs_dir_relocatingcommit+0x14c>
 8006c60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c62:	f113 0f02 	cmn.w	r3, #2
 8006c66:	d001      	beq.n	8006c6c <lfs_dir_relocatingcommit+0x14c>
            return err;
 8006c68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c6a:	e210      	b.n	800708e <lfs_dir_relocatingcommit+0x56e>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8006c6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c6e:	f113 0f02 	cmn.w	r3, #2
 8006c72:	d007      	beq.n	8006c84 <lfs_dir_relocatingcommit+0x164>
 8006c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c78:	7ddb      	ldrb	r3, [r3, #23]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d002      	beq.n	8006c84 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8006c7e:	2302      	movs	r3, #2
 8006c80:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 8006c82:	e121      	b.n	8006ec8 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	7d9b      	ldrb	r3, [r3, #22]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 80fb 	beq.w	8006e84 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8006c92:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8006c98:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8006c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ca0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8006caa:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d004      	beq.n	8006cc0 <lfs_dir_relocatingcommit+0x1a0>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cbc:	3b08      	subs	r3, #8
 8006cbe:	e003      	b.n	8006cc8 <lfs_dir_relocatingcommit+0x1a8>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8006cc8:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	3318      	adds	r3, #24
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fd f939 	bl	8003f46 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ce0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 8006ce6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006cea:	9308      	str	r3, [sp, #32]
 8006cec:	4b50      	ldr	r3, [pc, #320]	@ (8006e30 <lfs_dir_relocatingcommit+0x310>)
 8006cee:	9307      	str	r3, [sp, #28]
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	9306      	str	r3, [sp, #24]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9305      	str	r3, [sp, #20]
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	9304      	str	r3, [sp, #16]
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	9303      	str	r3, [sp, #12]
 8006d00:	2300      	movs	r3, #0
 8006d02:	9302      	str	r3, [sp, #8]
 8006d04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006d08:	9301      	str	r3, [sp, #4]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	68b9      	ldr	r1, [r7, #8]
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f7fd ff6a 	bl	8004bec <lfs_dir_traverse>
 8006d18:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	3318      	adds	r3, #24
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fd f8f7 	bl	8003f12 <lfs_pair_fromle32>
        if (err) {
 8006d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00b      	beq.n	8006d42 <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8006d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d2c:	f113 0f1c 	cmn.w	r3, #28
 8006d30:	f000 80aa 	beq.w	8006e88 <lfs_dir_relocatingcommit+0x368>
 8006d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d36:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006d3a:	f000 80a5 	beq.w	8006e88 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8006d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d40:	e1a5      	b.n	800708e <lfs_dir_relocatingcommit+0x56e>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8006d42:	f107 031c 	add.w	r3, r7, #28
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	605a      	str	r2, [r3, #4]
 8006d4c:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006d54:	f107 031c 	add.w	r3, r7, #28
 8006d58:	4611      	mov	r1, r2
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fd f9a9 	bl	80040b2 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8006d66:	f107 031c 	add.w	r3, r7, #28
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fd f9a0 	bl	80040b2 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8006d78:	f107 031c 	add.w	r3, r7, #28
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fd f997 	bl	80040b2 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006d8a:	f023 0303 	bic.w	r3, r3, #3
 8006d8e:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8006d90:	f107 031c 	add.w	r3, r7, #28
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fd f9b1 	bl	80040fc <lfs_gstate_iszero>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f083 0301 	eor.w	r3, r3, #1
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d027      	beq.n	8006df6 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8006da6:	f107 031c 	add.w	r3, r7, #28
 8006daa:	461a      	mov	r2, r3
 8006dac:	68b9      	ldr	r1, [r7, #8]
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f7fe feec 	bl	8005b8c <lfs_dir_getgstate>
 8006db4:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 8006db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8006dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dbe:	e166      	b.n	800708e <lfs_dir_relocatingcommit+0x56e>
            }

            lfs_gstate_tole32(&delta);
 8006dc0:	f107 031c 	add.w	r3, r7, #28
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fd fa3f 	bl	8004248 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8006dca:	f107 031c 	add.w	r3, r7, #28
 8006dce:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8006dd2:	4a18      	ldr	r2, [pc, #96]	@ (8006e34 <lfs_dir_relocatingcommit+0x314>)
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7ff f885 	bl	8005ee4 <lfs_dir_commitattr>
 8006dda:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8006ddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d009      	beq.n	8006df6 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8006de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006de4:	f113 0f1c 	cmn.w	r3, #28
 8006de8:	d050      	beq.n	8006e8c <lfs_dir_relocatingcommit+0x36c>
 8006dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dec:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006df0:	d04c      	beq.n	8006e8c <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8006df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006df4:	e14b      	b.n	800708e <lfs_dir_relocatingcommit+0x56e>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8006df6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f7ff f8f1 	bl	8005fe4 <lfs_dir_commitcrc>
 8006e02:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 8006e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d016      	beq.n	8006e38 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8006e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e0c:	f113 0f1c 	cmn.w	r3, #28
 8006e10:	d03e      	beq.n	8006e90 <lfs_dir_relocatingcommit+0x370>
 8006e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e14:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006e18:	d03a      	beq.n	8006e90 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8006e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e1c:	e137      	b.n	800708e <lfs_dir_relocatingcommit+0x56e>
 8006e1e:	bf00      	nop
 8006e20:	0800c52c 	.word	0x0800c52c
 8006e24:	0800cff0 	.word	0x0800cff0
 8006e28:	0800c2b4 	.word	0x0800c2b4
 8006e2c:	0800c53c 	.word	0x0800c53c
 8006e30:	0800648b 	.word	0x0800648b
 8006e34:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8006e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006e3e:	6992      	ldr	r2, [r2, #24]
 8006e40:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e44:	fb01 f202 	mul.w	r2, r1, r2
 8006e48:	1a9b      	subs	r3, r3, r2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d006      	beq.n	8006e5c <lfs_dir_relocatingcommit+0x33c>
 8006e4e:	4b92      	ldr	r3, [pc, #584]	@ (8007098 <lfs_dir_relocatingcommit+0x578>)
 8006e50:	4a92      	ldr	r2, [pc, #584]	@ (800709c <lfs_dir_relocatingcommit+0x57c>)
 8006e52:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 8006e56:	4892      	ldr	r0, [pc, #584]	@ (80070a0 <lfs_dir_relocatingcommit+0x580>)
 8006e58:	f003 faa0 	bl	800a39c <__assert_func>
        dir->off = commit.off;
 8006e5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8006e62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	333c      	adds	r3, #60	@ 0x3c
 8006e6e:	3230      	adds	r2, #48	@ 0x30
 8006e70:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3348      	adds	r3, #72	@ 0x48
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	605a      	str	r2, [r3, #4]
 8006e80:	609a      	str	r2, [r3, #8]
 8006e82:	e021      	b.n	8006ec8 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8006e84:	bf00      	nop
 8006e86:	e004      	b.n	8006e92 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8006e88:	bf00      	nop
 8006e8a:	e002      	b.n	8006e92 <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8006e8c:	bf00      	nop
 8006e8e:	e000      	b.n	8006e92 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8006e90:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3310      	adds	r3, #16
 8006e96:	4619      	mov	r1, r3
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f7fc fc1c 	bl	80036d6 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	8a9b      	ldrh	r3, [r3, #20]
 8006ea2:	9302      	str	r3, [sp, #8]
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	9301      	str	r3, [sp, #4]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	68b9      	ldr	r1, [r7, #8]
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f7ff fd1b 	bl	80068f0 <lfs_dir_splittingcompact>
 8006eba:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8006ebc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	da01      	bge.n	8006ec6 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8006ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ec4:	e0e3      	b.n	800708e <lfs_dir_relocatingcommit+0x56e>
    }

    goto fixmlist;
 8006ec6:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eda:	663b      	str	r3, [r7, #96]	@ 0x60
 8006edc:	e0d2      	b.n	8007084 <lfs_dir_relocatingcommit+0x564>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8006ede:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7fc ffbb 	bl	8003e64 <lfs_pair_cmp>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f040 80c4 	bne.w	800707e <lfs_dir_relocatingcommit+0x55e>
            d->m = *dir;
 8006ef6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	f103 0408 	add.w	r4, r3, #8
 8006efe:	4615      	mov	r5, r2
 8006f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006f08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8006f0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f0e:	3308      	adds	r3, #8
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	f000 80a9 	beq.w	800706a <lfs_dir_relocatingcommit+0x54a>
                for (int i = 0; i < attrcount; i++) {
 8006f18:	2300      	movs	r3, #0
 8006f1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f1c:	e07b      	b.n	8007016 <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8006f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f20:	00db      	lsls	r3, r3, #3
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	4413      	add	r3, r2
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fd f867 	bl	8003ffc <lfs_tag_type3>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	461a      	mov	r2, r3
 8006f32:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d115      	bne.n	8006f66 <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8006f3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f3c:	889c      	ldrh	r4, [r3, #4]
 8006f3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f40:	00db      	lsls	r3, r3, #3
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	4413      	add	r3, r2
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fd f881 	bl	8004050 <lfs_tag_id>
 8006f4e:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8006f50:	429c      	cmp	r4, r3
 8006f52:	d108      	bne.n	8006f66 <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8006f54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f5a:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8006f5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f62:	60da      	str	r2, [r3, #12]
 8006f64:	e054      	b.n	8007010 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8006f66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fd f843 	bl	8003ffc <lfs_tag_type3>
 8006f76:	4603      	mov	r3, r0
 8006f78:	461a      	mov	r2, r3
 8006f7a:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d11c      	bne.n	8006fbc <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8006f82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f84:	889c      	ldrh	r4, [r3, #4]
 8006f86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f88:	00db      	lsls	r3, r3, #3
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fd f85d 	bl	8004050 <lfs_tag_id>
 8006f96:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8006f98:	429c      	cmp	r4, r3
 8006f9a:	d90f      	bls.n	8006fbc <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 8006f9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f9e:	889b      	ldrh	r3, [r3, #4]
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fa6:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8006fa8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006faa:	799b      	ldrb	r3, [r3, #6]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d12f      	bne.n	8007010 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8006fb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb4:	1e5a      	subs	r2, r3, #1
 8006fb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fb8:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8006fba:	e029      	b.n	8007010 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8006fbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fbe:	00db      	lsls	r3, r3, #3
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fd f818 	bl	8003ffc <lfs_tag_type3>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f240 4301 	movw	r3, #1025	@ 0x401
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d11b      	bne.n	8007010 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8006fd8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fda:	889c      	ldrh	r4, [r3, #4]
 8006fdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fd f832 	bl	8004050 <lfs_tag_id>
 8006fec:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8006fee:	429c      	cmp	r4, r3
 8006ff0:	d30e      	bcc.n	8007010 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 8006ff2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ff4:	889b      	ldrh	r3, [r3, #4]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ffc:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8006ffe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007000:	799b      	ldrb	r3, [r3, #6]
 8007002:	2b02      	cmp	r3, #2
 8007004:	d104      	bne.n	8007010 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 8007006:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800700e:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 8007010:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007012:	3301      	adds	r3, #1
 8007014:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007016:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007018:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800701c:	429a      	cmp	r2, r3
 800701e:	f6ff af7e 	blt.w	8006f1e <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8007022:	e022      	b.n	800706a <lfs_dir_relocatingcommit+0x54a>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 8007024:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007026:	f103 0220 	add.w	r2, r3, #32
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3320      	adds	r3, #32
 800702e:	4619      	mov	r1, r3
 8007030:	4610      	mov	r0, r2
 8007032:	f7fc ff17 	bl	8003e64 <lfs_pair_cmp>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d007      	beq.n	800704c <lfs_dir_relocatingcommit+0x52c>
                    d->id -= d->m.count;
 800703c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800703e:	889a      	ldrh	r2, [r3, #4]
 8007040:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007042:	8b9b      	ldrh	r3, [r3, #28]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	b29a      	uxth	r2, r3
 8007048:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800704a:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800704c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800704e:	f103 0108 	add.w	r1, r3, #8
 8007052:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007054:	3320      	adds	r3, #32
 8007056:	461a      	mov	r2, r3
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f7fe fd7b 	bl	8005b54 <lfs_dir_fetch>
 800705e:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 8007060:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <lfs_dir_relocatingcommit+0x54a>
                    return err;
 8007066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007068:	e011      	b.n	800708e <lfs_dir_relocatingcommit+0x56e>
            while (d->id >= d->m.count && d->m.split) {
 800706a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800706c:	889a      	ldrh	r2, [r3, #4]
 800706e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007070:	8b9b      	ldrh	r3, [r3, #28]
 8007072:	429a      	cmp	r2, r3
 8007074:	d303      	bcc.n	800707e <lfs_dir_relocatingcommit+0x55e>
 8007076:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007078:	7fdb      	ldrb	r3, [r3, #31]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1d2      	bne.n	8007024 <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800707e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	663b      	str	r3, [r7, #96]	@ 0x60
 8007084:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007086:	2b00      	cmp	r3, #0
 8007088:	f47f af29 	bne.w	8006ede <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 800708c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 800708e:	4618      	mov	r0, r3
 8007090:	3770      	adds	r7, #112	@ 0x70
 8007092:	46bd      	mov	sp, r7
 8007094:	bdb0      	pop	{r4, r5, r7, pc}
 8007096:	bf00      	nop
 8007098:	0800c41c 	.word	0x0800c41c
 800709c:	0800cff0 	.word	0x0800cff0
 80070a0:	0800c2b4 	.word	0x0800c2b4

080070a4 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80070a4:	b5b0      	push	{r4, r5, r7, lr}
 80070a6:	b0bc      	sub	sp, #240	@ 0xf0
 80070a8:	af04      	add	r7, sp, #16
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
 80070b0:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80070ba:	e045      	b.n	8007148 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80070bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070c0:	3308      	adds	r3, #8
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d03a      	beq.n	800713e <lfs_dir_orphaningcommit+0x9a>
 80070c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070cc:	3308      	adds	r3, #8
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	4611      	mov	r1, r2
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fc fec6 	bl	8003e64 <lfs_pair_cmp>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d12f      	bne.n	800713e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80070de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070e2:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d12a      	bne.n	800713e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80070e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d023      	beq.n	800713e <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 80070f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8007102:	429a      	cmp	r2, r3
 8007104:	d91b      	bls.n	800713e <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8007106:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 fff2 	bl	80080f4 <lfs_file_outline>
 8007110:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 8007114:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <lfs_dir_orphaningcommit+0x7e>
                return err;
 800711c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007120:	e2ad      	b.n	800767e <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8007122:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f001 f806 	bl	8008138 <lfs_file_flush>
 800712c:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 8007130:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <lfs_dir_orphaningcommit+0x9a>
                return err;
 8007138:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800713c:	e29f      	b.n	800767e <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800713e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1b5      	bne.n	80070bc <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8007166:	461d      	mov	r5, r3
 8007168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800716a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800716c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007170:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 800717a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800717e:	9301      	str	r3, [sp, #4]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f7ff fcca 	bl	8006b20 <lfs_dir_relocatingcommit>
 800718c:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8007190:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007194:	2b00      	cmp	r3, #0
 8007196:	da02      	bge.n	800719e <lfs_dir_orphaningcommit+0xfa>
        return state;
 8007198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800719c:	e26f      	b.n	800767e <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80071a4:	4611      	mov	r1, r2
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fc fe5c 	bl	8003e64 <lfs_pair_cmp>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d109      	bne.n	80071c6 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	461d      	mov	r5, r3
 80071b6:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80071ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80071c2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 80071c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d14a      	bne.n	8007264 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3348      	adds	r3, #72	@ 0x48
 80071d2:	461a      	mov	r2, r3
 80071d4:	68b9      	ldr	r1, [r7, #8]
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f7fe fcd8 	bl	8005b8c <lfs_dir_getgstate>
 80071dc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 80071e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <lfs_dir_orphaningcommit+0x14a>
            return err;
 80071e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071ec:	e247      	b.n	800767e <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 80071ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 80071f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	3318      	adds	r3, #24
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fc fea1 	bl	8003f46 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	7ddb      	ldrb	r3, [r3, #23]
 8007208:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800720c:	051a      	lsls	r2, r3, #20
 800720e:	4bc2      	ldr	r3, [pc, #776]	@ (8007518 <lfs_dir_orphaningcommit+0x474>)
 8007210:	4313      	orrs	r3, r2
 8007212:	667b      	str	r3, [r7, #100]	@ 0x64
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	3318      	adds	r3, #24
 8007218:	66bb      	str	r3, [r7, #104]	@ 0x68
 800721a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800721e:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8007222:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8007226:	2000      	movs	r0, #0
 8007228:	9001      	str	r0, [sp, #4]
 800722a:	2001      	movs	r0, #1
 800722c:	9000      	str	r0, [sp, #0]
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f7ff fc76 	bl	8006b20 <lfs_dir_relocatingcommit>
 8007234:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	3318      	adds	r3, #24
 800723c:	4618      	mov	r0, r3
 800723e:	f7fc fe68 	bl	8003f12 <lfs_pair_fromle32>
        if (state < 0) {
 8007242:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007246:	2b00      	cmp	r3, #0
 8007248:	da02      	bge.n	8007250 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 800724a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800724e:	e216      	b.n	800767e <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8007250:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8007254:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8007258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800725a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800725c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007260:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8007264:	2300      	movs	r3, #0
 8007266:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 800726a:	e1fc      	b.n	8007666 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 800726c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8007270:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007274:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8007278:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800727c:	4ca7      	ldr	r4, [pc, #668]	@ (800751c <lfs_dir_orphaningcommit+0x478>)
 800727e:	9403      	str	r4, [sp, #12]
 8007280:	9102      	str	r1, [sp, #8]
 8007282:	9201      	str	r2, [sp, #4]
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	4603      	mov	r3, r0
 8007288:	f640 128c 	movw	r2, #2444	@ 0x98c
 800728c:	49a4      	ldr	r1, [pc, #656]	@ (8007520 <lfs_dir_orphaningcommit+0x47c>)
 800728e:	48a5      	ldr	r0, [pc, #660]	@ (8007524 <lfs_dir_orphaningcommit+0x480>)
 8007290:	f003 fada 	bl	800a848 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f103 0220 	add.w	r2, r3, #32
 80072a0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80072a4:	4611      	mov	r1, r2
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7fc fddc 	bl	8003e64 <lfs_pair_cmp>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d107      	bne.n	80072c2 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 80072b2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 80072ba:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072ca:	e037      	b.n	800733c <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 80072cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80072d0:	f103 0208 	add.w	r2, r3, #8
 80072d4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80072d8:	4611      	mov	r1, r2
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fc fdc2 	bl	8003e64 <lfs_pair_cmp>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d109      	bne.n	80072fa <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 80072e6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80072ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80072ee:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 80072f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80072f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80072f8:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 80072fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80072fe:	799b      	ldrb	r3, [r3, #6]
 8007300:	2b02      	cmp	r3, #2
 8007302:	d116      	bne.n	8007332 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8007304:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007308:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800730c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007310:	4611      	mov	r1, r2
 8007312:	4618      	mov	r0, r3
 8007314:	f7fc fda6 	bl	8003e64 <lfs_pair_cmp>
 8007318:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 800731a:	2b00      	cmp	r3, #0
 800731c:	d109      	bne.n	8007332 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 800731e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8007322:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007326:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8007328:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800732c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007330:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8007332:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800733c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1c3      	bne.n	80072cc <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8007344:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8007348:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800734c:	4619      	mov	r1, r3
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f002 fa82 	bl	8009858 <lfs_fs_parent>
 8007354:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8007358:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800735c:	2b00      	cmp	r3, #0
 800735e:	da07      	bge.n	8007370 <lfs_dir_orphaningcommit+0x2cc>
 8007360:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007364:	f113 0f02 	cmn.w	r3, #2
 8007368:	d002      	beq.n	8007370 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 800736a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800736e:	e186      	b.n	800767e <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8007370:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007374:	f113 0f02 	cmn.w	r3, #2
 8007378:	bf14      	ite	ne
 800737a:	2301      	movne	r3, #1
 800737c:	2300      	moveq	r3, #0
 800737e:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 8007382:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007386:	f113 0f02 	cmn.w	r3, #2
 800738a:	f000 809e 	beq.w	80074ca <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 800738e:	2101      	movs	r1, #1
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f002 faf9 	bl	8009988 <lfs_fs_preporphans>
 8007396:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 800739a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <lfs_dir_orphaningcommit+0x304>
                return err;
 80073a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80073a6:	e16a      	b.n	800767e <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80073a8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80073ac:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	3330      	adds	r3, #48	@ 0x30
 80073b4:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80073b8:	4611      	mov	r1, r2
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7fc ff04 	bl	80041c8 <lfs_gstate_hasmovehere>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d02d      	beq.n	8007422 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fc fe40 	bl	8004050 <lfs_tag_id>
 80073d0:	4603      	mov	r3, r0
 80073d2:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 80073d6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80073d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073da:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 80073de:	484f      	ldr	r0, [pc, #316]	@ (800751c <lfs_dir_orphaningcommit+0x478>)
 80073e0:	9002      	str	r0, [sp, #8]
 80073e2:	9201      	str	r2, [sp, #4]
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	460b      	mov	r3, r1
 80073e8:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 80073ec:	494c      	ldr	r1, [pc, #304]	@ (8007520 <lfs_dir_orphaningcommit+0x47c>)
 80073ee:	484e      	ldr	r0, [pc, #312]	@ (8007528 <lfs_dir_orphaningcommit+0x484>)
 80073f0:	f003 fa2a 	bl	800a848 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80073f4:	2200      	movs	r2, #0
 80073f6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f002 fb14 	bl	8009a28 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8007400:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007404:	4618      	mov	r0, r3
 8007406:	f7fc fe23 	bl	8004050 <lfs_tag_id>
 800740a:	4603      	mov	r3, r0
 800740c:	461a      	mov	r2, r3
 800740e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8007412:	4293      	cmp	r3, r2
 8007414:	d205      	bcs.n	8007422 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8007416:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800741a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800741e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8007422:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007424:	657b      	str	r3, [r7, #84]	@ 0x54
 8007426:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007428:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 800742a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800742e:	4618      	mov	r0, r3
 8007430:	f7fc fd89 	bl	8003f46 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8007434:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8007438:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800743c:	4293      	cmp	r3, r2
 800743e:	d007      	beq.n	8007450 <lfs_dir_orphaningcommit+0x3ac>
 8007440:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8007444:	029b      	lsls	r3, r3, #10
 8007446:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800744a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800744e:	e000      	b.n	8007452 <lfs_dir_orphaningcommit+0x3ae>
 8007450:	2300      	movs	r3, #0
 8007452:	647b      	str	r3, [r7, #68]	@ 0x44
 8007454:	2300      	movs	r3, #0
 8007456:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007458:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800745c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800745e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007462:	653b      	str	r3, [r7, #80]	@ 0x50
 8007464:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007468:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800746c:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8007470:	2000      	movs	r0, #0
 8007472:	9001      	str	r0, [sp, #4]
 8007474:	2002      	movs	r0, #2
 8007476:	9000      	str	r0, [sp, #0]
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f7ff fb51 	bl	8006b20 <lfs_dir_relocatingcommit>
 800747e:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8007482:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007486:	4618      	mov	r0, r3
 8007488:	f7fc fd43 	bl	8003f12 <lfs_pair_fromle32>
            if (state < 0) {
 800748c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007490:	2b00      	cmp	r3, #0
 8007492:	da02      	bge.n	800749a <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8007494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007498:	e0f1      	b.n	800767e <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 800749a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d113      	bne.n	80074ca <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 80074a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 80074a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 80074ae:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80074b2:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 80074b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80074be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 80074c2:	2301      	movs	r3, #1
 80074c4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80074c8:	e0cd      	b.n	8007666 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 80074ca:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80074ce:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80074d2:	4619      	mov	r1, r3
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f002 f90d 	bl	80096f4 <lfs_fs_pred>
 80074da:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 80074de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d007      	beq.n	80074f6 <lfs_dir_orphaningcommit+0x452>
 80074e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074ea:	f113 0f02 	cmn.w	r3, #2
 80074ee:	d002      	beq.n	80074f6 <lfs_dir_orphaningcommit+0x452>
            return err;
 80074f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074f4:	e0c3      	b.n	800767e <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 80074f6:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d01a      	beq.n	8007534 <lfs_dir_orphaningcommit+0x490>
 80074fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007502:	f113 0f02 	cmn.w	r3, #2
 8007506:	d115      	bne.n	8007534 <lfs_dir_orphaningcommit+0x490>
 8007508:	4b08      	ldr	r3, [pc, #32]	@ (800752c <lfs_dir_orphaningcommit+0x488>)
 800750a:	4a09      	ldr	r2, [pc, #36]	@ (8007530 <lfs_dir_orphaningcommit+0x48c>)
 800750c:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 8007510:	4803      	ldr	r0, [pc, #12]	@ (8007520 <lfs_dir_orphaningcommit+0x47c>)
 8007512:	f002 ff43 	bl	800a39c <__assert_func>
 8007516:	bf00      	nop
 8007518:	000ffc08 	.word	0x000ffc08
 800751c:	0800c3c4 	.word	0x0800c3c4
 8007520:	0800c2b4 	.word	0x0800c2b4
 8007524:	0800c544 	.word	0x0800c544
 8007528:	0800c580 	.word	0x0800c580
 800752c:	0800c5c4 	.word	0x0800c5c4
 8007530:	0800d00c 	.word	0x0800d00c

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8007534:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007538:	f113 0f02 	cmn.w	r3, #2
 800753c:	f000 8093 	beq.w	8007666 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3330      	adds	r3, #48	@ 0x30
 8007544:	4618      	mov	r0, r3
 8007546:	f7fc fdf6 	bl	8004136 <lfs_gstate_hasorphans>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d011      	beq.n	8007574 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8007550:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8007554:	425b      	negs	r3, r3
 8007556:	b2db      	uxtb	r3, r3
 8007558:	b25b      	sxtb	r3, r3
 800755a:	4619      	mov	r1, r3
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f002 fa13 	bl	8009988 <lfs_fs_preporphans>
 8007562:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 8007566:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 800756e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007572:	e084      	b.n	800767e <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8007574:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8007578:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	3330      	adds	r3, #48	@ 0x30
 8007580:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8007584:	4611      	mov	r1, r2
 8007586:	4618      	mov	r0, r3
 8007588:	f7fc fe1e 	bl	80041c8 <lfs_gstate_hasmovehere>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d01c      	beq.n	80075cc <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007596:	4618      	mov	r0, r3
 8007598:	f7fc fd5a 	bl	8004050 <lfs_tag_id>
 800759c:	4603      	mov	r3, r0
 800759e:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 80075a2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80075a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80075a6:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 80075aa:	4837      	ldr	r0, [pc, #220]	@ (8007688 <lfs_dir_orphaningcommit+0x5e4>)
 80075ac:	9002      	str	r0, [sp, #8]
 80075ae:	9201      	str	r2, [sp, #4]
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	460b      	mov	r3, r1
 80075b4:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 80075b8:	4934      	ldr	r1, [pc, #208]	@ (800768c <lfs_dir_orphaningcommit+0x5e8>)
 80075ba:	4835      	ldr	r0, [pc, #212]	@ (8007690 <lfs_dir_orphaningcommit+0x5ec>)
 80075bc:	f003 f944 	bl	800a848 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80075c0:	2200      	movs	r2, #0
 80075c2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f002 fa2e 	bl	8009a28 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 80075cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 80075d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80075d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 80075d8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fc fcb2 	bl	8003f46 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80075e2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 80075e6:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d007      	beq.n	80075fe <lfs_dir_orphaningcommit+0x55a>
 80075ee:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 80075f2:	029b      	lsls	r3, r3, #10
 80075f4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80075f8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80075fc:	e000      	b.n	8007600 <lfs_dir_orphaningcommit+0x55c>
 80075fe:	2300      	movs	r3, #0
 8007600:	627b      	str	r3, [r7, #36]	@ 0x24
 8007602:	2300      	movs	r3, #0
 8007604:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007606:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800760a:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800760e:	051a      	lsls	r2, r3, #20
 8007610:	4b20      	ldr	r3, [pc, #128]	@ (8007694 <lfs_dir_orphaningcommit+0x5f0>)
 8007612:	4313      	orrs	r3, r2
 8007614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007616:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800761a:	633b      	str	r3, [r7, #48]	@ 0x30
 800761c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007620:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8007624:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8007628:	2000      	movs	r0, #0
 800762a:	9001      	str	r0, [sp, #4]
 800762c:	2002      	movs	r0, #2
 800762e:	9000      	str	r0, [sp, #0]
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f7ff fa75 	bl	8006b20 <lfs_dir_relocatingcommit>
 8007636:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800763a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800763e:	4618      	mov	r0, r3
 8007640:	f7fc fc67 	bl	8003f12 <lfs_pair_fromle32>
            if (state < 0) {
 8007644:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007648:	2b00      	cmp	r3, #0
 800764a:	da02      	bge.n	8007652 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 800764c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007650:	e015      	b.n	800767e <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8007652:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8007656:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 800765a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800765c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800765e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007662:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8007666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800766a:	2b01      	cmp	r3, #1
 800766c:	f43f adfe 	beq.w	800726c <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8007670:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <lfs_dir_orphaningcommit+0x5d8>
 8007678:	2303      	movs	r3, #3
 800767a:	e000      	b.n	800767e <lfs_dir_orphaningcommit+0x5da>
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	37e0      	adds	r7, #224	@ 0xe0
 8007682:	46bd      	mov	sp, r7
 8007684:	bdb0      	pop	{r4, r5, r7, pc}
 8007686:	bf00      	nop
 8007688:	0800c3c4 	.word	0x0800c3c4
 800768c:	0800c2b4 	.word	0x0800c2b4
 8007690:	0800c580 	.word	0x0800c580
 8007694:	000ffc08 	.word	0x000ffc08

08007698 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
 80076a4:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	68b9      	ldr	r1, [r7, #8]
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f7ff fcf9 	bl	80070a4 <lfs_dir_orphaningcommit>
 80076b2:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	da01      	bge.n	80076be <lfs_dir_commit+0x26>
        return orphans;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	e00d      	b.n	80076da <lfs_dir_commit+0x42>
    }

    if (orphans) {
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d009      	beq.n	80076d8 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 80076c4:	2100      	movs	r1, #0
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f002 fad0 	bl	8009c6c <lfs_fs_deorphan>
 80076cc:	6138      	str	r0, [r7, #16]
        if (err) {
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <lfs_dir_commit+0x40>
            return err;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	e000      	b.n	80076da <lfs_dir_commit+0x42>
        }
    }

    return 0;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3718      	adds	r7, #24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 80076e2:	b590      	push	{r4, r7, lr}
 80076e4:	b087      	sub	sp, #28
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	3b08      	subs	r3, #8
 80076fa:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	fbb2 f3f3 	udiv	r3, r2, r3
 8007704:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <lfs_ctz_index+0x2e>
        return 0;
 800770c:	2300      	movs	r3, #0
 800770e:	e01c      	b.n	800774a <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	3b01      	subs	r3, #1
 8007714:	4618      	mov	r0, r3
 8007716:	f7fb ff7e 	bl	8003616 <lfs_popc>
 800771a:	4603      	mov	r3, r0
 800771c:	3302      	adds	r3, #2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	1ad2      	subs	r2, r2, r3
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	fbb2 f3f3 	udiv	r3, r2, r3
 800772a:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	fb02 f303 	mul.w	r3, r2, r3
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	1ad4      	subs	r4, r2, r3
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f7fb ff6c 	bl	8003616 <lfs_popc>
 800773e:	4603      	mov	r3, r0
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	1ae2      	subs	r2, r4, r3
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	601a      	str	r2, [r3, #0]
    return i;
 8007748:	68fb      	ldr	r3, [r7, #12]
}
 800774a:	4618      	mov	r0, r3
 800774c:	371c      	adds	r7, #28
 800774e:	46bd      	mov	sp, r7
 8007750:	bd90      	pop	{r4, r7, pc}

08007752 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8007752:	b590      	push	{r4, r7, lr}
 8007754:	b08f      	sub	sp, #60	@ 0x3c
 8007756:	af04      	add	r7, sp, #16
 8007758:	60f8      	str	r0, [r7, #12]
 800775a:	60b9      	str	r1, [r7, #8]
 800775c:	607a      	str	r2, [r7, #4]
 800775e:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8007760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007762:	2b00      	cmp	r3, #0
 8007764:	d108      	bne.n	8007778 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8007766:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007768:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800776c:	601a      	str	r2, [r3, #0]
        *off = 0;
 800776e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007770:	2200      	movs	r2, #0
 8007772:	601a      	str	r2, [r3, #0]
        return 0;
 8007774:	2300      	movs	r3, #0
 8007776:	e053      	b.n	8007820 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8007778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777a:	3b01      	subs	r3, #1
 800777c:	617b      	str	r3, [r7, #20]
 800777e:	f107 0314 	add.w	r3, r7, #20
 8007782:	4619      	mov	r1, r3
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f7ff ffac 	bl	80076e2 <lfs_ctz_index>
 800778a:	4603      	mov	r3, r0
 800778c:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800778e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8007792:	4619      	mov	r1, r3
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f7ff ffa4 	bl	80076e2 <lfs_ctz_index>
 800779a:	4603      	mov	r3, r0
 800779c:	623b      	str	r3, [r7, #32]

    while (current > target) {
 800779e:	e034      	b.n	800780a <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 80077a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	3301      	adds	r3, #1
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fb ff15 	bl	80035d8 <lfs_npw2>
 80077ae:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 80077b0:	1e5c      	subs	r4, r3, #1
 80077b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80077b4:	f7fb ff20 	bl	80035f8 <lfs_ctz>
 80077b8:	4603      	mov	r3, r0
 80077ba:	4619      	mov	r1, r3
 80077bc:	4620      	mov	r0, r4
 80077be:	f7fb fed4 	bl	800356a <lfs_min>
 80077c2:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	69fa      	ldr	r2, [r7, #28]
 80077c8:	0092      	lsls	r2, r2, #2
 80077ca:	2104      	movs	r1, #4
 80077cc:	9103      	str	r1, [sp, #12]
 80077ce:	4639      	mov	r1, r7
 80077d0:	9102      	str	r1, [sp, #8]
 80077d2:	9201      	str	r2, [sp, #4]
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	2304      	movs	r3, #4
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	68b9      	ldr	r1, [r7, #8]
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f7fb ff9f 	bl	8003720 <lfs_bd_read>
 80077e2:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fb ff2f 	bl	800364a <lfs_fromle32>
 80077ec:	4603      	mov	r3, r0
 80077ee:	603b      	str	r3, [r7, #0]
        if (err) {
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <lfs_ctz_find+0xa8>
            return err;
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	e012      	b.n	8007820 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 80077fa:	2201      	movs	r2, #1
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007802:	461a      	mov	r2, r3
 8007804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007806:	1a9b      	subs	r3, r3, r2
 8007808:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 800780a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	429a      	cmp	r2, r3
 8007810:	d8c6      	bhi.n	80077a0 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007816:	601a      	str	r2, [r3, #0]
    *off = pos;
 8007818:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800781a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800781c:	601a      	str	r2, [r3, #0]
    return 0;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	372c      	adds	r7, #44	@ 0x2c
 8007824:	46bd      	mov	sp, r7
 8007826:	bd90      	pop	{r4, r7, pc}

08007828 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8007828:	b580      	push	{r7, lr}
 800782a:	b092      	sub	sp, #72	@ 0x48
 800782c:	af04      	add	r7, sp, #16
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
 8007834:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8007836:	f107 0320 	add.w	r3, r7, #32
 800783a:	4619      	mov	r1, r3
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f7fc ff05 	bl	800464c <lfs_alloc>
 8007842:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 8007844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <lfs_ctz_extend+0x26>
            return err;
 800784a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800784c:	e0eb      	b.n	8007a26 <lfs_ctz_extend+0x1fe>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	4619      	mov	r1, r3
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f7fc faa4 	bl	8003da0 <lfs_bd_erase>
 8007858:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 800785a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800785c:	2b00      	cmp	r3, #0
 800785e:	d006      	beq.n	800786e <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8007860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007862:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8007866:	f000 80cd 	beq.w	8007a04 <lfs_ctz_extend+0x1dc>
                    goto relocate;
                }
                return err;
 800786a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800786c:	e0db      	b.n	8007a26 <lfs_ctz_extend+0x1fe>
            }

            if (size == 0) {
 800786e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007870:	2b00      	cmp	r3, #0
 8007872:	d107      	bne.n	8007884 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8007874:	6a3a      	ldr	r2, [r7, #32]
 8007876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007878:	601a      	str	r2, [r3, #0]
                *off = 0;
 800787a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]
                return 0;
 8007880:	2300      	movs	r3, #0
 8007882:	e0d0      	b.n	8007a26 <lfs_ctz_extend+0x1fe>
            }

            lfs_size_t noff = size - 1;
 8007884:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007886:	3b01      	subs	r3, #1
 8007888:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 800788a:	f107 031c 	add.w	r3, r7, #28
 800788e:	4619      	mov	r1, r3
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f7ff ff26 	bl	80076e2 <lfs_ctz_index>
 8007896:	4603      	mov	r3, r0
 8007898:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	3301      	adds	r3, #1
 800789e:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078a4:	69da      	ldr	r2, [r3, #28]
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d046      	beq.n	800793a <lfs_ctz_extend+0x112>
                for (lfs_off_t i = 0; i < noff; i++) {
 80078ac:	2300      	movs	r3, #0
 80078ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80078b0:	e037      	b.n	8007922 <lfs_ctz_extend+0xfa>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b6:	1ad2      	subs	r2, r2, r3
 80078b8:	2301      	movs	r3, #1
 80078ba:	9303      	str	r3, [sp, #12]
 80078bc:	f107 0317 	add.w	r3, r7, #23
 80078c0:	9302      	str	r3, [sp, #8]
 80078c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078c4:	9301      	str	r3, [sp, #4]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	4613      	mov	r3, r2
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	2100      	movs	r1, #0
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f7fb ff25 	bl	8003720 <lfs_bd_read>
 80078d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 80078d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <lfs_ctz_extend+0xba>
                        return err;
 80078de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e0:	e01e      	b.n	8007920 <lfs_ctz_extend+0xf8>
                    }

                    err = lfs_bd_prog(lfs,
 80078e2:	6a3b      	ldr	r3, [r7, #32]
 80078e4:	2201      	movs	r2, #1
 80078e6:	9203      	str	r2, [sp, #12]
 80078e8:	f107 0217 	add.w	r2, r7, #23
 80078ec:	9202      	str	r2, [sp, #8]
 80078ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078f0:	9201      	str	r2, [sp, #4]
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	2301      	movs	r3, #1
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	68b9      	ldr	r1, [r7, #8]
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f7fc f9a2 	bl	8003c44 <lfs_bd_prog>
 8007900:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8007902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007904:	2b00      	cmp	r3, #0
 8007906:	d007      	beq.n	8007918 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8007908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800790a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800790e:	d101      	bne.n	8007914 <lfs_ctz_extend+0xec>
                            goto relocate;
 8007910:	bf00      	nop
                    goto relocate;
 8007912:	e07a      	b.n	8007a0a <lfs_ctz_extend+0x1e2>
                        }
                        return err;
 8007914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007916:	e003      	b.n	8007920 <lfs_ctz_extend+0xf8>
                for (lfs_off_t i = 0; i < noff; i++) {
 8007918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800791a:	3301      	adds	r3, #1
 800791c:	637b      	str	r3, [r7, #52]	@ 0x34
 800791e:	e000      	b.n	8007922 <lfs_ctz_extend+0xfa>
                return err;
 8007920:	e081      	b.n	8007a26 <lfs_ctz_extend+0x1fe>
                for (lfs_off_t i = 0; i < noff; i++) {
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007926:	429a      	cmp	r2, r3
 8007928:	d3c3      	bcc.n	80078b2 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 800792a:	6a3a      	ldr	r2, [r7, #32]
 800792c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800792e:	601a      	str	r2, [r3, #0]
                *off = noff;
 8007930:	69fa      	ldr	r2, [r7, #28]
 8007932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007934:	601a      	str	r2, [r3, #0]
                return 0;
 8007936:	2300      	movs	r3, #0
 8007938:	e075      	b.n	8007a26 <lfs_ctz_extend+0x1fe>
            }

            // append block
            index += 1;
 800793a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793c:	3301      	adds	r3, #1
 800793e:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8007940:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007942:	f7fb fe59 	bl	80035f8 <lfs_ctz>
 8007946:	4603      	mov	r3, r0
 8007948:	3301      	adds	r3, #1
 800794a:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8007950:	2300      	movs	r3, #0
 8007952:	633b      	str	r3, [r7, #48]	@ 0x30
 8007954:	e049      	b.n	80079ea <lfs_ctz_extend+0x1c2>
                nhead = lfs_tole32(nhead);
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	4618      	mov	r0, r3
 800795a:	f7fb fe81 	bl	8003660 <lfs_tole32>
 800795e:	4603      	mov	r3, r0
 8007960:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007966:	0092      	lsls	r2, r2, #2
 8007968:	2104      	movs	r1, #4
 800796a:	9103      	str	r1, [sp, #12]
 800796c:	f107 0118 	add.w	r1, r7, #24
 8007970:	9102      	str	r1, [sp, #8]
 8007972:	9201      	str	r2, [sp, #4]
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	2301      	movs	r3, #1
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	68b9      	ldr	r1, [r7, #8]
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f7fc f961 	bl	8003c44 <lfs_bd_prog>
 8007982:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	4618      	mov	r0, r3
 8007988:	f7fb fe5f 	bl	800364a <lfs_fromle32>
 800798c:	4603      	mov	r3, r0
 800798e:	61bb      	str	r3, [r7, #24]
                if (err) {
 8007990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007992:	2b00      	cmp	r3, #0
 8007994:	d005      	beq.n	80079a2 <lfs_ctz_extend+0x17a>
                    if (err == LFS_ERR_CORRUPT) {
 8007996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007998:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800799c:	d034      	beq.n	8007a08 <lfs_ctz_extend+0x1e0>
                        goto relocate;
                    }
                    return err;
 800799e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a0:	e041      	b.n	8007a26 <lfs_ctz_extend+0x1fe>
                }

                if (i != skips-1) {
 80079a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a4:	3b01      	subs	r3, #1
 80079a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d01b      	beq.n	80079e4 <lfs_ctz_extend+0x1bc>
                    err = lfs_bd_read(lfs,
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079b0:	0092      	lsls	r2, r2, #2
 80079b2:	2104      	movs	r1, #4
 80079b4:	9103      	str	r1, [sp, #12]
 80079b6:	f107 0118 	add.w	r1, r7, #24
 80079ba:	9102      	str	r1, [sp, #8]
 80079bc:	9201      	str	r2, [sp, #4]
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	2304      	movs	r3, #4
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	2100      	movs	r1, #0
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f7fb feaa 	bl	8003720 <lfs_bd_read>
 80079cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7fb fe3a 	bl	800364a <lfs_fromle32>
 80079d6:	4603      	mov	r3, r0
 80079d8:	61bb      	str	r3, [r7, #24]
                    if (err) {
 80079da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <lfs_ctz_extend+0x1bc>
                        return err;
 80079e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e2:	e020      	b.n	8007a26 <lfs_ctz_extend+0x1fe>
            for (lfs_off_t i = 0; i < skips; i++) {
 80079e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e6:	3301      	adds	r3, #1
 80079e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80079ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d3b1      	bcc.n	8007956 <lfs_ctz_extend+0x12e>
                    }
                }
            }

            *block = nblock;
 80079f2:	6a3a      	ldr	r2, [r7, #32]
 80079f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079f6:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 80079f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fa:	009a      	lsls	r2, r3, #2
 80079fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079fe:	601a      	str	r2, [r3, #0]
            return 0;
 8007a00:	2300      	movs	r3, #0
 8007a02:	e010      	b.n	8007a26 <lfs_ctz_extend+0x1fe>
                    goto relocate;
 8007a04:	bf00      	nop
 8007a06:	e000      	b.n	8007a0a <lfs_ctz_extend+0x1e2>
                        goto relocate;
 8007a08:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	4a08      	ldr	r2, [pc, #32]	@ (8007a30 <lfs_ctz_extend+0x208>)
 8007a0e:	9200      	str	r2, [sp, #0]
 8007a10:	f640 32a6 	movw	r2, #2982	@ 0xba6
 8007a14:	4907      	ldr	r1, [pc, #28]	@ (8007a34 <lfs_ctz_extend+0x20c>)
 8007a16:	4808      	ldr	r0, [pc, #32]	@ (8007a38 <lfs_ctz_extend+0x210>)
 8007a18:	f002 ff16 	bl	800a848 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8007a1c:	68b9      	ldr	r1, [r7, #8]
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f7fb fe59 	bl	80036d6 <lfs_cache_drop>
    while (true) {
 8007a24:	e707      	b.n	8007836 <lfs_ctz_extend+0xe>
    }
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3738      	adds	r7, #56	@ 0x38
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	0800c3c4 	.word	0x0800c3c4
 8007a34:	0800c2b4 	.word	0x0800c2b4
 8007a38:	0800c444 	.word	0x0800c444

08007a3c <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b090      	sub	sp, #64	@ 0x40
 8007a40:	af04      	add	r7, sp, #16
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
 8007a48:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <lfs_ctz_traverse+0x18>
        return 0;
 8007a50:	2300      	movs	r3, #0
 8007a52:	e06b      	b.n	8007b2c <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8007a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a56:	3b01      	subs	r3, #1
 8007a58:	61fb      	str	r3, [r7, #28]
 8007a5a:	f107 031c 	add.w	r3, r7, #28
 8007a5e:	4619      	mov	r1, r3
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f7ff fe3e 	bl	80076e2 <lfs_ctz_index>
 8007a66:	4603      	mov	r3, r0
 8007a68:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 8007a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8007a70:	4798      	blx	r3
 8007a72:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8007a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <lfs_ctz_traverse+0x42>
            return err;
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7c:	e056      	b.n	8007b2c <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8007a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <lfs_ctz_traverse+0x4c>
            return 0;
 8007a84:	2300      	movs	r3, #0
 8007a86:	e051      	b.n	8007b2c <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8007a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	f1c3 0302 	rsb	r3, r3, #2
 8007a92:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8007a94:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8007a96:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8007a98:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8007a9a:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8007a9c:	9303      	str	r3, [sp, #12]
 8007a9e:	f107 0314 	add.w	r3, r7, #20
 8007aa2:	9302      	str	r3, [sp, #8]
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	9301      	str	r3, [sp, #4]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	4613      	mov	r3, r2
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	68b9      	ldr	r1, [r7, #8]
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f7fb fe34 	bl	8003720 <lfs_bd_read>
 8007ab8:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fb fdc4 	bl	800364a <lfs_fromle32>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7fb fdbe 	bl	800364a <lfs_fromle32>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	61bb      	str	r3, [r7, #24]
        if (err) {
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <lfs_ctz_traverse+0xa0>
            return err;
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ada:	e027      	b.n	8007b2c <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8007adc:	2300      	movs	r3, #0
 8007ade:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ae0:	e012      	b.n	8007b08 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8007ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	3330      	adds	r3, #48	@ 0x30
 8007ae8:	443b      	add	r3, r7
 8007aea:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8007aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007af0:	4611      	mov	r1, r2
 8007af2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8007af4:	4798      	blx	r3
 8007af6:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 8007af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <lfs_ctz_traverse+0xc6>
                return err;
 8007afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b00:	e014      	b.n	8007b2c <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8007b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b04:	3301      	adds	r3, #1
 8007b06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	dbe7      	blt.n	8007ae2 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	3b01      	subs	r3, #1
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	3330      	adds	r3, #48	@ 0x30
 8007b1a:	443b      	add	r3, r7
 8007b1c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007b20:	603b      	str	r3, [r7, #0]
        index -= count;
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 8007b2a:	e79e      	b.n	8007a6a <lfs_ctz_traverse+0x2e>
    }
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3730      	adds	r7, #48	@ 0x30
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8007b34:	b5b0      	push	{r4, r5, r7, lr}
 8007b36:	b09a      	sub	sp, #104	@ 0x68
 8007b38:	af02      	add	r7, sp, #8
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
 8007b40:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	f003 0302 	and.w	r3, r3, #2
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d008      	beq.n	8007b5e <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f002 fa3d 	bl	8009fcc <lfs_fs_forceconsistency>
 8007b52:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 8007b54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <lfs_file_opencfg_+0x2a>
            return err;
 8007b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b5c:	e1b0      	b.n	8007ec0 <lfs_file_opencfg_+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007b62:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2200      	movs	r2, #0
 8007b74:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	f103 0108 	add.w	r1, r3, #8
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	3304      	adds	r3, #4
 8007b86:	1d3a      	adds	r2, r7, #4
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f7fe f87b 	bl	8005c84 <lfs_dir_find>
 8007b8e:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8007b90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	da0c      	bge.n	8007bb0 <lfs_file_opencfg_+0x7c>
 8007b96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b98:	f113 0f02 	cmn.w	r3, #2
 8007b9c:	d105      	bne.n	8007baa <lfs_file_opencfg_+0x76>
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	889b      	ldrh	r3, [r3, #4]
 8007ba2:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d102      	bne.n	8007bb0 <lfs_file_opencfg_+0x7c>
        err = tag;
 8007baa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007bac:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8007bae:	e17c      	b.n	8007eaa <lfs_file_opencfg_+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8007bb6:	68b9      	ldr	r1, [r7, #8]
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f7fc fc74 	bl	80044a6 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8007bbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007bc0:	f113 0f02 	cmn.w	r3, #2
 8007bc4:	d14e      	bne.n	8007c64 <lfs_file_opencfg_+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d103      	bne.n	8007bd8 <lfs_file_opencfg_+0xa4>
            err = LFS_ERR_NOENT;
 8007bd0:	f06f 0301 	mvn.w	r3, #1
 8007bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8007bd6:	e168      	b.n	8007eaa <lfs_file_opencfg_+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7f8 fad8 	bl	8000190 <strlen>
 8007be0:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007be6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d903      	bls.n	8007bf4 <lfs_file_opencfg_+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8007bec:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8007bf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8007bf2:	e15a      	b.n	8007eaa <lfs_file_opencfg_+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	f103 0108 	add.w	r1, r3, #8
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	889b      	ldrh	r3, [r3, #4]
 8007bfe:	029b      	lsls	r3, r3, #10
 8007c00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	889b      	ldrh	r3, [r3, #4]
 8007c12:	029a      	lsls	r2, r3, #10
 8007c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c16:	4313      	orrs	r3, r2
 8007c18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	889b      	ldrh	r3, [r3, #4]
 8007c26:	029b      	lsls	r3, r3, #10
 8007c28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c32:	2300      	movs	r3, #0
 8007c34:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c36:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f7ff fd2b 	bl	8007698 <lfs_dir_commit>
 8007c42:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8007c44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c46:	f113 0f1c 	cmn.w	r3, #28
 8007c4a:	d001      	beq.n	8007c50 <lfs_file_opencfg_+0x11c>
 8007c4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c4e:	e001      	b.n	8007c54 <lfs_file_opencfg_+0x120>
 8007c50:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8007c54:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 8007c56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f040 8125 	bne.w	8007ea8 <lfs_file_opencfg_+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8007c5e:	4b9a      	ldr	r3, [pc, #616]	@ (8007ec8 <lfs_file_opencfg_+0x394>)
 8007c60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c62:	e044      	b.n	8007cee <lfs_file_opencfg_+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <lfs_file_opencfg_+0x142>
        err = LFS_ERR_EXIST;
 8007c6e:	f06f 0310 	mvn.w	r3, #16
 8007c72:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8007c74:	e119      	b.n	8007eaa <lfs_file_opencfg_+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8007c76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fc f9bf 	bl	8003ffc <lfs_tag_type3>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d003      	beq.n	8007c8c <lfs_file_opencfg_+0x158>
        err = LFS_ERR_ISDIR;
 8007c84:	f06f 0314 	mvn.w	r3, #20
 8007c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8007c8a:	e10e      	b.n	8007eaa <lfs_file_opencfg_+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00e      	beq.n	8007cb4 <lfs_file_opencfg_+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	889b      	ldrh	r3, [r3, #4]
 8007c9a:	029b      	lsls	r3, r3, #10
 8007c9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ca0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ca4:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007caa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8007cb2:	e01c      	b.n	8007cee <lfs_file_opencfg_+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	889b      	ldrh	r3, [r3, #4]
 8007cbe:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8007cc0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007cc4:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8007ccc:	9200      	str	r2, [sp, #0]
 8007cce:	4a7f      	ldr	r2, [pc, #508]	@ (8007ecc <lfs_file_opencfg_+0x398>)
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f7fc fe39 	bl	8004948 <lfs_dir_get>
 8007cd6:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 8007cd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	da02      	bge.n	8007ce4 <lfs_file_opencfg_+0x1b0>
            err = tag;
 8007cde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ce0:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8007ce2:	e0e2      	b.n	8007eaa <lfs_file_opencfg_+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	3328      	adds	r3, #40	@ 0x28
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7fc fafd 	bl	80042e8 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8007cee:	2300      	movs	r3, #0
 8007cf0:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cf2:	e063      	b.n	8007dbc <lfs_file_opencfg_+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d03c      	beq.n	8007d7a <lfs_file_opencfg_+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d0a:	6859      	ldr	r1, [r3, #4]
 8007d0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d0e:	4613      	mov	r3, r2
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	4413      	add	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	440b      	add	r3, r1
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8007d1e:	051a      	lsls	r2, r3, #20
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	889b      	ldrh	r3, [r3, #4]
 8007d24:	029b      	lsls	r3, r3, #10
 8007d26:	ea42 0103 	orr.w	r1, r2, r3
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d2e:	6858      	ldr	r0, [r3, #4]
 8007d30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d32:	4613      	mov	r3, r2
 8007d34:	005b      	lsls	r3, r3, #1
 8007d36:	4413      	add	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4403      	add	r3, r0
 8007d3c:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8007d3e:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d46:	6859      	ldr	r1, [r3, #4]
 8007d48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	005b      	lsls	r3, r3, #1
 8007d4e:	4413      	add	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	4603      	mov	r3, r0
 8007d5a:	4a5d      	ldr	r2, [pc, #372]	@ (8007ed0 <lfs_file_opencfg_+0x39c>)
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f7fc fdf2 	bl	8004948 <lfs_dir_get>
 8007d64:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8007d66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	da06      	bge.n	8007d7a <lfs_file_opencfg_+0x246>
 8007d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d6e:	f113 0f02 	cmn.w	r3, #2
 8007d72:	d002      	beq.n	8007d7a <lfs_file_opencfg_+0x246>
                err = res;
 8007d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d76:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8007d78:	e097      	b.n	8007eaa <lfs_file_opencfg_+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d7e:	f003 0302 	and.w	r3, r3, #2
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d017      	beq.n	8007db6 <lfs_file_opencfg_+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d8a:	6859      	ldr	r1, [r3, #4]
 8007d8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d8e:	4613      	mov	r3, r2
 8007d90:	005b      	lsls	r3, r3, #1
 8007d92:	4413      	add	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	440b      	add	r3, r1
 8007d98:	689a      	ldr	r2, [r3, #8]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d903      	bls.n	8007daa <lfs_file_opencfg_+0x276>
                err = LFS_ERR_NOSPC;
 8007da2:	f06f 031b 	mvn.w	r3, #27
 8007da6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8007da8:	e07f      	b.n	8007eaa <lfs_file_opencfg_+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8007db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007db8:	3301      	adds	r3, #1
 8007dba:	657b      	str	r3, [r7, #84]	@ 0x54
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d395      	bcc.n	8007cf4 <lfs_file_opencfg_+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d005      	beq.n	8007dde <lfs_file_opencfg_+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007ddc:	e010      	b.n	8007e00 <lfs_file_opencfg_+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fb fc5f 	bl	80036a8 <lfs_malloc>
 8007dea:	4602      	mov	r2, r0
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d103      	bne.n	8007e00 <lfs_file_opencfg_+0x2cc>
            err = LFS_ERR_NOMEM;
 8007df8:	f06f 030b 	mvn.w	r3, #11
 8007dfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8007dfe:	e054      	b.n	8007eaa <lfs_file_opencfg_+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	3340      	adds	r3, #64	@ 0x40
 8007e04:	4619      	mov	r1, r3
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f7fb fc74 	bl	80036f4 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8007e0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fc f8f4 	bl	8003ffc <lfs_tag_type3>
 8007e14:	4603      	mov	r3, r0
 8007e16:	461a      	mov	r2, r3
 8007e18:	f240 2301 	movw	r3, #513	@ 0x201
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d141      	bne.n	8007ea4 <lfs_file_opencfg_+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f06f 0201 	mvn.w	r2, #1
 8007e26:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 8007e28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fc f920 	bl	8004070 <lfs_tag_size>
 8007e30:	4602      	mov	r2, r0
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e3a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d020      	beq.n	8007ea4 <lfs_file_opencfg_+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	889b      	ldrh	r3, [r3, #4]
 8007e6c:	029c      	lsls	r4, r3, #10
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e72:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fb fb77 	bl	800356a <lfs_min>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8007e80:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8007ecc <lfs_file_opencfg_+0x398>)
 8007e8e:	4629      	mov	r1, r5
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f7fc fd59 	bl	8004948 <lfs_dir_get>
 8007e96:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 8007e98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	da02      	bge.n	8007ea4 <lfs_file_opencfg_+0x370>
                err = res;
 8007e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ea0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8007ea2:	e002      	b.n	8007eaa <lfs_file_opencfg_+0x376>
            }
        }
    }

    return 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e00b      	b.n	8007ec0 <lfs_file_opencfg_+0x38c>
            goto cleanup;
 8007ea8:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eae:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_close_(lfs, file);
 8007eb6:	68b9      	ldr	r1, [r7, #8]
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 f823 	bl	8007f04 <lfs_file_close_>
    return err;
 8007ebe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3760      	adds	r7, #96	@ 0x60
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8007ec8:	20100000 	.word	0x20100000
 8007ecc:	700ffc00 	.word	0x700ffc00
 8007ed0:	7ffffc00 	.word	0x7ffffc00

08007ed4 <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b088      	sub	sp, #32
 8007ed8:	af02      	add	r7, sp, #8
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 8007ee2:	4b07      	ldr	r3, [pc, #28]	@ (8007f00 <lfs_file_open_+0x2c>)
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	68b9      	ldr	r1, [r7, #8]
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f7ff fe21 	bl	8007b34 <lfs_file_opencfg_>
 8007ef2:	6178      	str	r0, [r7, #20]
    return err;
 8007ef4:	697b      	ldr	r3, [r7, #20]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3718      	adds	r7, #24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	0800d024 	.word	0x0800d024

08007f04 <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f9e5 	bl	80082e0 <lfs_file_sync_>
 8007f16:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7fc faa1 	bl	8004462 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d104      	bne.n	8007f34 <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fb fbc6 	bl	80036c0 <lfs_free>
    }

    return err;
 8007f34:	68fb      	ldr	r3, [r7, #12]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8007f40:	b590      	push	{r4, r7, lr}
 8007f42:	b08d      	sub	sp, #52	@ 0x34
 8007f44:	af06      	add	r7, sp, #24
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8007f4a:	f107 030c 	add.w	r3, r7, #12
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7fc fb7b 	bl	800464c <lfs_alloc>
 8007f56:	6138      	str	r0, [r7, #16]
        if (err) {
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <lfs_file_relocate+0x22>
            return err;
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	e0bb      	b.n	80080da <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7fb ff1a 	bl	8003da0 <lfs_bd_erase>
 8007f6c:	6138      	str	r0, [r7, #16]
        if (err) {
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d006      	beq.n	8007f82 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8007f7a:	f000 809b 	beq.w	80080b4 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	e0ab      	b.n	80080da <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8007f82:	2300      	movs	r3, #0
 8007f84:	617b      	str	r3, [r7, #20]
 8007f86:	e069      	b.n	800805c <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d027      	beq.n	8007fe4 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	f103 0008 	add.w	r0, r3, #8
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	889b      	ldrh	r3, [r3, #4]
 8007fac:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8007fae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007fb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	9105      	str	r1, [sp, #20]
 8007fba:	f107 010b 	add.w	r1, r7, #11
 8007fbe:	9104      	str	r1, [sp, #16]
 8007fc0:	6979      	ldr	r1, [r7, #20]
 8007fc2:	9103      	str	r1, [sp, #12]
 8007fc4:	9302      	str	r3, [sp, #8]
 8007fc6:	4b47      	ldr	r3, [pc, #284]	@ (80080e4 <lfs_file_relocate+0x1a4>)
 8007fc8:	9301      	str	r3, [sp, #4]
 8007fca:	9200      	str	r2, [sp, #0]
 8007fcc:	4623      	mov	r3, r4
 8007fce:	2200      	movs	r2, #0
 8007fd0:	4601      	mov	r1, r0
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7fc fcd3 	bl	800497e <lfs_dir_getread>
 8007fd8:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d01e      	beq.n	800801e <lfs_file_relocate+0xde>
                    return err;
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	e07a      	b.n	80080da <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 8007fea:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	1ad4      	subs	r4, r2, r3
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	9203      	str	r2, [sp, #12]
 8007ffc:	f107 020b 	add.w	r2, r7, #11
 8008000:	9202      	str	r2, [sp, #8]
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	9201      	str	r2, [sp, #4]
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	4623      	mov	r3, r4
 800800a:	4602      	mov	r2, r0
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7fb fb87 	bl	8003720 <lfs_bd_read>
 8008012:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <lfs_file_relocate+0xde>
                    return err;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	e05d      	b.n	80080da <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f103 0110 	add.w	r1, r3, #16
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2201      	movs	r2, #1
 800802a:	9203      	str	r2, [sp, #12]
 800802c:	f107 020b 	add.w	r2, r7, #11
 8008030:	9202      	str	r2, [sp, #8]
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	9201      	str	r2, [sp, #4]
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	2301      	movs	r3, #1
 800803a:	4602      	mov	r2, r0
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7fb fe01 	bl	8003c44 <lfs_bd_prog>
 8008042:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d005      	beq.n	8008056 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8008050:	d032      	beq.n	80080b8 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	e041      	b.n	80080da <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	3301      	adds	r3, #1
 800805a:	617b      	str	r3, [r7, #20]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008060:	697a      	ldr	r2, [r7, #20]
 8008062:	429a      	cmp	r2, r3
 8008064:	d390      	bcc.n	8007f88 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	69d9      	ldr	r1, [r3, #28]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008074:	461a      	mov	r2, r3
 8008076:	f002 fcd5 	bl	800aa24 <memcpy>
        file->cache.block = lfs->pcache.block;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	691a      	ldr	r2, [r3, #16]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	695a      	ldr	r2, [r3, #20]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699a      	ldr	r2, [r3, #24]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	3310      	adds	r3, #16
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7fb fb2b 	bl	80036f4 <lfs_cache_zero>

        file->block = nblock;
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 80080b0:	2300      	movs	r3, #0
 80080b2:	e012      	b.n	80080da <lfs_file_relocate+0x19a>
                goto relocate;
 80080b4:	bf00      	nop
 80080b6:	e000      	b.n	80080ba <lfs_file_relocate+0x17a>
                    goto relocate;
 80080b8:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	4a0a      	ldr	r2, [pc, #40]	@ (80080e8 <lfs_file_relocate+0x1a8>)
 80080be:	9200      	str	r2, [sp, #0]
 80080c0:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 80080c4:	4909      	ldr	r1, [pc, #36]	@ (80080ec <lfs_file_relocate+0x1ac>)
 80080c6:	480a      	ldr	r0, [pc, #40]	@ (80080f0 <lfs_file_relocate+0x1b0>)
 80080c8:	f002 fbbe 	bl	800a848 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3310      	adds	r3, #16
 80080d0:	4619      	mov	r1, r3
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f7fb faff 	bl	80036d6 <lfs_cache_drop>
    while (true) {
 80080d8:	e737      	b.n	8007f4a <lfs_file_relocate+0xa>
    }
}
 80080da:	4618      	mov	r0, r3
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd90      	pop	{r4, r7, pc}
 80080e2:	bf00      	nop
 80080e4:	fff7fc00 	.word	0xfff7fc00
 80080e8:	0800c3c4 	.word	0x0800c3c4
 80080ec:	0800c2b4 	.word	0x0800c2b4
 80080f0:	0800c444 	.word	0x0800c444

080080f4 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7fc fa09 	bl	800451e <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7ff ff16 	bl	8007f40 <lfs_file_relocate>
 8008114:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d001      	beq.n	8008120 <lfs_file_outline+0x2c>
        return err;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	e006      	b.n	800812e <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008124:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
	...

08008138 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8008138:	b590      	push	{r4, r7, lr}
 800813a:	b09f      	sub	sp, #124	@ 0x7c
 800813c:	af02      	add	r7, sp, #8
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008146:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d011      	beq.n	8008172 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d105      	bne.n	8008166 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	3340      	adds	r3, #64	@ 0x40
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7fb fab8 	bl	80036d6 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 80a4 	beq.w	80082c8 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008184:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800818a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d176      	bne.n	8008280 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8008192:	f107 030c 	add.w	r3, r7, #12
 8008196:	2254      	movs	r2, #84	@ 0x54
 8008198:	2100      	movs	r1, #0
 800819a:	4618      	mov	r0, r3
 800819c:	f002 fb76 	bl	800a88c <memset>
                .ctz.head = file->ctz.head,
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 80081a4:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 80081aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081ac:	2301      	movs	r3, #1
 80081ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 80081b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 80081bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80081be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f7fb fa85 	bl	80036d6 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80081cc:	e02b      	b.n	8008226 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 80081ce:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 80081d2:	f107 010c 	add.w	r1, r7, #12
 80081d6:	2301      	movs	r3, #1
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f921 	bl	8008420 <lfs_file_flushedread>
 80081de:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 80081e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	da01      	bge.n	80081ea <lfs_file_flush+0xb2>
                    return res;
 80081e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081e8:	e06f      	b.n	80082ca <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80081ea:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 80081ee:	2301      	movs	r3, #1
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fa1c 	bl	8008630 <lfs_file_flushedwrite>
 80081f8:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 80081fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	da01      	bge.n	8008204 <lfs_file_flush+0xcc>
                    return res;
 8008200:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008202:	e062      	b.n	80082ca <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800820c:	d00b      	beq.n	8008226 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 800820e:	f107 030c 	add.w	r3, r7, #12
 8008212:	3340      	adds	r3, #64	@ 0x40
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7fb fa5d 	bl	80036d6 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4619      	mov	r1, r3
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7fb fa58 	bl	80036d6 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800822e:	429a      	cmp	r2, r3
 8008230:	d3cd      	bcc.n	80081ce <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	2301      	movs	r3, #1
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7fb fc53 	bl	8003ae8 <lfs_bd_flush>
 8008242:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8008244:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008246:	2b00      	cmp	r3, #0
 8008248:	d026      	beq.n	8008298 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 800824a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800824c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8008250:	d001      	beq.n	8008256 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8008252:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008254:	e039      	b.n	80082ca <lfs_file_flush+0x192>
                        goto relocate;
 8008256:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800825c:	4a1d      	ldr	r2, [pc, #116]	@ (80082d4 <lfs_file_flush+0x19c>)
 800825e:	9200      	str	r2, [sp, #0]
 8008260:	f640 522b 	movw	r2, #3371	@ 0xd2b
 8008264:	491c      	ldr	r1, [pc, #112]	@ (80082d8 <lfs_file_flush+0x1a0>)
 8008266:	481d      	ldr	r0, [pc, #116]	@ (80082dc <lfs_file_flush+0x1a4>)
 8008268:	f002 faee 	bl	800a848 <iprintf>
                err = lfs_file_relocate(lfs, file);
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7ff fe66 	bl	8007f40 <lfs_file_relocate>
 8008274:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8008276:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008278:	2b00      	cmp	r3, #0
 800827a:	d0da      	beq.n	8008232 <lfs_file_flush+0xfa>
                    return err;
 800827c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800827e:	e024      	b.n	80082ca <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008288:	4619      	mov	r1, r3
 800828a:	4610      	mov	r0, r2
 800828c:	f7fb f95d 	bl	800354a <lfs_max>
 8008290:	4602      	mov	r2, r0
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	635a      	str	r2, [r3, #52]	@ 0x34
 8008296:	e000      	b.n	800829a <lfs_file_flush+0x162>
                break;
 8008298:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80082c6:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3774      	adds	r7, #116	@ 0x74
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd90      	pop	{r4, r7, pc}
 80082d2:	bf00      	nop
 80082d4:	0800c3c4 	.word	0x0800c3c4
 80082d8:	0800c2b4 	.word	0x0800c2b4
 80082dc:	0800c444 	.word	0x0800c444

080082e0 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b090      	sub	sp, #64	@ 0x40
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80082f6:	2300      	movs	r3, #0
 80082f8:	e08e      	b.n	8008418 <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f7ff ff1b 	bl	8008138 <lfs_file_flush>
 8008302:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 8008304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008306:	2b00      	cmp	r3, #0
 8008308:	d007      	beq.n	800831a <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800830e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 8008316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008318:	e07e      	b.n	8008418 <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800831e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d077      	beq.n	8008416 <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	3308      	adds	r3, #8
 800832a:	4618      	mov	r0, r3
 800832c:	f7fb fd7f 	bl	8003e2e <lfs_pair_isnull>
 8008330:	4603      	mov	r3, r0
 8008332:	f083 0301 	eor.w	r3, r3, #1
 8008336:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8008338:	2b00      	cmp	r3, #0
 800833a:	d06c      	beq.n	8008416 <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008340:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10d      	bne.n	8008364 <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f103 0110 	add.w	r1, r3, #16
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	2300      	movs	r3, #0
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7fb fc42 	bl	8003bdc <lfs_bd_sync>
 8008358:	6338      	str	r0, [r7, #48]	@ 0x30
            if (err) {
 800835a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <lfs_file_sync_+0x84>
                return err;
 8008360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008362:	e059      	b.n	8008418 <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008368:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d009      	beq.n	8008384 <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8008370:	f240 2301 	movw	r3, #513	@ 0x201
 8008374:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800837a:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008380:	637b      	str	r3, [r7, #52]	@ 0x34
 8008382:	e014      	b.n	80083ae <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8008384:	f240 2302 	movw	r3, #514	@ 0x202
 8008388:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008390:	3228      	adds	r2, #40	@ 0x28
 8008392:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008396:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 800839a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fb ffba 	bl	8004318 <lfs_ctz_tole32>
            buffer = &ctz;
 80083a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80083a8:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 80083aa:	2308      	movs	r3, #8
 80083ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	f103 0108 	add.w	r1, r3, #8
 80083b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80083b6:	051a      	lsls	r2, r3, #20
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	889b      	ldrh	r3, [r3, #4]
 80083bc:	029b      	lsls	r3, r3, #10
 80083be:	431a      	orrs	r2, r3
 80083c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083c2:	4313      	orrs	r3, r2
 80083c4:	61bb      	str	r3, [r7, #24]
 80083c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c8:	61fb      	str	r3, [r7, #28]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	889b      	ldrh	r3, [r3, #4]
 80083ce:	029a      	lsls	r2, r3, #10
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 80083dc:	623b      	str	r3, [r7, #32]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80083e6:	f107 0218 	add.w	r2, r7, #24
 80083ea:	2302      	movs	r3, #2
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7ff f953 	bl	8007698 <lfs_dir_commit>
 80083f2:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80083f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d007      	beq.n	800840a <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083fe:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8008406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008408:	e006      	b.n	8008418 <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800840e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3740      	adds	r7, #64	@ 0x40
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8008420:	b5b0      	push	{r4, r5, r7, lr}
 8008422:	b090      	sub	sp, #64	@ 0x40
 8008424:	af06      	add	r7, sp, #24
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
 800842c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800843e:	429a      	cmp	r2, r3
 8008440:	d301      	bcc.n	8008446 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8008442:	2300      	movs	r3, #0
 8008444:	e0b7      	b.n	80085b6 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	4619      	mov	r1, r3
 8008452:	6838      	ldr	r0, [r7, #0]
 8008454:	f7fb f889 	bl	800356a <lfs_min>
 8008458:	6038      	str	r0, [r7, #0]
    nsize = size;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 800845e:	e0a5      	b.n	80085ac <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008464:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008468:	2b00      	cmp	r3, #0
 800846a:	d006      	beq.n	800847a <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008474:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8008476:	429a      	cmp	r2, r3
 8008478:	d130      	bne.n	80084dc <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800847e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d11c      	bne.n	80084c0 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008498:	68b9      	ldr	r1, [r7, #8]
 800849a:	3138      	adds	r1, #56	@ 0x38
 800849c:	68b8      	ldr	r0, [r7, #8]
 800849e:	303c      	adds	r0, #60	@ 0x3c
 80084a0:	9003      	str	r0, [sp, #12]
 80084a2:	9102      	str	r1, [sp, #8]
 80084a4:	9201      	str	r2, [sp, #4]
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	462b      	mov	r3, r5
 80084aa:	4622      	mov	r2, r4
 80084ac:	2100      	movs	r1, #0
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f7ff f94f 	bl	8007752 <lfs_ctz_find>
 80084b4:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d009      	beq.n	80084d0 <lfs_file_flushedread+0xb0>
                    return err;
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	e07a      	b.n	80085b6 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	f06f 0201 	mvn.w	r2, #1
 80084c6:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084e0:	69da      	ldr	r2, [r3, #28]
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	4619      	mov	r1, r3
 80084ea:	6a38      	ldr	r0, [r7, #32]
 80084ec:	f7fb f83d 	bl	800356a <lfs_min>
 80084f0:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d026      	beq.n	800854c <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f103 0408 	add.w	r4, r3, #8
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800850e:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	889b      	ldrh	r3, [r3, #4]
 8008514:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8008516:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800851a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800851e:	68b9      	ldr	r1, [r7, #8]
 8008520:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8008522:	69b8      	ldr	r0, [r7, #24]
 8008524:	9005      	str	r0, [sp, #20]
 8008526:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008528:	9004      	str	r0, [sp, #16]
 800852a:	9103      	str	r1, [sp, #12]
 800852c:	9302      	str	r3, [sp, #8]
 800852e:	4b24      	ldr	r3, [pc, #144]	@ (80085c0 <lfs_file_flushedread+0x1a0>)
 8008530:	9301      	str	r3, [sp, #4]
 8008532:	9200      	str	r2, [sp, #0]
 8008534:	462b      	mov	r3, r5
 8008536:	2200      	movs	r2, #0
 8008538:	4621      	mov	r1, r4
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f7fc fa1f 	bl	800497e <lfs_dir_getread>
 8008540:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d01d      	beq.n	8008584 <lfs_file_flushedread+0x164>
                return err;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	e034      	b.n	80085b6 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008556:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008560:	69b9      	ldr	r1, [r7, #24]
 8008562:	9103      	str	r1, [sp, #12]
 8008564:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008566:	9102      	str	r1, [sp, #8]
 8008568:	9201      	str	r2, [sp, #4]
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	4623      	mov	r3, r4
 800856e:	4602      	mov	r2, r0
 8008570:	2100      	movs	r1, #0
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f7fb f8d4 	bl	8003720 <lfs_bd_read>
 8008578:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d001      	beq.n	8008584 <lfs_file_flushedread+0x164>
                return err;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	e018      	b.n	80085b6 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	441a      	add	r2, r3
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	441a      	add	r2, r3
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 800859c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	4413      	add	r3, r2
 80085a2:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 80085a4:	6a3a      	ldr	r2, [r7, #32]
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 80085ac:	6a3b      	ldr	r3, [r7, #32]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f47f af56 	bne.w	8008460 <lfs_file_flushedread+0x40>
    }

    return size;
 80085b4:	683b      	ldr	r3, [r7, #0]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3728      	adds	r7, #40	@ 0x28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bdb0      	pop	{r4, r5, r7, pc}
 80085be:	bf00      	nop
 80085c0:	fff7fc00 	.word	0xfff7fc00

080085c4 <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d106      	bne.n	80085ec <lfs_file_read_+0x28>
 80085de:	4b11      	ldr	r3, [pc, #68]	@ (8008624 <lfs_file_read_+0x60>)
 80085e0:	4a11      	ldr	r2, [pc, #68]	@ (8008628 <lfs_file_read_+0x64>)
 80085e2:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 80085e6:	4811      	ldr	r0, [pc, #68]	@ (800862c <lfs_file_read_+0x68>)
 80085e8:	f001 fed8 	bl	800a39c <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d009      	beq.n	800860c <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 80085f8:	68b9      	ldr	r1, [r7, #8]
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f7ff fd9c 	bl	8008138 <lfs_file_flush>
 8008600:	6178      	str	r0, [r7, #20]
        if (err) {
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d001      	beq.n	800860c <lfs_file_read_+0x48>
            return err;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	e006      	b.n	800861a <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	68b9      	ldr	r1, [r7, #8]
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f7ff ff04 	bl	8008420 <lfs_file_flushedread>
 8008618:	4603      	mov	r3, r0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3718      	adds	r7, #24
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	0800c5ec 	.word	0x0800c5ec
 8008628:	0800d030 	.word	0x0800d030
 800862c:	0800c2b4 	.word	0x0800c2b4

08008630 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8008630:	b5b0      	push	{r4, r5, r7, lr}
 8008632:	b090      	sub	sp, #64	@ 0x40
 8008634:	af04      	add	r7, sp, #16
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800864a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800864e:	2b00      	cmp	r3, #0
 8008650:	f000 80f4 	beq.w	800883c <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865a:	441a      	add	r2, r3
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008660:	4619      	mov	r1, r3
 8008662:	4610      	mov	r0, r2
 8008664:	f7fa ff71 	bl	800354a <lfs_max>
 8008668:	4602      	mov	r2, r0
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 800866e:	429a      	cmp	r2, r3
 8008670:	f240 80e4 	bls.w	800883c <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8008674:	68b9      	ldr	r1, [r7, #8]
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f7ff fd3c 	bl	80080f4 <lfs_file_outline>
 800867c:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 800867e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 80db 	beq.w	800883c <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800868a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8008692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008694:	e0d7      	b.n	8008846 <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800869a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d006      	beq.n	80086b0 <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086aa:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d16d      	bne.n	800878c <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d159      	bne.n	8008770 <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d12f      	bne.n	8008728 <lfs_file_flushedwrite+0xf8>
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d02b      	beq.n	8008728 <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80086e2:	3a01      	subs	r2, #1
 80086e4:	68b9      	ldr	r1, [r7, #8]
 80086e6:	3138      	adds	r1, #56	@ 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 80086e8:	2000      	movs	r0, #0
 80086ea:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80086ec:	f107 0010 	add.w	r0, r7, #16
 80086f0:	9003      	str	r0, [sp, #12]
 80086f2:	9102      	str	r1, [sp, #8]
 80086f4:	9201      	str	r2, [sp, #4]
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	462b      	mov	r3, r5
 80086fa:	4622      	mov	r2, r4
 80086fc:	2100      	movs	r1, #0
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f7ff f827 	bl	8007752 <lfs_ctz_find>
 8008704:	6238      	str	r0, [r7, #32]
                    if (err) {
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d007      	beq.n	800871c <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008710:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 8008718:	6a3b      	ldr	r3, [r7, #32]
 800871a:	e094      	b.n	8008846 <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	3340      	adds	r3, #64	@ 0x40
 8008720:	4619      	mov	r1, r3
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f7fa ffe6 	bl	80036f4 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f7fb fef8 	bl	800451e <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8008734:	68fc      	ldr	r4, [r7, #12]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	3238      	adds	r2, #56	@ 0x38
 8008742:	68b9      	ldr	r1, [r7, #8]
 8008744:	313c      	adds	r1, #60	@ 0x3c
 8008746:	9102      	str	r1, [sp, #8]
 8008748:	9201      	str	r2, [sp, #4]
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	462b      	mov	r3, r5
 800874e:	4622      	mov	r2, r4
 8008750:	4601      	mov	r1, r0
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f7ff f868 	bl	8007828 <lfs_ctz_extend>
 8008758:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00f      	beq.n	8008780 <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008764:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	e06a      	b.n	8008846 <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	f06f 0201 	mvn.w	r2, #1
 8008776:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008784:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008790:	69da      	ldr	r2, [r3, #28]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	4619      	mov	r1, r3
 800879a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800879c:	f7fa fee5 	bl	800356a <lfs_min>
 80087a0:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80087a8:	68fc      	ldr	r4, [r7, #12]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80087b2:	69b9      	ldr	r1, [r7, #24]
 80087b4:	9103      	str	r1, [sp, #12]
 80087b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087b8:	9102      	str	r1, [sp, #8]
 80087ba:	9201      	str	r2, [sp, #4]
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	2301      	movs	r3, #1
 80087c0:	4622      	mov	r2, r4
 80087c2:	4601      	mov	r1, r0
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f7fb fa3d 	bl	8003c44 <lfs_bd_prog>
 80087ca:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d01c      	beq.n	800880c <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80087d8:	d007      	beq.n	80087ea <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087de:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	e02d      	b.n	8008846 <lfs_file_flushedwrite+0x216>
                    goto relocate;
 80087ea:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 80087ec:	68b9      	ldr	r1, [r7, #8]
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f7ff fba6 	bl	8007f40 <lfs_file_relocate>
 80087f4:	6178      	str	r0, [r7, #20]
            if (err) {
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d0d2      	beq.n	80087a2 <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008800:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	e01c      	b.n	8008846 <lfs_file_flushedwrite+0x216>
            break;
 800880c:	bf00      	nop
            }
        }

        file->pos += diff;
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	441a      	add	r2, r3
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	441a      	add	r2, r3
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8008826:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	4413      	add	r3, r2
 800882c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 800882e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ckpoint(lfs);
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f7fb fe71 	bl	800451e <lfs_alloc_ckpoint>
    while (nsize > 0) {
 800883c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883e:	2b00      	cmp	r3, #0
 8008840:	f47f af29 	bne.w	8008696 <lfs_file_flushedwrite+0x66>
    }

    return size;
 8008844:	683b      	ldr	r3, [r7, #0]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3730      	adds	r7, #48	@ 0x30
 800884a:	46bd      	mov	sp, r7
 800884c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008850 <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8008850:	b580      	push	{r7, lr}
 8008852:	b08a      	sub	sp, #40	@ 0x28
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008862:	f003 0302 	and.w	r3, r3, #2
 8008866:	2b00      	cmp	r3, #0
 8008868:	d106      	bne.n	8008878 <lfs_file_write_+0x28>
 800886a:	4b38      	ldr	r3, [pc, #224]	@ (800894c <lfs_file_write_+0xfc>)
 800886c:	4a38      	ldr	r2, [pc, #224]	@ (8008950 <lfs_file_write_+0x100>)
 800886e:	f640 6126 	movw	r1, #3622	@ 0xe26
 8008872:	4838      	ldr	r0, [pc, #224]	@ (8008954 <lfs_file_write_+0x104>)
 8008874:	f001 fd92 	bl	800a39c <__assert_func>

    if (file->flags & LFS_F_READING) {
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800887c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d009      	beq.n	8008898 <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8008884:	68b9      	ldr	r1, [r7, #8]
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f7ff fc56 	bl	8008138 <lfs_file_flush>
 800888c:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 800888e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008890:	2b00      	cmp	r3, #0
 8008892:	d001      	beq.n	8008898 <lfs_file_write_+0x48>
            return err;
 8008894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008896:	e055      	b.n	8008944 <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800889c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d009      	beq.n	80088b8 <lfs_file_write_+0x68>
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d203      	bcs.n	80088b8 <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (file->pos + size > lfs->file_max) {
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	441a      	add	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d902      	bls.n	80088ce <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 80088c8:	f06f 031a 	mvn.w	r3, #26
 80088cc:	e03a      	b.n	8008944 <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d121      	bne.n	800891e <lfs_file_write_+0xce>
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d91b      	bls.n	800891e <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088ea:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	635a      	str	r2, [r3, #52]	@ 0x34

        while (file->pos < pos) {
 80088f4:	e00e      	b.n	8008914 <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 80088f6:	2300      	movs	r3, #0
 80088f8:	75fb      	strb	r3, [r7, #23]
 80088fa:	f107 0217 	add.w	r2, r7, #23
 80088fe:	2301      	movs	r3, #1
 8008900:	68b9      	ldr	r1, [r7, #8]
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f7ff fe94 	bl	8008630 <lfs_file_flushedwrite>
 8008908:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	2b00      	cmp	r3, #0
 800890e:	da01      	bge.n	8008914 <lfs_file_write_+0xc4>
                return res;
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	e017      	b.n	8008944 <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008918:	6a3a      	ldr	r2, [r7, #32]
 800891a:	429a      	cmp	r2, r3
 800891c:	d8eb      	bhi.n	80088f6 <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	68b9      	ldr	r1, [r7, #8]
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f7ff fe83 	bl	8008630 <lfs_file_flushedwrite>
 800892a:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	2b00      	cmp	r3, #0
 8008930:	da01      	bge.n	8008936 <lfs_file_write_+0xe6>
        return nsize;
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	e006      	b.n	8008944 <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800893a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	631a      	str	r2, [r3, #48]	@ 0x30
    return nsize;
 8008942:	69bb      	ldr	r3, [r7, #24]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3728      	adds	r7, #40	@ 0x28
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	0800c61c 	.word	0x0800c61c
 8008950:	0800d040 	.word	0x0800d040
 8008954:	0800c2b4 	.word	0x0800c2b4

08008958 <lfs_file_seek_>:
#endif

static lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8008958:	b580      	push	{r7, lr}
 800895a:	b08c      	sub	sp, #48	@ 0x30
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800896a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (whence == LFS_SEEK_SET) {
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d102      	bne.n	8008978 <lfs_file_seek_+0x20>
        npos = off;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008976:	e025      	b.n	80089c4 <lfs_file_seek_+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d10f      	bne.n	800899e <lfs_file_seek_+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008982:	461a      	mov	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4413      	add	r3, r2
 8008988:	2b00      	cmp	r3, #0
 800898a:	da02      	bge.n	8008992 <lfs_file_seek_+0x3a>
            return LFS_ERR_INVAL;
 800898c:	f06f 0315 	mvn.w	r3, #21
 8008990:	e067      	b.n	8008a62 <lfs_file_seek_+0x10a>
        } else {
            npos = file->pos + off;
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4413      	add	r3, r2
 800899a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800899c:	e012      	b.n	80089c4 <lfs_file_seek_+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d10f      	bne.n	80089c4 <lfs_file_seek_+0x6c>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 80089a4:	68b9      	ldr	r1, [r7, #8]
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f000 f882 	bl	8008ab0 <lfs_file_size_>
 80089ac:	4602      	mov	r2, r0
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4413      	add	r3, r2
 80089b2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (res < 0) {
 80089b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	da02      	bge.n	80089c0 <lfs_file_seek_+0x68>
            return LFS_ERR_INVAL;
 80089ba:	f06f 0315 	mvn.w	r3, #21
 80089be:	e050      	b.n	8008a62 <lfs_file_seek_+0x10a>
        } else {
            npos = res;
 80089c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if (npos > lfs->file_max) {
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d902      	bls.n	80089d4 <lfs_file_seek_+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 80089ce:	f06f 0315 	mvn.w	r3, #21
 80089d2:	e046      	b.n	8008a62 <lfs_file_seek_+0x10a>
    }

    if (file->pos == npos) {
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089da:	429a      	cmp	r2, r3
 80089dc:	d101      	bne.n	80089e2 <lfs_file_seek_+0x8a>
        // noop - position has not changed
        return npos;
 80089de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e0:	e03f      	b.n	8008a62 <lfs_file_seek_+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
    if (
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d12b      	bne.n	8008a46 <lfs_file_seek_+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089f2:	61bb      	str	r3, [r7, #24]
 80089f4:	f107 0318 	add.w	r3, r7, #24
 80089f8:	4619      	mov	r1, r3
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f7fe fe71 	bl	80076e2 <lfs_ctz_index>
 8008a00:	6278      	str	r0, [r7, #36]	@ 0x24
        lfs_off_t noff = npos;
 8008a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a04:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8008a06:	f107 0314 	add.w	r3, r7, #20
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f7fe fe68 	bl	80076e2 <lfs_ctz_index>
 8008a12:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8008a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d114      	bne.n	8008a46 <lfs_file_seek_+0xee>
                && noff >= file->cache.off
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d80f      	bhi.n	8008a46 <lfs_file_seek_+0xee>
                && noff < file->cache.off + file->cache.size) {
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a2e:	441a      	add	r2, r3
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d907      	bls.n	8008a46 <lfs_file_seek_+0xee>
            file->pos = npos;
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a3a:	635a      	str	r2, [r3, #52]	@ 0x34
            file->off = noff;
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	63da      	str	r2, [r3, #60]	@ 0x3c
            return npos;
 8008a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a44:	e00d      	b.n	8008a62 <lfs_file_seek_+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8008a46:	68b9      	ldr	r1, [r7, #8]
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f7ff fb75 	bl	8008138 <lfs_file_flush>
 8008a4e:	61f8      	str	r0, [r7, #28]
    if (err) {
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <lfs_file_seek_+0x102>
        return err;
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	e003      	b.n	8008a62 <lfs_file_seek_+0x10a>
    }

    // update pos
    file->pos = npos;
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a5e:	635a      	str	r2, [r3, #52]	@ 0x34
    return npos;
 8008a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3730      	adds	r7, #48	@ 0x30
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <lfs_file_tell_>:

    return 0;
}
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
 8008a6a:	b480      	push	{r7}
 8008a6c:	b083      	sub	sp, #12
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	6039      	str	r1, [r7, #0]
    (void)lfs;
    return file->pos;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <lfs_file_rewind_>:

static int lfs_file_rewind_(lfs_t *lfs, lfs_file_t *file) {
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
    lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);
 8008a8e:	2300      	movs	r3, #0
 8008a90:	2200      	movs	r2, #0
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7ff ff5f 	bl	8008958 <lfs_file_seek_>
 8008a9a:	60f8      	str	r0, [r7, #12]
    if (res < 0) {
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	da01      	bge.n	8008aa6 <lfs_file_rewind_+0x22>
        return (int)res;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	e000      	b.n	8008aa8 <lfs_file_rewind_+0x24>
    }

    return 0;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <lfs_file_size_>:

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d009      	beq.n	8008ada <lfs_file_size_+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ace:	4619      	mov	r1, r3
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	f7fa fd3a 	bl	800354a <lfs_max>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	e001      	b.n	8008ade <lfs_file_size_+0x2e>
    }
#endif

    return file->ctz.size;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
	...

08008ae8 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8008ae8:	b590      	push	{r4, r7, lr}
 8008aea:	b08d      	sub	sp, #52	@ 0x34
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	669a      	str	r2, [r3, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	6a1a      	ldr	r2, [r3, #32]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	66da      	str	r2, [r3, #108]	@ 0x6c
    int err = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d106      	bne.n	8008b1c <lfs_init+0x34>
 8008b0e:	4b96      	ldr	r3, [pc, #600]	@ (8008d68 <lfs_init+0x280>)
 8008b10:	4a96      	ldr	r2, [pc, #600]	@ (8008d6c <lfs_init+0x284>)
 8008b12:	f241 0152 	movw	r1, #4178	@ 0x1052
 8008b16:	4896      	ldr	r0, [pc, #600]	@ (8008d70 <lfs_init+0x288>)
 8008b18:	f001 fc40 	bl	800a39c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d106      	bne.n	8008b34 <lfs_init+0x4c>
 8008b26:	4b93      	ldr	r3, [pc, #588]	@ (8008d74 <lfs_init+0x28c>)
 8008b28:	4a90      	ldr	r2, [pc, #576]	@ (8008d6c <lfs_init+0x284>)
 8008b2a:	f241 0153 	movw	r1, #4179	@ 0x1053
 8008b2e:	4890      	ldr	r0, [pc, #576]	@ (8008d70 <lfs_init+0x288>)
 8008b30:	f001 fc34 	bl	800a39c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d106      	bne.n	8008b4c <lfs_init+0x64>
 8008b3e:	4b8e      	ldr	r3, [pc, #568]	@ (8008d78 <lfs_init+0x290>)
 8008b40:	4a8a      	ldr	r2, [pc, #552]	@ (8008d6c <lfs_init+0x284>)
 8008b42:	f241 0154 	movw	r1, #4180	@ 0x1054
 8008b46:	488a      	ldr	r0, [pc, #552]	@ (8008d70 <lfs_init+0x288>)
 8008b48:	f001 fc28 	bl	800a39c <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008b56:	6952      	ldr	r2, [r2, #20]
 8008b58:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b5c:	fb01 f202 	mul.w	r2, r1, r2
 8008b60:	1a9b      	subs	r3, r3, r2
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d006      	beq.n	8008b74 <lfs_init+0x8c>
 8008b66:	4b85      	ldr	r3, [pc, #532]	@ (8008d7c <lfs_init+0x294>)
 8008b68:	4a80      	ldr	r2, [pc, #512]	@ (8008d6c <lfs_init+0x284>)
 8008b6a:	f241 0158 	movw	r1, #4184	@ 0x1058
 8008b6e:	4880      	ldr	r0, [pc, #512]	@ (8008d70 <lfs_init+0x288>)
 8008b70:	f001 fc14 	bl	800a39c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008b7e:	6992      	ldr	r2, [r2, #24]
 8008b80:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b84:	fb01 f202 	mul.w	r2, r1, r2
 8008b88:	1a9b      	subs	r3, r3, r2
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d006      	beq.n	8008b9c <lfs_init+0xb4>
 8008b8e:	4b7c      	ldr	r3, [pc, #496]	@ (8008d80 <lfs_init+0x298>)
 8008b90:	4a76      	ldr	r2, [pc, #472]	@ (8008d6c <lfs_init+0x284>)
 8008b92:	f241 0159 	movw	r1, #4185	@ 0x1059
 8008b96:	4876      	ldr	r0, [pc, #472]	@ (8008d70 <lfs_init+0x288>)
 8008b98:	f001 fc00 	bl	800a39c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008ba6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008ba8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bac:	fb01 f202 	mul.w	r2, r1, r2
 8008bb0:	1a9b      	subs	r3, r3, r2
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d006      	beq.n	8008bc4 <lfs_init+0xdc>
 8008bb6:	4b73      	ldr	r3, [pc, #460]	@ (8008d84 <lfs_init+0x29c>)
 8008bb8:	4a6c      	ldr	r2, [pc, #432]	@ (8008d6c <lfs_init+0x284>)
 8008bba:	f241 015a 	movw	r1, #4186	@ 0x105a
 8008bbe:	486c      	ldr	r0, [pc, #432]	@ (8008d70 <lfs_init+0x288>)
 8008bc0:	f001 fbec 	bl	800a39c <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bc8:	69db      	ldr	r3, [r3, #28]
 8008bca:	2b7f      	cmp	r3, #127	@ 0x7f
 8008bcc:	d806      	bhi.n	8008bdc <lfs_init+0xf4>
 8008bce:	4b6e      	ldr	r3, [pc, #440]	@ (8008d88 <lfs_init+0x2a0>)
 8008bd0:	4a66      	ldr	r2, [pc, #408]	@ (8008d6c <lfs_init+0x284>)
 8008bd2:	f241 015d 	movw	r1, #4189	@ 0x105d
 8008bd6:	4866      	ldr	r0, [pc, #408]	@ (8008d70 <lfs_init+0x288>)
 8008bd8:	f001 fbe0 	bl	800a39c <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008be0:	69db      	ldr	r3, [r3, #28]
 8008be2:	3b08      	subs	r3, #8
 8008be4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fa fcf3 	bl	80035d8 <lfs_npw2>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	009a      	lsls	r2, r3, #2
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d906      	bls.n	8008c0e <lfs_init+0x126>
 8008c00:	4b62      	ldr	r3, [pc, #392]	@ (8008d8c <lfs_init+0x2a4>)
 8008c02:	4a5a      	ldr	r2, [pc, #360]	@ (8008d6c <lfs_init+0x284>)
 8008c04:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8008c08:	4859      	ldr	r0, [pc, #356]	@ (8008d70 <lfs_init+0x288>)
 8008c0a:	f001 fbc7 	bl	800a39c <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d106      	bne.n	8008c26 <lfs_init+0x13e>
 8008c18:	4b5d      	ldr	r3, [pc, #372]	@ (8008d90 <lfs_init+0x2a8>)
 8008c1a:	4a54      	ldr	r2, [pc, #336]	@ (8008d6c <lfs_init+0x284>)
 8008c1c:	f241 0169 	movw	r1, #4201	@ 0x1069
 8008c20:	4853      	ldr	r0, [pc, #332]	@ (8008d70 <lfs_init+0x288>)
 8008c22:	f001 fbbb 	bl	800a39c <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00f      	beq.n	8008c50 <lfs_init+0x168>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	085b      	lsrs	r3, r3, #1
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d206      	bcs.n	8008c50 <lfs_init+0x168>
 8008c42:	4b54      	ldr	r3, [pc, #336]	@ (8008d94 <lfs_init+0x2ac>)
 8008c44:	4a49      	ldr	r2, [pc, #292]	@ (8008d6c <lfs_init+0x284>)
 8008c46:	f241 016f 	movw	r1, #4207	@ 0x106f
 8008c4a:	4849      	ldr	r0, [pc, #292]	@ (8008d70 <lfs_init+0x288>)
 8008c4c:	f001 fba6 	bl	800a39c <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c5a:	d00e      	beq.n	8008c7a <lfs_init+0x192>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c66:	69db      	ldr	r3, [r3, #28]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d906      	bls.n	8008c7a <lfs_init+0x192>
 8008c6c:	4b4a      	ldr	r3, [pc, #296]	@ (8008d98 <lfs_init+0x2b0>)
 8008c6e:	4a3f      	ldr	r2, [pc, #252]	@ (8008d6c <lfs_init+0x284>)
 8008c70:	f241 0171 	movw	r1, #4209	@ 0x1071
 8008c74:	483e      	ldr	r0, [pc, #248]	@ (8008d70 <lfs_init+0x288>)
 8008c76:	f001 fb91 	bl	800a39c <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d005      	beq.n	8008c90 <lfs_init+0x1a8>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	60da      	str	r2, [r3, #12]
 8008c8e:	e010      	b.n	8008cb2 <lfs_init+0x1ca>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fa fd06 	bl	80036a8 <lfs_malloc>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d103      	bne.n	8008cb2 <lfs_init+0x1ca>
            err = LFS_ERR_NOMEM;
 8008caa:	f06f 030b 	mvn.w	r3, #11
 8008cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8008cb0:	e163      	b.n	8008f7a <lfs_init+0x492>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d005      	beq.n	8008cc8 <lfs_init+0x1e0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008cc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	61da      	str	r2, [r3, #28]
 8008cc6:	e010      	b.n	8008cea <lfs_init+0x202>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7fa fcea 	bl	80036a8 <lfs_malloc>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	69db      	ldr	r3, [r3, #28]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d103      	bne.n	8008cea <lfs_init+0x202>
            err = LFS_ERR_NOMEM;
 8008ce2:	f06f 030b 	mvn.w	r3, #11
 8008ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8008ce8:	e147      	b.n	8008f7a <lfs_init+0x492>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7fa fd00 	bl	80036f4 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	3310      	adds	r3, #16
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7fa fcfa 	bl	80036f4 <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d106      	bne.n	8008d18 <lfs_init+0x230>
 8008d0a:	4b24      	ldr	r3, [pc, #144]	@ (8008d9c <lfs_init+0x2b4>)
 8008d0c:	4a17      	ldr	r2, [pc, #92]	@ (8008d6c <lfs_init+0x284>)
 8008d0e:	f241 0190 	movw	r1, #4240	@ 0x1090
 8008d12:	4817      	ldr	r0, [pc, #92]	@ (8008d70 <lfs_init+0x288>)
 8008d14:	f001 fb42 	bl	800a39c <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d005      	beq.n	8008d2e <lfs_init+0x246>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	665a      	str	r2, [r3, #100]	@ 0x64
 8008d2c:	e010      	b.n	8008d50 <lfs_init+0x268>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7fa fcb7 	bl	80036a8 <lfs_malloc>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d103      	bne.n	8008d50 <lfs_init+0x268>
            err = LFS_ERR_NOMEM;
 8008d48:	f06f 030b 	mvn.w	r3, #11
 8008d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8008d4e:	e114      	b.n	8008f7a <lfs_init+0x492>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d56:	2bff      	cmp	r3, #255	@ 0xff
 8008d58:	d924      	bls.n	8008da4 <lfs_init+0x2bc>
 8008d5a:	4b11      	ldr	r3, [pc, #68]	@ (8008da0 <lfs_init+0x2b8>)
 8008d5c:	4a03      	ldr	r2, [pc, #12]	@ (8008d6c <lfs_init+0x284>)
 8008d5e:	f241 019c 	movw	r1, #4252	@ 0x109c
 8008d62:	4803      	ldr	r0, [pc, #12]	@ (8008d70 <lfs_init+0x288>)
 8008d64:	f001 fb1a 	bl	800a39c <__assert_func>
 8008d68:	0800c64c 	.word	0x0800c64c
 8008d6c:	0800d050 	.word	0x0800d050
 8008d70:	0800c2b4 	.word	0x0800c2b4
 8008d74:	0800c668 	.word	0x0800c668
 8008d78:	0800c684 	.word	0x0800c684
 8008d7c:	0800c6a0 	.word	0x0800c6a0
 8008d80:	0800c6d0 	.word	0x0800c6d0
 8008d84:	0800c700 	.word	0x0800c700
 8008d88:	0800c734 	.word	0x0800c734
 8008d8c:	0800c750 	.word	0x0800c750
 8008d90:	0800c79c 	.word	0x0800c79c
 8008d94:	0800c7b8 	.word	0x0800c7b8
 8008d98:	0800c80c 	.word	0x0800c80c
 8008d9c:	0800c86c 	.word	0x0800c86c
 8008da0:	0800c88c 	.word	0x0800c88c
    lfs->name_max = lfs->cfg->name_max;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008da8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->name_max) {
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d102      	bne.n	8008dbc <lfs_init+0x2d4>
        lfs->name_max = LFS_NAME_MAX;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	22ff      	movs	r2, #255	@ 0xff
 8008dba:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	da06      	bge.n	8008dd4 <lfs_init+0x2ec>
 8008dc6:	4b71      	ldr	r3, [pc, #452]	@ (8008f8c <lfs_init+0x4a4>)
 8008dc8:	4a71      	ldr	r2, [pc, #452]	@ (8008f90 <lfs_init+0x4a8>)
 8008dca:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 8008dce:	4871      	ldr	r0, [pc, #452]	@ (8008f94 <lfs_init+0x4ac>)
 8008dd0:	f001 fae4 	bl	800a39c <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->file_max) {
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d103      	bne.n	8008dee <lfs_init+0x306>
        lfs->file_max = LFS_FILE_MAX;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8008dec:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008df4:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d906      	bls.n	8008e0a <lfs_init+0x322>
 8008dfc:	4b66      	ldr	r3, [pc, #408]	@ (8008f98 <lfs_init+0x4b0>)
 8008dfe:	4a64      	ldr	r2, [pc, #400]	@ (8008f90 <lfs_init+0x4a8>)
 8008e00:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 8008e04:	4863      	ldr	r0, [pc, #396]	@ (8008f94 <lfs_init+0x4ac>)
 8008e06:	f001 fac9 	bl	800a39c <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	679a      	str	r2, [r3, #120]	@ 0x78
    if (!lfs->attr_max) {
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d103      	bne.n	8008e24 <lfs_init+0x33c>
        lfs->attr_max = LFS_ATTR_MAX;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8008e22:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e2e:	69db      	ldr	r3, [r3, #28]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d906      	bls.n	8008e42 <lfs_init+0x35a>
 8008e34:	4b59      	ldr	r3, [pc, #356]	@ (8008f9c <lfs_init+0x4b4>)
 8008e36:	4a56      	ldr	r2, [pc, #344]	@ (8008f90 <lfs_init+0x4a8>)
 8008e38:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 8008e3c:	4855      	ldr	r0, [pc, #340]	@ (8008f94 <lfs_init+0x4ac>)
 8008e3e:	f001 faad 	bl	800a39c <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e4c:	d00e      	beq.n	8008e6c <lfs_init+0x384>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d906      	bls.n	8008e6c <lfs_init+0x384>
 8008e5e:	4b50      	ldr	r3, [pc, #320]	@ (8008fa0 <lfs_init+0x4b8>)
 8008e60:	4a4b      	ldr	r2, [pc, #300]	@ (8008f90 <lfs_init+0x4a8>)
 8008e62:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 8008e66:	484b      	ldr	r0, [pc, #300]	@ (8008f94 <lfs_init+0x4ac>)
 8008e68:	f001 fa98 	bl	800a39c <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e76:	d00d      	beq.n	8008e94 <lfs_init+0x3ac>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d906      	bls.n	8008e94 <lfs_init+0x3ac>
 8008e86:	4b47      	ldr	r3, [pc, #284]	@ (8008fa4 <lfs_init+0x4bc>)
 8008e88:	4a41      	ldr	r2, [pc, #260]	@ (8008f90 <lfs_init+0x4a8>)
 8008e8a:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 8008e8e:	4841      	ldr	r0, [pc, #260]	@ (8008f94 <lfs_init+0x4ac>)
 8008e90:	f001 fa84 	bl	800a39c <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e9e:	d019      	beq.n	8008ed4 <lfs_init+0x3ec>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ea4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d004      	beq.n	8008eba <lfs_init+0x3d2>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eb6:	08db      	lsrs	r3, r3, #3
 8008eb8:	e003      	b.n	8008ec2 <lfs_init+0x3da>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ebe:	69db      	ldr	r3, [r3, #28]
 8008ec0:	08db      	lsrs	r3, r3, #3
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d206      	bcs.n	8008ed4 <lfs_init+0x3ec>
 8008ec6:	4b38      	ldr	r3, [pc, #224]	@ (8008fa8 <lfs_init+0x4c0>)
 8008ec8:	4a31      	ldr	r2, [pc, #196]	@ (8008f90 <lfs_init+0x4a8>)
 8008eca:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8008ece:	4831      	ldr	r0, [pc, #196]	@ (8008f94 <lfs_init+0x4ac>)
 8008ed0:	f001 fa64 	bl	800a39c <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ed8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ee6:	d103      	bne.n	8008ef0 <lfs_init+0x408>
        lfs->inline_max = 0;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	67da      	str	r2, [r3, #124]	@ 0x7c
 8008eee:	e022      	b.n	8008f36 <lfs_init+0x44e>
    } else if (lfs->inline_max == 0) {
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d11e      	bne.n	8008f36 <lfs_init+0x44e>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008efc:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
        lfs->inline_max = lfs_min(
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d004      	beq.n	8008f16 <lfs_init+0x42e>
                        ? lfs->cfg->metadata_max
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 8008f12:	08db      	lsrs	r3, r3, #3
 8008f14:	e003      	b.n	8008f1e <lfs_init+0x436>
                        : lfs->cfg->block_size)/8));
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f1a:	69db      	ldr	r3, [r3, #28]
        lfs->inline_max = lfs_min(
 8008f1c:	08db      	lsrs	r3, r3, #3
 8008f1e:	4619      	mov	r1, r3
 8008f20:	4610      	mov	r0, r2
 8008f22:	f7fa fb22 	bl	800356a <lfs_min>
 8008f26:	4603      	mov	r3, r0
 8008f28:	4619      	mov	r1, r3
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f7fa fb1d 	bl	800356a <lfs_min>
 8008f30:	4602      	mov	r2, r0
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f3c:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f44:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	333c      	adds	r3, #60	@ 0x3c
 8008f56:	2200      	movs	r2, #0
 8008f58:	601a      	str	r2, [r3, #0]
 8008f5a:	605a      	str	r2, [r3, #4]
 8008f5c:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	3330      	adds	r3, #48	@ 0x30
 8008f62:	2200      	movs	r2, #0
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	605a      	str	r2, [r3, #4]
 8008f68:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	3348      	adds	r3, #72	@ 0x48
 8008f6e:	2200      	movs	r2, #0
 8008f70:	601a      	str	r2, [r3, #0]
 8008f72:	605a      	str	r2, [r3, #4]
 8008f74:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8008f76:	2300      	movs	r3, #0
 8008f78:	e003      	b.n	8008f82 <lfs_init+0x49a>

cleanup:
    lfs_deinit(lfs);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f816 	bl	8008fac <lfs_deinit>
    return err;
 8008f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3734      	adds	r7, #52	@ 0x34
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd90      	pop	{r4, r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	0800c8a8 	.word	0x0800c8a8
 8008f90:	0800d050 	.word	0x0800d050
 8008f94:	0800c2b4 	.word	0x0800c2b4
 8008f98:	0800c8cc 	.word	0x0800c8cc
 8008f9c:	0800c8e8 	.word	0x0800c8e8
 8008fa0:	0800c918 	.word	0x0800c918
 8008fa4:	0800c970 	.word	0x0800c970
 8008fa8:	0800c9c0 	.word	0x0800c9c0

08008fac <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d104      	bne.n	8008fc8 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fa fb7c 	bl	80036c0 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d104      	bne.n	8008fdc <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fa fb72 	bl	80036c0 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d104      	bne.n	8008ff0 <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fa fb68 	bl	80036c0 <lfs_free>
    }

    return 0;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
	...

08008ffc <lfs_mount_>:
    return err;

}
#endif

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 8008ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ffe:	b0a1      	sub	sp, #132	@ 0x84
 8009000:	af04      	add	r7, sp, #16
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7ff fd6d 	bl	8008ae8 <lfs_init>
 800900e:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (err) {
 8009010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009012:	2b00      	cmp	r3, #0
 8009014:	d001      	beq.n	800901a <lfs_mount_+0x1e>
        return err;
 8009016:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009018:	e202      	b.n	8009420 <lfs_mount_+0x424>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 800901a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800901e:	2220      	movs	r2, #32
 8009020:	2100      	movs	r1, #0
 8009022:	4618      	mov	r0, r3
 8009024:	f001 fc32 	bl	800a88c <memset>
 8009028:	2301      	movs	r3, #1
 800902a:	657b      	str	r3, [r7, #84]	@ 0x54
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800902c:	4a9a      	ldr	r2, [pc, #616]	@ (8009298 <lfs_mount_+0x29c>)
 800902e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009032:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009036:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800903a:	2301      	movs	r3, #1
 800903c:	66bb      	str	r3, [r7, #104]	@ 0x68
    lfs_size_t tortoise_period = 1;
 800903e:	2301      	movs	r3, #1
 8009040:	667b      	str	r3, [r7, #100]	@ 0x64
    while (!lfs_pair_isnull(dir.tail)) {
 8009042:	e199      	b.n	8009378 <lfs_mount_+0x37c>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8009044:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8009048:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800904c:	3318      	adds	r3, #24
 800904e:	4611      	mov	r1, r2
 8009050:	4618      	mov	r0, r3
 8009052:	f7fa ff31 	bl	8003eb8 <lfs_pair_issync>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00a      	beq.n	8009072 <lfs_mount_+0x76>
            LFS_WARN("Cycle detected in tail list");
 800905c:	4b8f      	ldr	r3, [pc, #572]	@ (800929c <lfs_mount_+0x2a0>)
 800905e:	f241 123d 	movw	r2, #4413	@ 0x113d
 8009062:	498f      	ldr	r1, [pc, #572]	@ (80092a0 <lfs_mount_+0x2a4>)
 8009064:	488f      	ldr	r0, [pc, #572]	@ (80092a4 <lfs_mount_+0x2a8>)
 8009066:	f001 fbef 	bl	800a848 <iprintf>
            err = LFS_ERR_CORRUPT;
 800906a:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800906e:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 8009070:	e1d2      	b.n	8009418 <lfs_mount_+0x41c>
        }
        if (tortoise_i == tortoise_period) {
 8009072:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009074:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009076:	429a      	cmp	r2, r3
 8009078:	d108      	bne.n	800908c <lfs_mount_+0x90>
            tortoise[0] = dir.tail[0];
 800907a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800907c:	633b      	str	r3, [r7, #48]	@ 0x30
            tortoise[1] = dir.tail[1];
 800907e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009080:	637b      	str	r3, [r7, #52]	@ 0x34
            tortoise_i = 0;
 8009082:	2300      	movs	r3, #0
 8009084:	66bb      	str	r3, [r7, #104]	@ 0x68
            tortoise_period *= 2;
 8009086:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009088:	005b      	lsls	r3, r3, #1
 800908a:	667b      	str	r3, [r7, #100]	@ 0x64
        }
        tortoise_i += 1;
 800908c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800908e:	3301      	adds	r3, #1
 8009090:	66bb      	str	r3, [r7, #104]	@ 0x68
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	627b      	str	r3, [r7, #36]	@ 0x24
 8009096:	4b84      	ldr	r3, [pc, #528]	@ (80092a8 <lfs_mount_+0x2ac>)
 8009098:	62bb      	str	r3, [r7, #40]	@ 0x28
 800909a:	2308      	movs	r3, #8
 800909c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800909e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80090a2:	f103 0218 	add.w	r2, r3, #24
 80090a6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80090aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090ae:	9303      	str	r3, [sp, #12]
 80090b0:	4b7e      	ldr	r3, [pc, #504]	@ (80092ac <lfs_mount_+0x2b0>)
 80090b2:	9302      	str	r3, [sp, #8]
 80090b4:	2300      	movs	r3, #0
 80090b6:	9301      	str	r3, [sp, #4]
 80090b8:	4b7d      	ldr	r3, [pc, #500]	@ (80092b0 <lfs_mount_+0x2b4>)
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	4b7d      	ldr	r3, [pc, #500]	@ (80092b4 <lfs_mount_+0x2b8>)
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7fc f978 	bl	80053b4 <lfs_dir_fetchmatch>
 80090c4:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    lfs, "littlefs", 8});
        if (tag < 0) {
 80090c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	da02      	bge.n	80090d2 <lfs_mount_+0xd6>
            err = tag;
 80090cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 80090d0:	e1a2      	b.n	8009418 <lfs_mount_+0x41c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 80090d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f000 8142 	beq.w	800935e <lfs_mount_+0x362>
 80090da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090dc:	4618      	mov	r0, r3
 80090de:	f7fa ff5a 	bl	8003f96 <lfs_tag_isdelete>
 80090e2:	4603      	mov	r3, r0
 80090e4:	f083 0301 	eor.w	r3, r3, #1
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f000 8137 	beq.w	800935e <lfs_mount_+0x362>
            // update root
            lfs->root[0] = dir.pair[0];
 80090f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 80090f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 80090fc:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8009100:	f107 030c 	add.w	r3, r7, #12
 8009104:	9300      	str	r3, [sp, #0]
 8009106:	4b6c      	ldr	r3, [pc, #432]	@ (80092b8 <lfs_mount_+0x2bc>)
 8009108:	4a6a      	ldr	r2, [pc, #424]	@ (80092b4 <lfs_mount_+0x2b8>)
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7fb fc1c 	bl	8004948 <lfs_dir_get>
 8009110:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8009112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009114:	2b00      	cmp	r3, #0
 8009116:	da02      	bge.n	800911e <lfs_mount_+0x122>
                err = tag;
 8009118:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800911a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 800911c:	e11e      	b.n	800935c <lfs_mount_+0x360>
            }
            lfs_superblock_fromle32(&superblock);
 800911e:	f107 030c 	add.w	r3, r7, #12
 8009122:	4618      	mov	r0, r3
 8009124:	f7fb f910 	bl	8004348 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	0c1b      	lsrs	r3, r3, #16
 800912c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
            if (major_version != lfs_fs_disk_version_major(lfs)
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7fb f9d6 	bl	80044e8 <lfs_fs_disk_version_major>
 800913c:	4603      	mov	r3, r0
 800913e:	461a      	mov	r2, r3
 8009140:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8009144:	4293      	cmp	r3, r2
 8009146:	d108      	bne.n	800915a <lfs_mount_+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7fb f9db 	bl	8004504 <lfs_fs_disk_version_minor>
 800914e:	4603      	mov	r3, r0
 8009150:	461a      	mov	r2, r3
 8009152:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8009156:	4293      	cmp	r3, r2
 8009158:	d91d      	bls.n	8009196 <lfs_mount_+0x19a>
                LFS_ERROR("Invalid version "
 800915a:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 800915e:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7fb f9c0 	bl	80044e8 <lfs_fs_disk_version_major>
 8009168:	4603      	mov	r3, r0
 800916a:	461e      	mov	r6, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7fb f9c9 	bl	8004504 <lfs_fs_disk_version_minor>
 8009172:	4603      	mov	r3, r0
 8009174:	461a      	mov	r2, r3
 8009176:	4b49      	ldr	r3, [pc, #292]	@ (800929c <lfs_mount_+0x2a0>)
 8009178:	9303      	str	r3, [sp, #12]
 800917a:	9202      	str	r2, [sp, #8]
 800917c:	9601      	str	r6, [sp, #4]
 800917e:	9400      	str	r4, [sp, #0]
 8009180:	462b      	mov	r3, r5
 8009182:	f241 126b 	movw	r2, #4459	@ 0x116b
 8009186:	4946      	ldr	r1, [pc, #280]	@ (80092a0 <lfs_mount_+0x2a4>)
 8009188:	484c      	ldr	r0, [pc, #304]	@ (80092bc <lfs_mount_+0x2c0>)
 800918a:	f001 fb5d 	bl	800a848 <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 800918e:	f06f 0315 	mvn.w	r3, #21
 8009192:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8009194:	e0e2      	b.n	800935c <lfs_mount_+0x360>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 8009196:	2300      	movs	r3, #0
 8009198:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7fb f9b1 	bl	8004504 <lfs_fs_disk_version_minor>
 80091a2:	4603      	mov	r3, r0
 80091a4:	461a      	mov	r2, r3
 80091a6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d21c      	bcs.n	80091e8 <lfs_mount_+0x1ec>
                LFS_DEBUG("Found older minor version "
 80091ae:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 80091b2:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7fb f996 	bl	80044e8 <lfs_fs_disk_version_major>
 80091bc:	4603      	mov	r3, r0
 80091be:	461e      	mov	r6, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7fb f99f 	bl	8004504 <lfs_fs_disk_version_minor>
 80091c6:	4603      	mov	r3, r0
 80091c8:	461a      	mov	r2, r3
 80091ca:	4b34      	ldr	r3, [pc, #208]	@ (800929c <lfs_mount_+0x2a0>)
 80091cc:	9303      	str	r3, [sp, #12]
 80091ce:	9202      	str	r2, [sp, #8]
 80091d0:	9601      	str	r6, [sp, #4]
 80091d2:	9400      	str	r4, [sp, #0]
 80091d4:	462b      	mov	r3, r5
 80091d6:	f241 127a 	movw	r2, #4474	@ 0x117a
 80091da:	4931      	ldr	r1, [pc, #196]	@ (80092a0 <lfs_mount_+0x2a4>)
 80091dc:	4838      	ldr	r0, [pc, #224]	@ (80092c0 <lfs_mount_+0x2c4>)
 80091de:	f001 fb33 	bl	800a848 <iprintf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 80091e2:	2301      	movs	r3, #1
 80091e4:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 80091e8:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80091ec:	4619      	mov	r1, r3
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fbb4 	bl	800995c <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d018      	beq.n	800922c <lfs_mount_+0x230>
                if (superblock.name_max > lfs->name_max) {
 80091fa:	69ba      	ldr	r2, [r7, #24]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009200:	429a      	cmp	r2, r3
 8009202:	d910      	bls.n	8009226 <lfs_mount_+0x22a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8009204:	69ba      	ldr	r2, [r7, #24]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800920a:	4924      	ldr	r1, [pc, #144]	@ (800929c <lfs_mount_+0x2a0>)
 800920c:	9101      	str	r1, [sp, #4]
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	4613      	mov	r3, r2
 8009212:	f241 1289 	movw	r2, #4489	@ 0x1189
 8009216:	4922      	ldr	r1, [pc, #136]	@ (80092a0 <lfs_mount_+0x2a4>)
 8009218:	482a      	ldr	r0, [pc, #168]	@ (80092c4 <lfs_mount_+0x2c8>)
 800921a:	f001 fb15 	bl	800a848 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 800921e:	f06f 0315 	mvn.w	r3, #21
 8009222:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8009224:	e09a      	b.n	800935c <lfs_mount_+0x360>
                }

                lfs->name_max = superblock.name_max;
 8009226:	69ba      	ldr	r2, [r7, #24]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.file_max) {
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d018      	beq.n	8009264 <lfs_mount_+0x268>
                if (superblock.file_max > lfs->file_max) {
 8009232:	69fa      	ldr	r2, [r7, #28]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009238:	429a      	cmp	r2, r3
 800923a:	d910      	bls.n	800925e <lfs_mount_+0x262>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 800923c:	69fa      	ldr	r2, [r7, #28]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009242:	4916      	ldr	r1, [pc, #88]	@ (800929c <lfs_mount_+0x2a0>)
 8009244:	9101      	str	r1, [sp, #4]
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	4613      	mov	r3, r2
 800924a:	f241 1294 	movw	r2, #4500	@ 0x1194
 800924e:	4914      	ldr	r1, [pc, #80]	@ (80092a0 <lfs_mount_+0x2a4>)
 8009250:	481d      	ldr	r0, [pc, #116]	@ (80092c8 <lfs_mount_+0x2cc>)
 8009252:	f001 faf9 	bl	800a848 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8009256:	f06f 0315 	mvn.w	r3, #21
 800925a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 800925c:	e07e      	b.n	800935c <lfs_mount_+0x360>
                }

                lfs->file_max = superblock.file_max;
 800925e:	69fa      	ldr	r2, [r7, #28]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.attr_max) {
 8009264:	6a3b      	ldr	r3, [r7, #32]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d040      	beq.n	80092ec <lfs_mount_+0x2f0>
                if (superblock.attr_max > lfs->attr_max) {
 800926a:	6a3a      	ldr	r2, [r7, #32]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009270:	429a      	cmp	r2, r3
 8009272:	d92d      	bls.n	80092d0 <lfs_mount_+0x2d4>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8009274:	6a3a      	ldr	r2, [r7, #32]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800927a:	4908      	ldr	r1, [pc, #32]	@ (800929c <lfs_mount_+0x2a0>)
 800927c:	9101      	str	r1, [sp, #4]
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	4613      	mov	r3, r2
 8009282:	f241 129f 	movw	r2, #4511	@ 0x119f
 8009286:	4906      	ldr	r1, [pc, #24]	@ (80092a0 <lfs_mount_+0x2a4>)
 8009288:	4810      	ldr	r0, [pc, #64]	@ (80092cc <lfs_mount_+0x2d0>)
 800928a:	f001 fadd 	bl	800a848 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 800928e:	f06f 0315 	mvn.w	r3, #21
 8009292:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8009294:	e062      	b.n	800935c <lfs_mount_+0x360>
 8009296:	bf00      	nop
 8009298:	0800c408 	.word	0x0800c408
 800929c:	0800c3c4 	.word	0x0800c3c4
 80092a0:	0800c2b4 	.word	0x0800c2b4
 80092a4:	0800ca74 	.word	0x0800ca74
 80092a8:	0800ca68 	.word	0x0800ca68
 80092ac:	08005bf1 	.word	0x08005bf1
 80092b0:	0ff00008 	.word	0x0ff00008
 80092b4:	7ffffc00 	.word	0x7ffffc00
 80092b8:	20100018 	.word	0x20100018
 80092bc:	0800caa0 	.word	0x0800caa0
 80092c0:	0800cad8 	.word	0x0800cad8
 80092c4:	0800cb18 	.word	0x0800cb18
 80092c8:	0800cb4c 	.word	0x0800cb4c
 80092cc:	0800cb80 	.word	0x0800cb80
                }

                lfs->attr_max = superblock.attr_max;
 80092d0:	6a3a      	ldr	r2, [r7, #32]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	679a      	str	r2, [r3, #120]	@ 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092de:	4619      	mov	r1, r3
 80092e0:	4610      	mov	r0, r2
 80092e2:	f7fa f942 	bl	800356a <lfs_min>
 80092e6:	4602      	mov	r2, r0
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d017      	beq.n	8009326 <lfs_mount_+0x32a>
                    && superblock.block_count != lfs->cfg->block_count) {
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d011      	beq.n	8009326 <lfs_mount_+0x32a>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	4947      	ldr	r1, [pc, #284]	@ (8009428 <lfs_mount_+0x42c>)
 800930c:	9101      	str	r1, [sp, #4]
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	4613      	mov	r3, r2
 8009312:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 8009316:	4945      	ldr	r1, [pc, #276]	@ (800942c <lfs_mount_+0x430>)
 8009318:	4845      	ldr	r0, [pc, #276]	@ (8009430 <lfs_mount_+0x434>)
 800931a:	f001 fa95 	bl	800a848 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 800931e:	f06f 0315 	mvn.w	r3, #21
 8009322:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8009324:	e01a      	b.n	800935c <lfs_mount_+0x360>
            }

            lfs->block_count = superblock.block_count;
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	66da      	str	r2, [r3, #108]	@ 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	429a      	cmp	r2, r3
 8009336:	d012      	beq.n	800935e <lfs_mount_+0x362>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800933e:	69db      	ldr	r3, [r3, #28]
 8009340:	4939      	ldr	r1, [pc, #228]	@ (8009428 <lfs_mount_+0x42c>)
 8009342:	9101      	str	r1, [sp, #4]
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	4613      	mov	r3, r2
 8009348:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 800934c:	4937      	ldr	r1, [pc, #220]	@ (800942c <lfs_mount_+0x430>)
 800934e:	4839      	ldr	r0, [pc, #228]	@ (8009434 <lfs_mount_+0x438>)
 8009350:	f001 fa7a 	bl	800a848 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8009354:	f06f 0315 	mvn.w	r3, #21
 8009358:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 800935a:	bf00      	nop
            goto cleanup;
 800935c:	e05c      	b.n	8009418 <lfs_mount_+0x41c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009364:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009368:	4619      	mov	r1, r3
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f7fc fc0e 	bl	8005b8c <lfs_dir_getgstate>
 8009370:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err) {
 8009372:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009374:	2b00      	cmp	r3, #0
 8009376:	d14e      	bne.n	8009416 <lfs_mount_+0x41a>
    while (!lfs_pair_isnull(dir.tail)) {
 8009378:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800937c:	3318      	adds	r3, #24
 800937e:	4618      	mov	r0, r3
 8009380:	f7fa fd55 	bl	8003e2e <lfs_pair_isnull>
 8009384:	4603      	mov	r3, r0
 8009386:	f083 0301 	eor.w	r3, r3, #1
 800938a:	b2db      	uxtb	r3, r3
 800938c:	2b00      	cmp	r3, #0
 800938e:	f47f ae59 	bne.w	8009044 <lfs_mount_+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	3330      	adds	r3, #48	@ 0x30
 8009396:	4618      	mov	r0, r3
 8009398:	f7fa feb0 	bl	80040fc <lfs_gstate_iszero>
 800939c:	4603      	mov	r3, r0
 800939e:	f083 0301 	eor.w	r3, r3, #1
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d010      	beq.n	80093ca <lfs_mount_+0x3ce>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80093b4:	481c      	ldr	r0, [pc, #112]	@ (8009428 <lfs_mount_+0x42c>)
 80093b6:	9002      	str	r0, [sp, #8]
 80093b8:	9201      	str	r2, [sp, #4]
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	460b      	mov	r3, r1
 80093be:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 80093c2:	491a      	ldr	r1, [pc, #104]	@ (800942c <lfs_mount_+0x430>)
 80093c4:	481c      	ldr	r0, [pc, #112]	@ (8009438 <lfs_mount_+0x43c>)
 80093c6:	f001 fa3f 	bl	800a848 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fa fdd3 	bl	8003f7a <lfs_tag_isvalid>
 80093d4:	4603      	mov	r3, r0
 80093d6:	f083 0301 	eor.w	r3, r3, #1
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	461a      	mov	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093e2:	441a      	add	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	333c      	adds	r3, #60	@ 0x3c
 80093ee:	3230      	adds	r2, #48	@ 0x30
 80093f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80093f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80093fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8009402:	fb01 f202 	mul.w	r2, r1, r2
 8009406:	1a9a      	subs	r2, r3, r2
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7fb f894 	bl	800453a <lfs_alloc_drop>

    return 0;
 8009412:	2300      	movs	r3, #0
 8009414:	e004      	b.n	8009420 <lfs_mount_+0x424>
            goto cleanup;
 8009416:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f80f 	bl	800943c <lfs_unmount_>
    return err;
 800941e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8009420:	4618      	mov	r0, r3
 8009422:	3774      	adds	r7, #116	@ 0x74
 8009424:	46bd      	mov	sp, r7
 8009426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009428:	0800c3c4 	.word	0x0800c3c4
 800942c:	0800c2b4 	.word	0x0800c2b4
 8009430:	0800cbb4 	.word	0x0800cbb4
 8009434:	0800cbe8 	.word	0x0800cbe8
 8009438:	0800cc18 	.word	0x0800cc18

0800943c <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7ff fdb1 	bl	8008fac <lfs_deinit>
 800944a:	4603      	mov	r3, r0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8009454:	b590      	push	{r4, r7, lr}
 8009456:	b0a1      	sub	sp, #132	@ 0x84
 8009458:	af04      	add	r7, sp, #16
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
 8009460:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8009462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009466:	2220      	movs	r2, #32
 8009468:	2100      	movs	r1, #0
 800946a:	4618      	mov	r0, r3
 800946c:	f001 fa0e 	bl	800a88c <memset>
 8009470:	2301      	movs	r3, #1
 8009472:	643b      	str	r3, [r7, #64]	@ 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009474:	4a9a      	ldr	r2, [pc, #616]	@ (80096e0 <lfs_fs_traverse_+0x28c>)
 8009476:	f107 031c 	add.w	r3, r7, #28
 800947a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800947e:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8009482:	2301      	movs	r3, #1
 8009484:	66fb      	str	r3, [r7, #108]	@ 0x6c
    lfs_size_t tortoise_period = 1;
 8009486:	2301      	movs	r3, #1
 8009488:	66bb      	str	r3, [r7, #104]	@ 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 800948a:	e0c0      	b.n	800960e <lfs_fs_traverse_+0x1ba>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 800948c:	f107 021c 	add.w	r2, r7, #28
 8009490:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009494:	3318      	adds	r3, #24
 8009496:	4611      	mov	r1, r2
 8009498:	4618      	mov	r0, r3
 800949a:	f7fa fd0d 	bl	8003eb8 <lfs_pair_issync>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d009      	beq.n	80094b8 <lfs_fs_traverse_+0x64>
            LFS_WARN("Cycle detected in tail list");
 80094a4:	4b8f      	ldr	r3, [pc, #572]	@ (80096e4 <lfs_fs_traverse_+0x290>)
 80094a6:	f241 2222 	movw	r2, #4642	@ 0x1222
 80094aa:	498f      	ldr	r1, [pc, #572]	@ (80096e8 <lfs_fs_traverse_+0x294>)
 80094ac:	488f      	ldr	r0, [pc, #572]	@ (80096ec <lfs_fs_traverse_+0x298>)
 80094ae:	f001 f9cb 	bl	800a848 <iprintf>
            return LFS_ERR_CORRUPT;
 80094b2:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80094b6:	e10f      	b.n	80096d8 <lfs_fs_traverse_+0x284>
        }
        if (tortoise_i == tortoise_period) {
 80094b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80094bc:	429a      	cmp	r2, r3
 80094be:	d108      	bne.n	80094d2 <lfs_fs_traverse_+0x7e>
            tortoise[0] = dir.tail[0];
 80094c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094c2:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 80094c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094c6:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
            tortoise_period *= 2;
 80094cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80094ce:	005b      	lsls	r3, r3, #1
 80094d0:	66bb      	str	r3, [r7, #104]	@ 0x68
        }
        tortoise_i += 1;
 80094d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094d4:	3301      	adds	r3, #1
 80094d6:	66fb      	str	r3, [r7, #108]	@ 0x6c

        for (int i = 0; i < 2; i++) {
 80094d8:	2300      	movs	r3, #0
 80094da:	667b      	str	r3, [r7, #100]	@ 0x64
 80094dc:	e013      	b.n	8009506 <lfs_fs_traverse_+0xb2>
            int err = cb(data, dir.tail[i]);
 80094de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094e0:	3306      	adds	r3, #6
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	3370      	adds	r3, #112	@ 0x70
 80094e6:	443b      	add	r3, r7
 80094e8:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	4611      	mov	r1, r2
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	4798      	blx	r3
 80094f4:	6478      	str	r0, [r7, #68]	@ 0x44
            if (err) {
 80094f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d001      	beq.n	8009500 <lfs_fs_traverse_+0xac>
                return err;
 80094fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094fe:	e0eb      	b.n	80096d8 <lfs_fs_traverse_+0x284>
        for (int i = 0; i < 2; i++) {
 8009500:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009502:	3301      	adds	r3, #1
 8009504:	667b      	str	r3, [r7, #100]	@ 0x64
 8009506:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009508:	2b01      	cmp	r3, #1
 800950a:	dde8      	ble.n	80094de <lfs_fs_traverse_+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800950c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009510:	f103 0218 	add.w	r2, r3, #24
 8009514:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009518:	4619      	mov	r1, r3
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f7fc fb1a 	bl	8005b54 <lfs_dir_fetch>
 8009520:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (err) {
 8009522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <lfs_fs_traverse_+0xd8>
            return err;
 8009528:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800952a:	e0d5      	b.n	80096d8 <lfs_fs_traverse_+0x284>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800952c:	2300      	movs	r3, #0
 800952e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009532:	e067      	b.n	8009604 <lfs_fs_traverse_+0x1b0>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8009534:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009538:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800953a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800953e:	f043 0308 	orr.w	r3, r3, #8
 8009542:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8009546:	f107 0214 	add.w	r2, r7, #20
 800954a:	9200      	str	r2, [sp, #0]
 800954c:	4a68      	ldr	r2, [pc, #416]	@ (80096f0 <lfs_fs_traverse_+0x29c>)
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f7fb f9fa 	bl	8004948 <lfs_dir_get>
 8009554:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (tag < 0) {
 8009556:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009558:	2b00      	cmp	r3, #0
 800955a:	da05      	bge.n	8009568 <lfs_fs_traverse_+0x114>
                if (tag == LFS_ERR_NOENT) {
 800955c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800955e:	f113 0f02 	cmn.w	r3, #2
 8009562:	d049      	beq.n	80095f8 <lfs_fs_traverse_+0x1a4>
                    continue;
                }
                return tag;
 8009564:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009566:	e0b7      	b.n	80096d8 <lfs_fs_traverse_+0x284>
            }
            lfs_ctz_fromle32(&ctz);
 8009568:	f107 0314 	add.w	r3, r7, #20
 800956c:	4618      	mov	r0, r3
 800956e:	f7fa febb 	bl	80042e8 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8009572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009574:	4618      	mov	r0, r3
 8009576:	f7fa fd41 	bl	8003ffc <lfs_tag_type3>
 800957a:	4603      	mov	r3, r0
 800957c:	461a      	mov	r2, r3
 800957e:	f240 2302 	movw	r3, #514	@ 0x202
 8009582:	429a      	cmp	r2, r3
 8009584:	d113      	bne.n	80095ae <lfs_fs_traverse_+0x15a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8009586:	68f9      	ldr	r1, [r7, #12]
 8009588:	6978      	ldr	r0, [r7, #20]
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	9202      	str	r2, [sp, #8]
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	9201      	str	r2, [sp, #4]
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	4603      	mov	r3, r0
 8009598:	460a      	mov	r2, r1
 800959a:	2100      	movs	r1, #0
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f7fe fa4d 	bl	8007a3c <lfs_ctz_traverse>
 80095a2:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 80095a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d027      	beq.n	80095fa <lfs_fs_traverse_+0x1a6>
                    return err;
 80095aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095ac:	e094      	b.n	80096d8 <lfs_fs_traverse_+0x284>
                }
            } else if (includeorphans &&
 80095ae:	78fb      	ldrb	r3, [r7, #3]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d022      	beq.n	80095fa <lfs_fs_traverse_+0x1a6>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 80095b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fa fd20 	bl	8003ffc <lfs_tag_type3>
 80095bc:	4603      	mov	r3, r0
            } else if (includeorphans &&
 80095be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095c2:	d11a      	bne.n	80095fa <lfs_fs_traverse_+0x1a6>
                for (int i = 0; i < 2; i++) {
 80095c4:	2300      	movs	r3, #0
 80095c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095c8:	e012      	b.n	80095f0 <lfs_fs_traverse_+0x19c>
                    err = cb(data, (&ctz.head)[i]);
 80095ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	f107 0214 	add.w	r2, r7, #20
 80095d2:	4413      	add	r3, r2
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	4611      	mov	r1, r2
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	4798      	blx	r3
 80095de:	64f8      	str	r0, [r7, #76]	@ 0x4c
                    if (err) {
 80095e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <lfs_fs_traverse_+0x196>
                        return err;
 80095e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095e8:	e076      	b.n	80096d8 <lfs_fs_traverse_+0x284>
                for (int i = 0; i < 2; i++) {
 80095ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095ec:	3301      	adds	r3, #1
 80095ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	dde9      	ble.n	80095ca <lfs_fs_traverse_+0x176>
 80095f6:	e000      	b.n	80095fa <lfs_fs_traverse_+0x1a6>
                    continue;
 80095f8:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 80095fa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80095fe:	3301      	adds	r3, #1
 8009600:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009604:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009606:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 800960a:	429a      	cmp	r2, r3
 800960c:	d392      	bcc.n	8009534 <lfs_fs_traverse_+0xe0>
    while (!lfs_pair_isnull(dir.tail)) {
 800960e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009612:	3318      	adds	r3, #24
 8009614:	4618      	mov	r0, r3
 8009616:	f7fa fc0a 	bl	8003e2e <lfs_pair_isnull>
 800961a:	4603      	mov	r3, r0
 800961c:	f083 0301 	eor.w	r3, r3, #1
 8009620:	b2db      	uxtb	r3, r3
 8009622:	2b00      	cmp	r3, #0
 8009624:	f47f af32 	bne.w	800948c <lfs_fs_traverse_+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800962c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800962e:	e04f      	b.n	80096d0 <lfs_fs_traverse_+0x27c>
        if (f->type != LFS_TYPE_REG) {
 8009630:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009632:	799b      	ldrb	r3, [r3, #6]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d147      	bne.n	80096c8 <lfs_fs_traverse_+0x274>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8009638:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800963a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800963c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d01d      	beq.n	8009680 <lfs_fs_traverse_+0x22c>
 8009644:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009648:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d117      	bne.n	8009680 <lfs_fs_traverse_+0x22c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8009650:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009652:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800965a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800965c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800965e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	9202      	str	r2, [sp, #8]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	9201      	str	r2, [sp, #4]
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	4623      	mov	r3, r4
 800966c:	4602      	mov	r2, r0
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f7fe f9e4 	bl	8007a3c <lfs_ctz_traverse>
 8009674:	6578      	str	r0, [r7, #84]	@ 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8009676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009678:	2b00      	cmp	r3, #0
 800967a:	d001      	beq.n	8009680 <lfs_fs_traverse_+0x22c>
                return err;
 800967c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800967e:	e02b      	b.n	80096d8 <lfs_fs_traverse_+0x284>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8009680:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d01e      	beq.n	80096ca <lfs_fs_traverse_+0x276>
 800968c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800968e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009690:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d118      	bne.n	80096ca <lfs_fs_traverse_+0x276>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8009698:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800969a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80096a2:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80096a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80096a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	9202      	str	r2, [sp, #8]
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	9201      	str	r2, [sp, #4]
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	4623      	mov	r3, r4
 80096b4:	4602      	mov	r2, r0
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f7fe f9c0 	bl	8007a3c <lfs_ctz_traverse>
 80096bc:	6538      	str	r0, [r7, #80]	@ 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 80096be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d002      	beq.n	80096ca <lfs_fs_traverse_+0x276>
                return err;
 80096c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096c6:	e007      	b.n	80096d8 <lfs_fs_traverse_+0x284>
            continue;
 80096c8:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80096ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1ac      	bne.n	8009630 <lfs_fs_traverse_+0x1dc>
            }
        }
    }
#endif

    return 0;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3774      	adds	r7, #116	@ 0x74
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd90      	pop	{r4, r7, pc}
 80096e0:	0800c408 	.word	0x0800c408
 80096e4:	0800c3c4 	.word	0x0800c3c4
 80096e8:	0800c2b4 	.word	0x0800c2b4
 80096ec:	0800ca74 	.word	0x0800ca74
 80096f0:	700ffc00 	.word	0x700ffc00

080096f4 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b08a      	sub	sp, #40	@ 0x28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2201      	movs	r2, #1
 800970a:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800970c:	4a2d      	ldr	r2, [pc, #180]	@ (80097c4 <lfs_fs_pred+0xd0>)
 800970e:	f107 0314 	add.w	r3, r7, #20
 8009712:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009716:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800971a:	2301      	movs	r3, #1
 800971c:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t tortoise_period = 1;
 800971e:	2301      	movs	r3, #1
 8009720:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8009722:	e03e      	b.n	80097a2 <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	3318      	adds	r3, #24
 8009728:	f107 0214 	add.w	r2, r7, #20
 800972c:	4611      	mov	r1, r2
 800972e:	4618      	mov	r0, r3
 8009730:	f7fa fbc2 	bl	8003eb8 <lfs_pair_issync>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d009      	beq.n	800974e <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 800973a:	4b23      	ldr	r3, [pc, #140]	@ (80097c8 <lfs_fs_pred+0xd4>)
 800973c:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 8009740:	4922      	ldr	r1, [pc, #136]	@ (80097cc <lfs_fs_pred+0xd8>)
 8009742:	4823      	ldr	r0, [pc, #140]	@ (80097d0 <lfs_fs_pred+0xdc>)
 8009744:	f001 f880 	bl	800a848 <iprintf>
            return LFS_ERR_CORRUPT;
 8009748:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800974c:	e036      	b.n	80097bc <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 800974e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009750:	6a3b      	ldr	r3, [r7, #32]
 8009752:	429a      	cmp	r2, r3
 8009754:	d10a      	bne.n	800976c <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	69db      	ldr	r3, [r3, #28]
 8009760:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8009762:	2300      	movs	r3, #0
 8009764:	627b      	str	r3, [r7, #36]	@ 0x24
            tortoise_period *= 2;
 8009766:	6a3b      	ldr	r3, [r7, #32]
 8009768:	005b      	lsls	r3, r3, #1
 800976a:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 800976c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976e:	3301      	adds	r3, #1
 8009770:	627b      	str	r3, [r7, #36]	@ 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	3318      	adds	r3, #24
 8009776:	68b9      	ldr	r1, [r7, #8]
 8009778:	4618      	mov	r0, r3
 800977a:	f7fa fb73 	bl	8003e64 <lfs_pair_cmp>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d101      	bne.n	8009788 <lfs_fs_pred+0x94>
            return 0;
 8009784:	2300      	movs	r3, #0
 8009786:	e019      	b.n	80097bc <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	3318      	adds	r3, #24
 800978c:	461a      	mov	r2, r3
 800978e:	6879      	ldr	r1, [r7, #4]
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f7fc f9df 	bl	8005b54 <lfs_dir_fetch>
 8009796:	61f8      	str	r0, [r7, #28]
        if (err) {
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <lfs_fs_pred+0xae>
            return err;
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	e00c      	b.n	80097bc <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	3318      	adds	r3, #24
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7fa fb41 	bl	8003e2e <lfs_pair_isnull>
 80097ac:	4603      	mov	r3, r0
 80097ae:	f083 0301 	eor.w	r3, r3, #1
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1b5      	bne.n	8009724 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 80097b8:	f06f 0301 	mvn.w	r3, #1
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3728      	adds	r7, #40	@ 0x28
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	0800c408 	.word	0x0800c408
 80097c8:	0800c3c4 	.word	0x0800c3c4
 80097cc:	0800c2b4 	.word	0x0800c2b4
 80097d0:	0800ca74 	.word	0x0800ca74

080097d4 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80097d4:	b5b0      	push	{r4, r5, r7, lr}
 80097d6:	b08e      	sub	sp, #56	@ 0x38
 80097d8:	af04      	add	r7, sp, #16
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 80097e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80097ee:	6a3b      	ldr	r3, [r7, #32]
 80097f0:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 80097f4:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80097f6:	6a3b      	ldr	r3, [r7, #32]
 80097f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80097fa:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	69fa      	ldr	r2, [r7, #28]
 8009802:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8009804:	2108      	movs	r1, #8
 8009806:	9103      	str	r1, [sp, #12]
 8009808:	f107 0110 	add.w	r1, r7, #16
 800980c:	9102      	str	r1, [sp, #8]
 800980e:	9201      	str	r2, [sp, #4]
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	462b      	mov	r3, r5
 8009814:	4622      	mov	r2, r4
 8009816:	4601      	mov	r1, r0
 8009818:	6a38      	ldr	r0, [r7, #32]
 800981a:	f7f9 ff81 	bl	8003720 <lfs_bd_read>
 800981e:	61b8      	str	r0, [r7, #24]
    if (err) {
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <lfs_fs_parent_match+0x56>
        return err;
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	e012      	b.n	8009850 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800982a:	f107 0310 	add.w	r3, r7, #16
 800982e:	4618      	mov	r0, r3
 8009830:	f7fa fb6f 	bl	8003f12 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8009834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009836:	1d1a      	adds	r2, r3, #4
 8009838:	f107 0310 	add.w	r3, r7, #16
 800983c:	4611      	mov	r1, r2
 800983e:	4618      	mov	r0, r3
 8009840:	f7fa fb10 	bl	8003e64 <lfs_pair_cmp>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	bf14      	ite	ne
 800984a:	2301      	movne	r3, #1
 800984c:	2300      	moveq	r3, #0
 800984e:	b2db      	uxtb	r3, r3
}
 8009850:	4618      	mov	r0, r3
 8009852:	3728      	adds	r7, #40	@ 0x28
 8009854:	46bd      	mov	sp, r7
 8009856:	bdb0      	pop	{r4, r5, r7, pc}

08009858 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8009858:	b580      	push	{r7, lr}
 800985a:	b090      	sub	sp, #64	@ 0x40
 800985c:	af04      	add	r7, sp, #16
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2201      	movs	r2, #1
 800986e:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009870:	4a33      	ldr	r2, [pc, #204]	@ (8009940 <lfs_fs_parent+0xe8>)
 8009872:	f107 031c 	add.w	r3, r7, #28
 8009876:	e892 0003 	ldmia.w	r2, {r0, r1}
 800987a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800987e:	2301      	movs	r3, #1
 8009880:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t tortoise_period = 1;
 8009882:	2301      	movs	r3, #1
 8009884:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 8009886:	e04a      	b.n	800991e <lfs_fs_parent+0xc6>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	3318      	adds	r3, #24
 800988c:	f107 021c 	add.w	r2, r7, #28
 8009890:	4611      	mov	r1, r2
 8009892:	4618      	mov	r0, r3
 8009894:	f7fa fb10 	bl	8003eb8 <lfs_pair_issync>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d009      	beq.n	80098b2 <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 800989e:	4b29      	ldr	r3, [pc, #164]	@ (8009944 <lfs_fs_parent+0xec>)
 80098a0:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 80098a4:	4928      	ldr	r1, [pc, #160]	@ (8009948 <lfs_fs_parent+0xf0>)
 80098a6:	4829      	ldr	r0, [pc, #164]	@ (800994c <lfs_fs_parent+0xf4>)
 80098a8:	f000 ffce 	bl	800a848 <iprintf>
            return LFS_ERR_CORRUPT;
 80098ac:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80098b0:	e042      	b.n	8009938 <lfs_fs_parent+0xe0>
        }
        if (tortoise_i == tortoise_period) {
 80098b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d10a      	bne.n	80098d0 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	699b      	ldr	r3, [r3, #24]
 80098be:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	69db      	ldr	r3, [r3, #28]
 80098c4:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 80098c6:	2300      	movs	r3, #0
 80098c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            tortoise_period *= 2;
 80098ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098cc:	005b      	lsls	r3, r3, #1
 80098ce:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        tortoise_i += 1;
 80098d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d2:	3301      	adds	r3, #1
 80098d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80098e4:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	3304      	adds	r3, #4
 80098ea:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80098ec:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80098ee:	f107 0310 	add.w	r3, r7, #16
 80098f2:	9303      	str	r3, [sp, #12]
 80098f4:	4b16      	ldr	r3, [pc, #88]	@ (8009950 <lfs_fs_parent+0xf8>)
 80098f6:	9302      	str	r3, [sp, #8]
 80098f8:	2300      	movs	r3, #0
 80098fa:	9301      	str	r3, [sp, #4]
 80098fc:	4b15      	ldr	r3, [pc, #84]	@ (8009954 <lfs_fs_parent+0xfc>)
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	4b15      	ldr	r3, [pc, #84]	@ (8009958 <lfs_fs_parent+0x100>)
 8009902:	6879      	ldr	r1, [r7, #4]
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f7fb fd55 	bl	80053b4 <lfs_dir_fetchmatch>
 800990a:	6278      	str	r0, [r7, #36]	@ 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 800990c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990e:	2b00      	cmp	r3, #0
 8009910:	d005      	beq.n	800991e <lfs_fs_parent+0xc6>
 8009912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009914:	f113 0f02 	cmn.w	r3, #2
 8009918:	d001      	beq.n	800991e <lfs_fs_parent+0xc6>
            return tag;
 800991a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800991c:	e00c      	b.n	8009938 <lfs_fs_parent+0xe0>
    while (!lfs_pair_isnull(parent->tail)) {
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	3318      	adds	r3, #24
 8009922:	4618      	mov	r0, r3
 8009924:	f7fa fa83 	bl	8003e2e <lfs_pair_isnull>
 8009928:	4603      	mov	r3, r0
 800992a:	f083 0301 	eor.w	r3, r3, #1
 800992e:	b2db      	uxtb	r3, r3
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1a9      	bne.n	8009888 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8009934:	f06f 0301 	mvn.w	r3, #1
}
 8009938:	4618      	mov	r0, r3
 800993a:	3730      	adds	r7, #48	@ 0x30
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	0800c408 	.word	0x0800c408
 8009944:	0800c3c4 	.word	0x0800c3c4
 8009948:	0800c2b4 	.word	0x0800c2b4
 800994c:	0800ca74 	.word	0x0800ca74
 8009950:	080097d5 	.word	0x080097d5
 8009954:	20000008 	.word	0x20000008
 8009958:	7ff003ff 	.word	0x7ff003ff

0800995c <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	460b      	mov	r3, r1
 8009966:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800996c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 8009970:	78fb      	ldrb	r3, [r7, #3]
 8009972:	025b      	lsls	r3, r3, #9
 8009974:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800997a:	bf00      	nop
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
	...

08009988 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8009988:	b590      	push	{r4, r7, lr}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	460b      	mov	r3, r1
 8009992:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009998:	4618      	mov	r0, r3
 800999a:	f7fa fb69 	bl	8004070 <lfs_tag_size>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10a      	bne.n	80099ba <lfs_fs_preporphans+0x32>
 80099a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	da06      	bge.n	80099ba <lfs_fs_preporphans+0x32>
 80099ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009a18 <lfs_fs_preporphans+0x90>)
 80099ae:	4a1b      	ldr	r2, [pc, #108]	@ (8009a1c <lfs_fs_preporphans+0x94>)
 80099b0:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 80099b4:	481a      	ldr	r0, [pc, #104]	@ (8009a20 <lfs_fs_preporphans+0x98>)
 80099b6:	f000 fcf1 	bl	800a39c <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099be:	4618      	mov	r0, r3
 80099c0:	f7fa fb56 	bl	8004070 <lfs_tag_size>
 80099c4:	4603      	mov	r3, r0
 80099c6:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 80099ca:	d90a      	bls.n	80099e2 <lfs_fs_preporphans+0x5a>
 80099cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	dd06      	ble.n	80099e2 <lfs_fs_preporphans+0x5a>
 80099d4:	4b13      	ldr	r3, [pc, #76]	@ (8009a24 <lfs_fs_preporphans+0x9c>)
 80099d6:	4a11      	ldr	r2, [pc, #68]	@ (8009a1c <lfs_fs_preporphans+0x94>)
 80099d8:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 80099dc:	4810      	ldr	r0, [pc, #64]	@ (8009a20 <lfs_fs_preporphans+0x98>)
 80099de:	f000 fcdd 	bl	800a39c <__assert_func>
    lfs->gstate.tag += orphans;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80099e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099ea:	441a      	add	r2, r3
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099f4:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	3330      	adds	r3, #48	@ 0x30
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fa fb9a 	bl	8004136 <lfs_gstate_hasorphans>
 8009a02:	4603      	mov	r3, r0
 8009a04:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8009a06:	ea44 0203 	orr.w	r2, r4, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd90      	pop	{r4, r7, pc}
 8009a18:	0800cc50 	.word	0x0800cc50
 8009a1c:	0800d05c 	.word	0x0800d05c
 8009a20:	0800c2b4 	.word	0x0800c2b4
 8009a24:	0800cc88 	.word	0x0800cc88

08009a28 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	460b      	mov	r3, r1
 8009a32:	607a      	str	r2, [r7, #4]
 8009a34:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a3a:	4a17      	ldr	r2, [pc, #92]	@ (8009a98 <lfs_fs_prepmove+0x70>)
 8009a3c:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8009a3e:	897b      	ldrh	r3, [r7, #10]
 8009a40:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8009a44:	428b      	cmp	r3, r1
 8009a46:	d006      	beq.n	8009a56 <lfs_fs_prepmove+0x2e>
 8009a48:	897b      	ldrh	r3, [r7, #10]
 8009a4a:	029b      	lsls	r3, r3, #10
 8009a4c:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8009a50:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8009a54:	e000      	b.n	8009a58 <lfs_fs_prepmove+0x30>
 8009a56:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8009a58:	431a      	orrs	r2, r3
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8009a5e:	897b      	ldrh	r3, [r7, #10]
 8009a60:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d002      	beq.n	8009a6e <lfs_fs_prepmove+0x46>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	e000      	b.n	8009a70 <lfs_fs_prepmove+0x48>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8009a74:	897b      	ldrh	r3, [r7, #10]
 8009a76:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d003      	beq.n	8009a86 <lfs_fs_prepmove+0x5e>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	3304      	adds	r3, #4
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	e000      	b.n	8009a88 <lfs_fs_prepmove+0x60>
 8009a86:	2300      	movs	r3, #0
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8009a8c:	bf00      	nop
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr
 8009a98:	800003ff 	.word	0x800003ff

08009a9c <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b098      	sub	sp, #96	@ 0x60
 8009aa0:	af02      	add	r7, sp, #8
 8009aa2:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	3330      	adds	r3, #48	@ 0x30
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7fa fb79 	bl	80041a0 <lfs_gstate_needssuperblock>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	f083 0301 	eor.w	r3, r3, #1
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d001      	beq.n	8009abe <lfs_fs_desuperblock+0x22>
        return 0;
 8009aba:	2300      	movs	r3, #0
 8009abc:	e04e      	b.n	8009b5c <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a1a      	ldr	r2, [r3, #32]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ac6:	4927      	ldr	r1, [pc, #156]	@ (8009b64 <lfs_fs_desuperblock+0xc8>)
 8009ac8:	9101      	str	r1, [sp, #4]
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	4613      	mov	r3, r2
 8009ace:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 8009ad2:	4925      	ldr	r1, [pc, #148]	@ (8009b68 <lfs_fs_desuperblock+0xcc>)
 8009ad4:	4825      	ldr	r0, [pc, #148]	@ (8009b6c <lfs_fs_desuperblock+0xd0>)
 8009ad6:	f000 feb7 	bl	800a848 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f103 0220 	add.w	r2, r3, #32
 8009ae0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7fc f834 	bl	8005b54 <lfs_dir_fetch>
 8009aec:	6578      	str	r0, [r7, #84]	@ 0x54
    if (err) {
 8009aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d001      	beq.n	8009af8 <lfs_fs_desuperblock+0x5c>
        return err;
 8009af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009af6:	e031      	b.n	8009b5c <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f7fa fce7 	bl	80044cc <lfs_fs_disk_version>
 8009afe:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8009b00:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b06:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 8009b08:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 8009b0e:	627b      	str	r3, [r7, #36]	@ 0x24
        .name_max    = lfs->name_max,
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    lfs_superblock_t superblock = {
 8009b14:	62bb      	str	r3, [r7, #40]	@ 0x28
        .file_max    = lfs->file_max,
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    lfs_superblock_t superblock = {
 8009b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .attr_max    = lfs->attr_max,
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    lfs_superblock_t superblock = {
 8009b20:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    lfs_superblock_tole32(&superblock);
 8009b22:	f107 031c 	add.w	r3, r7, #28
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fa fc46 	bl	80043b8 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8009b2c:	4b10      	ldr	r3, [pc, #64]	@ (8009b70 <lfs_fs_desuperblock+0xd4>)
 8009b2e:	617b      	str	r3, [r7, #20]
 8009b30:	f107 031c 	add.w	r3, r7, #28
 8009b34:	61bb      	str	r3, [r7, #24]
 8009b36:	f107 0214 	add.w	r2, r7, #20
 8009b3a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8009b3e:	2301      	movs	r3, #1
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f7fd fda9 	bl	8007698 <lfs_dir_commit>
 8009b46:	6578      	str	r0, [r7, #84]	@ 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8009b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d001      	beq.n	8009b52 <lfs_fs_desuperblock+0xb6>
        return err;
 8009b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b50:	e004      	b.n	8009b5c <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8009b52:	2100      	movs	r1, #0
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f7ff ff01 	bl	800995c <lfs_fs_prepsuperblock>
    return 0;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3758      	adds	r7, #88	@ 0x58
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	0800c3c4 	.word	0x0800c3c4
 8009b68:	0800c2b4 	.word	0x0800c2b4
 8009b6c:	0800ccc0 	.word	0x0800ccc0
 8009b70:	20100018 	.word	0x20100018

08009b74 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8009b74:	b5b0      	push	{r4, r5, r7, lr}
 8009b76:	b094      	sub	sp, #80	@ 0x50
 8009b78:	af04      	add	r7, sp, #16
 8009b7a:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	333c      	adds	r3, #60	@ 0x3c
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fa fafa 	bl	800417a <lfs_gstate_hasmove>
 8009b86:	4603      	mov	r3, r0
 8009b88:	f083 0301 	eor.w	r3, r3, #1
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <lfs_fs_demove+0x22>
        return 0;
 8009b92:	2300      	movs	r3, #0
 8009b94:	e05b      	b.n	8009c4e <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7fa fa54 	bl	8004050 <lfs_tag_id>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	461a      	mov	r2, r3
 8009bac:	4b2a      	ldr	r3, [pc, #168]	@ (8009c58 <lfs_fs_demove+0xe4>)
 8009bae:	9302      	str	r3, [sp, #8]
 8009bb0:	9201      	str	r2, [sp, #4]
 8009bb2:	9400      	str	r4, [sp, #0]
 8009bb4:	462b      	mov	r3, r5
 8009bb6:	f241 3224 	movw	r2, #4900	@ 0x1324
 8009bba:	4928      	ldr	r1, [pc, #160]	@ (8009c5c <lfs_fs_demove+0xe8>)
 8009bbc:	4828      	ldr	r0, [pc, #160]	@ (8009c60 <lfs_fs_demove+0xec>)
 8009bbe:	f000 fe43 	bl	800a848 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7fa fa18 	bl	8003ffc <lfs_tag_type3>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	461a      	mov	r2, r3
 8009bd0:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d006      	beq.n	8009be6 <lfs_fs_demove+0x72>
 8009bd8:	4b22      	ldr	r3, [pc, #136]	@ (8009c64 <lfs_fs_demove+0xf0>)
 8009bda:	4a23      	ldr	r2, [pc, #140]	@ (8009c68 <lfs_fs_demove+0xf4>)
 8009bdc:	f241 312b 	movw	r1, #4907	@ 0x132b
 8009be0:	481e      	ldr	r0, [pc, #120]	@ (8009c5c <lfs_fs_demove+0xe8>)
 8009be2:	f000 fbdb 	bl	800a39c <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8009bec:	f107 0318 	add.w	r3, r7, #24
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f7fb ffae 	bl	8005b54 <lfs_dir_fetch>
 8009bf8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 8009bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d001      	beq.n	8009c04 <lfs_fs_demove+0x90>
        return err;
 8009c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c02:	e024      	b.n	8009c4e <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fa fa21 	bl	8004050 <lfs_tag_id>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8009c12:	2200      	movs	r2, #0
 8009c14:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f7ff ff05 	bl	8009a28 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8009c1e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009c20:	029b      	lsls	r3, r3, #10
 8009c22:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8009c26:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8009c2a:	613b      	str	r3, [r7, #16]
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	617b      	str	r3, [r7, #20]
 8009c30:	f107 0210 	add.w	r2, r7, #16
 8009c34:	f107 0118 	add.w	r1, r7, #24
 8009c38:	2301      	movs	r3, #1
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f7fd fd2c 	bl	8007698 <lfs_dir_commit>
 8009c40:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8009c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d001      	beq.n	8009c4c <lfs_fs_demove+0xd8>
        return err;
 8009c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c4a:	e000      	b.n	8009c4e <lfs_fs_demove+0xda>
    }

    return 0;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3740      	adds	r7, #64	@ 0x40
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bdb0      	pop	{r4, r5, r7, pc}
 8009c56:	bf00      	nop
 8009c58:	0800c3c4 	.word	0x0800c3c4
 8009c5c:	0800c2b4 	.word	0x0800c2b4
 8009c60:	0800ccf4 	.word	0x0800ccf4
 8009c64:	0800cd28 	.word	0x0800cd28
 8009c68:	0800d070 	.word	0x0800d070

08009c6c <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8009c6c:	b5b0      	push	{r4, r5, r7, lr}
 8009c6e:	b0b2      	sub	sp, #200	@ 0xc8
 8009c70:	af04      	add	r7, sp, #16
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	460b      	mov	r3, r1
 8009c76:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	3330      	adds	r3, #48	@ 0x30
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fa fa5a 	bl	8004136 <lfs_gstate_hasorphans>
 8009c82:	4603      	mov	r3, r0
 8009c84:	f083 0301 	eor.w	r3, r3, #1
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d001      	beq.n	8009c92 <lfs_fs_deorphan+0x26>
        return 0;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	e188      	b.n	8009fa4 <lfs_fs_deorphan+0x338>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 8009c98:	e171      	b.n	8009f7e <lfs_fs_deorphan+0x312>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8009c9a:	f107 0308 	add.w	r3, r7, #8
 8009c9e:	2220      	movs	r2, #32
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 fdf2 	bl	800a88c <memset>
 8009ca8:	2301      	movs	r3, #1
 8009caa:	77fb      	strb	r3, [r7, #31]
 8009cac:	2301      	movs	r3, #1
 8009cae:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8009cb6:	e14a      	b.n	8009f4e <lfs_fs_deorphan+0x2e2>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8009cb8:	f107 0308 	add.w	r3, r7, #8
 8009cbc:	f103 0218 	add.w	r2, r3, #24
 8009cc0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f7fb ff44 	bl	8005b54 <lfs_dir_fetch>
 8009ccc:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
            if (err) {
 8009cd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <lfs_fs_deorphan+0x72>
                return err;
 8009cd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cdc:	e162      	b.n	8009fa4 <lfs_fs_deorphan+0x338>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8009cde:	7ffb      	ldrb	r3, [r7, #31]
 8009ce0:	f083 0301 	eor.w	r3, r3, #1
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f000 8125 	beq.w	8009f36 <lfs_fs_deorphan+0x2ca>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8009cec:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8009cf0:	f107 0308 	add.w	r3, r7, #8
 8009cf4:	3318      	adds	r3, #24
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7ff fdad 	bl	8009858 <lfs_fs_parent>
 8009cfe:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8009d02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	da07      	bge.n	8009d1a <lfs_fs_deorphan+0xae>
 8009d0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d0e:	f113 0f02 	cmn.w	r3, #2
 8009d12:	d002      	beq.n	8009d1a <lfs_fs_deorphan+0xae>
                    return tag;
 8009d14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d18:	e10c      	b.n	8009f34 <lfs_fs_deorphan+0x2c8>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 8009d1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f040 80ac 	bne.w	8009e7c <lfs_fs_deorphan+0x210>
 8009d24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d28:	f113 0f02 	cmn.w	r3, #2
 8009d2c:	f000 80a6 	beq.w	8009e7c <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8009d30:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009d34:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8009d38:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8009d3c:	9300      	str	r3, [sp, #0]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	4a9a      	ldr	r2, [pc, #616]	@ (8009fac <lfs_fs_deorphan+0x340>)
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7fa fe00 	bl	8004948 <lfs_dir_get>
 8009d48:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8009d4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	da02      	bge.n	8009d5a <lfs_fs_deorphan+0xee>
                        return state;
 8009d54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                    return tag;
 8009d58:	e124      	b.n	8009fa4 <lfs_fs_deorphan+0x338>
                    }
                    lfs_pair_fromle32(pair);
 8009d5a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fa f8d7 	bl	8003f12 <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 8009d64:	f107 0308 	add.w	r3, r7, #8
 8009d68:	f103 0218 	add.w	r2, r3, #24
 8009d6c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8009d70:	4611      	mov	r1, r2
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fa f8a0 	bl	8003eb8 <lfs_pair_issync>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	f083 0301 	eor.w	r3, r3, #1
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d07b      	beq.n	8009e7c <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8009d84:	6a38      	ldr	r0, [r7, #32]
 8009d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d88:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009d8c:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8009d90:	4c87      	ldr	r4, [pc, #540]	@ (8009fb0 <lfs_fs_deorphan+0x344>)
 8009d92:	9403      	str	r4, [sp, #12]
 8009d94:	9102      	str	r1, [sp, #8]
 8009d96:	9201      	str	r2, [sp, #4]
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	f241 3271 	movw	r2, #4977	@ 0x1371
 8009da0:	4984      	ldr	r1, [pc, #528]	@ (8009fb4 <lfs_fs_deorphan+0x348>)
 8009da2:	4885      	ldr	r0, [pc, #532]	@ (8009fb8 <lfs_fs_deorphan+0x34c>)
 8009da4:	f000 fd50 	bl	800a848 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8009da8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8009dac:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	3330      	adds	r3, #48	@ 0x30
 8009db4:	f107 0208 	add.w	r2, r7, #8
 8009db8:	4611      	mov	r1, r2
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fa fa04 	bl	80041c8 <lfs_gstate_hasmovehere>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d01c      	beq.n	8009e00 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fa f940 	bl	8004050 <lfs_tag_id>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 8009dd6:	68b9      	ldr	r1, [r7, #8]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 8009dde:	4874      	ldr	r0, [pc, #464]	@ (8009fb0 <lfs_fs_deorphan+0x344>)
 8009de0:	9002      	str	r0, [sp, #8]
 8009de2:	9201      	str	r2, [sp, #4]
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	460b      	mov	r3, r1
 8009de8:	f241 327c 	movw	r2, #4988	@ 0x137c
 8009dec:	4971      	ldr	r1, [pc, #452]	@ (8009fb4 <lfs_fs_deorphan+0x348>)
 8009dee:	4873      	ldr	r0, [pc, #460]	@ (8009fbc <lfs_fs_deorphan+0x350>)
 8009df0:	f000 fd2a 	bl	800a848 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8009df4:	2200      	movs	r2, #0
 8009df6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f7ff fe14 	bl	8009a28 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8009e00:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7fa f89e 	bl	8003f46 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8009e0a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8009e0e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d007      	beq.n	8009e26 <lfs_fs_deorphan+0x1ba>
 8009e16:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8009e1a:	029b      	lsls	r3, r3, #10
 8009e1c:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8009e20:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8009e24:	e000      	b.n	8009e28 <lfs_fs_deorphan+0x1bc>
 8009e26:	2300      	movs	r3, #0
 8009e28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009e32:	4b63      	ldr	r3, [pc, #396]	@ (8009fc0 <lfs_fs_deorphan+0x354>)
 8009e34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e38:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8009e3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e40:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8009e44:	f107 0108 	add.w	r1, r7, #8
 8009e48:	2302      	movs	r3, #2
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7fd f92a 	bl	80070a4 <lfs_dir_orphaningcommit>
 8009e50:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8009e54:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7fa f85a 	bl	8003f12 <lfs_pair_fromle32>
                        if (state < 0) {
 8009e5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	da02      	bge.n	8009e6c <lfs_fs_deorphan+0x200>
                            return state;
 8009e66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 8009e6a:	e063      	b.n	8009f34 <lfs_fs_deorphan+0x2c8>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8009e6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009e70:	2b03      	cmp	r3, #3
 8009e72:	d16c      	bne.n	8009f4e <lfs_fs_deorphan+0x2e2>
                            moreorphans = true;
 8009e74:	2301      	movs	r3, #1
 8009e76:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8009e7a:	e068      	b.n	8009f4e <lfs_fs_deorphan+0x2e2>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 8009e7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d158      	bne.n	8009f36 <lfs_fs_deorphan+0x2ca>
 8009e84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e88:	f113 0f02 	cmn.w	r3, #2
 8009e8c:	d153      	bne.n	8009f36 <lfs_fs_deorphan+0x2ca>
 8009e8e:	78fb      	ldrb	r3, [r7, #3]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d050      	beq.n	8009f36 <lfs_fs_deorphan+0x2ca>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8009e94:	6a3a      	ldr	r2, [r7, #32]
 8009e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e98:	4945      	ldr	r1, [pc, #276]	@ (8009fb0 <lfs_fs_deorphan+0x344>)
 8009e9a:	9101      	str	r1, [sp, #4]
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	f241 329c 	movw	r2, #5020	@ 0x139c
 8009ea4:	4943      	ldr	r1, [pc, #268]	@ (8009fb4 <lfs_fs_deorphan+0x348>)
 8009ea6:	4847      	ldr	r0, [pc, #284]	@ (8009fc4 <lfs_fs_deorphan+0x358>)
 8009ea8:	f000 fcce 	bl	800a848 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8009eb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f7fb fe67 	bl	8005b8c <lfs_dir_getgstate>
 8009ebe:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                    if (err) {
 8009ec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d002      	beq.n	8009ed0 <lfs_fs_deorphan+0x264>
                        return err;
 8009eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ece:	e030      	b.n	8009f32 <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8009ed0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009ed4:	3318      	adds	r3, #24
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fa f835 	bl	8003f46 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8009edc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009ee0:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8009ee4:	051a      	lsls	r2, r3, #20
 8009ee6:	4b38      	ldr	r3, [pc, #224]	@ (8009fc8 <lfs_fs_deorphan+0x35c>)
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	673b      	str	r3, [r7, #112]	@ 0x70
 8009eec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009ef0:	3318      	adds	r3, #24
 8009ef2:	677b      	str	r3, [r7, #116]	@ 0x74
 8009ef4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8009ef8:	f107 0108 	add.w	r1, r7, #8
 8009efc:	2301      	movs	r3, #1
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7fd f8d0 	bl	80070a4 <lfs_dir_orphaningcommit>
 8009f04:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8009f08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009f0c:	3318      	adds	r3, #24
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7f9 ffff 	bl	8003f12 <lfs_pair_fromle32>
                    if (state < 0) {
 8009f14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	da02      	bge.n	8009f22 <lfs_fs_deorphan+0x2b6>
                        return state;
 8009f1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009f20:	e007      	b.n	8009f32 <lfs_fs_deorphan+0x2c6>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8009f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d110      	bne.n	8009f4c <lfs_fs_deorphan+0x2e0>
                        moreorphans = true;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8009f30:	e00d      	b.n	8009f4e <lfs_fs_deorphan+0x2e2>
                    return tag;
 8009f32:	e037      	b.n	8009fa4 <lfs_fs_deorphan+0x338>
                return err;
 8009f34:	e036      	b.n	8009fa4 <lfs_fs_deorphan+0x338>
                    // refetch tail
                    continue;
                }
            }

            pdir = dir;
 8009f36:	f107 0408 	add.w	r4, r7, #8
 8009f3a:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8009f3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009f46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009f4a:	e000      	b.n	8009f4e <lfs_fs_deorphan+0x2e2>
                    continue;
 8009f4c:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 8009f4e:	f107 0308 	add.w	r3, r7, #8
 8009f52:	3318      	adds	r3, #24
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7f9 ff6a 	bl	8003e2e <lfs_pair_isnull>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	f083 0301 	eor.w	r3, r3, #1
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f47f aea8 	bne.w	8009cb8 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 8009f68:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <lfs_fs_deorphan+0x308>
 8009f70:	2300      	movs	r3, #0
 8009f72:	e002      	b.n	8009f7a <lfs_fs_deorphan+0x30e>
 8009f74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009f78:	3301      	adds	r3, #1
 8009f7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 8009f7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	f77f ae89 	ble.w	8009c9a <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	3330      	adds	r3, #48	@ 0x30
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7fa f8e5 	bl	800415c <lfs_gstate_getorphans>
 8009f92:	4603      	mov	r3, r0
 8009f94:	425b      	negs	r3, r3
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	b25b      	sxtb	r3, r3
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7ff fcf3 	bl	8009988 <lfs_fs_preporphans>
 8009fa2:	4603      	mov	r3, r0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	37b8      	adds	r7, #184	@ 0xb8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bdb0      	pop	{r4, r5, r7, pc}
 8009fac:	7ffffc00 	.word	0x7ffffc00
 8009fb0:	0800c3c4 	.word	0x0800c3c4
 8009fb4:	0800c2b4 	.word	0x0800c2b4
 8009fb8:	0800cd5c 	.word	0x0800cd5c
 8009fbc:	0800cda0 	.word	0x0800cda0
 8009fc0:	600ffc08 	.word	0x600ffc08
 8009fc4:	0800cde8 	.word	0x0800cde8
 8009fc8:	000ffc08 	.word	0x000ffc08

08009fcc <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f7ff fd61 	bl	8009a9c <lfs_fs_desuperblock>
 8009fda:	60f8      	str	r0, [r7, #12]
    if (err) {
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <lfs_fs_forceconsistency+0x1a>
        return err;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	e013      	b.n	800a00e <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f7ff fdc4 	bl	8009b74 <lfs_fs_demove>
 8009fec:	60f8      	str	r0, [r7, #12]
    if (err) {
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <lfs_fs_forceconsistency+0x2c>
        return err;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	e00a      	b.n	800a00e <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 8009ff8:	2101      	movs	r1, #1
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7ff fe36 	bl	8009c6c <lfs_fs_deorphan>
 800a000:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d001      	beq.n	800a00c <lfs_fs_forceconsistency+0x40>
        return err;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	e000      	b.n	800a00e <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 800a016:	b480      	push	{r7}
 800a018:	b085      	sub	sp, #20
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
 800a01e:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	1c5a      	adds	r2, r3, #1
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	601a      	str	r2, [r3, #0]
    return 0;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3714      	adds	r7, #20
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 800a048:	f107 0208 	add.w	r2, r7, #8
 800a04c:	2300      	movs	r3, #0
 800a04e:	4907      	ldr	r1, [pc, #28]	@ (800a06c <lfs_fs_size_+0x30>)
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7ff f9ff 	bl	8009454 <lfs_fs_traverse_>
 800a056:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <lfs_fs_size_+0x26>
        return err;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	e000      	b.n	800a064 <lfs_fs_size_+0x28>
    }

    return size;
 800a062:	68bb      	ldr	r3, [r7, #8]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	0800a017 	.word	0x0800a017

0800a070 <lfs_mount>:
    LFS_UNLOCK(cfg);
    return err;
}
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800a07a:	2300      	movs	r3, #0
 800a07c:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d001      	beq.n	800a088 <lfs_mount+0x18>
        return err;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	e005      	b.n	800a094 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 800a088:	6839      	ldr	r1, [r7, #0]
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7fe ffb6 	bl	8008ffc <lfs_mount_>
 800a090:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800a092:	68fb      	ldr	r3, [r7, #12]
}
 800a094:	4618      	mov	r0, r3
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <lfs_unmount>:

int lfs_unmount(lfs_t *lfs) {
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <lfs_unmount+0x16>
        return err;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	e004      	b.n	800a0bc <lfs_unmount+0x20>
    }
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);

    err = lfs_unmount_(lfs);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f7ff f9c2 	bl	800943c <lfs_unmount_>
 800a0b8:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_unmount -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b086      	sub	sp, #24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]
 800a0d0:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	617b      	str	r3, [r7, #20]
    if (err) {
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d001      	beq.n	800a0e0 <lfs_file_open+0x1c>
        return err;
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	e01a      	b.n	800a116 <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0e4:	68b9      	ldr	r1, [r7, #8]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7fa f99e 	bl	8004428 <lfs_mlist_isopen>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	f083 0301 	eor.w	r3, r3, #1
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d106      	bne.n	800a106 <lfs_file_open+0x42>
 800a0f8:	4b09      	ldr	r3, [pc, #36]	@ (800a120 <lfs_file_open+0x5c>)
 800a0fa:	4a0a      	ldr	r2, [pc, #40]	@ (800a124 <lfs_file_open+0x60>)
 800a0fc:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 800a100:	4809      	ldr	r0, [pc, #36]	@ (800a128 <lfs_file_open+0x64>)
 800a102:	f000 f94b 	bl	800a39c <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	68b9      	ldr	r1, [r7, #8]
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f7fd fee1 	bl	8007ed4 <lfs_file_open_>
 800a112:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a114:	697b      	ldr	r3, [r7, #20]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3718      	adds	r7, #24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	0800ce38 	.word	0x0800ce38
 800a124:	0800d080 	.word	0x0800d080
 800a128:	0800c2b4 	.word	0x0800c2b4

0800a12c <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a136:	2300      	movs	r3, #0
 800a138:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d001      	beq.n	800a144 <lfs_file_close+0x18>
        return err;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	e015      	b.n	800a170 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fa f96c 	bl	8004428 <lfs_mlist_isopen>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d106      	bne.n	800a164 <lfs_file_close+0x38>
 800a156:	4b08      	ldr	r3, [pc, #32]	@ (800a178 <lfs_file_close+0x4c>)
 800a158:	4a08      	ldr	r2, [pc, #32]	@ (800a17c <lfs_file_close+0x50>)
 800a15a:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 800a15e:	4808      	ldr	r0, [pc, #32]	@ (800a180 <lfs_file_close+0x54>)
 800a160:	f000 f91c 	bl	800a39c <__assert_func>

    err = lfs_file_close_(lfs, file);
 800a164:	6839      	ldr	r1, [r7, #0]
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f7fd fecc 	bl	8007f04 <lfs_file_close_>
 800a16c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a16e:	68fb      	ldr	r3, [r7, #12]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	0800ce70 	.word	0x0800ce70
 800a17c:	0800d090 	.word	0x0800d090
 800a180:	0800c2b4 	.word	0x0800c2b4

0800a184 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800a184:	b580      	push	{r7, lr}
 800a186:	b086      	sub	sp, #24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	607a      	str	r2, [r7, #4]
 800a190:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a192:	2300      	movs	r3, #0
 800a194:	617b      	str	r3, [r7, #20]
    if (err) {
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <lfs_file_read+0x1c>
        return err;
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	e017      	b.n	800a1d0 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a4:	68b9      	ldr	r1, [r7, #8]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7fa f93e 	bl	8004428 <lfs_mlist_isopen>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d106      	bne.n	800a1c0 <lfs_file_read+0x3c>
 800a1b2:	4b09      	ldr	r3, [pc, #36]	@ (800a1d8 <lfs_file_read+0x54>)
 800a1b4:	4a09      	ldr	r2, [pc, #36]	@ (800a1dc <lfs_file_read+0x58>)
 800a1b6:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 800a1ba:	4809      	ldr	r0, [pc, #36]	@ (800a1e0 <lfs_file_read+0x5c>)
 800a1bc:	f000 f8ee 	bl	800a39c <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	68b9      	ldr	r1, [r7, #8]
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f7fe f9fc 	bl	80085c4 <lfs_file_read_>
 800a1cc:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800a1ce:	693b      	ldr	r3, [r7, #16]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3718      	adds	r7, #24
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	0800ce70 	.word	0x0800ce70
 800a1dc:	0800d0a0 	.word	0x0800d0a0
 800a1e0:	0800c2b4 	.word	0x0800c2b4

0800a1e4 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b086      	sub	sp, #24
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	607a      	str	r2, [r7, #4]
 800a1f0:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	617b      	str	r3, [r7, #20]
    if (err) {
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d001      	beq.n	800a200 <lfs_file_write+0x1c>
        return err;
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	e017      	b.n	800a230 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a204:	68b9      	ldr	r1, [r7, #8]
 800a206:	4618      	mov	r0, r3
 800a208:	f7fa f90e 	bl	8004428 <lfs_mlist_isopen>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d106      	bne.n	800a220 <lfs_file_write+0x3c>
 800a212:	4b09      	ldr	r3, [pc, #36]	@ (800a238 <lfs_file_write+0x54>)
 800a214:	4a09      	ldr	r2, [pc, #36]	@ (800a23c <lfs_file_write+0x58>)
 800a216:	f641 0105 	movw	r1, #6149	@ 0x1805
 800a21a:	4809      	ldr	r0, [pc, #36]	@ (800a240 <lfs_file_write+0x5c>)
 800a21c:	f000 f8be 	bl	800a39c <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	68b9      	ldr	r1, [r7, #8]
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f7fe fb12 	bl	8008850 <lfs_file_write_>
 800a22c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800a22e:	693b      	ldr	r3, [r7, #16]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3718      	adds	r7, #24
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	0800ce70 	.word	0x0800ce70
 800a23c:	0800d0b0 	.word	0x0800d0b0
 800a240:	0800c2b4 	.word	0x0800c2b4

0800a244 <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a24e:	2300      	movs	r3, #0
 800a250:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d001      	beq.n	800a25c <lfs_file_tell+0x18>
        return err;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	e015      	b.n	800a288 <lfs_file_tell+0x44>
    }
    LFS_TRACE("lfs_file_tell(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a260:	6839      	ldr	r1, [r7, #0]
 800a262:	4618      	mov	r0, r3
 800a264:	f7fa f8e0 	bl	8004428 <lfs_mlist_isopen>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d106      	bne.n	800a27c <lfs_file_tell+0x38>
 800a26e:	4b08      	ldr	r3, [pc, #32]	@ (800a290 <lfs_file_tell+0x4c>)
 800a270:	4a08      	ldr	r2, [pc, #32]	@ (800a294 <lfs_file_tell+0x50>)
 800a272:	f641 0138 	movw	r1, #6200	@ 0x1838
 800a276:	4808      	ldr	r0, [pc, #32]	@ (800a298 <lfs_file_tell+0x54>)
 800a278:	f000 f890 	bl	800a39c <__assert_func>

    lfs_soff_t res = lfs_file_tell_(lfs, file);
 800a27c:	6839      	ldr	r1, [r7, #0]
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f7fe fbf3 	bl	8008a6a <lfs_file_tell_>
 800a284:	60b8      	str	r0, [r7, #8]

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800a286:	68bb      	ldr	r3, [r7, #8]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	0800ce70 	.word	0x0800ce70
 800a294:	0800d0c0 	.word	0x0800d0c0
 800a298:	0800c2b4 	.word	0x0800c2b4

0800a29c <lfs_file_rewind>:

int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d001      	beq.n	800a2b4 <lfs_file_rewind+0x18>
        return err;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	e005      	b.n	800a2c0 <lfs_file_rewind+0x24>
    }
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);

    err = lfs_file_rewind_(lfs, file);
 800a2b4:	6839      	ldr	r1, [r7, #0]
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7fe fbe4 	bl	8008a84 <lfs_file_rewind_>
 800a2bc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a2be:	68fb      	ldr	r3, [r7, #12]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <lfs_file_size>:

lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d001      	beq.n	800a2e0 <lfs_file_size+0x18>
        return err;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	e015      	b.n	800a30c <lfs_file_size+0x44>
    }
    LFS_TRACE("lfs_file_size(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2e4:	6839      	ldr	r1, [r7, #0]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7fa f89e 	bl	8004428 <lfs_mlist_isopen>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d106      	bne.n	800a300 <lfs_file_size+0x38>
 800a2f2:	4b08      	ldr	r3, [pc, #32]	@ (800a314 <lfs_file_size+0x4c>)
 800a2f4:	4a08      	ldr	r2, [pc, #32]	@ (800a318 <lfs_file_size+0x50>)
 800a2f6:	f641 0155 	movw	r1, #6229	@ 0x1855
 800a2fa:	4808      	ldr	r0, [pc, #32]	@ (800a31c <lfs_file_size+0x54>)
 800a2fc:	f000 f84e 	bl	800a39c <__assert_func>

    lfs_soff_t res = lfs_file_size_(lfs, file);
 800a300:	6839      	ldr	r1, [r7, #0]
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f7fe fbd4 	bl	8008ab0 <lfs_file_size_>
 800a308:	60b8      	str	r0, [r7, #8]

    LFS_TRACE("lfs_file_size -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800a30a:	68bb      	ldr	r3, [r7, #8]
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	0800ce70 	.word	0x0800ce70
 800a318:	0800d0d0 	.word	0x0800d0d0
 800a31c:	0800c2b4 	.word	0x0800c2b4

0800a320 <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 800a320:	b480      	push	{r7}
 800a322:	b087      	sub	sp, #28
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 800a330:	2300      	movs	r3, #0
 800a332:	617b      	str	r3, [r7, #20]
 800a334:	e024      	b.n	800a380 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	091a      	lsrs	r2, r3, #4
 800a33a:	6939      	ldr	r1, [r7, #16]
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	440b      	add	r3, r1
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	4619      	mov	r1, r3
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	404b      	eors	r3, r1
 800a348:	f003 030f 	and.w	r3, r3, #15
 800a34c:	4912      	ldr	r1, [pc, #72]	@ (800a398 <lfs_crc+0x78>)
 800a34e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a352:	4053      	eors	r3, r2
 800a354:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	091a      	lsrs	r2, r3, #4
 800a35a:	6939      	ldr	r1, [r7, #16]
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	440b      	add	r3, r1
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	091b      	lsrs	r3, r3, #4
 800a364:	b2db      	uxtb	r3, r3
 800a366:	4619      	mov	r1, r3
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	404b      	eors	r3, r1
 800a36c:	f003 030f 	and.w	r3, r3, #15
 800a370:	4909      	ldr	r1, [pc, #36]	@ (800a398 <lfs_crc+0x78>)
 800a372:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a376:	4053      	eors	r3, r2
 800a378:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	3301      	adds	r3, #1
 800a37e:	617b      	str	r3, [r7, #20]
 800a380:	697a      	ldr	r2, [r7, #20]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	429a      	cmp	r2, r3
 800a386:	d3d6      	bcc.n	800a336 <lfs_crc+0x16>
    }

    return crc;
 800a388:	68fb      	ldr	r3, [r7, #12]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	371c      	adds	r7, #28
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop
 800a398:	0800d0e0 	.word	0x0800d0e0

0800a39c <__assert_func>:
 800a39c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a39e:	4614      	mov	r4, r2
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	4b09      	ldr	r3, [pc, #36]	@ (800a3c8 <__assert_func+0x2c>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4605      	mov	r5, r0
 800a3a8:	68d8      	ldr	r0, [r3, #12]
 800a3aa:	b14c      	cbz	r4, 800a3c0 <__assert_func+0x24>
 800a3ac:	4b07      	ldr	r3, [pc, #28]	@ (800a3cc <__assert_func+0x30>)
 800a3ae:	9100      	str	r1, [sp, #0]
 800a3b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3b4:	4906      	ldr	r1, [pc, #24]	@ (800a3d0 <__assert_func+0x34>)
 800a3b6:	462b      	mov	r3, r5
 800a3b8:	f000 fa16 	bl	800a7e8 <fiprintf>
 800a3bc:	f000 fb40 	bl	800aa40 <abort>
 800a3c0:	4b04      	ldr	r3, [pc, #16]	@ (800a3d4 <__assert_func+0x38>)
 800a3c2:	461c      	mov	r4, r3
 800a3c4:	e7f3      	b.n	800a3ae <__assert_func+0x12>
 800a3c6:	bf00      	nop
 800a3c8:	20000014 	.word	0x20000014
 800a3cc:	0800d120 	.word	0x0800d120
 800a3d0:	0800d12d 	.word	0x0800d12d
 800a3d4:	0800d15b 	.word	0x0800d15b

0800a3d8 <exit>:
 800a3d8:	b508      	push	{r3, lr}
 800a3da:	4b06      	ldr	r3, [pc, #24]	@ (800a3f4 <exit+0x1c>)
 800a3dc:	4604      	mov	r4, r0
 800a3de:	b113      	cbz	r3, 800a3e6 <exit+0xe>
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	f3af 8000 	nop.w
 800a3e6:	4b04      	ldr	r3, [pc, #16]	@ (800a3f8 <exit+0x20>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	b103      	cbz	r3, 800a3ee <exit+0x16>
 800a3ec:	4798      	blx	r3
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f7f7 fc64 	bl	8001cbc <_exit>
 800a3f4:	00000000 	.word	0x00000000
 800a3f8:	20000458 	.word	0x20000458

0800a3fc <malloc>:
 800a3fc:	4b02      	ldr	r3, [pc, #8]	@ (800a408 <malloc+0xc>)
 800a3fe:	4601      	mov	r1, r0
 800a400:	6818      	ldr	r0, [r3, #0]
 800a402:	f000 b82d 	b.w	800a460 <_malloc_r>
 800a406:	bf00      	nop
 800a408:	20000014 	.word	0x20000014

0800a40c <free>:
 800a40c:	4b02      	ldr	r3, [pc, #8]	@ (800a418 <free+0xc>)
 800a40e:	4601      	mov	r1, r0
 800a410:	6818      	ldr	r0, [r3, #0]
 800a412:	f000 bb1d 	b.w	800aa50 <_free_r>
 800a416:	bf00      	nop
 800a418:	20000014 	.word	0x20000014

0800a41c <sbrk_aligned>:
 800a41c:	b570      	push	{r4, r5, r6, lr}
 800a41e:	4e0f      	ldr	r6, [pc, #60]	@ (800a45c <sbrk_aligned+0x40>)
 800a420:	460c      	mov	r4, r1
 800a422:	6831      	ldr	r1, [r6, #0]
 800a424:	4605      	mov	r5, r0
 800a426:	b911      	cbnz	r1, 800a42e <sbrk_aligned+0x12>
 800a428:	f000 fa9c 	bl	800a964 <_sbrk_r>
 800a42c:	6030      	str	r0, [r6, #0]
 800a42e:	4621      	mov	r1, r4
 800a430:	4628      	mov	r0, r5
 800a432:	f000 fa97 	bl	800a964 <_sbrk_r>
 800a436:	1c43      	adds	r3, r0, #1
 800a438:	d103      	bne.n	800a442 <sbrk_aligned+0x26>
 800a43a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a43e:	4620      	mov	r0, r4
 800a440:	bd70      	pop	{r4, r5, r6, pc}
 800a442:	1cc4      	adds	r4, r0, #3
 800a444:	f024 0403 	bic.w	r4, r4, #3
 800a448:	42a0      	cmp	r0, r4
 800a44a:	d0f8      	beq.n	800a43e <sbrk_aligned+0x22>
 800a44c:	1a21      	subs	r1, r4, r0
 800a44e:	4628      	mov	r0, r5
 800a450:	f000 fa88 	bl	800a964 <_sbrk_r>
 800a454:	3001      	adds	r0, #1
 800a456:	d1f2      	bne.n	800a43e <sbrk_aligned+0x22>
 800a458:	e7ef      	b.n	800a43a <sbrk_aligned+0x1e>
 800a45a:	bf00      	nop
 800a45c:	20000318 	.word	0x20000318

0800a460 <_malloc_r>:
 800a460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a464:	1ccd      	adds	r5, r1, #3
 800a466:	f025 0503 	bic.w	r5, r5, #3
 800a46a:	3508      	adds	r5, #8
 800a46c:	2d0c      	cmp	r5, #12
 800a46e:	bf38      	it	cc
 800a470:	250c      	movcc	r5, #12
 800a472:	2d00      	cmp	r5, #0
 800a474:	4606      	mov	r6, r0
 800a476:	db01      	blt.n	800a47c <_malloc_r+0x1c>
 800a478:	42a9      	cmp	r1, r5
 800a47a:	d904      	bls.n	800a486 <_malloc_r+0x26>
 800a47c:	230c      	movs	r3, #12
 800a47e:	6033      	str	r3, [r6, #0]
 800a480:	2000      	movs	r0, #0
 800a482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a486:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a55c <_malloc_r+0xfc>
 800a48a:	f000 f869 	bl	800a560 <__malloc_lock>
 800a48e:	f8d8 3000 	ldr.w	r3, [r8]
 800a492:	461c      	mov	r4, r3
 800a494:	bb44      	cbnz	r4, 800a4e8 <_malloc_r+0x88>
 800a496:	4629      	mov	r1, r5
 800a498:	4630      	mov	r0, r6
 800a49a:	f7ff ffbf 	bl	800a41c <sbrk_aligned>
 800a49e:	1c43      	adds	r3, r0, #1
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	d158      	bne.n	800a556 <_malloc_r+0xf6>
 800a4a4:	f8d8 4000 	ldr.w	r4, [r8]
 800a4a8:	4627      	mov	r7, r4
 800a4aa:	2f00      	cmp	r7, #0
 800a4ac:	d143      	bne.n	800a536 <_malloc_r+0xd6>
 800a4ae:	2c00      	cmp	r4, #0
 800a4b0:	d04b      	beq.n	800a54a <_malloc_r+0xea>
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	4639      	mov	r1, r7
 800a4b6:	4630      	mov	r0, r6
 800a4b8:	eb04 0903 	add.w	r9, r4, r3
 800a4bc:	f000 fa52 	bl	800a964 <_sbrk_r>
 800a4c0:	4581      	cmp	r9, r0
 800a4c2:	d142      	bne.n	800a54a <_malloc_r+0xea>
 800a4c4:	6821      	ldr	r1, [r4, #0]
 800a4c6:	1a6d      	subs	r5, r5, r1
 800a4c8:	4629      	mov	r1, r5
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	f7ff ffa6 	bl	800a41c <sbrk_aligned>
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	d03a      	beq.n	800a54a <_malloc_r+0xea>
 800a4d4:	6823      	ldr	r3, [r4, #0]
 800a4d6:	442b      	add	r3, r5
 800a4d8:	6023      	str	r3, [r4, #0]
 800a4da:	f8d8 3000 	ldr.w	r3, [r8]
 800a4de:	685a      	ldr	r2, [r3, #4]
 800a4e0:	bb62      	cbnz	r2, 800a53c <_malloc_r+0xdc>
 800a4e2:	f8c8 7000 	str.w	r7, [r8]
 800a4e6:	e00f      	b.n	800a508 <_malloc_r+0xa8>
 800a4e8:	6822      	ldr	r2, [r4, #0]
 800a4ea:	1b52      	subs	r2, r2, r5
 800a4ec:	d420      	bmi.n	800a530 <_malloc_r+0xd0>
 800a4ee:	2a0b      	cmp	r2, #11
 800a4f0:	d917      	bls.n	800a522 <_malloc_r+0xc2>
 800a4f2:	1961      	adds	r1, r4, r5
 800a4f4:	42a3      	cmp	r3, r4
 800a4f6:	6025      	str	r5, [r4, #0]
 800a4f8:	bf18      	it	ne
 800a4fa:	6059      	strne	r1, [r3, #4]
 800a4fc:	6863      	ldr	r3, [r4, #4]
 800a4fe:	bf08      	it	eq
 800a500:	f8c8 1000 	streq.w	r1, [r8]
 800a504:	5162      	str	r2, [r4, r5]
 800a506:	604b      	str	r3, [r1, #4]
 800a508:	4630      	mov	r0, r6
 800a50a:	f000 f82f 	bl	800a56c <__malloc_unlock>
 800a50e:	f104 000b 	add.w	r0, r4, #11
 800a512:	1d23      	adds	r3, r4, #4
 800a514:	f020 0007 	bic.w	r0, r0, #7
 800a518:	1ac2      	subs	r2, r0, r3
 800a51a:	bf1c      	itt	ne
 800a51c:	1a1b      	subne	r3, r3, r0
 800a51e:	50a3      	strne	r3, [r4, r2]
 800a520:	e7af      	b.n	800a482 <_malloc_r+0x22>
 800a522:	6862      	ldr	r2, [r4, #4]
 800a524:	42a3      	cmp	r3, r4
 800a526:	bf0c      	ite	eq
 800a528:	f8c8 2000 	streq.w	r2, [r8]
 800a52c:	605a      	strne	r2, [r3, #4]
 800a52e:	e7eb      	b.n	800a508 <_malloc_r+0xa8>
 800a530:	4623      	mov	r3, r4
 800a532:	6864      	ldr	r4, [r4, #4]
 800a534:	e7ae      	b.n	800a494 <_malloc_r+0x34>
 800a536:	463c      	mov	r4, r7
 800a538:	687f      	ldr	r7, [r7, #4]
 800a53a:	e7b6      	b.n	800a4aa <_malloc_r+0x4a>
 800a53c:	461a      	mov	r2, r3
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	42a3      	cmp	r3, r4
 800a542:	d1fb      	bne.n	800a53c <_malloc_r+0xdc>
 800a544:	2300      	movs	r3, #0
 800a546:	6053      	str	r3, [r2, #4]
 800a548:	e7de      	b.n	800a508 <_malloc_r+0xa8>
 800a54a:	230c      	movs	r3, #12
 800a54c:	6033      	str	r3, [r6, #0]
 800a54e:	4630      	mov	r0, r6
 800a550:	f000 f80c 	bl	800a56c <__malloc_unlock>
 800a554:	e794      	b.n	800a480 <_malloc_r+0x20>
 800a556:	6005      	str	r5, [r0, #0]
 800a558:	e7d6      	b.n	800a508 <_malloc_r+0xa8>
 800a55a:	bf00      	nop
 800a55c:	2000031c 	.word	0x2000031c

0800a560 <__malloc_lock>:
 800a560:	4801      	ldr	r0, [pc, #4]	@ (800a568 <__malloc_lock+0x8>)
 800a562:	f000 ba4c 	b.w	800a9fe <__retarget_lock_acquire_recursive>
 800a566:	bf00      	nop
 800a568:	2000045c 	.word	0x2000045c

0800a56c <__malloc_unlock>:
 800a56c:	4801      	ldr	r0, [pc, #4]	@ (800a574 <__malloc_unlock+0x8>)
 800a56e:	f000 ba47 	b.w	800aa00 <__retarget_lock_release_recursive>
 800a572:	bf00      	nop
 800a574:	2000045c 	.word	0x2000045c

0800a578 <siprintf>:
 800a578:	b40e      	push	{r1, r2, r3}
 800a57a:	b510      	push	{r4, lr}
 800a57c:	b09d      	sub	sp, #116	@ 0x74
 800a57e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a580:	9002      	str	r0, [sp, #8]
 800a582:	9006      	str	r0, [sp, #24]
 800a584:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a588:	480a      	ldr	r0, [pc, #40]	@ (800a5b4 <siprintf+0x3c>)
 800a58a:	9107      	str	r1, [sp, #28]
 800a58c:	9104      	str	r1, [sp, #16]
 800a58e:	490a      	ldr	r1, [pc, #40]	@ (800a5b8 <siprintf+0x40>)
 800a590:	f853 2b04 	ldr.w	r2, [r3], #4
 800a594:	9105      	str	r1, [sp, #20]
 800a596:	2400      	movs	r4, #0
 800a598:	a902      	add	r1, sp, #8
 800a59a:	6800      	ldr	r0, [r0, #0]
 800a59c:	9301      	str	r3, [sp, #4]
 800a59e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a5a0:	f000 fafc 	bl	800ab9c <_svfiprintf_r>
 800a5a4:	9b02      	ldr	r3, [sp, #8]
 800a5a6:	701c      	strb	r4, [r3, #0]
 800a5a8:	b01d      	add	sp, #116	@ 0x74
 800a5aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5ae:	b003      	add	sp, #12
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	20000014 	.word	0x20000014
 800a5b8:	ffff0208 	.word	0xffff0208

0800a5bc <siscanf>:
 800a5bc:	b40e      	push	{r1, r2, r3}
 800a5be:	b570      	push	{r4, r5, r6, lr}
 800a5c0:	b09d      	sub	sp, #116	@ 0x74
 800a5c2:	ac21      	add	r4, sp, #132	@ 0x84
 800a5c4:	2500      	movs	r5, #0
 800a5c6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a5ca:	f854 6b04 	ldr.w	r6, [r4], #4
 800a5ce:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a5d2:	951b      	str	r5, [sp, #108]	@ 0x6c
 800a5d4:	9002      	str	r0, [sp, #8]
 800a5d6:	9006      	str	r0, [sp, #24]
 800a5d8:	f7f5 fdda 	bl	8000190 <strlen>
 800a5dc:	4b0b      	ldr	r3, [pc, #44]	@ (800a60c <siscanf+0x50>)
 800a5de:	9003      	str	r0, [sp, #12]
 800a5e0:	9007      	str	r0, [sp, #28]
 800a5e2:	480b      	ldr	r0, [pc, #44]	@ (800a610 <siscanf+0x54>)
 800a5e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a5ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a5ee:	4632      	mov	r2, r6
 800a5f0:	4623      	mov	r3, r4
 800a5f2:	a902      	add	r1, sp, #8
 800a5f4:	6800      	ldr	r0, [r0, #0]
 800a5f6:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a5f8:	9514      	str	r5, [sp, #80]	@ 0x50
 800a5fa:	9401      	str	r4, [sp, #4]
 800a5fc:	f000 fc24 	bl	800ae48 <__ssvfiscanf_r>
 800a600:	b01d      	add	sp, #116	@ 0x74
 800a602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a606:	b003      	add	sp, #12
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	0800a637 	.word	0x0800a637
 800a610:	20000014 	.word	0x20000014

0800a614 <__sread>:
 800a614:	b510      	push	{r4, lr}
 800a616:	460c      	mov	r4, r1
 800a618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a61c:	f000 f990 	bl	800a940 <_read_r>
 800a620:	2800      	cmp	r0, #0
 800a622:	bfab      	itete	ge
 800a624:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a626:	89a3      	ldrhlt	r3, [r4, #12]
 800a628:	181b      	addge	r3, r3, r0
 800a62a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a62e:	bfac      	ite	ge
 800a630:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a632:	81a3      	strhlt	r3, [r4, #12]
 800a634:	bd10      	pop	{r4, pc}

0800a636 <__seofread>:
 800a636:	2000      	movs	r0, #0
 800a638:	4770      	bx	lr

0800a63a <__swrite>:
 800a63a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a63e:	461f      	mov	r7, r3
 800a640:	898b      	ldrh	r3, [r1, #12]
 800a642:	05db      	lsls	r3, r3, #23
 800a644:	4605      	mov	r5, r0
 800a646:	460c      	mov	r4, r1
 800a648:	4616      	mov	r6, r2
 800a64a:	d505      	bpl.n	800a658 <__swrite+0x1e>
 800a64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a650:	2302      	movs	r3, #2
 800a652:	2200      	movs	r2, #0
 800a654:	f000 f962 	bl	800a91c <_lseek_r>
 800a658:	89a3      	ldrh	r3, [r4, #12]
 800a65a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a65e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a662:	81a3      	strh	r3, [r4, #12]
 800a664:	4632      	mov	r2, r6
 800a666:	463b      	mov	r3, r7
 800a668:	4628      	mov	r0, r5
 800a66a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a66e:	f000 b989 	b.w	800a984 <_write_r>

0800a672 <__sseek>:
 800a672:	b510      	push	{r4, lr}
 800a674:	460c      	mov	r4, r1
 800a676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a67a:	f000 f94f 	bl	800a91c <_lseek_r>
 800a67e:	1c43      	adds	r3, r0, #1
 800a680:	89a3      	ldrh	r3, [r4, #12]
 800a682:	bf15      	itete	ne
 800a684:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a686:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a68a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a68e:	81a3      	strheq	r3, [r4, #12]
 800a690:	bf18      	it	ne
 800a692:	81a3      	strhne	r3, [r4, #12]
 800a694:	bd10      	pop	{r4, pc}

0800a696 <__sclose>:
 800a696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a69a:	f000 b9b3 	b.w	800aa04 <_close_r>
	...

0800a6a0 <std>:
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	b510      	push	{r4, lr}
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	e9c0 3300 	strd	r3, r3, [r0]
 800a6aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6ae:	6083      	str	r3, [r0, #8]
 800a6b0:	8181      	strh	r1, [r0, #12]
 800a6b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a6b4:	81c2      	strh	r2, [r0, #14]
 800a6b6:	6183      	str	r3, [r0, #24]
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	2208      	movs	r2, #8
 800a6bc:	305c      	adds	r0, #92	@ 0x5c
 800a6be:	f000 f8e5 	bl	800a88c <memset>
 800a6c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a6f8 <std+0x58>)
 800a6c4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a6c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a6fc <std+0x5c>)
 800a6c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a6ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a700 <std+0x60>)
 800a6cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a6ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a704 <std+0x64>)
 800a6d0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a6d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a708 <std+0x68>)
 800a6d4:	6224      	str	r4, [r4, #32]
 800a6d6:	429c      	cmp	r4, r3
 800a6d8:	d006      	beq.n	800a6e8 <std+0x48>
 800a6da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a6de:	4294      	cmp	r4, r2
 800a6e0:	d002      	beq.n	800a6e8 <std+0x48>
 800a6e2:	33d0      	adds	r3, #208	@ 0xd0
 800a6e4:	429c      	cmp	r4, r3
 800a6e6:	d105      	bne.n	800a6f4 <std+0x54>
 800a6e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a6ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6f0:	f000 b984 	b.w	800a9fc <__retarget_lock_init_recursive>
 800a6f4:	bd10      	pop	{r4, pc}
 800a6f6:	bf00      	nop
 800a6f8:	0800a615 	.word	0x0800a615
 800a6fc:	0800a63b 	.word	0x0800a63b
 800a700:	0800a673 	.word	0x0800a673
 800a704:	0800a697 	.word	0x0800a697
 800a708:	20000320 	.word	0x20000320

0800a70c <stdio_exit_handler>:
 800a70c:	4a02      	ldr	r2, [pc, #8]	@ (800a718 <stdio_exit_handler+0xc>)
 800a70e:	4903      	ldr	r1, [pc, #12]	@ (800a71c <stdio_exit_handler+0x10>)
 800a710:	4803      	ldr	r0, [pc, #12]	@ (800a720 <stdio_exit_handler+0x14>)
 800a712:	f000 b87b 	b.w	800a80c <_fwalk_sglue>
 800a716:	bf00      	nop
 800a718:	20000008 	.word	0x20000008
 800a71c:	0800bae9 	.word	0x0800bae9
 800a720:	20000018 	.word	0x20000018

0800a724 <cleanup_stdio>:
 800a724:	6841      	ldr	r1, [r0, #4]
 800a726:	4b0c      	ldr	r3, [pc, #48]	@ (800a758 <cleanup_stdio+0x34>)
 800a728:	4299      	cmp	r1, r3
 800a72a:	b510      	push	{r4, lr}
 800a72c:	4604      	mov	r4, r0
 800a72e:	d001      	beq.n	800a734 <cleanup_stdio+0x10>
 800a730:	f001 f9da 	bl	800bae8 <_fflush_r>
 800a734:	68a1      	ldr	r1, [r4, #8]
 800a736:	4b09      	ldr	r3, [pc, #36]	@ (800a75c <cleanup_stdio+0x38>)
 800a738:	4299      	cmp	r1, r3
 800a73a:	d002      	beq.n	800a742 <cleanup_stdio+0x1e>
 800a73c:	4620      	mov	r0, r4
 800a73e:	f001 f9d3 	bl	800bae8 <_fflush_r>
 800a742:	68e1      	ldr	r1, [r4, #12]
 800a744:	4b06      	ldr	r3, [pc, #24]	@ (800a760 <cleanup_stdio+0x3c>)
 800a746:	4299      	cmp	r1, r3
 800a748:	d004      	beq.n	800a754 <cleanup_stdio+0x30>
 800a74a:	4620      	mov	r0, r4
 800a74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a750:	f001 b9ca 	b.w	800bae8 <_fflush_r>
 800a754:	bd10      	pop	{r4, pc}
 800a756:	bf00      	nop
 800a758:	20000320 	.word	0x20000320
 800a75c:	20000388 	.word	0x20000388
 800a760:	200003f0 	.word	0x200003f0

0800a764 <global_stdio_init.part.0>:
 800a764:	b510      	push	{r4, lr}
 800a766:	4b0b      	ldr	r3, [pc, #44]	@ (800a794 <global_stdio_init.part.0+0x30>)
 800a768:	4c0b      	ldr	r4, [pc, #44]	@ (800a798 <global_stdio_init.part.0+0x34>)
 800a76a:	4a0c      	ldr	r2, [pc, #48]	@ (800a79c <global_stdio_init.part.0+0x38>)
 800a76c:	601a      	str	r2, [r3, #0]
 800a76e:	4620      	mov	r0, r4
 800a770:	2200      	movs	r2, #0
 800a772:	2104      	movs	r1, #4
 800a774:	f7ff ff94 	bl	800a6a0 <std>
 800a778:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a77c:	2201      	movs	r2, #1
 800a77e:	2109      	movs	r1, #9
 800a780:	f7ff ff8e 	bl	800a6a0 <std>
 800a784:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a788:	2202      	movs	r2, #2
 800a78a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a78e:	2112      	movs	r1, #18
 800a790:	f7ff bf86 	b.w	800a6a0 <std>
 800a794:	20000458 	.word	0x20000458
 800a798:	20000320 	.word	0x20000320
 800a79c:	0800a70d 	.word	0x0800a70d

0800a7a0 <__sfp_lock_acquire>:
 800a7a0:	4801      	ldr	r0, [pc, #4]	@ (800a7a8 <__sfp_lock_acquire+0x8>)
 800a7a2:	f000 b92c 	b.w	800a9fe <__retarget_lock_acquire_recursive>
 800a7a6:	bf00      	nop
 800a7a8:	2000045d 	.word	0x2000045d

0800a7ac <__sfp_lock_release>:
 800a7ac:	4801      	ldr	r0, [pc, #4]	@ (800a7b4 <__sfp_lock_release+0x8>)
 800a7ae:	f000 b927 	b.w	800aa00 <__retarget_lock_release_recursive>
 800a7b2:	bf00      	nop
 800a7b4:	2000045d 	.word	0x2000045d

0800a7b8 <__sinit>:
 800a7b8:	b510      	push	{r4, lr}
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	f7ff fff0 	bl	800a7a0 <__sfp_lock_acquire>
 800a7c0:	6a23      	ldr	r3, [r4, #32]
 800a7c2:	b11b      	cbz	r3, 800a7cc <__sinit+0x14>
 800a7c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7c8:	f7ff bff0 	b.w	800a7ac <__sfp_lock_release>
 800a7cc:	4b04      	ldr	r3, [pc, #16]	@ (800a7e0 <__sinit+0x28>)
 800a7ce:	6223      	str	r3, [r4, #32]
 800a7d0:	4b04      	ldr	r3, [pc, #16]	@ (800a7e4 <__sinit+0x2c>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d1f5      	bne.n	800a7c4 <__sinit+0xc>
 800a7d8:	f7ff ffc4 	bl	800a764 <global_stdio_init.part.0>
 800a7dc:	e7f2      	b.n	800a7c4 <__sinit+0xc>
 800a7de:	bf00      	nop
 800a7e0:	0800a725 	.word	0x0800a725
 800a7e4:	20000458 	.word	0x20000458

0800a7e8 <fiprintf>:
 800a7e8:	b40e      	push	{r1, r2, r3}
 800a7ea:	b503      	push	{r0, r1, lr}
 800a7ec:	4601      	mov	r1, r0
 800a7ee:	ab03      	add	r3, sp, #12
 800a7f0:	4805      	ldr	r0, [pc, #20]	@ (800a808 <fiprintf+0x20>)
 800a7f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7f6:	6800      	ldr	r0, [r0, #0]
 800a7f8:	9301      	str	r3, [sp, #4]
 800a7fa:	f000 fcc5 	bl	800b188 <_vfiprintf_r>
 800a7fe:	b002      	add	sp, #8
 800a800:	f85d eb04 	ldr.w	lr, [sp], #4
 800a804:	b003      	add	sp, #12
 800a806:	4770      	bx	lr
 800a808:	20000014 	.word	0x20000014

0800a80c <_fwalk_sglue>:
 800a80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a810:	4607      	mov	r7, r0
 800a812:	4688      	mov	r8, r1
 800a814:	4614      	mov	r4, r2
 800a816:	2600      	movs	r6, #0
 800a818:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a81c:	f1b9 0901 	subs.w	r9, r9, #1
 800a820:	d505      	bpl.n	800a82e <_fwalk_sglue+0x22>
 800a822:	6824      	ldr	r4, [r4, #0]
 800a824:	2c00      	cmp	r4, #0
 800a826:	d1f7      	bne.n	800a818 <_fwalk_sglue+0xc>
 800a828:	4630      	mov	r0, r6
 800a82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a82e:	89ab      	ldrh	r3, [r5, #12]
 800a830:	2b01      	cmp	r3, #1
 800a832:	d907      	bls.n	800a844 <_fwalk_sglue+0x38>
 800a834:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a838:	3301      	adds	r3, #1
 800a83a:	d003      	beq.n	800a844 <_fwalk_sglue+0x38>
 800a83c:	4629      	mov	r1, r5
 800a83e:	4638      	mov	r0, r7
 800a840:	47c0      	blx	r8
 800a842:	4306      	orrs	r6, r0
 800a844:	3568      	adds	r5, #104	@ 0x68
 800a846:	e7e9      	b.n	800a81c <_fwalk_sglue+0x10>

0800a848 <iprintf>:
 800a848:	b40f      	push	{r0, r1, r2, r3}
 800a84a:	b507      	push	{r0, r1, r2, lr}
 800a84c:	4906      	ldr	r1, [pc, #24]	@ (800a868 <iprintf+0x20>)
 800a84e:	ab04      	add	r3, sp, #16
 800a850:	6808      	ldr	r0, [r1, #0]
 800a852:	f853 2b04 	ldr.w	r2, [r3], #4
 800a856:	6881      	ldr	r1, [r0, #8]
 800a858:	9301      	str	r3, [sp, #4]
 800a85a:	f000 fc95 	bl	800b188 <_vfiprintf_r>
 800a85e:	b003      	add	sp, #12
 800a860:	f85d eb04 	ldr.w	lr, [sp], #4
 800a864:	b004      	add	sp, #16
 800a866:	4770      	bx	lr
 800a868:	20000014 	.word	0x20000014

0800a86c <memcmp>:
 800a86c:	b510      	push	{r4, lr}
 800a86e:	3901      	subs	r1, #1
 800a870:	4402      	add	r2, r0
 800a872:	4290      	cmp	r0, r2
 800a874:	d101      	bne.n	800a87a <memcmp+0xe>
 800a876:	2000      	movs	r0, #0
 800a878:	e005      	b.n	800a886 <memcmp+0x1a>
 800a87a:	7803      	ldrb	r3, [r0, #0]
 800a87c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a880:	42a3      	cmp	r3, r4
 800a882:	d001      	beq.n	800a888 <memcmp+0x1c>
 800a884:	1b18      	subs	r0, r3, r4
 800a886:	bd10      	pop	{r4, pc}
 800a888:	3001      	adds	r0, #1
 800a88a:	e7f2      	b.n	800a872 <memcmp+0x6>

0800a88c <memset>:
 800a88c:	4402      	add	r2, r0
 800a88e:	4603      	mov	r3, r0
 800a890:	4293      	cmp	r3, r2
 800a892:	d100      	bne.n	800a896 <memset+0xa>
 800a894:	4770      	bx	lr
 800a896:	f803 1b01 	strb.w	r1, [r3], #1
 800a89a:	e7f9      	b.n	800a890 <memset+0x4>

0800a89c <strchr>:
 800a89c:	b2c9      	uxtb	r1, r1
 800a89e:	4603      	mov	r3, r0
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8a6:	b112      	cbz	r2, 800a8ae <strchr+0x12>
 800a8a8:	428a      	cmp	r2, r1
 800a8aa:	d1f9      	bne.n	800a8a0 <strchr+0x4>
 800a8ac:	4770      	bx	lr
 800a8ae:	2900      	cmp	r1, #0
 800a8b0:	bf18      	it	ne
 800a8b2:	2000      	movne	r0, #0
 800a8b4:	4770      	bx	lr

0800a8b6 <strcspn>:
 800a8b6:	b570      	push	{r4, r5, r6, lr}
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	461e      	mov	r6, r3
 800a8bc:	f813 4b01 	ldrb.w	r4, [r3], #1
 800a8c0:	b144      	cbz	r4, 800a8d4 <strcspn+0x1e>
 800a8c2:	1e4a      	subs	r2, r1, #1
 800a8c4:	e001      	b.n	800a8ca <strcspn+0x14>
 800a8c6:	42a5      	cmp	r5, r4
 800a8c8:	d004      	beq.n	800a8d4 <strcspn+0x1e>
 800a8ca:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a8ce:	2d00      	cmp	r5, #0
 800a8d0:	d1f9      	bne.n	800a8c6 <strcspn+0x10>
 800a8d2:	e7f2      	b.n	800a8ba <strcspn+0x4>
 800a8d4:	1a30      	subs	r0, r6, r0
 800a8d6:	bd70      	pop	{r4, r5, r6, pc}

0800a8d8 <strncmp>:
 800a8d8:	b510      	push	{r4, lr}
 800a8da:	b16a      	cbz	r2, 800a8f8 <strncmp+0x20>
 800a8dc:	3901      	subs	r1, #1
 800a8de:	1884      	adds	r4, r0, r2
 800a8e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d103      	bne.n	800a8f4 <strncmp+0x1c>
 800a8ec:	42a0      	cmp	r0, r4
 800a8ee:	d001      	beq.n	800a8f4 <strncmp+0x1c>
 800a8f0:	2a00      	cmp	r2, #0
 800a8f2:	d1f5      	bne.n	800a8e0 <strncmp+0x8>
 800a8f4:	1ad0      	subs	r0, r2, r3
 800a8f6:	bd10      	pop	{r4, pc}
 800a8f8:	4610      	mov	r0, r2
 800a8fa:	e7fc      	b.n	800a8f6 <strncmp+0x1e>

0800a8fc <strspn>:
 800a8fc:	b570      	push	{r4, r5, r6, lr}
 800a8fe:	4603      	mov	r3, r0
 800a900:	461e      	mov	r6, r3
 800a902:	f813 4b01 	ldrb.w	r4, [r3], #1
 800a906:	b13c      	cbz	r4, 800a918 <strspn+0x1c>
 800a908:	1e4a      	subs	r2, r1, #1
 800a90a:	e001      	b.n	800a910 <strspn+0x14>
 800a90c:	42a5      	cmp	r5, r4
 800a90e:	d0f7      	beq.n	800a900 <strspn+0x4>
 800a910:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a914:	2d00      	cmp	r5, #0
 800a916:	d1f9      	bne.n	800a90c <strspn+0x10>
 800a918:	1a30      	subs	r0, r6, r0
 800a91a:	bd70      	pop	{r4, r5, r6, pc}

0800a91c <_lseek_r>:
 800a91c:	b538      	push	{r3, r4, r5, lr}
 800a91e:	4d07      	ldr	r5, [pc, #28]	@ (800a93c <_lseek_r+0x20>)
 800a920:	4604      	mov	r4, r0
 800a922:	4608      	mov	r0, r1
 800a924:	4611      	mov	r1, r2
 800a926:	2200      	movs	r2, #0
 800a928:	602a      	str	r2, [r5, #0]
 800a92a:	461a      	mov	r2, r3
 800a92c:	f7f7 fa31 	bl	8001d92 <_lseek>
 800a930:	1c43      	adds	r3, r0, #1
 800a932:	d102      	bne.n	800a93a <_lseek_r+0x1e>
 800a934:	682b      	ldr	r3, [r5, #0]
 800a936:	b103      	cbz	r3, 800a93a <_lseek_r+0x1e>
 800a938:	6023      	str	r3, [r4, #0]
 800a93a:	bd38      	pop	{r3, r4, r5, pc}
 800a93c:	20000460 	.word	0x20000460

0800a940 <_read_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4d07      	ldr	r5, [pc, #28]	@ (800a960 <_read_r+0x20>)
 800a944:	4604      	mov	r4, r0
 800a946:	4608      	mov	r0, r1
 800a948:	4611      	mov	r1, r2
 800a94a:	2200      	movs	r2, #0
 800a94c:	602a      	str	r2, [r5, #0]
 800a94e:	461a      	mov	r2, r3
 800a950:	f7f7 f9bf 	bl	8001cd2 <_read>
 800a954:	1c43      	adds	r3, r0, #1
 800a956:	d102      	bne.n	800a95e <_read_r+0x1e>
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	b103      	cbz	r3, 800a95e <_read_r+0x1e>
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	bd38      	pop	{r3, r4, r5, pc}
 800a960:	20000460 	.word	0x20000460

0800a964 <_sbrk_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	4d06      	ldr	r5, [pc, #24]	@ (800a980 <_sbrk_r+0x1c>)
 800a968:	2300      	movs	r3, #0
 800a96a:	4604      	mov	r4, r0
 800a96c:	4608      	mov	r0, r1
 800a96e:	602b      	str	r3, [r5, #0]
 800a970:	f7f7 fa1c 	bl	8001dac <_sbrk>
 800a974:	1c43      	adds	r3, r0, #1
 800a976:	d102      	bne.n	800a97e <_sbrk_r+0x1a>
 800a978:	682b      	ldr	r3, [r5, #0]
 800a97a:	b103      	cbz	r3, 800a97e <_sbrk_r+0x1a>
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	bd38      	pop	{r3, r4, r5, pc}
 800a980:	20000460 	.word	0x20000460

0800a984 <_write_r>:
 800a984:	b538      	push	{r3, r4, r5, lr}
 800a986:	4d07      	ldr	r5, [pc, #28]	@ (800a9a4 <_write_r+0x20>)
 800a988:	4604      	mov	r4, r0
 800a98a:	4608      	mov	r0, r1
 800a98c:	4611      	mov	r1, r2
 800a98e:	2200      	movs	r2, #0
 800a990:	602a      	str	r2, [r5, #0]
 800a992:	461a      	mov	r2, r3
 800a994:	f7f7 f9ba 	bl	8001d0c <_write>
 800a998:	1c43      	adds	r3, r0, #1
 800a99a:	d102      	bne.n	800a9a2 <_write_r+0x1e>
 800a99c:	682b      	ldr	r3, [r5, #0]
 800a99e:	b103      	cbz	r3, 800a9a2 <_write_r+0x1e>
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	bd38      	pop	{r3, r4, r5, pc}
 800a9a4:	20000460 	.word	0x20000460

0800a9a8 <__errno>:
 800a9a8:	4b01      	ldr	r3, [pc, #4]	@ (800a9b0 <__errno+0x8>)
 800a9aa:	6818      	ldr	r0, [r3, #0]
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop
 800a9b0:	20000014 	.word	0x20000014

0800a9b4 <__libc_init_array>:
 800a9b4:	b570      	push	{r4, r5, r6, lr}
 800a9b6:	4d0d      	ldr	r5, [pc, #52]	@ (800a9ec <__libc_init_array+0x38>)
 800a9b8:	4c0d      	ldr	r4, [pc, #52]	@ (800a9f0 <__libc_init_array+0x3c>)
 800a9ba:	1b64      	subs	r4, r4, r5
 800a9bc:	10a4      	asrs	r4, r4, #2
 800a9be:	2600      	movs	r6, #0
 800a9c0:	42a6      	cmp	r6, r4
 800a9c2:	d109      	bne.n	800a9d8 <__libc_init_array+0x24>
 800a9c4:	4d0b      	ldr	r5, [pc, #44]	@ (800a9f4 <__libc_init_array+0x40>)
 800a9c6:	4c0c      	ldr	r4, [pc, #48]	@ (800a9f8 <__libc_init_array+0x44>)
 800a9c8:	f001 fb9c 	bl	800c104 <_init>
 800a9cc:	1b64      	subs	r4, r4, r5
 800a9ce:	10a4      	asrs	r4, r4, #2
 800a9d0:	2600      	movs	r6, #0
 800a9d2:	42a6      	cmp	r6, r4
 800a9d4:	d105      	bne.n	800a9e2 <__libc_init_array+0x2e>
 800a9d6:	bd70      	pop	{r4, r5, r6, pc}
 800a9d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9dc:	4798      	blx	r3
 800a9de:	3601      	adds	r6, #1
 800a9e0:	e7ee      	b.n	800a9c0 <__libc_init_array+0xc>
 800a9e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9e6:	4798      	blx	r3
 800a9e8:	3601      	adds	r6, #1
 800a9ea:	e7f2      	b.n	800a9d2 <__libc_init_array+0x1e>
 800a9ec:	0800d2b4 	.word	0x0800d2b4
 800a9f0:	0800d2b4 	.word	0x0800d2b4
 800a9f4:	0800d2b4 	.word	0x0800d2b4
 800a9f8:	0800d2b8 	.word	0x0800d2b8

0800a9fc <__retarget_lock_init_recursive>:
 800a9fc:	4770      	bx	lr

0800a9fe <__retarget_lock_acquire_recursive>:
 800a9fe:	4770      	bx	lr

0800aa00 <__retarget_lock_release_recursive>:
 800aa00:	4770      	bx	lr
	...

0800aa04 <_close_r>:
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	4d06      	ldr	r5, [pc, #24]	@ (800aa20 <_close_r+0x1c>)
 800aa08:	2300      	movs	r3, #0
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	4608      	mov	r0, r1
 800aa0e:	602b      	str	r3, [r5, #0]
 800aa10:	f7f7 f998 	bl	8001d44 <_close>
 800aa14:	1c43      	adds	r3, r0, #1
 800aa16:	d102      	bne.n	800aa1e <_close_r+0x1a>
 800aa18:	682b      	ldr	r3, [r5, #0]
 800aa1a:	b103      	cbz	r3, 800aa1e <_close_r+0x1a>
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	bd38      	pop	{r3, r4, r5, pc}
 800aa20:	20000460 	.word	0x20000460

0800aa24 <memcpy>:
 800aa24:	440a      	add	r2, r1
 800aa26:	4291      	cmp	r1, r2
 800aa28:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800aa2c:	d100      	bne.n	800aa30 <memcpy+0xc>
 800aa2e:	4770      	bx	lr
 800aa30:	b510      	push	{r4, lr}
 800aa32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa3a:	4291      	cmp	r1, r2
 800aa3c:	d1f9      	bne.n	800aa32 <memcpy+0xe>
 800aa3e:	bd10      	pop	{r4, pc}

0800aa40 <abort>:
 800aa40:	b508      	push	{r3, lr}
 800aa42:	2006      	movs	r0, #6
 800aa44:	f001 fb04 	bl	800c050 <raise>
 800aa48:	2001      	movs	r0, #1
 800aa4a:	f7f7 f937 	bl	8001cbc <_exit>
	...

0800aa50 <_free_r>:
 800aa50:	b538      	push	{r3, r4, r5, lr}
 800aa52:	4605      	mov	r5, r0
 800aa54:	2900      	cmp	r1, #0
 800aa56:	d041      	beq.n	800aadc <_free_r+0x8c>
 800aa58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa5c:	1f0c      	subs	r4, r1, #4
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	bfb8      	it	lt
 800aa62:	18e4      	addlt	r4, r4, r3
 800aa64:	f7ff fd7c 	bl	800a560 <__malloc_lock>
 800aa68:	4a1d      	ldr	r2, [pc, #116]	@ (800aae0 <_free_r+0x90>)
 800aa6a:	6813      	ldr	r3, [r2, #0]
 800aa6c:	b933      	cbnz	r3, 800aa7c <_free_r+0x2c>
 800aa6e:	6063      	str	r3, [r4, #4]
 800aa70:	6014      	str	r4, [r2, #0]
 800aa72:	4628      	mov	r0, r5
 800aa74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa78:	f7ff bd78 	b.w	800a56c <__malloc_unlock>
 800aa7c:	42a3      	cmp	r3, r4
 800aa7e:	d908      	bls.n	800aa92 <_free_r+0x42>
 800aa80:	6820      	ldr	r0, [r4, #0]
 800aa82:	1821      	adds	r1, r4, r0
 800aa84:	428b      	cmp	r3, r1
 800aa86:	bf01      	itttt	eq
 800aa88:	6819      	ldreq	r1, [r3, #0]
 800aa8a:	685b      	ldreq	r3, [r3, #4]
 800aa8c:	1809      	addeq	r1, r1, r0
 800aa8e:	6021      	streq	r1, [r4, #0]
 800aa90:	e7ed      	b.n	800aa6e <_free_r+0x1e>
 800aa92:	461a      	mov	r2, r3
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	b10b      	cbz	r3, 800aa9c <_free_r+0x4c>
 800aa98:	42a3      	cmp	r3, r4
 800aa9a:	d9fa      	bls.n	800aa92 <_free_r+0x42>
 800aa9c:	6811      	ldr	r1, [r2, #0]
 800aa9e:	1850      	adds	r0, r2, r1
 800aaa0:	42a0      	cmp	r0, r4
 800aaa2:	d10b      	bne.n	800aabc <_free_r+0x6c>
 800aaa4:	6820      	ldr	r0, [r4, #0]
 800aaa6:	4401      	add	r1, r0
 800aaa8:	1850      	adds	r0, r2, r1
 800aaaa:	4283      	cmp	r3, r0
 800aaac:	6011      	str	r1, [r2, #0]
 800aaae:	d1e0      	bne.n	800aa72 <_free_r+0x22>
 800aab0:	6818      	ldr	r0, [r3, #0]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	6053      	str	r3, [r2, #4]
 800aab6:	4408      	add	r0, r1
 800aab8:	6010      	str	r0, [r2, #0]
 800aaba:	e7da      	b.n	800aa72 <_free_r+0x22>
 800aabc:	d902      	bls.n	800aac4 <_free_r+0x74>
 800aabe:	230c      	movs	r3, #12
 800aac0:	602b      	str	r3, [r5, #0]
 800aac2:	e7d6      	b.n	800aa72 <_free_r+0x22>
 800aac4:	6820      	ldr	r0, [r4, #0]
 800aac6:	1821      	adds	r1, r4, r0
 800aac8:	428b      	cmp	r3, r1
 800aaca:	bf04      	itt	eq
 800aacc:	6819      	ldreq	r1, [r3, #0]
 800aace:	685b      	ldreq	r3, [r3, #4]
 800aad0:	6063      	str	r3, [r4, #4]
 800aad2:	bf04      	itt	eq
 800aad4:	1809      	addeq	r1, r1, r0
 800aad6:	6021      	streq	r1, [r4, #0]
 800aad8:	6054      	str	r4, [r2, #4]
 800aada:	e7ca      	b.n	800aa72 <_free_r+0x22>
 800aadc:	bd38      	pop	{r3, r4, r5, pc}
 800aade:	bf00      	nop
 800aae0:	2000031c 	.word	0x2000031c

0800aae4 <__ssputs_r>:
 800aae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aae8:	688e      	ldr	r6, [r1, #8]
 800aaea:	461f      	mov	r7, r3
 800aaec:	42be      	cmp	r6, r7
 800aaee:	680b      	ldr	r3, [r1, #0]
 800aaf0:	4682      	mov	sl, r0
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	4690      	mov	r8, r2
 800aaf6:	d82d      	bhi.n	800ab54 <__ssputs_r+0x70>
 800aaf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aafc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ab00:	d026      	beq.n	800ab50 <__ssputs_r+0x6c>
 800ab02:	6965      	ldr	r5, [r4, #20]
 800ab04:	6909      	ldr	r1, [r1, #16]
 800ab06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab0a:	eba3 0901 	sub.w	r9, r3, r1
 800ab0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab12:	1c7b      	adds	r3, r7, #1
 800ab14:	444b      	add	r3, r9
 800ab16:	106d      	asrs	r5, r5, #1
 800ab18:	429d      	cmp	r5, r3
 800ab1a:	bf38      	it	cc
 800ab1c:	461d      	movcc	r5, r3
 800ab1e:	0553      	lsls	r3, r2, #21
 800ab20:	d527      	bpl.n	800ab72 <__ssputs_r+0x8e>
 800ab22:	4629      	mov	r1, r5
 800ab24:	f7ff fc9c 	bl	800a460 <_malloc_r>
 800ab28:	4606      	mov	r6, r0
 800ab2a:	b360      	cbz	r0, 800ab86 <__ssputs_r+0xa2>
 800ab2c:	6921      	ldr	r1, [r4, #16]
 800ab2e:	464a      	mov	r2, r9
 800ab30:	f7ff ff78 	bl	800aa24 <memcpy>
 800ab34:	89a3      	ldrh	r3, [r4, #12]
 800ab36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ab3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab3e:	81a3      	strh	r3, [r4, #12]
 800ab40:	6126      	str	r6, [r4, #16]
 800ab42:	6165      	str	r5, [r4, #20]
 800ab44:	444e      	add	r6, r9
 800ab46:	eba5 0509 	sub.w	r5, r5, r9
 800ab4a:	6026      	str	r6, [r4, #0]
 800ab4c:	60a5      	str	r5, [r4, #8]
 800ab4e:	463e      	mov	r6, r7
 800ab50:	42be      	cmp	r6, r7
 800ab52:	d900      	bls.n	800ab56 <__ssputs_r+0x72>
 800ab54:	463e      	mov	r6, r7
 800ab56:	6820      	ldr	r0, [r4, #0]
 800ab58:	4632      	mov	r2, r6
 800ab5a:	4641      	mov	r1, r8
 800ab5c:	f001 fa36 	bl	800bfcc <memmove>
 800ab60:	68a3      	ldr	r3, [r4, #8]
 800ab62:	1b9b      	subs	r3, r3, r6
 800ab64:	60a3      	str	r3, [r4, #8]
 800ab66:	6823      	ldr	r3, [r4, #0]
 800ab68:	4433      	add	r3, r6
 800ab6a:	6023      	str	r3, [r4, #0]
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab72:	462a      	mov	r2, r5
 800ab74:	f001 f81a 	bl	800bbac <_realloc_r>
 800ab78:	4606      	mov	r6, r0
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	d1e0      	bne.n	800ab40 <__ssputs_r+0x5c>
 800ab7e:	6921      	ldr	r1, [r4, #16]
 800ab80:	4650      	mov	r0, sl
 800ab82:	f7ff ff65 	bl	800aa50 <_free_r>
 800ab86:	230c      	movs	r3, #12
 800ab88:	f8ca 3000 	str.w	r3, [sl]
 800ab8c:	89a3      	ldrh	r3, [r4, #12]
 800ab8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab92:	81a3      	strh	r3, [r4, #12]
 800ab94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab98:	e7e9      	b.n	800ab6e <__ssputs_r+0x8a>
	...

0800ab9c <_svfiprintf_r>:
 800ab9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba0:	4698      	mov	r8, r3
 800aba2:	898b      	ldrh	r3, [r1, #12]
 800aba4:	061b      	lsls	r3, r3, #24
 800aba6:	b09d      	sub	sp, #116	@ 0x74
 800aba8:	4607      	mov	r7, r0
 800abaa:	460d      	mov	r5, r1
 800abac:	4614      	mov	r4, r2
 800abae:	d510      	bpl.n	800abd2 <_svfiprintf_r+0x36>
 800abb0:	690b      	ldr	r3, [r1, #16]
 800abb2:	b973      	cbnz	r3, 800abd2 <_svfiprintf_r+0x36>
 800abb4:	2140      	movs	r1, #64	@ 0x40
 800abb6:	f7ff fc53 	bl	800a460 <_malloc_r>
 800abba:	6028      	str	r0, [r5, #0]
 800abbc:	6128      	str	r0, [r5, #16]
 800abbe:	b930      	cbnz	r0, 800abce <_svfiprintf_r+0x32>
 800abc0:	230c      	movs	r3, #12
 800abc2:	603b      	str	r3, [r7, #0]
 800abc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800abc8:	b01d      	add	sp, #116	@ 0x74
 800abca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abce:	2340      	movs	r3, #64	@ 0x40
 800abd0:	616b      	str	r3, [r5, #20]
 800abd2:	2300      	movs	r3, #0
 800abd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800abd6:	2320      	movs	r3, #32
 800abd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800abdc:	f8cd 800c 	str.w	r8, [sp, #12]
 800abe0:	2330      	movs	r3, #48	@ 0x30
 800abe2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ad80 <_svfiprintf_r+0x1e4>
 800abe6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abea:	f04f 0901 	mov.w	r9, #1
 800abee:	4623      	mov	r3, r4
 800abf0:	469a      	mov	sl, r3
 800abf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abf6:	b10a      	cbz	r2, 800abfc <_svfiprintf_r+0x60>
 800abf8:	2a25      	cmp	r2, #37	@ 0x25
 800abfa:	d1f9      	bne.n	800abf0 <_svfiprintf_r+0x54>
 800abfc:	ebba 0b04 	subs.w	fp, sl, r4
 800ac00:	d00b      	beq.n	800ac1a <_svfiprintf_r+0x7e>
 800ac02:	465b      	mov	r3, fp
 800ac04:	4622      	mov	r2, r4
 800ac06:	4629      	mov	r1, r5
 800ac08:	4638      	mov	r0, r7
 800ac0a:	f7ff ff6b 	bl	800aae4 <__ssputs_r>
 800ac0e:	3001      	adds	r0, #1
 800ac10:	f000 80a7 	beq.w	800ad62 <_svfiprintf_r+0x1c6>
 800ac14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac16:	445a      	add	r2, fp
 800ac18:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f000 809f 	beq.w	800ad62 <_svfiprintf_r+0x1c6>
 800ac24:	2300      	movs	r3, #0
 800ac26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac2e:	f10a 0a01 	add.w	sl, sl, #1
 800ac32:	9304      	str	r3, [sp, #16]
 800ac34:	9307      	str	r3, [sp, #28]
 800ac36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac3a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac3c:	4654      	mov	r4, sl
 800ac3e:	2205      	movs	r2, #5
 800ac40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac44:	484e      	ldr	r0, [pc, #312]	@ (800ad80 <_svfiprintf_r+0x1e4>)
 800ac46:	f7f5 faab 	bl	80001a0 <memchr>
 800ac4a:	9a04      	ldr	r2, [sp, #16]
 800ac4c:	b9d8      	cbnz	r0, 800ac86 <_svfiprintf_r+0xea>
 800ac4e:	06d0      	lsls	r0, r2, #27
 800ac50:	bf44      	itt	mi
 800ac52:	2320      	movmi	r3, #32
 800ac54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac58:	0711      	lsls	r1, r2, #28
 800ac5a:	bf44      	itt	mi
 800ac5c:	232b      	movmi	r3, #43	@ 0x2b
 800ac5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac62:	f89a 3000 	ldrb.w	r3, [sl]
 800ac66:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac68:	d015      	beq.n	800ac96 <_svfiprintf_r+0xfa>
 800ac6a:	9a07      	ldr	r2, [sp, #28]
 800ac6c:	4654      	mov	r4, sl
 800ac6e:	2000      	movs	r0, #0
 800ac70:	f04f 0c0a 	mov.w	ip, #10
 800ac74:	4621      	mov	r1, r4
 800ac76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac7a:	3b30      	subs	r3, #48	@ 0x30
 800ac7c:	2b09      	cmp	r3, #9
 800ac7e:	d94b      	bls.n	800ad18 <_svfiprintf_r+0x17c>
 800ac80:	b1b0      	cbz	r0, 800acb0 <_svfiprintf_r+0x114>
 800ac82:	9207      	str	r2, [sp, #28]
 800ac84:	e014      	b.n	800acb0 <_svfiprintf_r+0x114>
 800ac86:	eba0 0308 	sub.w	r3, r0, r8
 800ac8a:	fa09 f303 	lsl.w	r3, r9, r3
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	9304      	str	r3, [sp, #16]
 800ac92:	46a2      	mov	sl, r4
 800ac94:	e7d2      	b.n	800ac3c <_svfiprintf_r+0xa0>
 800ac96:	9b03      	ldr	r3, [sp, #12]
 800ac98:	1d19      	adds	r1, r3, #4
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	9103      	str	r1, [sp, #12]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	bfbb      	ittet	lt
 800aca2:	425b      	neglt	r3, r3
 800aca4:	f042 0202 	orrlt.w	r2, r2, #2
 800aca8:	9307      	strge	r3, [sp, #28]
 800acaa:	9307      	strlt	r3, [sp, #28]
 800acac:	bfb8      	it	lt
 800acae:	9204      	strlt	r2, [sp, #16]
 800acb0:	7823      	ldrb	r3, [r4, #0]
 800acb2:	2b2e      	cmp	r3, #46	@ 0x2e
 800acb4:	d10a      	bne.n	800accc <_svfiprintf_r+0x130>
 800acb6:	7863      	ldrb	r3, [r4, #1]
 800acb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800acba:	d132      	bne.n	800ad22 <_svfiprintf_r+0x186>
 800acbc:	9b03      	ldr	r3, [sp, #12]
 800acbe:	1d1a      	adds	r2, r3, #4
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	9203      	str	r2, [sp, #12]
 800acc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800acc8:	3402      	adds	r4, #2
 800acca:	9305      	str	r3, [sp, #20]
 800accc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ad90 <_svfiprintf_r+0x1f4>
 800acd0:	7821      	ldrb	r1, [r4, #0]
 800acd2:	2203      	movs	r2, #3
 800acd4:	4650      	mov	r0, sl
 800acd6:	f7f5 fa63 	bl	80001a0 <memchr>
 800acda:	b138      	cbz	r0, 800acec <_svfiprintf_r+0x150>
 800acdc:	9b04      	ldr	r3, [sp, #16]
 800acde:	eba0 000a 	sub.w	r0, r0, sl
 800ace2:	2240      	movs	r2, #64	@ 0x40
 800ace4:	4082      	lsls	r2, r0
 800ace6:	4313      	orrs	r3, r2
 800ace8:	3401      	adds	r4, #1
 800acea:	9304      	str	r3, [sp, #16]
 800acec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acf0:	4824      	ldr	r0, [pc, #144]	@ (800ad84 <_svfiprintf_r+0x1e8>)
 800acf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800acf6:	2206      	movs	r2, #6
 800acf8:	f7f5 fa52 	bl	80001a0 <memchr>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	d036      	beq.n	800ad6e <_svfiprintf_r+0x1d2>
 800ad00:	4b21      	ldr	r3, [pc, #132]	@ (800ad88 <_svfiprintf_r+0x1ec>)
 800ad02:	bb1b      	cbnz	r3, 800ad4c <_svfiprintf_r+0x1b0>
 800ad04:	9b03      	ldr	r3, [sp, #12]
 800ad06:	3307      	adds	r3, #7
 800ad08:	f023 0307 	bic.w	r3, r3, #7
 800ad0c:	3308      	adds	r3, #8
 800ad0e:	9303      	str	r3, [sp, #12]
 800ad10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad12:	4433      	add	r3, r6
 800ad14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad16:	e76a      	b.n	800abee <_svfiprintf_r+0x52>
 800ad18:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad1c:	460c      	mov	r4, r1
 800ad1e:	2001      	movs	r0, #1
 800ad20:	e7a8      	b.n	800ac74 <_svfiprintf_r+0xd8>
 800ad22:	2300      	movs	r3, #0
 800ad24:	3401      	adds	r4, #1
 800ad26:	9305      	str	r3, [sp, #20]
 800ad28:	4619      	mov	r1, r3
 800ad2a:	f04f 0c0a 	mov.w	ip, #10
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad34:	3a30      	subs	r2, #48	@ 0x30
 800ad36:	2a09      	cmp	r2, #9
 800ad38:	d903      	bls.n	800ad42 <_svfiprintf_r+0x1a6>
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d0c6      	beq.n	800accc <_svfiprintf_r+0x130>
 800ad3e:	9105      	str	r1, [sp, #20]
 800ad40:	e7c4      	b.n	800accc <_svfiprintf_r+0x130>
 800ad42:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad46:	4604      	mov	r4, r0
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e7f0      	b.n	800ad2e <_svfiprintf_r+0x192>
 800ad4c:	ab03      	add	r3, sp, #12
 800ad4e:	9300      	str	r3, [sp, #0]
 800ad50:	462a      	mov	r2, r5
 800ad52:	4b0e      	ldr	r3, [pc, #56]	@ (800ad8c <_svfiprintf_r+0x1f0>)
 800ad54:	a904      	add	r1, sp, #16
 800ad56:	4638      	mov	r0, r7
 800ad58:	f3af 8000 	nop.w
 800ad5c:	1c42      	adds	r2, r0, #1
 800ad5e:	4606      	mov	r6, r0
 800ad60:	d1d6      	bne.n	800ad10 <_svfiprintf_r+0x174>
 800ad62:	89ab      	ldrh	r3, [r5, #12]
 800ad64:	065b      	lsls	r3, r3, #25
 800ad66:	f53f af2d 	bmi.w	800abc4 <_svfiprintf_r+0x28>
 800ad6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad6c:	e72c      	b.n	800abc8 <_svfiprintf_r+0x2c>
 800ad6e:	ab03      	add	r3, sp, #12
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	462a      	mov	r2, r5
 800ad74:	4b05      	ldr	r3, [pc, #20]	@ (800ad8c <_svfiprintf_r+0x1f0>)
 800ad76:	a904      	add	r1, sp, #16
 800ad78:	4638      	mov	r0, r7
 800ad7a:	f000 fb8b 	bl	800b494 <_printf_i>
 800ad7e:	e7ed      	b.n	800ad5c <_svfiprintf_r+0x1c0>
 800ad80:	0800d15c 	.word	0x0800d15c
 800ad84:	0800d166 	.word	0x0800d166
 800ad88:	00000000 	.word	0x00000000
 800ad8c:	0800aae5 	.word	0x0800aae5
 800ad90:	0800d162 	.word	0x0800d162

0800ad94 <_sungetc_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	1c4b      	adds	r3, r1, #1
 800ad98:	4614      	mov	r4, r2
 800ad9a:	d103      	bne.n	800ada4 <_sungetc_r+0x10>
 800ad9c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800ada0:	4628      	mov	r0, r5
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	8993      	ldrh	r3, [r2, #12]
 800ada6:	f023 0320 	bic.w	r3, r3, #32
 800adaa:	8193      	strh	r3, [r2, #12]
 800adac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800adae:	6852      	ldr	r2, [r2, #4]
 800adb0:	b2cd      	uxtb	r5, r1
 800adb2:	b18b      	cbz	r3, 800add8 <_sungetc_r+0x44>
 800adb4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800adb6:	4293      	cmp	r3, r2
 800adb8:	dd08      	ble.n	800adcc <_sungetc_r+0x38>
 800adba:	6823      	ldr	r3, [r4, #0]
 800adbc:	1e5a      	subs	r2, r3, #1
 800adbe:	6022      	str	r2, [r4, #0]
 800adc0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800adc4:	6863      	ldr	r3, [r4, #4]
 800adc6:	3301      	adds	r3, #1
 800adc8:	6063      	str	r3, [r4, #4]
 800adca:	e7e9      	b.n	800ada0 <_sungetc_r+0xc>
 800adcc:	4621      	mov	r1, r4
 800adce:	f000 feb3 	bl	800bb38 <__submore>
 800add2:	2800      	cmp	r0, #0
 800add4:	d0f1      	beq.n	800adba <_sungetc_r+0x26>
 800add6:	e7e1      	b.n	800ad9c <_sungetc_r+0x8>
 800add8:	6921      	ldr	r1, [r4, #16]
 800adda:	6823      	ldr	r3, [r4, #0]
 800addc:	b151      	cbz	r1, 800adf4 <_sungetc_r+0x60>
 800adde:	4299      	cmp	r1, r3
 800ade0:	d208      	bcs.n	800adf4 <_sungetc_r+0x60>
 800ade2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ade6:	42a9      	cmp	r1, r5
 800ade8:	d104      	bne.n	800adf4 <_sungetc_r+0x60>
 800adea:	3b01      	subs	r3, #1
 800adec:	3201      	adds	r2, #1
 800adee:	6023      	str	r3, [r4, #0]
 800adf0:	6062      	str	r2, [r4, #4]
 800adf2:	e7d5      	b.n	800ada0 <_sungetc_r+0xc>
 800adf4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800adf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800adfc:	6363      	str	r3, [r4, #52]	@ 0x34
 800adfe:	2303      	movs	r3, #3
 800ae00:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ae02:	4623      	mov	r3, r4
 800ae04:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e7dc      	b.n	800adc8 <_sungetc_r+0x34>

0800ae0e <__ssrefill_r>:
 800ae0e:	b510      	push	{r4, lr}
 800ae10:	460c      	mov	r4, r1
 800ae12:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ae14:	b169      	cbz	r1, 800ae32 <__ssrefill_r+0x24>
 800ae16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae1a:	4299      	cmp	r1, r3
 800ae1c:	d001      	beq.n	800ae22 <__ssrefill_r+0x14>
 800ae1e:	f7ff fe17 	bl	800aa50 <_free_r>
 800ae22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae24:	6063      	str	r3, [r4, #4]
 800ae26:	2000      	movs	r0, #0
 800ae28:	6360      	str	r0, [r4, #52]	@ 0x34
 800ae2a:	b113      	cbz	r3, 800ae32 <__ssrefill_r+0x24>
 800ae2c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ae2e:	6023      	str	r3, [r4, #0]
 800ae30:	bd10      	pop	{r4, pc}
 800ae32:	6923      	ldr	r3, [r4, #16]
 800ae34:	6023      	str	r3, [r4, #0]
 800ae36:	2300      	movs	r3, #0
 800ae38:	6063      	str	r3, [r4, #4]
 800ae3a:	89a3      	ldrh	r3, [r4, #12]
 800ae3c:	f043 0320 	orr.w	r3, r3, #32
 800ae40:	81a3      	strh	r3, [r4, #12]
 800ae42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae46:	e7f3      	b.n	800ae30 <__ssrefill_r+0x22>

0800ae48 <__ssvfiscanf_r>:
 800ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4c:	460c      	mov	r4, r1
 800ae4e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800ae52:	2100      	movs	r1, #0
 800ae54:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800ae58:	49a6      	ldr	r1, [pc, #664]	@ (800b0f4 <__ssvfiscanf_r+0x2ac>)
 800ae5a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800ae5c:	f10d 0804 	add.w	r8, sp, #4
 800ae60:	49a5      	ldr	r1, [pc, #660]	@ (800b0f8 <__ssvfiscanf_r+0x2b0>)
 800ae62:	4fa6      	ldr	r7, [pc, #664]	@ (800b0fc <__ssvfiscanf_r+0x2b4>)
 800ae64:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800ae68:	4606      	mov	r6, r0
 800ae6a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800ae6c:	9300      	str	r3, [sp, #0]
 800ae6e:	f892 9000 	ldrb.w	r9, [r2]
 800ae72:	f1b9 0f00 	cmp.w	r9, #0
 800ae76:	f000 8158 	beq.w	800b12a <__ssvfiscanf_r+0x2e2>
 800ae7a:	f817 3009 	ldrb.w	r3, [r7, r9]
 800ae7e:	f013 0308 	ands.w	r3, r3, #8
 800ae82:	f102 0501 	add.w	r5, r2, #1
 800ae86:	d019      	beq.n	800aebc <__ssvfiscanf_r+0x74>
 800ae88:	6863      	ldr	r3, [r4, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	dd0f      	ble.n	800aeae <__ssvfiscanf_r+0x66>
 800ae8e:	6823      	ldr	r3, [r4, #0]
 800ae90:	781a      	ldrb	r2, [r3, #0]
 800ae92:	5cba      	ldrb	r2, [r7, r2]
 800ae94:	0712      	lsls	r2, r2, #28
 800ae96:	d401      	bmi.n	800ae9c <__ssvfiscanf_r+0x54>
 800ae98:	462a      	mov	r2, r5
 800ae9a:	e7e8      	b.n	800ae6e <__ssvfiscanf_r+0x26>
 800ae9c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ae9e:	3201      	adds	r2, #1
 800aea0:	9245      	str	r2, [sp, #276]	@ 0x114
 800aea2:	6862      	ldr	r2, [r4, #4]
 800aea4:	3301      	adds	r3, #1
 800aea6:	3a01      	subs	r2, #1
 800aea8:	6062      	str	r2, [r4, #4]
 800aeaa:	6023      	str	r3, [r4, #0]
 800aeac:	e7ec      	b.n	800ae88 <__ssvfiscanf_r+0x40>
 800aeae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	4798      	blx	r3
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	d0e9      	beq.n	800ae8e <__ssvfiscanf_r+0x46>
 800aeba:	e7ed      	b.n	800ae98 <__ssvfiscanf_r+0x50>
 800aebc:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800aec0:	f040 8085 	bne.w	800afce <__ssvfiscanf_r+0x186>
 800aec4:	9341      	str	r3, [sp, #260]	@ 0x104
 800aec6:	9343      	str	r3, [sp, #268]	@ 0x10c
 800aec8:	7853      	ldrb	r3, [r2, #1]
 800aeca:	2b2a      	cmp	r3, #42	@ 0x2a
 800aecc:	bf02      	ittt	eq
 800aece:	2310      	moveq	r3, #16
 800aed0:	1c95      	addeq	r5, r2, #2
 800aed2:	9341      	streq	r3, [sp, #260]	@ 0x104
 800aed4:	220a      	movs	r2, #10
 800aed6:	46aa      	mov	sl, r5
 800aed8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800aedc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800aee0:	2b09      	cmp	r3, #9
 800aee2:	d91e      	bls.n	800af22 <__ssvfiscanf_r+0xda>
 800aee4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800b100 <__ssvfiscanf_r+0x2b8>
 800aee8:	2203      	movs	r2, #3
 800aeea:	4658      	mov	r0, fp
 800aeec:	f7f5 f958 	bl	80001a0 <memchr>
 800aef0:	b138      	cbz	r0, 800af02 <__ssvfiscanf_r+0xba>
 800aef2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800aef4:	eba0 000b 	sub.w	r0, r0, fp
 800aef8:	2301      	movs	r3, #1
 800aefa:	4083      	lsls	r3, r0
 800aefc:	4313      	orrs	r3, r2
 800aefe:	9341      	str	r3, [sp, #260]	@ 0x104
 800af00:	4655      	mov	r5, sl
 800af02:	f815 3b01 	ldrb.w	r3, [r5], #1
 800af06:	2b78      	cmp	r3, #120	@ 0x78
 800af08:	d806      	bhi.n	800af18 <__ssvfiscanf_r+0xd0>
 800af0a:	2b57      	cmp	r3, #87	@ 0x57
 800af0c:	d810      	bhi.n	800af30 <__ssvfiscanf_r+0xe8>
 800af0e:	2b25      	cmp	r3, #37	@ 0x25
 800af10:	d05d      	beq.n	800afce <__ssvfiscanf_r+0x186>
 800af12:	d857      	bhi.n	800afc4 <__ssvfiscanf_r+0x17c>
 800af14:	2b00      	cmp	r3, #0
 800af16:	d075      	beq.n	800b004 <__ssvfiscanf_r+0x1bc>
 800af18:	2303      	movs	r3, #3
 800af1a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800af1c:	230a      	movs	r3, #10
 800af1e:	9342      	str	r3, [sp, #264]	@ 0x108
 800af20:	e088      	b.n	800b034 <__ssvfiscanf_r+0x1ec>
 800af22:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800af24:	fb02 1103 	mla	r1, r2, r3, r1
 800af28:	3930      	subs	r1, #48	@ 0x30
 800af2a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800af2c:	4655      	mov	r5, sl
 800af2e:	e7d2      	b.n	800aed6 <__ssvfiscanf_r+0x8e>
 800af30:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800af34:	2a20      	cmp	r2, #32
 800af36:	d8ef      	bhi.n	800af18 <__ssvfiscanf_r+0xd0>
 800af38:	a101      	add	r1, pc, #4	@ (adr r1, 800af40 <__ssvfiscanf_r+0xf8>)
 800af3a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800af3e:	bf00      	nop
 800af40:	0800b013 	.word	0x0800b013
 800af44:	0800af19 	.word	0x0800af19
 800af48:	0800af19 	.word	0x0800af19
 800af4c:	0800b06d 	.word	0x0800b06d
 800af50:	0800af19 	.word	0x0800af19
 800af54:	0800af19 	.word	0x0800af19
 800af58:	0800af19 	.word	0x0800af19
 800af5c:	0800af19 	.word	0x0800af19
 800af60:	0800af19 	.word	0x0800af19
 800af64:	0800af19 	.word	0x0800af19
 800af68:	0800af19 	.word	0x0800af19
 800af6c:	0800b083 	.word	0x0800b083
 800af70:	0800b069 	.word	0x0800b069
 800af74:	0800afcb 	.word	0x0800afcb
 800af78:	0800afcb 	.word	0x0800afcb
 800af7c:	0800afcb 	.word	0x0800afcb
 800af80:	0800af19 	.word	0x0800af19
 800af84:	0800b025 	.word	0x0800b025
 800af88:	0800af19 	.word	0x0800af19
 800af8c:	0800af19 	.word	0x0800af19
 800af90:	0800af19 	.word	0x0800af19
 800af94:	0800af19 	.word	0x0800af19
 800af98:	0800b093 	.word	0x0800b093
 800af9c:	0800b02d 	.word	0x0800b02d
 800afa0:	0800b00b 	.word	0x0800b00b
 800afa4:	0800af19 	.word	0x0800af19
 800afa8:	0800af19 	.word	0x0800af19
 800afac:	0800b08f 	.word	0x0800b08f
 800afb0:	0800af19 	.word	0x0800af19
 800afb4:	0800b069 	.word	0x0800b069
 800afb8:	0800af19 	.word	0x0800af19
 800afbc:	0800af19 	.word	0x0800af19
 800afc0:	0800b013 	.word	0x0800b013
 800afc4:	3b45      	subs	r3, #69	@ 0x45
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	d8a6      	bhi.n	800af18 <__ssvfiscanf_r+0xd0>
 800afca:	2305      	movs	r3, #5
 800afcc:	e031      	b.n	800b032 <__ssvfiscanf_r+0x1ea>
 800afce:	6863      	ldr	r3, [r4, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	dd0d      	ble.n	800aff0 <__ssvfiscanf_r+0x1a8>
 800afd4:	6823      	ldr	r3, [r4, #0]
 800afd6:	781a      	ldrb	r2, [r3, #0]
 800afd8:	454a      	cmp	r2, r9
 800afda:	f040 80a6 	bne.w	800b12a <__ssvfiscanf_r+0x2e2>
 800afde:	3301      	adds	r3, #1
 800afe0:	6862      	ldr	r2, [r4, #4]
 800afe2:	6023      	str	r3, [r4, #0]
 800afe4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800afe6:	3a01      	subs	r2, #1
 800afe8:	3301      	adds	r3, #1
 800afea:	6062      	str	r2, [r4, #4]
 800afec:	9345      	str	r3, [sp, #276]	@ 0x114
 800afee:	e753      	b.n	800ae98 <__ssvfiscanf_r+0x50>
 800aff0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800aff2:	4621      	mov	r1, r4
 800aff4:	4630      	mov	r0, r6
 800aff6:	4798      	blx	r3
 800aff8:	2800      	cmp	r0, #0
 800affa:	d0eb      	beq.n	800afd4 <__ssvfiscanf_r+0x18c>
 800affc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800affe:	2800      	cmp	r0, #0
 800b000:	f040 808b 	bne.w	800b11a <__ssvfiscanf_r+0x2d2>
 800b004:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b008:	e08b      	b.n	800b122 <__ssvfiscanf_r+0x2da>
 800b00a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b00c:	f042 0220 	orr.w	r2, r2, #32
 800b010:	9241      	str	r2, [sp, #260]	@ 0x104
 800b012:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b014:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b018:	9241      	str	r2, [sp, #260]	@ 0x104
 800b01a:	2210      	movs	r2, #16
 800b01c:	2b6e      	cmp	r3, #110	@ 0x6e
 800b01e:	9242      	str	r2, [sp, #264]	@ 0x108
 800b020:	d902      	bls.n	800b028 <__ssvfiscanf_r+0x1e0>
 800b022:	e005      	b.n	800b030 <__ssvfiscanf_r+0x1e8>
 800b024:	2300      	movs	r3, #0
 800b026:	9342      	str	r3, [sp, #264]	@ 0x108
 800b028:	2303      	movs	r3, #3
 800b02a:	e002      	b.n	800b032 <__ssvfiscanf_r+0x1ea>
 800b02c:	2308      	movs	r3, #8
 800b02e:	9342      	str	r3, [sp, #264]	@ 0x108
 800b030:	2304      	movs	r3, #4
 800b032:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b034:	6863      	ldr	r3, [r4, #4]
 800b036:	2b00      	cmp	r3, #0
 800b038:	dd39      	ble.n	800b0ae <__ssvfiscanf_r+0x266>
 800b03a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b03c:	0659      	lsls	r1, r3, #25
 800b03e:	d404      	bmi.n	800b04a <__ssvfiscanf_r+0x202>
 800b040:	6823      	ldr	r3, [r4, #0]
 800b042:	781a      	ldrb	r2, [r3, #0]
 800b044:	5cba      	ldrb	r2, [r7, r2]
 800b046:	0712      	lsls	r2, r2, #28
 800b048:	d438      	bmi.n	800b0bc <__ssvfiscanf_r+0x274>
 800b04a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	dc47      	bgt.n	800b0e0 <__ssvfiscanf_r+0x298>
 800b050:	466b      	mov	r3, sp
 800b052:	4622      	mov	r2, r4
 800b054:	a941      	add	r1, sp, #260	@ 0x104
 800b056:	4630      	mov	r0, r6
 800b058:	f000 fb3a 	bl	800b6d0 <_scanf_chars>
 800b05c:	2801      	cmp	r0, #1
 800b05e:	d064      	beq.n	800b12a <__ssvfiscanf_r+0x2e2>
 800b060:	2802      	cmp	r0, #2
 800b062:	f47f af19 	bne.w	800ae98 <__ssvfiscanf_r+0x50>
 800b066:	e7c9      	b.n	800affc <__ssvfiscanf_r+0x1b4>
 800b068:	220a      	movs	r2, #10
 800b06a:	e7d7      	b.n	800b01c <__ssvfiscanf_r+0x1d4>
 800b06c:	4629      	mov	r1, r5
 800b06e:	4640      	mov	r0, r8
 800b070:	f000 fc7c 	bl	800b96c <__sccl>
 800b074:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b07a:	9341      	str	r3, [sp, #260]	@ 0x104
 800b07c:	4605      	mov	r5, r0
 800b07e:	2301      	movs	r3, #1
 800b080:	e7d7      	b.n	800b032 <__ssvfiscanf_r+0x1ea>
 800b082:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b088:	9341      	str	r3, [sp, #260]	@ 0x104
 800b08a:	2300      	movs	r3, #0
 800b08c:	e7d1      	b.n	800b032 <__ssvfiscanf_r+0x1ea>
 800b08e:	2302      	movs	r3, #2
 800b090:	e7cf      	b.n	800b032 <__ssvfiscanf_r+0x1ea>
 800b092:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800b094:	06c3      	lsls	r3, r0, #27
 800b096:	f53f aeff 	bmi.w	800ae98 <__ssvfiscanf_r+0x50>
 800b09a:	9b00      	ldr	r3, [sp, #0]
 800b09c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b09e:	1d19      	adds	r1, r3, #4
 800b0a0:	9100      	str	r1, [sp, #0]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	07c0      	lsls	r0, r0, #31
 800b0a6:	bf4c      	ite	mi
 800b0a8:	801a      	strhmi	r2, [r3, #0]
 800b0aa:	601a      	strpl	r2, [r3, #0]
 800b0ac:	e6f4      	b.n	800ae98 <__ssvfiscanf_r+0x50>
 800b0ae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	4798      	blx	r3
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d0bf      	beq.n	800b03a <__ssvfiscanf_r+0x1f2>
 800b0ba:	e79f      	b.n	800affc <__ssvfiscanf_r+0x1b4>
 800b0bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b0be:	3201      	adds	r2, #1
 800b0c0:	9245      	str	r2, [sp, #276]	@ 0x114
 800b0c2:	6862      	ldr	r2, [r4, #4]
 800b0c4:	3a01      	subs	r2, #1
 800b0c6:	2a00      	cmp	r2, #0
 800b0c8:	6062      	str	r2, [r4, #4]
 800b0ca:	dd02      	ble.n	800b0d2 <__ssvfiscanf_r+0x28a>
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	6023      	str	r3, [r4, #0]
 800b0d0:	e7b6      	b.n	800b040 <__ssvfiscanf_r+0x1f8>
 800b0d2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b0d4:	4621      	mov	r1, r4
 800b0d6:	4630      	mov	r0, r6
 800b0d8:	4798      	blx	r3
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	d0b0      	beq.n	800b040 <__ssvfiscanf_r+0x1f8>
 800b0de:	e78d      	b.n	800affc <__ssvfiscanf_r+0x1b4>
 800b0e0:	2b04      	cmp	r3, #4
 800b0e2:	dc0f      	bgt.n	800b104 <__ssvfiscanf_r+0x2bc>
 800b0e4:	466b      	mov	r3, sp
 800b0e6:	4622      	mov	r2, r4
 800b0e8:	a941      	add	r1, sp, #260	@ 0x104
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	f000 fb4a 	bl	800b784 <_scanf_i>
 800b0f0:	e7b4      	b.n	800b05c <__ssvfiscanf_r+0x214>
 800b0f2:	bf00      	nop
 800b0f4:	0800ad95 	.word	0x0800ad95
 800b0f8:	0800ae0f 	.word	0x0800ae0f
 800b0fc:	0800d1ab 	.word	0x0800d1ab
 800b100:	0800d162 	.word	0x0800d162
 800b104:	4b0a      	ldr	r3, [pc, #40]	@ (800b130 <__ssvfiscanf_r+0x2e8>)
 800b106:	2b00      	cmp	r3, #0
 800b108:	f43f aec6 	beq.w	800ae98 <__ssvfiscanf_r+0x50>
 800b10c:	466b      	mov	r3, sp
 800b10e:	4622      	mov	r2, r4
 800b110:	a941      	add	r1, sp, #260	@ 0x104
 800b112:	4630      	mov	r0, r6
 800b114:	f3af 8000 	nop.w
 800b118:	e7a0      	b.n	800b05c <__ssvfiscanf_r+0x214>
 800b11a:	89a3      	ldrh	r3, [r4, #12]
 800b11c:	065b      	lsls	r3, r3, #25
 800b11e:	f53f af71 	bmi.w	800b004 <__ssvfiscanf_r+0x1bc>
 800b122:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800b126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b12a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b12c:	e7f9      	b.n	800b122 <__ssvfiscanf_r+0x2da>
 800b12e:	bf00      	nop
 800b130:	00000000 	.word	0x00000000

0800b134 <__sfputc_r>:
 800b134:	6893      	ldr	r3, [r2, #8]
 800b136:	3b01      	subs	r3, #1
 800b138:	2b00      	cmp	r3, #0
 800b13a:	b410      	push	{r4}
 800b13c:	6093      	str	r3, [r2, #8]
 800b13e:	da08      	bge.n	800b152 <__sfputc_r+0x1e>
 800b140:	6994      	ldr	r4, [r2, #24]
 800b142:	42a3      	cmp	r3, r4
 800b144:	db01      	blt.n	800b14a <__sfputc_r+0x16>
 800b146:	290a      	cmp	r1, #10
 800b148:	d103      	bne.n	800b152 <__sfputc_r+0x1e>
 800b14a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b14e:	f000 bd5b 	b.w	800bc08 <__swbuf_r>
 800b152:	6813      	ldr	r3, [r2, #0]
 800b154:	1c58      	adds	r0, r3, #1
 800b156:	6010      	str	r0, [r2, #0]
 800b158:	7019      	strb	r1, [r3, #0]
 800b15a:	4608      	mov	r0, r1
 800b15c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b160:	4770      	bx	lr

0800b162 <__sfputs_r>:
 800b162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b164:	4606      	mov	r6, r0
 800b166:	460f      	mov	r7, r1
 800b168:	4614      	mov	r4, r2
 800b16a:	18d5      	adds	r5, r2, r3
 800b16c:	42ac      	cmp	r4, r5
 800b16e:	d101      	bne.n	800b174 <__sfputs_r+0x12>
 800b170:	2000      	movs	r0, #0
 800b172:	e007      	b.n	800b184 <__sfputs_r+0x22>
 800b174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b178:	463a      	mov	r2, r7
 800b17a:	4630      	mov	r0, r6
 800b17c:	f7ff ffda 	bl	800b134 <__sfputc_r>
 800b180:	1c43      	adds	r3, r0, #1
 800b182:	d1f3      	bne.n	800b16c <__sfputs_r+0xa>
 800b184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b188 <_vfiprintf_r>:
 800b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18c:	460d      	mov	r5, r1
 800b18e:	b09d      	sub	sp, #116	@ 0x74
 800b190:	4614      	mov	r4, r2
 800b192:	4698      	mov	r8, r3
 800b194:	4606      	mov	r6, r0
 800b196:	b118      	cbz	r0, 800b1a0 <_vfiprintf_r+0x18>
 800b198:	6a03      	ldr	r3, [r0, #32]
 800b19a:	b90b      	cbnz	r3, 800b1a0 <_vfiprintf_r+0x18>
 800b19c:	f7ff fb0c 	bl	800a7b8 <__sinit>
 800b1a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1a2:	07d9      	lsls	r1, r3, #31
 800b1a4:	d405      	bmi.n	800b1b2 <_vfiprintf_r+0x2a>
 800b1a6:	89ab      	ldrh	r3, [r5, #12]
 800b1a8:	059a      	lsls	r2, r3, #22
 800b1aa:	d402      	bmi.n	800b1b2 <_vfiprintf_r+0x2a>
 800b1ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1ae:	f7ff fc26 	bl	800a9fe <__retarget_lock_acquire_recursive>
 800b1b2:	89ab      	ldrh	r3, [r5, #12]
 800b1b4:	071b      	lsls	r3, r3, #28
 800b1b6:	d501      	bpl.n	800b1bc <_vfiprintf_r+0x34>
 800b1b8:	692b      	ldr	r3, [r5, #16]
 800b1ba:	b99b      	cbnz	r3, 800b1e4 <_vfiprintf_r+0x5c>
 800b1bc:	4629      	mov	r1, r5
 800b1be:	4630      	mov	r0, r6
 800b1c0:	f000 fe4c 	bl	800be5c <__swsetup_r>
 800b1c4:	b170      	cbz	r0, 800b1e4 <_vfiprintf_r+0x5c>
 800b1c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1c8:	07dc      	lsls	r4, r3, #31
 800b1ca:	d504      	bpl.n	800b1d6 <_vfiprintf_r+0x4e>
 800b1cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1d0:	b01d      	add	sp, #116	@ 0x74
 800b1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d6:	89ab      	ldrh	r3, [r5, #12]
 800b1d8:	0598      	lsls	r0, r3, #22
 800b1da:	d4f7      	bmi.n	800b1cc <_vfiprintf_r+0x44>
 800b1dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1de:	f7ff fc0f 	bl	800aa00 <__retarget_lock_release_recursive>
 800b1e2:	e7f3      	b.n	800b1cc <_vfiprintf_r+0x44>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1e8:	2320      	movs	r3, #32
 800b1ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1f2:	2330      	movs	r3, #48	@ 0x30
 800b1f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b3a4 <_vfiprintf_r+0x21c>
 800b1f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1fc:	f04f 0901 	mov.w	r9, #1
 800b200:	4623      	mov	r3, r4
 800b202:	469a      	mov	sl, r3
 800b204:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b208:	b10a      	cbz	r2, 800b20e <_vfiprintf_r+0x86>
 800b20a:	2a25      	cmp	r2, #37	@ 0x25
 800b20c:	d1f9      	bne.n	800b202 <_vfiprintf_r+0x7a>
 800b20e:	ebba 0b04 	subs.w	fp, sl, r4
 800b212:	d00b      	beq.n	800b22c <_vfiprintf_r+0xa4>
 800b214:	465b      	mov	r3, fp
 800b216:	4622      	mov	r2, r4
 800b218:	4629      	mov	r1, r5
 800b21a:	4630      	mov	r0, r6
 800b21c:	f7ff ffa1 	bl	800b162 <__sfputs_r>
 800b220:	3001      	adds	r0, #1
 800b222:	f000 80a7 	beq.w	800b374 <_vfiprintf_r+0x1ec>
 800b226:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b228:	445a      	add	r2, fp
 800b22a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b22c:	f89a 3000 	ldrb.w	r3, [sl]
 800b230:	2b00      	cmp	r3, #0
 800b232:	f000 809f 	beq.w	800b374 <_vfiprintf_r+0x1ec>
 800b236:	2300      	movs	r3, #0
 800b238:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b23c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b240:	f10a 0a01 	add.w	sl, sl, #1
 800b244:	9304      	str	r3, [sp, #16]
 800b246:	9307      	str	r3, [sp, #28]
 800b248:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b24c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b24e:	4654      	mov	r4, sl
 800b250:	2205      	movs	r2, #5
 800b252:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b256:	4853      	ldr	r0, [pc, #332]	@ (800b3a4 <_vfiprintf_r+0x21c>)
 800b258:	f7f4 ffa2 	bl	80001a0 <memchr>
 800b25c:	9a04      	ldr	r2, [sp, #16]
 800b25e:	b9d8      	cbnz	r0, 800b298 <_vfiprintf_r+0x110>
 800b260:	06d1      	lsls	r1, r2, #27
 800b262:	bf44      	itt	mi
 800b264:	2320      	movmi	r3, #32
 800b266:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b26a:	0713      	lsls	r3, r2, #28
 800b26c:	bf44      	itt	mi
 800b26e:	232b      	movmi	r3, #43	@ 0x2b
 800b270:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b274:	f89a 3000 	ldrb.w	r3, [sl]
 800b278:	2b2a      	cmp	r3, #42	@ 0x2a
 800b27a:	d015      	beq.n	800b2a8 <_vfiprintf_r+0x120>
 800b27c:	9a07      	ldr	r2, [sp, #28]
 800b27e:	4654      	mov	r4, sl
 800b280:	2000      	movs	r0, #0
 800b282:	f04f 0c0a 	mov.w	ip, #10
 800b286:	4621      	mov	r1, r4
 800b288:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b28c:	3b30      	subs	r3, #48	@ 0x30
 800b28e:	2b09      	cmp	r3, #9
 800b290:	d94b      	bls.n	800b32a <_vfiprintf_r+0x1a2>
 800b292:	b1b0      	cbz	r0, 800b2c2 <_vfiprintf_r+0x13a>
 800b294:	9207      	str	r2, [sp, #28]
 800b296:	e014      	b.n	800b2c2 <_vfiprintf_r+0x13a>
 800b298:	eba0 0308 	sub.w	r3, r0, r8
 800b29c:	fa09 f303 	lsl.w	r3, r9, r3
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	9304      	str	r3, [sp, #16]
 800b2a4:	46a2      	mov	sl, r4
 800b2a6:	e7d2      	b.n	800b24e <_vfiprintf_r+0xc6>
 800b2a8:	9b03      	ldr	r3, [sp, #12]
 800b2aa:	1d19      	adds	r1, r3, #4
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	9103      	str	r1, [sp, #12]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	bfbb      	ittet	lt
 800b2b4:	425b      	neglt	r3, r3
 800b2b6:	f042 0202 	orrlt.w	r2, r2, #2
 800b2ba:	9307      	strge	r3, [sp, #28]
 800b2bc:	9307      	strlt	r3, [sp, #28]
 800b2be:	bfb8      	it	lt
 800b2c0:	9204      	strlt	r2, [sp, #16]
 800b2c2:	7823      	ldrb	r3, [r4, #0]
 800b2c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2c6:	d10a      	bne.n	800b2de <_vfiprintf_r+0x156>
 800b2c8:	7863      	ldrb	r3, [r4, #1]
 800b2ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2cc:	d132      	bne.n	800b334 <_vfiprintf_r+0x1ac>
 800b2ce:	9b03      	ldr	r3, [sp, #12]
 800b2d0:	1d1a      	adds	r2, r3, #4
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	9203      	str	r2, [sp, #12]
 800b2d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2da:	3402      	adds	r4, #2
 800b2dc:	9305      	str	r3, [sp, #20]
 800b2de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b3b4 <_vfiprintf_r+0x22c>
 800b2e2:	7821      	ldrb	r1, [r4, #0]
 800b2e4:	2203      	movs	r2, #3
 800b2e6:	4650      	mov	r0, sl
 800b2e8:	f7f4 ff5a 	bl	80001a0 <memchr>
 800b2ec:	b138      	cbz	r0, 800b2fe <_vfiprintf_r+0x176>
 800b2ee:	9b04      	ldr	r3, [sp, #16]
 800b2f0:	eba0 000a 	sub.w	r0, r0, sl
 800b2f4:	2240      	movs	r2, #64	@ 0x40
 800b2f6:	4082      	lsls	r2, r0
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	3401      	adds	r4, #1
 800b2fc:	9304      	str	r3, [sp, #16]
 800b2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b302:	4829      	ldr	r0, [pc, #164]	@ (800b3a8 <_vfiprintf_r+0x220>)
 800b304:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b308:	2206      	movs	r2, #6
 800b30a:	f7f4 ff49 	bl	80001a0 <memchr>
 800b30e:	2800      	cmp	r0, #0
 800b310:	d03f      	beq.n	800b392 <_vfiprintf_r+0x20a>
 800b312:	4b26      	ldr	r3, [pc, #152]	@ (800b3ac <_vfiprintf_r+0x224>)
 800b314:	bb1b      	cbnz	r3, 800b35e <_vfiprintf_r+0x1d6>
 800b316:	9b03      	ldr	r3, [sp, #12]
 800b318:	3307      	adds	r3, #7
 800b31a:	f023 0307 	bic.w	r3, r3, #7
 800b31e:	3308      	adds	r3, #8
 800b320:	9303      	str	r3, [sp, #12]
 800b322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b324:	443b      	add	r3, r7
 800b326:	9309      	str	r3, [sp, #36]	@ 0x24
 800b328:	e76a      	b.n	800b200 <_vfiprintf_r+0x78>
 800b32a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b32e:	460c      	mov	r4, r1
 800b330:	2001      	movs	r0, #1
 800b332:	e7a8      	b.n	800b286 <_vfiprintf_r+0xfe>
 800b334:	2300      	movs	r3, #0
 800b336:	3401      	adds	r4, #1
 800b338:	9305      	str	r3, [sp, #20]
 800b33a:	4619      	mov	r1, r3
 800b33c:	f04f 0c0a 	mov.w	ip, #10
 800b340:	4620      	mov	r0, r4
 800b342:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b346:	3a30      	subs	r2, #48	@ 0x30
 800b348:	2a09      	cmp	r2, #9
 800b34a:	d903      	bls.n	800b354 <_vfiprintf_r+0x1cc>
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d0c6      	beq.n	800b2de <_vfiprintf_r+0x156>
 800b350:	9105      	str	r1, [sp, #20]
 800b352:	e7c4      	b.n	800b2de <_vfiprintf_r+0x156>
 800b354:	fb0c 2101 	mla	r1, ip, r1, r2
 800b358:	4604      	mov	r4, r0
 800b35a:	2301      	movs	r3, #1
 800b35c:	e7f0      	b.n	800b340 <_vfiprintf_r+0x1b8>
 800b35e:	ab03      	add	r3, sp, #12
 800b360:	9300      	str	r3, [sp, #0]
 800b362:	462a      	mov	r2, r5
 800b364:	4b12      	ldr	r3, [pc, #72]	@ (800b3b0 <_vfiprintf_r+0x228>)
 800b366:	a904      	add	r1, sp, #16
 800b368:	4630      	mov	r0, r6
 800b36a:	f3af 8000 	nop.w
 800b36e:	4607      	mov	r7, r0
 800b370:	1c78      	adds	r0, r7, #1
 800b372:	d1d6      	bne.n	800b322 <_vfiprintf_r+0x19a>
 800b374:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b376:	07d9      	lsls	r1, r3, #31
 800b378:	d405      	bmi.n	800b386 <_vfiprintf_r+0x1fe>
 800b37a:	89ab      	ldrh	r3, [r5, #12]
 800b37c:	059a      	lsls	r2, r3, #22
 800b37e:	d402      	bmi.n	800b386 <_vfiprintf_r+0x1fe>
 800b380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b382:	f7ff fb3d 	bl	800aa00 <__retarget_lock_release_recursive>
 800b386:	89ab      	ldrh	r3, [r5, #12]
 800b388:	065b      	lsls	r3, r3, #25
 800b38a:	f53f af1f 	bmi.w	800b1cc <_vfiprintf_r+0x44>
 800b38e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b390:	e71e      	b.n	800b1d0 <_vfiprintf_r+0x48>
 800b392:	ab03      	add	r3, sp, #12
 800b394:	9300      	str	r3, [sp, #0]
 800b396:	462a      	mov	r2, r5
 800b398:	4b05      	ldr	r3, [pc, #20]	@ (800b3b0 <_vfiprintf_r+0x228>)
 800b39a:	a904      	add	r1, sp, #16
 800b39c:	4630      	mov	r0, r6
 800b39e:	f000 f879 	bl	800b494 <_printf_i>
 800b3a2:	e7e4      	b.n	800b36e <_vfiprintf_r+0x1e6>
 800b3a4:	0800d15c 	.word	0x0800d15c
 800b3a8:	0800d166 	.word	0x0800d166
 800b3ac:	00000000 	.word	0x00000000
 800b3b0:	0800b163 	.word	0x0800b163
 800b3b4:	0800d162 	.word	0x0800d162

0800b3b8 <_printf_common>:
 800b3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3bc:	4616      	mov	r6, r2
 800b3be:	4698      	mov	r8, r3
 800b3c0:	688a      	ldr	r2, [r1, #8]
 800b3c2:	690b      	ldr	r3, [r1, #16]
 800b3c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	bfb8      	it	lt
 800b3cc:	4613      	movlt	r3, r2
 800b3ce:	6033      	str	r3, [r6, #0]
 800b3d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b3d4:	4607      	mov	r7, r0
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	b10a      	cbz	r2, 800b3de <_printf_common+0x26>
 800b3da:	3301      	adds	r3, #1
 800b3dc:	6033      	str	r3, [r6, #0]
 800b3de:	6823      	ldr	r3, [r4, #0]
 800b3e0:	0699      	lsls	r1, r3, #26
 800b3e2:	bf42      	ittt	mi
 800b3e4:	6833      	ldrmi	r3, [r6, #0]
 800b3e6:	3302      	addmi	r3, #2
 800b3e8:	6033      	strmi	r3, [r6, #0]
 800b3ea:	6825      	ldr	r5, [r4, #0]
 800b3ec:	f015 0506 	ands.w	r5, r5, #6
 800b3f0:	d106      	bne.n	800b400 <_printf_common+0x48>
 800b3f2:	f104 0a19 	add.w	sl, r4, #25
 800b3f6:	68e3      	ldr	r3, [r4, #12]
 800b3f8:	6832      	ldr	r2, [r6, #0]
 800b3fa:	1a9b      	subs	r3, r3, r2
 800b3fc:	42ab      	cmp	r3, r5
 800b3fe:	dc26      	bgt.n	800b44e <_printf_common+0x96>
 800b400:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b404:	6822      	ldr	r2, [r4, #0]
 800b406:	3b00      	subs	r3, #0
 800b408:	bf18      	it	ne
 800b40a:	2301      	movne	r3, #1
 800b40c:	0692      	lsls	r2, r2, #26
 800b40e:	d42b      	bmi.n	800b468 <_printf_common+0xb0>
 800b410:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b414:	4641      	mov	r1, r8
 800b416:	4638      	mov	r0, r7
 800b418:	47c8      	blx	r9
 800b41a:	3001      	adds	r0, #1
 800b41c:	d01e      	beq.n	800b45c <_printf_common+0xa4>
 800b41e:	6823      	ldr	r3, [r4, #0]
 800b420:	6922      	ldr	r2, [r4, #16]
 800b422:	f003 0306 	and.w	r3, r3, #6
 800b426:	2b04      	cmp	r3, #4
 800b428:	bf02      	ittt	eq
 800b42a:	68e5      	ldreq	r5, [r4, #12]
 800b42c:	6833      	ldreq	r3, [r6, #0]
 800b42e:	1aed      	subeq	r5, r5, r3
 800b430:	68a3      	ldr	r3, [r4, #8]
 800b432:	bf0c      	ite	eq
 800b434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b438:	2500      	movne	r5, #0
 800b43a:	4293      	cmp	r3, r2
 800b43c:	bfc4      	itt	gt
 800b43e:	1a9b      	subgt	r3, r3, r2
 800b440:	18ed      	addgt	r5, r5, r3
 800b442:	2600      	movs	r6, #0
 800b444:	341a      	adds	r4, #26
 800b446:	42b5      	cmp	r5, r6
 800b448:	d11a      	bne.n	800b480 <_printf_common+0xc8>
 800b44a:	2000      	movs	r0, #0
 800b44c:	e008      	b.n	800b460 <_printf_common+0xa8>
 800b44e:	2301      	movs	r3, #1
 800b450:	4652      	mov	r2, sl
 800b452:	4641      	mov	r1, r8
 800b454:	4638      	mov	r0, r7
 800b456:	47c8      	blx	r9
 800b458:	3001      	adds	r0, #1
 800b45a:	d103      	bne.n	800b464 <_printf_common+0xac>
 800b45c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b464:	3501      	adds	r5, #1
 800b466:	e7c6      	b.n	800b3f6 <_printf_common+0x3e>
 800b468:	18e1      	adds	r1, r4, r3
 800b46a:	1c5a      	adds	r2, r3, #1
 800b46c:	2030      	movs	r0, #48	@ 0x30
 800b46e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b472:	4422      	add	r2, r4
 800b474:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b478:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b47c:	3302      	adds	r3, #2
 800b47e:	e7c7      	b.n	800b410 <_printf_common+0x58>
 800b480:	2301      	movs	r3, #1
 800b482:	4622      	mov	r2, r4
 800b484:	4641      	mov	r1, r8
 800b486:	4638      	mov	r0, r7
 800b488:	47c8      	blx	r9
 800b48a:	3001      	adds	r0, #1
 800b48c:	d0e6      	beq.n	800b45c <_printf_common+0xa4>
 800b48e:	3601      	adds	r6, #1
 800b490:	e7d9      	b.n	800b446 <_printf_common+0x8e>
	...

0800b494 <_printf_i>:
 800b494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b498:	7e0f      	ldrb	r7, [r1, #24]
 800b49a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b49c:	2f78      	cmp	r7, #120	@ 0x78
 800b49e:	4691      	mov	r9, r2
 800b4a0:	4680      	mov	r8, r0
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	469a      	mov	sl, r3
 800b4a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b4aa:	d807      	bhi.n	800b4bc <_printf_i+0x28>
 800b4ac:	2f62      	cmp	r7, #98	@ 0x62
 800b4ae:	d80a      	bhi.n	800b4c6 <_printf_i+0x32>
 800b4b0:	2f00      	cmp	r7, #0
 800b4b2:	f000 80d1 	beq.w	800b658 <_printf_i+0x1c4>
 800b4b6:	2f58      	cmp	r7, #88	@ 0x58
 800b4b8:	f000 80b8 	beq.w	800b62c <_printf_i+0x198>
 800b4bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b4c4:	e03a      	b.n	800b53c <_printf_i+0xa8>
 800b4c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b4ca:	2b15      	cmp	r3, #21
 800b4cc:	d8f6      	bhi.n	800b4bc <_printf_i+0x28>
 800b4ce:	a101      	add	r1, pc, #4	@ (adr r1, 800b4d4 <_printf_i+0x40>)
 800b4d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4d4:	0800b52d 	.word	0x0800b52d
 800b4d8:	0800b541 	.word	0x0800b541
 800b4dc:	0800b4bd 	.word	0x0800b4bd
 800b4e0:	0800b4bd 	.word	0x0800b4bd
 800b4e4:	0800b4bd 	.word	0x0800b4bd
 800b4e8:	0800b4bd 	.word	0x0800b4bd
 800b4ec:	0800b541 	.word	0x0800b541
 800b4f0:	0800b4bd 	.word	0x0800b4bd
 800b4f4:	0800b4bd 	.word	0x0800b4bd
 800b4f8:	0800b4bd 	.word	0x0800b4bd
 800b4fc:	0800b4bd 	.word	0x0800b4bd
 800b500:	0800b63f 	.word	0x0800b63f
 800b504:	0800b56b 	.word	0x0800b56b
 800b508:	0800b5f9 	.word	0x0800b5f9
 800b50c:	0800b4bd 	.word	0x0800b4bd
 800b510:	0800b4bd 	.word	0x0800b4bd
 800b514:	0800b661 	.word	0x0800b661
 800b518:	0800b4bd 	.word	0x0800b4bd
 800b51c:	0800b56b 	.word	0x0800b56b
 800b520:	0800b4bd 	.word	0x0800b4bd
 800b524:	0800b4bd 	.word	0x0800b4bd
 800b528:	0800b601 	.word	0x0800b601
 800b52c:	6833      	ldr	r3, [r6, #0]
 800b52e:	1d1a      	adds	r2, r3, #4
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	6032      	str	r2, [r6, #0]
 800b534:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b538:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b53c:	2301      	movs	r3, #1
 800b53e:	e09c      	b.n	800b67a <_printf_i+0x1e6>
 800b540:	6833      	ldr	r3, [r6, #0]
 800b542:	6820      	ldr	r0, [r4, #0]
 800b544:	1d19      	adds	r1, r3, #4
 800b546:	6031      	str	r1, [r6, #0]
 800b548:	0606      	lsls	r6, r0, #24
 800b54a:	d501      	bpl.n	800b550 <_printf_i+0xbc>
 800b54c:	681d      	ldr	r5, [r3, #0]
 800b54e:	e003      	b.n	800b558 <_printf_i+0xc4>
 800b550:	0645      	lsls	r5, r0, #25
 800b552:	d5fb      	bpl.n	800b54c <_printf_i+0xb8>
 800b554:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b558:	2d00      	cmp	r5, #0
 800b55a:	da03      	bge.n	800b564 <_printf_i+0xd0>
 800b55c:	232d      	movs	r3, #45	@ 0x2d
 800b55e:	426d      	negs	r5, r5
 800b560:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b564:	4858      	ldr	r0, [pc, #352]	@ (800b6c8 <_printf_i+0x234>)
 800b566:	230a      	movs	r3, #10
 800b568:	e011      	b.n	800b58e <_printf_i+0xfa>
 800b56a:	6821      	ldr	r1, [r4, #0]
 800b56c:	6833      	ldr	r3, [r6, #0]
 800b56e:	0608      	lsls	r0, r1, #24
 800b570:	f853 5b04 	ldr.w	r5, [r3], #4
 800b574:	d402      	bmi.n	800b57c <_printf_i+0xe8>
 800b576:	0649      	lsls	r1, r1, #25
 800b578:	bf48      	it	mi
 800b57a:	b2ad      	uxthmi	r5, r5
 800b57c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b57e:	4852      	ldr	r0, [pc, #328]	@ (800b6c8 <_printf_i+0x234>)
 800b580:	6033      	str	r3, [r6, #0]
 800b582:	bf14      	ite	ne
 800b584:	230a      	movne	r3, #10
 800b586:	2308      	moveq	r3, #8
 800b588:	2100      	movs	r1, #0
 800b58a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b58e:	6866      	ldr	r6, [r4, #4]
 800b590:	60a6      	str	r6, [r4, #8]
 800b592:	2e00      	cmp	r6, #0
 800b594:	db05      	blt.n	800b5a2 <_printf_i+0x10e>
 800b596:	6821      	ldr	r1, [r4, #0]
 800b598:	432e      	orrs	r6, r5
 800b59a:	f021 0104 	bic.w	r1, r1, #4
 800b59e:	6021      	str	r1, [r4, #0]
 800b5a0:	d04b      	beq.n	800b63a <_printf_i+0x1a6>
 800b5a2:	4616      	mov	r6, r2
 800b5a4:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5a8:	fb03 5711 	mls	r7, r3, r1, r5
 800b5ac:	5dc7      	ldrb	r7, [r0, r7]
 800b5ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5b2:	462f      	mov	r7, r5
 800b5b4:	42bb      	cmp	r3, r7
 800b5b6:	460d      	mov	r5, r1
 800b5b8:	d9f4      	bls.n	800b5a4 <_printf_i+0x110>
 800b5ba:	2b08      	cmp	r3, #8
 800b5bc:	d10b      	bne.n	800b5d6 <_printf_i+0x142>
 800b5be:	6823      	ldr	r3, [r4, #0]
 800b5c0:	07df      	lsls	r7, r3, #31
 800b5c2:	d508      	bpl.n	800b5d6 <_printf_i+0x142>
 800b5c4:	6923      	ldr	r3, [r4, #16]
 800b5c6:	6861      	ldr	r1, [r4, #4]
 800b5c8:	4299      	cmp	r1, r3
 800b5ca:	bfde      	ittt	le
 800b5cc:	2330      	movle	r3, #48	@ 0x30
 800b5ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b5d2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b5d6:	1b92      	subs	r2, r2, r6
 800b5d8:	6122      	str	r2, [r4, #16]
 800b5da:	f8cd a000 	str.w	sl, [sp]
 800b5de:	464b      	mov	r3, r9
 800b5e0:	aa03      	add	r2, sp, #12
 800b5e2:	4621      	mov	r1, r4
 800b5e4:	4640      	mov	r0, r8
 800b5e6:	f7ff fee7 	bl	800b3b8 <_printf_common>
 800b5ea:	3001      	adds	r0, #1
 800b5ec:	d14a      	bne.n	800b684 <_printf_i+0x1f0>
 800b5ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b5f2:	b004      	add	sp, #16
 800b5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5f8:	6823      	ldr	r3, [r4, #0]
 800b5fa:	f043 0320 	orr.w	r3, r3, #32
 800b5fe:	6023      	str	r3, [r4, #0]
 800b600:	4832      	ldr	r0, [pc, #200]	@ (800b6cc <_printf_i+0x238>)
 800b602:	2778      	movs	r7, #120	@ 0x78
 800b604:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b608:	6823      	ldr	r3, [r4, #0]
 800b60a:	6831      	ldr	r1, [r6, #0]
 800b60c:	061f      	lsls	r7, r3, #24
 800b60e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b612:	d402      	bmi.n	800b61a <_printf_i+0x186>
 800b614:	065f      	lsls	r7, r3, #25
 800b616:	bf48      	it	mi
 800b618:	b2ad      	uxthmi	r5, r5
 800b61a:	6031      	str	r1, [r6, #0]
 800b61c:	07d9      	lsls	r1, r3, #31
 800b61e:	bf44      	itt	mi
 800b620:	f043 0320 	orrmi.w	r3, r3, #32
 800b624:	6023      	strmi	r3, [r4, #0]
 800b626:	b11d      	cbz	r5, 800b630 <_printf_i+0x19c>
 800b628:	2310      	movs	r3, #16
 800b62a:	e7ad      	b.n	800b588 <_printf_i+0xf4>
 800b62c:	4826      	ldr	r0, [pc, #152]	@ (800b6c8 <_printf_i+0x234>)
 800b62e:	e7e9      	b.n	800b604 <_printf_i+0x170>
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	f023 0320 	bic.w	r3, r3, #32
 800b636:	6023      	str	r3, [r4, #0]
 800b638:	e7f6      	b.n	800b628 <_printf_i+0x194>
 800b63a:	4616      	mov	r6, r2
 800b63c:	e7bd      	b.n	800b5ba <_printf_i+0x126>
 800b63e:	6833      	ldr	r3, [r6, #0]
 800b640:	6825      	ldr	r5, [r4, #0]
 800b642:	6961      	ldr	r1, [r4, #20]
 800b644:	1d18      	adds	r0, r3, #4
 800b646:	6030      	str	r0, [r6, #0]
 800b648:	062e      	lsls	r6, r5, #24
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	d501      	bpl.n	800b652 <_printf_i+0x1be>
 800b64e:	6019      	str	r1, [r3, #0]
 800b650:	e002      	b.n	800b658 <_printf_i+0x1c4>
 800b652:	0668      	lsls	r0, r5, #25
 800b654:	d5fb      	bpl.n	800b64e <_printf_i+0x1ba>
 800b656:	8019      	strh	r1, [r3, #0]
 800b658:	2300      	movs	r3, #0
 800b65a:	6123      	str	r3, [r4, #16]
 800b65c:	4616      	mov	r6, r2
 800b65e:	e7bc      	b.n	800b5da <_printf_i+0x146>
 800b660:	6833      	ldr	r3, [r6, #0]
 800b662:	1d1a      	adds	r2, r3, #4
 800b664:	6032      	str	r2, [r6, #0]
 800b666:	681e      	ldr	r6, [r3, #0]
 800b668:	6862      	ldr	r2, [r4, #4]
 800b66a:	2100      	movs	r1, #0
 800b66c:	4630      	mov	r0, r6
 800b66e:	f7f4 fd97 	bl	80001a0 <memchr>
 800b672:	b108      	cbz	r0, 800b678 <_printf_i+0x1e4>
 800b674:	1b80      	subs	r0, r0, r6
 800b676:	6060      	str	r0, [r4, #4]
 800b678:	6863      	ldr	r3, [r4, #4]
 800b67a:	6123      	str	r3, [r4, #16]
 800b67c:	2300      	movs	r3, #0
 800b67e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b682:	e7aa      	b.n	800b5da <_printf_i+0x146>
 800b684:	6923      	ldr	r3, [r4, #16]
 800b686:	4632      	mov	r2, r6
 800b688:	4649      	mov	r1, r9
 800b68a:	4640      	mov	r0, r8
 800b68c:	47d0      	blx	sl
 800b68e:	3001      	adds	r0, #1
 800b690:	d0ad      	beq.n	800b5ee <_printf_i+0x15a>
 800b692:	6823      	ldr	r3, [r4, #0]
 800b694:	079b      	lsls	r3, r3, #30
 800b696:	d413      	bmi.n	800b6c0 <_printf_i+0x22c>
 800b698:	68e0      	ldr	r0, [r4, #12]
 800b69a:	9b03      	ldr	r3, [sp, #12]
 800b69c:	4298      	cmp	r0, r3
 800b69e:	bfb8      	it	lt
 800b6a0:	4618      	movlt	r0, r3
 800b6a2:	e7a6      	b.n	800b5f2 <_printf_i+0x15e>
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	4632      	mov	r2, r6
 800b6a8:	4649      	mov	r1, r9
 800b6aa:	4640      	mov	r0, r8
 800b6ac:	47d0      	blx	sl
 800b6ae:	3001      	adds	r0, #1
 800b6b0:	d09d      	beq.n	800b5ee <_printf_i+0x15a>
 800b6b2:	3501      	adds	r5, #1
 800b6b4:	68e3      	ldr	r3, [r4, #12]
 800b6b6:	9903      	ldr	r1, [sp, #12]
 800b6b8:	1a5b      	subs	r3, r3, r1
 800b6ba:	42ab      	cmp	r3, r5
 800b6bc:	dcf2      	bgt.n	800b6a4 <_printf_i+0x210>
 800b6be:	e7eb      	b.n	800b698 <_printf_i+0x204>
 800b6c0:	2500      	movs	r5, #0
 800b6c2:	f104 0619 	add.w	r6, r4, #25
 800b6c6:	e7f5      	b.n	800b6b4 <_printf_i+0x220>
 800b6c8:	0800d16d 	.word	0x0800d16d
 800b6cc:	0800d17e 	.word	0x0800d17e

0800b6d0 <_scanf_chars>:
 800b6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6d4:	4615      	mov	r5, r2
 800b6d6:	688a      	ldr	r2, [r1, #8]
 800b6d8:	4680      	mov	r8, r0
 800b6da:	460c      	mov	r4, r1
 800b6dc:	b932      	cbnz	r2, 800b6ec <_scanf_chars+0x1c>
 800b6de:	698a      	ldr	r2, [r1, #24]
 800b6e0:	2a00      	cmp	r2, #0
 800b6e2:	bf14      	ite	ne
 800b6e4:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800b6e8:	2201      	moveq	r2, #1
 800b6ea:	608a      	str	r2, [r1, #8]
 800b6ec:	6822      	ldr	r2, [r4, #0]
 800b6ee:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800b780 <_scanf_chars+0xb0>
 800b6f2:	06d1      	lsls	r1, r2, #27
 800b6f4:	bf5f      	itttt	pl
 800b6f6:	681a      	ldrpl	r2, [r3, #0]
 800b6f8:	1d11      	addpl	r1, r2, #4
 800b6fa:	6019      	strpl	r1, [r3, #0]
 800b6fc:	6816      	ldrpl	r6, [r2, #0]
 800b6fe:	2700      	movs	r7, #0
 800b700:	69a0      	ldr	r0, [r4, #24]
 800b702:	b188      	cbz	r0, 800b728 <_scanf_chars+0x58>
 800b704:	2801      	cmp	r0, #1
 800b706:	d107      	bne.n	800b718 <_scanf_chars+0x48>
 800b708:	682b      	ldr	r3, [r5, #0]
 800b70a:	781a      	ldrb	r2, [r3, #0]
 800b70c:	6963      	ldr	r3, [r4, #20]
 800b70e:	5c9b      	ldrb	r3, [r3, r2]
 800b710:	b953      	cbnz	r3, 800b728 <_scanf_chars+0x58>
 800b712:	2f00      	cmp	r7, #0
 800b714:	d031      	beq.n	800b77a <_scanf_chars+0xaa>
 800b716:	e022      	b.n	800b75e <_scanf_chars+0x8e>
 800b718:	2802      	cmp	r0, #2
 800b71a:	d120      	bne.n	800b75e <_scanf_chars+0x8e>
 800b71c:	682b      	ldr	r3, [r5, #0]
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b724:	071b      	lsls	r3, r3, #28
 800b726:	d41a      	bmi.n	800b75e <_scanf_chars+0x8e>
 800b728:	6823      	ldr	r3, [r4, #0]
 800b72a:	06da      	lsls	r2, r3, #27
 800b72c:	bf5e      	ittt	pl
 800b72e:	682b      	ldrpl	r3, [r5, #0]
 800b730:	781b      	ldrbpl	r3, [r3, #0]
 800b732:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b736:	682a      	ldr	r2, [r5, #0]
 800b738:	686b      	ldr	r3, [r5, #4]
 800b73a:	3201      	adds	r2, #1
 800b73c:	602a      	str	r2, [r5, #0]
 800b73e:	68a2      	ldr	r2, [r4, #8]
 800b740:	3b01      	subs	r3, #1
 800b742:	3a01      	subs	r2, #1
 800b744:	606b      	str	r3, [r5, #4]
 800b746:	3701      	adds	r7, #1
 800b748:	60a2      	str	r2, [r4, #8]
 800b74a:	b142      	cbz	r2, 800b75e <_scanf_chars+0x8e>
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	dcd7      	bgt.n	800b700 <_scanf_chars+0x30>
 800b750:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b754:	4629      	mov	r1, r5
 800b756:	4640      	mov	r0, r8
 800b758:	4798      	blx	r3
 800b75a:	2800      	cmp	r0, #0
 800b75c:	d0d0      	beq.n	800b700 <_scanf_chars+0x30>
 800b75e:	6823      	ldr	r3, [r4, #0]
 800b760:	f013 0310 	ands.w	r3, r3, #16
 800b764:	d105      	bne.n	800b772 <_scanf_chars+0xa2>
 800b766:	68e2      	ldr	r2, [r4, #12]
 800b768:	3201      	adds	r2, #1
 800b76a:	60e2      	str	r2, [r4, #12]
 800b76c:	69a2      	ldr	r2, [r4, #24]
 800b76e:	b102      	cbz	r2, 800b772 <_scanf_chars+0xa2>
 800b770:	7033      	strb	r3, [r6, #0]
 800b772:	6923      	ldr	r3, [r4, #16]
 800b774:	443b      	add	r3, r7
 800b776:	6123      	str	r3, [r4, #16]
 800b778:	2000      	movs	r0, #0
 800b77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b77e:	bf00      	nop
 800b780:	0800d1ab 	.word	0x0800d1ab

0800b784 <_scanf_i>:
 800b784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b788:	4698      	mov	r8, r3
 800b78a:	4b74      	ldr	r3, [pc, #464]	@ (800b95c <_scanf_i+0x1d8>)
 800b78c:	460c      	mov	r4, r1
 800b78e:	4682      	mov	sl, r0
 800b790:	4616      	mov	r6, r2
 800b792:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b796:	b087      	sub	sp, #28
 800b798:	ab03      	add	r3, sp, #12
 800b79a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b79e:	4b70      	ldr	r3, [pc, #448]	@ (800b960 <_scanf_i+0x1dc>)
 800b7a0:	69a1      	ldr	r1, [r4, #24]
 800b7a2:	4a70      	ldr	r2, [pc, #448]	@ (800b964 <_scanf_i+0x1e0>)
 800b7a4:	2903      	cmp	r1, #3
 800b7a6:	bf08      	it	eq
 800b7a8:	461a      	moveq	r2, r3
 800b7aa:	68a3      	ldr	r3, [r4, #8]
 800b7ac:	9201      	str	r2, [sp, #4]
 800b7ae:	1e5a      	subs	r2, r3, #1
 800b7b0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b7b4:	bf88      	it	hi
 800b7b6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b7ba:	4627      	mov	r7, r4
 800b7bc:	bf82      	ittt	hi
 800b7be:	eb03 0905 	addhi.w	r9, r3, r5
 800b7c2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b7c6:	60a3      	strhi	r3, [r4, #8]
 800b7c8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b7cc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800b7d0:	bf98      	it	ls
 800b7d2:	f04f 0900 	movls.w	r9, #0
 800b7d6:	6023      	str	r3, [r4, #0]
 800b7d8:	463d      	mov	r5, r7
 800b7da:	f04f 0b00 	mov.w	fp, #0
 800b7de:	6831      	ldr	r1, [r6, #0]
 800b7e0:	ab03      	add	r3, sp, #12
 800b7e2:	7809      	ldrb	r1, [r1, #0]
 800b7e4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b7e8:	2202      	movs	r2, #2
 800b7ea:	f7f4 fcd9 	bl	80001a0 <memchr>
 800b7ee:	b328      	cbz	r0, 800b83c <_scanf_i+0xb8>
 800b7f0:	f1bb 0f01 	cmp.w	fp, #1
 800b7f4:	d159      	bne.n	800b8aa <_scanf_i+0x126>
 800b7f6:	6862      	ldr	r2, [r4, #4]
 800b7f8:	b92a      	cbnz	r2, 800b806 <_scanf_i+0x82>
 800b7fa:	6822      	ldr	r2, [r4, #0]
 800b7fc:	2108      	movs	r1, #8
 800b7fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b802:	6061      	str	r1, [r4, #4]
 800b804:	6022      	str	r2, [r4, #0]
 800b806:	6822      	ldr	r2, [r4, #0]
 800b808:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800b80c:	6022      	str	r2, [r4, #0]
 800b80e:	68a2      	ldr	r2, [r4, #8]
 800b810:	1e51      	subs	r1, r2, #1
 800b812:	60a1      	str	r1, [r4, #8]
 800b814:	b192      	cbz	r2, 800b83c <_scanf_i+0xb8>
 800b816:	6832      	ldr	r2, [r6, #0]
 800b818:	1c51      	adds	r1, r2, #1
 800b81a:	6031      	str	r1, [r6, #0]
 800b81c:	7812      	ldrb	r2, [r2, #0]
 800b81e:	f805 2b01 	strb.w	r2, [r5], #1
 800b822:	6872      	ldr	r2, [r6, #4]
 800b824:	3a01      	subs	r2, #1
 800b826:	2a00      	cmp	r2, #0
 800b828:	6072      	str	r2, [r6, #4]
 800b82a:	dc07      	bgt.n	800b83c <_scanf_i+0xb8>
 800b82c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800b830:	4631      	mov	r1, r6
 800b832:	4650      	mov	r0, sl
 800b834:	4790      	blx	r2
 800b836:	2800      	cmp	r0, #0
 800b838:	f040 8085 	bne.w	800b946 <_scanf_i+0x1c2>
 800b83c:	f10b 0b01 	add.w	fp, fp, #1
 800b840:	f1bb 0f03 	cmp.w	fp, #3
 800b844:	d1cb      	bne.n	800b7de <_scanf_i+0x5a>
 800b846:	6863      	ldr	r3, [r4, #4]
 800b848:	b90b      	cbnz	r3, 800b84e <_scanf_i+0xca>
 800b84a:	230a      	movs	r3, #10
 800b84c:	6063      	str	r3, [r4, #4]
 800b84e:	6863      	ldr	r3, [r4, #4]
 800b850:	4945      	ldr	r1, [pc, #276]	@ (800b968 <_scanf_i+0x1e4>)
 800b852:	6960      	ldr	r0, [r4, #20]
 800b854:	1ac9      	subs	r1, r1, r3
 800b856:	f000 f889 	bl	800b96c <__sccl>
 800b85a:	f04f 0b00 	mov.w	fp, #0
 800b85e:	68a3      	ldr	r3, [r4, #8]
 800b860:	6822      	ldr	r2, [r4, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d03d      	beq.n	800b8e2 <_scanf_i+0x15e>
 800b866:	6831      	ldr	r1, [r6, #0]
 800b868:	6960      	ldr	r0, [r4, #20]
 800b86a:	f891 c000 	ldrb.w	ip, [r1]
 800b86e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b872:	2800      	cmp	r0, #0
 800b874:	d035      	beq.n	800b8e2 <_scanf_i+0x15e>
 800b876:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800b87a:	d124      	bne.n	800b8c6 <_scanf_i+0x142>
 800b87c:	0510      	lsls	r0, r2, #20
 800b87e:	d522      	bpl.n	800b8c6 <_scanf_i+0x142>
 800b880:	f10b 0b01 	add.w	fp, fp, #1
 800b884:	f1b9 0f00 	cmp.w	r9, #0
 800b888:	d003      	beq.n	800b892 <_scanf_i+0x10e>
 800b88a:	3301      	adds	r3, #1
 800b88c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800b890:	60a3      	str	r3, [r4, #8]
 800b892:	6873      	ldr	r3, [r6, #4]
 800b894:	3b01      	subs	r3, #1
 800b896:	2b00      	cmp	r3, #0
 800b898:	6073      	str	r3, [r6, #4]
 800b89a:	dd1b      	ble.n	800b8d4 <_scanf_i+0x150>
 800b89c:	6833      	ldr	r3, [r6, #0]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	6033      	str	r3, [r6, #0]
 800b8a2:	68a3      	ldr	r3, [r4, #8]
 800b8a4:	3b01      	subs	r3, #1
 800b8a6:	60a3      	str	r3, [r4, #8]
 800b8a8:	e7d9      	b.n	800b85e <_scanf_i+0xda>
 800b8aa:	f1bb 0f02 	cmp.w	fp, #2
 800b8ae:	d1ae      	bne.n	800b80e <_scanf_i+0x8a>
 800b8b0:	6822      	ldr	r2, [r4, #0]
 800b8b2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800b8b6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b8ba:	d1bf      	bne.n	800b83c <_scanf_i+0xb8>
 800b8bc:	2110      	movs	r1, #16
 800b8be:	6061      	str	r1, [r4, #4]
 800b8c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b8c4:	e7a2      	b.n	800b80c <_scanf_i+0x88>
 800b8c6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800b8ca:	6022      	str	r2, [r4, #0]
 800b8cc:	780b      	ldrb	r3, [r1, #0]
 800b8ce:	f805 3b01 	strb.w	r3, [r5], #1
 800b8d2:	e7de      	b.n	800b892 <_scanf_i+0x10e>
 800b8d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b8d8:	4631      	mov	r1, r6
 800b8da:	4650      	mov	r0, sl
 800b8dc:	4798      	blx	r3
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	d0df      	beq.n	800b8a2 <_scanf_i+0x11e>
 800b8e2:	6823      	ldr	r3, [r4, #0]
 800b8e4:	05d9      	lsls	r1, r3, #23
 800b8e6:	d50d      	bpl.n	800b904 <_scanf_i+0x180>
 800b8e8:	42bd      	cmp	r5, r7
 800b8ea:	d909      	bls.n	800b900 <_scanf_i+0x17c>
 800b8ec:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b8f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b8f4:	4632      	mov	r2, r6
 800b8f6:	4650      	mov	r0, sl
 800b8f8:	4798      	blx	r3
 800b8fa:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800b8fe:	464d      	mov	r5, r9
 800b900:	42bd      	cmp	r5, r7
 800b902:	d028      	beq.n	800b956 <_scanf_i+0x1d2>
 800b904:	6822      	ldr	r2, [r4, #0]
 800b906:	f012 0210 	ands.w	r2, r2, #16
 800b90a:	d113      	bne.n	800b934 <_scanf_i+0x1b0>
 800b90c:	702a      	strb	r2, [r5, #0]
 800b90e:	6863      	ldr	r3, [r4, #4]
 800b910:	9e01      	ldr	r6, [sp, #4]
 800b912:	4639      	mov	r1, r7
 800b914:	4650      	mov	r0, sl
 800b916:	47b0      	blx	r6
 800b918:	f8d8 3000 	ldr.w	r3, [r8]
 800b91c:	6821      	ldr	r1, [r4, #0]
 800b91e:	1d1a      	adds	r2, r3, #4
 800b920:	f8c8 2000 	str.w	r2, [r8]
 800b924:	f011 0f20 	tst.w	r1, #32
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	d00f      	beq.n	800b94c <_scanf_i+0x1c8>
 800b92c:	6018      	str	r0, [r3, #0]
 800b92e:	68e3      	ldr	r3, [r4, #12]
 800b930:	3301      	adds	r3, #1
 800b932:	60e3      	str	r3, [r4, #12]
 800b934:	6923      	ldr	r3, [r4, #16]
 800b936:	1bed      	subs	r5, r5, r7
 800b938:	445d      	add	r5, fp
 800b93a:	442b      	add	r3, r5
 800b93c:	6123      	str	r3, [r4, #16]
 800b93e:	2000      	movs	r0, #0
 800b940:	b007      	add	sp, #28
 800b942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b946:	f04f 0b00 	mov.w	fp, #0
 800b94a:	e7ca      	b.n	800b8e2 <_scanf_i+0x15e>
 800b94c:	07ca      	lsls	r2, r1, #31
 800b94e:	bf4c      	ite	mi
 800b950:	8018      	strhmi	r0, [r3, #0]
 800b952:	6018      	strpl	r0, [r3, #0]
 800b954:	e7eb      	b.n	800b92e <_scanf_i+0x1aa>
 800b956:	2001      	movs	r0, #1
 800b958:	e7f2      	b.n	800b940 <_scanf_i+0x1bc>
 800b95a:	bf00      	nop
 800b95c:	0800cee0 	.word	0x0800cee0
 800b960:	0800bd79 	.word	0x0800bd79
 800b964:	0800be59 	.word	0x0800be59
 800b968:	0800d19f 	.word	0x0800d19f

0800b96c <__sccl>:
 800b96c:	b570      	push	{r4, r5, r6, lr}
 800b96e:	780b      	ldrb	r3, [r1, #0]
 800b970:	4604      	mov	r4, r0
 800b972:	2b5e      	cmp	r3, #94	@ 0x5e
 800b974:	bf0b      	itete	eq
 800b976:	784b      	ldrbeq	r3, [r1, #1]
 800b978:	1c4a      	addne	r2, r1, #1
 800b97a:	1c8a      	addeq	r2, r1, #2
 800b97c:	2100      	movne	r1, #0
 800b97e:	bf08      	it	eq
 800b980:	2101      	moveq	r1, #1
 800b982:	3801      	subs	r0, #1
 800b984:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800b988:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b98c:	42a8      	cmp	r0, r5
 800b98e:	d1fb      	bne.n	800b988 <__sccl+0x1c>
 800b990:	b90b      	cbnz	r3, 800b996 <__sccl+0x2a>
 800b992:	1e50      	subs	r0, r2, #1
 800b994:	bd70      	pop	{r4, r5, r6, pc}
 800b996:	f081 0101 	eor.w	r1, r1, #1
 800b99a:	54e1      	strb	r1, [r4, r3]
 800b99c:	4610      	mov	r0, r2
 800b99e:	4602      	mov	r2, r0
 800b9a0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b9a4:	2d2d      	cmp	r5, #45	@ 0x2d
 800b9a6:	d005      	beq.n	800b9b4 <__sccl+0x48>
 800b9a8:	2d5d      	cmp	r5, #93	@ 0x5d
 800b9aa:	d016      	beq.n	800b9da <__sccl+0x6e>
 800b9ac:	2d00      	cmp	r5, #0
 800b9ae:	d0f1      	beq.n	800b994 <__sccl+0x28>
 800b9b0:	462b      	mov	r3, r5
 800b9b2:	e7f2      	b.n	800b99a <__sccl+0x2e>
 800b9b4:	7846      	ldrb	r6, [r0, #1]
 800b9b6:	2e5d      	cmp	r6, #93	@ 0x5d
 800b9b8:	d0fa      	beq.n	800b9b0 <__sccl+0x44>
 800b9ba:	42b3      	cmp	r3, r6
 800b9bc:	dcf8      	bgt.n	800b9b0 <__sccl+0x44>
 800b9be:	3002      	adds	r0, #2
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	3201      	adds	r2, #1
 800b9c4:	4296      	cmp	r6, r2
 800b9c6:	54a1      	strb	r1, [r4, r2]
 800b9c8:	dcfb      	bgt.n	800b9c2 <__sccl+0x56>
 800b9ca:	1af2      	subs	r2, r6, r3
 800b9cc:	3a01      	subs	r2, #1
 800b9ce:	1c5d      	adds	r5, r3, #1
 800b9d0:	42b3      	cmp	r3, r6
 800b9d2:	bfa8      	it	ge
 800b9d4:	2200      	movge	r2, #0
 800b9d6:	18ab      	adds	r3, r5, r2
 800b9d8:	e7e1      	b.n	800b99e <__sccl+0x32>
 800b9da:	4610      	mov	r0, r2
 800b9dc:	e7da      	b.n	800b994 <__sccl+0x28>
	...

0800b9e0 <__sflush_r>:
 800b9e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e8:	0716      	lsls	r6, r2, #28
 800b9ea:	4605      	mov	r5, r0
 800b9ec:	460c      	mov	r4, r1
 800b9ee:	d454      	bmi.n	800ba9a <__sflush_r+0xba>
 800b9f0:	684b      	ldr	r3, [r1, #4]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	dc02      	bgt.n	800b9fc <__sflush_r+0x1c>
 800b9f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	dd48      	ble.n	800ba8e <__sflush_r+0xae>
 800b9fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9fe:	2e00      	cmp	r6, #0
 800ba00:	d045      	beq.n	800ba8e <__sflush_r+0xae>
 800ba02:	2300      	movs	r3, #0
 800ba04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ba08:	682f      	ldr	r7, [r5, #0]
 800ba0a:	6a21      	ldr	r1, [r4, #32]
 800ba0c:	602b      	str	r3, [r5, #0]
 800ba0e:	d030      	beq.n	800ba72 <__sflush_r+0x92>
 800ba10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ba12:	89a3      	ldrh	r3, [r4, #12]
 800ba14:	0759      	lsls	r1, r3, #29
 800ba16:	d505      	bpl.n	800ba24 <__sflush_r+0x44>
 800ba18:	6863      	ldr	r3, [r4, #4]
 800ba1a:	1ad2      	subs	r2, r2, r3
 800ba1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ba1e:	b10b      	cbz	r3, 800ba24 <__sflush_r+0x44>
 800ba20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ba22:	1ad2      	subs	r2, r2, r3
 800ba24:	2300      	movs	r3, #0
 800ba26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba28:	6a21      	ldr	r1, [r4, #32]
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	47b0      	blx	r6
 800ba2e:	1c43      	adds	r3, r0, #1
 800ba30:	89a3      	ldrh	r3, [r4, #12]
 800ba32:	d106      	bne.n	800ba42 <__sflush_r+0x62>
 800ba34:	6829      	ldr	r1, [r5, #0]
 800ba36:	291d      	cmp	r1, #29
 800ba38:	d82b      	bhi.n	800ba92 <__sflush_r+0xb2>
 800ba3a:	4a2a      	ldr	r2, [pc, #168]	@ (800bae4 <__sflush_r+0x104>)
 800ba3c:	40ca      	lsrs	r2, r1
 800ba3e:	07d6      	lsls	r6, r2, #31
 800ba40:	d527      	bpl.n	800ba92 <__sflush_r+0xb2>
 800ba42:	2200      	movs	r2, #0
 800ba44:	6062      	str	r2, [r4, #4]
 800ba46:	04d9      	lsls	r1, r3, #19
 800ba48:	6922      	ldr	r2, [r4, #16]
 800ba4a:	6022      	str	r2, [r4, #0]
 800ba4c:	d504      	bpl.n	800ba58 <__sflush_r+0x78>
 800ba4e:	1c42      	adds	r2, r0, #1
 800ba50:	d101      	bne.n	800ba56 <__sflush_r+0x76>
 800ba52:	682b      	ldr	r3, [r5, #0]
 800ba54:	b903      	cbnz	r3, 800ba58 <__sflush_r+0x78>
 800ba56:	6560      	str	r0, [r4, #84]	@ 0x54
 800ba58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba5a:	602f      	str	r7, [r5, #0]
 800ba5c:	b1b9      	cbz	r1, 800ba8e <__sflush_r+0xae>
 800ba5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba62:	4299      	cmp	r1, r3
 800ba64:	d002      	beq.n	800ba6c <__sflush_r+0x8c>
 800ba66:	4628      	mov	r0, r5
 800ba68:	f7fe fff2 	bl	800aa50 <_free_r>
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba70:	e00d      	b.n	800ba8e <__sflush_r+0xae>
 800ba72:	2301      	movs	r3, #1
 800ba74:	4628      	mov	r0, r5
 800ba76:	47b0      	blx	r6
 800ba78:	4602      	mov	r2, r0
 800ba7a:	1c50      	adds	r0, r2, #1
 800ba7c:	d1c9      	bne.n	800ba12 <__sflush_r+0x32>
 800ba7e:	682b      	ldr	r3, [r5, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d0c6      	beq.n	800ba12 <__sflush_r+0x32>
 800ba84:	2b1d      	cmp	r3, #29
 800ba86:	d001      	beq.n	800ba8c <__sflush_r+0xac>
 800ba88:	2b16      	cmp	r3, #22
 800ba8a:	d11e      	bne.n	800baca <__sflush_r+0xea>
 800ba8c:	602f      	str	r7, [r5, #0]
 800ba8e:	2000      	movs	r0, #0
 800ba90:	e022      	b.n	800bad8 <__sflush_r+0xf8>
 800ba92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba96:	b21b      	sxth	r3, r3
 800ba98:	e01b      	b.n	800bad2 <__sflush_r+0xf2>
 800ba9a:	690f      	ldr	r7, [r1, #16]
 800ba9c:	2f00      	cmp	r7, #0
 800ba9e:	d0f6      	beq.n	800ba8e <__sflush_r+0xae>
 800baa0:	0793      	lsls	r3, r2, #30
 800baa2:	680e      	ldr	r6, [r1, #0]
 800baa4:	bf08      	it	eq
 800baa6:	694b      	ldreq	r3, [r1, #20]
 800baa8:	600f      	str	r7, [r1, #0]
 800baaa:	bf18      	it	ne
 800baac:	2300      	movne	r3, #0
 800baae:	eba6 0807 	sub.w	r8, r6, r7
 800bab2:	608b      	str	r3, [r1, #8]
 800bab4:	f1b8 0f00 	cmp.w	r8, #0
 800bab8:	dde9      	ble.n	800ba8e <__sflush_r+0xae>
 800baba:	6a21      	ldr	r1, [r4, #32]
 800babc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800babe:	4643      	mov	r3, r8
 800bac0:	463a      	mov	r2, r7
 800bac2:	4628      	mov	r0, r5
 800bac4:	47b0      	blx	r6
 800bac6:	2800      	cmp	r0, #0
 800bac8:	dc08      	bgt.n	800badc <__sflush_r+0xfc>
 800baca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bad2:	81a3      	strh	r3, [r4, #12]
 800bad4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800badc:	4407      	add	r7, r0
 800bade:	eba8 0800 	sub.w	r8, r8, r0
 800bae2:	e7e7      	b.n	800bab4 <__sflush_r+0xd4>
 800bae4:	20400001 	.word	0x20400001

0800bae8 <_fflush_r>:
 800bae8:	b538      	push	{r3, r4, r5, lr}
 800baea:	690b      	ldr	r3, [r1, #16]
 800baec:	4605      	mov	r5, r0
 800baee:	460c      	mov	r4, r1
 800baf0:	b913      	cbnz	r3, 800baf8 <_fflush_r+0x10>
 800baf2:	2500      	movs	r5, #0
 800baf4:	4628      	mov	r0, r5
 800baf6:	bd38      	pop	{r3, r4, r5, pc}
 800baf8:	b118      	cbz	r0, 800bb02 <_fflush_r+0x1a>
 800bafa:	6a03      	ldr	r3, [r0, #32]
 800bafc:	b90b      	cbnz	r3, 800bb02 <_fflush_r+0x1a>
 800bafe:	f7fe fe5b 	bl	800a7b8 <__sinit>
 800bb02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d0f3      	beq.n	800baf2 <_fflush_r+0xa>
 800bb0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bb0c:	07d0      	lsls	r0, r2, #31
 800bb0e:	d404      	bmi.n	800bb1a <_fflush_r+0x32>
 800bb10:	0599      	lsls	r1, r3, #22
 800bb12:	d402      	bmi.n	800bb1a <_fflush_r+0x32>
 800bb14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb16:	f7fe ff72 	bl	800a9fe <__retarget_lock_acquire_recursive>
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	4621      	mov	r1, r4
 800bb1e:	f7ff ff5f 	bl	800b9e0 <__sflush_r>
 800bb22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb24:	07da      	lsls	r2, r3, #31
 800bb26:	4605      	mov	r5, r0
 800bb28:	d4e4      	bmi.n	800baf4 <_fflush_r+0xc>
 800bb2a:	89a3      	ldrh	r3, [r4, #12]
 800bb2c:	059b      	lsls	r3, r3, #22
 800bb2e:	d4e1      	bmi.n	800baf4 <_fflush_r+0xc>
 800bb30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb32:	f7fe ff65 	bl	800aa00 <__retarget_lock_release_recursive>
 800bb36:	e7dd      	b.n	800baf4 <_fflush_r+0xc>

0800bb38 <__submore>:
 800bb38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb3c:	460c      	mov	r4, r1
 800bb3e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bb40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb44:	4299      	cmp	r1, r3
 800bb46:	d11d      	bne.n	800bb84 <__submore+0x4c>
 800bb48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800bb4c:	f7fe fc88 	bl	800a460 <_malloc_r>
 800bb50:	b918      	cbnz	r0, 800bb5a <__submore+0x22>
 800bb52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb5e:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bb60:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800bb64:	6360      	str	r0, [r4, #52]	@ 0x34
 800bb66:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800bb6a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800bb6e:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800bb72:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bb76:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800bb7a:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800bb7e:	6020      	str	r0, [r4, #0]
 800bb80:	2000      	movs	r0, #0
 800bb82:	e7e8      	b.n	800bb56 <__submore+0x1e>
 800bb84:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800bb86:	0077      	lsls	r7, r6, #1
 800bb88:	463a      	mov	r2, r7
 800bb8a:	f000 f80f 	bl	800bbac <_realloc_r>
 800bb8e:	4605      	mov	r5, r0
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d0de      	beq.n	800bb52 <__submore+0x1a>
 800bb94:	eb00 0806 	add.w	r8, r0, r6
 800bb98:	4601      	mov	r1, r0
 800bb9a:	4632      	mov	r2, r6
 800bb9c:	4640      	mov	r0, r8
 800bb9e:	f7fe ff41 	bl	800aa24 <memcpy>
 800bba2:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800bba6:	f8c4 8000 	str.w	r8, [r4]
 800bbaa:	e7e9      	b.n	800bb80 <__submore+0x48>

0800bbac <_realloc_r>:
 800bbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb0:	4607      	mov	r7, r0
 800bbb2:	4614      	mov	r4, r2
 800bbb4:	460d      	mov	r5, r1
 800bbb6:	b921      	cbnz	r1, 800bbc2 <_realloc_r+0x16>
 800bbb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbbc:	4611      	mov	r1, r2
 800bbbe:	f7fe bc4f 	b.w	800a460 <_malloc_r>
 800bbc2:	b92a      	cbnz	r2, 800bbd0 <_realloc_r+0x24>
 800bbc4:	f7fe ff44 	bl	800aa50 <_free_r>
 800bbc8:	4625      	mov	r5, r4
 800bbca:	4628      	mov	r0, r5
 800bbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbd0:	f000 fa7c 	bl	800c0cc <_malloc_usable_size_r>
 800bbd4:	4284      	cmp	r4, r0
 800bbd6:	4606      	mov	r6, r0
 800bbd8:	d802      	bhi.n	800bbe0 <_realloc_r+0x34>
 800bbda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbde:	d8f4      	bhi.n	800bbca <_realloc_r+0x1e>
 800bbe0:	4621      	mov	r1, r4
 800bbe2:	4638      	mov	r0, r7
 800bbe4:	f7fe fc3c 	bl	800a460 <_malloc_r>
 800bbe8:	4680      	mov	r8, r0
 800bbea:	b908      	cbnz	r0, 800bbf0 <_realloc_r+0x44>
 800bbec:	4645      	mov	r5, r8
 800bbee:	e7ec      	b.n	800bbca <_realloc_r+0x1e>
 800bbf0:	42b4      	cmp	r4, r6
 800bbf2:	4622      	mov	r2, r4
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	bf28      	it	cs
 800bbf8:	4632      	movcs	r2, r6
 800bbfa:	f7fe ff13 	bl	800aa24 <memcpy>
 800bbfe:	4629      	mov	r1, r5
 800bc00:	4638      	mov	r0, r7
 800bc02:	f7fe ff25 	bl	800aa50 <_free_r>
 800bc06:	e7f1      	b.n	800bbec <_realloc_r+0x40>

0800bc08 <__swbuf_r>:
 800bc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0a:	460e      	mov	r6, r1
 800bc0c:	4614      	mov	r4, r2
 800bc0e:	4605      	mov	r5, r0
 800bc10:	b118      	cbz	r0, 800bc1a <__swbuf_r+0x12>
 800bc12:	6a03      	ldr	r3, [r0, #32]
 800bc14:	b90b      	cbnz	r3, 800bc1a <__swbuf_r+0x12>
 800bc16:	f7fe fdcf 	bl	800a7b8 <__sinit>
 800bc1a:	69a3      	ldr	r3, [r4, #24]
 800bc1c:	60a3      	str	r3, [r4, #8]
 800bc1e:	89a3      	ldrh	r3, [r4, #12]
 800bc20:	071a      	lsls	r2, r3, #28
 800bc22:	d501      	bpl.n	800bc28 <__swbuf_r+0x20>
 800bc24:	6923      	ldr	r3, [r4, #16]
 800bc26:	b943      	cbnz	r3, 800bc3a <__swbuf_r+0x32>
 800bc28:	4621      	mov	r1, r4
 800bc2a:	4628      	mov	r0, r5
 800bc2c:	f000 f916 	bl	800be5c <__swsetup_r>
 800bc30:	b118      	cbz	r0, 800bc3a <__swbuf_r+0x32>
 800bc32:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800bc36:	4638      	mov	r0, r7
 800bc38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc3a:	6823      	ldr	r3, [r4, #0]
 800bc3c:	6922      	ldr	r2, [r4, #16]
 800bc3e:	1a98      	subs	r0, r3, r2
 800bc40:	6963      	ldr	r3, [r4, #20]
 800bc42:	b2f6      	uxtb	r6, r6
 800bc44:	4283      	cmp	r3, r0
 800bc46:	4637      	mov	r7, r6
 800bc48:	dc05      	bgt.n	800bc56 <__swbuf_r+0x4e>
 800bc4a:	4621      	mov	r1, r4
 800bc4c:	4628      	mov	r0, r5
 800bc4e:	f7ff ff4b 	bl	800bae8 <_fflush_r>
 800bc52:	2800      	cmp	r0, #0
 800bc54:	d1ed      	bne.n	800bc32 <__swbuf_r+0x2a>
 800bc56:	68a3      	ldr	r3, [r4, #8]
 800bc58:	3b01      	subs	r3, #1
 800bc5a:	60a3      	str	r3, [r4, #8]
 800bc5c:	6823      	ldr	r3, [r4, #0]
 800bc5e:	1c5a      	adds	r2, r3, #1
 800bc60:	6022      	str	r2, [r4, #0]
 800bc62:	701e      	strb	r6, [r3, #0]
 800bc64:	6962      	ldr	r2, [r4, #20]
 800bc66:	1c43      	adds	r3, r0, #1
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d004      	beq.n	800bc76 <__swbuf_r+0x6e>
 800bc6c:	89a3      	ldrh	r3, [r4, #12]
 800bc6e:	07db      	lsls	r3, r3, #31
 800bc70:	d5e1      	bpl.n	800bc36 <__swbuf_r+0x2e>
 800bc72:	2e0a      	cmp	r6, #10
 800bc74:	d1df      	bne.n	800bc36 <__swbuf_r+0x2e>
 800bc76:	4621      	mov	r1, r4
 800bc78:	4628      	mov	r0, r5
 800bc7a:	f7ff ff35 	bl	800bae8 <_fflush_r>
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d0d9      	beq.n	800bc36 <__swbuf_r+0x2e>
 800bc82:	e7d6      	b.n	800bc32 <__swbuf_r+0x2a>

0800bc84 <_strtol_l.isra.0>:
 800bc84:	2b24      	cmp	r3, #36	@ 0x24
 800bc86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc8a:	4686      	mov	lr, r0
 800bc8c:	4690      	mov	r8, r2
 800bc8e:	d801      	bhi.n	800bc94 <_strtol_l.isra.0+0x10>
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d106      	bne.n	800bca2 <_strtol_l.isra.0+0x1e>
 800bc94:	f7fe fe88 	bl	800a9a8 <__errno>
 800bc98:	2316      	movs	r3, #22
 800bc9a:	6003      	str	r3, [r0, #0]
 800bc9c:	2000      	movs	r0, #0
 800bc9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bca2:	4834      	ldr	r0, [pc, #208]	@ (800bd74 <_strtol_l.isra.0+0xf0>)
 800bca4:	460d      	mov	r5, r1
 800bca6:	462a      	mov	r2, r5
 800bca8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bcac:	5d06      	ldrb	r6, [r0, r4]
 800bcae:	f016 0608 	ands.w	r6, r6, #8
 800bcb2:	d1f8      	bne.n	800bca6 <_strtol_l.isra.0+0x22>
 800bcb4:	2c2d      	cmp	r4, #45	@ 0x2d
 800bcb6:	d110      	bne.n	800bcda <_strtol_l.isra.0+0x56>
 800bcb8:	782c      	ldrb	r4, [r5, #0]
 800bcba:	2601      	movs	r6, #1
 800bcbc:	1c95      	adds	r5, r2, #2
 800bcbe:	f033 0210 	bics.w	r2, r3, #16
 800bcc2:	d115      	bne.n	800bcf0 <_strtol_l.isra.0+0x6c>
 800bcc4:	2c30      	cmp	r4, #48	@ 0x30
 800bcc6:	d10d      	bne.n	800bce4 <_strtol_l.isra.0+0x60>
 800bcc8:	782a      	ldrb	r2, [r5, #0]
 800bcca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bcce:	2a58      	cmp	r2, #88	@ 0x58
 800bcd0:	d108      	bne.n	800bce4 <_strtol_l.isra.0+0x60>
 800bcd2:	786c      	ldrb	r4, [r5, #1]
 800bcd4:	3502      	adds	r5, #2
 800bcd6:	2310      	movs	r3, #16
 800bcd8:	e00a      	b.n	800bcf0 <_strtol_l.isra.0+0x6c>
 800bcda:	2c2b      	cmp	r4, #43	@ 0x2b
 800bcdc:	bf04      	itt	eq
 800bcde:	782c      	ldrbeq	r4, [r5, #0]
 800bce0:	1c95      	addeq	r5, r2, #2
 800bce2:	e7ec      	b.n	800bcbe <_strtol_l.isra.0+0x3a>
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d1f6      	bne.n	800bcd6 <_strtol_l.isra.0+0x52>
 800bce8:	2c30      	cmp	r4, #48	@ 0x30
 800bcea:	bf14      	ite	ne
 800bcec:	230a      	movne	r3, #10
 800bcee:	2308      	moveq	r3, #8
 800bcf0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bcf4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	fbbc f9f3 	udiv	r9, ip, r3
 800bcfe:	4610      	mov	r0, r2
 800bd00:	fb03 ca19 	mls	sl, r3, r9, ip
 800bd04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bd08:	2f09      	cmp	r7, #9
 800bd0a:	d80f      	bhi.n	800bd2c <_strtol_l.isra.0+0xa8>
 800bd0c:	463c      	mov	r4, r7
 800bd0e:	42a3      	cmp	r3, r4
 800bd10:	dd1b      	ble.n	800bd4a <_strtol_l.isra.0+0xc6>
 800bd12:	1c57      	adds	r7, r2, #1
 800bd14:	d007      	beq.n	800bd26 <_strtol_l.isra.0+0xa2>
 800bd16:	4581      	cmp	r9, r0
 800bd18:	d314      	bcc.n	800bd44 <_strtol_l.isra.0+0xc0>
 800bd1a:	d101      	bne.n	800bd20 <_strtol_l.isra.0+0x9c>
 800bd1c:	45a2      	cmp	sl, r4
 800bd1e:	db11      	blt.n	800bd44 <_strtol_l.isra.0+0xc0>
 800bd20:	fb00 4003 	mla	r0, r0, r3, r4
 800bd24:	2201      	movs	r2, #1
 800bd26:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd2a:	e7eb      	b.n	800bd04 <_strtol_l.isra.0+0x80>
 800bd2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bd30:	2f19      	cmp	r7, #25
 800bd32:	d801      	bhi.n	800bd38 <_strtol_l.isra.0+0xb4>
 800bd34:	3c37      	subs	r4, #55	@ 0x37
 800bd36:	e7ea      	b.n	800bd0e <_strtol_l.isra.0+0x8a>
 800bd38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bd3c:	2f19      	cmp	r7, #25
 800bd3e:	d804      	bhi.n	800bd4a <_strtol_l.isra.0+0xc6>
 800bd40:	3c57      	subs	r4, #87	@ 0x57
 800bd42:	e7e4      	b.n	800bd0e <_strtol_l.isra.0+0x8a>
 800bd44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd48:	e7ed      	b.n	800bd26 <_strtol_l.isra.0+0xa2>
 800bd4a:	1c53      	adds	r3, r2, #1
 800bd4c:	d108      	bne.n	800bd60 <_strtol_l.isra.0+0xdc>
 800bd4e:	2322      	movs	r3, #34	@ 0x22
 800bd50:	f8ce 3000 	str.w	r3, [lr]
 800bd54:	4660      	mov	r0, ip
 800bd56:	f1b8 0f00 	cmp.w	r8, #0
 800bd5a:	d0a0      	beq.n	800bc9e <_strtol_l.isra.0+0x1a>
 800bd5c:	1e69      	subs	r1, r5, #1
 800bd5e:	e006      	b.n	800bd6e <_strtol_l.isra.0+0xea>
 800bd60:	b106      	cbz	r6, 800bd64 <_strtol_l.isra.0+0xe0>
 800bd62:	4240      	negs	r0, r0
 800bd64:	f1b8 0f00 	cmp.w	r8, #0
 800bd68:	d099      	beq.n	800bc9e <_strtol_l.isra.0+0x1a>
 800bd6a:	2a00      	cmp	r2, #0
 800bd6c:	d1f6      	bne.n	800bd5c <_strtol_l.isra.0+0xd8>
 800bd6e:	f8c8 1000 	str.w	r1, [r8]
 800bd72:	e794      	b.n	800bc9e <_strtol_l.isra.0+0x1a>
 800bd74:	0800d1ab 	.word	0x0800d1ab

0800bd78 <_strtol_r>:
 800bd78:	f7ff bf84 	b.w	800bc84 <_strtol_l.isra.0>

0800bd7c <_strtoul_l.isra.0>:
 800bd7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd80:	4e34      	ldr	r6, [pc, #208]	@ (800be54 <_strtoul_l.isra.0+0xd8>)
 800bd82:	4686      	mov	lr, r0
 800bd84:	460d      	mov	r5, r1
 800bd86:	4628      	mov	r0, r5
 800bd88:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd8c:	5d37      	ldrb	r7, [r6, r4]
 800bd8e:	f017 0708 	ands.w	r7, r7, #8
 800bd92:	d1f8      	bne.n	800bd86 <_strtoul_l.isra.0+0xa>
 800bd94:	2c2d      	cmp	r4, #45	@ 0x2d
 800bd96:	d110      	bne.n	800bdba <_strtoul_l.isra.0+0x3e>
 800bd98:	782c      	ldrb	r4, [r5, #0]
 800bd9a:	2701      	movs	r7, #1
 800bd9c:	1c85      	adds	r5, r0, #2
 800bd9e:	f033 0010 	bics.w	r0, r3, #16
 800bda2:	d115      	bne.n	800bdd0 <_strtoul_l.isra.0+0x54>
 800bda4:	2c30      	cmp	r4, #48	@ 0x30
 800bda6:	d10d      	bne.n	800bdc4 <_strtoul_l.isra.0+0x48>
 800bda8:	7828      	ldrb	r0, [r5, #0]
 800bdaa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800bdae:	2858      	cmp	r0, #88	@ 0x58
 800bdb0:	d108      	bne.n	800bdc4 <_strtoul_l.isra.0+0x48>
 800bdb2:	786c      	ldrb	r4, [r5, #1]
 800bdb4:	3502      	adds	r5, #2
 800bdb6:	2310      	movs	r3, #16
 800bdb8:	e00a      	b.n	800bdd0 <_strtoul_l.isra.0+0x54>
 800bdba:	2c2b      	cmp	r4, #43	@ 0x2b
 800bdbc:	bf04      	itt	eq
 800bdbe:	782c      	ldrbeq	r4, [r5, #0]
 800bdc0:	1c85      	addeq	r5, r0, #2
 800bdc2:	e7ec      	b.n	800bd9e <_strtoul_l.isra.0+0x22>
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d1f6      	bne.n	800bdb6 <_strtoul_l.isra.0+0x3a>
 800bdc8:	2c30      	cmp	r4, #48	@ 0x30
 800bdca:	bf14      	ite	ne
 800bdcc:	230a      	movne	r3, #10
 800bdce:	2308      	moveq	r3, #8
 800bdd0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800bdd4:	2600      	movs	r6, #0
 800bdd6:	fbb8 f8f3 	udiv	r8, r8, r3
 800bdda:	fb03 f908 	mul.w	r9, r3, r8
 800bdde:	ea6f 0909 	mvn.w	r9, r9
 800bde2:	4630      	mov	r0, r6
 800bde4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800bde8:	f1bc 0f09 	cmp.w	ip, #9
 800bdec:	d810      	bhi.n	800be10 <_strtoul_l.isra.0+0x94>
 800bdee:	4664      	mov	r4, ip
 800bdf0:	42a3      	cmp	r3, r4
 800bdf2:	dd1e      	ble.n	800be32 <_strtoul_l.isra.0+0xb6>
 800bdf4:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800bdf8:	d007      	beq.n	800be0a <_strtoul_l.isra.0+0x8e>
 800bdfa:	4580      	cmp	r8, r0
 800bdfc:	d316      	bcc.n	800be2c <_strtoul_l.isra.0+0xb0>
 800bdfe:	d101      	bne.n	800be04 <_strtoul_l.isra.0+0x88>
 800be00:	45a1      	cmp	r9, r4
 800be02:	db13      	blt.n	800be2c <_strtoul_l.isra.0+0xb0>
 800be04:	fb00 4003 	mla	r0, r0, r3, r4
 800be08:	2601      	movs	r6, #1
 800be0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be0e:	e7e9      	b.n	800bde4 <_strtoul_l.isra.0+0x68>
 800be10:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800be14:	f1bc 0f19 	cmp.w	ip, #25
 800be18:	d801      	bhi.n	800be1e <_strtoul_l.isra.0+0xa2>
 800be1a:	3c37      	subs	r4, #55	@ 0x37
 800be1c:	e7e8      	b.n	800bdf0 <_strtoul_l.isra.0+0x74>
 800be1e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800be22:	f1bc 0f19 	cmp.w	ip, #25
 800be26:	d804      	bhi.n	800be32 <_strtoul_l.isra.0+0xb6>
 800be28:	3c57      	subs	r4, #87	@ 0x57
 800be2a:	e7e1      	b.n	800bdf0 <_strtoul_l.isra.0+0x74>
 800be2c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800be30:	e7eb      	b.n	800be0a <_strtoul_l.isra.0+0x8e>
 800be32:	1c73      	adds	r3, r6, #1
 800be34:	d106      	bne.n	800be44 <_strtoul_l.isra.0+0xc8>
 800be36:	2322      	movs	r3, #34	@ 0x22
 800be38:	f8ce 3000 	str.w	r3, [lr]
 800be3c:	4630      	mov	r0, r6
 800be3e:	b932      	cbnz	r2, 800be4e <_strtoul_l.isra.0+0xd2>
 800be40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be44:	b107      	cbz	r7, 800be48 <_strtoul_l.isra.0+0xcc>
 800be46:	4240      	negs	r0, r0
 800be48:	2a00      	cmp	r2, #0
 800be4a:	d0f9      	beq.n	800be40 <_strtoul_l.isra.0+0xc4>
 800be4c:	b106      	cbz	r6, 800be50 <_strtoul_l.isra.0+0xd4>
 800be4e:	1e69      	subs	r1, r5, #1
 800be50:	6011      	str	r1, [r2, #0]
 800be52:	e7f5      	b.n	800be40 <_strtoul_l.isra.0+0xc4>
 800be54:	0800d1ab 	.word	0x0800d1ab

0800be58 <_strtoul_r>:
 800be58:	f7ff bf90 	b.w	800bd7c <_strtoul_l.isra.0>

0800be5c <__swsetup_r>:
 800be5c:	b538      	push	{r3, r4, r5, lr}
 800be5e:	4b29      	ldr	r3, [pc, #164]	@ (800bf04 <__swsetup_r+0xa8>)
 800be60:	4605      	mov	r5, r0
 800be62:	6818      	ldr	r0, [r3, #0]
 800be64:	460c      	mov	r4, r1
 800be66:	b118      	cbz	r0, 800be70 <__swsetup_r+0x14>
 800be68:	6a03      	ldr	r3, [r0, #32]
 800be6a:	b90b      	cbnz	r3, 800be70 <__swsetup_r+0x14>
 800be6c:	f7fe fca4 	bl	800a7b8 <__sinit>
 800be70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be74:	0719      	lsls	r1, r3, #28
 800be76:	d422      	bmi.n	800bebe <__swsetup_r+0x62>
 800be78:	06da      	lsls	r2, r3, #27
 800be7a:	d407      	bmi.n	800be8c <__swsetup_r+0x30>
 800be7c:	2209      	movs	r2, #9
 800be7e:	602a      	str	r2, [r5, #0]
 800be80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be84:	81a3      	strh	r3, [r4, #12]
 800be86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be8a:	e033      	b.n	800bef4 <__swsetup_r+0x98>
 800be8c:	0758      	lsls	r0, r3, #29
 800be8e:	d512      	bpl.n	800beb6 <__swsetup_r+0x5a>
 800be90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be92:	b141      	cbz	r1, 800bea6 <__swsetup_r+0x4a>
 800be94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be98:	4299      	cmp	r1, r3
 800be9a:	d002      	beq.n	800bea2 <__swsetup_r+0x46>
 800be9c:	4628      	mov	r0, r5
 800be9e:	f7fe fdd7 	bl	800aa50 <_free_r>
 800bea2:	2300      	movs	r3, #0
 800bea4:	6363      	str	r3, [r4, #52]	@ 0x34
 800bea6:	89a3      	ldrh	r3, [r4, #12]
 800bea8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800beac:	81a3      	strh	r3, [r4, #12]
 800beae:	2300      	movs	r3, #0
 800beb0:	6063      	str	r3, [r4, #4]
 800beb2:	6923      	ldr	r3, [r4, #16]
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	89a3      	ldrh	r3, [r4, #12]
 800beb8:	f043 0308 	orr.w	r3, r3, #8
 800bebc:	81a3      	strh	r3, [r4, #12]
 800bebe:	6923      	ldr	r3, [r4, #16]
 800bec0:	b94b      	cbnz	r3, 800bed6 <__swsetup_r+0x7a>
 800bec2:	89a3      	ldrh	r3, [r4, #12]
 800bec4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800becc:	d003      	beq.n	800bed6 <__swsetup_r+0x7a>
 800bece:	4621      	mov	r1, r4
 800bed0:	4628      	mov	r0, r5
 800bed2:	f000 f83f 	bl	800bf54 <__smakebuf_r>
 800bed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beda:	f013 0201 	ands.w	r2, r3, #1
 800bede:	d00a      	beq.n	800bef6 <__swsetup_r+0x9a>
 800bee0:	2200      	movs	r2, #0
 800bee2:	60a2      	str	r2, [r4, #8]
 800bee4:	6962      	ldr	r2, [r4, #20]
 800bee6:	4252      	negs	r2, r2
 800bee8:	61a2      	str	r2, [r4, #24]
 800beea:	6922      	ldr	r2, [r4, #16]
 800beec:	b942      	cbnz	r2, 800bf00 <__swsetup_r+0xa4>
 800beee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bef2:	d1c5      	bne.n	800be80 <__swsetup_r+0x24>
 800bef4:	bd38      	pop	{r3, r4, r5, pc}
 800bef6:	0799      	lsls	r1, r3, #30
 800bef8:	bf58      	it	pl
 800befa:	6962      	ldrpl	r2, [r4, #20]
 800befc:	60a2      	str	r2, [r4, #8]
 800befe:	e7f4      	b.n	800beea <__swsetup_r+0x8e>
 800bf00:	2000      	movs	r0, #0
 800bf02:	e7f7      	b.n	800bef4 <__swsetup_r+0x98>
 800bf04:	20000014 	.word	0x20000014

0800bf08 <__swhatbuf_r>:
 800bf08:	b570      	push	{r4, r5, r6, lr}
 800bf0a:	460c      	mov	r4, r1
 800bf0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf10:	2900      	cmp	r1, #0
 800bf12:	b096      	sub	sp, #88	@ 0x58
 800bf14:	4615      	mov	r5, r2
 800bf16:	461e      	mov	r6, r3
 800bf18:	da0d      	bge.n	800bf36 <__swhatbuf_r+0x2e>
 800bf1a:	89a3      	ldrh	r3, [r4, #12]
 800bf1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bf20:	f04f 0100 	mov.w	r1, #0
 800bf24:	bf14      	ite	ne
 800bf26:	2340      	movne	r3, #64	@ 0x40
 800bf28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	6031      	str	r1, [r6, #0]
 800bf30:	602b      	str	r3, [r5, #0]
 800bf32:	b016      	add	sp, #88	@ 0x58
 800bf34:	bd70      	pop	{r4, r5, r6, pc}
 800bf36:	466a      	mov	r2, sp
 800bf38:	f000 f8b6 	bl	800c0a8 <_fstat_r>
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	dbec      	blt.n	800bf1a <__swhatbuf_r+0x12>
 800bf40:	9901      	ldr	r1, [sp, #4]
 800bf42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf4a:	4259      	negs	r1, r3
 800bf4c:	4159      	adcs	r1, r3
 800bf4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf52:	e7eb      	b.n	800bf2c <__swhatbuf_r+0x24>

0800bf54 <__smakebuf_r>:
 800bf54:	898b      	ldrh	r3, [r1, #12]
 800bf56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf58:	079d      	lsls	r5, r3, #30
 800bf5a:	4606      	mov	r6, r0
 800bf5c:	460c      	mov	r4, r1
 800bf5e:	d507      	bpl.n	800bf70 <__smakebuf_r+0x1c>
 800bf60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf64:	6023      	str	r3, [r4, #0]
 800bf66:	6123      	str	r3, [r4, #16]
 800bf68:	2301      	movs	r3, #1
 800bf6a:	6163      	str	r3, [r4, #20]
 800bf6c:	b003      	add	sp, #12
 800bf6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf70:	ab01      	add	r3, sp, #4
 800bf72:	466a      	mov	r2, sp
 800bf74:	f7ff ffc8 	bl	800bf08 <__swhatbuf_r>
 800bf78:	9f00      	ldr	r7, [sp, #0]
 800bf7a:	4605      	mov	r5, r0
 800bf7c:	4639      	mov	r1, r7
 800bf7e:	4630      	mov	r0, r6
 800bf80:	f7fe fa6e 	bl	800a460 <_malloc_r>
 800bf84:	b948      	cbnz	r0, 800bf9a <__smakebuf_r+0x46>
 800bf86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf8a:	059a      	lsls	r2, r3, #22
 800bf8c:	d4ee      	bmi.n	800bf6c <__smakebuf_r+0x18>
 800bf8e:	f023 0303 	bic.w	r3, r3, #3
 800bf92:	f043 0302 	orr.w	r3, r3, #2
 800bf96:	81a3      	strh	r3, [r4, #12]
 800bf98:	e7e2      	b.n	800bf60 <__smakebuf_r+0xc>
 800bf9a:	89a3      	ldrh	r3, [r4, #12]
 800bf9c:	6020      	str	r0, [r4, #0]
 800bf9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfa2:	81a3      	strh	r3, [r4, #12]
 800bfa4:	9b01      	ldr	r3, [sp, #4]
 800bfa6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bfaa:	b15b      	cbz	r3, 800bfc4 <__smakebuf_r+0x70>
 800bfac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	f000 f855 	bl	800c060 <_isatty_r>
 800bfb6:	b128      	cbz	r0, 800bfc4 <__smakebuf_r+0x70>
 800bfb8:	89a3      	ldrh	r3, [r4, #12]
 800bfba:	f023 0303 	bic.w	r3, r3, #3
 800bfbe:	f043 0301 	orr.w	r3, r3, #1
 800bfc2:	81a3      	strh	r3, [r4, #12]
 800bfc4:	89a3      	ldrh	r3, [r4, #12]
 800bfc6:	431d      	orrs	r5, r3
 800bfc8:	81a5      	strh	r5, [r4, #12]
 800bfca:	e7cf      	b.n	800bf6c <__smakebuf_r+0x18>

0800bfcc <memmove>:
 800bfcc:	4288      	cmp	r0, r1
 800bfce:	b510      	push	{r4, lr}
 800bfd0:	eb01 0402 	add.w	r4, r1, r2
 800bfd4:	d902      	bls.n	800bfdc <memmove+0x10>
 800bfd6:	4284      	cmp	r4, r0
 800bfd8:	4623      	mov	r3, r4
 800bfda:	d807      	bhi.n	800bfec <memmove+0x20>
 800bfdc:	1e43      	subs	r3, r0, #1
 800bfde:	42a1      	cmp	r1, r4
 800bfe0:	d008      	beq.n	800bff4 <memmove+0x28>
 800bfe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bfea:	e7f8      	b.n	800bfde <memmove+0x12>
 800bfec:	4402      	add	r2, r0
 800bfee:	4601      	mov	r1, r0
 800bff0:	428a      	cmp	r2, r1
 800bff2:	d100      	bne.n	800bff6 <memmove+0x2a>
 800bff4:	bd10      	pop	{r4, pc}
 800bff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bffa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bffe:	e7f7      	b.n	800bff0 <memmove+0x24>

0800c000 <_raise_r>:
 800c000:	291f      	cmp	r1, #31
 800c002:	b538      	push	{r3, r4, r5, lr}
 800c004:	4605      	mov	r5, r0
 800c006:	460c      	mov	r4, r1
 800c008:	d904      	bls.n	800c014 <_raise_r+0x14>
 800c00a:	2316      	movs	r3, #22
 800c00c:	6003      	str	r3, [r0, #0]
 800c00e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c012:	bd38      	pop	{r3, r4, r5, pc}
 800c014:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c016:	b112      	cbz	r2, 800c01e <_raise_r+0x1e>
 800c018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c01c:	b94b      	cbnz	r3, 800c032 <_raise_r+0x32>
 800c01e:	4628      	mov	r0, r5
 800c020:	f000 f840 	bl	800c0a4 <_getpid_r>
 800c024:	4622      	mov	r2, r4
 800c026:	4601      	mov	r1, r0
 800c028:	4628      	mov	r0, r5
 800c02a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c02e:	f000 b827 	b.w	800c080 <_kill_r>
 800c032:	2b01      	cmp	r3, #1
 800c034:	d00a      	beq.n	800c04c <_raise_r+0x4c>
 800c036:	1c59      	adds	r1, r3, #1
 800c038:	d103      	bne.n	800c042 <_raise_r+0x42>
 800c03a:	2316      	movs	r3, #22
 800c03c:	6003      	str	r3, [r0, #0]
 800c03e:	2001      	movs	r0, #1
 800c040:	e7e7      	b.n	800c012 <_raise_r+0x12>
 800c042:	2100      	movs	r1, #0
 800c044:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c048:	4620      	mov	r0, r4
 800c04a:	4798      	blx	r3
 800c04c:	2000      	movs	r0, #0
 800c04e:	e7e0      	b.n	800c012 <_raise_r+0x12>

0800c050 <raise>:
 800c050:	4b02      	ldr	r3, [pc, #8]	@ (800c05c <raise+0xc>)
 800c052:	4601      	mov	r1, r0
 800c054:	6818      	ldr	r0, [r3, #0]
 800c056:	f7ff bfd3 	b.w	800c000 <_raise_r>
 800c05a:	bf00      	nop
 800c05c:	20000014 	.word	0x20000014

0800c060 <_isatty_r>:
 800c060:	b538      	push	{r3, r4, r5, lr}
 800c062:	4d06      	ldr	r5, [pc, #24]	@ (800c07c <_isatty_r+0x1c>)
 800c064:	2300      	movs	r3, #0
 800c066:	4604      	mov	r4, r0
 800c068:	4608      	mov	r0, r1
 800c06a:	602b      	str	r3, [r5, #0]
 800c06c:	f7f5 fe86 	bl	8001d7c <_isatty>
 800c070:	1c43      	adds	r3, r0, #1
 800c072:	d102      	bne.n	800c07a <_isatty_r+0x1a>
 800c074:	682b      	ldr	r3, [r5, #0]
 800c076:	b103      	cbz	r3, 800c07a <_isatty_r+0x1a>
 800c078:	6023      	str	r3, [r4, #0]
 800c07a:	bd38      	pop	{r3, r4, r5, pc}
 800c07c:	20000460 	.word	0x20000460

0800c080 <_kill_r>:
 800c080:	b538      	push	{r3, r4, r5, lr}
 800c082:	4d07      	ldr	r5, [pc, #28]	@ (800c0a0 <_kill_r+0x20>)
 800c084:	2300      	movs	r3, #0
 800c086:	4604      	mov	r4, r0
 800c088:	4608      	mov	r0, r1
 800c08a:	4611      	mov	r1, r2
 800c08c:	602b      	str	r3, [r5, #0]
 800c08e:	f7f5 fe05 	bl	8001c9c <_kill>
 800c092:	1c43      	adds	r3, r0, #1
 800c094:	d102      	bne.n	800c09c <_kill_r+0x1c>
 800c096:	682b      	ldr	r3, [r5, #0]
 800c098:	b103      	cbz	r3, 800c09c <_kill_r+0x1c>
 800c09a:	6023      	str	r3, [r4, #0]
 800c09c:	bd38      	pop	{r3, r4, r5, pc}
 800c09e:	bf00      	nop
 800c0a0:	20000460 	.word	0x20000460

0800c0a4 <_getpid_r>:
 800c0a4:	f7f5 bdf2 	b.w	8001c8c <_getpid>

0800c0a8 <_fstat_r>:
 800c0a8:	b538      	push	{r3, r4, r5, lr}
 800c0aa:	4d07      	ldr	r5, [pc, #28]	@ (800c0c8 <_fstat_r+0x20>)
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	4608      	mov	r0, r1
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	602b      	str	r3, [r5, #0]
 800c0b6:	f7f5 fe51 	bl	8001d5c <_fstat>
 800c0ba:	1c43      	adds	r3, r0, #1
 800c0bc:	d102      	bne.n	800c0c4 <_fstat_r+0x1c>
 800c0be:	682b      	ldr	r3, [r5, #0]
 800c0c0:	b103      	cbz	r3, 800c0c4 <_fstat_r+0x1c>
 800c0c2:	6023      	str	r3, [r4, #0]
 800c0c4:	bd38      	pop	{r3, r4, r5, pc}
 800c0c6:	bf00      	nop
 800c0c8:	20000460 	.word	0x20000460

0800c0cc <_malloc_usable_size_r>:
 800c0cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0d0:	1f18      	subs	r0, r3, #4
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	bfbc      	itt	lt
 800c0d6:	580b      	ldrlt	r3, [r1, r0]
 800c0d8:	18c0      	addlt	r0, r0, r3
 800c0da:	4770      	bx	lr

0800c0dc <__popcountsi2>:
 800c0dc:	0843      	lsrs	r3, r0, #1
 800c0de:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 800c0e2:	1ac0      	subs	r0, r0, r3
 800c0e4:	0883      	lsrs	r3, r0, #2
 800c0e6:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 800c0ea:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 800c0ee:	4418      	add	r0, r3
 800c0f0:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 800c0f4:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 800c0f8:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 800c0fc:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 800c100:	0e00      	lsrs	r0, r0, #24
 800c102:	4770      	bx	lr

0800c104 <_init>:
 800c104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c106:	bf00      	nop
 800c108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c10a:	bc08      	pop	{r3}
 800c10c:	469e      	mov	lr, r3
 800c10e:	4770      	bx	lr

0800c110 <_fini>:
 800c110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c112:	bf00      	nop
 800c114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c116:	bc08      	pop	{r3}
 800c118:	469e      	mov	lr, r3
 800c11a:	4770      	bx	lr
