
digital_cube_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e500  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013cc  0800e690  0800e690  0000f690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa5c  0800fa5c  00011084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fa5c  0800fa5c  00010a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa64  0800fa64  00011084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa64  0800fa64  00010a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fa68  0800fa68  00010a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800fa6c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000088  0800faf0  00011088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  0800faf0  00011590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013628  00000000  00000000  000110b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026af  00000000  00000000  000246dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00026d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001154  00000000  00000000  00028230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cba7  00000000  00000000  00029384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e97b  00000000  00000000  00045f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea53  00000000  00000000  000548a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000045  00000000  00000000  000e32f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006860  00000000  00000000  000e3340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000172  00000000  00000000  000e9ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <deregister_tm_clones>:
 8000240:	4803      	ldr	r0, [pc, #12]	@ (8000250 <deregister_tm_clones+0x10>)
 8000242:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <deregister_tm_clones+0x14>)
 8000244:	4283      	cmp	r3, r0
 8000246:	d002      	beq.n	800024e <deregister_tm_clones+0xe>
 8000248:	4b03      	ldr	r3, [pc, #12]	@ (8000258 <deregister_tm_clones+0x18>)
 800024a:	b103      	cbz	r3, 800024e <deregister_tm_clones+0xe>
 800024c:	4718      	bx	r3
 800024e:	4770      	bx	lr
 8000250:	20000084 	.word	0x20000084
 8000254:	20000084 	.word	0x20000084
 8000258:	00000000 	.word	0x00000000

0800025c <register_tm_clones>:
 800025c:	4805      	ldr	r0, [pc, #20]	@ (8000274 <register_tm_clones+0x18>)
 800025e:	4b06      	ldr	r3, [pc, #24]	@ (8000278 <register_tm_clones+0x1c>)
 8000260:	1a1b      	subs	r3, r3, r0
 8000262:	0fd9      	lsrs	r1, r3, #31
 8000264:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000268:	1049      	asrs	r1, r1, #1
 800026a:	d002      	beq.n	8000272 <register_tm_clones+0x16>
 800026c:	4b03      	ldr	r3, [pc, #12]	@ (800027c <register_tm_clones+0x20>)
 800026e:	b103      	cbz	r3, 8000272 <register_tm_clones+0x16>
 8000270:	4718      	bx	r3
 8000272:	4770      	bx	lr
 8000274:	20000084 	.word	0x20000084
 8000278:	20000084 	.word	0x20000084
 800027c:	00000000 	.word	0x00000000

08000280 <__do_global_dtors_aux>:
 8000280:	b510      	push	{r4, lr}
 8000282:	4c06      	ldr	r4, [pc, #24]	@ (800029c <__do_global_dtors_aux+0x1c>)
 8000284:	7823      	ldrb	r3, [r4, #0]
 8000286:	b943      	cbnz	r3, 800029a <__do_global_dtors_aux+0x1a>
 8000288:	f7ff ffda 	bl	8000240 <deregister_tm_clones>
 800028c:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <__do_global_dtors_aux+0x20>)
 800028e:	b113      	cbz	r3, 8000296 <__do_global_dtors_aux+0x16>
 8000290:	4804      	ldr	r0, [pc, #16]	@ (80002a4 <__do_global_dtors_aux+0x24>)
 8000292:	f3af 8000 	nop.w
 8000296:	2301      	movs	r3, #1
 8000298:	7023      	strb	r3, [r4, #0]
 800029a:	bd10      	pop	{r4, pc}
 800029c:	20000088 	.word	0x20000088
 80002a0:	00000000 	.word	0x00000000
 80002a4:	0800e678 	.word	0x0800e678

080002a8 <frame_dummy>:
 80002a8:	b508      	push	{r3, lr}
 80002aa:	4b05      	ldr	r3, [pc, #20]	@ (80002c0 <frame_dummy+0x18>)
 80002ac:	b11b      	cbz	r3, 80002b6 <frame_dummy+0xe>
 80002ae:	4905      	ldr	r1, [pc, #20]	@ (80002c4 <frame_dummy+0x1c>)
 80002b0:	4805      	ldr	r0, [pc, #20]	@ (80002c8 <frame_dummy+0x20>)
 80002b2:	f3af 8000 	nop.w
 80002b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80002ba:	f7ff bfcf 	b.w	800025c <register_tm_clones>
 80002be:	bf00      	nop
 80002c0:	00000000 	.word	0x00000000
 80002c4:	2000008c 	.word	0x2000008c
 80002c8:	0800e678 	.word	0x0800e678

080002cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b085      	sub	sp, #20
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f003 0307 	and.w	r3, r3, #7
 80002da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000310 <__NVIC_SetPriorityGrouping+0x44>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002e2:	68ba      	ldr	r2, [r7, #8]
 80002e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80002e8:	4013      	ands	r3, r2
 80002ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80002f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002fe:	4a04      	ldr	r2, [pc, #16]	@ (8000310 <__NVIC_SetPriorityGrouping+0x44>)
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	60d3      	str	r3, [r2, #12]
}
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000318:	4b04      	ldr	r3, [pc, #16]	@ (800032c <__NVIC_GetPriorityGrouping+0x18>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	0a1b      	lsrs	r3, r3, #8
 800031e:	f003 0307 	and.w	r3, r3, #7
}
 8000322:	4618      	mov	r0, r3
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	6039      	str	r1, [r7, #0]
 800033a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800033c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000340:	2b00      	cmp	r3, #0
 8000342:	db0a      	blt.n	800035a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	b2da      	uxtb	r2, r3
 8000348:	490c      	ldr	r1, [pc, #48]	@ (800037c <__NVIC_SetPriority+0x4c>)
 800034a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034e:	0112      	lsls	r2, r2, #4
 8000350:	b2d2      	uxtb	r2, r2
 8000352:	440b      	add	r3, r1
 8000354:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000358:	e00a      	b.n	8000370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	b2da      	uxtb	r2, r3
 800035e:	4908      	ldr	r1, [pc, #32]	@ (8000380 <__NVIC_SetPriority+0x50>)
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	f003 030f 	and.w	r3, r3, #15
 8000366:	3b04      	subs	r3, #4
 8000368:	0112      	lsls	r2, r2, #4
 800036a:	b2d2      	uxtb	r2, r2
 800036c:	440b      	add	r3, r1
 800036e:	761a      	strb	r2, [r3, #24]
}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	e000e100 	.word	0xe000e100
 8000380:	e000ed00 	.word	0xe000ed00

08000384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000384:	b480      	push	{r7}
 8000386:	b089      	sub	sp, #36	@ 0x24
 8000388:	af00      	add	r7, sp, #0
 800038a:	60f8      	str	r0, [r7, #12]
 800038c:	60b9      	str	r1, [r7, #8]
 800038e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	f003 0307 	and.w	r3, r3, #7
 8000396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000398:	69fb      	ldr	r3, [r7, #28]
 800039a:	f1c3 0307 	rsb	r3, r3, #7
 800039e:	2b04      	cmp	r3, #4
 80003a0:	bf28      	it	cs
 80003a2:	2304      	movcs	r3, #4
 80003a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	3304      	adds	r3, #4
 80003aa:	2b06      	cmp	r3, #6
 80003ac:	d902      	bls.n	80003b4 <NVIC_EncodePriority+0x30>
 80003ae:	69fb      	ldr	r3, [r7, #28]
 80003b0:	3b03      	subs	r3, #3
 80003b2:	e000      	b.n	80003b6 <NVIC_EncodePriority+0x32>
 80003b4:	2300      	movs	r3, #0
 80003b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80003bc:	69bb      	ldr	r3, [r7, #24]
 80003be:	fa02 f303 	lsl.w	r3, r2, r3
 80003c2:	43da      	mvns	r2, r3
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	401a      	ands	r2, r3
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	fa01 f303 	lsl.w	r3, r1, r3
 80003d6:	43d9      	mvns	r1, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003dc:	4313      	orrs	r3, r2
         );
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3724      	adds	r7, #36	@ 0x24
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr

080003ea <LL_ADC_REG_SetContinuousMode>:
  *         @arg @ref LL_ADC_REG_CONV_SINGLE
  *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
{
 80003ea:	b480      	push	{r7}
 80003ec:	b083      	sub	sp, #12
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	6078      	str	r0, [r7, #4]
 80003f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	431a      	orrs	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	60da      	str	r2, [r3, #12]
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000420:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000424:	f043 0201 	orr.w	r2, r3, #1
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000448:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800044c:	f043 0202 	orr.w	r2, r3, #2
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000470:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000474:	f043 0204 	orr.w	r2, r3, #4
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800047c:	bf00      	nop
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(const ADC_TypeDef *ADCx)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000494:	b29b      	uxth	r3, r3
}
 8000496:	4618      	mov	r0, r3
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(const ADC_TypeDef *ADCx)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b083      	sub	sp, #12
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f003 0304 	and.w	r3, r3, #4
 80004b2:	2b04      	cmp	r3, #4
 80004b4:	d101      	bne.n	80004ba <LL_ADC_IsActiveFlag_EOC+0x18>
 80004b6:	2301      	movs	r3, #1
 80004b8:	e000      	b.n	80004bc <LL_ADC_IsActiveFlag_EOC+0x1a>
 80004ba:	2300      	movs	r3, #0
}
 80004bc:	4618      	mov	r0, r3
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr

080004c8 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2204      	movs	r2, #4
 80004d4:	601a      	str	r2, [r3, #0]
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f043 0201 	orr.w	r2, r3, #1
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	601a      	str	r2, [r3, #0]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f003 0304 	and.w	r3, r3, #4
 8000512:	2b04      	cmp	r3, #4
 8000514:	d101      	bne.n	800051a <LL_I2C_IsActiveFlag_RXNE+0x18>
 8000516:	2301      	movs	r3, #1
 8000518:	e000      	b.n	800051c <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800051a:	2300      	movs	r3, #0
}
 800051c:	4618      	mov	r0, r3
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8000528:	b480      	push	{r7}
 800052a:	b087      	sub	sp, #28
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8000542:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	041b      	lsls	r3, r3, #16
 8000548:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 800054c:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800054e:	6a3b      	ldr	r3, [r7, #32]
 8000550:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8000552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000554:	4313      	orrs	r3, r2
 8000556:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800055a:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	685a      	ldr	r2, [r3, #4]
 8000560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000562:	0d5b      	lsrs	r3, r3, #21
 8000564:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8000568:	4b06      	ldr	r3, [pc, #24]	@ (8000584 <LL_I2C_HandleTransfer+0x5c>)
 800056a:	430b      	orrs	r3, r1
 800056c:	43db      	mvns	r3, r3
 800056e:	401a      	ands	r2, r3
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	431a      	orrs	r2, r3
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 8000578:	bf00      	nop
 800057a:	371c      	adds	r7, #28
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	03ff7bff 	.word	0x03ff7bff

08000588 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000594:	b2db      	uxtb	r3, r3
}
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80005ac:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005ae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80005b0:	4907      	ldr	r1, [pc, #28]	@ (80005d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80005b8:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005ba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4013      	ands	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005c2:	68fb      	ldr	r3, [r7, #12]
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	40021000 	.word	0x40021000

080005d4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005dc:	4b08      	ldr	r3, [pc, #32]	@ (8000600 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80005e0:	4907      	ldr	r1, [pc, #28]	@ (8000600 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005e8:	4b05      	ldr	r3, [pc, #20]	@ (8000600 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4013      	ands	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	40021000 	.word	0x40021000

08000604 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	601a      	str	r2, [r3, #0]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f043 0201 	orr.w	r2, r3, #1
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	601a      	str	r2, [r3, #0]
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f023 0201 	bic.w	r2, r3, #1
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	601a      	str	r2, [r3, #0]
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6a1a      	ldr	r2, [r3, #32]
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	431a      	orrs	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	621a      	str	r2, [r3, #32]
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000686:	b480      	push	{r7}
 8000688:	b083      	sub	sp, #12
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
 800068e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 80006a2:	b480      	push	{r7}
 80006a4:	b083      	sub	sp, #12
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ae:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
 80006ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	683a      	ldr	r2, [r7, #0]
 80006d0:	619a      	str	r2, [r3, #24]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006de:	b480      	push	{r7}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
 80006e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	683a      	ldr	r2, [r7, #0]
 80006ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <LL_LPTIM_Enable>:
  * @rmtoll CR           ENABLE        LL_LPTIM_Enable
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_Enable(LPTIM_TypeDef *LPTIMx)
{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	691b      	ldr	r3, [r3, #16]
 8000706:	f043 0201 	orr.w	r2, r3, #1
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	611a      	str	r2, [r3, #16]
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <LL_LPTIM_StartCounter>:
  *         @arg @ref LL_LPTIM_OPERATING_MODE_CONTINUOUS
  *         @arg @ref LL_LPTIM_OPERATING_MODE_ONESHOT
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_StartCounter(LPTIM_TypeDef *LPTIMx, uint32_t OperatingMode)
{
 800071a:	b480      	push	{r7}
 800071c:	b083      	sub	sp, #12
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
 8000722:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	691b      	ldr	r3, [r3, #16]
 8000728:	f023 0206 	bic.w	r2, r3, #6
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	431a      	orrs	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	611a      	str	r2, [r3, #16]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <LL_LPTIM_SetAutoReload>:
  * @param  LPTIMx Low-Power Timer instance
  * @param  AutoReload Value between Min_Data=0x0001 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetAutoReload(LPTIM_TypeDef *LPTIMx, uint32_t AutoReload)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	0c1b      	lsrs	r3, r3, #16
 8000750:	041b      	lsls	r3, r3, #16
 8000752:	683a      	ldr	r2, [r7, #0]
 8000754:	431a      	orrs	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	619a      	str	r2, [r3, #24]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <LL_LPTIM_ClearFlag_ARRM>:
  * @rmtoll ICR          ARRMCF        LL_LPTIM_ClearFlag_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_ClearFlag_ARRM(LPTIM_TypeDef *LPTIMx)
{
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	f043 0202 	orr.w	r2, r3, #2
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	605a      	str	r2, [r3, #4]
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <LL_LPTIM_IsActiveFlag_ARRM>:
  * @rmtoll ISR          ARRM          LL_LPTIM_IsActiveFlag_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPTIM_IsActiveFlag_ARRM(const LPTIM_TypeDef *LPTIMx)
{
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	2b02      	cmp	r3, #2
 8000798:	d101      	bne.n	800079e <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 800079a:	2301      	movs	r3, #1
 800079c:	e000      	b.n	80007a0 <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 800079e:	2300      	movs	r3, #0
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	f043 0202 	orr.w	r2, r3, #2
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	609a      	str	r2, [r3, #8]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <LL_USART_EnableDirectionRx>:
  * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b089      	sub	sp, #36	@ 0x24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	e853 3f00 	ldrex	r3, [r3]
 80007de:	60bb      	str	r3, [r7, #8]
   return(result);
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	f043 0304 	orr.w	r3, r3, #4
 80007e6:	61fb      	str	r3, [r7, #28]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	69fa      	ldr	r2, [r7, #28]
 80007ec:	61ba      	str	r2, [r7, #24]
 80007ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80007f0:	6979      	ldr	r1, [r7, #20]
 80007f2:	69ba      	ldr	r2, [r7, #24]
 80007f4:	e841 2300 	strex	r3, r2, [r1]
 80007f8:	613b      	str	r3, [r7, #16]
   return(result);
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d1e9      	bne.n	80007d4 <LL_USART_EnableDirectionRx+0x8>
}
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	3724      	adds	r7, #36	@ 0x24
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <LL_USART_DisableDirectionRx>:
  * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
{
 800080e:	b480      	push	{r7}
 8000810:	b089      	sub	sp, #36	@ 0x24
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	e853 3f00 	ldrex	r3, [r3]
 8000820:	60bb      	str	r3, [r7, #8]
   return(result);
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	f023 0304 	bic.w	r3, r3, #4
 8000828:	61fb      	str	r3, [r7, #28]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	69fa      	ldr	r2, [r7, #28]
 800082e:	61ba      	str	r2, [r7, #24]
 8000830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000832:	6979      	ldr	r1, [r7, #20]
 8000834:	69ba      	ldr	r2, [r7, #24]
 8000836:	e841 2300 	strex	r3, r2, [r1]
 800083a:	613b      	str	r3, [r7, #16]
   return(result);
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1e9      	bne.n	8000816 <LL_USART_DisableDirectionRx+0x8>
}
 8000842:	bf00      	nop
 8000844:	bf00      	nop
 8000846:	3724      	adds	r7, #36	@ 0x24
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <LL_USART_EnableDirectionTx>:
  * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
{
 8000850:	b480      	push	{r7}
 8000852:	b089      	sub	sp, #36	@ 0x24
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TE);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	e853 3f00 	ldrex	r3, [r3]
 8000862:	60bb      	str	r3, [r7, #8]
   return(result);
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	f043 0308 	orr.w	r3, r3, #8
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	69fa      	ldr	r2, [r7, #28]
 8000870:	61ba      	str	r2, [r7, #24]
 8000872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000874:	6979      	ldr	r1, [r7, #20]
 8000876:	69ba      	ldr	r2, [r7, #24]
 8000878:	e841 2300 	strex	r3, r2, [r1]
 800087c:	613b      	str	r3, [r7, #16]
   return(result);
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1e9      	bne.n	8000858 <LL_USART_EnableDirectionTx+0x8>
}
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	3724      	adds	r7, #36	@ 0x24
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <LL_USART_DisableOverrunDetect>:
  * @rmtoll CR3          OVRDIS        LL_USART_DisableOverrunDetect
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	609a      	str	r2, [r3, #8]
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008c2:	2b40      	cmp	r3, #64	@ 0x40
 80008c4:	d101      	bne.n	80008ca <LL_USART_IsActiveFlag_TC+0x18>
 80008c6:	2301      	movs	r3, #1
 80008c8:	e000      	b.n	80008cc <LL_USART_IsActiveFlag_TC+0x1a>
 80008ca:	2300      	movs	r3, #0
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2208      	movs	r2, #8
 80008e4:	621a      	str	r2, [r3, #32]
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80008f2:	b480      	push	{r7}
 80008f4:	b083      	sub	sp, #12
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
 80008fa:	460b      	mov	r3, r1
 80008fc:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	b29a      	uxth	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <LL_IWDG_ReloadCounter>:
  * @rmtoll KR           KEY           LL_IWDG_ReloadCounter
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
 8000912:	b480      	push	{r7}
 8000914:	b083      	sub	sp, #12
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8000920:	601a      	str	r2, [r3, #0]
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000932:	b0a3      	sub	sp, #140	@ 0x8c
 8000934:	af0a      	add	r7, sp, #40	@ 0x28

  int err = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t boot_count = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint16_t adc_value = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
  uint32_t isns_value = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t batt_value = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	65bb      	str	r3, [r7, #88]	@ 0x58

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800094c:	2001      	movs	r0, #1
 800094e:	f7ff fe41 	bl	80005d4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000952:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000956:	f7ff fe25 	bl	80005a4 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095a:	2003      	movs	r0, #3
 800095c:	f7ff fcb6 	bl	80002cc <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn,
 8000960:	f7ff fcd8 	bl	8000314 <__NVIC_GetPriorityGrouping>
 8000964:	4603      	mov	r3, r0
 8000966:	2200      	movs	r2, #0
 8000968:	210f      	movs	r1, #15
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fd0a 	bl	8000384 <NVIC_EncodePriority>
 8000970:	4603      	mov	r3, r0
 8000972:	4619      	mov	r1, r3
 8000974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000978:	f7ff fcda 	bl	8000330 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 15, 0));

  SystemClock_Config();
 800097c:	f002 f83c 	bl	80029f8 <SystemClock_Config>

  // USB_Init(); // needs testing

  MX_GPIO_Init();
 8000980:	f002 faf4 	bl	8002f6c <MX_GPIO_Init>
  // MX_ADC1_Init();
  // MX_COMP1_Init();
  MX_I2C1_Init();
 8000984:	f002 f95e 	bl	8002c44 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000988:	f002 f9bc 	bl	8002d04 <MX_SPI1_Init>
  MX_TIM1_Init();
 800098c:	f002 fa26 	bl	8002ddc <MX_TIM1_Init>
  MX_LPTIM1_Init();
 8000990:	f002 fb48 	bl	8003024 <MX_LPTIM1_Init>
  // MX_USART2_UART_Init();
  MX_IWDG_Init();
 8000994:	f002 fbe8 	bl	8003168 <MX_IWDG_Init>

  // enable LPTIM1 which triggers interrupt every 30 seconds
  LL_LPTIM_Enable(LPTIM1);
 8000998:	48af      	ldr	r0, [pc, #700]	@ (8000c58 <main+0x328>)
 800099a:	f7ff feae 	bl	80006fa <LL_LPTIM_Enable>
  LL_LPTIM_EnableIT_ARRM(LPTIM1);
 800099e:	48ae      	ldr	r0, [pc, #696]	@ (8000c58 <main+0x328>)
 80009a0:	f7ff ff04 	bl	80007ac <LL_LPTIM_EnableIT_ARRM>
  LL_LPTIM_SetAutoReload(LPTIM1, 7680); // 7680 = 30 seconds
 80009a4:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 80009a8:	48ab      	ldr	r0, [pc, #684]	@ (8000c58 <main+0x328>)
 80009aa:	f7ff fec9 	bl	8000740 <LL_LPTIM_SetAutoReload>
  LL_LPTIM_StartCounter(LPTIM1, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 80009ae:	2104      	movs	r1, #4
 80009b0:	48a9      	ldr	r0, [pc, #676]	@ (8000c58 <main+0x328>)
 80009b2:	f7ff feb2 	bl	800071a <LL_LPTIM_StartCounter>

  // Enable Peripherals
  // LL_ADC_Enable(ADC1);
  LL_I2C_Enable(I2C1);
 80009b6:	48a9      	ldr	r0, [pc, #676]	@ (8000c5c <main+0x32c>)
 80009b8:	f7ff fd93 	bl	80004e2 <LL_I2C_Enable>
  LL_SPI_Enable(SPI1);
 80009bc:	48a8      	ldr	r0, [pc, #672]	@ (8000c60 <main+0x330>)
 80009be:	f7ff fe21 	bl	8000604 <LL_SPI_Enable>

  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_0); // Radio NSS high
 80009c2:	2101      	movs	r1, #1
 80009c4:	48a7      	ldr	r0, [pc, #668]	@ (8000c64 <main+0x334>)
 80009c6:	f7ff fe7c 	bl	80006c2 <LL_GPIO_SetOutputPin>
  PA8_LOW
 80009ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d2:	f7ff fe84 	bl	80006de <LL_GPIO_ResetOutputPin>
  PA6_LOW
 80009d6:	2140      	movs	r1, #64	@ 0x40
 80009d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009dc:	f7ff fe7f 	bl	80006de <LL_GPIO_ResetOutputPin>

  fram_init(&memory, SPI1, 0, 0, 0, 0);
 80009e0:	2300      	movs	r3, #0
 80009e2:	9301      	str	r3, [sp, #4]
 80009e4:	2300      	movs	r3, #0
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	2300      	movs	r3, #0
 80009ea:	2200      	movs	r2, #0
 80009ec:	499c      	ldr	r1, [pc, #624]	@ (8000c60 <main+0x330>)
 80009ee:	489e      	ldr	r0, [pc, #632]	@ (8000c68 <main+0x338>)
 80009f0:	f004 f864 	bl	8004abc <fram_init>

  // dump_fram();

  // -- Update Saved Values
  err = lfs_mount(&lfs, &cfg);
 80009f4:	499d      	ldr	r1, [pc, #628]	@ (8000c6c <main+0x33c>)
 80009f6:	489e      	ldr	r0, [pc, #632]	@ (8000c70 <main+0x340>)
 80009f8:	f00b f820 	bl	800ba3c <lfs_mount>
 80009fc:	6578      	str	r0, [r7, #84]	@ 0x54

  if (err) {
 80009fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <main+0xdc>
    // NVIC_SystemReset(); // request reset
    exit(-1);
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a08:	f00b ffa0 	bl	800c94c <exit>
    // err = lfs_format(&lfs, &cfg);
    // err = lfs_mount(&lfs, &cfg);
  }

  // update boot count
  lfs_file_open(&lfs, &file, "boot_count", LFS_O_RDWR | LFS_O_CREAT);
 8000a0c:	f240 1303 	movw	r3, #259	@ 0x103
 8000a10:	4a98      	ldr	r2, [pc, #608]	@ (8000c74 <main+0x344>)
 8000a12:	4999      	ldr	r1, [pc, #612]	@ (8000c78 <main+0x348>)
 8000a14:	4896      	ldr	r0, [pc, #600]	@ (8000c70 <main+0x340>)
 8000a16:	f00b f83b 	bl	800ba90 <lfs_file_open>
  lfs_file_read(&lfs, &file, &boot_count, sizeof(boot_count));
 8000a1a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000a1e:	2304      	movs	r3, #4
 8000a20:	4995      	ldr	r1, [pc, #596]	@ (8000c78 <main+0x348>)
 8000a22:	4893      	ldr	r0, [pc, #588]	@ (8000c70 <main+0x340>)
 8000a24:	f00b f894 	bl	800bb50 <lfs_file_read>
  boot_count += 1;
 8000a28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  lfs_file_rewind(&lfs, &file);
 8000a2e:	4992      	ldr	r1, [pc, #584]	@ (8000c78 <main+0x348>)
 8000a30:	488f      	ldr	r0, [pc, #572]	@ (8000c70 <main+0x340>)
 8000a32:	f00b f919 	bl	800bc68 <lfs_file_rewind>
  lfs_file_write(&lfs, &file, &boot_count, sizeof(boot_count));
 8000a36:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	498e      	ldr	r1, [pc, #568]	@ (8000c78 <main+0x348>)
 8000a3e:	488c      	ldr	r0, [pc, #560]	@ (8000c70 <main+0x340>)
 8000a40:	f00b f8b6 	bl	800bbb0 <lfs_file_write>
  lfs_file_close(&lfs, &file);
 8000a44:	498c      	ldr	r1, [pc, #560]	@ (8000c78 <main+0x348>)
 8000a46:	488a      	ldr	r0, [pc, #552]	@ (8000c70 <main+0x340>)
 8000a48:	f00b f856 	bl	800baf8 <lfs_file_close>

  // update 30 seond interval count
  lfs_file_open(&lfs, &int_count_save, "int_count_30",
 8000a4c:	f240 1303 	movw	r3, #259	@ 0x103
 8000a50:	4a8a      	ldr	r2, [pc, #552]	@ (8000c7c <main+0x34c>)
 8000a52:	498b      	ldr	r1, [pc, #556]	@ (8000c80 <main+0x350>)
 8000a54:	4886      	ldr	r0, [pc, #536]	@ (8000c70 <main+0x340>)
 8000a56:	f00b f81b 	bl	800ba90 <lfs_file_open>
                LFS_O_RDWR | LFS_O_CREAT);
  // lfs_file_read(&lfs, &int_count_save, &int_count_30, sizeof(int_count_30));
  lfs_file_close(&lfs, &int_count_save);
 8000a5a:	4989      	ldr	r1, [pc, #548]	@ (8000c80 <main+0x350>)
 8000a5c:	4884      	ldr	r0, [pc, #528]	@ (8000c70 <main+0x340>)
 8000a5e:	f00b f84b 	bl	800baf8 <lfs_file_close>
  lfs_unmount(&lfs);
 8000a62:	4883      	ldr	r0, [pc, #524]	@ (8000c70 <main+0x340>)
 8000a64:	f00b f800 	bl	800ba68 <lfs_unmount>
  // end non-volatile update

  LL_IWDG_ReloadCounter(IWDG);
 8000a68:	4886      	ldr	r0, [pc, #536]	@ (8000c84 <main+0x354>)
 8000a6a:	f7ff ff52 	bl	8000912 <LL_IWDG_ReloadCounter>

  // write boot and flags to flight log
  sprintf(log_buf, "%lu, boot\n", boot_count);
 8000a6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a70:	461a      	mov	r2, r3
 8000a72:	4985      	ldr	r1, [pc, #532]	@ (8000c88 <main+0x358>)
 8000a74:	4885      	ldr	r0, [pc, #532]	@ (8000c8c <main+0x35c>)
 8000a76:	f00c f839 	bl	800caec <siprintf>
  write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                  strlen(log_buf));
 8000a7a:	4884      	ldr	r0, [pc, #528]	@ (8000c8c <main+0x35c>)
 8000a7c:	f7ff fb88 	bl	8000190 <strlen>
 8000a80:	4603      	mov	r3, r0
  write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	4b81      	ldr	r3, [pc, #516]	@ (8000c8c <main+0x35c>)
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	4b81      	ldr	r3, [pc, #516]	@ (8000c90 <main+0x360>)
 8000a8a:	4a82      	ldr	r2, [pc, #520]	@ (8000c94 <main+0x364>)
 8000a8c:	4977      	ldr	r1, [pc, #476]	@ (8000c6c <main+0x33c>)
 8000a8e:	4878      	ldr	r0, [pc, #480]	@ (8000c70 <main+0x340>)
 8000a90:	f004 f91a 	bl	8004cc8 <write_buf_to_fs>

  sprintf(log_buf, "%lu, flags: 0x%lx\n", boot_count, flags);
 8000a94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000a96:	4b80      	ldr	r3, [pc, #512]	@ (8000c98 <main+0x368>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4980      	ldr	r1, [pc, #512]	@ (8000c9c <main+0x36c>)
 8000a9c:	487b      	ldr	r0, [pc, #492]	@ (8000c8c <main+0x35c>)
 8000a9e:	f00c f825 	bl	800caec <siprintf>
  write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                  strlen(log_buf));
 8000aa2:	487a      	ldr	r0, [pc, #488]	@ (8000c8c <main+0x35c>)
 8000aa4:	f7ff fb74 	bl	8000190 <strlen>
 8000aa8:	4603      	mov	r3, r0
  write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8000aaa:	9301      	str	r3, [sp, #4]
 8000aac:	4b77      	ldr	r3, [pc, #476]	@ (8000c8c <main+0x35c>)
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	4b77      	ldr	r3, [pc, #476]	@ (8000c90 <main+0x360>)
 8000ab2:	4a78      	ldr	r2, [pc, #480]	@ (8000c94 <main+0x364>)
 8000ab4:	496d      	ldr	r1, [pc, #436]	@ (8000c6c <main+0x33c>)
 8000ab6:	486e      	ldr	r0, [pc, #440]	@ (8000c70 <main+0x340>)
 8000ab8:	f004 f906 	bl	8004cc8 <write_buf_to_fs>

  read_log(); // dump log over USART2 on PA2
 8000abc:	f000 fe1e 	bl	80016fc <read_log>

  MX_ADC1_Init();
 8000ac0:	f002 f80c 	bl	8002adc <MX_ADC1_Init>
  LL_ADC_Enable(ADC1);
 8000ac4:	4876      	ldr	r0, [pc, #472]	@ (8000ca0 <main+0x370>)
 8000ac6:	f7ff fca3 	bl	8000410 <LL_ADC_Enable>

  err = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	657b      	str	r3, [r7, #84]	@ 0x54
  log_item.lat_dir = '0';
 8000ace:	4b75      	ldr	r3, [pc, #468]	@ (8000ca4 <main+0x374>)
 8000ad0:	2230      	movs	r2, #48	@ 0x30
 8000ad2:	731a      	strb	r2, [r3, #12]
  log_item.lon_dir = '0';
 8000ad4:	4b73      	ldr	r3, [pc, #460]	@ (8000ca4 <main+0x374>)
 8000ad6:	2230      	movs	r2, #48	@ 0x30
 8000ad8:	761a      	strb	r2, [r3, #24]

  // set geofence parameters
  geo_fence.top_left = empty_vertex;
 8000ada:	4a73      	ldr	r2, [pc, #460]	@ (8000ca8 <main+0x378>)
 8000adc:	4b73      	ldr	r3, [pc, #460]	@ (8000cac <main+0x37c>)
 8000ade:	4614      	mov	r4, r2
 8000ae0:	461d      	mov	r5, r3
 8000ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000aea:	e884 0003 	stmia.w	r4, {r0, r1}
  geo_fence.bot_left = empty_vertex;
 8000aee:	4b6e      	ldr	r3, [pc, #440]	@ (8000ca8 <main+0x378>)
 8000af0:	4a6e      	ldr	r2, [pc, #440]	@ (8000cac <main+0x37c>)
 8000af2:	f103 0418 	add.w	r4, r3, #24
 8000af6:	4615      	mov	r5, r2
 8000af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b00:	e884 0003 	stmia.w	r4, {r0, r1}
  geo_fence.top_right = empty_vertex;
 8000b04:	4b68      	ldr	r3, [pc, #416]	@ (8000ca8 <main+0x378>)
 8000b06:	4a69      	ldr	r2, [pc, #420]	@ (8000cac <main+0x37c>)
 8000b08:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8000b0c:	4615      	mov	r5, r2
 8000b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b16:	e884 0003 	stmia.w	r4, {r0, r1}
  geo_fence.bot_right = empty_vertex;
 8000b1a:	4b63      	ldr	r3, [pc, #396]	@ (8000ca8 <main+0x378>)
 8000b1c:	4a63      	ldr	r2, [pc, #396]	@ (8000cac <main+0x37c>)
 8000b1e:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 8000b22:	4615      	mov	r5, r2
 8000b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b28:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b2c:	e884 0003 	stmia.w	r4, {r0, r1}
  geo_fence.altitude = 0;
 8000b30:	4b5d      	ldr	r3, [pc, #372]	@ (8000ca8 <main+0x378>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	661a      	str	r2, [r3, #96]	@ 0x60

  // ms5607_reset();
  ms5607_init(I2C1);
 8000b36:	4849      	ldr	r0, [pc, #292]	@ (8000c5c <main+0x32c>)
 8000b38:	f00b fa10 	bl	800bf5c <ms5607_init>
  ms5607_get_press_temp(&log_item.pressure, &log_item.temperature);
 8000b3c:	495c      	ldr	r1, [pc, #368]	@ (8000cb0 <main+0x380>)
 8000b3e:	485d      	ldr	r0, [pc, #372]	@ (8000cb4 <main+0x384>)
 8000b40:	f00b fa1e 	bl	800bf80 <ms5607_get_press_temp>

  // PID Init
  PIDController pid = {PID_KP,          PID_KI,          PID_KD,
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2238      	movs	r2, #56	@ 0x38
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f00c f957 	bl	800ce00 <memset>
 8000b52:	2301      	movs	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	2301      	movs	r3, #1
 8000b58:	61bb      	str	r3, [r7, #24]
 8000b5a:	2314      	movs	r3, #20
 8000b5c:	623b      	str	r3, [r7, #32]
 8000b5e:	235a      	movs	r3, #90	@ 0x5a
 8000b60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b62:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8000b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b68:	2364      	movs	r3, #100	@ 0x64
 8000b6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	637b      	str	r3, [r7, #52]	@ 0x34
                       PID_TAU,         PID_LIM_MIN,     PID_LIM_MAX,
                       PID_LIM_MIN_INT, PID_LIM_MAX_INT, 1};
  PIDController_Init(&pid);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4618      	mov	r0, r3
 8000b76:	f00b fe3d 	bl	800c7f4 <PIDController_Init>
  //;

  while (1) {

    // tight PI loop
    while ((flags & CUT_FLAG) &&
 8000b7a:	e0bf      	b.n	8000cfc <main+0x3cc>
           !(LL_LPTIM_IsActiveFlag_ARRM(LPTIM1) || (flags & LOG_FLAG))) {

      LL_IWDG_ReloadCounter(IWDG);
 8000b7c:	4841      	ldr	r0, [pc, #260]	@ (8000c84 <main+0x354>)
 8000b7e:	f7ff fec8 	bl	8000912 <LL_IWDG_ReloadCounter>

      // -- Read ADC --
      LL_ADC_REG_StartConversion(ADC1);
 8000b82:	4847      	ldr	r0, [pc, #284]	@ (8000ca0 <main+0x370>)
 8000b84:	f7ff fc6c 	bl	8000460 <LL_ADC_REG_StartConversion>

      // wait end of conversion flag
      while (!LL_ADC_IsActiveFlag_EOC(ADC1))
 8000b88:	bf00      	nop
 8000b8a:	4845      	ldr	r0, [pc, #276]	@ (8000ca0 <main+0x370>)
 8000b8c:	f7ff fc89 	bl	80004a2 <LL_ADC_IsActiveFlag_EOC>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0f9      	beq.n	8000b8a <main+0x25a>
        ;

      // read channel1 data in mV
      adc_value = LL_ADC_REG_ReadConversionData12(ADC1);
 8000b96:	4842      	ldr	r0, [pc, #264]	@ (8000ca0 <main+0x370>)
 8000b98:	f7ff fc76 	bl	8000488 <LL_ADC_REG_ReadConversionData12>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

      // clear flag
      LL_ADC_ClearFlag_EOC(ADC1);
 8000ba2:	483f      	ldr	r0, [pc, #252]	@ (8000ca0 <main+0x370>)
 8000ba4:	f7ff fc90 	bl	80004c8 <LL_ADC_ClearFlag_EOC>

      if (log_item.pressure <
 8000ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ca4 <main+0x374>)
 8000baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bac:	4a42      	ldr	r2, [pc, #264]	@ (8000cb8 <main+0x388>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d80f      	bhi.n	8000bd2 <main+0x2a2>
          100000) // total kludge since it's difficult to figure out if on
                  // battery or USB power right now, if pressure is less than
                  // 1000 mbar it's pretty likely that system is airborne
        batt_value = __LL_ADC_CALC_DATA_TO_VOLTAGE(3000, adc_value,
 8000bb2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8000bb6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000bba:	fb02 f303 	mul.w	r3, r2, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b3e      	ldr	r3, [pc, #248]	@ (8000cbc <main+0x38c>)
 8000bc2:	fba3 1302 	umull	r1, r3, r3, r2
 8000bc6:	1ad2      	subs	r2, r2, r3
 8000bc8:	0852      	lsrs	r2, r2, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	0adb      	lsrs	r3, r3, #11
 8000bce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000bd0:	e00e      	b.n	8000bf0 <main+0x2c0>
                                                   LL_ADC_RESOLUTION_12B);
      else
        batt_value = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, adc_value,
 8000bd2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8000bd6:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000bda:	fb02 f303 	mul.w	r3, r2, r3
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b36      	ldr	r3, [pc, #216]	@ (8000cbc <main+0x38c>)
 8000be2:	fba3 1302 	umull	r1, r3, r3, r2
 8000be6:	1ad2      	subs	r2, r2, r3
 8000be8:	0852      	lsrs	r2, r2, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	0adb      	lsrs	r3, r3, #11
 8000bee:	65bb      	str	r3, [r7, #88]	@ 0x58
                                                   LL_ADC_RESOLUTION_12B);

      batt_value = (batt_value * 24) / 10;
 8000bf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	4413      	add	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b30      	ldr	r3, [pc, #192]	@ (8000cc0 <main+0x390>)
 8000bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8000c02:	08db      	lsrs	r3, r3, #3
 8000c04:	65bb      	str	r3, [r7, #88]	@ 0x58

      LL_ADC_REG_StartConversion(ADC1);
 8000c06:	4826      	ldr	r0, [pc, #152]	@ (8000ca0 <main+0x370>)
 8000c08:	f7ff fc2a 	bl	8000460 <LL_ADC_REG_StartConversion>

      // wait end of conversion flag
      while (!LL_ADC_IsActiveFlag_EOC(ADC1))
 8000c0c:	bf00      	nop
 8000c0e:	4824      	ldr	r0, [pc, #144]	@ (8000ca0 <main+0x370>)
 8000c10:	f7ff fc47 	bl	80004a2 <LL_ADC_IsActiveFlag_EOC>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d0f9      	beq.n	8000c0e <main+0x2de>
        ;

      // read channel1 data in mV
      adc_value = LL_ADC_REG_ReadConversionData12(ADC1);
 8000c1a:	4821      	ldr	r0, [pc, #132]	@ (8000ca0 <main+0x370>)
 8000c1c:	f7ff fc34 	bl	8000488 <LL_ADC_REG_ReadConversionData12>
 8000c20:	4603      	mov	r3, r0
 8000c22:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

      // clear flag
      LL_ADC_ClearFlag_EOC(ADC1);
 8000c26:	481e      	ldr	r0, [pc, #120]	@ (8000ca0 <main+0x370>)
 8000c28:	f7ff fc4e 	bl	80004c8 <LL_ADC_ClearFlag_EOC>

      if (log_item.pressure <
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <main+0x374>)
 8000c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c30:	4a21      	ldr	r2, [pc, #132]	@ (8000cb8 <main+0x388>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d846      	bhi.n	8000cc4 <main+0x394>
          100000) // total kludge since it's difficult to figure out if on
                  // battery or USB power right now, if pressure is less than
                  // 1000 mbar it's pretty likely that system is airborne
        isns_value = __LL_ADC_CALC_DATA_TO_VOLTAGE(3000, adc_value,
 8000c36:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8000c3a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000c3e:	fb02 f303 	mul.w	r3, r2, r3
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b1d      	ldr	r3, [pc, #116]	@ (8000cbc <main+0x38c>)
 8000c46:	fba3 1302 	umull	r1, r3, r3, r2
 8000c4a:	1ad2      	subs	r2, r2, r3
 8000c4c:	0852      	lsrs	r2, r2, #1
 8000c4e:	4413      	add	r3, r2
 8000c50:	0adb      	lsrs	r3, r3, #11
 8000c52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000c54:	e045      	b.n	8000ce2 <main+0x3b2>
 8000c56:	bf00      	nop
 8000c58:	40007c00 	.word	0x40007c00
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	40013000 	.word	0x40013000
 8000c64:	48000400 	.word	0x48000400
 8000c68:	200000ac 	.word	0x200000ac
 8000c6c:	0800f654 	.word	0x0800f654
 8000c70:	200001c4 	.word	0x200001c4
 8000c74:	0800e690 	.word	0x0800e690
 8000c78:	20000244 	.word	0x20000244
 8000c7c:	0800e69c 	.word	0x0800e69c
 8000c80:	200002ec 	.word	0x200002ec
 8000c84:	40003000 	.word	0x40003000
 8000c88:	0800e6ac 	.word	0x0800e6ac
 8000c8c:	20000160 	.word	0x20000160
 8000c90:	0800e6b8 	.word	0x0800e6b8
 8000c94:	20000298 	.word	0x20000298
 8000c98:	20000004 	.word	0x20000004
 8000c9c:	0800e6c4 	.word	0x0800e6c4
 8000ca0:	50040000 	.word	0x50040000
 8000ca4:	200000c0 	.word	0x200000c0
 8000ca8:	200000fc 	.word	0x200000fc
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	200000f0 	.word	0x200000f0
 8000cb4:	200000ec 	.word	0x200000ec
 8000cb8:	0001869f 	.word	0x0001869f
 8000cbc:	00100101 	.word	0x00100101
 8000cc0:	cccccccd 	.word	0xcccccccd
                                                   LL_ADC_RESOLUTION_12B);
      else
        isns_value = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, adc_value,
 8000cc4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8000cc8:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000ccc:	fb02 f303 	mul.w	r3, r2, r3
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b81      	ldr	r3, [pc, #516]	@ (8000ed8 <main+0x5a8>)
 8000cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8000cd8:	1ad2      	subs	r2, r2, r3
 8000cda:	0852      	lsrs	r2, r2, #1
 8000cdc:	4413      	add	r3, r2
 8000cde:	0adb      	lsrs	r3, r3, #11
 8000ce0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                                                   LL_ADC_RESOLUTION_12B);

      // end ADC read

      PIDController_Update(
 8000ce2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000cec:	4618      	mov	r0, r3
 8000cee:	f00b fd9b 	bl	800c828 <PIDController_Update>
          &pid, 1000,
          isns_value); // update PID controller with set point 1000mV
      LL_TIM_OC_SetCompareCH3(TIM1, pid.out);
 8000cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4879      	ldr	r0, [pc, #484]	@ (8000edc <main+0x5ac>)
 8000cf8:	f7ff fcc5 	bl	8000686 <LL_TIM_OC_SetCompareCH3>
    while ((flags & CUT_FLAG) &&
 8000cfc:	4b78      	ldr	r3, [pc, #480]	@ (8000ee0 <main+0x5b0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0302 	and.w	r3, r3, #2
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d00c      	beq.n	8000d22 <main+0x3f2>
           !(LL_LPTIM_IsActiveFlag_ARRM(LPTIM1) || (flags & LOG_FLAG))) {
 8000d08:	4876      	ldr	r0, [pc, #472]	@ (8000ee4 <main+0x5b4>)
 8000d0a:	f7ff fd3c 	bl	8000786 <LL_LPTIM_IsActiveFlag_ARRM>
 8000d0e:	4603      	mov	r3, r0
    while ((flags & CUT_FLAG) &&
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d106      	bne.n	8000d22 <main+0x3f2>
           !(LL_LPTIM_IsActiveFlag_ARRM(LPTIM1) || (flags & LOG_FLAG))) {
 8000d14:	4b72      	ldr	r3, [pc, #456]	@ (8000ee0 <main+0x5b0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f43f af2d 	beq.w	8000b7c <main+0x24c>
    }

    // regular 30 second routine
    if (LL_LPTIM_IsActiveFlag_ARRM(LPTIM1) || (flags & LOG_FLAG)) {
 8000d22:	4870      	ldr	r0, [pc, #448]	@ (8000ee4 <main+0x5b4>)
 8000d24:	f7ff fd2f 	bl	8000786 <LL_LPTIM_IsActiveFlag_ARRM>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d106      	bne.n	8000d3c <main+0x40c>
 8000d2e:	4b6c      	ldr	r3, [pc, #432]	@ (8000ee0 <main+0x5b0>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f000 8369 	beq.w	800140e <main+0xade>

      PA8_HIGH
 8000d3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d44:	f7ff fcbd 	bl	80006c2 <LL_GPIO_SetOutputPin>
      log_item.log_count++;
 8000d48:	4b67      	ldr	r3, [pc, #412]	@ (8000ee8 <main+0x5b8>)
 8000d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	4a66      	ldr	r2, [pc, #408]	@ (8000ee8 <main+0x5b8>)
 8000d50:	6353      	str	r3, [r2, #52]	@ 0x34
      int_count_30++;
 8000d52:	4b66      	ldr	r3, [pc, #408]	@ (8000eec <main+0x5bc>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	3301      	adds	r3, #1
 8000d58:	4a64      	ldr	r2, [pc, #400]	@ (8000eec <main+0x5bc>)
 8000d5a:	6013      	str	r3, [r2, #0]

      // if currently cutting, need to disable quickly
      if (flags & CUT_FLAG) {
 8000d5c:	4b60      	ldr	r3, [pc, #384]	@ (8000ee0 <main+0x5b0>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d04e      	beq.n	8000e06 <main+0x4d6>
        LL_TIM_OC_SetCompareCH3(TIM1, 0);
 8000d68:	2100      	movs	r1, #0
 8000d6a:	485c      	ldr	r0, [pc, #368]	@ (8000edc <main+0x5ac>)
 8000d6c:	f7ff fc8b 	bl	8000686 <LL_TIM_OC_SetCompareCH3>
        LL_TIM_DisableCounter(TIM1);
 8000d70:	485a      	ldr	r0, [pc, #360]	@ (8000edc <main+0x5ac>)
 8000d72:	f7ff fc67 	bl	8000644 <LL_TIM_DisableCounter>

        LL_ADC_REG_SetContinuousMode(ADC1, LL_ADC_REG_CONV_SINGLE);
 8000d76:	2100      	movs	r1, #0
 8000d78:	485d      	ldr	r0, [pc, #372]	@ (8000ef0 <main+0x5c0>)
 8000d7a:	f7ff fb36 	bl	80003ea <LL_ADC_REG_SetContinuousMode>

        sprintf(log_buf, "%lu, %lu, end cut %lu at %lu\n", boot_count,
 8000d7e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000d80:	4b59      	ldr	r3, [pc, #356]	@ (8000ee8 <main+0x5b8>)
 8000d82:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8000d84:	4b5b      	ldr	r3, [pc, #364]	@ (8000ef4 <main+0x5c4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a57      	ldr	r2, [pc, #348]	@ (8000ee8 <main+0x5b8>)
 8000d8a:	6812      	ldr	r2, [r2, #0]
 8000d8c:	9201      	str	r2, [sp, #4]
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	4603      	mov	r3, r0
 8000d92:	460a      	mov	r2, r1
 8000d94:	4958      	ldr	r1, [pc, #352]	@ (8000ef8 <main+0x5c8>)
 8000d96:	4859      	ldr	r0, [pc, #356]	@ (8000efc <main+0x5cc>)
 8000d98:	f00b fea8 	bl	800caec <siprintf>
                log_item.log_count, cut_counter, log_item.time);
        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                        strlen(log_buf));
 8000d9c:	4857      	ldr	r0, [pc, #348]	@ (8000efc <main+0x5cc>)
 8000d9e:	f7ff f9f7 	bl	8000190 <strlen>
 8000da2:	4603      	mov	r3, r0
        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	4b55      	ldr	r3, [pc, #340]	@ (8000efc <main+0x5cc>)
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	4b55      	ldr	r3, [pc, #340]	@ (8000f00 <main+0x5d0>)
 8000dac:	4a55      	ldr	r2, [pc, #340]	@ (8000f04 <main+0x5d4>)
 8000dae:	4956      	ldr	r1, [pc, #344]	@ (8000f08 <main+0x5d8>)
 8000db0:	4856      	ldr	r0, [pc, #344]	@ (8000f0c <main+0x5dc>)
 8000db2:	f003 ff89 	bl	8004cc8 <write_buf_to_fs>

        sprintf(log_buf, "%lu, %lu, %lu isns: %lu duty: %lu \n", boot_count,
 8000db6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000db8:	4b4b      	ldr	r3, [pc, #300]	@ (8000ee8 <main+0x5b8>)
 8000dba:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8000dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8000ef4 <main+0x5c4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000dc2:	9202      	str	r2, [sp, #8]
 8000dc4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000dc6:	9201      	str	r2, [sp, #4]
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	4603      	mov	r3, r0
 8000dcc:	460a      	mov	r2, r1
 8000dce:	4950      	ldr	r1, [pc, #320]	@ (8000f10 <main+0x5e0>)
 8000dd0:	484a      	ldr	r0, [pc, #296]	@ (8000efc <main+0x5cc>)
 8000dd2:	f00b fe8b 	bl	800caec <siprintf>
                log_item.log_count, cut_counter, isns_value, pid.out);
        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                        strlen(log_buf));
 8000dd6:	4849      	ldr	r0, [pc, #292]	@ (8000efc <main+0x5cc>)
 8000dd8:	f7ff f9da 	bl	8000190 <strlen>
 8000ddc:	4603      	mov	r3, r0
        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	4b46      	ldr	r3, [pc, #280]	@ (8000efc <main+0x5cc>)
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	4b46      	ldr	r3, [pc, #280]	@ (8000f00 <main+0x5d0>)
 8000de6:	4a47      	ldr	r2, [pc, #284]	@ (8000f04 <main+0x5d4>)
 8000de8:	4947      	ldr	r1, [pc, #284]	@ (8000f08 <main+0x5d8>)
 8000dea:	4848      	ldr	r0, [pc, #288]	@ (8000f0c <main+0x5dc>)
 8000dec:	f003 ff6c 	bl	8004cc8 <write_buf_to_fs>

        cut_counter++;
 8000df0:	4b40      	ldr	r3, [pc, #256]	@ (8000ef4 <main+0x5c4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3301      	adds	r3, #1
 8000df6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ef4 <main+0x5c4>)
 8000df8:	6013      	str	r3, [r2, #0]

        flags = flags & ~(CUT_FLAG);
 8000dfa:	4b39      	ldr	r3, [pc, #228]	@ (8000ee0 <main+0x5b0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f023 0302 	bic.w	r3, r3, #2
 8000e02:	4a37      	ldr	r2, [pc, #220]	@ (8000ee0 <main+0x5b0>)
 8000e04:	6013      	str	r3, [r2, #0]
      }

      // -- Pressure Temp Conversion --
      log_item.prev_pressure = log_item.pressure;
 8000e06:	4b38      	ldr	r3, [pc, #224]	@ (8000ee8 <main+0x5b8>)
 8000e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e0a:	4a37      	ldr	r2, [pc, #220]	@ (8000ee8 <main+0x5b8>)
 8000e0c:	6293      	str	r3, [r2, #40]	@ 0x28
      if (ms5607_get_press_temp(&log_item.pressure, &log_item.temperature) ==
 8000e0e:	4941      	ldr	r1, [pc, #260]	@ (8000f14 <main+0x5e4>)
 8000e10:	4841      	ldr	r0, [pc, #260]	@ (8000f18 <main+0x5e8>)
 8000e12:	f00b f8b5 	bl	800bf80 <ms5607_get_press_temp>
 8000e16:	4603      	mov	r3, r0
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e1c:	d107      	bne.n	8000e2e <main+0x4fe>
          -1)
        sprintf(log_buf, "%lu, %lu, p/t conv fail\n", boot_count,
 8000e1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000e20:	4b31      	ldr	r3, [pc, #196]	@ (8000ee8 <main+0x5b8>)
 8000e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e24:	493d      	ldr	r1, [pc, #244]	@ (8000f1c <main+0x5ec>)
 8000e26:	4835      	ldr	r0, [pc, #212]	@ (8000efc <main+0x5cc>)
 8000e28:	f00b fe60 	bl	800caec <siprintf>
 8000e2c:	e00e      	b.n	8000e4c <main+0x51c>
                log_item.log_count);
      else
        sprintf(log_buf, "%lu,%lu,%lu,%ld\n", boot_count, log_item.log_count,
 8000e2e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000e30:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee8 <main+0x5b8>)
 8000e32:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8000e34:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee8 <main+0x5b8>)
 8000e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e38:	4a2b      	ldr	r2, [pc, #172]	@ (8000ee8 <main+0x5b8>)
 8000e3a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8000e3c:	9201      	str	r2, [sp, #4]
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	4603      	mov	r3, r0
 8000e42:	460a      	mov	r2, r1
 8000e44:	4936      	ldr	r1, [pc, #216]	@ (8000f20 <main+0x5f0>)
 8000e46:	482d      	ldr	r0, [pc, #180]	@ (8000efc <main+0x5cc>)
 8000e48:	f00b fe50 	bl	800caec <siprintf>
                log_item.pressure, log_item.temperature);

      write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                      strlen(log_buf));
 8000e4c:	482b      	ldr	r0, [pc, #172]	@ (8000efc <main+0x5cc>)
 8000e4e:	f7ff f99f 	bl	8000190 <strlen>
 8000e52:	4603      	mov	r3, r0
      write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8000e54:	9301      	str	r3, [sp, #4]
 8000e56:	4b29      	ldr	r3, [pc, #164]	@ (8000efc <main+0x5cc>)
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	4b29      	ldr	r3, [pc, #164]	@ (8000f00 <main+0x5d0>)
 8000e5c:	4a29      	ldr	r2, [pc, #164]	@ (8000f04 <main+0x5d4>)
 8000e5e:	492a      	ldr	r1, [pc, #168]	@ (8000f08 <main+0x5d8>)
 8000e60:	482a      	ldr	r0, [pc, #168]	@ (8000f0c <main+0x5dc>)
 8000e62:	f003 ff31 	bl	8004cc8 <write_buf_to_fs>
      // end p/t

      // Save pressure/temp data and current interval count
      err = lfs_mount(&lfs, &cfg);
 8000e66:	4928      	ldr	r1, [pc, #160]	@ (8000f08 <main+0x5d8>)
 8000e68:	4828      	ldr	r0, [pc, #160]	@ (8000f0c <main+0x5dc>)
 8000e6a:	f00a fde7 	bl	800ba3c <lfs_mount>
 8000e6e:	6578      	str	r0, [r7, #84]	@ 0x54

      if (err) {
 8000e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <main+0x54e>
        exit(-1); // trouble mounting FS
 8000e76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e7a:	f00b fd67 	bl	800c94c <exit>
        // lfs_format(&lfs, &cfg);
        // lfs_mount(&lfs, &cfg);
      }

      // update 30 seond interval count
      lfs_file_open(&lfs, &int_count_save, "int_count_30",
 8000e7e:	f240 1303 	movw	r3, #259	@ 0x103
 8000e82:	4a28      	ldr	r2, [pc, #160]	@ (8000f24 <main+0x5f4>)
 8000e84:	4928      	ldr	r1, [pc, #160]	@ (8000f28 <main+0x5f8>)
 8000e86:	4821      	ldr	r0, [pc, #132]	@ (8000f0c <main+0x5dc>)
 8000e88:	f00a fe02 	bl	800ba90 <lfs_file_open>
                    LFS_O_RDWR | LFS_O_CREAT);
      lfs_file_rewind(&lfs, &int_count_save);
 8000e8c:	4926      	ldr	r1, [pc, #152]	@ (8000f28 <main+0x5f8>)
 8000e8e:	481f      	ldr	r0, [pc, #124]	@ (8000f0c <main+0x5dc>)
 8000e90:	f00a feea 	bl	800bc68 <lfs_file_rewind>
      lfs_file_write(&lfs, &int_count_save, &int_count_30,
 8000e94:	2304      	movs	r3, #4
 8000e96:	4a15      	ldr	r2, [pc, #84]	@ (8000eec <main+0x5bc>)
 8000e98:	4923      	ldr	r1, [pc, #140]	@ (8000f28 <main+0x5f8>)
 8000e9a:	481c      	ldr	r0, [pc, #112]	@ (8000f0c <main+0x5dc>)
 8000e9c:	f00a fe88 	bl	800bbb0 <lfs_file_write>
                     sizeof(int_count_30));
      lfs_file_close(&lfs, &int_count_save);
 8000ea0:	4921      	ldr	r1, [pc, #132]	@ (8000f28 <main+0x5f8>)
 8000ea2:	481a      	ldr	r0, [pc, #104]	@ (8000f0c <main+0x5dc>)
 8000ea4:	f00a fe28 	bl	800baf8 <lfs_file_close>
      lfs_unmount(&lfs);
 8000ea8:	4818      	ldr	r0, [pc, #96]	@ (8000f0c <main+0x5dc>)
 8000eaa:	f00a fddd 	bl	800ba68 <lfs_unmount>

      // -- GPS read --
      log_item.prev_altitude = log_item.altitude;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <main+0x5b8>)
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee8 <main+0x5b8>)
 8000eb4:	61d3      	str	r3, [r2, #28]

      if (get_gps_data() < 0) {
 8000eb6:	f000 fab5 	bl	8001424 <get_gps_data>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	da37      	bge.n	8000f30 <main+0x600>
        // GPS parse failed
        sprintf(log_buf, "%lu, %lu, GPS parse failed\n", boot_count,
 8000ec0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000ec2:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <main+0x5b8>)
 8000ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ec6:	4919      	ldr	r1, [pc, #100]	@ (8000f2c <main+0x5fc>)
 8000ec8:	480c      	ldr	r0, [pc, #48]	@ (8000efc <main+0x5cc>)
 8000eca:	f00b fe0f 	bl	800caec <siprintf>
                log_item.log_count);
        log_buf[99] = 0x00;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <main+0x5cc>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
 8000ed6:	e059      	b.n	8000f8c <main+0x65c>
 8000ed8:	00100101 	.word	0x00100101
 8000edc:	40012c00 	.word	0x40012c00
 8000ee0:	20000004 	.word	0x20000004
 8000ee4:	40007c00 	.word	0x40007c00
 8000ee8:	200000c0 	.word	0x200000c0
 8000eec:	200000a4 	.word	0x200000a4
 8000ef0:	50040000 	.word	0x50040000
 8000ef4:	200000a8 	.word	0x200000a8
 8000ef8:	0800e6d8 	.word	0x0800e6d8
 8000efc:	20000160 	.word	0x20000160
 8000f00:	0800e6b8 	.word	0x0800e6b8
 8000f04:	20000298 	.word	0x20000298
 8000f08:	0800f654 	.word	0x0800f654
 8000f0c:	200001c4 	.word	0x200001c4
 8000f10:	0800e6f8 	.word	0x0800e6f8
 8000f14:	200000f0 	.word	0x200000f0
 8000f18:	200000ec 	.word	0x200000ec
 8000f1c:	0800e71c 	.word	0x0800e71c
 8000f20:	0800e738 	.word	0x0800e738
 8000f24:	0800e69c 	.word	0x0800e69c
 8000f28:	200002ec 	.word	0x200002ec
 8000f2c:	0800e74c 	.word	0x0800e74c
      } else {

        sprintf(log_buf, "%lu,%lu,%lu,%lu.%lu,%c,%lu.%lu,%c,%lu,%lu \n",
 8000f30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	4b72      	ldr	r3, [pc, #456]	@ (8001100 <main+0x7d0>)
 8000f36:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	4b71      	ldr	r3, [pc, #452]	@ (8001100 <main+0x7d0>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a70      	ldr	r2, [pc, #448]	@ (8001100 <main+0x7d0>)
 8000f40:	6852      	ldr	r2, [r2, #4]
 8000f42:	496f      	ldr	r1, [pc, #444]	@ (8001100 <main+0x7d0>)
 8000f44:	6889      	ldr	r1, [r1, #8]
                boot_count, log_item.log_count, log_item.time, log_item.lat_int,
                log_item.lat_frac, log_item.lat_dir, log_item.lon_int,
 8000f46:	486e      	ldr	r0, [pc, #440]	@ (8001100 <main+0x7d0>)
 8000f48:	7b00      	ldrb	r0, [r0, #12]
        sprintf(log_buf, "%lu,%lu,%lu,%lu.%lu,%c,%lu.%lu,%c,%lu,%lu \n",
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	486c      	ldr	r0, [pc, #432]	@ (8001100 <main+0x7d0>)
 8000f4e:	6900      	ldr	r0, [r0, #16]
 8000f50:	4c6b      	ldr	r4, [pc, #428]	@ (8001100 <main+0x7d0>)
 8000f52:	6964      	ldr	r4, [r4, #20]
                log_item.lon_frac, log_item.lon_dir, log_item.altitude,
 8000f54:	4d6a      	ldr	r5, [pc, #424]	@ (8001100 <main+0x7d0>)
 8000f56:	7e2d      	ldrb	r5, [r5, #24]
        sprintf(log_buf, "%lu,%lu,%lu,%lu.%lu,%c,%lu.%lu,%c,%lu,%lu \n",
 8000f58:	603d      	str	r5, [r7, #0]
 8000f5a:	4d69      	ldr	r5, [pc, #420]	@ (8001100 <main+0x7d0>)
 8000f5c:	6a2d      	ldr	r5, [r5, #32]
 8000f5e:	4e68      	ldr	r6, [pc, #416]	@ (8001100 <main+0x7d0>)
 8000f60:	6a76      	ldr	r6, [r6, #36]	@ 0x24
 8000f62:	9608      	str	r6, [sp, #32]
 8000f64:	9507      	str	r5, [sp, #28]
 8000f66:	683d      	ldr	r5, [r7, #0]
 8000f68:	9506      	str	r5, [sp, #24]
 8000f6a:	9405      	str	r4, [sp, #20]
 8000f6c:	9004      	str	r0, [sp, #16]
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	9003      	str	r0, [sp, #12]
 8000f72:	9102      	str	r1, [sp, #8]
 8000f74:	9201      	str	r2, [sp, #4]
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	4961      	ldr	r1, [pc, #388]	@ (8001104 <main+0x7d4>)
 8000f7e:	4862      	ldr	r0, [pc, #392]	@ (8001108 <main+0x7d8>)
 8000f80:	f00b fdb4 	bl	800caec <siprintf>
                log_item.date);
        log_buf[99] = 0x00;
 8000f84:	4b60      	ldr	r3, [pc, #384]	@ (8001108 <main+0x7d8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      }

      write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                      strlen(log_buf));
 8000f8c:	485e      	ldr	r0, [pc, #376]	@ (8001108 <main+0x7d8>)
 8000f8e:	f7ff f8ff 	bl	8000190 <strlen>
 8000f92:	4603      	mov	r3, r0
      write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	4b5c      	ldr	r3, [pc, #368]	@ (8001108 <main+0x7d8>)
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	4b5c      	ldr	r3, [pc, #368]	@ (800110c <main+0x7dc>)
 8000f9c:	4a5c      	ldr	r2, [pc, #368]	@ (8001110 <main+0x7e0>)
 8000f9e:	495d      	ldr	r1, [pc, #372]	@ (8001114 <main+0x7e4>)
 8000fa0:	485d      	ldr	r0, [pc, #372]	@ (8001118 <main+0x7e8>)
 8000fa2:	f003 fe91 	bl	8004cc8 <write_buf_to_fs>
      // end GPS read

      // -- Read ADC --
      LL_ADC_REG_StartConversion(ADC1);
 8000fa6:	485d      	ldr	r0, [pc, #372]	@ (800111c <main+0x7ec>)
 8000fa8:	f7ff fa5a 	bl	8000460 <LL_ADC_REG_StartConversion>

      // wait end of conversion flag
      while (!LL_ADC_IsActiveFlag_EOC(ADC1))
 8000fac:	bf00      	nop
 8000fae:	485b      	ldr	r0, [pc, #364]	@ (800111c <main+0x7ec>)
 8000fb0:	f7ff fa77 	bl	80004a2 <LL_ADC_IsActiveFlag_EOC>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f9      	beq.n	8000fae <main+0x67e>
        ;

      adc_value = LL_ADC_REG_ReadConversionData12(ADC1);
 8000fba:	4858      	ldr	r0, [pc, #352]	@ (800111c <main+0x7ec>)
 8000fbc:	f7ff fa64 	bl	8000488 <LL_ADC_REG_ReadConversionData12>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

      // clear flag
      LL_ADC_ClearFlag_EOC(ADC1);
 8000fc6:	4855      	ldr	r0, [pc, #340]	@ (800111c <main+0x7ec>)
 8000fc8:	f7ff fa7e 	bl	80004c8 <LL_ADC_ClearFlag_EOC>

      if (log_item.pressure <
 8000fcc:	4b4c      	ldr	r3, [pc, #304]	@ (8001100 <main+0x7d0>)
 8000fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd0:	4a53      	ldr	r2, [pc, #332]	@ (8001120 <main+0x7f0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d80f      	bhi.n	8000ff6 <main+0x6c6>
          100000) // total kludge since it's difficult to figure out if on
                  // battery or USB power right now, if pressure is less than
                  // 1000 mbar it's pretty likely that system is airborne
        batt_value = __LL_ADC_CALC_DATA_TO_VOLTAGE(3000, adc_value,
 8000fd6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8000fda:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000fde:	fb02 f303 	mul.w	r3, r2, r3
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4b4f      	ldr	r3, [pc, #316]	@ (8001124 <main+0x7f4>)
 8000fe6:	fba3 1302 	umull	r1, r3, r3, r2
 8000fea:	1ad2      	subs	r2, r2, r3
 8000fec:	0852      	lsrs	r2, r2, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	0adb      	lsrs	r3, r3, #11
 8000ff2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000ff4:	e00e      	b.n	8001014 <main+0x6e4>
                                                   LL_ADC_RESOLUTION_12B);
      else
        batt_value = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, adc_value,
 8000ff6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8000ffa:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000ffe:	fb02 f303 	mul.w	r3, r2, r3
 8001002:	461a      	mov	r2, r3
 8001004:	4b47      	ldr	r3, [pc, #284]	@ (8001124 <main+0x7f4>)
 8001006:	fba3 1302 	umull	r1, r3, r3, r2
 800100a:	1ad2      	subs	r2, r2, r3
 800100c:	0852      	lsrs	r2, r2, #1
 800100e:	4413      	add	r3, r2
 8001010:	0adb      	lsrs	r3, r3, #11
 8001012:	65bb      	str	r3, [r7, #88]	@ 0x58
                                                   LL_ADC_RESOLUTION_12B);

      batt_value = (batt_value * 24) / 10;
 8001014:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	461a      	mov	r2, r3
 8001020:	4b41      	ldr	r3, [pc, #260]	@ (8001128 <main+0x7f8>)
 8001022:	fba3 2302 	umull	r2, r3, r3, r2
 8001026:	08db      	lsrs	r3, r3, #3
 8001028:	65bb      	str	r3, [r7, #88]	@ 0x58
      log_item.batt_v = batt_value;
 800102a:	4a35      	ldr	r2, [pc, #212]	@ (8001100 <main+0x7d0>)
 800102c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800102e:	6393      	str	r3, [r2, #56]	@ 0x38

      // do another conversion to get back to the start of the sequence
      LL_ADC_REG_StartConversion(ADC1);
 8001030:	483a      	ldr	r0, [pc, #232]	@ (800111c <main+0x7ec>)
 8001032:	f7ff fa15 	bl	8000460 <LL_ADC_REG_StartConversion>
      // wait end of conversion flag
      while (!LL_ADC_IsActiveFlag_EOC(ADC1))
 8001036:	bf00      	nop
 8001038:	4838      	ldr	r0, [pc, #224]	@ (800111c <main+0x7ec>)
 800103a:	f7ff fa32 	bl	80004a2 <LL_ADC_IsActiveFlag_EOC>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f9      	beq.n	8001038 <main+0x708>
        ;
      // clear flag
      LL_ADC_ClearFlag_EOC(ADC1);
 8001044:	4835      	ldr	r0, [pc, #212]	@ (800111c <main+0x7ec>)
 8001046:	f7ff fa3f 	bl	80004c8 <LL_ADC_ClearFlag_EOC>

      sprintf(log_buf, "%lu,%lu,batt %lu\n", boot_count, log_item.log_count,
 800104a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800104c:	4b2c      	ldr	r3, [pc, #176]	@ (8001100 <main+0x7d0>)
 800104e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001050:	4b2b      	ldr	r3, [pc, #172]	@ (8001100 <main+0x7d0>)
 8001052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	460b      	mov	r3, r1
 8001058:	4934      	ldr	r1, [pc, #208]	@ (800112c <main+0x7fc>)
 800105a:	482b      	ldr	r0, [pc, #172]	@ (8001108 <main+0x7d8>)
 800105c:	f00b fd46 	bl	800caec <siprintf>
              log_item.batt_v);

      write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                      strlen(log_buf));
 8001060:	4829      	ldr	r0, [pc, #164]	@ (8001108 <main+0x7d8>)
 8001062:	f7ff f895 	bl	8000190 <strlen>
 8001066:	4603      	mov	r3, r0
      write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	4b27      	ldr	r3, [pc, #156]	@ (8001108 <main+0x7d8>)
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	4b27      	ldr	r3, [pc, #156]	@ (800110c <main+0x7dc>)
 8001070:	4a27      	ldr	r2, [pc, #156]	@ (8001110 <main+0x7e0>)
 8001072:	4928      	ldr	r1, [pc, #160]	@ (8001114 <main+0x7e4>)
 8001074:	4828      	ldr	r0, [pc, #160]	@ (8001118 <main+0x7e8>)
 8001076:	f003 fe27 	bl	8004cc8 <write_buf_to_fs>

      // end ADC read

      // -- Thermal Management --
      if ((log_item.temperature) <= 1000 && !(flags & HEAT_FLAG)) {
 800107a:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <main+0x7d0>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001082:	dc5b      	bgt.n	800113c <main+0x80c>
 8001084:	4b2a      	ldr	r3, [pc, #168]	@ (8001130 <main+0x800>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800108c:	2b00      	cmp	r3, #0
 800108e:	d155      	bne.n	800113c <main+0x80c>
        // turn on heater?
        PA6_HIGH
 8001090:	2140      	movs	r1, #64	@ 0x40
 8001092:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001096:	f7ff fb14 	bl	80006c2 <LL_GPIO_SetOutputPin>

        // Enable PWM channel outputs
        LL_TIM_EnableCounter(TIM1);
 800109a:	4826      	ldr	r0, [pc, #152]	@ (8001134 <main+0x804>)
 800109c:	f7ff fac2 	bl	8000624 <LL_TIM_EnableCounter>
        LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH3N);
 80010a0:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 80010a4:	4823      	ldr	r0, [pc, #140]	@ (8001134 <main+0x804>)
 80010a6:	f7ff fadd 	bl	8000664 <LL_TIM_CC_EnableChannel>
        LL_TIM_OC_SetCompareCH3(TIM1, 15);
 80010aa:	210f      	movs	r1, #15
 80010ac:	4821      	ldr	r0, [pc, #132]	@ (8001134 <main+0x804>)
 80010ae:	f7ff faea 	bl	8000686 <LL_TIM_OC_SetCompareCH3>
        LL_TIM_EnableAllOutputs(TIM1);
 80010b2:	4820      	ldr	r0, [pc, #128]	@ (8001134 <main+0x804>)
 80010b4:	f7ff faf5 	bl	80006a2 <LL_TIM_EnableAllOutputs>

        sprintf(log_buf, "%lu,%lu, HEAT ON, temp is %lu at %lu\n", boot_count,
 80010b8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <main+0x7d0>)
 80010bc:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <main+0x7d0>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001100 <main+0x7d0>)
 80010c4:	6812      	ldr	r2, [r2, #0]
 80010c6:	9201      	str	r2, [sp, #4]
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	4603      	mov	r3, r0
 80010cc:	460a      	mov	r2, r1
 80010ce:	491a      	ldr	r1, [pc, #104]	@ (8001138 <main+0x808>)
 80010d0:	480d      	ldr	r0, [pc, #52]	@ (8001108 <main+0x7d8>)
 80010d2:	f00b fd0b 	bl	800caec <siprintf>
                log_item.log_count, log_item.temperature, log_item.time);
        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                        strlen(log_buf));
 80010d6:	480c      	ldr	r0, [pc, #48]	@ (8001108 <main+0x7d8>)
 80010d8:	f7ff f85a 	bl	8000190 <strlen>
 80010dc:	4603      	mov	r3, r0
        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <main+0x7d8>)
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	4b09      	ldr	r3, [pc, #36]	@ (800110c <main+0x7dc>)
 80010e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <main+0x7e0>)
 80010e8:	490a      	ldr	r1, [pc, #40]	@ (8001114 <main+0x7e4>)
 80010ea:	480b      	ldr	r0, [pc, #44]	@ (8001118 <main+0x7e8>)
 80010ec:	f003 fdec 	bl	8004cc8 <write_buf_to_fs>

        flags = flags | HEAT_FLAG;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <main+0x800>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001130 <main+0x800>)
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	e057      	b.n	80011ae <main+0x87e>
 80010fe:	bf00      	nop
 8001100:	200000c0 	.word	0x200000c0
 8001104:	0800e768 	.word	0x0800e768
 8001108:	20000160 	.word	0x20000160
 800110c:	0800e6b8 	.word	0x0800e6b8
 8001110:	20000298 	.word	0x20000298
 8001114:	0800f654 	.word	0x0800f654
 8001118:	200001c4 	.word	0x200001c4
 800111c:	50040000 	.word	0x50040000
 8001120:	0001869f 	.word	0x0001869f
 8001124:	00100101 	.word	0x00100101
 8001128:	cccccccd 	.word	0xcccccccd
 800112c:	0800e794 	.word	0x0800e794
 8001130:	20000004 	.word	0x20000004
 8001134:	40012c00 	.word	0x40012c00
 8001138:	0800e7a8 	.word	0x0800e7a8

      } else if ((log_item.temperature) >= 500 && (flags & HEAT_FLAG)) {
 800113c:	4b99      	ldr	r3, [pc, #612]	@ (80013a4 <main+0xa74>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001140:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001144:	db33      	blt.n	80011ae <main+0x87e>
 8001146:	4b98      	ldr	r3, [pc, #608]	@ (80013a8 <main+0xa78>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800114e:	2b00      	cmp	r3, #0
 8001150:	d02d      	beq.n	80011ae <main+0x87e>
        PA6_LOW
 8001152:	2140      	movs	r1, #64	@ 0x40
 8001154:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001158:	f7ff fac1 	bl	80006de <LL_GPIO_ResetOutputPin>

        LL_TIM_OC_SetCompareCH3(TIM1, 0);
 800115c:	2100      	movs	r1, #0
 800115e:	4893      	ldr	r0, [pc, #588]	@ (80013ac <main+0xa7c>)
 8001160:	f7ff fa91 	bl	8000686 <LL_TIM_OC_SetCompareCH3>
        LL_TIM_DisableCounter(TIM1);
 8001164:	4891      	ldr	r0, [pc, #580]	@ (80013ac <main+0xa7c>)
 8001166:	f7ff fa6d 	bl	8000644 <LL_TIM_DisableCounter>

        sprintf(log_buf, "%lu,%lu, HEAT OFF, temp is %lu at %lu\n", boot_count,
 800116a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800116c:	4b8d      	ldr	r3, [pc, #564]	@ (80013a4 <main+0xa74>)
 800116e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8001170:	4b8c      	ldr	r3, [pc, #560]	@ (80013a4 <main+0xa74>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001174:	4a8b      	ldr	r2, [pc, #556]	@ (80013a4 <main+0xa74>)
 8001176:	6812      	ldr	r2, [r2, #0]
 8001178:	9201      	str	r2, [sp, #4]
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	4603      	mov	r3, r0
 800117e:	460a      	mov	r2, r1
 8001180:	498b      	ldr	r1, [pc, #556]	@ (80013b0 <main+0xa80>)
 8001182:	488c      	ldr	r0, [pc, #560]	@ (80013b4 <main+0xa84>)
 8001184:	f00b fcb2 	bl	800caec <siprintf>
                log_item.log_count, log_item.temperature, log_item.time);
        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                        strlen(log_buf));
 8001188:	488a      	ldr	r0, [pc, #552]	@ (80013b4 <main+0xa84>)
 800118a:	f7ff f801 	bl	8000190 <strlen>
 800118e:	4603      	mov	r3, r0
        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	4b88      	ldr	r3, [pc, #544]	@ (80013b4 <main+0xa84>)
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	4b88      	ldr	r3, [pc, #544]	@ (80013b8 <main+0xa88>)
 8001198:	4a88      	ldr	r2, [pc, #544]	@ (80013bc <main+0xa8c>)
 800119a:	4989      	ldr	r1, [pc, #548]	@ (80013c0 <main+0xa90>)
 800119c:	4889      	ldr	r0, [pc, #548]	@ (80013c4 <main+0xa94>)
 800119e:	f003 fd93 	bl	8004cc8 <write_buf_to_fs>

        flags = flags & ~(HEAT_FLAG);
 80011a2:	4b81      	ldr	r3, [pc, #516]	@ (80013a8 <main+0xa78>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80011aa:	4a7f      	ldr	r2, [pc, #508]	@ (80013a8 <main+0xa78>)
 80011ac:	6013      	str	r3, [r2, #0]
      }
      // end thermal management

      // -- Termination Logic --
      if (log_item.prev_pressure <
 80011ae:	4b7d      	ldr	r3, [pc, #500]	@ (80013a4 <main+0xa74>)
 80011b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
          log_item.pressure) { // if pressure increased since last measurement,
 80011b2:	4b7c      	ldr	r3, [pc, #496]	@ (80013a4 <main+0xa74>)
 80011b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (log_item.prev_pressure <
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d226      	bcs.n	8001208 <main+0x8d8>
                               // might be descending, would be more accurate
                               // with more historical data
        if (log_item.pressure - log_item.prev_pressure >= 1000) {
 80011ba:	4b7a      	ldr	r3, [pc, #488]	@ (80013a4 <main+0xa74>)
 80011bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011be:	4b79      	ldr	r3, [pc, #484]	@ (80013a4 <main+0xa74>)
 80011c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011c8:	d31e      	bcc.n	8001208 <main+0x8d8>

          sprintf(log_buf, "%lu, %lu, DESC, press diff is %lu at %lu\n",
 80011ca:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80011cc:	4b75      	ldr	r3, [pc, #468]	@ (80013a4 <main+0xa74>)
 80011ce:	6b58      	ldr	r0, [r3, #52]	@ 0x34
                  boot_count, log_item.log_count,
                  (log_item.pressure - log_item.prev_pressure), log_item.time);
 80011d0:	4b74      	ldr	r3, [pc, #464]	@ (80013a4 <main+0xa74>)
 80011d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011d4:	4b73      	ldr	r3, [pc, #460]	@ (80013a4 <main+0xa74>)
 80011d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          sprintf(log_buf, "%lu, %lu, DESC, press diff is %lu at %lu\n",
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	4a72      	ldr	r2, [pc, #456]	@ (80013a4 <main+0xa74>)
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	9201      	str	r2, [sp, #4]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	4603      	mov	r3, r0
 80011e4:	460a      	mov	r2, r1
 80011e6:	4978      	ldr	r1, [pc, #480]	@ (80013c8 <main+0xa98>)
 80011e8:	4872      	ldr	r0, [pc, #456]	@ (80013b4 <main+0xa84>)
 80011ea:	f00b fc7f 	bl	800caec <siprintf>

          write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                          strlen(log_buf));
 80011ee:	4871      	ldr	r0, [pc, #452]	@ (80013b4 <main+0xa84>)
 80011f0:	f7fe ffce 	bl	8000190 <strlen>
 80011f4:	4603      	mov	r3, r0
          write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	4b6e      	ldr	r3, [pc, #440]	@ (80013b4 <main+0xa84>)
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	4b6e      	ldr	r3, [pc, #440]	@ (80013b8 <main+0xa88>)
 80011fe:	4a6f      	ldr	r2, [pc, #444]	@ (80013bc <main+0xa8c>)
 8001200:	496f      	ldr	r1, [pc, #444]	@ (80013c0 <main+0xa90>)
 8001202:	4870      	ldr	r0, [pc, #448]	@ (80013c4 <main+0xa94>)
 8001204:	f003 fd60 	bl	8004cc8 <write_buf_to_fs>

          // set the flag which we're not doing right now
        }
      }

      if (log_item.prev_altitude >
 8001208:	4b66      	ldr	r3, [pc, #408]	@ (80013a4 <main+0xa74>)
 800120a:	69da      	ldr	r2, [r3, #28]
          log_item.altitude) { // if altitude descreased, might be descending
 800120c:	4b65      	ldr	r3, [pc, #404]	@ (80013a4 <main+0xa74>)
 800120e:	6a1b      	ldr	r3, [r3, #32]
      if (log_item.prev_altitude >
 8001210:	429a      	cmp	r2, r3
 8001212:	d926      	bls.n	8001262 <main+0x932>
        if (log_item.prev_altitude - log_item.altitude >= 900) {
 8001214:	4b63      	ldr	r3, [pc, #396]	@ (80013a4 <main+0xa74>)
 8001216:	69da      	ldr	r2, [r3, #28]
 8001218:	4b62      	ldr	r3, [pc, #392]	@ (80013a4 <main+0xa74>)
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8001222:	d31e      	bcc.n	8001262 <main+0x932>

          sprintf(log_buf, "%lu,%lu, DESC, altitude diff is %lu at %lu\n",
 8001224:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001226:	4b5f      	ldr	r3, [pc, #380]	@ (80013a4 <main+0xa74>)
 8001228:	6b58      	ldr	r0, [r3, #52]	@ 0x34
                  boot_count, log_item.log_count,
                  (log_item.pressure - log_item.prev_pressure), log_item.time);
 800122a:	4b5e      	ldr	r3, [pc, #376]	@ (80013a4 <main+0xa74>)
 800122c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800122e:	4b5d      	ldr	r3, [pc, #372]	@ (80013a4 <main+0xa74>)
 8001230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          sprintf(log_buf, "%lu,%lu, DESC, altitude diff is %lu at %lu\n",
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	4a5b      	ldr	r2, [pc, #364]	@ (80013a4 <main+0xa74>)
 8001236:	6812      	ldr	r2, [r2, #0]
 8001238:	9201      	str	r2, [sp, #4]
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	4603      	mov	r3, r0
 800123e:	460a      	mov	r2, r1
 8001240:	4962      	ldr	r1, [pc, #392]	@ (80013cc <main+0xa9c>)
 8001242:	485c      	ldr	r0, [pc, #368]	@ (80013b4 <main+0xa84>)
 8001244:	f00b fc52 	bl	800caec <siprintf>

          write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                          strlen(log_buf));
 8001248:	485a      	ldr	r0, [pc, #360]	@ (80013b4 <main+0xa84>)
 800124a:	f7fe ffa1 	bl	8000190 <strlen>
 800124e:	4603      	mov	r3, r0
          write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	4b58      	ldr	r3, [pc, #352]	@ (80013b4 <main+0xa84>)
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	4b58      	ldr	r3, [pc, #352]	@ (80013b8 <main+0xa88>)
 8001258:	4a58      	ldr	r2, [pc, #352]	@ (80013bc <main+0xa8c>)
 800125a:	4959      	ldr	r1, [pc, #356]	@ (80013c0 <main+0xa90>)
 800125c:	4859      	ldr	r0, [pc, #356]	@ (80013c4 <main+0xa94>)
 800125e:	f003 fd33 	bl	8004cc8 <write_buf_to_fs>

          // set the flag which we're not doing right now
        }
      }

      if (cut_counter < 4) { // limit total number of cut attempts
 8001262:	4b5b      	ldr	r3, [pc, #364]	@ (80013d0 <main+0xaa0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b03      	cmp	r3, #3
 8001268:	d85b      	bhi.n	8001322 <main+0x9f2>

        if ((int_count_30 >= (cut_int_timer * 2)) &&
 800126a:	4b5a      	ldr	r3, [pc, #360]	@ (80013d4 <main+0xaa4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	005a      	lsls	r2, r3, #1
 8001270:	4b59      	ldr	r3, [pc, #356]	@ (80013d8 <main+0xaa8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d827      	bhi.n	80012c8 <main+0x998>
            (flags & INT_TIM_EN_FLAG)) { // timer trigger
 8001278:	4b4b      	ldr	r3, [pc, #300]	@ (80013a8 <main+0xa78>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0308 	and.w	r3, r3, #8
        if ((int_count_30 >= (cut_int_timer * 2)) &&
 8001280:	2b00      	cmp	r3, #0
 8001282:	d021      	beq.n	80012c8 <main+0x998>

          sprintf(log_buf, "%lu,%lu, cut %lu int trig: int cnt at %lu\n",
 8001284:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001286:	4b47      	ldr	r3, [pc, #284]	@ (80013a4 <main+0xa74>)
 8001288:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800128a:	4b51      	ldr	r3, [pc, #324]	@ (80013d0 <main+0xaa0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a45      	ldr	r2, [pc, #276]	@ (80013a4 <main+0xa74>)
 8001290:	6812      	ldr	r2, [r2, #0]
 8001292:	9201      	str	r2, [sp, #4]
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	4603      	mov	r3, r0
 8001298:	460a      	mov	r2, r1
 800129a:	4950      	ldr	r1, [pc, #320]	@ (80013dc <main+0xaac>)
 800129c:	4845      	ldr	r0, [pc, #276]	@ (80013b4 <main+0xa84>)
 800129e:	f00b fc25 	bl	800caec <siprintf>
                  boot_count, log_item.log_count, cut_counter, log_item.time);

          write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                          strlen(log_buf));
 80012a2:	4844      	ldr	r0, [pc, #272]	@ (80013b4 <main+0xa84>)
 80012a4:	f7fe ff74 	bl	8000190 <strlen>
 80012a8:	4603      	mov	r3, r0
          write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	4b41      	ldr	r3, [pc, #260]	@ (80013b4 <main+0xa84>)
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	4b41      	ldr	r3, [pc, #260]	@ (80013b8 <main+0xa88>)
 80012b2:	4a42      	ldr	r2, [pc, #264]	@ (80013bc <main+0xa8c>)
 80012b4:	4942      	ldr	r1, [pc, #264]	@ (80013c0 <main+0xa90>)
 80012b6:	4843      	ldr	r0, [pc, #268]	@ (80013c4 <main+0xa94>)
 80012b8:	f003 fd06 	bl	8004cc8 <write_buf_to_fs>

          flags = flags | CUT_FLAG;
 80012bc:	4b3a      	ldr	r3, [pc, #232]	@ (80013a8 <main+0xa78>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	4a38      	ldr	r2, [pc, #224]	@ (80013a8 <main+0xa78>)
 80012c6:	6013      	str	r3, [r2, #0]
        }

        if ((log_item.temperature <= -3000) &&
 80012c8:	4b36      	ldr	r3, [pc, #216]	@ (80013a4 <main+0xa74>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012cc:	4a44      	ldr	r2, [pc, #272]	@ (80013e0 <main+0xab0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	da27      	bge.n	8001322 <main+0x9f2>
            (flags & INT_TIM_EN_FLAG)) { // timer trigger
 80012d2:	4b35      	ldr	r3, [pc, #212]	@ (80013a8 <main+0xa78>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0308 	and.w	r3, r3, #8
        if ((log_item.temperature <= -3000) &&
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d021      	beq.n	8001322 <main+0x9f2>

          sprintf(log_buf, "%lu,%lu, cut %lu temp trig: int cnt at %lu\n",
 80012de:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80012e0:	4b30      	ldr	r3, [pc, #192]	@ (80013a4 <main+0xa74>)
 80012e2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80012e4:	4b3a      	ldr	r3, [pc, #232]	@ (80013d0 <main+0xaa0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a2e      	ldr	r2, [pc, #184]	@ (80013a4 <main+0xa74>)
 80012ea:	6812      	ldr	r2, [r2, #0]
 80012ec:	9201      	str	r2, [sp, #4]
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	4603      	mov	r3, r0
 80012f2:	460a      	mov	r2, r1
 80012f4:	493b      	ldr	r1, [pc, #236]	@ (80013e4 <main+0xab4>)
 80012f6:	482f      	ldr	r0, [pc, #188]	@ (80013b4 <main+0xa84>)
 80012f8:	f00b fbf8 	bl	800caec <siprintf>
                  boot_count, log_item.log_count, cut_counter, log_item.time);

          write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                          strlen(log_buf));
 80012fc:	482d      	ldr	r0, [pc, #180]	@ (80013b4 <main+0xa84>)
 80012fe:	f7fe ff47 	bl	8000190 <strlen>
 8001302:	4603      	mov	r3, r0
          write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	4b2b      	ldr	r3, [pc, #172]	@ (80013b4 <main+0xa84>)
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	4b2b      	ldr	r3, [pc, #172]	@ (80013b8 <main+0xa88>)
 800130c:	4a2b      	ldr	r2, [pc, #172]	@ (80013bc <main+0xa8c>)
 800130e:	492c      	ldr	r1, [pc, #176]	@ (80013c0 <main+0xa90>)
 8001310:	482c      	ldr	r0, [pc, #176]	@ (80013c4 <main+0xa94>)
 8001312:	f003 fcd9 	bl	8004cc8 <write_buf_to_fs>

          flags = flags | CUT_FLAG;
 8001316:	4b24      	ldr	r3, [pc, #144]	@ (80013a8 <main+0xa78>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	4a22      	ldr	r2, [pc, #136]	@ (80013a8 <main+0xa78>)
 8001320:	6013      	str	r3, [r2, #0]
        }
      }

      if (flags & CUT_FLAG &&
 8001322:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <main+0xa78>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d060      	beq.n	80013f0 <main+0xac0>
          (flags &
 800132e:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <main+0xa78>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 0320 	bic.w	r3, r3, #32
      if (flags & CUT_FLAG &&
 8001336:	2b00      	cmp	r3, #0
 8001338:	d05a      	beq.n	80013f0 <main+0xac0>
           ~(DESC_FLAG))) { // a trigger set cut flag AND descent not detected

        // disable thermal management
        PA6_LOW
 800133a:	2140      	movs	r1, #64	@ 0x40
 800133c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001340:	f7ff f9cd 	bl	80006de <LL_GPIO_ResetOutputPin>

        // Enable PWM channel outputs
        LL_TIM_EnableCounter(TIM1);
 8001344:	4819      	ldr	r0, [pc, #100]	@ (80013ac <main+0xa7c>)
 8001346:	f7ff f96d 	bl	8000624 <LL_TIM_EnableCounter>
        LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH3N);
 800134a:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 800134e:	4817      	ldr	r0, [pc, #92]	@ (80013ac <main+0xa7c>)
 8001350:	f7ff f988 	bl	8000664 <LL_TIM_CC_EnableChannel>
        LL_TIM_OC_SetCompareCH3(TIM1, 0);
 8001354:	2100      	movs	r1, #0
 8001356:	4815      	ldr	r0, [pc, #84]	@ (80013ac <main+0xa7c>)
 8001358:	f7ff f995 	bl	8000686 <LL_TIM_OC_SetCompareCH3>
        LL_TIM_EnableAllOutputs(TIM1);
 800135c:	4813      	ldr	r0, [pc, #76]	@ (80013ac <main+0xa7c>)
 800135e:	f7ff f9a0 	bl	80006a2 <LL_TIM_EnableAllOutputs>

        LL_ADC_Disable(ADC1);
 8001362:	4821      	ldr	r0, [pc, #132]	@ (80013e8 <main+0xab8>)
 8001364:	f7ff f868 	bl	8000438 <LL_ADC_Disable>
        MX_ADC1_Init();
 8001368:	f001 fbb8 	bl	8002adc <MX_ADC1_Init>
        LL_ADC_Enable(ADC1);
 800136c:	481e      	ldr	r0, [pc, #120]	@ (80013e8 <main+0xab8>)
 800136e:	f7ff f84f 	bl	8000410 <LL_ADC_Enable>

        sprintf(log_buf, "%lu, start cut %lu at %lu\n", boot_count, cut_counter,
 8001372:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001374:	4b16      	ldr	r3, [pc, #88]	@ (80013d0 <main+0xaa0>)
 8001376:	6819      	ldr	r1, [r3, #0]
 8001378:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <main+0xa74>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	460b      	mov	r3, r1
 8001380:	491a      	ldr	r1, [pc, #104]	@ (80013ec <main+0xabc>)
 8001382:	480c      	ldr	r0, [pc, #48]	@ (80013b4 <main+0xa84>)
 8001384:	f00b fbb2 	bl	800caec <siprintf>
                log_item.time);

        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                        strlen(log_buf));
 8001388:	480a      	ldr	r0, [pc, #40]	@ (80013b4 <main+0xa84>)
 800138a:	f7fe ff01 	bl	8000190 <strlen>
 800138e:	4603      	mov	r3, r0
        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <main+0xa84>)
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <main+0xa88>)
 8001398:	4a08      	ldr	r2, [pc, #32]	@ (80013bc <main+0xa8c>)
 800139a:	4909      	ldr	r1, [pc, #36]	@ (80013c0 <main+0xa90>)
 800139c:	4809      	ldr	r0, [pc, #36]	@ (80013c4 <main+0xa94>)
 800139e:	f003 fc93 	bl	8004cc8 <write_buf_to_fs>
 80013a2:	e025      	b.n	80013f0 <main+0xac0>
 80013a4:	200000c0 	.word	0x200000c0
 80013a8:	20000004 	.word	0x20000004
 80013ac:	40012c00 	.word	0x40012c00
 80013b0:	0800e7d0 	.word	0x0800e7d0
 80013b4:	20000160 	.word	0x20000160
 80013b8:	0800e6b8 	.word	0x0800e6b8
 80013bc:	20000298 	.word	0x20000298
 80013c0:	0800f654 	.word	0x0800f654
 80013c4:	200001c4 	.word	0x200001c4
 80013c8:	0800e7f8 	.word	0x0800e7f8
 80013cc:	0800e824 	.word	0x0800e824
 80013d0:	200000a8 	.word	0x200000a8
 80013d4:	20000000 	.word	0x20000000
 80013d8:	200000a4 	.word	0x200000a4
 80013dc:	0800e850 	.word	0x0800e850
 80013e0:	fffff449 	.word	0xfffff449
 80013e4:	0800e87c 	.word	0x0800e87c
 80013e8:	50040000 	.word	0x50040000
 80013ec:	0800e8a8 	.word	0x0800e8a8
      }
      // end Termination Logic

      // clean up loop
      flags = flags & ~(LOG_FLAG);
 80013f0:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <main+0xae8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f023 0301 	bic.w	r3, r3, #1
 80013f8:	4a07      	ldr	r2, [pc, #28]	@ (8001418 <main+0xae8>)
 80013fa:	6013      	str	r3, [r2, #0]
      PA8_LOW
 80013fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001400:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001404:	f7ff f96b 	bl	80006de <LL_GPIO_ResetOutputPin>
      LL_LPTIM_ClearFLAG_ARRM(LPTIM1);
 8001408:	4804      	ldr	r0, [pc, #16]	@ (800141c <main+0xaec>)
 800140a:	f7ff f9ac 	bl	8000766 <LL_LPTIM_ClearFlag_ARRM>
    }

    LL_IWDG_ReloadCounter(IWDG);
 800140e:	4804      	ldr	r0, [pc, #16]	@ (8001420 <main+0xaf0>)
 8001410:	f7ff fa7f 	bl	8000912 <LL_IWDG_ReloadCounter>
    while ((flags & CUT_FLAG) &&
 8001414:	e472      	b.n	8000cfc <main+0x3cc>
 8001416:	bf00      	nop
 8001418:	20000004 	.word	0x20000004
 800141c:	40007c00 	.word	0x40007c00
 8001420:	40003000 	.word	0x40003000

08001424 <get_gps_data>:
  }
}

// this function waits for NMEA messages and parses it into the log item
// struct above
int get_gps_data() {
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b089      	sub	sp, #36	@ 0x24
 8001428:	af06      	add	r7, sp, #24
  static uint32_t len = 100;
  static uint32_t i = 0;

  // MX_USART2_UART_Init();

  LL_USART_DisableOverrunDetect(USART2);
 800142a:	489b      	ldr	r0, [pc, #620]	@ (8001698 <get_gps_data+0x274>)
 800142c:	f7ff fa31 	bl	8000892 <LL_USART_DisableOverrunDetect>
  LL_USART_ClearFlag_ORE(USART2);
 8001430:	4899      	ldr	r0, [pc, #612]	@ (8001698 <get_gps_data+0x274>)
 8001432:	f7ff fa51 	bl	80008d8 <LL_USART_ClearFlag_ORE>

  LL_USART_DisableDirectionRx(USART2);
 8001436:	4898      	ldr	r0, [pc, #608]	@ (8001698 <get_gps_data+0x274>)
 8001438:	f7ff f9e9 	bl	800080e <LL_USART_DisableDirectionRx>
  LL_USART_EnableDirectionRx(USART2);
 800143c:	4896      	ldr	r0, [pc, #600]	@ (8001698 <get_gps_data+0x274>)
 800143e:	f7ff f9c5 	bl	80007cc <LL_USART_EnableDirectionRx>
  LL_USART_EnableDirectionTx(USART2);
 8001442:	4895      	ldr	r0, [pc, #596]	@ (8001698 <get_gps_data+0x274>)
 8001444:	f7ff fa04 	bl	8000850 <LL_USART_EnableDirectionTx>

  while (1) { // poll I2C bus until end of line is received

    int timeout = 0; // I2C software timeout counter
 8001448:	2300      	movs	r3, #0
 800144a:	607b      	str	r3, [r7, #4]

    // I2C RX
    LL_I2C_HandleTransfer(
 800144c:	4b93      	ldr	r3, [pc, #588]	@ (800169c <get_gps_data+0x278>)
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2301      	movs	r3, #1
 8001458:	2200      	movs	r2, #0
 800145a:	2184      	movs	r1, #132	@ 0x84
 800145c:	4890      	ldr	r0, [pc, #576]	@ (80016a0 <get_gps_data+0x27c>)
 800145e:	f7ff f863 	bl	8000528 <LL_I2C_HandleTransfer>
        I2C1, (0x42 << 1), LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND,
        LL_I2C_GENERATE_START_READ); // request 1 byte from GPS

    while (LL_I2C_IsActiveFlag_RXNE(I2C1) == 0) { // wait for response
 8001462:	e00a      	b.n	800147a <get_gps_data+0x56>
      if (timeout >= 20000) {
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800146a:	4293      	cmp	r3, r2
 800146c:	dd02      	ble.n	8001474 <get_gps_data+0x50>
        return -1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001472:	e10d      	b.n	8001690 <get_gps_data+0x26c>
      }
      timeout++;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3301      	adds	r3, #1
 8001478:	607b      	str	r3, [r7, #4]
    while (LL_I2C_IsActiveFlag_RXNE(I2C1) == 0) { // wait for response
 800147a:	4889      	ldr	r0, [pc, #548]	@ (80016a0 <get_gps_data+0x27c>)
 800147c:	f7ff f841 	bl	8000502 <LL_I2C_IsActiveFlag_RXNE>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0ee      	beq.n	8001464 <get_gps_data+0x40>
    }

    buf[i] = (char)LL_I2C_ReceiveData8(I2C1);
 8001486:	4b87      	ldr	r3, [pc, #540]	@ (80016a4 <get_gps_data+0x280>)
 8001488:	681c      	ldr	r4, [r3, #0]
 800148a:	4885      	ldr	r0, [pc, #532]	@ (80016a0 <get_gps_data+0x27c>)
 800148c:	f7ff f87c 	bl	8000588 <LL_I2C_ReceiveData8>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b84      	ldr	r3, [pc, #528]	@ (80016a8 <get_gps_data+0x284>)
 8001496:	551a      	strb	r2, [r3, r4]
break;
timeout++;
}
    */

    if (buf[i] == '$') {
 8001498:	4b82      	ldr	r3, [pc, #520]	@ (80016a4 <get_gps_data+0x280>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a82      	ldr	r2, [pc, #520]	@ (80016a8 <get_gps_data+0x284>)
 800149e:	5cd3      	ldrb	r3, [r2, r3]
 80014a0:	2b24      	cmp	r3, #36	@ 0x24
 80014a2:	d107      	bne.n	80014b4 <get_gps_data+0x90>
      i = 0;
 80014a4:	4b7f      	ldr	r3, [pc, #508]	@ (80016a4 <get_gps_data+0x280>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
      buf[i] = '$';
 80014aa:	4b7e      	ldr	r3, [pc, #504]	@ (80016a4 <get_gps_data+0x280>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a7e      	ldr	r2, [pc, #504]	@ (80016a8 <get_gps_data+0x284>)
 80014b0:	2124      	movs	r1, #36	@ 0x24
 80014b2:	54d1      	strb	r1, [r2, r3]
    }

    if (i >= (len - 1) || buf[i] == 10) {
 80014b4:	4b7d      	ldr	r3, [pc, #500]	@ (80016ac <get_gps_data+0x288>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	1e5a      	subs	r2, r3, #1
 80014ba:	4b7a      	ldr	r3, [pc, #488]	@ (80016a4 <get_gps_data+0x280>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d906      	bls.n	80014d0 <get_gps_data+0xac>
 80014c2:	4b78      	ldr	r3, [pc, #480]	@ (80016a4 <get_gps_data+0x280>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a78      	ldr	r2, [pc, #480]	@ (80016a8 <get_gps_data+0x284>)
 80014c8:	5cd3      	ldrb	r3, [r2, r3]
 80014ca:	2b0a      	cmp	r3, #10
 80014cc:	f040 80d1 	bne.w	8001672 <get_gps_data+0x24e>
      buf[len - 1] = 0x00;
 80014d0:	4b76      	ldr	r3, [pc, #472]	@ (80016ac <get_gps_data+0x288>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	4a74      	ldr	r2, [pc, #464]	@ (80016a8 <get_gps_data+0x284>)
 80014d8:	2100      	movs	r1, #0
 80014da:	54d1      	strb	r1, [r2, r3]
      i = 0;
 80014dc:	4b71      	ldr	r3, [pc, #452]	@ (80016a4 <get_gps_data+0x280>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]

      if ((i + 1) < len - 1)
 80014e2:	4b70      	ldr	r3, [pc, #448]	@ (80016a4 <get_gps_data+0x280>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	4b70      	ldr	r3, [pc, #448]	@ (80016ac <get_gps_data+0x288>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d205      	bcs.n	80014fe <get_gps_data+0xda>
        buf[i + 1] = '\0';
 80014f2:	4b6c      	ldr	r3, [pc, #432]	@ (80016a4 <get_gps_data+0x280>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	4a6b      	ldr	r2, [pc, #428]	@ (80016a8 <get_gps_data+0x284>)
 80014fa:	2100      	movs	r1, #0
 80014fc:	54d1      	strb	r1, [r2, r3]

      if (strncmp((buf + 3), "GGA", 3) == 0) { // parse GGA message
 80014fe:	4b6c      	ldr	r3, [pc, #432]	@ (80016b0 <get_gps_data+0x28c>)
 8001500:	2203      	movs	r2, #3
 8001502:	496c      	ldr	r1, [pc, #432]	@ (80016b4 <get_gps_data+0x290>)
 8001504:	4618      	mov	r0, r3
 8001506:	f00b fca1 	bl	800ce4c <strncmp>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	f040 8088 	bne.w	8001622 <get_gps_data+0x1fe>
          if (buf[i] == '\n')
            break;
        }
                                */

        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", buf, strlen(buf));
 8001512:	4865      	ldr	r0, [pc, #404]	@ (80016a8 <get_gps_data+0x284>)
 8001514:	f7fe fe3c 	bl	8000190 <strlen>
 8001518:	4603      	mov	r3, r0
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	4b62      	ldr	r3, [pc, #392]	@ (80016a8 <get_gps_data+0x284>)
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	4b65      	ldr	r3, [pc, #404]	@ (80016b8 <get_gps_data+0x294>)
 8001522:	4a66      	ldr	r2, [pc, #408]	@ (80016bc <get_gps_data+0x298>)
 8001524:	4966      	ldr	r1, [pc, #408]	@ (80016c0 <get_gps_data+0x29c>)
 8001526:	4867      	ldr	r0, [pc, #412]	@ (80016c4 <get_gps_data+0x2a0>)
 8001528:	f003 fbce 	bl	8004cc8 <write_buf_to_fs>

        sscanf(buf, "%*[^,],%lu.%*lu,%ld.%lu,%c,%lu.%lu,%c,%*d,%*d,%*d,%lu",
 800152c:	4b66      	ldr	r3, [pc, #408]	@ (80016c8 <get_gps_data+0x2a4>)
 800152e:	9305      	str	r3, [sp, #20]
 8001530:	4b66      	ldr	r3, [pc, #408]	@ (80016cc <get_gps_data+0x2a8>)
 8001532:	9304      	str	r3, [sp, #16]
 8001534:	4b66      	ldr	r3, [pc, #408]	@ (80016d0 <get_gps_data+0x2ac>)
 8001536:	9303      	str	r3, [sp, #12]
 8001538:	4b66      	ldr	r3, [pc, #408]	@ (80016d4 <get_gps_data+0x2b0>)
 800153a:	9302      	str	r3, [sp, #8]
 800153c:	4b66      	ldr	r3, [pc, #408]	@ (80016d8 <get_gps_data+0x2b4>)
 800153e:	9301      	str	r3, [sp, #4]
 8001540:	4b66      	ldr	r3, [pc, #408]	@ (80016dc <get_gps_data+0x2b8>)
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	4b66      	ldr	r3, [pc, #408]	@ (80016e0 <get_gps_data+0x2bc>)
 8001546:	4a67      	ldr	r2, [pc, #412]	@ (80016e4 <get_gps_data+0x2c0>)
 8001548:	4967      	ldr	r1, [pc, #412]	@ (80016e8 <get_gps_data+0x2c4>)
 800154a:	4857      	ldr	r0, [pc, #348]	@ (80016a8 <get_gps_data+0x284>)
 800154c:	f00b faf0 	bl	800cb30 <siscanf>
               &(log_item.lat_dir), &(log_item.lon_int), &(log_item.lon_frac),
               &(log_item.lon_dir), &(log_item.altitude));

        // move the decimal point left 2 for coords
        log_item.lat_frac =
            ((log_item.lat_int % 100) * count_revifs(log_item.lat_frac)) +
 8001550:	4b64      	ldr	r3, [pc, #400]	@ (80016e4 <get_gps_data+0x2c0>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4a65      	ldr	r2, [pc, #404]	@ (80016ec <get_gps_data+0x2c8>)
 8001556:	fb82 1203 	smull	r1, r2, r2, r3
 800155a:	1151      	asrs	r1, r2, #5
 800155c:	17da      	asrs	r2, r3, #31
 800155e:	1a8c      	subs	r4, r1, r2
 8001560:	2264      	movs	r2, #100	@ 0x64
 8001562:	fb04 f202 	mul.w	r2, r4, r2
 8001566:	1a9c      	subs	r4, r3, r2
 8001568:	4b5e      	ldr	r3, [pc, #376]	@ (80016e4 <get_gps_data+0x2c0>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	4618      	mov	r0, r3
 800156e:	f000 f979 	bl	8001864 <count_revifs>
 8001572:	4603      	mov	r3, r0
 8001574:	fb04 f303 	mul.w	r3, r4, r3
 8001578:	461a      	mov	r2, r3
            log_item.lat_frac;
 800157a:	4b5a      	ldr	r3, [pc, #360]	@ (80016e4 <get_gps_data+0x2c0>)
 800157c:	689b      	ldr	r3, [r3, #8]
            ((log_item.lat_int % 100) * count_revifs(log_item.lat_frac)) +
 800157e:	4413      	add	r3, r2
        log_item.lat_frac =
 8001580:	4a58      	ldr	r2, [pc, #352]	@ (80016e4 <get_gps_data+0x2c0>)
 8001582:	6093      	str	r3, [r2, #8]
        log_item.lat_int = log_item.lat_int - (log_item.lat_int % 100);
 8001584:	4b57      	ldr	r3, [pc, #348]	@ (80016e4 <get_gps_data+0x2c0>)
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	4b56      	ldr	r3, [pc, #344]	@ (80016e4 <get_gps_data+0x2c0>)
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	4b57      	ldr	r3, [pc, #348]	@ (80016ec <get_gps_data+0x2c8>)
 800158e:	fb83 0302 	smull	r0, r3, r3, r2
 8001592:	1158      	asrs	r0, r3, #5
 8001594:	17d3      	asrs	r3, r2, #31
 8001596:	1ac3      	subs	r3, r0, r3
 8001598:	2064      	movs	r0, #100	@ 0x64
 800159a:	fb00 f303 	mul.w	r3, r0, r3
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	1acb      	subs	r3, r1, r3
 80015a2:	4a50      	ldr	r2, [pc, #320]	@ (80016e4 <get_gps_data+0x2c0>)
 80015a4:	6053      	str	r3, [r2, #4]

        log_item.lon_frac =
            ((log_item.lon_int % 100) * count_revifs(log_item.lon_frac)) +
 80015a6:	4b4f      	ldr	r3, [pc, #316]	@ (80016e4 <get_gps_data+0x2c0>)
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	4a50      	ldr	r2, [pc, #320]	@ (80016ec <get_gps_data+0x2c8>)
 80015ac:	fb82 1203 	smull	r1, r2, r2, r3
 80015b0:	1151      	asrs	r1, r2, #5
 80015b2:	17da      	asrs	r2, r3, #31
 80015b4:	1a8c      	subs	r4, r1, r2
 80015b6:	2264      	movs	r2, #100	@ 0x64
 80015b8:	fb04 f202 	mul.w	r2, r4, r2
 80015bc:	1a9c      	subs	r4, r3, r2
 80015be:	4b49      	ldr	r3, [pc, #292]	@ (80016e4 <get_gps_data+0x2c0>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f94e 	bl	8001864 <count_revifs>
 80015c8:	4603      	mov	r3, r0
 80015ca:	fb04 f303 	mul.w	r3, r4, r3
 80015ce:	461a      	mov	r2, r3
            log_item.lon_frac;
 80015d0:	4b44      	ldr	r3, [pc, #272]	@ (80016e4 <get_gps_data+0x2c0>)
 80015d2:	695b      	ldr	r3, [r3, #20]
            ((log_item.lon_int % 100) * count_revifs(log_item.lon_frac)) +
 80015d4:	4413      	add	r3, r2
        log_item.lon_frac =
 80015d6:	4a43      	ldr	r2, [pc, #268]	@ (80016e4 <get_gps_data+0x2c0>)
 80015d8:	6153      	str	r3, [r2, #20]
        log_item.lon_int = log_item.lon_int - (log_item.lon_int % 100);
 80015da:	4b42      	ldr	r3, [pc, #264]	@ (80016e4 <get_gps_data+0x2c0>)
 80015dc:	6919      	ldr	r1, [r3, #16]
 80015de:	4b41      	ldr	r3, [pc, #260]	@ (80016e4 <get_gps_data+0x2c0>)
 80015e0:	691a      	ldr	r2, [r3, #16]
 80015e2:	4b42      	ldr	r3, [pc, #264]	@ (80016ec <get_gps_data+0x2c8>)
 80015e4:	fb83 0302 	smull	r0, r3, r3, r2
 80015e8:	1158      	asrs	r0, r3, #5
 80015ea:	17d3      	asrs	r3, r2, #31
 80015ec:	1ac3      	subs	r3, r0, r3
 80015ee:	2064      	movs	r0, #100	@ 0x64
 80015f0:	fb00 f303 	mul.w	r3, r0, r3
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	1acb      	subs	r3, r1, r3
 80015f8:	4a3a      	ldr	r2, [pc, #232]	@ (80016e4 <get_gps_data+0x2c0>)
 80015fa:	6113      	str	r3, [r2, #16]

        if (log_item.lat_dir == 'W')
 80015fc:	4b39      	ldr	r3, [pc, #228]	@ (80016e4 <get_gps_data+0x2c0>)
 80015fe:	7b1b      	ldrb	r3, [r3, #12]
 8001600:	2b57      	cmp	r3, #87	@ 0x57
 8001602:	d104      	bne.n	800160e <get_gps_data+0x1ea>
          log_item.lat_int = log_item.lat_int * -1;
 8001604:	4b37      	ldr	r3, [pc, #220]	@ (80016e4 <get_gps_data+0x2c0>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	425b      	negs	r3, r3
 800160a:	4a36      	ldr	r2, [pc, #216]	@ (80016e4 <get_gps_data+0x2c0>)
 800160c:	6053      	str	r3, [r2, #4]

        if (log_item.lon_dir == 'S')
 800160e:	4b35      	ldr	r3, [pc, #212]	@ (80016e4 <get_gps_data+0x2c0>)
 8001610:	7e1b      	ldrb	r3, [r3, #24]
 8001612:	2b53      	cmp	r3, #83	@ 0x53
 8001614:	d13a      	bne.n	800168c <get_gps_data+0x268>
          log_item.lon_int = log_item.lon_int * -1;
 8001616:	4b33      	ldr	r3, [pc, #204]	@ (80016e4 <get_gps_data+0x2c0>)
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	425b      	negs	r3, r3
 800161c:	4a31      	ldr	r2, [pc, #196]	@ (80016e4 <get_gps_data+0x2c0>)
 800161e:	6113      	str	r3, [r2, #16]

        break;
 8001620:	e034      	b.n	800168c <get_gps_data+0x268>
      }

      if (strncmp((buf + 3), "RMC", 3) == 0) { // parse RMC message
 8001622:	4b23      	ldr	r3, [pc, #140]	@ (80016b0 <get_gps_data+0x28c>)
 8001624:	2203      	movs	r2, #3
 8001626:	4932      	ldr	r1, [pc, #200]	@ (80016f0 <get_gps_data+0x2cc>)
 8001628:	4618      	mov	r0, r3
 800162a:	f00b fc0f 	bl	800ce4c <strncmp>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d11e      	bne.n	8001672 <get_gps_data+0x24e>

        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", buf, strlen(buf));
 8001634:	481c      	ldr	r0, [pc, #112]	@ (80016a8 <get_gps_data+0x284>)
 8001636:	f7fe fdab 	bl	8000190 <strlen>
 800163a:	4603      	mov	r3, r0
 800163c:	9301      	str	r3, [sp, #4]
 800163e:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <get_gps_data+0x284>)
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	4b1d      	ldr	r3, [pc, #116]	@ (80016b8 <get_gps_data+0x294>)
 8001644:	4a1d      	ldr	r2, [pc, #116]	@ (80016bc <get_gps_data+0x298>)
 8001646:	491e      	ldr	r1, [pc, #120]	@ (80016c0 <get_gps_data+0x29c>)
 8001648:	481e      	ldr	r0, [pc, #120]	@ (80016c4 <get_gps_data+0x2a0>)
 800164a:	f003 fb3d 	bl	8004cc8 <write_buf_to_fs>

        sscanf(buf,
 800164e:	4b29      	ldr	r3, [pc, #164]	@ (80016f4 <get_gps_data+0x2d0>)
 8001650:	9305      	str	r3, [sp, #20]
 8001652:	4b1e      	ldr	r3, [pc, #120]	@ (80016cc <get_gps_data+0x2a8>)
 8001654:	9304      	str	r3, [sp, #16]
 8001656:	4b1e      	ldr	r3, [pc, #120]	@ (80016d0 <get_gps_data+0x2ac>)
 8001658:	9303      	str	r3, [sp, #12]
 800165a:	4b1e      	ldr	r3, [pc, #120]	@ (80016d4 <get_gps_data+0x2b0>)
 800165c:	9302      	str	r3, [sp, #8]
 800165e:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <get_gps_data+0x2b4>)
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	4b1e      	ldr	r3, [pc, #120]	@ (80016dc <get_gps_data+0x2b8>)
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	4b1e      	ldr	r3, [pc, #120]	@ (80016e0 <get_gps_data+0x2bc>)
 8001668:	4a1e      	ldr	r2, [pc, #120]	@ (80016e4 <get_gps_data+0x2c0>)
 800166a:	4923      	ldr	r1, [pc, #140]	@ (80016f8 <get_gps_data+0x2d4>)
 800166c:	480e      	ldr	r0, [pc, #56]	@ (80016a8 <get_gps_data+0x284>)
 800166e:	f00b fa5f 	bl	800cb30 <siscanf>
               &(log_item.lat_dir), &(log_item.lon_int), &(log_item.lon_frac),
               &(log_item.lon_dir), &(log_item.date));
      }
    }

    if (buf[i] != 0xFF)
 8001672:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <get_gps_data+0x280>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a0c      	ldr	r2, [pc, #48]	@ (80016a8 <get_gps_data+0x284>)
 8001678:	5cd3      	ldrb	r3, [r2, r3]
 800167a:	2bff      	cmp	r3, #255	@ 0xff
 800167c:	f43f aee4 	beq.w	8001448 <get_gps_data+0x24>
      i++;
 8001680:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <get_gps_data+0x280>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	4a07      	ldr	r2, [pc, #28]	@ (80016a4 <get_gps_data+0x280>)
 8001688:	6013      	str	r3, [r2, #0]
  while (1) { // poll I2C bus until end of line is received
 800168a:	e6dd      	b.n	8001448 <get_gps_data+0x24>
        break;
 800168c:	bf00      	nop
  }

  return 0;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bd90      	pop	{r4, r7, pc}
 8001698:	40004400 	.word	0x40004400
 800169c:	80002400 	.word	0x80002400
 80016a0:	40005400 	.word	0x40005400
 80016a4:	20000340 	.word	0x20000340
 80016a8:	20000344 	.word	0x20000344
 80016ac:	20000020 	.word	0x20000020
 80016b0:	20000347 	.word	0x20000347
 80016b4:	0800e8c4 	.word	0x0800e8c4
 80016b8:	0800e6b8 	.word	0x0800e6b8
 80016bc:	20000298 	.word	0x20000298
 80016c0:	0800f654 	.word	0x0800f654
 80016c4:	200001c4 	.word	0x200001c4
 80016c8:	200000e0 	.word	0x200000e0
 80016cc:	200000d8 	.word	0x200000d8
 80016d0:	200000d4 	.word	0x200000d4
 80016d4:	200000d0 	.word	0x200000d0
 80016d8:	200000cc 	.word	0x200000cc
 80016dc:	200000c8 	.word	0x200000c8
 80016e0:	200000c4 	.word	0x200000c4
 80016e4:	200000c0 	.word	0x200000c0
 80016e8:	0800e8c8 	.word	0x0800e8c8
 80016ec:	51eb851f 	.word	0x51eb851f
 80016f0:	0800e900 	.word	0x0800e900
 80016f4:	200000e4 	.word	0x200000e4
 80016f8:	0800e904 	.word	0x0800e904

080016fc <read_log>:

// read the log file line by line
void read_log() {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0

  static char buf[100] = {0};
  uint32_t file_size = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]

  MX_USART2_UART_Init();
 8001706:	f001 fcc9 	bl	800309c <MX_USART2_UART_Init>

  LL_USART_EnableDirectionRx(USART2);
 800170a:	4842      	ldr	r0, [pc, #264]	@ (8001814 <read_log+0x118>)
 800170c:	f7ff f85e 	bl	80007cc <LL_USART_EnableDirectionRx>
  LL_USART_EnableDirectionTx(USART2);
 8001710:	4840      	ldr	r0, [pc, #256]	@ (8001814 <read_log+0x118>)
 8001712:	f7ff f89d 	bl	8000850 <LL_USART_EnableDirectionTx>

  int err = lfs_mount(&lfs, &cfg);
 8001716:	4940      	ldr	r1, [pc, #256]	@ (8001818 <read_log+0x11c>)
 8001718:	4840      	ldr	r0, [pc, #256]	@ (800181c <read_log+0x120>)
 800171a:	f00a f98f 	bl	800ba3c <lfs_mount>
 800171e:	60b8      	str	r0, [r7, #8]

  if (err) {
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <read_log+0x32>
    exit(-1); // trouble mounting FS
 8001726:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800172a:	f00b f90f 	bl	800c94c <exit>
    // lfs_format(&lfs, &cfg);
    // lfs_mount(&lfs, &cfg);
  }

  err = lfs_file_open(&lfs, &log_file, "flight_log", LFS_O_RDONLY);
 800172e:	2301      	movs	r3, #1
 8001730:	4a3b      	ldr	r2, [pc, #236]	@ (8001820 <read_log+0x124>)
 8001732:	493c      	ldr	r1, [pc, #240]	@ (8001824 <read_log+0x128>)
 8001734:	4839      	ldr	r0, [pc, #228]	@ (800181c <read_log+0x120>)
 8001736:	f00a f9ab 	bl	800ba90 <lfs_file_open>
 800173a:	60b8      	str	r0, [r7, #8]
  lfs_file_rewind(&lfs, &log_file);
 800173c:	4939      	ldr	r1, [pc, #228]	@ (8001824 <read_log+0x128>)
 800173e:	4837      	ldr	r0, [pc, #220]	@ (800181c <read_log+0x120>)
 8001740:	f00a fa92 	bl	800bc68 <lfs_file_rewind>

  file_size = lfs_file_size(&lfs, &log_file);
 8001744:	4937      	ldr	r1, [pc, #220]	@ (8001824 <read_log+0x128>)
 8001746:	4835      	ldr	r0, [pc, #212]	@ (800181c <read_log+0x120>)
 8001748:	f00a faa4 	bl	800bc94 <lfs_file_size>
 800174c:	4603      	mov	r3, r0
 800174e:	60fb      	str	r3, [r7, #12]

  uint32_t pos = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	607b      	str	r3, [r7, #4]

  while (lfs_file_tell(&lfs, &log_file) < file_size) {
 8001754:	e049      	b.n	80017ea <read_log+0xee>
    for (int i = 0; i < 99; i++) {
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e038      	b.n	80017ce <read_log+0xd2>
      lfs_file_read(&lfs, &log_file, (buf + i), 1);
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	4a32      	ldr	r2, [pc, #200]	@ (8001828 <read_log+0x12c>)
 8001760:	441a      	add	r2, r3
 8001762:	2301      	movs	r3, #1
 8001764:	492f      	ldr	r1, [pc, #188]	@ (8001824 <read_log+0x128>)
 8001766:	482d      	ldr	r0, [pc, #180]	@ (800181c <read_log+0x120>)
 8001768:	f00a f9f2 	bl	800bb50 <lfs_file_read>
      LL_USART_TransmitData8(USART2, buf[i]);
 800176c:	4a2e      	ldr	r2, [pc, #184]	@ (8001828 <read_log+0x12c>)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	4827      	ldr	r0, [pc, #156]	@ (8001814 <read_log+0x118>)
 8001778:	f7ff f8bb 	bl	80008f2 <LL_USART_TransmitData8>

      int timeout = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]

      while (LL_USART_IsActiveFlag_TC(USART2) == 0) {
 8001780:	e007      	b.n	8001792 <read_log+0x96>
        if (timeout >= 50000)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001788:	4293      	cmp	r3, r2
 800178a:	dc09      	bgt.n	80017a0 <read_log+0xa4>
          break;
        timeout++;
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	3301      	adds	r3, #1
 8001790:	613b      	str	r3, [r7, #16]
      while (LL_USART_IsActiveFlag_TC(USART2) == 0) {
 8001792:	4820      	ldr	r0, [pc, #128]	@ (8001814 <read_log+0x118>)
 8001794:	f7ff f88d 	bl	80008b2 <LL_USART_IsActiveFlag_TC>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f1      	beq.n	8001782 <read_log+0x86>
 800179e:	e000      	b.n	80017a2 <read_log+0xa6>
          break;
 80017a0:	bf00      	nop
      }

      if (buf[i] == 10) {
 80017a2:	4a21      	ldr	r2, [pc, #132]	@ (8001828 <read_log+0x12c>)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	4413      	add	r3, r2
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b0a      	cmp	r3, #10
 80017ac:	d10c      	bne.n	80017c8 <read_log+0xcc>
        buf[99] = 0x00;
 80017ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001828 <read_log+0x12c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
        if (i < 98)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2b61      	cmp	r3, #97	@ 0x61
 80017ba:	dc0c      	bgt.n	80017d6 <read_log+0xda>
          buf[i + 1] = 0x00;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	4a19      	ldr	r2, [pc, #100]	@ (8001828 <read_log+0x12c>)
 80017c2:	2100      	movs	r1, #0
 80017c4:	54d1      	strb	r1, [r2, r3]
        break;
 80017c6:	e006      	b.n	80017d6 <read_log+0xda>
    for (int i = 0; i < 99; i++) {
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3301      	adds	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2b62      	cmp	r3, #98	@ 0x62
 80017d2:	ddc3      	ble.n	800175c <read_log+0x60>
 80017d4:	e000      	b.n	80017d8 <read_log+0xdc>
        break;
 80017d6:	bf00      	nop
      }
    }
    pos = lfs_file_tell(&lfs, &log_file);
 80017d8:	4912      	ldr	r1, [pc, #72]	@ (8001824 <read_log+0x128>)
 80017da:	4810      	ldr	r0, [pc, #64]	@ (800181c <read_log+0x120>)
 80017dc:	f00a fa18 	bl	800bc10 <lfs_file_tell>
 80017e0:	4603      	mov	r3, r0
 80017e2:	607b      	str	r3, [r7, #4]
    LL_IWDG_ReloadCounter(IWDG);
 80017e4:	4811      	ldr	r0, [pc, #68]	@ (800182c <read_log+0x130>)
 80017e6:	f7ff f894 	bl	8000912 <LL_IWDG_ReloadCounter>
  while (lfs_file_tell(&lfs, &log_file) < file_size) {
 80017ea:	490e      	ldr	r1, [pc, #56]	@ (8001824 <read_log+0x128>)
 80017ec:	480b      	ldr	r0, [pc, #44]	@ (800181c <read_log+0x120>)
 80017ee:	f00a fa0f 	bl	800bc10 <lfs_file_tell>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d8ac      	bhi.n	8001756 <read_log+0x5a>
  }

  lfs_file_close(&lfs, &log_file);
 80017fc:	4909      	ldr	r1, [pc, #36]	@ (8001824 <read_log+0x128>)
 80017fe:	4807      	ldr	r0, [pc, #28]	@ (800181c <read_log+0x120>)
 8001800:	f00a f97a 	bl	800baf8 <lfs_file_close>
  lfs_unmount(&lfs);
 8001804:	4805      	ldr	r0, [pc, #20]	@ (800181c <read_log+0x120>)
 8001806:	f00a f92f 	bl	800ba68 <lfs_unmount>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40004400 	.word	0x40004400
 8001818:	0800f654 	.word	0x0800f654
 800181c:	200001c4 	.word	0x200001c4
 8001820:	0800e6b8 	.word	0x0800e6b8
 8001824:	20000298 	.word	0x20000298
 8001828:	200003a8 	.word	0x200003a8
 800182c:	40003000 	.word	0x40003000

08001830 <LPTIM1_IRQHandler>:
      timeout++;
    }
  }
}

void LPTIM1_IRQHandler(void) {
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  flags = flags | LOG_FLAG; // set log flag to signal to main loop to do a log
 8001834:	4b05      	ldr	r3, [pc, #20]	@ (800184c <LPTIM1_IRQHandler+0x1c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	4a03      	ldr	r2, [pc, #12]	@ (800184c <LPTIM1_IRQHandler+0x1c>)
 800183e:	6013      	str	r3, [r2, #0]
  // LL_TIM_EnableCounter(TIM1);
  // LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH3N);
  // LL_TIM_OC_SetCompareCH3(TIM1, 50); // change this
  //  LL_TIM_EnableAllOutputs(TIM1);

  LL_LPTIM_ClearFLAG_ARRM(LPTIM1);
 8001840:	4803      	ldr	r0, [pc, #12]	@ (8001850 <LPTIM1_IRQHandler+0x20>)
 8001842:	f7fe ff90 	bl	8000766 <LL_LPTIM_ClearFlag_ARRM>
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000004 	.word	0x20000004
 8001850:	40007c00 	.word	0x40007c00

08001854 <USB_IRQHandler>:

  // Clear the USB Reset (D+ & D- low) to start enumeration
  USB->CNTR &= ~USB_CNTR_FRES;
}

void USB_IRQHandler() {}
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <count_revifs>:

// counts number of digits in uint32_t, returns anywhere from 1-7
static int count_revifs(uint32_t n) {
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if (n > 999999)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a14      	ldr	r2, [pc, #80]	@ (80018c0 <count_revifs+0x5c>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d901      	bls.n	8001878 <count_revifs+0x14>
    return 7;
 8001874:	2307      	movs	r3, #7
 8001876:	e01d      	b.n	80018b4 <count_revifs+0x50>
  if (n > 99999)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a12      	ldr	r2, [pc, #72]	@ (80018c4 <count_revifs+0x60>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d901      	bls.n	8001884 <count_revifs+0x20>
    return 6;
 8001880:	2306      	movs	r3, #6
 8001882:	e017      	b.n	80018b4 <count_revifs+0x50>
  if (n > 9999)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f242 720f 	movw	r2, #9999	@ 0x270f
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <count_revifs+0x2e>
    return 5;
 800188e:	2305      	movs	r3, #5
 8001890:	e010      	b.n	80018b4 <count_revifs+0x50>
  if (n > 999)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001898:	d301      	bcc.n	800189e <count_revifs+0x3a>
    return 4;
 800189a:	2304      	movs	r3, #4
 800189c:	e00a      	b.n	80018b4 <count_revifs+0x50>
  if (n > 99)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b63      	cmp	r3, #99	@ 0x63
 80018a2:	d901      	bls.n	80018a8 <count_revifs+0x44>
    return 3;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e005      	b.n	80018b4 <count_revifs+0x50>
  if (n > 9)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b09      	cmp	r3, #9
 80018ac:	d901      	bls.n	80018b2 <count_revifs+0x4e>
    return 2;
 80018ae:	2302      	movs	r3, #2
 80018b0:	e000      	b.n	80018b4 <count_revifs+0x50>
  return 1;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	000f423f 	.word	0x000f423f
 80018c4:	0001869f 	.word	0x0001869f

080018c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <NMI_Handler+0x4>

080018d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <HardFault_Handler+0x4>

080018d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <MemManage_Handler+0x4>

080018e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <BusFault_Handler+0x4>

080018e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <UsageFault_Handler+0x4>

080018f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return 1;
 800192c:	2301      	movs	r3, #1
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_kill>:

int _kill(int pid, int sig)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001942:	f00b faeb 	bl	800cf1c <__errno>
 8001946:	4603      	mov	r3, r0
 8001948:	2216      	movs	r2, #22
 800194a:	601a      	str	r2, [r3, #0]
  return -1;
 800194c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <_exit>:

void _exit (int status)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001960:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ffe7 	bl	8001938 <_kill>
  while (1) {}    /* Make sure we hang here */
 800196a:	bf00      	nop
 800196c:	e7fd      	b.n	800196a <_exit+0x12>

0800196e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	e00a      	b.n	8001996 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001980:	f3af 8000 	nop.w
 8001984:	4601      	mov	r1, r0
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	60ba      	str	r2, [r7, #8]
 800198c:	b2ca      	uxtb	r2, r1
 800198e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3301      	adds	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	dbf0      	blt.n	8001980 <_read+0x12>
  }

  return len;
 800199e:	687b      	ldr	r3, [r7, #4]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	e009      	b.n	80019ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	60ba      	str	r2, [r7, #8]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	3301      	adds	r3, #1
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	dbf1      	blt.n	80019ba <_write+0x12>
  }
  return len;
 80019d6:	687b      	ldr	r3, [r7, #4]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_close>:

int _close(int file)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a08:	605a      	str	r2, [r3, #4]
  return 0;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <_isatty>:

int _isatty(int file)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a20:	2301      	movs	r3, #1
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b085      	sub	sp, #20
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a50:	4a14      	ldr	r2, [pc, #80]	@ (8001aa4 <_sbrk+0x5c>)
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <_sbrk+0x60>)
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a5c:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a64:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <_sbrk+0x64>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	@ (8001ab0 <_sbrk+0x68>)
 8001a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6a:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d207      	bcs.n	8001a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a78:	f00b fa50 	bl	800cf1c <__errno>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	220c      	movs	r2, #12
 8001a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a86:	e009      	b.n	8001a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a88:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8e:	4b07      	ldr	r3, [pc, #28]	@ (8001aac <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a05      	ldr	r2, [pc, #20]	@ (8001aac <_sbrk+0x64>)
 8001a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2000a000 	.word	0x2000a000
 8001aa8:	00000400 	.word	0x00000400
 8001aac:	2000040c 	.word	0x2000040c
 8001ab0:	20000590 	.word	0x20000590

08001ab4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <SystemInit+0x20>)
 8001aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001abe:	4a05      	ldr	r2, [pc, #20]	@ (8001ad4 <SystemInit+0x20>)
 8001ac0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ac4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001adc:	f7ff ffea 	bl	8001ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae0:	480c      	ldr	r0, [pc, #48]	@ (8001b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ae2:	490d      	ldr	r1, [pc, #52]	@ (8001b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b1c <LoopForever+0xe>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae8:	e002      	b.n	8001af0 <LoopCopyDataInit>

08001aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aee:	3304      	adds	r3, #4

08001af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af4:	d3f9      	bcc.n	8001aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001af8:	4c0a      	ldr	r4, [pc, #40]	@ (8001b24 <LoopForever+0x16>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001afc:	e001      	b.n	8001b02 <LoopFillZerobss>

08001afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b00:	3204      	adds	r2, #4

08001b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b04:	d3fb      	bcc.n	8001afe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b06:	f00b fa0f 	bl	800cf28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b0a:	f7fe ff11 	bl	8000930 <main>

08001b0e <LoopForever>:

LoopForever:
    b LoopForever
 8001b0e:	e7fe      	b.n	8001b0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b10:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b18:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001b1c:	0800fa6c 	.word	0x0800fa6c
  ldr r2, =_sbss
 8001b20:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001b24:	20000590 	.word	0x20000590

08001b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b28:	e7fe      	b.n	8001b28 <ADC1_2_IRQHandler>
	...

08001b2c <__NVIC_GetPriorityGrouping>:
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b30:	4b04      	ldr	r3, [pc, #16]	@ (8001b44 <__NVIC_GetPriorityGrouping+0x18>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	f003 0307 	and.w	r3, r3, #7
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_SetPriority>:
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db0a      	blt.n	8001b72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	490c      	ldr	r1, [pc, #48]	@ (8001b94 <__NVIC_SetPriority+0x4c>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b70:	e00a      	b.n	8001b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4908      	ldr	r1, [pc, #32]	@ (8001b98 <__NVIC_SetPriority+0x50>)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	3b04      	subs	r3, #4
 8001b80:	0112      	lsls	r2, r2, #4
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	761a      	strb	r2, [r3, #24]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000e100 	.word	0xe000e100
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <NVIC_EncodePriority>:
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	@ 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f1c3 0307 	rsb	r3, r3, #7
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	bf28      	it	cs
 8001bba:	2304      	movcs	r3, #4
 8001bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d902      	bls.n	8001bcc <NVIC_EncodePriority+0x30>
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	e000      	b.n	8001bce <NVIC_EncodePriority+0x32>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	401a      	ands	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43d9      	mvns	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	4313      	orrs	r3, r2
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3724      	adds	r7, #36	@ 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_ADC_SetCommonPathInternalCh>:
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_REG_SetSequencerRanks>:
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3330      	adds	r3, #48	@ 0x30
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	4413      	add	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	211f      	movs	r1, #31
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	0e9b      	lsrs	r3, r3, #26
 8001c60:	f003 011f 	and.w	r1, r3, #31
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	601a      	str	r2, [r3, #0]
}
 8001c74:	bf00      	nop
 8001c76:	371c      	adds	r7, #28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_SetChannelSamplingTime>:
{
 8001c80:	b480      	push	{r7}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	3314      	adds	r3, #20
 8001c90:	461a      	mov	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	0e5b      	lsrs	r3, r3, #25
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	4413      	add	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	0d1b      	lsrs	r3, r3, #20
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	2107      	movs	r1, #7
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	0d1b      	lsrs	r3, r3, #20
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	601a      	str	r2, [r3, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	371c      	adds	r7, #28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <LL_ADC_SetChannelSingleDiff>:
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0318 	and.w	r3, r3, #24
 8001cfa:	4908      	ldr	r1, [pc, #32]	@ (8001d1c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cfc:	40d9      	lsrs	r1, r3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	400b      	ands	r3, r1
 8001d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d06:	431a      	orrs	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	0007ffff 	.word	0x0007ffff

08001d20 <LL_ADC_SetOverSamplingScope>:
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001d32:	f023 0303 	bic.w	r3, r3, #3
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	611a      	str	r2, [r3, #16]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_ADC_DisableDeepPowerDown>:
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001d5a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6093      	str	r3, [r2, #8]
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_ADC_EnableInternalRegulator>:
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d7e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d82:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	609a      	str	r2, [r3, #8]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <LL_I2C_EnableClockStretching>:
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	601a      	str	r2, [r3, #0]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <LL_I2C_DisableGeneralCall>:
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	601a      	str	r2, [r3, #0]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_I2C_SetOwnAddress2>:
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b085      	sub	sp, #20
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001dea:	f023 0306 	bic.w	r3, r3, #6
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	431a      	orrs	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	60da      	str	r2, [r3, #12]
}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <LL_I2C_DisableOwnAddress2>:
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	60da      	str	r2, [r3, #12]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_I2C_EnableAutoEndMode>:
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	605a      	str	r2, [r3, #4]
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001e4c:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <LL_RCC_HSE_EnableBypass+0x1c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a04      	ldr	r2, [pc, #16]	@ (8001e64 <LL_RCC_HSE_EnableBypass+0x1c>)
 8001e52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e56:	6013      	str	r3, [r2, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000

08001e68 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001e6c:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <LL_RCC_HSE_Enable+0x1c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a04      	ldr	r2, [pc, #16]	@ (8001e84 <LL_RCC_HSE_Enable+0x1c>)
 8001e72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000

08001e88 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 8001e8c:	4b07      	ldr	r3, [pc, #28]	@ (8001eac <LL_RCC_HSE_IsReady+0x24>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001e98:	d101      	bne.n	8001e9e <LL_RCC_HSE_IsReady+0x16>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <LL_RCC_HSE_IsReady+0x18>
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000

08001eb0 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <LL_RCC_LSE_Enable+0x20>)
 8001eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eba:	4a05      	ldr	r2, [pc, #20]	@ (8001ed0 <LL_RCC_LSE_Enable+0x20>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001edc:	4b07      	ldr	r3, [pc, #28]	@ (8001efc <LL_RCC_LSE_SetDriveCapability+0x28>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee2:	f023 0218 	bic.w	r2, r3, #24
 8001ee6:	4905      	ldr	r1, [pc, #20]	@ (8001efc <LL_RCC_LSE_SetDriveCapability+0x28>)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	40021000 	.word	0x40021000

08001f00 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8001f04:	4b07      	ldr	r3, [pc, #28]	@ (8001f24 <LL_RCC_LSE_IsReady+0x24>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d101      	bne.n	8001f16 <LL_RCC_LSE_IsReady+0x16>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <LL_RCC_LSE_IsReady+0x18>
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000

08001f28 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <LL_RCC_LSI_Enable+0x20>)
 8001f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f32:	4a05      	ldr	r2, [pc, #20]	@ (8001f48 <LL_RCC_LSI_Enable+0x20>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000

08001f4c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 8001f50:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <LL_RCC_LSI_IsReady+0x24>)
 8001f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d101      	bne.n	8001f62 <LL_RCC_LSI_IsReady+0x16>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <LL_RCC_LSI_IsReady+0x18>
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000

08001f74 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001f78:	4b05      	ldr	r3, [pc, #20]	@ (8001f90 <LL_RCC_MSI_Enable+0x1c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a04      	ldr	r2, [pc, #16]	@ (8001f90 <LL_RCC_MSI_Enable+0x1c>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000

08001f94 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001f98:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <LL_RCC_MSI_IsReady+0x20>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d101      	bne.n	8001fa8 <LL_RCC_MSI_IsReady+0x14>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <LL_RCC_MSI_IsReady+0x16>
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40021000 	.word	0x40021000

08001fb8 <LL_RCC_MSI_EnablePLLMode>:
  *       ready
  * @rmtoll CR           MSIPLLEN      LL_RCC_MSI_EnablePLLMode
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnablePLLMode(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a04      	ldr	r2, [pc, #16]	@ (8001fd4 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	6013      	str	r3, [r2, #0]
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000

08001fd8 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8001fdc:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a04      	ldr	r2, [pc, #16]	@ (8001ff4 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8001fe2:	f043 0308 	orr.w	r3, r3, #8
 8001fe6:	6013      	str	r3, [r2, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000

08001ff8 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002000:	4b06      	ldr	r3, [pc, #24]	@ (800201c <LL_RCC_MSI_SetRange+0x24>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002008:	4904      	ldr	r1, [pc, #16]	@ (800201c <LL_RCC_MSI_SetRange+0x24>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	40021000 	.word	0x40021000

08002020 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002028:	4b07      	ldr	r3, [pc, #28]	@ (8002048 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	4904      	ldr	r1, [pc, #16]	@ (8002048 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000

0800204c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002054:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <LL_RCC_SetSysClkSource+0x24>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f023 0203 	bic.w	r2, r3, #3
 800205c:	4904      	ldr	r1, [pc, #16]	@ (8002070 <LL_RCC_SetSysClkSource+0x24>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4313      	orrs	r3, r2
 8002062:	608b      	str	r3, [r1, #8]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	40021000 	.word	0x40021000

08002074 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002078:	4b04      	ldr	r3, [pc, #16]	@ (800208c <LL_RCC_GetSysClkSource+0x18>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 030c 	and.w	r3, r3, #12
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000

08002090 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002098:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <LL_RCC_SetAHBPrescaler+0x24>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020a0:	4904      	ldr	r1, [pc, #16]	@ (80020b4 <LL_RCC_SetAHBPrescaler+0x24>)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	608b      	str	r3, [r1, #8]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	40021000 	.word	0x40021000

080020b8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80020c0:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020c8:	4904      	ldr	r1, [pc, #16]	@ (80020dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	608b      	str	r3, [r1, #8]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	40021000 	.word	0x40021000

080020e0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80020e8:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <LL_RCC_SetAPB2Prescaler+0x24>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020f0:	4904      	ldr	r1, [pc, #16]	@ (8002104 <LL_RCC_SetAPB2Prescaler+0x24>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	608b      	str	r3, [r1, #8]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	40021000 	.word	0x40021000

08002108 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8002110:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <LL_RCC_SetUSARTClockSource+0x30>)
 8002112:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	0c1b      	lsrs	r3, r3, #16
 800211a:	43db      	mvns	r3, r3
 800211c:	401a      	ands	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	b29b      	uxth	r3, r3
 8002122:	4905      	ldr	r1, [pc, #20]	@ (8002138 <LL_RCC_SetUSARTClockSource+0x30>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000

0800213c <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	0e1a      	lsrs	r2, r3, #24
 8002148:	4b0f      	ldr	r3, [pc, #60]	@ (8002188 <LL_RCC_SetI2CClockSource+0x4c>)
 800214a:	4413      	add	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3UL << ((I2CxSource & 0x001F0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x001F0000U) >> 16U)));
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	0c1b      	lsrs	r3, r3, #16
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	2103      	movs	r1, #3
 800215c:	fa01 f303 	lsl.w	r3, r1, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	401a      	ands	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	b2d9      	uxtb	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	0c1b      	lsrs	r3, r3, #16
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	431a      	orrs	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	601a      	str	r2, [r3, #0]
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40021088 	.word	0x40021088

0800218c <LL_RCC_SetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM2_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM2_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 8002194:	4b09      	ldr	r3, [pc, #36]	@ (80021bc <LL_RCC_SetLPTIMClockSource+0x30>)
 8002196:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	0c1b      	lsrs	r3, r3, #16
 800219e:	041b      	lsls	r3, r3, #16
 80021a0:	43db      	mvns	r3, r3
 80021a2:	401a      	ands	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	041b      	lsls	r3, r3, #16
 80021a8:	4904      	ldr	r1, [pc, #16]	@ (80021bc <LL_RCC_SetLPTIMClockSource+0x30>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40021000 	.word	0x40021000

080021c0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80021c4:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <LL_RCC_PLL_Enable+0x1c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a04      	ldr	r2, [pc, #16]	@ (80021dc <LL_RCC_PLL_Enable+0x1c>)
 80021ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021ce:	6013      	str	r3, [r2, #0]
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000

080021e0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80021e4:	4b07      	ldr	r3, [pc, #28]	@ (8002204 <LL_RCC_PLL_IsReady+0x24>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021f0:	d101      	bne.n	80021f6 <LL_RCC_PLL_IsReady+0x16>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <LL_RCC_PLL_IsReady+0x18>
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000

08002208 <LL_RCC_PLL_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLQ_DIV_6
  *         @arg @ref LL_RCC_PLLQ_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 8002216:	4b0a      	ldr	r3, [pc, #40]	@ (8002240 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	4b0a      	ldr	r3, [pc, #40]	@ (8002244 <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 800221c:	4013      	ands	r3, r2
 800221e:	68f9      	ldr	r1, [r7, #12]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	4311      	orrs	r1, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	0212      	lsls	r2, r2, #8
 8002228:	4311      	orrs	r1, r2
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	4904      	ldr	r1, [pc, #16]	@ (8002240 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8002230:	4313      	orrs	r3, r2
 8002232:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLQ);
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	40021000 	.word	0x40021000
 8002244:	ff9f808c 	.word	0xff9f808c

08002248 <LL_RCC_PLL_EnableDomain_48M>:
  * @brief  Enable PLL output mapped on 48MHz domain clock
  * @rmtoll PLLCFGR      PLLQEN        LL_RCC_PLL_EnableDomain_48M
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_48M(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN);
 800224c:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <LL_RCC_PLL_EnableDomain_48M+0x1c>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a04      	ldr	r2, [pc, #16]	@ (8002264 <LL_RCC_PLL_EnableDomain_48M+0x1c>)
 8002252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002256:	60d3      	str	r3, [r2, #12]
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000

08002268 <LL_AHB2_GRP1_EnableClock>:
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002270:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002272:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002274:	4907      	ldr	r1, [pc, #28]	@ (8002294 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4313      	orrs	r3, r2
 800227a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800227e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4013      	ands	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002286:	68fb      	ldr	r3, [r7, #12]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	40021000 	.word	0x40021000

08002298 <LL_APB1_GRP1_EnableClock>:
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80022a0:	4b08      	ldr	r3, [pc, #32]	@ (80022c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80022a2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80022a4:	4907      	ldr	r1, [pc, #28]	@ (80022c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80022ac:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80022ae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4013      	ands	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022b6:	68fb      	ldr	r3, [r7, #12]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	40021000 	.word	0x40021000

080022c8 <LL_APB2_GRP1_EnableClock>:
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80022d0:	4b08      	ldr	r3, [pc, #32]	@ (80022f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80022d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022d4:	4907      	ldr	r1, [pc, #28]	@ (80022f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4313      	orrs	r3, r2
 80022da:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022dc:	4b05      	ldr	r3, [pc, #20]	@ (80022f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80022de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4013      	ands	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022e6:	68fb      	ldr	r3, [r7, #12]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	40021000 	.word	0x40021000

080022f8 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002300:	4b06      	ldr	r3, [pc, #24]	@ (800231c <LL_FLASH_SetLatency+0x24>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 0207 	bic.w	r2, r3, #7
 8002308:	4904      	ldr	r1, [pc, #16]	@ (800231c <LL_FLASH_SetLatency+0x24>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	40022000 	.word	0x40022000

08002320 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002324:	4b04      	ldr	r3, [pc, #16]	@ (8002338 <LL_FLASH_GetLatency+0x18>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0307 	and.w	r3, r3, #7
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40022000 	.word	0x40022000

0800233c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002344:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800234c:	4904      	ldr	r1, [pc, #16]	@ (8002360 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	40007000 	.word	0x40007000

08002364 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002368:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <LL_PWR_EnableBkUpAccess+0x1c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a04      	ldr	r2, [pc, #16]	@ (8002380 <LL_PWR_EnableBkUpAccess+0x1c>)
 800236e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002372:	6013      	str	r3, [r2, #0]
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40007000 	.word	0x40007000

08002384 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8002388:	4b07      	ldr	r3, [pc, #28]	@ (80023a8 <LL_PWR_IsActiveFlag_VOS+0x24>)
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002394:	d101      	bne.n	800239a <LL_PWR_IsActiveFlag_VOS+0x16>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <LL_PWR_IsActiveFlag_VOS+0x18>
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40007000 	.word	0x40007000

080023ac <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f023 0210 	bic.w	r2, r3, #16
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	605a      	str	r2, [r3, #4]
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f043 0208 	orr.w	r2, r3, #8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	605a      	str	r2, [r3, #4]
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b02      	cmp	r3, #2
 800242a:	d101      	bne.n	8002430 <LL_SPI_IsActiveFlag_TXE+0x18>
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	330c      	adds	r3, #12
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	b2db      	uxtb	r3, r3
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800245a:	b480      	push	{r7}
 800245c:	b085      	sub	sp, #20
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	460b      	mov	r3, r1
 8002464:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	330c      	adds	r3, #12
 800246a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <LL_TIM_DisableARRPreload>:
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	601a      	str	r2, [r3, #0]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <LL_TIM_OC_DisableFast>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d028      	beq.n	8002502 <LL_TIM_OC_DisableFast+0x62>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d023      	beq.n	80024fe <LL_TIM_OC_DisableFast+0x5e>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b10      	cmp	r3, #16
 80024ba:	d01e      	beq.n	80024fa <LL_TIM_OC_DisableFast+0x5a>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	2b40      	cmp	r3, #64	@ 0x40
 80024c0:	d019      	beq.n	80024f6 <LL_TIM_OC_DisableFast+0x56>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024c8:	d013      	beq.n	80024f2 <LL_TIM_OC_DisableFast+0x52>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024d0:	d00d      	beq.n	80024ee <LL_TIM_OC_DisableFast+0x4e>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024d8:	d007      	beq.n	80024ea <LL_TIM_OC_DisableFast+0x4a>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e0:	d101      	bne.n	80024e6 <LL_TIM_OC_DisableFast+0x46>
 80024e2:	2307      	movs	r3, #7
 80024e4:	e00e      	b.n	8002504 <LL_TIM_OC_DisableFast+0x64>
 80024e6:	2308      	movs	r3, #8
 80024e8:	e00c      	b.n	8002504 <LL_TIM_OC_DisableFast+0x64>
 80024ea:	2306      	movs	r3, #6
 80024ec:	e00a      	b.n	8002504 <LL_TIM_OC_DisableFast+0x64>
 80024ee:	2305      	movs	r3, #5
 80024f0:	e008      	b.n	8002504 <LL_TIM_OC_DisableFast+0x64>
 80024f2:	2304      	movs	r3, #4
 80024f4:	e006      	b.n	8002504 <LL_TIM_OC_DisableFast+0x64>
 80024f6:	2303      	movs	r3, #3
 80024f8:	e004      	b.n	8002504 <LL_TIM_OC_DisableFast+0x64>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e002      	b.n	8002504 <LL_TIM_OC_DisableFast+0x64>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <LL_TIM_OC_DisableFast+0x64>
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3318      	adds	r3, #24
 800250a:	4619      	mov	r1, r3
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	4a0b      	ldr	r2, [pc, #44]	@ (800253c <LL_TIM_OC_DisableFast+0x9c>)
 8002510:	5cd3      	ldrb	r3, [r2, r3]
 8002512:	440b      	add	r3, r1
 8002514:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	4908      	ldr	r1, [pc, #32]	@ (8002540 <LL_TIM_OC_DisableFast+0xa0>)
 800251e:	5ccb      	ldrb	r3, [r1, r3]
 8002520:	4619      	mov	r1, r3
 8002522:	2304      	movs	r3, #4
 8002524:	408b      	lsls	r3, r1
 8002526:	43db      	mvns	r3, r3
 8002528:	401a      	ands	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	601a      	str	r2, [r3, #0]
}
 800252e:	bf00      	nop
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	0800f6f0 	.word	0x0800f6f0
 8002540:	0800f6fc 	.word	0x0800f6fc

08002544 <LL_TIM_OC_EnablePreload>:
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d028      	beq.n	80025a6 <LL_TIM_OC_EnablePreload+0x62>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2b04      	cmp	r3, #4
 8002558:	d023      	beq.n	80025a2 <LL_TIM_OC_EnablePreload+0x5e>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b10      	cmp	r3, #16
 800255e:	d01e      	beq.n	800259e <LL_TIM_OC_EnablePreload+0x5a>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2b40      	cmp	r3, #64	@ 0x40
 8002564:	d019      	beq.n	800259a <LL_TIM_OC_EnablePreload+0x56>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800256c:	d013      	beq.n	8002596 <LL_TIM_OC_EnablePreload+0x52>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002574:	d00d      	beq.n	8002592 <LL_TIM_OC_EnablePreload+0x4e>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800257c:	d007      	beq.n	800258e <LL_TIM_OC_EnablePreload+0x4a>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002584:	d101      	bne.n	800258a <LL_TIM_OC_EnablePreload+0x46>
 8002586:	2307      	movs	r3, #7
 8002588:	e00e      	b.n	80025a8 <LL_TIM_OC_EnablePreload+0x64>
 800258a:	2308      	movs	r3, #8
 800258c:	e00c      	b.n	80025a8 <LL_TIM_OC_EnablePreload+0x64>
 800258e:	2306      	movs	r3, #6
 8002590:	e00a      	b.n	80025a8 <LL_TIM_OC_EnablePreload+0x64>
 8002592:	2305      	movs	r3, #5
 8002594:	e008      	b.n	80025a8 <LL_TIM_OC_EnablePreload+0x64>
 8002596:	2304      	movs	r3, #4
 8002598:	e006      	b.n	80025a8 <LL_TIM_OC_EnablePreload+0x64>
 800259a:	2303      	movs	r3, #3
 800259c:	e004      	b.n	80025a8 <LL_TIM_OC_EnablePreload+0x64>
 800259e:	2302      	movs	r3, #2
 80025a0:	e002      	b.n	80025a8 <LL_TIM_OC_EnablePreload+0x64>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <LL_TIM_OC_EnablePreload+0x64>
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3318      	adds	r3, #24
 80025ae:	4619      	mov	r1, r3
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	4a0a      	ldr	r2, [pc, #40]	@ (80025dc <LL_TIM_OC_EnablePreload+0x98>)
 80025b4:	5cd3      	ldrb	r3, [r2, r3]
 80025b6:	440b      	add	r3, r1
 80025b8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	4907      	ldr	r1, [pc, #28]	@ (80025e0 <LL_TIM_OC_EnablePreload+0x9c>)
 80025c2:	5ccb      	ldrb	r3, [r1, r3]
 80025c4:	4619      	mov	r1, r3
 80025c6:	2308      	movs	r3, #8
 80025c8:	408b      	lsls	r3, r1
 80025ca:	431a      	orrs	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	601a      	str	r2, [r3, #0]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	0800f6f0 	.word	0x0800f6f0
 80025e0:	0800f6fc 	.word	0x0800f6fc

080025e4 <LL_TIM_DisableExternalClock>:
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	609a      	str	r2, [r3, #8]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_TIM_SetClockSource>:
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8002616:	f023 0307 	bic.w	r3, r3, #7
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	609a      	str	r2, [r3, #8]
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <LL_TIM_SetTriggerOutput>:
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	605a      	str	r2, [r3, #4]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <LL_TIM_SetTriggerOutput2>:
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	605a      	str	r2, [r3, #4]
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <LL_TIM_DisableMasterSlaveMode>:
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	609a      	str	r2, [r3, #8]
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <LL_TIM_ConfigETR>:
{
 800269a:	b480      	push	{r7}
 800269c:	b085      	sub	sp, #20
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
 80026a6:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f423 423f 	bic.w	r2, r3, #48896	@ 0xbf00
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4319      	orrs	r1, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	430b      	orrs	r3, r1
 80026ba:	431a      	orrs	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	609a      	str	r2, [r3, #8]
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <LL_TIM_SetOCRefClearInputSource>:
  *         @arg @ref LL_TIM_OCREF_CLR_INT_NC
  *         @arg @ref LL_TIM_OCREF_CLR_INT_ETR
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOCRefClearInputSource(TIM_TypeDef *TIMx, uint32_t OCRefClearInputSource)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f023 0208 	bic.w	r2, r3, #8
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	609a      	str	r2, [r3, #8]
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <LL_GPIO_ResetOutputPin>:
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <LL_LPTIM_SetUpdateMode>:
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	60da      	str	r2, [r3, #12]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <LL_LPTIM_SetCounterMode>:
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	60da      	str	r2, [r3, #12]
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <LL_LPTIM_SetPolarity>:
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	60da      	str	r2, [r3, #12]
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_LPTIM_SetPrescaler>:
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	431a      	orrs	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	60da      	str	r2, [r3, #12]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <LL_LPTIM_SetInput1Src>:
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f023 0203 	bic.w	r2, r3, #3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	621a      	str	r2, [r3, #32]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_LPTIM_SetInput2Src>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	f023 0203 	bic.w	r2, r3, #3
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	621a      	str	r2, [r3, #32]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <LL_LPTIM_TrigSw>:
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	60da      	str	r2, [r3, #12]
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <LL_LPTIM_SetClockSource>:
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f023 0201 	bic.w	r2, r3, #1
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	60da      	str	r2, [r3, #12]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <LL_USART_Enable>:
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f043 0201 	orr.w	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	601a      	str	r2, [r3, #0]
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <LL_USART_ConfigAsyncMode>:
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	609a      	str	r2, [r3, #8]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_IWDG_Enable>:
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8002892:	601a      	str	r2, [r3, #0]
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <LL_IWDG_ReloadCounter>:
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80028ae:	601a      	str	r2, [r3, #0]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_IWDG_EnableWriteAccess>:
  * @rmtoll KR           KEY           LL_IWDG_EnableWriteAccess
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f245 5255 	movw	r2, #21845	@ 0x5555
 80028ca:	601a      	str	r2, [r3, #0]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_IWDG_SetPrescaler>:
  *         @arg @ref LL_IWDG_PRESCALER_128
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	f003 0207 	and.w	r2, r3, #7
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	605a      	str	r2, [r3, #4]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <LL_IWDG_SetReloadCounter>:
  * @param  IWDGx IWDG Instance
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	609a      	str	r2, [r3, #8]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_IWDG_IsReady>:
  *         SR           WVU           LL_IWDG_IsReady
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(const IWDG_TypeDef *IWDGx)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <LL_IWDG_IsReady+0x18>
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <LL_IWDG_IsReady+0x1a>
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <spi_read>:
    LL_GPIO_SetOutputPin(pin.port, pin.pin);
  else
    LL_GPIO_ResetOutputPin(pin.port, pin.pin);
}

void spi_read(SPI_TypeDef *spix, uint8_t *const buf, uint32_t num_bytes) {
 800293e:	b590      	push	{r4, r7, lr}
 8002940:	b087      	sub	sp, #28
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < num_bytes; i++) {
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	e00b      	b.n	8002968 <spi_read+0x2a>
    buf[i] = SPI_TxRx(spix, 0x00);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	18d4      	adds	r4, r2, r3
 8002956:	2100      	movs	r1, #0
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 f82b 	bl	80029b4 <SPI_TxRx>
 800295e:	4603      	mov	r3, r0
 8002960:	7023      	strb	r3, [r4, #0]
  for (int i = 0; i < num_bytes; i++) {
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3301      	adds	r3, #1
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	d8ef      	bhi.n	8002950 <spi_read+0x12>
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	371c      	adds	r7, #28
 8002976:	46bd      	mov	sp, r7
 8002978:	bd90      	pop	{r4, r7, pc}

0800297a <spi_write>:
    rx_buf[i] = SPI_TxRx(spix, tx_buf[i]);
  }
}

void spi_write(SPI_TypeDef *spix, const uint8_t *const buf,
               uint32_t num_bytes) {
 800297a:	b580      	push	{r7, lr}
 800297c:	b086      	sub	sp, #24
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < num_bytes; i++)
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	e00a      	b.n	80029a2 <spi_write+0x28>
    SPI_TxRx(spix, buf[i]);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	4413      	add	r3, r2
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	4619      	mov	r1, r3
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f80c 	bl	80029b4 <SPI_TxRx>
  for (int i = 0; i < num_bytes; i++)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	3301      	adds	r3, #1
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d8f0      	bhi.n	800298c <spi_write+0x12>
}
 80029aa:	bf00      	nop
 80029ac:	bf00      	nop
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <SPI_TxRx>:

// Lifted and modified from https://github.com/eziya/STM32_LL_EXAMPLES
// is blocking
uint8_t SPI_TxRx(SPI_TypeDef *spix, uint8_t data) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
  // transmit
  LL_SPI_TransmitData8(spix, data);
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	4619      	mov	r1, r3
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff fd48 	bl	800245a <LL_SPI_TransmitData8>
  while (!LL_SPI_IsActiveFlag_TXE(spix))
 80029ca:	bf00      	nop
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff fd23 	bl	8002418 <LL_SPI_IsActiveFlag_TXE>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f9      	beq.n	80029cc <SPI_TxRx+0x18>
    ;

  // receive
  while (!LL_SPI_IsActiveFlag_RXNE(spix))
 80029d8:	bf00      	nop
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff fd09 	bl	80023f2 <LL_SPI_IsActiveFlag_RXNE>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f9      	beq.n	80029da <SPI_TxRx+0x26>
    ;
  return LL_SPI_ReceiveData8(spix);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff fd29 	bl	800243e <LL_SPI_ReceiveData8>
 80029ec:	4603      	mov	r3, r0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */

void SystemClock_Config(void) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 80029fc:	2001      	movs	r0, #1
 80029fe:	f7ff fc7b 	bl	80022f8 <LL_FLASH_SetLatency>
  while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1) {
 8002a02:	bf00      	nop
 8002a04:	f7ff fc8c 	bl	8002320 <LL_FLASH_GetLatency>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d1fa      	bne.n	8002a04 <SystemClock_Config+0xc>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8002a0e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002a12:	f7ff fc93 	bl	800233c <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0) {
 8002a16:	bf00      	nop
 8002a18:	f7ff fcb4 	bl	8002384 <LL_PWR_IsActiveFlag_VOS>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1fa      	bne.n	8002a18 <SystemClock_Config+0x20>
  }
  LL_RCC_HSE_EnableBypass();
 8002a22:	f7ff fa11 	bl	8001e48 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 8002a26:	f7ff fa1f 	bl	8001e68 <LL_RCC_HSE_Enable>

  /* Wait till HSE is ready */
  while (LL_RCC_HSE_IsReady() != 1) {
 8002a2a:	bf00      	nop
 8002a2c:	f7ff fa2c 	bl	8001e88 <LL_RCC_HSE_IsReady>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d1fa      	bne.n	8002a2c <SystemClock_Config+0x34>
  }

  LL_RCC_MSI_Enable();
 8002a36:	f7ff fa9d 	bl	8001f74 <LL_RCC_MSI_Enable>

  /* Wait till MSI is ready */
  while (LL_RCC_MSI_IsReady() != 1) {
 8002a3a:	bf00      	nop
 8002a3c:	f7ff faaa 	bl	8001f94 <LL_RCC_MSI_IsReady>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d1fa      	bne.n	8002a3c <SystemClock_Config+0x44>
  }
  LL_RCC_MSI_EnableRangeSelection();
 8002a46:	f7ff fac7 	bl	8001fd8 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8002a4a:	2060      	movs	r0, #96	@ 0x60
 8002a4c:	f7ff fad4 	bl	8001ff8 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8002a50:	2000      	movs	r0, #0
 8002a52:	f7ff fae5 	bl	8002020 <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 8002a56:	f7ff fc85 	bl	8002364 <LL_PWR_EnableBkUpAccess>

  LL_RCC_LSI_Enable();
 8002a5a:	f7ff fa65 	bl	8001f28 <LL_RCC_LSI_Enable>

  /* Wait till LSI is ready */
  while (LL_RCC_LSI_IsReady() != 1) {
 8002a5e:	bf00      	nop
 8002a60:	f7ff fa74 	bl	8001f4c <LL_RCC_LSI_IsReady>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d1fa      	bne.n	8002a60 <SystemClock_Config+0x68>
  }

  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f7ff fa32 	bl	8001ed4 <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 8002a70:	f7ff fa1e 	bl	8001eb0 <LL_RCC_LSE_Enable>

  /* Wait till LSE is ready */
  while (LL_RCC_LSE_IsReady() != 1) {
 8002a74:	bf00      	nop
 8002a76:	f7ff fa43 	bl	8001f00 <LL_RCC_LSE_IsReady>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d1fa      	bne.n	8002a76 <SystemClock_Config+0x7e>
  }

  LL_RCC_MSI_EnablePLLMode();
 8002a80:	f7ff fa9a 	bl	8001fb8 <LL_RCC_MSI_EnablePLLMode>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 24,
 8002a84:	2300      	movs	r3, #0
 8002a86:	2218      	movs	r2, #24
 8002a88:	2100      	movs	r1, #0
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	f7ff fbbc 	bl	8002208 <LL_RCC_PLL_ConfigDomain_48M>
                              LL_RCC_PLLQ_DIV_2);
  LL_RCC_PLL_EnableDomain_48M();
 8002a90:	f7ff fbda 	bl	8002248 <LL_RCC_PLL_EnableDomain_48M>
  LL_RCC_PLL_Enable();
 8002a94:	f7ff fb94 	bl	80021c0 <LL_RCC_PLL_Enable>

  /* Wait till PLL is ready */
  while (LL_RCC_PLL_IsReady() != 1) {
 8002a98:	bf00      	nop
 8002a9a:	f7ff fba1 	bl	80021e0 <LL_RCC_PLL_IsReady>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d1fa      	bne.n	8002a9a <SystemClock_Config+0xa2>
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8002aa4:	2002      	movs	r0, #2
 8002aa6:	f7ff fad1 	bl	800204c <LL_RCC_SetSysClkSource>

  /* Wait till System clock is ready */
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE) {
 8002aaa:	bf00      	nop
 8002aac:	f7ff fae2 	bl	8002074 <LL_RCC_GetSysClkSource>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d1fa      	bne.n	8002aac <SystemClock_Config+0xb4>
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f7ff faea 	bl	8002090 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002abc:	2000      	movs	r0, #0
 8002abe:	f7ff fafb 	bl	80020b8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f7ff fb0c 	bl	80020e0 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(25000000);
 8002ac8:	4803      	ldr	r0, [pc, #12]	@ (8002ad8 <SystemClock_Config+0xe0>)
 8002aca:	f001 febf 	bl	800484c <LL_Init1msTick>

  LL_SetSystemCoreClock(25000000);
 8002ace:	4802      	ldr	r0, [pc, #8]	@ (8002ad8 <SystemClock_Config+0xe0>)
 8002ad0:	f001 fef2 	bl	80048b8 <LL_SetSystemCoreClock>
}
 8002ad4:	bf00      	nop
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	017d7840 	.word	0x017d7840

08002adc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
void MX_ADC1_Init(void) {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b094      	sub	sp, #80	@ 0x50
 8002ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8002ae2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8002aee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]
 8002af8:	609a      	str	r2, [r3, #8]
 8002afa:	60da      	str	r2, [r3, #12]
 8002afc:	611a      	str	r2, [r3, #16]
 8002afe:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8002b00:	f107 0318 	add.w	r3, r7, #24
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0e:	463b      	mov	r3, r7
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
 8002b1c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8002b1e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002b22:	f7ff fba1 	bl	8002268 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002b26:	2001      	movs	r0, #1
 8002b28:	f7ff fb9e 	bl	8002268 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA2   ------> ADC1_IN7
  PA3   ------> ADC1_IN8
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2 | LL_GPIO_PIN_3;
 8002b2c:	230c      	movs	r3, #12
 8002b2e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002b30:	2303      	movs	r3, #3
 8002b32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b38:	463b      	mov	r3, r7
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b40:	f000 fd53 	bl	80035ea <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8002b44:	2300      	movs	r3, #0
 8002b46:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	647b      	str	r3, [r7, #68]	@ 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8002b50:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b54:	4619      	mov	r1, r3
 8002b56:	4834      	ldr	r0, [pc, #208]	@ (8002c28 <MX_ADC1_Init+0x14c>)
 8002b58:	f000 fb8c 	bl	8003274 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8002b60:	2301      	movs	r3, #1
 8002b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 8002b64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b68:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	63bb      	str	r3, [r7, #56]	@ 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8002b72:	2300      	movs	r3, #0
 8002b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002b76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	482a      	ldr	r0, [pc, #168]	@ (8002c28 <MX_ADC1_Init+0x14c>)
 8002b7e:	f000 fb9f 	bl	80032c0 <LL_ADC_REG_Init>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8002b82:	2100      	movs	r1, #0
 8002b84:	4828      	ldr	r0, [pc, #160]	@ (8002c28 <MX_ADC1_Init+0x14c>)
 8002b86:	f7ff f8cb 	bl	8001d20 <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8002b92:	f107 0318 	add.w	r3, r7, #24
 8002b96:	4619      	mov	r1, r3
 8002b98:	4824      	ldr	r0, [pc, #144]	@ (8002c2c <MX_ADC1_Init+0x150>)
 8002b9a:	f000 fb2b 	bl	80031f4 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1),
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4822      	ldr	r0, [pc, #136]	@ (8002c2c <MX_ADC1_Init+0x150>)
 8002ba2:	f7ff f82e 	bl	8001c02 <LL_ADC_SetCommonPathInternalCh>
                                 LL_ADC_PATH_INTERNAL_NONE);

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8002ba6:	4820      	ldr	r0, [pc, #128]	@ (8002c28 <MX_ADC1_Init+0x14c>)
 8002ba8:	f7ff f8cf 	bl	8001d4a <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8002bac:	481e      	ldr	r0, [pc, #120]	@ (8002c28 <MX_ADC1_Init+0x14c>)
 8002bae:	f7ff f8de 	bl	8001d6e <LL_ADC_EnableInternalRegulator>
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US *
                      (SystemCoreClock / (100000 * 2))) /
 8002bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8002c30 <MX_ADC1_Init+0x154>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	099b      	lsrs	r3, r3, #6
 8002bb8:	4a1e      	ldr	r2, [pc, #120]	@ (8002c34 <MX_ADC1_Init+0x158>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	099a      	lsrs	r2, r3, #6
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US *
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4b1b      	ldr	r3, [pc, #108]	@ (8002c38 <MX_ADC1_Init+0x15c>)
 8002bcc:	fba3 2302 	umull	r2, r3, r3, r2
 8002bd0:	08db      	lsrs	r3, r3, #3
 8002bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                     10);
  while (wait_loop_index != 0) {
 8002bd4:	e002      	b.n	8002bdc <MX_ADC1_Init+0x100>
    wait_loop_index--;
 8002bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (wait_loop_index != 0) {
 8002bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f9      	bne.n	8002bd6 <MX_ADC1_Init+0xfa>
  }

  /** Configure Regular Channel
   */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_8);
 8002be2:	4a16      	ldr	r2, [pc, #88]	@ (8002c3c <MX_ADC1_Init+0x160>)
 8002be4:	2106      	movs	r1, #6
 8002be6:	4810      	ldr	r0, [pc, #64]	@ (8002c28 <MX_ADC1_Init+0x14c>)
 8002be8:	f7ff f81e 	bl	8001c28 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8,
 8002bec:	2200      	movs	r2, #0
 8002bee:	4913      	ldr	r1, [pc, #76]	@ (8002c3c <MX_ADC1_Init+0x160>)
 8002bf0:	480d      	ldr	r0, [pc, #52]	@ (8002c28 <MX_ADC1_Init+0x14c>)
 8002bf2:	f7ff f845 	bl	8001c80 <LL_ADC_SetChannelSamplingTime>
                                LL_ADC_SAMPLINGTIME_2CYCLES_5);
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SINGLE_ENDED);
 8002bf6:	227f      	movs	r2, #127	@ 0x7f
 8002bf8:	4910      	ldr	r1, [pc, #64]	@ (8002c3c <MX_ADC1_Init+0x160>)
 8002bfa:	480b      	ldr	r0, [pc, #44]	@ (8002c28 <MX_ADC1_Init+0x14c>)
 8002bfc:	f7ff f86c 	bl	8001cd8 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
   */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_7);
 8002c00:	4a0f      	ldr	r2, [pc, #60]	@ (8002c40 <MX_ADC1_Init+0x164>)
 8002c02:	210c      	movs	r1, #12
 8002c04:	4808      	ldr	r0, [pc, #32]	@ (8002c28 <MX_ADC1_Init+0x14c>)
 8002c06:	f7ff f80f 	bl	8001c28 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7,
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	490c      	ldr	r1, [pc, #48]	@ (8002c40 <MX_ADC1_Init+0x164>)
 8002c0e:	4806      	ldr	r0, [pc, #24]	@ (8002c28 <MX_ADC1_Init+0x14c>)
 8002c10:	f7ff f836 	bl	8001c80 <LL_ADC_SetChannelSamplingTime>
                                LL_ADC_SAMPLINGTIME_2CYCLES_5);
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SINGLE_ENDED);
 8002c14:	227f      	movs	r2, #127	@ 0x7f
 8002c16:	490a      	ldr	r1, [pc, #40]	@ (8002c40 <MX_ADC1_Init+0x164>)
 8002c18:	4803      	ldr	r0, [pc, #12]	@ (8002c28 <MX_ADC1_Init+0x14c>)
 8002c1a:	f7ff f85d 	bl	8001cd8 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8002c1e:	bf00      	nop
 8002c20:	3750      	adds	r7, #80	@ 0x50
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	50040000 	.word	0x50040000
 8002c2c:	50040300 	.word	0x50040300
 8002c30:	20000024 	.word	0x20000024
 8002c34:	053e2d63 	.word	0x053e2d63
 8002c38:	cccccccd 	.word	0xcccccccd
 8002c3c:	21800100 	.word	0x21800100
 8002c40:	1d500080 	.word	0x1d500080

08002c44 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
void MX_I2C1_Init(void) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08e      	sub	sp, #56	@ 0x38
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002c4a:	f107 031c 	add.w	r3, r7, #28
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	60da      	str	r2, [r3, #12]
 8002c58:	611a      	str	r2, [r3, #16]
 8002c5a:	615a      	str	r2, [r3, #20]
 8002c5c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
 8002c6c:	615a      	str	r2, [r3, #20]

  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 8002c6e:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 8002c72:	f7ff fa63 	bl	800213c <LL_RCC_SetI2CClockSource>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002c76:	2002      	movs	r0, #2
 8002c78:	f7ff faf6 	bl	8002268 <LL_AHB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6 | LL_GPIO_PIN_7;
 8002c7c:	23c0      	movs	r3, #192	@ 0xc0
 8002c7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c80:	2302      	movs	r3, #2
 8002c82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002c84:	2303      	movs	r3, #3
 8002c86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002c90:	2304      	movs	r3, #4
 8002c92:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	4619      	mov	r1, r3
 8002c98:	4817      	ldr	r0, [pc, #92]	@ (8002cf8 <MX_I2C1_Init+0xb4>)
 8002c9a:	f000 fca6 	bl	80035ea <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002c9e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002ca2:	f7ff faf9 	bl	8002298 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
   */
  LL_I2C_EnableAutoEndMode(I2C1);
 8002ca6:	4815      	ldr	r0, [pc, #84]	@ (8002cfc <MX_I2C1_Init+0xb8>)
 8002ca8:	f7ff f8bd 	bl	8001e26 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8002cac:	4813      	ldr	r0, [pc, #76]	@ (8002cfc <MX_I2C1_Init+0xb8>)
 8002cae:	f7ff f8aa 	bl	8001e06 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002cb2:	4812      	ldr	r0, [pc, #72]	@ (8002cfc <MX_I2C1_Init+0xb8>)
 8002cb4:	f7ff f87f 	bl	8001db6 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8002cb8:	4810      	ldr	r0, [pc, #64]	@ (8002cfc <MX_I2C1_Init+0xb8>)
 8002cba:	f7ff f86c 	bl	8001d96 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x004018D5;
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002d00 <MX_I2C1_Init+0xbc>)
 8002cc4:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002cda:	f107 031c 	add.w	r3, r7, #28
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4806      	ldr	r0, [pc, #24]	@ (8002cfc <MX_I2C1_Init+0xb8>)
 8002ce2:	f000 fd93 	bl	800380c <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4804      	ldr	r0, [pc, #16]	@ (8002cfc <MX_I2C1_Init+0xb8>)
 8002cec:	f7ff f873 	bl	8001dd6 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8002cf0:	bf00      	nop
 8002cf2:	3738      	adds	r7, #56	@ 0x38
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	48000400 	.word	0x48000400
 8002cfc:	40005400 	.word	0x40005400
 8002d00:	004018d5 	.word	0x004018d5

08002d04 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b090      	sub	sp, #64	@ 0x40
 8002d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002d0a:	f107 0318 	add.w	r3, r7, #24
 8002d0e:	2228      	movs	r2, #40	@ 0x28
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f00a f874 	bl	800ce00 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	463b      	mov	r3, r7
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	60da      	str	r2, [r3, #12]
 8002d24:	611a      	str	r2, [r3, #16]
 8002d26:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002d28:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002d2c:	f7ff facc 	bl	80022c8 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002d30:	2001      	movs	r0, #1
 8002d32:	f7ff fa99 	bl	8002268 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002d36:	2002      	movs	r0, #2
 8002d38:	f7ff fa96 	bl	8002268 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA7   ------> SPI1_MOSI
  PB4 (NJTRST)   ------> SPI1_MISO
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5 | LL_GPIO_PIN_7;
 8002d3c:	23a0      	movs	r3, #160	@ 0xa0
 8002d3e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002d40:	2302      	movs	r3, #2
 8002d42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002d44:	2303      	movs	r3, #3
 8002d46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002d50:	2305      	movs	r3, #5
 8002d52:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d54:	463b      	mov	r3, r7
 8002d56:	4619      	mov	r1, r3
 8002d58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d5c:	f000 fc45 	bl	80035ea <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8002d60:	2310      	movs	r3, #16
 8002d62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002d64:	2302      	movs	r3, #2
 8002d66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d70:	2300      	movs	r3, #0
 8002d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002d74:	2305      	movs	r3, #5
 8002d76:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d78:	463b      	mov	r3, r7
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4815      	ldr	r0, [pc, #84]	@ (8002dd4 <MX_SPI1_Init+0xd0>)
 8002d7e:	f000 fc34 	bl	80035ea <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002d86:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002d8a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002d8c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002d90:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8002d92:	2300      	movs	r3, #0
 8002d94:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8002d96:	2300      	movs	r3, #0
 8002d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002d9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8002da0:	2318      	movs	r3, #24
 8002da2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002da4:	2300      	movs	r3, #0
 8002da6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002da8:	2300      	movs	r3, #0
 8002daa:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 8002dac:	2307      	movs	r3, #7
 8002dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002db0:	f107 0318 	add.w	r3, r7, #24
 8002db4:	4619      	mov	r1, r3
 8002db6:	4808      	ldr	r0, [pc, #32]	@ (8002dd8 <MX_SPI1_Init+0xd4>)
 8002db8:	f001 f8b0 	bl	8003f1c <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4806      	ldr	r0, [pc, #24]	@ (8002dd8 <MX_SPI1_Init+0xd4>)
 8002dc0:	f7ff faf4 	bl	80023ac <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 8002dc4:	4804      	ldr	r0, [pc, #16]	@ (8002dd8 <MX_SPI1_Init+0xd4>)
 8002dc6:	f7ff fb04 	bl	80023d2 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8002dca:	bf00      	nop
 8002dcc:	3740      	adds	r7, #64	@ 0x40
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	48000400 	.word	0x48000400
 8002dd8:	40013000 	.word	0x40013000

08002ddc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM1_Init(void) {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b09e      	sub	sp, #120	@ 0x78
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002de2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	60da      	str	r2, [r3, #12]
 8002df0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002df2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002df6:	2220      	movs	r2, #32
 8002df8:	2100      	movs	r1, #0
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f00a f800 	bl	800ce00 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8002e00:	f107 031c 	add.w	r3, r7, #28
 8002e04:	2228      	movs	r2, #40	@ 0x28
 8002e06:	2100      	movs	r1, #0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f009 fff9 	bl	800ce00 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0e:	1d3b      	adds	r3, r7, #4
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	611a      	str	r2, [r3, #16]
 8002e1c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8002e1e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002e22:	f7ff fa51 	bl	80022c8 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	66bb      	str	r3, [r7, #104]	@ 0x68
  TIM_InitStruct.Autoreload = 100;
 8002e30:	2364      	movs	r3, #100	@ 0x64
 8002e32:	66fb      	str	r3, [r7, #108]	@ 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002e34:	2300      	movs	r3, #0
 8002e36:	673b      	str	r3, [r7, #112]	@ 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	677b      	str	r3, [r7, #116]	@ 0x74
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002e3c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002e40:	4619      	mov	r1, r3
 8002e42:	4848      	ldr	r0, [pc, #288]	@ (8002f64 <MX_TIM1_Init+0x188>)
 8002e44:	f001 f952 	bl	80040ec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002e48:	4846      	ldr	r0, [pc, #280]	@ (8002f64 <MX_TIM1_Init+0x188>)
 8002e4a:	f7ff fb18 	bl	800247e <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4844      	ldr	r0, [pc, #272]	@ (8002f64 <MX_TIM1_Init+0x188>)
 8002e52:	f7ff fbd7 	bl	8002604 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8002e56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e5a:	4842      	ldr	r0, [pc, #264]	@ (8002f64 <MX_TIM1_Init+0x188>)
 8002e5c:	f7ff fb72 	bl	8002544 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002e60:	2360      	movs	r3, #96	@ 0x60
 8002e62:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002e64:	2300      	movs	r3, #0
 8002e66:	64bb      	str	r3, [r7, #72]	@ 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.CompareValue = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	653b      	str	r3, [r7, #80]	@ 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002e70:	2300      	movs	r3, #0
 8002e72:	657b      	str	r3, [r7, #84]	@ 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002e74:	2300      	movs	r3, #0
 8002e76:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	663b      	str	r3, [r7, #96]	@ 0x60
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002e80:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002e84:	461a      	mov	r2, r3
 8002e86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e8a:	4836      	ldr	r0, [pc, #216]	@ (8002f64 <MX_TIM1_Init+0x188>)
 8002e8c:	f001 f98c 	bl	80041a8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8002e90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e94:	4833      	ldr	r0, [pc, #204]	@ (8002f64 <MX_TIM1_Init+0x188>)
 8002e96:	f7ff fb03 	bl	80024a0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOCRefClearInputSource(TIM1, LL_TIM_OCREF_CLR_INT_NC);
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4831      	ldr	r0, [pc, #196]	@ (8002f64 <MX_TIM1_Init+0x188>)
 8002e9e:	f7ff fc15 	bl	80026cc <LL_TIM_SetOCRefClearInputSource>
  LL_TIM_DisableExternalClock(TIM1);
 8002ea2:	4830      	ldr	r0, [pc, #192]	@ (8002f64 <MX_TIM1_Init+0x188>)
 8002ea4:	f7ff fb9e 	bl	80025e4 <LL_TIM_DisableExternalClock>
  LL_TIM_ConfigETR(TIM1, LL_TIM_ETR_POLARITY_NONINVERTED,
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2100      	movs	r1, #0
 8002eae:	482d      	ldr	r0, [pc, #180]	@ (8002f64 <MX_TIM1_Init+0x188>)
 8002eb0:	f7ff fbf3 	bl	800269a <LL_TIM_ConfigETR>
                   LL_TIM_ETR_PRESCALER_DIV1, LL_TIM_ETR_FILTER_FDIV1);
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	482b      	ldr	r0, [pc, #172]	@ (8002f64 <MX_TIM1_Init+0x188>)
 8002eb8:	f7ff fbb9 	bl	800262e <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4829      	ldr	r0, [pc, #164]	@ (8002f64 <MX_TIM1_Init+0x188>)
 8002ec0:	f7ff fbc8 	bl	8002654 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002ec4:	4827      	ldr	r0, [pc, #156]	@ (8002f64 <MX_TIM1_Init+0x188>)
 8002ec6:	f7ff fbd8 	bl	800267a <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 5;
 8002ed6:	2305      	movs	r3, #5
 8002ed8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8002edc:	2300      	movs	r3, #0
 8002ede:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002ee0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	633b      	str	r3, [r7, #48]	@ 0x30
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8002eea:	2300      	movs	r3, #0
 8002eec:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8002eee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	643b      	str	r3, [r7, #64]	@ 0x40
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002efc:	f107 031c 	add.w	r3, r7, #28
 8002f00:	4619      	mov	r1, r3
 8002f02:	4818      	ldr	r0, [pc, #96]	@ (8002f64 <MX_TIM1_Init+0x188>)
 8002f04:	f001 f9b0 	bl	8004268 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002f08:	2002      	movs	r0, #2
 8002f0a:	f7ff f9ad 	bl	8002268 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002f0e:	2001      	movs	r0, #1
 8002f10:	f7ff f9aa 	bl	8002268 <LL_AHB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PB1   ------> TIM1_CH3N
  PA10   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002f14:	2302      	movs	r3, #2
 8002f16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2c:	1d3b      	adds	r3, r7, #4
 8002f2e:	4619      	mov	r1, r3
 8002f30:	480d      	ldr	r0, [pc, #52]	@ (8002f68 <MX_TIM1_Init+0x18c>)
 8002f32:	f000 fb5a 	bl	80035ea <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002f36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f3a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	4619      	mov	r1, r3
 8002f54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f58:	f000 fb47 	bl	80035ea <LL_GPIO_Init>
}
 8002f5c:	bf00      	nop
 8002f5e:	3778      	adds	r7, #120	@ 0x78
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	48000400 	.word	0x48000400

08002f6c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f72:	463b      	mov	r3, r7
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
 8002f80:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002f82:	2004      	movs	r0, #4
 8002f84:	f7ff f970 	bl	8002268 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002f88:	2001      	movs	r0, #1
 8002f8a:	f7ff f96d 	bl	8002268 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002f8e:	2002      	movs	r0, #2
 8002f90:	f7ff f96a 	bl	8002268 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8002f94:	2110      	movs	r1, #16
 8002f96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f9a:	f7ff fbaa 	bl	80026f2 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	481f      	ldr	r0, [pc, #124]	@ (8003020 <MX_GPIO_Init+0xb4>)
 8002fa2:	f7ff fba6 	bl	80026f2 <LL_GPIO_ResetOutputPin>

  /*Configure GPIO Outputs*/
  GPIO_InitStruct.Pin =
 8002fa6:	f248 1350 	movw	r3, #33104	@ 0x8150
 8002faa:	603b      	str	r3, [r7, #0]
      (LL_GPIO_PIN_4 | LL_GPIO_PIN_6 | LL_GPIO_PIN_8 | LL_GPIO_PIN_15);
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002fac:	2301      	movs	r3, #1
 8002fae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fbc:	463b      	mov	r3, r7
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fc4:	f000 fb11 	bl	80035ea <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fdc:	463b      	mov	r3, r7
 8002fde:	4619      	mov	r1, r3
 8002fe0:	480f      	ldr	r0, [pc, #60]	@ (8003020 <MX_GPIO_Init+0xb4>)
 8002fe2:	f000 fb02 	bl	80035ea <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002fe6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fea:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002fec:	2300      	movs	r3, #0
 8002fee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff4:	463b      	mov	r3, r7
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ffc:	f000 faf5 	bl	80035ea <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8003000:	2308      	movs	r3, #8
 8003002:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003004:	2300      	movs	r3, #0
 8003006:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003008:	2300      	movs	r3, #0
 800300a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800300c:	463b      	mov	r3, r7
 800300e:	4619      	mov	r1, r3
 8003010:	4803      	ldr	r0, [pc, #12]	@ (8003020 <MX_GPIO_Init+0xb4>)
 8003012:	f000 faea 	bl	80035ea <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003016:	bf00      	nop
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	48000400 	.word	0x48000400

08003024 <MX_LPTIM1_Init>:
/**
 * @brief LPTIM1 Initialization Function
 * @param None
 * @retval None
 */
void MX_LPTIM1_Init(void) {
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM1_Init 0 */

  /* USER CODE END LPTIM1_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE_LSE);
 8003028:	f04f 100c 	mov.w	r0, #786444	@ 0xc000c
 800302c:	f7ff f8ae 	bl	800218c <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_LPTIM1);
 8003030:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8003034:	f7ff f930 	bl	8002298 <LL_APB1_GRP1_EnableClock>

  /* LPTIM1 interrupt Init */
  NVIC_SetPriority(LPTIM1_IRQn,
 8003038:	f7fe fd78 	bl	8001b2c <__NVIC_GetPriorityGrouping>
 800303c:	4603      	mov	r3, r0
 800303e:	2200      	movs	r2, #0
 8003040:	2100      	movs	r1, #0
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe fdaa 	bl	8001b9c <NVIC_EncodePriority>
 8003048:	4603      	mov	r3, r0
 800304a:	4619      	mov	r1, r3
 800304c:	2041      	movs	r0, #65	@ 0x41
 800304e:	f7fe fd7b 	bl	8001b48 <__NVIC_SetPriority>
  // NVIC_EnableIRQ(LPTIM1_IRQn);

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM1, LL_LPTIM_CLK_SOURCE_INTERNAL);
 8003052:	2100      	movs	r1, #0
 8003054:	4810      	ldr	r0, [pc, #64]	@ (8003098 <MX_LPTIM1_Init+0x74>)
 8003056:	f7ff fbdc 	bl	8002812 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM1, LL_LPTIM_PRESCALER_DIV128);
 800305a:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 800305e:	480e      	ldr	r0, [pc, #56]	@ (8003098 <MX_LPTIM1_Init+0x74>)
 8003060:	f7ff fb8e 	bl	8002780 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM1, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 8003064:	2100      	movs	r1, #0
 8003066:	480c      	ldr	r0, [pc, #48]	@ (8003098 <MX_LPTIM1_Init+0x74>)
 8003068:	f7ff fb77 	bl	800275a <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM1, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 800306c:	2100      	movs	r1, #0
 800306e:	480a      	ldr	r0, [pc, #40]	@ (8003098 <MX_LPTIM1_Init+0x74>)
 8003070:	f7ff fb4d 	bl	800270e <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM1, LL_LPTIM_COUNTER_MODE_INTERNAL);
 8003074:	2100      	movs	r1, #0
 8003076:	4808      	ldr	r0, [pc, #32]	@ (8003098 <MX_LPTIM1_Init+0x74>)
 8003078:	f7ff fb5c 	bl	8002734 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM1);
 800307c:	4806      	ldr	r0, [pc, #24]	@ (8003098 <MX_LPTIM1_Init+0x74>)
 800307e:	f7ff fbb8 	bl	80027f2 <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM1, LL_LPTIM_INPUT1_SRC_GPIO);
 8003082:	2100      	movs	r1, #0
 8003084:	4804      	ldr	r0, [pc, #16]	@ (8003098 <MX_LPTIM1_Init+0x74>)
 8003086:	f7ff fb8e 	bl	80027a6 <LL_LPTIM_SetInput1Src>
  LL_LPTIM_SetInput2Src(LPTIM1, LL_LPTIM_INPUT2_SRC_GPIO);
 800308a:	2100      	movs	r1, #0
 800308c:	4802      	ldr	r0, [pc, #8]	@ (8003098 <MX_LPTIM1_Init+0x74>)
 800308e:	f7ff fb9d 	bl	80027cc <LL_LPTIM_SetInput2Src>
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40007c00 	.word	0x40007c00

0800309c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART2_UART_Init(void) {
 800309c:	b580      	push	{r7, lr}
 800309e:	b08e      	sub	sp, #56	@ 0x38
 80030a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80030a2:	f107 031c 	add.w	r3, r7, #28
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	609a      	str	r2, [r3, #8]
 80030ae:	60da      	str	r2, [r3, #12]
 80030b0:	611a      	str	r2, [r3, #16]
 80030b2:	615a      	str	r2, [r3, #20]
 80030b4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b6:	1d3b      	adds	r3, r7, #4
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	611a      	str	r2, [r3, #16]
 80030c4:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80030c6:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 80030ca:	f7ff f81d 	bl	8002108 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80030ce:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80030d2:	f7ff f8e1 	bl	8002298 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80030d6:	2001      	movs	r0, #1
 80030d8:	f7ff f8c6 	bl	8002268 <LL_AHB2_GRP1_EnableClock>
  /*
        USART2 GPIO Configuration
        PA2   ------> USART2_TX
        PA15 (JTDI)   ------> USART2_RX
        */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80030dc:	2304      	movs	r3, #4
 80030de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80030e0:	2302      	movs	r3, #2
 80030e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80030e4:	2303      	movs	r3, #3
 80030e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80030f0:	2307      	movs	r3, #7
 80030f2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f4:	1d3b      	adds	r3, r7, #4
 80030f6:	4619      	mov	r1, r3
 80030f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030fc:	f000 fa75 	bl	80035ea <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003100:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003104:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003106:	2302      	movs	r3, #2
 8003108:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800310a:	2303      	movs	r3, #3
 800310c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8003116:	2303      	movs	r3, #3
 8003118:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311a:	1d3b      	adds	r3, r7, #4
 800311c:	4619      	mov	r1, r3
 800311e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003122:	f000 fa62 	bl	80035ea <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8003126:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 800312a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800312c:	2300      	movs	r3, #0
 800312e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003130:	2300      	movs	r3, #0
 8003132:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003134:	2300      	movs	r3, #0
 8003136:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8003138:	2304      	movs	r3, #4
 800313a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800313c:	2300      	movs	r3, #0
 800313e:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003140:	2300      	movs	r3, #0
 8003142:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8003144:	f107 031c 	add.w	r3, r7, #28
 8003148:	4619      	mov	r1, r3
 800314a:	4806      	ldr	r0, [pc, #24]	@ (8003164 <MX_USART2_UART_Init+0xc8>)
 800314c:	f001 fc34 	bl	80049b8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8003150:	4804      	ldr	r0, [pc, #16]	@ (8003164 <MX_USART2_UART_Init+0xc8>)
 8003152:	f7ff fb81 	bl	8002858 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8003156:	4803      	ldr	r0, [pc, #12]	@ (8003164 <MX_USART2_UART_Init+0xc8>)
 8003158:	f7ff fb6e 	bl	8002838 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 800315c:	bf00      	nop
 800315e:	3738      	adds	r7, #56	@ 0x38
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40004400 	.word	0x40004400

08003168 <MX_IWDG_Init>:
/**
 * @brief IWDG Initialization Function
 * @param None
 * @retval None
 */
void MX_IWDG_Init(void) {
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  LL_IWDG_Enable(IWDG);
 800316c:	480d      	ldr	r0, [pc, #52]	@ (80031a4 <MX_IWDG_Init+0x3c>)
 800316e:	f7ff fb89 	bl	8002884 <LL_IWDG_Enable>
  LL_IWDG_EnableWriteAccess(IWDG);
 8003172:	480c      	ldr	r0, [pc, #48]	@ (80031a4 <MX_IWDG_Init+0x3c>)
 8003174:	f7ff fba2 	bl	80028bc <LL_IWDG_EnableWriteAccess>
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_256);
 8003178:	2106      	movs	r1, #6
 800317a:	480a      	ldr	r0, [pc, #40]	@ (80031a4 <MX_IWDG_Init+0x3c>)
 800317c:	f7ff fbac 	bl	80028d8 <LL_IWDG_SetPrescaler>
  LL_IWDG_SetReloadCounter(IWDG, 4095);
 8003180:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8003184:	4807      	ldr	r0, [pc, #28]	@ (80031a4 <MX_IWDG_Init+0x3c>)
 8003186:	f7ff fbb7 	bl	80028f8 <LL_IWDG_SetReloadCounter>
  while (LL_IWDG_IsReady(IWDG) != 1) {
 800318a:	bf00      	nop
 800318c:	4805      	ldr	r0, [pc, #20]	@ (80031a4 <MX_IWDG_Init+0x3c>)
 800318e:	f7ff fbc3 	bl	8002918 <LL_IWDG_IsReady>
 8003192:	4603      	mov	r3, r0
 8003194:	2b01      	cmp	r3, #1
 8003196:	d1f9      	bne.n	800318c <MX_IWDG_Init+0x24>
  }

  LL_IWDG_ReloadCounter(IWDG);
 8003198:	4802      	ldr	r0, [pc, #8]	@ (80031a4 <MX_IWDG_Init+0x3c>)
 800319a:	f7ff fb81 	bl	80028a0 <LL_IWDG_ReloadCounter>
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40003000 	.word	0x40003000

080031a8 <LL_ADC_REG_SetSequencerLength>:
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	f023 020f 	bic.w	r2, r3, #15
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <LL_ADC_IsEnabled>:
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <LL_ADC_IsEnabled+0x18>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <LL_ADC_IsEnabled+0x1a>
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, const LL_ADC_CommonInitTypeDef *pADC_CommonInitStruct)
{
 80031f4:	b590      	push	{r4, r7, lr}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80031fe:	2300      	movs	r3, #0
 8003200:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8003202:	4819      	ldr	r0, [pc, #100]	@ (8003268 <LL_ADC_CommonInit+0x74>)
 8003204:	f7ff ffe3 	bl	80031ce <LL_ADC_IsEnabled>
 8003208:	4604      	mov	r4, r0
 800320a:	4818      	ldr	r0, [pc, #96]	@ (800326c <LL_ADC_CommonInit+0x78>)
 800320c:	f7ff ffdf 	bl	80031ce <LL_ADC_IsEnabled>
 8003210:	4603      	mov	r3, r0
 8003212:	4323      	orrs	r3, r4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d120      	bne.n	800325a <LL_ADC_CommonInit+0x66>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (pADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d012      	beq.n	8003246 <LL_ADC_CommonInit+0x52>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	4b12      	ldr	r3, [pc, #72]	@ (8003270 <LL_ADC_CommonInit+0x7c>)
 8003226:	4013      	ands	r3, r2
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	6811      	ldr	r1, [r2, #0]
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	6852      	ldr	r2, [r2, #4]
 8003230:	4311      	orrs	r1, r2
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	6892      	ldr	r2, [r2, #8]
 8003236:	4311      	orrs	r1, r2
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	68d2      	ldr	r2, [r2, #12]
 800323c:	430a      	orrs	r2, r1
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	e00b      	b.n	800325e <LL_ADC_CommonInit+0x6a>
                 | pADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	4b09      	ldr	r3, [pc, #36]	@ (8003270 <LL_ADC_CommonInit+0x7c>)
 800324c:	4013      	ands	r3, r2
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	e001      	b.n	800325e <LL_ADC_CommonInit+0x6a>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800325e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	bd90      	pop	{r4, r7, pc}
 8003268:	50040000 	.word	0x50040000
 800326c:	50040100 	.word	0x50040100
 8003270:	ffc030e0 	.word	0xffc030e0

08003274 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, const LL_ADC_InitTypeDef *pADC_InitStruct)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(pADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(pADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff ffa3 	bl	80031ce <LL_ADC_IsEnabled>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d111      	bne.n	80032b2 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003296:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	6811      	ldr	r1, [r2, #0]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	6852      	ldr	r2, [r2, #4]
 80032a2:	4311      	orrs	r1, r2
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	6892      	ldr	r2, [r2, #8]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	60da      	str	r2, [r3, #12]
 80032b0:	e001      	b.n	80032b6 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, const LL_ADC_REG_InitTypeDef *pADC_RegInitStruct)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(pADC_RegInitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(pADC_RegInitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff ff7d 	bl	80031ce <LL_ADC_IsEnabled>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d132      	bne.n	8003340 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (pADC_RegInitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d015      	beq.n	800330e <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003350 <LL_ADC_REG_Init+0x90>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	6811      	ldr	r1, [r2, #0]
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	6892      	ldr	r2, [r2, #8]
 80032f2:	4311      	orrs	r1, r2
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	68d2      	ldr	r2, [r2, #12]
 80032f8:	4311      	orrs	r1, r2
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	6912      	ldr	r2, [r2, #16]
 80032fe:	4311      	orrs	r1, r2
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	6952      	ldr	r2, [r2, #20]
 8003304:	430a      	orrs	r2, r1
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	60da      	str	r2, [r3, #12]
 800330c:	e011      	b.n	8003332 <LL_ADC_REG_Init+0x72>
                 | pADC_RegInitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	4b0f      	ldr	r3, [pc, #60]	@ (8003350 <LL_ADC_REG_Init+0x90>)
 8003314:	4013      	ands	r3, r2
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	6811      	ldr	r1, [r2, #0]
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	68d2      	ldr	r2, [r2, #12]
 800331e:	4311      	orrs	r1, r2
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	6912      	ldr	r2, [r2, #16]
 8003324:	4311      	orrs	r1, r2
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	6952      	ldr	r2, [r2, #20]
 800332a:	430a      	orrs	r2, r1
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	60da      	str	r2, [r3, #12]
                 | pADC_RegInitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, pADC_RegInitStruct->SequencerLength);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4619      	mov	r1, r3
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ff35 	bl	80031a8 <LL_ADC_REG_SetSequencerLength>
 800333e:	e001      	b.n	8003344 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	fff0c03c 	.word	0xfff0c03c

08003354 <LL_GPIO_SetPinMode>:
{
 8003354:	b480      	push	{r7}
 8003356:	b08b      	sub	sp, #44	@ 0x2c
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	613b      	str	r3, [r7, #16]
  return result;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800337a:	2320      	movs	r3, #32
 800337c:	e003      	b.n	8003386 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	fab3 f383 	clz	r3, r3
 8003384:	b2db      	uxtb	r3, r3
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	2103      	movs	r1, #3
 800338a:	fa01 f303 	lsl.w	r3, r1, r3
 800338e:	43db      	mvns	r3, r3
 8003390:	401a      	ands	r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	61fb      	str	r3, [r7, #28]
  return result;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80033a8:	2320      	movs	r3, #32
 80033aa:	e003      	b.n	80033b4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	fab3 f383 	clz	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	431a      	orrs	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	601a      	str	r2, [r3, #0]
}
 80033c2:	bf00      	nop
 80033c4:	372c      	adds	r7, #44	@ 0x2c
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <LL_GPIO_SetPinOutputType>:
{
 80033ce:	b480      	push	{r7}
 80033d0:	b085      	sub	sp, #20
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	401a      	ands	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	fb01 f303 	mul.w	r3, r1, r3
 80033ec:	431a      	orrs	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	605a      	str	r2, [r3, #4]
}
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <LL_GPIO_SetPinSpeed>:
{
 80033fe:	b480      	push	{r7}
 8003400:	b08b      	sub	sp, #44	@ 0x2c
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	fa93 f3a3 	rbit	r3, r3
 8003418:	613b      	str	r3, [r7, #16]
  return result;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003424:	2320      	movs	r3, #32
 8003426:	e003      	b.n	8003430 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	fab3 f383 	clz	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	2103      	movs	r1, #3
 8003434:	fa01 f303 	lsl.w	r3, r1, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	401a      	ands	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	61fb      	str	r3, [r7, #28]
  return result;
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800344c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8003452:	2320      	movs	r3, #32
 8003454:	e003      	b.n	800345e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	fab3 f383 	clz	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	431a      	orrs	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	609a      	str	r2, [r3, #8]
}
 800346c:	bf00      	nop
 800346e:	372c      	adds	r7, #44	@ 0x2c
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <LL_GPIO_SetPinPull>:
{
 8003478:	b480      	push	{r7}
 800347a:	b08b      	sub	sp, #44	@ 0x2c
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	613b      	str	r3, [r7, #16]
  return result;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800349e:	2320      	movs	r3, #32
 80034a0:	e003      	b.n	80034aa <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	fab3 f383 	clz	r3, r3
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	2103      	movs	r1, #3
 80034ae:	fa01 f303 	lsl.w	r3, r1, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	401a      	ands	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	fa93 f3a3 	rbit	r3, r3
 80034c0:	61fb      	str	r3, [r7, #28]
  return result;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80034cc:	2320      	movs	r3, #32
 80034ce:	e003      	b.n	80034d8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80034d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d2:	fab3 f383 	clz	r3, r3
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	fa01 f303 	lsl.w	r3, r1, r3
 80034e0:	431a      	orrs	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	60da      	str	r2, [r3, #12]
}
 80034e6:	bf00      	nop
 80034e8:	372c      	adds	r7, #44	@ 0x2c
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <LL_GPIO_SetAFPin_0_7>:
{
 80034f2:	b480      	push	{r7}
 80034f4:	b08b      	sub	sp, #44	@ 0x2c
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a1a      	ldr	r2, [r3, #32]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	fa93 f3a3 	rbit	r3, r3
 800350c:	613b      	str	r3, [r7, #16]
  return result;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003518:	2320      	movs	r3, #32
 800351a:	e003      	b.n	8003524 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	fab3 f383 	clz	r3, r3
 8003522:	b2db      	uxtb	r3, r3
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	210f      	movs	r1, #15
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	401a      	ands	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	61fb      	str	r3, [r7, #28]
  return result;
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8003546:	2320      	movs	r3, #32
 8003548:	e003      	b.n	8003552 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800354a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	b2db      	uxtb	r3, r3
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	fa01 f303 	lsl.w	r3, r1, r3
 800355a:	431a      	orrs	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	621a      	str	r2, [r3, #32]
}
 8003560:	bf00      	nop
 8003562:	372c      	adds	r7, #44	@ 0x2c
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <LL_GPIO_SetAFPin_8_15>:
{
 800356c:	b480      	push	{r7}
 800356e:	b08b      	sub	sp, #44	@ 0x2c
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	0a1b      	lsrs	r3, r3, #8
 8003580:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	fa93 f3a3 	rbit	r3, r3
 8003588:	613b      	str	r3, [r7, #16]
  return result;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8003594:	2320      	movs	r3, #32
 8003596:	e003      	b.n	80035a0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	fab3 f383 	clz	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	210f      	movs	r1, #15
 80035a4:	fa01 f303 	lsl.w	r3, r1, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	401a      	ands	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	0a1b      	lsrs	r3, r3, #8
 80035b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	fa93 f3a3 	rbit	r3, r3
 80035b8:	61fb      	str	r3, [r7, #28]
  return result;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80035c4:	2320      	movs	r3, #32
 80035c6:	e003      	b.n	80035d0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80035c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	fa01 f303 	lsl.w	r3, r1, r3
 80035d8:	431a      	orrs	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80035de:	bf00      	nop
 80035e0:	372c      	adds	r7, #44	@ 0x2c
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b088      	sub	sp, #32
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	fa93 f3a3 	rbit	r3, r3
 8003600:	60fb      	str	r3, [r7, #12]
  return result;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <LL_GPIO_Init+0x26>
    return 32U;
 800360c:	2320      	movs	r3, #32
 800360e:	e003      	b.n	8003618 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800361a:	e048      	b.n	80036ae <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	2101      	movs	r1, #1
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	fa01 f303 	lsl.w	r3, r1, r3
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d03a      	beq.n	80036a8 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d003      	beq.n	8003642 <LL_GPIO_Init+0x58>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d10e      	bne.n	8003660 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	461a      	mov	r2, r3
 8003648:	69b9      	ldr	r1, [r7, #24]
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff fed7 	bl	80033fe <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	6819      	ldr	r1, [r3, #0]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	461a      	mov	r2, r3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff feb7 	bl	80033ce <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	461a      	mov	r2, r3
 8003666:	69b9      	ldr	r1, [r7, #24]
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ff05 	bl	8003478 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d111      	bne.n	800369a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2bff      	cmp	r3, #255	@ 0xff
 800367a:	d807      	bhi.n	800368c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	461a      	mov	r2, r3
 8003682:	69b9      	ldr	r1, [r7, #24]
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff ff34 	bl	80034f2 <LL_GPIO_SetAFPin_0_7>
 800368a:	e006      	b.n	800369a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	461a      	mov	r2, r3
 8003692:	69b9      	ldr	r1, [r7, #24]
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7ff ff69 	bl	800356c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	461a      	mov	r2, r3
 80036a0:	69b9      	ldr	r1, [r7, #24]
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff fe56 	bl	8003354 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	3301      	adds	r3, #1
 80036ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	fa22 f303 	lsr.w	r3, r2, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1af      	bne.n	800361c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <LL_I2C_Enable>:
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f043 0201 	orr.w	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	601a      	str	r2, [r3, #0]
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <LL_I2C_Disable>:
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 0201 	bic.w	r2, r3, #1
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	601a      	str	r2, [r3, #0]
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <LL_I2C_ConfigFilters>:
{
 8003706:	b480      	push	{r7}
 8003708:	b085      	sub	sp, #20
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	0219      	lsls	r1, r3, #8
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	430b      	orrs	r3, r1
 8003722:	431a      	orrs	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	601a      	str	r2, [r3, #0]
}
 8003728:	bf00      	nop
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <LL_I2C_SetOwnAddress1>:
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003748:	f023 0307 	bic.w	r3, r3, #7
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	430a      	orrs	r2, r1
 8003752:	431a      	orrs	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	609a      	str	r2, [r3, #8]
}
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_I2C_EnableOwnAddress1>:
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	609a      	str	r2, [r3, #8]
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <LL_I2C_DisableOwnAddress1>:
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	609a      	str	r2, [r3, #8]
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <LL_I2C_SetTiming>:
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	611a      	str	r2, [r3, #16]
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <LL_I2C_SetMode>:
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	601a      	str	r2, [r3, #0]
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <LL_I2C_AcknowledgeNextData>:
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	605a      	str	r2, [r3, #4]
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff ff65 	bl	80036e6 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	6899      	ldr	r1, [r3, #8]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	461a      	mov	r2, r3
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff ff6d 	bl	8003706 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	4619      	mov	r1, r3
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff ffb6 	bl	80037a4 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff ff44 	bl	80036c6 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff ffa0 	bl	8003784 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	6919      	ldr	r1, [r3, #16]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	461a      	mov	r2, r3
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff ff70 	bl	8003734 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff ff81 	bl	8003764 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4619      	mov	r1, r3
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff ffa9 	bl	80037c0 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	4619      	mov	r1, r3
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7ff ffb6 	bl	80037e6 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <LL_RCC_HSI_IsReady>:
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8003888:	4b07      	ldr	r3, [pc, #28]	@ (80038a8 <LL_RCC_HSI_IsReady+0x24>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003890:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003894:	d101      	bne.n	800389a <LL_RCC_HSI_IsReady+0x16>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <LL_RCC_HSI_IsReady+0x18>
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000

080038ac <LL_RCC_LSE_IsReady>:
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80038b0:	4b07      	ldr	r3, [pc, #28]	@ (80038d0 <LL_RCC_LSE_IsReady+0x24>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d101      	bne.n	80038c2 <LL_RCC_LSE_IsReady+0x16>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <LL_RCC_LSE_IsReady+0x18>
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40021000 	.word	0x40021000

080038d4 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80038d8:	4b06      	ldr	r3, [pc, #24]	@ (80038f4 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d101      	bne.n	80038e8 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	40021000 	.word	0x40021000

080038f8 <LL_RCC_MSI_GetRange>:
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80038fc:	4b04      	ldr	r3, [pc, #16]	@ (8003910 <LL_RCC_MSI_GetRange+0x18>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003904:	4618      	mov	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000

08003914 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003918:	4b04      	ldr	r3, [pc, #16]	@ (800392c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800391a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800391e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8003922:	4618      	mov	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	40021000 	.word	0x40021000

08003930 <LL_RCC_GetSysClkSource>:
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003934:	4b04      	ldr	r3, [pc, #16]	@ (8003948 <LL_RCC_GetSysClkSource+0x18>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 030c 	and.w	r3, r3, #12
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000

0800394c <LL_RCC_GetAHBPrescaler>:
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003950:	4b04      	ldr	r3, [pc, #16]	@ (8003964 <LL_RCC_GetAHBPrescaler+0x18>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40021000 	.word	0x40021000

08003968 <LL_RCC_GetAPB1Prescaler>:
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800396c:	4b04      	ldr	r3, [pc, #16]	@ (8003980 <LL_RCC_GetAPB1Prescaler+0x18>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003974:	4618      	mov	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	40021000 	.word	0x40021000

08003984 <LL_RCC_GetAPB2Prescaler>:
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003988:	4b04      	ldr	r3, [pc, #16]	@ (800399c <LL_RCC_GetAPB2Prescaler+0x18>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003990:	4618      	mov	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40021000 	.word	0x40021000

080039a0 <LL_RCC_GetUSARTClockSource>:
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80039a8:	4b06      	ldr	r3, [pc, #24]	@ (80039c4 <LL_RCC_GetUSARTClockSource+0x24>)
 80039aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	401a      	ands	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	041b      	lsls	r3, r3, #16
 80039b6:	4313      	orrs	r3, r2
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	40021000 	.word	0x40021000

080039c8 <LL_RCC_PLL_GetMainSource>:
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80039cc:	4b04      	ldr	r3, [pc, #16]	@ (80039e0 <LL_RCC_PLL_GetMainSource+0x18>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0303 	and.w	r3, r3, #3
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40021000 	.word	0x40021000

080039e4 <LL_RCC_PLL_GetN>:
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80039e8:	4b04      	ldr	r3, [pc, #16]	@ (80039fc <LL_RCC_PLL_GetN+0x18>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	40021000 	.word	0x40021000

08003a00 <LL_RCC_PLL_GetR>:
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003a04:	4b04      	ldr	r3, [pc, #16]	@ (8003a18 <LL_RCC_PLL_GetR+0x18>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	40021000 	.word	0x40021000

08003a1c <LL_RCC_PLL_GetDivider>:
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003a20:	4b04      	ldr	r3, [pc, #16]	@ (8003a34 <LL_RCC_PLL_GetDivider+0x18>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40021000 	.word	0x40021000

08003a38 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d137      	bne.n	8003aba <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff ffa8 	bl	80039a0 <LL_RCC_GetUSARTClockSource>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	f200 80b3 	bhi.w	8003bc2 <LL_RCC_GetUSARTClockFreq+0x18a>
 8003a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a64 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8003a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a62:	bf00      	nop
 8003a64:	08003aa3 	.word	0x08003aa3
 8003a68:	08003a75 	.word	0x08003a75
 8003a6c:	08003a7d 	.word	0x08003a7d
 8003a70:	08003a8f 	.word	0x08003a8f
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003a74:	f000 f8c2 	bl	8003bfc <RCC_GetSystemClockFreq>
 8003a78:	60f8      	str	r0, [r7, #12]
        break;
 8003a7a:	e0b3      	b.n	8003be4 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003a7c:	f7ff ff02 	bl	8003884 <LL_RCC_HSI_IsReady>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 809f 	beq.w	8003bc6 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8003a88:	4b59      	ldr	r3, [pc, #356]	@ (8003bf0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8003a8a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003a8c:	e09b      	b.n	8003bc6 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003a8e:	f7ff ff0d 	bl	80038ac <LL_RCC_LSE_IsReady>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8098 	beq.w	8003bca <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8003a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a9e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003aa0:	e093      	b.n	8003bca <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003aa2:	f000 f8ab 	bl	8003bfc <RCC_GetSystemClockFreq>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 f937 	bl	8003d1c <RCC_GetHCLKClockFreq>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 f95d 	bl	8003d70 <RCC_GetPCLK2ClockFreq>
 8003ab6:	60f8      	str	r0, [r7, #12]
        break;
 8003ab8:	e094      	b.n	8003be4 <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b0c      	cmp	r3, #12
 8003abe:	d146      	bne.n	8003b4e <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7ff ff6d 	bl	80039a0 <LL_RCC_GetUSARTClockSource>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8003acc:	2b0c      	cmp	r3, #12
 8003ace:	d87e      	bhi.n	8003bce <LL_RCC_GetUSARTClockFreq+0x196>
 8003ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad8 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8003ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad6:	bf00      	nop
 8003ad8:	08003b37 	.word	0x08003b37
 8003adc:	08003bcf 	.word	0x08003bcf
 8003ae0:	08003bcf 	.word	0x08003bcf
 8003ae4:	08003bcf 	.word	0x08003bcf
 8003ae8:	08003b0d 	.word	0x08003b0d
 8003aec:	08003bcf 	.word	0x08003bcf
 8003af0:	08003bcf 	.word	0x08003bcf
 8003af4:	08003bcf 	.word	0x08003bcf
 8003af8:	08003b15 	.word	0x08003b15
 8003afc:	08003bcf 	.word	0x08003bcf
 8003b00:	08003bcf 	.word	0x08003bcf
 8003b04:	08003bcf 	.word	0x08003bcf
 8003b08:	08003b25 	.word	0x08003b25
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003b0c:	f000 f876 	bl	8003bfc <RCC_GetSystemClockFreq>
 8003b10:	60f8      	str	r0, [r7, #12]
        break;
 8003b12:	e067      	b.n	8003be4 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003b14:	f7ff feb6 	bl	8003884 <LL_RCC_HSI_IsReady>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d059      	beq.n	8003bd2 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8003b1e:	4b34      	ldr	r3, [pc, #208]	@ (8003bf0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8003b20:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003b22:	e056      	b.n	8003bd2 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003b24:	f7ff fec2 	bl	80038ac <LL_RCC_LSE_IsReady>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d053      	beq.n	8003bd6 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8003b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b32:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003b34:	e04f      	b.n	8003bd6 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003b36:	f000 f861 	bl	8003bfc <RCC_GetSystemClockFreq>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 f8ed 	bl	8003d1c <RCC_GetHCLKClockFreq>
 8003b42:	4603      	mov	r3, r0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 f8ff 	bl	8003d48 <RCC_GetPCLK1ClockFreq>
 8003b4a:	60f8      	str	r0, [r7, #12]
        break;
 8003b4c:	e04a      	b.n	8003be4 <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b30      	cmp	r3, #48	@ 0x30
 8003b52:	d147      	bne.n	8003be4 <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ff23 	bl	80039a0 <LL_RCC_GetUSARTClockSource>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8003b60:	d01a      	beq.n	8003b98 <LL_RCC_GetUSARTClockFreq+0x160>
 8003b62:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8003b66:	d838      	bhi.n	8003bda <LL_RCC_GetUSARTClockFreq+0x1a2>
 8003b68:	4a22      	ldr	r2, [pc, #136]	@ (8003bf4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00c      	beq.n	8003b88 <LL_RCC_GetUSARTClockFreq+0x150>
 8003b6e:	4a21      	ldr	r2, [pc, #132]	@ (8003bf4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d832      	bhi.n	8003bda <LL_RCC_GetUSARTClockFreq+0x1a2>
 8003b74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b78:	d017      	beq.n	8003baa <LL_RCC_GetUSARTClockFreq+0x172>
 8003b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d12c      	bne.n	8003bda <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8003b80:	f000 f83c 	bl	8003bfc <RCC_GetSystemClockFreq>
 8003b84:	60f8      	str	r0, [r7, #12]
          break;
 8003b86:	e02d      	b.n	8003be4 <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8003b88:	f7ff fe7c 	bl	8003884 <LL_RCC_HSI_IsReady>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d025      	beq.n	8003bde <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 8003b92:	4b17      	ldr	r3, [pc, #92]	@ (8003bf0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8003b94:	60fb      	str	r3, [r7, #12]
          }
          break;
 8003b96:	e022      	b.n	8003bde <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8003b98:	f7ff fe88 	bl	80038ac <LL_RCC_LSE_IsReady>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d01f      	beq.n	8003be2 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 8003ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ba6:	60fb      	str	r3, [r7, #12]
          }
          break;
 8003ba8:	e01b      	b.n	8003be2 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003baa:	f000 f827 	bl	8003bfc <RCC_GetSystemClockFreq>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 f8b3 	bl	8003d1c <RCC_GetHCLKClockFreq>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 f8c5 	bl	8003d48 <RCC_GetPCLK1ClockFreq>
 8003bbe:	60f8      	str	r0, [r7, #12]
          break;
 8003bc0:	e010      	b.n	8003be4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8003bc2:	bf00      	nop
 8003bc4:	e00e      	b.n	8003be4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8003bc6:	bf00      	nop
 8003bc8:	e00c      	b.n	8003be4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8003bca:	bf00      	nop
 8003bcc:	e00a      	b.n	8003be4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8003bce:	bf00      	nop
 8003bd0:	e008      	b.n	8003be4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8003bd2:	bf00      	nop
 8003bd4:	e006      	b.n	8003be4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8003bd6:	bf00      	nop
 8003bd8:	e004      	b.n	8003be4 <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 8003bda:	bf00      	nop
 8003bdc:	e002      	b.n	8003be4 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8003bde:	bf00      	nop
 8003be0:	e000      	b.n	8003be4 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8003be2:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8003be4:	68fb      	ldr	r3, [r7, #12]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	00f42400 	.word	0x00f42400
 8003bf4:	00300020 	.word	0x00300020
 8003bf8:	00300010 	.word	0x00300010

08003bfc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003c02:	f7ff fe95 	bl	8003930 <LL_RCC_GetSysClkSource>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b0c      	cmp	r3, #12
 8003c0a:	d851      	bhi.n	8003cb0 <RCC_GetSystemClockFreq+0xb4>
 8003c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c14 <RCC_GetSystemClockFreq+0x18>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003c49 	.word	0x08003c49
 8003c18:	08003cb1 	.word	0x08003cb1
 8003c1c:	08003cb1 	.word	0x08003cb1
 8003c20:	08003cb1 	.word	0x08003cb1
 8003c24:	08003c9d 	.word	0x08003c9d
 8003c28:	08003cb1 	.word	0x08003cb1
 8003c2c:	08003cb1 	.word	0x08003cb1
 8003c30:	08003cb1 	.word	0x08003cb1
 8003c34:	08003ca3 	.word	0x08003ca3
 8003c38:	08003cb1 	.word	0x08003cb1
 8003c3c:	08003cb1 	.word	0x08003cb1
 8003c40:	08003cb1 	.word	0x08003cb1
 8003c44:	08003ca9 	.word	0x08003ca9
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003c48:	f7ff fe44 	bl	80038d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d111      	bne.n	8003c76 <RCC_GetSystemClockFreq+0x7a>
 8003c52:	f7ff fe3f 	bl	80038d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d004      	beq.n	8003c66 <RCC_GetSystemClockFreq+0x6a>
 8003c5c:	f7ff fe4c 	bl	80038f8 <LL_RCC_MSI_GetRange>
 8003c60:	4603      	mov	r3, r0
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	e003      	b.n	8003c6e <RCC_GetSystemClockFreq+0x72>
 8003c66:	f7ff fe55 	bl	8003914 <LL_RCC_MSI_GetRangeAfterStandby>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	0a1b      	lsrs	r3, r3, #8
 8003c6e:	4a28      	ldr	r2, [pc, #160]	@ (8003d10 <RCC_GetSystemClockFreq+0x114>)
 8003c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c74:	e010      	b.n	8003c98 <RCC_GetSystemClockFreq+0x9c>
 8003c76:	f7ff fe2d 	bl	80038d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d004      	beq.n	8003c8a <RCC_GetSystemClockFreq+0x8e>
 8003c80:	f7ff fe3a 	bl	80038f8 <LL_RCC_MSI_GetRange>
 8003c84:	4603      	mov	r3, r0
 8003c86:	091b      	lsrs	r3, r3, #4
 8003c88:	e003      	b.n	8003c92 <RCC_GetSystemClockFreq+0x96>
 8003c8a:	f7ff fe43 	bl	8003914 <LL_RCC_MSI_GetRangeAfterStandby>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	4a1f      	ldr	r2, [pc, #124]	@ (8003d10 <RCC_GetSystemClockFreq+0x114>)
 8003c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c98:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003c9a:	e033      	b.n	8003d04 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003d14 <RCC_GetSystemClockFreq+0x118>)
 8003c9e:	607b      	str	r3, [r7, #4]
      break;
 8003ca0:	e030      	b.n	8003d04 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d18 <RCC_GetSystemClockFreq+0x11c>)
 8003ca4:	607b      	str	r3, [r7, #4]
      break;
 8003ca6:	e02d      	b.n	8003d04 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003ca8:	f000 f876 	bl	8003d98 <RCC_PLL_GetFreqDomain_SYS>
 8003cac:	6078      	str	r0, [r7, #4]
      break;
 8003cae:	e029      	b.n	8003d04 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003cb0:	f7ff fe10 	bl	80038d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d111      	bne.n	8003cde <RCC_GetSystemClockFreq+0xe2>
 8003cba:	f7ff fe0b 	bl	80038d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d004      	beq.n	8003cce <RCC_GetSystemClockFreq+0xd2>
 8003cc4:	f7ff fe18 	bl	80038f8 <LL_RCC_MSI_GetRange>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	0a1b      	lsrs	r3, r3, #8
 8003ccc:	e003      	b.n	8003cd6 <RCC_GetSystemClockFreq+0xda>
 8003cce:	f7ff fe21 	bl	8003914 <LL_RCC_MSI_GetRangeAfterStandby>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	0a1b      	lsrs	r3, r3, #8
 8003cd6:	4a0e      	ldr	r2, [pc, #56]	@ (8003d10 <RCC_GetSystemClockFreq+0x114>)
 8003cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cdc:	e010      	b.n	8003d00 <RCC_GetSystemClockFreq+0x104>
 8003cde:	f7ff fdf9 	bl	80038d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d004      	beq.n	8003cf2 <RCC_GetSystemClockFreq+0xf6>
 8003ce8:	f7ff fe06 	bl	80038f8 <LL_RCC_MSI_GetRange>
 8003cec:	4603      	mov	r3, r0
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	e003      	b.n	8003cfa <RCC_GetSystemClockFreq+0xfe>
 8003cf2:	f7ff fe0f 	bl	8003914 <LL_RCC_MSI_GetRangeAfterStandby>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	091b      	lsrs	r3, r3, #4
 8003cfa:	4a05      	ldr	r2, [pc, #20]	@ (8003d10 <RCC_GetSystemClockFreq+0x114>)
 8003cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d00:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003d02:	bf00      	nop
  }

  return frequency;
 8003d04:	687b      	ldr	r3, [r7, #4]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	0800f6c0 	.word	0x0800f6c0
 8003d14:	00f42400 	.word	0x00f42400
 8003d18:	017d7840 	.word	0x017d7840

08003d1c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003d24:	f7ff fe12 	bl	800394c <LL_RCC_GetAHBPrescaler>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	091b      	lsrs	r3, r3, #4
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	4a04      	ldr	r2, [pc, #16]	@ (8003d44 <RCC_GetHCLKClockFreq+0x28>)
 8003d32:	5cd3      	ldrb	r3, [r2, r3]
 8003d34:	461a      	mov	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	40d3      	lsrs	r3, r2
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	0800f6a8 	.word	0x0800f6a8

08003d48 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003d50:	f7ff fe0a 	bl	8003968 <LL_RCC_GetAPB1Prescaler>
 8003d54:	4603      	mov	r3, r0
 8003d56:	0a1b      	lsrs	r3, r3, #8
 8003d58:	4a04      	ldr	r2, [pc, #16]	@ (8003d6c <RCC_GetPCLK1ClockFreq+0x24>)
 8003d5a:	5cd3      	ldrb	r3, [r2, r3]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	40d3      	lsrs	r3, r2
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	0800f6b8 	.word	0x0800f6b8

08003d70 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003d78:	f7ff fe04 	bl	8003984 <LL_RCC_GetAPB2Prescaler>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	0adb      	lsrs	r3, r3, #11
 8003d80:	4a04      	ldr	r2, [pc, #16]	@ (8003d94 <RCC_GetPCLK2ClockFreq+0x24>)
 8003d82:	5cd3      	ldrb	r3, [r2, r3]
 8003d84:	461a      	mov	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	40d3      	lsrs	r3, r2
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	0800f6b8 	.word	0x0800f6b8

08003d98 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003d98:	b590      	push	{r4, r7, lr}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003d9e:	f7ff fe13 	bl	80039c8 <LL_RCC_PLL_GetMainSource>
 8003da2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d036      	beq.n	8003e18 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d836      	bhi.n	8003e1e <RCC_PLL_GetFreqDomain_SYS+0x86>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d003      	beq.n	8003dbe <RCC_PLL_GetFreqDomain_SYS+0x26>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d02a      	beq.n	8003e12 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8003dbc:	e02f      	b.n	8003e1e <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003dbe:	f7ff fd89 	bl	80038d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d111      	bne.n	8003dec <RCC_PLL_GetFreqDomain_SYS+0x54>
 8003dc8:	f7ff fd84 	bl	80038d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d004      	beq.n	8003ddc <RCC_PLL_GetFreqDomain_SYS+0x44>
 8003dd2:	f7ff fd91 	bl	80038f8 <LL_RCC_MSI_GetRange>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	0a1b      	lsrs	r3, r3, #8
 8003dda:	e003      	b.n	8003de4 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8003ddc:	f7ff fd9a 	bl	8003914 <LL_RCC_MSI_GetRangeAfterStandby>
 8003de0:	4603      	mov	r3, r0
 8003de2:	0a1b      	lsrs	r3, r3, #8
 8003de4:	4a2f      	ldr	r2, [pc, #188]	@ (8003ea4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dea:	e010      	b.n	8003e0e <RCC_PLL_GetFreqDomain_SYS+0x76>
 8003dec:	f7ff fd72 	bl	80038d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d004      	beq.n	8003e00 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8003df6:	f7ff fd7f 	bl	80038f8 <LL_RCC_MSI_GetRange>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	091b      	lsrs	r3, r3, #4
 8003dfe:	e003      	b.n	8003e08 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8003e00:	f7ff fd88 	bl	8003914 <LL_RCC_MSI_GetRangeAfterStandby>
 8003e04:	4603      	mov	r3, r0
 8003e06:	091b      	lsrs	r3, r3, #4
 8003e08:	4a26      	ldr	r2, [pc, #152]	@ (8003ea4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003e10:	e02f      	b.n	8003e72 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003e12:	4b25      	ldr	r3, [pc, #148]	@ (8003ea8 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8003e14:	607b      	str	r3, [r7, #4]
      break;
 8003e16:	e02c      	b.n	8003e72 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003e18:	4b24      	ldr	r3, [pc, #144]	@ (8003eac <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8003e1a:	607b      	str	r3, [r7, #4]
      break;
 8003e1c:	e029      	b.n	8003e72 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003e1e:	f7ff fd59 	bl	80038d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d111      	bne.n	8003e4c <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8003e28:	f7ff fd54 	bl	80038d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d004      	beq.n	8003e3c <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8003e32:	f7ff fd61 	bl	80038f8 <LL_RCC_MSI_GetRange>
 8003e36:	4603      	mov	r3, r0
 8003e38:	0a1b      	lsrs	r3, r3, #8
 8003e3a:	e003      	b.n	8003e44 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8003e3c:	f7ff fd6a 	bl	8003914 <LL_RCC_MSI_GetRangeAfterStandby>
 8003e40:	4603      	mov	r3, r0
 8003e42:	0a1b      	lsrs	r3, r3, #8
 8003e44:	4a17      	ldr	r2, [pc, #92]	@ (8003ea4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4a:	e010      	b.n	8003e6e <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8003e4c:	f7ff fd42 	bl	80038d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d004      	beq.n	8003e60 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8003e56:	f7ff fd4f 	bl	80038f8 <LL_RCC_MSI_GetRange>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	091b      	lsrs	r3, r3, #4
 8003e5e:	e003      	b.n	8003e68 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8003e60:	f7ff fd58 	bl	8003914 <LL_RCC_MSI_GetRangeAfterStandby>
 8003e64:	4603      	mov	r3, r0
 8003e66:	091b      	lsrs	r3, r3, #4
 8003e68:	4a0e      	ldr	r2, [pc, #56]	@ (8003ea4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003e70:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003e72:	f7ff fdd3 	bl	8003a1c <LL_RCC_PLL_GetDivider>
 8003e76:	4603      	mov	r3, r0
 8003e78:	091b      	lsrs	r3, r3, #4
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	fbb2 f4f3 	udiv	r4, r2, r3
 8003e82:	f7ff fdaf 	bl	80039e4 <LL_RCC_PLL_GetN>
 8003e86:	4603      	mov	r3, r0
 8003e88:	fb03 f404 	mul.w	r4, r3, r4
 8003e8c:	f7ff fdb8 	bl	8003a00 <LL_RCC_PLL_GetR>
 8003e90:	4603      	mov	r3, r0
 8003e92:	0e5b      	lsrs	r3, r3, #25
 8003e94:	3301      	adds	r3, #1
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd90      	pop	{r4, r7, pc}
 8003ea4:	0800f6c0 	.word	0x0800f6c0
 8003ea8:	00f42400 	.word	0x00f42400
 8003eac:	017d7840 	.word	0x017d7840

08003eb0 <LL_SPI_IsEnabled>:
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec0:	2b40      	cmp	r3, #64	@ 0x40
 8003ec2:	d101      	bne.n	8003ec8 <LL_SPI_IsEnabled+0x18>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <LL_SPI_IsEnabled+0x1a>
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <LL_SPI_SetRxFIFOThreshold>:
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	605a      	str	r2, [r3, #4]
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <LL_SPI_SetCRCPolynomial>:
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	611a      	str	r2, [r3, #16]
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff ffc0 	bl	8003eb0 <LL_SPI_IsEnabled>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d145      	bne.n	8003fc2 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f3e:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	6811      	ldr	r1, [r2, #0]
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	6852      	ldr	r2, [r2, #4]
 8003f4a:	4311      	orrs	r1, r2
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	68d2      	ldr	r2, [r2, #12]
 8003f50:	4311      	orrs	r1, r2
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	6912      	ldr	r2, [r2, #16]
 8003f56:	4311      	orrs	r1, r2
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	6952      	ldr	r2, [r2, #20]
 8003f5c:	4311      	orrs	r1, r2
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	6992      	ldr	r2, [r2, #24]
 8003f62:	4311      	orrs	r1, r2
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	69d2      	ldr	r2, [r2, #28]
 8003f68:	4311      	orrs	r1, r2
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	6a12      	ldr	r2, [r2, #32]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f7e:	f023 0304 	bic.w	r3, r3, #4
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	6891      	ldr	r1, [r2, #8]
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	6952      	ldr	r2, [r2, #20]
 8003f8a:	0c12      	lsrs	r2, r2, #16
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f9c:	d204      	bcs.n	8003fa8 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8003f9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff ff97 	bl	8003ed6 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fb0:	d105      	bne.n	8003fbe <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff ff9f 	bl	8003efc <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <LL_TIM_SetPrescaler>:
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <LL_TIM_SetAutoReload>:
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <LL_TIM_SetRepetitionCounter>:
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <LL_TIM_OC_SetCompareCH1>:
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <LL_TIM_OC_SetCompareCH2>:
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <LL_TIM_OC_SetCompareCH3>:
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <LL_TIM_OC_SetCompareCH4>:
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <LL_TIM_OC_SetCompareCH5>:
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <LL_TIM_OC_SetCompareCH6>:
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	f043 0201 	orr.w	r2, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	615a      	str	r2, [r3, #20]
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a27      	ldr	r2, [pc, #156]	@ (800419c <LL_TIM_Init+0xb0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <LL_TIM_Init+0x20>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800410a:	d106      	bne.n	800411a <LL_TIM_Init+0x2e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a1f      	ldr	r2, [pc, #124]	@ (800419c <LL_TIM_Init+0xb0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00b      	beq.n	800413a <LL_TIM_Init+0x4e>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004128:	d007      	beq.n	800413a <LL_TIM_Init+0x4e>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a1c      	ldr	r2, [pc, #112]	@ (80041a0 <LL_TIM_Init+0xb4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d003      	beq.n	800413a <LL_TIM_Init+0x4e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a1b      	ldr	r2, [pc, #108]	@ (80041a4 <LL_TIM_Init+0xb8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d106      	bne.n	8004148 <LL_TIM_Init+0x5c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4313      	orrs	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	4619      	mov	r1, r3
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7ff ff47 	bl	8003fe8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	4619      	mov	r1, r3
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff ff33 	bl	8003fcc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a0c      	ldr	r2, [pc, #48]	@ (800419c <LL_TIM_Init+0xb0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d007      	beq.n	800417e <LL_TIM_Init+0x92>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a0b      	ldr	r2, [pc, #44]	@ (80041a0 <LL_TIM_Init+0xb4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d003      	beq.n	800417e <LL_TIM_Init+0x92>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a0a      	ldr	r2, [pc, #40]	@ (80041a4 <LL_TIM_Init+0xb8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d105      	bne.n	800418a <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	4619      	mov	r1, r3
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff ff3d 	bl	8004004 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff ff9e 	bl	80040cc <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40012c00 	.word	0x40012c00
 80041a0:	40014000 	.word	0x40014000
 80041a4:	40014400 	.word	0x40014400

080041a8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041be:	d045      	beq.n	800424c <LL_TIM_OC_Init+0xa4>
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041c6:	d848      	bhi.n	800425a <LL_TIM_OC_Init+0xb2>
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ce:	d036      	beq.n	800423e <LL_TIM_OC_Init+0x96>
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041d6:	d840      	bhi.n	800425a <LL_TIM_OC_Init+0xb2>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041de:	d027      	beq.n	8004230 <LL_TIM_OC_Init+0x88>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e6:	d838      	bhi.n	800425a <LL_TIM_OC_Init+0xb2>
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ee:	d018      	beq.n	8004222 <LL_TIM_OC_Init+0x7a>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041f6:	d830      	bhi.n	800425a <LL_TIM_OC_Init+0xb2>
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d003      	beq.n	8004206 <LL_TIM_OC_Init+0x5e>
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b10      	cmp	r3, #16
 8004202:	d007      	beq.n	8004214 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004204:	e029      	b.n	800425a <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f891 	bl	8004330 <OC1Config>
 800420e:	4603      	mov	r3, r0
 8004210:	75fb      	strb	r3, [r7, #23]
      break;
 8004212:	e023      	b.n	800425c <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f8fe 	bl	8004418 <OC2Config>
 800421c:	4603      	mov	r3, r0
 800421e:	75fb      	strb	r3, [r7, #23]
      break;
 8004220:	e01c      	b.n	800425c <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f96f 	bl	8004508 <OC3Config>
 800422a:	4603      	mov	r3, r0
 800422c:	75fb      	strb	r3, [r7, #23]
      break;
 800422e:	e015      	b.n	800425c <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f9e0 	bl	80045f8 <OC4Config>
 8004238:	4603      	mov	r3, r0
 800423a:	75fb      	strb	r3, [r7, #23]
      break;
 800423c:	e00e      	b.n	800425c <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 fa39 	bl	80046b8 <OC5Config>
 8004246:	4603      	mov	r3, r0
 8004248:	75fb      	strb	r3, [r7, #23]
      break;
 800424a:	e007      	b.n	800425c <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fa8a 	bl	8004768 <OC6Config>
 8004254:	4603      	mov	r3, r0
 8004256:	75fb      	strb	r3, [r7, #23]
      break;
 8004258:	e000      	b.n	800425c <LL_TIM_OC_Init+0xb4>
      break;
 800425a:	bf00      	nop
  }

  return result;
 800425c:	7dfb      	ldrb	r3, [r7, #23]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	7b12      	ldrb	r2, [r2, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	4313      	orrs	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	89d2      	ldrh	r2, [r2, #14]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a10      	ldr	r2, [pc, #64]	@ (800432c <LL_TIM_BDTR_Init+0xc4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d114      	bne.n	8004318 <LL_TIM_BDTR_Init+0xb0>
    assert_param(IS_LL_TIM_BREAK2_STATE(TIM_BDTRInitStruct->Break2State));
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	40012c00 	.word	0x40012c00

08004330 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	f023 0201 	bic.w	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0303 	bic.w	r3, r3, #3
 800435e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	6812      	ldr	r2, [r2, #0]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f023 0202 	bic.w	r2, r3, #2
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f023 0201 	bic.w	r2, r3, #1
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a1e      	ldr	r2, [pc, #120]	@ (800440c <OC1Config+0xdc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d007      	beq.n	80043a6 <OC1Config+0x76>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a1d      	ldr	r2, [pc, #116]	@ (8004410 <OC1Config+0xe0>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d003      	beq.n	80043a6 <OC1Config+0x76>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004414 <OC1Config+0xe4>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d11e      	bne.n	80043e4 <OC1Config+0xb4>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f023 0208 	bic.w	r2, r3, #8
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4313      	orrs	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f023 0204 	bic.w	r2, r3, #4
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	4619      	mov	r1, r3
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff fe12 	bl	8004020 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40012c00 	.word	0x40012c00
 8004410:	40014000 	.word	0x40014000
 8004414:	40014400 	.word	0x40014400

08004418 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800444e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	0212      	lsls	r2, r2, #8
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f023 0220 	bic.w	r2, r3, #32
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f023 0210 	bic.w	r2, r3, #16
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a1f      	ldr	r2, [pc, #124]	@ (80044fc <OC2Config+0xe4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d007      	beq.n	8004494 <OC2Config+0x7c>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a1e      	ldr	r2, [pc, #120]	@ (8004500 <OC2Config+0xe8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d003      	beq.n	8004494 <OC2Config+0x7c>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a1d      	ldr	r2, [pc, #116]	@ (8004504 <OC2Config+0xec>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d11f      	bne.n	80044d4 <OC2Config+0xbc>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	019b      	lsls	r3, r3, #6
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	019b      	lsls	r3, r3, #6
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4619      	mov	r1, r3
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff fda8 	bl	800403c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40012c00 	.word	0x40012c00
 8004500:	40014000 	.word	0x40014000
 8004504:	40014400 	.word	0x40014400

08004508 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0303 	bic.w	r3, r3, #3
 8004536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800453e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	021b      	lsls	r3, r3, #8
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	021b      	lsls	r3, r3, #8
 8004566:	4313      	orrs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a1f      	ldr	r2, [pc, #124]	@ (80045ec <OC3Config+0xe4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d007      	beq.n	8004582 <OC3Config+0x7a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a1e      	ldr	r2, [pc, #120]	@ (80045f0 <OC3Config+0xe8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d003      	beq.n	8004582 <OC3Config+0x7a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a1d      	ldr	r2, [pc, #116]	@ (80045f4 <OC3Config+0xec>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d11f      	bne.n	80045c2 <OC3Config+0xba>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	029b      	lsls	r3, r3, #10
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	029b      	lsls	r3, r3, #10
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	015b      	lsls	r3, r3, #5
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	4619      	mov	r1, r3
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7ff fd3f 	bl	8004058 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40012c00 	.word	0x40012c00
 80045f0:	40014000 	.word	0x40014000
 80045f4:	40014400 	.word	0x40014400

080045f8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800462e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	0212      	lsls	r2, r2, #8
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	031b      	lsls	r3, r3, #12
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	031b      	lsls	r3, r3, #12
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a13      	ldr	r2, [pc, #76]	@ (80046ac <OC4Config+0xb4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d007      	beq.n	8004674 <OC4Config+0x7c>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a12      	ldr	r2, [pc, #72]	@ (80046b0 <OC4Config+0xb8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d003      	beq.n	8004674 <OC4Config+0x7c>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a11      	ldr	r2, [pc, #68]	@ (80046b4 <OC4Config+0xbc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d107      	bne.n	8004684 <OC4Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	019b      	lsls	r3, r3, #6
 8004680:	4313      	orrs	r3, r2
 8004682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	4619      	mov	r1, r3
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7ff fcec 	bl	8004074 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40012c00 	.word	0x40012c00
 80046b0:	40014000 	.word	0x40014000
 80046b4:	40014400 	.word	0x40014400

080046b8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	6812      	ldr	r2, [r2, #0]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	041b      	lsls	r3, r3, #16
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	041b      	lsls	r3, r3, #16
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a13      	ldr	r2, [pc, #76]	@ (800475c <OC5Config+0xa4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d007      	beq.n	8004724 <OC5Config+0x6c>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a12      	ldr	r2, [pc, #72]	@ (8004760 <OC5Config+0xa8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d003      	beq.n	8004724 <OC5Config+0x6c>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a11      	ldr	r2, [pc, #68]	@ (8004764 <OC5Config+0xac>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d109      	bne.n	8004738 <OC5Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	4619      	mov	r1, r3
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7ff fca3 	bl	8004090 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40012c00 	.word	0x40012c00
 8004760:	40014000 	.word	0x40014000
 8004764:	40014400 	.word	0x40014400

08004768 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004788:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004790:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	0212      	lsls	r2, r2, #8
 800479a:	4313      	orrs	r3, r2
 800479c:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	051b      	lsls	r3, r3, #20
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	051b      	lsls	r3, r3, #20
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a12      	ldr	r2, [pc, #72]	@ (800480c <OC6Config+0xa4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d007      	beq.n	80047d6 <OC6Config+0x6e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a11      	ldr	r2, [pc, #68]	@ (8004810 <OC6Config+0xa8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d003      	beq.n	80047d6 <OC6Config+0x6e>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a10      	ldr	r2, [pc, #64]	@ (8004814 <OC6Config+0xac>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d109      	bne.n	80047ea <OC6Config+0x82>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	029b      	lsls	r3, r3, #10
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4619      	mov	r1, r3
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7ff fc5a 	bl	80040b0 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40012c00 	.word	0x40012c00
 8004810:	40014000 	.word	0x40014000
 8004814:	40014400 	.word	0x40014400

08004818 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	4a07      	ldr	r2, [pc, #28]	@ (8004848 <LL_InitTick+0x30>)
 800482c:	3b01      	subs	r3, #1
 800482e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004830:	4b05      	ldr	r3, [pc, #20]	@ (8004848 <LL_InitTick+0x30>)
 8004832:	2200      	movs	r2, #0
 8004834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004836:	4b04      	ldr	r3, [pc, #16]	@ (8004848 <LL_InitTick+0x30>)
 8004838:	2205      	movs	r2, #5
 800483a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	e000e010 	.word	0xe000e010

0800484c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004854:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff ffdd 	bl	8004818 <LL_InitTick>
}
 800485e:	bf00      	nop
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004870:	4b10      	ldr	r3, [pc, #64]	@ (80048b4 <LL_mDelay+0x4c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800487a:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004882:	d00c      	beq.n	800489e <LL_mDelay+0x36>
  {
    tmpDelay++;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3301      	adds	r3, #1
 8004888:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 800488a:	e008      	b.n	800489e <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800488c:	4b09      	ldr	r3, [pc, #36]	@ (80048b4 <LL_mDelay+0x4c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <LL_mDelay+0x36>
    {
      tmpDelay--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3b01      	subs	r3, #1
 800489c:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1f3      	bne.n	800488c <LL_mDelay+0x24>
    }
  }
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	e000e010 	.word	0xe000e010

080048b8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80048c0:	4a04      	ldr	r2, [pc, #16]	@ (80048d4 <LL_SetSystemCoreClock+0x1c>)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6013      	str	r3, [r2, #0]
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000024 	.word	0x20000024

080048d8 <LL_USART_IsEnabled>:
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <LL_USART_IsEnabled+0x18>
 80048ec:	2301      	movs	r3, #1
 80048ee:	e000      	b.n	80048f2 <LL_USART_IsEnabled+0x1a>
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <LL_USART_SetStopBitsLength>:
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	605a      	str	r2, [r3, #4]
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <LL_USART_SetHWFlowCtrl>:
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	609a      	str	r2, [r3, #8]
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <LL_USART_SetBaudRate>:
{
 800494a:	b480      	push	{r7}
 800494c:	b087      	sub	sp, #28
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	607a      	str	r2, [r7, #4]
 8004956:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800495e:	d11a      	bne.n	8004996 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	005a      	lsls	r2, r3, #1
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	441a      	add	r2, r3
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	b29b      	uxth	r3, r3
 8004972:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800497a:	4013      	ands	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	085b      	lsrs	r3, r3, #1
 8004982:	b29b      	uxth	r3, r3
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4313      	orrs	r3, r2
 800498c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	60da      	str	r2, [r3, #12]
}
 8004994:	e00a      	b.n	80049ac <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	085a      	lsrs	r2, r3, #1
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	441a      	add	r2, r3
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	461a      	mov	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	60da      	str	r2, [r3, #12]
}
 80049ac:	bf00      	nop
 80049ae:	371c      	adds	r7, #28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff ff84 	bl	80048d8 <LL_USART_IsEnabled>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d148      	bne.n	8004a68 <LL_USART_Init+0xb0>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4b26      	ldr	r3, [pc, #152]	@ (8004a74 <LL_USART_Init+0xbc>)
 80049dc:	4013      	ands	r3, r2
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	6851      	ldr	r1, [r2, #4]
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	68d2      	ldr	r2, [r2, #12]
 80049e6:	4311      	orrs	r1, r2
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	6912      	ldr	r2, [r2, #16]
 80049ec:	4311      	orrs	r1, r2
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	6992      	ldr	r2, [r2, #24]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	4619      	mov	r1, r3
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7ff ff7c 	bl	80048fe <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff ff89 	bl	8004924 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a18      	ldr	r2, [pc, #96]	@ (8004a78 <LL_USART_Init+0xc0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d104      	bne.n	8004a24 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8004a1a:	2003      	movs	r0, #3
 8004a1c:	f7ff f80c 	bl	8003a38 <LL_RCC_GetUSARTClockFreq>
 8004a20:	60b8      	str	r0, [r7, #8]
 8004a22:	e010      	b.n	8004a46 <LL_USART_Init+0x8e>
    }
    else if (USARTx == USART2)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a15      	ldr	r2, [pc, #84]	@ (8004a7c <LL_USART_Init+0xc4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d104      	bne.n	8004a36 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8004a2c:	200c      	movs	r0, #12
 8004a2e:	f7ff f803 	bl	8003a38 <LL_RCC_GetUSARTClockFreq>
 8004a32:	60b8      	str	r0, [r7, #8]
 8004a34:	e007      	b.n	8004a46 <LL_USART_Init+0x8e>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a11      	ldr	r2, [pc, #68]	@ (8004a80 <LL_USART_Init+0xc8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d103      	bne.n	8004a46 <LL_USART_Init+0x8e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8004a3e:	2030      	movs	r0, #48	@ 0x30
 8004a40:	f7fe fffa 	bl	8003a38 <LL_RCC_GetUSARTClockFreq>
 8004a44:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00d      	beq.n	8004a68 <LL_USART_Init+0xb0>
        && (USART_InitStruct->BaudRate != 0U))
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d009      	beq.n	8004a68 <LL_USART_Init+0xb0>
    {
      status = SUCCESS;
 8004a54:	2300      	movs	r3, #0
 8004a56:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7ff ff71 	bl	800494a <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	efff69f3 	.word	0xefff69f3
 8004a78:	40013800 	.word	0x40013800
 8004a7c:	40004400 	.word	0x40004400
 8004a80:	40004800 	.word	0x40004800

08004a84 <LL_GPIO_SetOutputPin>:
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	619a      	str	r2, [r3, #24]
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <LL_GPIO_ResetOutputPin>:
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <fram_init>:
int fram_rdsr(fram_t *dev);
int fram_wrsr(fram_t *dev);
int fram_get_id(fram_t *dev);

int fram_init(fram_t *dev, SPI_TypeDef *SPIx, uint8_t cs_pin, uint8_t sck_pin,
              uint8_t mosi_pin, uint8_t miso_pin) {
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	461a      	mov	r2, r3
 8004aca:	460b      	mov	r3, r1
 8004acc:	71fb      	strb	r3, [r7, #7]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	71bb      	strb	r3, [r7, #6]
  dev->spi_device = SPIx;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	601a      	str	r2, [r3, #0]

  dev->cs_pin = cs_pin;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	79fa      	ldrb	r2, [r7, #7]
 8004adc:	711a      	strb	r2, [r3, #4]
  dev->sck_pin = sck_pin;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	79ba      	ldrb	r2, [r7, #6]
 8004ae2:	715a      	strb	r2, [r3, #5]
  dev->mosi_pin = mosi_pin;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	7e3a      	ldrb	r2, [r7, #24]
 8004ae8:	719a      	strb	r2, [r3, #6]
  dev->miso_pin = miso_pin;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	7f3a      	ldrb	r2, [r7, #28]
 8004aee:	71da      	strb	r2, [r3, #7]

  dev->wp_pin = 255;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	22ff      	movs	r2, #255	@ 0xff
 8004af4:	721a      	strb	r2, [r3, #8]
  dev->hold_pin = 255;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	22ff      	movs	r2, #255	@ 0xff
 8004afa:	725a      	strb	r2, [r3, #9]

  // TODO actually make this driver use the given CS pin
  CS_HIGH
 8004afc:	2110      	movs	r1, #16
 8004afe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b02:	f7ff ffbf 	bl	8004a84 <LL_GPIO_SetOutputPin>

  fram_get_id(dev);
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 f805 	bl	8004b16 <fram_get_id>

  return 0;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <fram_get_id>:

int fram_get_id(fram_t *dev) {
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  uint8_t cmd = RDID_CMD;
 8004b1e:	239f      	movs	r3, #159	@ 0x9f
 8004b20:	73fb      	strb	r3, [r7, #15]

  CS_LOW
 8004b22:	2110      	movs	r1, #16
 8004b24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b28:	f7ff ffba 	bl	8004aa0 <LL_GPIO_ResetOutputPin>

  spi_write(dev->spi_device, &cmd, 1);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f107 010f 	add.w	r1, r7, #15
 8004b34:	2201      	movs	r2, #1
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fd ff1f 	bl	800297a <spi_write>

  spi_read(dev->spi_device, (uint8_t *)&(dev->device_id), 4);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3310      	adds	r3, #16
 8004b44:	2204      	movs	r2, #4
 8004b46:	4619      	mov	r1, r3
 8004b48:	f7fd fef9 	bl	800293e <spi_read>

  CS_HIGH
 8004b4c:	2110      	movs	r1, #16
 8004b4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b52:	f7ff ff97 	bl	8004a84 <LL_GPIO_SetOutputPin>

  return 0;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <fram_wren>:

// TODO actually check for errors
// Set write enable latch (enable writes)
int fram_wren(fram_t *dev) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint8_t cmd = WREN_CMD;
 8004b68:	2306      	movs	r3, #6
 8004b6a:	73fb      	strb	r3, [r7, #15]

  CS_LOW
 8004b6c:	2110      	movs	r1, #16
 8004b6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b72:	f7ff ff95 	bl	8004aa0 <LL_GPIO_ResetOutputPin>

  spi_write(dev->spi_device, &cmd, 1);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f107 010f 	add.w	r1, r7, #15
 8004b7e:	2201      	movs	r2, #1
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fd fefa 	bl	800297a <spi_write>

  CS_HIGH
 8004b86:	2110      	movs	r1, #16
 8004b88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b8c:	f7ff ff7a 	bl	8004a84 <LL_GPIO_SetOutputPin>

  return 0;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <fram_write>:
  // TODO
  return -1;
}

int fram_write(fram_t *dev, SPI_TypeDef *SPIx, uint32_t addr, uint8_t *buf,
               uint32_t num_bytes) {
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b086      	sub	sp, #24
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
 8004ba6:	603b      	str	r3, [r7, #0]
  uint8_t cmd = WRITE_CMD;
 8004ba8:	2302      	movs	r3, #2
 8004baa:	75fb      	strb	r3, [r7, #23]

  uint8_t addr_byte_1 = (addr >> 16) & 0xFF;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	0c1b      	lsrs	r3, r3, #16
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	75bb      	strb	r3, [r7, #22]
  uint8_t addr_byte_2 = (addr >> 8) & 0xFF;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	0a1b      	lsrs	r3, r3, #8
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	757b      	strb	r3, [r7, #21]
  uint8_t addr_byte_3 = addr & 0xFF;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	753b      	strb	r3, [r7, #20]

  fram_wren(dev);
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f7ff ffcc 	bl	8004b60 <fram_wren>

  CS_LOW
 8004bc8:	2110      	movs	r1, #16
 8004bca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004bce:	f7ff ff67 	bl	8004aa0 <LL_GPIO_ResetOutputPin>

  spi_write(dev->spi_device, &cmd, 1);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f107 0117 	add.w	r1, r7, #23
 8004bda:	2201      	movs	r2, #1
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fd fecc 	bl	800297a <spi_write>

  spi_write(dev->spi_device, &addr_byte_1, 1);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f107 0116 	add.w	r1, r7, #22
 8004bea:	2201      	movs	r2, #1
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fd fec4 	bl	800297a <spi_write>
  spi_write(dev->spi_device, &addr_byte_2, 1);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f107 0115 	add.w	r1, r7, #21
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fd febc 	bl	800297a <spi_write>
  spi_write(dev->spi_device, &addr_byte_3, 1);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f107 0114 	add.w	r1, r7, #20
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fd feb4 	bl	800297a <spi_write>

  spi_write(dev->spi_device, buf, num_bytes);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6a3a      	ldr	r2, [r7, #32]
 8004c18:	6839      	ldr	r1, [r7, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fd fead 	bl	800297a <spi_write>

  CS_HIGH
 8004c20:	2110      	movs	r1, #16
 8004c22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c26:	f7ff ff2d 	bl	8004a84 <LL_GPIO_SetOutputPin>

  return 0;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <fram_read>:

int fram_read(fram_t *dev, SPI_TypeDef *SPIx, uint32_t addr, uint8_t *buf,
              uint32_t num_bytes) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
  uint8_t cmd = READ_CMD;
 8004c42:	2303      	movs	r3, #3
 8004c44:	75fb      	strb	r3, [r7, #23]

  uint8_t addr_byte_1 = (addr >> 16) & 0xFF;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	0c1b      	lsrs	r3, r3, #16
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	75bb      	strb	r3, [r7, #22]
  uint8_t addr_byte_2 = (addr >> 8) & 0xFF;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	0a1b      	lsrs	r3, r3, #8
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	757b      	strb	r3, [r7, #21]
  uint8_t addr_byte_3 = addr & 0xFF;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	753b      	strb	r3, [r7, #20]

  CS_LOW
 8004c5c:	2110      	movs	r1, #16
 8004c5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c62:	f7ff ff1d 	bl	8004aa0 <LL_GPIO_ResetOutputPin>

  spi_write(dev->spi_device, &cmd, 1);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f107 0117 	add.w	r1, r7, #23
 8004c6e:	2201      	movs	r2, #1
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fd fe82 	bl	800297a <spi_write>

  spi_write(dev->spi_device, &addr_byte_1, 1);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f107 0116 	add.w	r1, r7, #22
 8004c7e:	2201      	movs	r2, #1
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fd fe7a 	bl	800297a <spi_write>
  spi_write(dev->spi_device, &addr_byte_2, 1);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f107 0115 	add.w	r1, r7, #21
 8004c8e:	2201      	movs	r2, #1
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fd fe72 	bl	800297a <spi_write>
  spi_write(dev->spi_device, &addr_byte_3, 1);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f107 0114 	add.w	r1, r7, #20
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fd fe6a 	bl	800297a <spi_write>

  spi_read(dev->spi_device, buf, num_bytes);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6a3a      	ldr	r2, [r7, #32]
 8004cac:	6839      	ldr	r1, [r7, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fd fe45 	bl	800293e <spi_read>

  CS_HIGH
 8004cb4:	2110      	movs	r1, #16
 8004cb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004cba:	f7ff fee3 	bl	8004a84 <LL_GPIO_SetOutputPin>

  return 0;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3718      	adds	r7, #24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <write_buf_to_fs>:

// Mounts, opens file, write to file, closes file, unmounts, returns -1 if mount
// fails
int write_buf_to_fs(lfs_t *lfs, const struct lfs_config *config,
                    lfs_file_t *file, const char *path, char *buf,
                    uint32_t bytes) {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]

  int err = lfs_mount(lfs, config);
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f006 feaf 	bl	800ba3c <lfs_mount>
 8004cde:	6178      	str	r0, [r7, #20]

  if (err) {
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <write_buf_to_fs+0x24>
    return -1;
 8004ce6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004cea:	e014      	b.n	8004d16 <write_buf_to_fs+0x4e>
  }

  lfs_file_open(lfs, file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_APPEND);
 8004cec:	f640 1303 	movw	r3, #2307	@ 0x903
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f006 fecb 	bl	800ba90 <lfs_file_open>

  lfs_file_write(lfs, file, buf, bytes);
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfc:	6a3a      	ldr	r2, [r7, #32]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f006 ff55 	bl	800bbb0 <lfs_file_write>

  lfs_file_close(lfs, file);
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f006 fef5 	bl	800baf8 <lfs_file_close>
  lfs_unmount(lfs);
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f006 feaa 	bl	800ba68 <lfs_unmount>

  return 0;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <fs_flash_read>:

// littleFS port functions

int fs_flash_read(const struct lfs_config *cfg, lfs_block_t block,
                  lfs_off_t off, void *buffer, lfs_size_t size) {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
  assert(off % cfg->read_size == 0);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	695a      	ldr	r2, [r3, #20]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d38:	fb01 f202 	mul.w	r2, r1, r2
 8004d3c:	1a9b      	subs	r3, r3, r2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d005      	beq.n	8004d4e <fs_flash_read+0x2e>
 8004d42:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc0 <fs_flash_read+0xa0>)
 8004d44:	4a1f      	ldr	r2, [pc, #124]	@ (8004dc4 <fs_flash_read+0xa4>)
 8004d46:	212d      	movs	r1, #45	@ 0x2d
 8004d48:	481f      	ldr	r0, [pc, #124]	@ (8004dc8 <fs_flash_read+0xa8>)
 8004d4a:	f007 fde1 	bl	800c910 <__assert_func>
  assert(size % cfg->read_size == 0);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	695a      	ldr	r2, [r3, #20]
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d58:	fb01 f202 	mul.w	r2, r1, r2
 8004d5c:	1a9b      	subs	r3, r3, r2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <fs_flash_read+0x4e>
 8004d62:	4b1a      	ldr	r3, [pc, #104]	@ (8004dcc <fs_flash_read+0xac>)
 8004d64:	4a17      	ldr	r2, [pc, #92]	@ (8004dc4 <fs_flash_read+0xa4>)
 8004d66:	212e      	movs	r1, #46	@ 0x2e
 8004d68:	4817      	ldr	r0, [pc, #92]	@ (8004dc8 <fs_flash_read+0xa8>)
 8004d6a:	f007 fdd1 	bl	800c910 <__assert_func>
  assert(block < cfg->block_count);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d305      	bcc.n	8004d84 <fs_flash_read+0x64>
 8004d78:	4b15      	ldr	r3, [pc, #84]	@ (8004dd0 <fs_flash_read+0xb0>)
 8004d7a:	4a12      	ldr	r2, [pc, #72]	@ (8004dc4 <fs_flash_read+0xa4>)
 8004d7c:	212f      	movs	r1, #47	@ 0x2f
 8004d7e:	4812      	ldr	r0, [pc, #72]	@ (8004dc8 <fs_flash_read+0xa8>)
 8004d80:	f007 fdc6 	bl	800c910 <__assert_func>

  uint32_t startAddress = block * (cfg->block_size) + off;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	4413      	add	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]
  int ret = fram_read(&memory, memory.spi_device, startAddress,
 8004d94:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd4 <fs_flash_read+0xb4>)
 8004d96:	6819      	ldr	r1, [r3, #0]
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	480c      	ldr	r0, [pc, #48]	@ (8004dd4 <fs_flash_read+0xb4>)
 8004da2:	f7ff ff47 	bl	8004c34 <fram_read>
 8004da6:	6138      	str	r0, [r7, #16]
                      (uint8_t *)buffer, size);

  if (ret == -1) {
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dae:	d102      	bne.n	8004db6 <fs_flash_read+0x96>
    return -1;
 8004db0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004db4:	e000      	b.n	8004db8 <fs_flash_read+0x98>
  } else {
    return 0;
 8004db6:	2300      	movs	r3, #0
  }
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	0800e944 	.word	0x0800e944
 8004dc4:	0800f708 	.word	0x0800f708
 8004dc8:	0800e960 	.word	0x0800e960
 8004dcc:	0800e97c 	.word	0x0800e97c
 8004dd0:	0800e998 	.word	0x0800e998
 8004dd4:	200000ac 	.word	0x200000ac

08004dd8 <fs_flash_prog>:

int fs_flash_prog(const struct lfs_config *cfg, lfs_block_t block,
                  lfs_off_t off, const void *buffer, lfs_size_t size) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]

  assert(off % cfg->prog_size == 0);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	fbb3 f1f2 	udiv	r1, r3, r2
 8004df0:	fb01 f202 	mul.w	r2, r1, r2
 8004df4:	1a9b      	subs	r3, r3, r2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <fs_flash_prog+0x2e>
 8004dfa:	4b1f      	ldr	r3, [pc, #124]	@ (8004e78 <fs_flash_prog+0xa0>)
 8004dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8004e7c <fs_flash_prog+0xa4>)
 8004dfe:	213f      	movs	r1, #63	@ 0x3f
 8004e00:	481f      	ldr	r0, [pc, #124]	@ (8004e80 <fs_flash_prog+0xa8>)
 8004e02:	f007 fd85 	bl	800c910 <__assert_func>
  assert(size % cfg->prog_size == 0);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e10:	fb01 f202 	mul.w	r2, r1, r2
 8004e14:	1a9b      	subs	r3, r3, r2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d005      	beq.n	8004e26 <fs_flash_prog+0x4e>
 8004e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004e84 <fs_flash_prog+0xac>)
 8004e1c:	4a17      	ldr	r2, [pc, #92]	@ (8004e7c <fs_flash_prog+0xa4>)
 8004e1e:	2140      	movs	r1, #64	@ 0x40
 8004e20:	4817      	ldr	r0, [pc, #92]	@ (8004e80 <fs_flash_prog+0xa8>)
 8004e22:	f007 fd75 	bl	800c910 <__assert_func>
  assert(block < cfg->block_count);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d305      	bcc.n	8004e3c <fs_flash_prog+0x64>
 8004e30:	4b15      	ldr	r3, [pc, #84]	@ (8004e88 <fs_flash_prog+0xb0>)
 8004e32:	4a12      	ldr	r2, [pc, #72]	@ (8004e7c <fs_flash_prog+0xa4>)
 8004e34:	2141      	movs	r1, #65	@ 0x41
 8004e36:	4812      	ldr	r0, [pc, #72]	@ (8004e80 <fs_flash_prog+0xa8>)
 8004e38:	f007 fd6a 	bl	800c910 <__assert_func>

  uint32_t startAddress = block * (cfg->block_size) + off;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	4413      	add	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]
  int ret = fram_write(&memory, memory.spi_device, startAddress,
 8004e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004e8c <fs_flash_prog+0xb4>)
 8004e4e:	6819      	ldr	r1, [r3, #0]
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	480c      	ldr	r0, [pc, #48]	@ (8004e8c <fs_flash_prog+0xb4>)
 8004e5a:	f7ff fe9e 	bl	8004b9a <fram_write>
 8004e5e:	6138      	str	r0, [r7, #16]
                       (uint8_t *)buffer, size);

  if (ret == -1) {
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e66:	d102      	bne.n	8004e6e <fs_flash_prog+0x96>
    return -1;
 8004e68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e6c:	e000      	b.n	8004e70 <fs_flash_prog+0x98>
  } else {
    return 0;
 8004e6e:	2300      	movs	r3, #0
  }
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	0800e9b4 	.word	0x0800e9b4
 8004e7c:	0800f718 	.word	0x0800f718
 8004e80:	0800e960 	.word	0x0800e960
 8004e84:	0800e9d0 	.word	0x0800e9d0
 8004e88:	0800e998 	.word	0x0800e998
 8004e8c:	200000ac 	.word	0x200000ac

08004e90 <fs_flash_erase>:

int fs_flash_erase(const struct lfs_config *cfg, lfs_block_t block) {
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  assert(block < cfg->block_count);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d305      	bcc.n	8004eb0 <fs_flash_erase+0x20>
 8004ea4:	4b12      	ldr	r3, [pc, #72]	@ (8004ef0 <fs_flash_erase+0x60>)
 8004ea6:	4a13      	ldr	r2, [pc, #76]	@ (8004ef4 <fs_flash_erase+0x64>)
 8004ea8:	214f      	movs	r1, #79	@ 0x4f
 8004eaa:	4813      	ldr	r0, [pc, #76]	@ (8004ef8 <fs_flash_erase+0x68>)
 8004eac:	f007 fd30 	bl	800c910 <__assert_func>
  uint8_t zero = 0x00;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	73fb      	strb	r3, [r7, #15]

  uint32_t startAddress = block * (cfg->block_size);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	fb02 f303 	mul.w	r3, r2, r3
 8004ebe:	617b      	str	r3, [r7, #20]
  int ret = fram_write(&memory, memory.spi_device, startAddress, &zero, 128);
 8004ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8004efc <fs_flash_erase+0x6c>)
 8004ec2:	6819      	ldr	r1, [r3, #0]
 8004ec4:	f107 030f 	add.w	r3, r7, #15
 8004ec8:	2280      	movs	r2, #128	@ 0x80
 8004eca:	9200      	str	r2, [sp, #0]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	480b      	ldr	r0, [pc, #44]	@ (8004efc <fs_flash_erase+0x6c>)
 8004ed0:	f7ff fe63 	bl	8004b9a <fram_write>
 8004ed4:	6138      	str	r0, [r7, #16]

  if (ret == -1) {
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004edc:	d102      	bne.n	8004ee4 <fs_flash_erase+0x54>
    return -1;
 8004ede:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ee2:	e000      	b.n	8004ee6 <fs_flash_erase+0x56>
  } else {
    return 0;
 8004ee4:	2300      	movs	r3, #0
  }
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	0800e998 	.word	0x0800e998
 8004ef4:	0800f728 	.word	0x0800f728
 8004ef8:	0800e960 	.word	0x0800e960
 8004efc:	200000ac 	.word	0x200000ac

08004f00 <fs_flash_sync>:

// SPI implementation is blocking
int fs_flash_sync(const struct lfs_config *c) { return 0; }
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4293      	cmp	r3, r2
 8004f26:	bf38      	it	cc
 8004f28:	4613      	movcc	r3, r2
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4293      	cmp	r3, r2
 8004f46:	bf28      	it	cs
 8004f48:	4613      	movcs	r3, r2
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f68:	6839      	ldr	r1, [r7, #0]
 8004f6a:	fb01 f202 	mul.w	r2, r1, r2
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	1ad3      	subs	r3, r2, r3
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	4413      	add	r3, r2
 8004f90:	3b01      	subs	r3, #1
 8004f92:	6839      	ldr	r1, [r7, #0]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff ffde 	bl	8004f56 <lfs_aligndown>
 8004f9a:	4603      	mov	r3, r0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	fab3 f383 	clz	r3, r3
 8004fb4:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	fa93 f3a3 	rbit	r3, r3
 8004fd2:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b082      	sub	sp, #8
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f009 fb30 	bl	800e650 <__popcountsi2>
 8004ff0:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	1ad3      	subs	r3, r2, r3
}
 800500a:	4618      	mov	r0, r3
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 800501e:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8005020:	4618      	mov	r0, r3
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7ff ffee 	bl	8005016 <lfs_fromle32>
 800503a:	4603      	mov	r3, r0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff ffed 	bl	8005044 <lfs_frombe32>
 800506a:	4603      	mov	r3, r0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f007 fc77 	bl	800c970 <malloc>
 8005082:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8005084:	4618      	mov	r0, r3
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f007 fc73 	bl	800c980 <free>
#else
    (void)p;
#endif
}
 800509a:	bf00      	nop
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050b2:	601a      	str	r2, [r3, #0]
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68d8      	ldr	r0, [r3, #12]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d4:	461a      	mov	r2, r3
 80050d6:	21ff      	movs	r1, #255	@ 0xff
 80050d8:	f007 fe92 	bl	800ce00 <memset>
    pcache->block = LFS_BLOCK_NULL;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050e2:	601a      	str	r2, [r3, #0]
}
 80050e4:	bf00      	nop
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 80050ec:	b5b0      	push	{r4, r5, r7, lr}
 80050ee:	b08a      	sub	sp, #40	@ 0x28
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80050fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fc:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 80050fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005102:	441a      	add	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	429a      	cmp	r2, r3
 800510c:	d80a      	bhi.n	8005124 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 8124 	beq.w	8005360 <lfs_bd_read+0x274>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800511c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800511e:	429a      	cmp	r2, r3
 8005120:	f0c0 811e 	bcc.w	8005360 <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 8005124:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8005128:	e11f      	b.n	800536a <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800512a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800512c:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d03f      	beq.n	80051b4 <lfs_bd_read+0xc8>
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800513a:	429a      	cmp	r2, r3
 800513c:	d13a      	bne.n	80051b4 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8005148:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800514a:	429a      	cmp	r2, r3
 800514c:	d232      	bcs.n	80051b4 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005154:	429a      	cmp	r2, r3
 8005156:	d324      	bcc.n	80051a2 <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	6859      	ldr	r1, [r3, #4]
 8005160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005162:	1acb      	subs	r3, r1, r3
 8005164:	4413      	add	r3, r2
 8005166:	4619      	mov	r1, r3
 8005168:	69b8      	ldr	r0, [r7, #24]
 800516a:	f7ff fee4 	bl	8004f36 <lfs_min>
 800516e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800517a:	1acb      	subs	r3, r1, r3
 800517c:	4413      	add	r3, r2
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4619      	mov	r1, r3
 8005182:	69f8      	ldr	r0, [r7, #28]
 8005184:	f007 ff08 	bl	800cf98 <memcpy>

                data += diff;
 8005188:	69fa      	ldr	r2, [r7, #28]
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	4413      	add	r3, r2
 800518e:	61fb      	str	r3, [r7, #28]
                off += diff;
 8005190:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	4413      	add	r3, r2
 8005196:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8005198:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 80051a0:	e0de      	b.n	8005360 <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	4619      	mov	r1, r3
 80051ac:	69b8      	ldr	r0, [r7, #24]
 80051ae:	f7ff fec2 	bl	8004f36 <lfs_min>
 80051b2:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d13a      	bne.n	8005234 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	4413      	add	r3, r2
        if (block == rcache->block &&
 80051c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d232      	bcs.n	8005234 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d324      	bcc.n	8005222 <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6859      	ldr	r1, [r3, #4]
 80051e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051e2:	1acb      	subs	r3, r1, r3
 80051e4:	4413      	add	r3, r2
 80051e6:	4619      	mov	r1, r3
 80051e8:	69b8      	ldr	r0, [r7, #24]
 80051ea:	f7ff fea4 	bl	8004f36 <lfs_min>
 80051ee:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80051fa:	1acb      	subs	r3, r1, r3
 80051fc:	4413      	add	r3, r2
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	4619      	mov	r1, r3
 8005202:	69f8      	ldr	r0, [r7, #28]
 8005204:	f007 fec8 	bl	800cf98 <memcpy>

                data += diff;
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	4413      	add	r3, r2
 800520e:	61fb      	str	r3, [r7, #28]
                off += diff;
 8005210:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	4413      	add	r3, r2
 8005216:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8005218:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8005220:	e09e      	b.n	8005360 <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	4619      	mov	r1, r3
 800522c:	69b8      	ldr	r0, [r7, #24]
 800522e:	f7ff fe82 	bl	8004f36 <lfs_min>
 8005232:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8005234:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d336      	bcc.n	80052aa <lfs_bd_read+0x1be>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005240:	695a      	ldr	r2, [r3, #20]
 8005242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005244:	fbb3 f1f2 	udiv	r1, r3, r2
 8005248:	fb01 f202 	mul.w	r2, r1, r2
 800524c:	1a9b      	subs	r3, r3, r2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d12b      	bne.n	80052aa <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005256:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8005258:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800525a:	429a      	cmp	r2, r3
 800525c:	d325      	bcc.n	80052aa <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	4619      	mov	r1, r3
 8005266:	69b8      	ldr	r0, [r7, #24]
 8005268:	f7ff fe75 	bl	8004f56 <lfs_aligndown>
 800526c:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005272:	685c      	ldr	r4, [r3, #4]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005280:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005282:	47a0      	blx	r4
 8005284:	6178      	str	r0, [r7, #20]
            if (err) {
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <lfs_bd_read+0x1a4>
                return err;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	e06c      	b.n	800536a <lfs_bd_read+0x27e>
            }

            data += diff;
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	4413      	add	r3, r2
 8005296:	61fb      	str	r3, [r7, #28]
            off += diff;
 8005298:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	4413      	add	r3, r2
 800529e:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 80052a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 80052a8:	e05a      	b.n	8005360 <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <lfs_bd_read+0x1dc>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d305      	bcc.n	80052c8 <lfs_bd_read+0x1dc>
 80052bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005374 <lfs_bd_read+0x288>)
 80052be:	4a2e      	ldr	r2, [pc, #184]	@ (8005378 <lfs_bd_read+0x28c>)
 80052c0:	216b      	movs	r1, #107	@ 0x6b
 80052c2:	482e      	ldr	r0, [pc, #184]	@ (800537c <lfs_bd_read+0x290>)
 80052c4:	f007 fb24 	bl	800c910 <__assert_func>
        rcache->block = block;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052cc:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	4619      	mov	r1, r3
 80052d6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80052d8:	f7ff fe3d 	bl	8004f56 <lfs_aligndown>
 80052dc:	4602      	mov	r2, r0
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 80052e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052ec:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 80052ee:	4619      	mov	r1, r3
 80052f0:	4610      	mov	r0, r2
 80052f2:	f7ff fe45 	bl	8004f80 <lfs_alignup>
 80052f6:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052fc:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 80052fe:	4619      	mov	r1, r3
 8005300:	4610      	mov	r0, r2
 8005302:	f7ff fe18 	bl	8004f36 <lfs_min>
 8005306:	4602      	mov	r2, r0
                - rcache->off,
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 800530c:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(
 8005314:	4619      	mov	r1, r3
 8005316:	4610      	mov	r0, r2
 8005318:	f7ff fe0d 	bl	8004f36 <lfs_min>
 800531c:	4602      	mov	r2, r0
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005326:	685c      	ldr	r4, [r3, #4]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6819      	ldr	r1, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	462b      	mov	r3, r5
 8005340:	47a0      	blx	r4
 8005342:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	dd05      	ble.n	8005356 <lfs_bd_read+0x26a>
 800534a:	4b0d      	ldr	r3, [pc, #52]	@ (8005380 <lfs_bd_read+0x294>)
 800534c:	4a0a      	ldr	r2, [pc, #40]	@ (8005378 <lfs_bd_read+0x28c>)
 800534e:	2176      	movs	r1, #118	@ 0x76
 8005350:	480a      	ldr	r0, [pc, #40]	@ (800537c <lfs_bd_read+0x290>)
 8005352:	f007 fadd 	bl	800c910 <__assert_func>
        if (err) {
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <lfs_bd_read+0x274>
            return err;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	e004      	b.n	800536a <lfs_bd_read+0x27e>
    while (size > 0) {
 8005360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005362:	2b00      	cmp	r3, #0
 8005364:	f47f aee1 	bne.w	800512a <lfs_bd_read+0x3e>
        }
    }

    return 0;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bdb0      	pop	{r4, r5, r7, pc}
 8005372:	bf00      	nop
 8005374:	0800e9ec 	.word	0x0800e9ec
 8005378:	0800f738 	.word	0x0800f738
 800537c:	0800ea1c 	.word	0x0800ea1c
 8005380:	0800ea34 	.word	0x0800ea34

08005384 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8005384:	b580      	push	{r7, lr}
 8005386:	b090      	sub	sp, #64	@ 0x40
 8005388:	af04      	add	r7, sp, #16
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8005392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005394:	62bb      	str	r3, [r7, #40]	@ 0x28
    lfs_size_t diff = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	627b      	str	r3, [r7, #36]	@ 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 800539a:	2300      	movs	r3, #0
 800539c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800539e:	e039      	b.n	8005414 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 80053a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2108      	movs	r1, #8
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff fdc4 	bl	8004f36 <lfs_min>
 80053ae:	6278      	str	r0, [r7, #36]	@ 0x24
        int err = lfs_bd_read(lfs,
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b4:	1ad1      	subs	r1, r2, r3
 80053b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80053b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ba:	4413      	add	r3, r2
 80053bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053be:	9203      	str	r2, [sp, #12]
 80053c0:	f107 0214 	add.w	r2, r7, #20
 80053c4:	9202      	str	r2, [sp, #8]
 80053c6:	9301      	str	r3, [sp, #4]
 80053c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	460b      	mov	r3, r1
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f7ff fe8a 	bl	80050ec <lfs_bd_read>
 80053d8:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <lfs_bd_cmp+0x60>
            return err;
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	e01c      	b.n	800541e <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 80053e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e8:	18d1      	adds	r1, r2, r3
 80053ea:	f107 0314 	add.w	r3, r7, #20
 80053ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053f0:	4618      	mov	r0, r3
 80053f2:	f007 fcf5 	bl	800cde0 <memcmp>
 80053f6:	61f8      	str	r0, [r7, #28]
        if (res) {
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d006      	beq.n	800540c <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	2b00      	cmp	r3, #0
 8005402:	da01      	bge.n	8005408 <lfs_bd_cmp+0x84>
 8005404:	2301      	movs	r3, #1
 8005406:	e00a      	b.n	800541e <lfs_bd_cmp+0x9a>
 8005408:	2302      	movs	r3, #2
 800540a:	e008      	b.n	800541e <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 800540c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005410:	4413      	add	r3, r2
 8005412:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005414:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005418:	429a      	cmp	r2, r3
 800541a:	d3c1      	bcc.n	80053a0 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3730      	adds	r7, #48	@ 0x30
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8005426:	b580      	push	{r7, lr}
 8005428:	b08e      	sub	sp, #56	@ 0x38
 800542a:	af04      	add	r7, sp, #16
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	607a      	str	r2, [r7, #4]
 8005432:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8005438:	2300      	movs	r3, #0
 800543a:	627b      	str	r3, [r7, #36]	@ 0x24
 800543c:	e030      	b.n	80054a0 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 800543e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2108      	movs	r1, #8
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff fd75 	bl	8004f36 <lfs_min>
 800544c:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005452:	1ad1      	subs	r1, r2, r3
 8005454:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	4413      	add	r3, r2
 800545a:	6a3a      	ldr	r2, [r7, #32]
 800545c:	9203      	str	r2, [sp, #12]
 800545e:	f107 0214 	add.w	r2, r7, #20
 8005462:	9202      	str	r2, [sp, #8]
 8005464:	9301      	str	r3, [sp, #4]
 8005466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	460b      	mov	r3, r1
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	68b9      	ldr	r1, [r7, #8]
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f7ff fe3b 	bl	80050ec <lfs_bd_read>
 8005476:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <lfs_bd_crc+0x5c>
            return err;
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	e013      	b.n	80054aa <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 8005482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f107 0114 	add.w	r1, r7, #20
 800548a:	6a3a      	ldr	r2, [r7, #32]
 800548c:	4618      	mov	r0, r3
 800548e:	f006 fc2d 	bl	800bcec <lfs_crc>
 8005492:	4602      	mov	r2, r0
 8005494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005496:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8005498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	4413      	add	r3, r2
 800549e:	627b      	str	r3, [r7, #36]	@ 0x24
 80054a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d3ca      	bcc.n	800543e <lfs_bd_crc+0x18>
    }

    return 0;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3728      	adds	r7, #40	@ 0x28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 80054b4:	b5b0      	push	{r4, r5, r7, lr}
 80054b6:	b08c      	sub	sp, #48	@ 0x30
 80054b8:	af04      	add	r7, sp, #16
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054ca:	d060      	beq.n	800558e <lfs_bd_flush+0xda>
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f113 0f02 	cmn.w	r3, #2
 80054d4:	d05b      	beq.n	800558e <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054de:	429a      	cmp	r2, r3
 80054e0:	d305      	bcc.n	80054ee <lfs_bd_flush+0x3a>
 80054e2:	4b2d      	ldr	r3, [pc, #180]	@ (8005598 <lfs_bd_flush+0xe4>)
 80054e4:	4a2d      	ldr	r2, [pc, #180]	@ (800559c <lfs_bd_flush+0xe8>)
 80054e6:	21b3      	movs	r1, #179	@ 0xb3
 80054e8:	482d      	ldr	r0, [pc, #180]	@ (80055a0 <lfs_bd_flush+0xec>)
 80054ea:	f007 fa11 	bl	800c910 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	689a      	ldr	r2, [r3, #8]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	4619      	mov	r1, r3
 80054fa:	4610      	mov	r0, r2
 80054fc:	f7ff fd40 	bl	8004f80 <lfs_alignup>
 8005500:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005506:	689c      	ldr	r4, [r3, #8]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	6819      	ldr	r1, [r3, #0]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	462b      	mov	r3, r5
 800551e:	47a0      	blx	r4
 8005520:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	2b00      	cmp	r3, #0
 8005526:	dd05      	ble.n	8005534 <lfs_bd_flush+0x80>
 8005528:	4b1e      	ldr	r3, [pc, #120]	@ (80055a4 <lfs_bd_flush+0xf0>)
 800552a:	4a1c      	ldr	r2, [pc, #112]	@ (800559c <lfs_bd_flush+0xe8>)
 800552c:	21b7      	movs	r1, #183	@ 0xb7
 800552e:	481c      	ldr	r0, [pc, #112]	@ (80055a0 <lfs_bd_flush+0xec>)
 8005530:	f007 f9ee 	bl	800c910 <__assert_func>
        if (err) {
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <lfs_bd_flush+0x8a>
            return err;
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	e028      	b.n	8005590 <lfs_bd_flush+0xdc>
        }

        if (validate) {
 800553e:	78fb      	ldrb	r3, [r7, #3]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d020      	beq.n	8005586 <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8005544:	6879      	ldr	r1, [r7, #4]
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f7ff fdab 	bl	80050a2 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8005554:	68b9      	ldr	r1, [r7, #8]
 8005556:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8005558:	69f8      	ldr	r0, [r7, #28]
 800555a:	9003      	str	r0, [sp, #12]
 800555c:	9102      	str	r1, [sp, #8]
 800555e:	9201      	str	r2, [sp, #4]
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	2100      	movs	r1, #0
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f7ff ff0b 	bl	8005384 <lfs_bd_cmp>
 800556e:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2b00      	cmp	r3, #0
 8005574:	da01      	bge.n	800557a <lfs_bd_flush+0xc6>
                return res;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	e00a      	b.n	8005590 <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 8005580:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8005584:	e004      	b.n	8005590 <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f7ff fd99 	bl	80050c0 <lfs_cache_zero>
    }

    return 0;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3720      	adds	r7, #32
 8005594:	46bd      	mov	sp, r7
 8005596:	bdb0      	pop	{r4, r5, r7, pc}
 8005598:	0800ea40 	.word	0x0800ea40
 800559c:	0800f744 	.word	0x0800f744
 80055a0:	0800ea1c 	.word	0x0800ea1c
 80055a4:	0800ea34 	.word	0x0800ea34

080055a8 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f7ff fd72 	bl	80050a2 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f7ff ff75 	bl	80054b4 <lfs_bd_flush>
 80055ca:	6178      	str	r0, [r7, #20]
    if (err) {
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <lfs_bd_sync+0x2e>
        return err;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	e011      	b.n	80055fa <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80055e0:	4610      	mov	r0, r2
 80055e2:	4798      	blx	r3
 80055e4:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	dd05      	ble.n	80055f8 <lfs_bd_sync+0x50>
 80055ec:	4b05      	ldr	r3, [pc, #20]	@ (8005604 <lfs_bd_sync+0x5c>)
 80055ee:	4a06      	ldr	r2, [pc, #24]	@ (8005608 <lfs_bd_sync+0x60>)
 80055f0:	21dd      	movs	r1, #221	@ 0xdd
 80055f2:	4806      	ldr	r0, [pc, #24]	@ (800560c <lfs_bd_sync+0x64>)
 80055f4:	f007 f98c 	bl	800c910 <__assert_func>
    return err;
 80055f8:	697b      	ldr	r3, [r7, #20]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	0800ea34 	.word	0x0800ea34
 8005608:	0800f754 	.word	0x0800f754
 800560c:	0800ea1c 	.word	0x0800ea1c

08005610 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 800561e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005620:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 8005622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005624:	f113 0f02 	cmn.w	r3, #2
 8005628:	d00a      	beq.n	8005640 <lfs_bd_prog+0x30>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800562e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005630:	429a      	cmp	r2, r3
 8005632:	d305      	bcc.n	8005640 <lfs_bd_prog+0x30>
 8005634:	4b48      	ldr	r3, [pc, #288]	@ (8005758 <lfs_bd_prog+0x148>)
 8005636:	4a49      	ldr	r2, [pc, #292]	@ (800575c <lfs_bd_prog+0x14c>)
 8005638:	21e8      	movs	r1, #232	@ 0xe8
 800563a:	4849      	ldr	r0, [pc, #292]	@ (8005760 <lfs_bd_prog+0x150>)
 800563c:	f007 f968 	bl	800c910 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8005640:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005644:	441a      	add	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	429a      	cmp	r2, r3
 800564e:	d97a      	bls.n	8005746 <lfs_bd_prog+0x136>
 8005650:	4b44      	ldr	r3, [pc, #272]	@ (8005764 <lfs_bd_prog+0x154>)
 8005652:	4a42      	ldr	r2, [pc, #264]	@ (800575c <lfs_bd_prog+0x14c>)
 8005654:	21e9      	movs	r1, #233	@ 0xe9
 8005656:	4842      	ldr	r0, [pc, #264]	@ (8005760 <lfs_bd_prog+0x150>)
 8005658:	f007 f95a 	bl	800c910 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005662:	429a      	cmp	r2, r3
 8005664:	d151      	bne.n	800570a <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 800566a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800566c:	429a      	cmp	r2, r3
 800566e:	d34c      	bcc.n	800570a <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567a:	4413      	add	r3, r2
                off >= pcache->off &&
 800567c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800567e:	429a      	cmp	r2, r3
 8005680:	d243      	bcs.n	800570a <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005686:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	6859      	ldr	r1, [r3, #4]
 800568c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800568e:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8005690:	4413      	add	r3, r2
 8005692:	4619      	mov	r1, r3
 8005694:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005696:	f7ff fc4e 	bl	8004f36 <lfs_min>
 800569a:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056a6:	1acb      	subs	r3, r1, r3
 80056a8:	4413      	add	r3, r2
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	69f9      	ldr	r1, [r7, #28]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f007 fc72 	bl	800cf98 <memcpy>

            data += diff;
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	4413      	add	r3, r2
 80056ba:	61fb      	str	r3, [r7, #28]
            off += diff;
 80056bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	4413      	add	r3, r2
 80056c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 80056c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	6898      	ldr	r0, [r3, #8]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	4619      	mov	r1, r3
 80056da:	f7ff fc1c 	bl	8004f16 <lfs_max>
 80056de:	4602      	mov	r2, r0
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d128      	bne.n	8005744 <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f7ff fedb 	bl	80054b4 <lfs_bd_flush>
 80056fe:	6178      	str	r0, [r7, #20]
                if (err) {
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d01e      	beq.n	8005744 <lfs_bd_prog+0x134>
                    return err;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	e021      	b.n	800574e <lfs_bd_prog+0x13e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005712:	d006      	beq.n	8005722 <lfs_bd_prog+0x112>
 8005714:	4b14      	ldr	r3, [pc, #80]	@ (8005768 <lfs_bd_prog+0x158>)
 8005716:	4a11      	ldr	r2, [pc, #68]	@ (800575c <lfs_bd_prog+0x14c>)
 8005718:	f44f 7183 	mov.w	r1, #262	@ 0x106
 800571c:	4810      	ldr	r0, [pc, #64]	@ (8005760 <lfs_bd_prog+0x150>)
 800571e:	f007 f8f7 	bl	800c910 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005726:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	4619      	mov	r1, r3
 8005730:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005732:	f7ff fc10 	bl	8004f56 <lfs_aligndown>
 8005736:	4602      	mov	r2, r0
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2200      	movs	r2, #0
 8005740:	609a      	str	r2, [r3, #8]
 8005742:	e000      	b.n	8005746 <lfs_bd_prog+0x136>
            continue;
 8005744:	bf00      	nop
    while (size > 0) {
 8005746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005748:	2b00      	cmp	r3, #0
 800574a:	d187      	bne.n	800565c <lfs_bd_prog+0x4c>
    }

    return 0;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3720      	adds	r7, #32
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	0800ea64 	.word	0x0800ea64
 800575c:	0800f760 	.word	0x0800f760
 8005760:	0800ea1c 	.word	0x0800ea1c
 8005764:	0800ea9c 	.word	0x0800ea9c
 8005768:	0800eac0 	.word	0x0800eac0

0800576c <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	429a      	cmp	r2, r3
 800577e:	d306      	bcc.n	800578e <lfs_bd_erase+0x22>
 8005780:	4b0f      	ldr	r3, [pc, #60]	@ (80057c0 <lfs_bd_erase+0x54>)
 8005782:	4a10      	ldr	r2, [pc, #64]	@ (80057c4 <lfs_bd_erase+0x58>)
 8005784:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8005788:	480f      	ldr	r0, [pc, #60]	@ (80057c8 <lfs_bd_erase+0x5c>)
 800578a:	f007 f8c1 	bl	800c910 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005798:	6839      	ldr	r1, [r7, #0]
 800579a:	4610      	mov	r0, r2
 800579c:	4798      	blx	r3
 800579e:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	dd06      	ble.n	80057b4 <lfs_bd_erase+0x48>
 80057a6:	4b09      	ldr	r3, [pc, #36]	@ (80057cc <lfs_bd_erase+0x60>)
 80057a8:	4a06      	ldr	r2, [pc, #24]	@ (80057c4 <lfs_bd_erase+0x58>)
 80057aa:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80057ae:	4806      	ldr	r0, [pc, #24]	@ (80057c8 <lfs_bd_erase+0x5c>)
 80057b0:	f007 f8ae 	bl	800c910 <__assert_func>
    return err;
 80057b4:	68fb      	ldr	r3, [r7, #12]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	0800eae4 	.word	0x0800eae4
 80057c4:	0800f76c 	.word	0x0800f76c
 80057c8:	0800ea1c 	.word	0x0800ea1c
 80057cc:	0800ea34 	.word	0x0800ea34

080057d0 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3304      	adds	r3, #4
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	601a      	str	r2, [r3, #0]
}
 80057ee:	bf00      	nop
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800580a:	d005      	beq.n	8005818 <lfs_pair_isnull+0x1e>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3304      	adds	r3, #4
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005816:	d101      	bne.n	800581c <lfs_pair_isnull+0x22>
 8005818:	2301      	movs	r3, #1
 800581a:	e000      	b.n	800581e <lfs_pair_isnull+0x24>
 800581c:	2300      	movs	r3, #0
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	b2db      	uxtb	r3, r3
}
 8005824:	4618      	mov	r0, r3
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	429a      	cmp	r2, r3
 8005844:	d017      	beq.n	8005876 <lfs_pair_cmp+0x46>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3304      	adds	r3, #4
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	3304      	adds	r3, #4
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	429a      	cmp	r2, r3
 8005854:	d00f      	beq.n	8005876 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	3304      	adds	r3, #4
 800585e:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8005860:	429a      	cmp	r2, r3
 8005862:	d008      	beq.n	8005876 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3304      	adds	r3, #4
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800586e:	429a      	cmp	r2, r3
 8005870:	d001      	beq.n	8005876 <lfs_pair_cmp+0x46>
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <lfs_pair_cmp+0x48>
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d107      	bne.n	80058aa <lfs_pair_issync+0x26>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	3304      	adds	r3, #4
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	3304      	adds	r3, #4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d00d      	beq.n	80058c6 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	3304      	adds	r3, #4
 80058b2:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d108      	bne.n	80058ca <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3304      	adds	r3, #4
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d101      	bne.n	80058ca <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80058c6:	2301      	movs	r3, #1
 80058c8:	e000      	b.n	80058cc <lfs_pair_issync+0x48>
 80058ca:	2300      	movs	r3, #0
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	b2db      	uxtb	r3, r3
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 80058de:	b590      	push	{r4, r7, lr}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff fb93 	bl	8005016 <lfs_fromle32>
 80058f0:	4602      	mov	r2, r0
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3304      	adds	r3, #4
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	1d1c      	adds	r4, r3, #4
 8005900:	4610      	mov	r0, r2
 8005902:	f7ff fb88 	bl	8005016 <lfs_fromle32>
 8005906:	4603      	mov	r3, r0
 8005908:	6023      	str	r3, [r4, #0]
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	bd90      	pop	{r4, r7, pc}

08005912 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8005912:	b590      	push	{r4, r7, lr}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff fb84 	bl	800502c <lfs_tole32>
 8005924:	4602      	mov	r2, r0
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3304      	adds	r3, #4
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	1d1c      	adds	r4, r3, #4
 8005934:	4610      	mov	r0, r2
 8005936:	f7ff fb79 	bl	800502c <lfs_tole32>
 800593a:	4603      	mov	r3, r0
 800593c:	6023      	str	r3, [r4, #0]
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	bd90      	pop	{r4, r7, pc}

08005946 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	43db      	mvns	r3, r3
 8005952:	0fdb      	lsrs	r3, r3, #31
 8005954:	b2db      	uxtb	r3, r3
}
 8005956:	4618      	mov	r0, r3
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	059b      	lsls	r3, r3, #22
 800596e:	159b      	asrs	r3, r3, #22
 8005970:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005974:	bf0c      	ite	eq
 8005976:	2301      	moveq	r3, #1
 8005978:	2300      	movne	r3, #0
 800597a:	b2db      	uxtb	r3, r3
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	0d1b      	lsrs	r3, r3, #20
 8005994:	b29b      	uxth	r3, r3
 8005996:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800599a:	b29b      	uxth	r3, r3
}
 800599c:	4618      	mov	r0, r3
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	0d1b      	lsrs	r3, r3, #20
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
 80059ba:	b29b      	uxth	r3, r3
}
 80059bc:	4618      	mov	r0, r3
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	0d1b      	lsrs	r3, r3, #20
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059da:	b29b      	uxth	r3, r3
}
 80059dc:	4618      	mov	r0, r3
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	0d1b      	lsrs	r3, r3, #20
 80059f4:	b2db      	uxtb	r3, r3
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff ffec 	bl	80059e8 <lfs_tag_chunk>
 8005a10:	4603      	mov	r3, r0
 8005a12:	b25b      	sxtb	r3, r3
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	0a9b      	lsrs	r3, r3, #10
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a2e:	b29b      	uxth	r3, r3
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff ff7f 	bl	8005962 <lfs_tag_isdelete>
 8005a64:	4603      	mov	r3, r0
 8005a66:	461a      	mov	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff ffe5 	bl	8005a3c <lfs_tag_size>
 8005a72:	4603      	mov	r3, r0
 8005a74:	3304      	adds	r3, #4
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8005a7e:	b480      	push	{r7}
 8005a80:	b085      	sub	sp, #20
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	e012      	b.n	8005ab4 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	4413      	add	r3, r2
 8005a96:	6819      	ldr	r1, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	4403      	add	r3, r0
 8005aaa:	404a      	eors	r2, r1
 8005aac:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	dde9      	ble.n	8005a8e <lfs_gstate_xor+0x10>
    }
}
 8005aba:	bf00      	nop
 8005abc:	bf00      	nop
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	e00b      	b.n	8005aee <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	4413      	add	r3, r2
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <lfs_gstate_iszero+0x20>
            return false;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e006      	b.n	8005af6 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3301      	adds	r3, #1
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	ddf0      	ble.n	8005ad6 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8005af4:	2301      	movs	r3, #1
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b082      	sub	sp, #8
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff ff94 	bl	8005a3c <lfs_tag_size>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	bf14      	ite	ne
 8005b1a:	2301      	movne	r3, #1
 8005b1c:	2300      	moveq	r3, #0
 8005b1e:	b2db      	uxtb	r3, r3
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff ff81 	bl	8005a3c <lfs_tag_size>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	b2db      	uxtb	r3, r3
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b082      	sub	sp, #8
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff ff18 	bl	8005988 <lfs_tag_type1>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	bf14      	ite	ne
 8005b5e:	2301      	movne	r3, #1
 8005b60:	2300      	moveq	r3, #0
 8005b62:	b2db      	uxtb	r3, r3
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff ff5f 	bl	8005a3c <lfs_tag_size>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	0a5b      	lsrs	r3, r3, #9
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	bf14      	ite	ne
 8005b86:	2301      	movne	r3, #1
 8005b88:	2300      	moveq	r3, #0
 8005b8a:	b2db      	uxtb	r3, r3
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff fef0 	bl	8005988 <lfs_tag_type1>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <lfs_gstate_hasmovehere+0x30>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	6839      	ldr	r1, [r7, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7ff fe3b 	bl	8005830 <lfs_pair_cmp>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <lfs_gstate_hasmovehere+0x30>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e000      	b.n	8005bc6 <lfs_gstate_hasmovehere+0x32>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	b2db      	uxtb	r3, r3
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7ff fa18 	bl	8005016 <lfs_fromle32>
 8005be6:	4602      	mov	r2, r0
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff fa10 	bl	8005016 <lfs_fromle32>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff fa08 	bl	8005016 <lfs_fromle32>
 8005c06:	4602      	mov	r2, r0
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	609a      	str	r2, [r3, #8]
}
 8005c0c:	bf00      	nop
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff fa03 	bl	800502c <lfs_tole32>
 8005c26:	4602      	mov	r2, r0
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff f9fb 	bl	800502c <lfs_tole32>
 8005c36:	4602      	mov	r2, r0
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff f9f3 	bl	800502c <lfs_tole32>
 8005c46:	4602      	mov	r2, r0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	609a      	str	r2, [r3, #8]
}
 8005c4c:	bf00      	nop
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff f9d8 	bl	8005016 <lfs_fromle32>
 8005c66:	4602      	mov	r2, r0
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff f9d0 	bl	8005016 <lfs_fromle32>
 8005c76:	4602      	mov	r2, r0
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	605a      	str	r2, [r3, #4]
}
 8005c7c:	bf00      	nop
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff f9cb 	bl	800502c <lfs_tole32>
 8005c96:	4602      	mov	r2, r0
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff f9c3 	bl	800502c <lfs_tole32>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	605a      	str	r2, [r3, #4]
}
 8005cac:	bf00      	nop
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7ff f9a8 	bl	8005016 <lfs_fromle32>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff f9a0 	bl	8005016 <lfs_fromle32>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	605a      	str	r2, [r3, #4]
}
 8005cdc:	bf00      	nop
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff f99b 	bl	800502c <lfs_tole32>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff f993 	bl	800502c <lfs_tole32>
 8005d06:	4602      	mov	r2, r0
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	605a      	str	r2, [r3, #4]
}
 8005d0c:	bf00      	nop
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff f978 	bl	8005016 <lfs_fromle32>
 8005d26:	4602      	mov	r2, r0
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff f970 	bl	8005016 <lfs_fromle32>
 8005d36:	4602      	mov	r2, r0
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff f968 	bl	8005016 <lfs_fromle32>
 8005d46:	4602      	mov	r2, r0
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff f960 	bl	8005016 <lfs_fromle32>
 8005d56:	4602      	mov	r2, r0
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff f958 	bl	8005016 <lfs_fromle32>
 8005d66:	4602      	mov	r2, r0
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7ff f950 	bl	8005016 <lfs_fromle32>
 8005d76:	4602      	mov	r2, r0
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	615a      	str	r2, [r3, #20]
}
 8005d7c:	bf00      	nop
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7ff f94b 	bl	800502c <lfs_tole32>
 8005d96:	4602      	mov	r2, r0
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff f943 	bl	800502c <lfs_tole32>
 8005da6:	4602      	mov	r2, r0
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7ff f93b 	bl	800502c <lfs_tole32>
 8005db6:	4602      	mov	r2, r0
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff f933 	bl	800502c <lfs_tole32>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7ff f92b 	bl	800502c <lfs_tole32>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7ff f923 	bl	800502c <lfs_tole32>
 8005de6:	4602      	mov	r2, r0
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	615a      	str	r2, [r3, #20]
}
 8005dec:	bf00      	nop
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8005dfe:	1d3b      	adds	r3, r7, #4
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	e009      	b.n	8005e18 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d101      	bne.n	8005e12 <lfs_mlist_isopen+0x1e>
            return true;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e007      	b.n	8005e22 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1f1      	bne.n	8005e04 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8005e2e:	b480      	push	{r7}
 8005e30:	b085      	sub	sp, #20
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
 8005e36:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3328      	adds	r3, #40	@ 0x28
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	e00d      	b.n	8005e5c <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d105      	bne.n	8005e56 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	601a      	str	r2, [r3, #0]
            break;
 8005e54:	e007      	b.n	8005e66 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1ed      	bne.n	8005e40 <lfs_mlist_remove+0x12>
        }
    }
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
	...

08005e98 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 8005ea0:	4b03      	ldr	r3, [pc, #12]	@ (8005eb0 <lfs_fs_disk_version+0x18>)
    }
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	00020001 	.word	0x00020001

08005eb4 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff ffeb 	bl	8005e98 <lfs_fs_disk_version>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	0c1b      	lsrs	r3, r3, #16
 8005ec6:	b29b      	uxth	r3, r3

}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff ffdd 	bl	8005e98 <lfs_fs_disk_version>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	b29b      	uxth	r3, r3
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8005efa:	bf00      	nop
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b082      	sub	sp, #8
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->lookahead.next = 0;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff ffe5 	bl	8005eea <lfs_alloc_ckpoint>
}
 8005f20:	bf00      	nop
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f42:	4413      	add	r3, r2
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 8005f48:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f4c:	fb01 f202 	mul.w	r2, r1, r2
 8005f50:	1a9b      	subs	r3, r3, r2
 8005f52:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d212      	bcs.n	8005f84 <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	08db      	lsrs	r3, r3, #3
 8005f66:	441a      	add	r2, r3
 8005f68:	7811      	ldrb	r1, [r2, #0]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	f002 0207 	and.w	r2, r2, #7
 8005f70:	2001      	movs	r0, #1
 8005f72:	fa00 f202 	lsl.w	r2, r0, r2
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8005f7c:	4403      	add	r3, r0
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
	...

08005f94 <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fa4:	4413      	add	r3, r2
            % lfs->block_count;
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8005faa:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fae:	fb01 f202 	mul.w	r2, r1, r2
 8005fb2:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs->lookahead.next = 0;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    lfs->lookahead.size = lfs_min(
 8005fc4:	00da      	lsls	r2, r3, #3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4610      	mov	r0, r2
 8005fce:	f7fe ffb2 	bl	8004f36 <lfs_min>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	659a      	str	r2, [r3, #88]	@ 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	f006 ff0b 	bl	800ce00 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 8005fea:	2301      	movs	r3, #1
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	4909      	ldr	r1, [pc, #36]	@ (8006014 <lfs_alloc_scan+0x80>)
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f004 ff15 	bl	800ae20 <lfs_fs_traverse_>
 8005ff6:	60f8      	str	r0, [r7, #12]
    if (err) {
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d004      	beq.n	8006008 <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7ff ff81 	bl	8005f06 <lfs_alloc_drop>
        return err;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	e000      	b.n	800600a <lfs_alloc_scan+0x76>
    }

    return 0;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	08005f29 	.word	0x08005f29

08006018 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af02      	add	r7, sp, #8
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 8006022:	e04d      	b.n	80060c0 <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800602c:	08db      	lsrs	r3, r3, #3
 800602e:	4413      	add	r3, r2
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006038:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800603c:	fa22 f303 	lsr.w	r3, r2, r3
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d131      	bne.n	80060ac <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006050:	4413      	add	r3, r2
                        % lfs->block_count;
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8006056:	fbb3 f1f2 	udiv	r1, r3, r2
 800605a:	fb01 f202 	mul.w	r2, r1, r2
 800605e:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006072:	1e5a      	subs	r2, r3, #1
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	661a      	str	r2, [r3, #96]	@ 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006080:	429a      	cmp	r2, r3
 8006082:	d211      	bcs.n	80060a8 <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800608c:	08db      	lsrs	r3, r3, #3
 800608e:	4413      	add	r3, r2
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006098:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800609c:	fa22 f303 	lsr.w	r3, r2, r3
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1dd      	bne.n	8006064 <lfs_alloc+0x4c>
                        return 0;
 80060a8:	2300      	movs	r3, #0
 80060aa:	e032      	b.n	8006112 <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ba:	1e5a      	subs	r2, r3, #1
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	661a      	str	r2, [r3, #96]	@ 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d3ab      	bcc.n	8006024 <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d116      	bne.n	8006102 <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060dc:	4413      	add	r3, r2
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80060e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80060e6:	fb01 f202 	mul.w	r2, r1, r2
 80060ea:	1a9b      	subs	r3, r3, r2
 80060ec:	4a0b      	ldr	r2, [pc, #44]	@ (800611c <lfs_alloc+0x104>)
 80060ee:	9200      	str	r2, [sp, #0]
 80060f0:	f240 22b1 	movw	r2, #689	@ 0x2b1
 80060f4:	490a      	ldr	r1, [pc, #40]	@ (8006120 <lfs_alloc+0x108>)
 80060f6:	480b      	ldr	r0, [pc, #44]	@ (8006124 <lfs_alloc+0x10c>)
 80060f8:	f006 fe60 	bl	800cdbc <iprintf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 80060fc:	f06f 031b 	mvn.w	r3, #27
 8006100:	e007      	b.n	8006112 <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff ff46 	bl	8005f94 <lfs_alloc_scan>
 8006108:	60f8      	str	r0, [r7, #12]
        if(err) {
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d088      	beq.n	8006022 <lfs_alloc+0xa>
            return err;
 8006110:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	0800eb2c 	.word	0x0800eb2c
 8006120:	0800ea1c 	.word	0x0800ea1c
 8006124:	0800eb00 	.word	0x0800eb00

08006128 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8006128:	b590      	push	{r4, r7, lr}
 800612a:	b08f      	sub	sp, #60	@ 0x3c
 800612c:	af04      	add	r7, sp, #16
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	333c      	adds	r3, #60	@ 0x3c
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	4611      	mov	r1, r2
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fd20 	bl	8005b94 <lfs_gstate_hasmovehere>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 80ca 	beq.w	80062f0 <lfs_dir_getslice+0x1c8>
            lfs_tag_id(gmask) != 0) {
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff fc5d 	bl	8005a1c <lfs_tag_id>
 8006162:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 80c3 	beq.w	80062f0 <lfs_dir_getslice+0x1c8>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff fc54 	bl	8005a1c <lfs_tag_id>
 8006174:	4603      	mov	r3, r0
 8006176:	461c      	mov	r4, r3
 8006178:	6838      	ldr	r0, [r7, #0]
 800617a:	f7ff fc4f 	bl	8005a1c <lfs_tag_id>
 800617e:	4603      	mov	r3, r0
 8006180:	429c      	cmp	r4, r3
 8006182:	d102      	bne.n	800618a <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 8006184:	f06f 0301 	mvn.w	r3, #1
 8006188:	e0be      	b.n	8006308 <lfs_dir_getslice+0x1e0>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff fc44 	bl	8005a1c <lfs_tag_id>
 8006194:	4603      	mov	r3, r0
 8006196:	461c      	mov	r4, r3
 8006198:	6838      	ldr	r0, [r7, #0]
 800619a:	f7ff fc3f 	bl	8005a1c <lfs_tag_id>
 800619e:	4603      	mov	r3, r0
 80061a0:	429c      	cmp	r4, r3
 80061a2:	f080 80a5 	bcs.w	80062f0 <lfs_dir_getslice+0x1c8>
            gdiff -= LFS_MKTAG(0, 1, 0);
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80061ac:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80061ae:	e09f      	b.n	80062f0 <lfs_dir_getslice+0x1c8>
        off -= lfs_tag_dsize(ntag);
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7ff fc4f 	bl	8005a56 <lfs_tag_dsize>
 80061b8:	4602      	mov	r2, r0
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	1a9b      	subs	r3, r3, r2
 80061be:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 80061c4:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 80061ca:	2204      	movs	r2, #4
 80061cc:	9203      	str	r2, [sp, #12]
 80061ce:	f107 0210 	add.w	r2, r7, #16
 80061d2:	9202      	str	r2, [sp, #8]
 80061d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061d6:	9201      	str	r2, [sp, #4]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	2304      	movs	r3, #4
 80061dc:	460a      	mov	r2, r1
 80061de:	2100      	movs	r1, #0
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f7fe ff83 	bl	80050ec <lfs_bd_read>
 80061e6:	61b8      	str	r0, [r7, #24]
        if (err) {
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <lfs_dir_getslice+0xca>
            return err;
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	e08a      	b.n	8006308 <lfs_dir_getslice+0x1e0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fe ff25 	bl	8005044 <lfs_frombe32>
 80061fa:	4602      	mov	r2, r0
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	4053      	eors	r3, r2
 8006200:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006204:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7ff fc08 	bl	8005a1c <lfs_tag_id>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d02b      	beq.n	800626a <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8006212:	69f8      	ldr	r0, [r7, #28]
 8006214:	f7ff fbb8 	bl	8005988 <lfs_tag_type1>
 8006218:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800621a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800621e:	d124      	bne.n	800626a <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8006220:	69f8      	ldr	r0, [r7, #28]
 8006222:	f7ff fbfb 	bl	8005a1c <lfs_tag_id>
 8006226:	4603      	mov	r3, r0
 8006228:	461c      	mov	r4, r3
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	4618      	mov	r0, r3
 8006232:	f7ff fbf3 	bl	8005a1c <lfs_tag_id>
 8006236:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8006238:	429c      	cmp	r4, r3
 800623a:	d816      	bhi.n	800626a <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	1ad2      	subs	r2, r2, r3
 8006242:	4b33      	ldr	r3, [pc, #204]	@ (8006310 <lfs_dir_getslice+0x1e8>)
 8006244:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8006246:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800624a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800624e:	69fa      	ldr	r2, [r7, #28]
 8006250:	429a      	cmp	r2, r3
 8006252:	d102      	bne.n	800625a <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 8006254:	f06f 0301 	mvn.w	r3, #1
 8006258:	e056      	b.n	8006308 <lfs_dir_getslice+0x1e0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800625a:	69f8      	ldr	r0, [r7, #28]
 800625c:	f7ff fbd1 	bl	8005a02 <lfs_tag_splice>
 8006260:	4603      	mov	r3, r0
 8006262:	029a      	lsls	r2, r3, #10
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	4413      	add	r3, r2
 8006268:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	401a      	ands	r2, r3
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	1ac9      	subs	r1, r1, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	400b      	ands	r3, r1
 800627a:	429a      	cmp	r2, r3
 800627c:	d138      	bne.n	80062f0 <lfs_dir_getslice+0x1c8>
            if (lfs_tag_isdelete(tag)) {
 800627e:	69f8      	ldr	r0, [r7, #28]
 8006280:	f7ff fb6f 	bl	8005962 <lfs_tag_isdelete>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <lfs_dir_getslice+0x168>
                return LFS_ERR_NOENT;
 800628a:	f06f 0301 	mvn.w	r3, #1
 800628e:	e03b      	b.n	8006308 <lfs_dir_getslice+0x1e0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8006290:	69f8      	ldr	r0, [r7, #28]
 8006292:	f7ff fbd3 	bl	8005a3c <lfs_tag_size>
 8006296:	4603      	mov	r3, r0
 8006298:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800629a:	4618      	mov	r0, r3
 800629c:	f7fe fe4b 	bl	8004f36 <lfs_min>
 80062a0:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 80062a2:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062ac:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 80062ae:	3204      	adds	r2, #4
 80062b0:	6979      	ldr	r1, [r7, #20]
 80062b2:	9103      	str	r1, [sp, #12]
 80062b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062b6:	9102      	str	r1, [sp, #8]
 80062b8:	9201      	str	r2, [sp, #4]
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	4602      	mov	r2, r0
 80062c0:	2100      	movs	r1, #0
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f7fe ff12 	bl	80050ec <lfs_bd_read>
 80062c8:	61b8      	str	r0, [r7, #24]
            if (err) {
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <lfs_dir_getslice+0x1ac>
                return err;
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	e019      	b.n	8006308 <lfs_dir_getslice+0x1e0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 80062d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	18d0      	adds	r0, r2, r3
 80062da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	461a      	mov	r2, r3
 80062e2:	2100      	movs	r1, #0
 80062e4:	f006 fd8c 	bl	800ce00 <memset>

            return tag + gdiff;
 80062e8:	6a3a      	ldr	r2, [r7, #32]
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	4413      	add	r3, r2
 80062ee:	e00b      	b.n	8006308 <lfs_dir_getslice+0x1e0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff fbaf 	bl	8005a56 <lfs_tag_dsize>
 80062f8:	4603      	mov	r3, r0
 80062fa:	3304      	adds	r3, #4
 80062fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062fe:	429a      	cmp	r2, r3
 8006300:	f4bf af56 	bcs.w	80061b0 <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 8006304:	f06f 0301 	mvn.w	r3, #1
}
 8006308:	4618      	mov	r0, r3
 800630a:	372c      	adds	r7, #44	@ 0x2c
 800630c:	46bd      	mov	sp, r7
 800630e:	bd90      	pop	{r4, r7, pc}
 8006310:	000ffc00 	.word	0x000ffc00

08006314 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8006314:	b580      	push	{r7, lr}
 8006316:	b088      	sub	sp, #32
 8006318:	af04      	add	r7, sp, #16
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8006322:	6838      	ldr	r0, [r7, #0]
 8006324:	f7ff fb8a 	bl	8005a3c <lfs_tag_size>
 8006328:	4603      	mov	r3, r0
 800632a:	9302      	str	r3, [sp, #8]
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	9301      	str	r3, [sp, #4]
 8006330:	2300      	movs	r3, #0
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	68b9      	ldr	r1, [r7, #8]
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f7ff fef4 	bl	8006128 <lfs_dir_getslice>
 8006340:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800634a:	b580      	push	{r7, lr}
 800634c:	b08c      	sub	sp, #48	@ 0x30
 800634e:	af04      	add	r7, sp, #16
 8006350:	60f8      	str	r0, [r7, #12]
 8006352:	60b9      	str	r1, [r7, #8]
 8006354:	607a      	str	r2, [r7, #4]
 8006356:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8006358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635a:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 800635c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800635e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006360:	441a      	add	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	429a      	cmp	r2, r3
 800636a:	f240 80c0 	bls.w	80064ee <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800636e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8006372:	e0c1      	b.n	80064f8 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8006374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006376:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d03f      	beq.n	80063fe <lfs_dir_getread+0xb4>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f113 0f02 	cmn.w	r3, #2
 8006386:	d13a      	bne.n	80063fe <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8006392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006394:	429a      	cmp	r2, r3
 8006396:	d232      	bcs.n	80063fe <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800639e:	429a      	cmp	r2, r3
 80063a0:	d324      	bcc.n	80063ec <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6859      	ldr	r1, [r3, #4]
 80063aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ac:	1acb      	subs	r3, r1, r3
 80063ae:	4413      	add	r3, r2
 80063b0:	4619      	mov	r1, r3
 80063b2:	69b8      	ldr	r0, [r7, #24]
 80063b4:	f7fe fdbf 	bl	8004f36 <lfs_min>
 80063b8:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80063c4:	1acb      	subs	r3, r1, r3
 80063c6:	4413      	add	r3, r2
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	4619      	mov	r1, r3
 80063cc:	69f8      	ldr	r0, [r7, #28]
 80063ce:	f006 fde3 	bl	800cf98 <memcpy>

                data += diff;
 80063d2:	69fa      	ldr	r2, [r7, #28]
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	4413      	add	r3, r2
 80063d8:	61fb      	str	r3, [r7, #28]
                off += diff;
 80063da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	4413      	add	r3, r2
 80063e0:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 80063e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 80063ea:	e080      	b.n	80064ee <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	4619      	mov	r1, r3
 80063f6:	69b8      	ldr	r0, [r7, #24]
 80063f8:	f7fe fd9d 	bl	8004f36 <lfs_min>
 80063fc:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f113 0f02 	cmn.w	r3, #2
 8006406:	d13a      	bne.n	800647e <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8006412:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006414:	429a      	cmp	r2, r3
 8006416:	d232      	bcs.n	800647e <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800641e:	429a      	cmp	r2, r3
 8006420:	d324      	bcc.n	800646c <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	6859      	ldr	r1, [r3, #4]
 800642a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800642c:	1acb      	subs	r3, r1, r3
 800642e:	4413      	add	r3, r2
 8006430:	4619      	mov	r1, r3
 8006432:	69b8      	ldr	r0, [r7, #24]
 8006434:	f7fe fd7f 	bl	8004f36 <lfs_min>
 8006438:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006444:	1acb      	subs	r3, r1, r3
 8006446:	4413      	add	r3, r2
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	4619      	mov	r1, r3
 800644c:	69f8      	ldr	r0, [r7, #28]
 800644e:	f006 fda3 	bl	800cf98 <memcpy>

                data += diff;
 8006452:	69fa      	ldr	r2, [r7, #28]
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	4413      	add	r3, r2
 8006458:	61fb      	str	r3, [r7, #28]
                off += diff;
 800645a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	4413      	add	r3, r2
 8006460:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8006462:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800646a:	e040      	b.n	80064ee <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	4619      	mov	r1, r3
 8006476:	69b8      	ldr	r0, [r7, #24]
 8006478:	f7fe fd5d 	bl	8004f36 <lfs_min>
 800647c:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	f06f 0201 	mvn.w	r2, #1
 8006484:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	4619      	mov	r1, r3
 800648e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006490:	f7fe fd61 	bl	8004f56 <lfs_aligndown>
 8006494:	4602      	mov	r2, r0
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800649a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800649c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649e:	441a      	add	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	4619      	mov	r1, r3
 80064a8:	4610      	mov	r0, r2
 80064aa:	f7fe fd69 	bl	8004f80 <lfs_alignup>
 80064ae:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 80064b6:	4619      	mov	r1, r3
 80064b8:	4610      	mov	r0, r2
 80064ba:	f7fe fd3c 	bl	8004f36 <lfs_min>
 80064be:	4602      	mov	r2, r0
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6889      	ldr	r1, [r1, #8]
 80064d0:	9102      	str	r1, [sp, #8]
 80064d2:	9201      	str	r2, [sp, #4]
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064da:	68b9      	ldr	r1, [r7, #8]
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f7ff fe23 	bl	8006128 <lfs_dir_getslice>
 80064e2:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	da01      	bge.n	80064ee <lfs_dir_getread+0x1a4>
            return err;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	e004      	b.n	80064f8 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 80064ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f47f af3f 	bne.w	8006374 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3720      	adds	r7, #32
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8006500:	b590      	push	{r4, r7, lr}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <lfs_dir_traverse_filter+0x1e>
 800651a:	4b24      	ldr	r3, [pc, #144]	@ (80065ac <lfs_dir_traverse_filter+0xac>)
 800651c:	e000      	b.n	8006520 <lfs_dir_traverse_filter+0x20>
 800651e:	4b24      	ldr	r3, [pc, #144]	@ (80065b0 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8006520:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	405a      	eors	r2, r3
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	4013      	ands	r3, r2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d014      	beq.n	800655c <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff fa13 	bl	8005962 <lfs_tag_isdelete>
 800653c:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10c      	bne.n	800655c <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	4a19      	ldr	r2, [pc, #100]	@ (80065ac <lfs_dir_traverse_filter+0xac>)
 8006546:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	6819      	ldr	r1, [r3, #0]
 800654c:	4b19      	ldr	r3, [pc, #100]	@ (80065b4 <lfs_dir_traverse_filter+0xb4>)
 800654e:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8006550:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8006554:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8006558:	429a      	cmp	r2, r3
 800655a:	d104      	bne.n	8006566 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]
        return true;
 8006562:	2301      	movs	r3, #1
 8006564:	e01e      	b.n	80065a4 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8006566:	68b8      	ldr	r0, [r7, #8]
 8006568:	f7ff fa0e 	bl	8005988 <lfs_tag_type1>
 800656c:	4603      	mov	r3, r0
 800656e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006572:	d116      	bne.n	80065a2 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8006574:	68b8      	ldr	r0, [r7, #8]
 8006576:	f7ff fa51 	bl	8005a1c <lfs_tag_id>
 800657a:	4603      	mov	r3, r0
 800657c:	461c      	mov	r4, r3
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff fa4a 	bl	8005a1c <lfs_tag_id>
 8006588:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800658a:	429c      	cmp	r4, r3
 800658c:	d809      	bhi.n	80065a2 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800658e:	68b8      	ldr	r0, [r7, #8]
 8006590:	f7ff fa37 	bl	8005a02 <lfs_tag_splice>
 8006594:	4603      	mov	r3, r0
 8006596:	029a      	lsls	r2, r3, #10
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	441a      	add	r2, r3
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	601a      	str	r2, [r3, #0]
    }

    return false;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd90      	pop	{r4, r7, pc}
 80065ac:	7ffffc00 	.word	0x7ffffc00
 80065b0:	700ffc00 	.word	0x700ffc00
 80065b4:	000ffc00 	.word	0x000ffc00

080065b8 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80065b8:	b590      	push	{r4, r7, lr}
 80065ba:	b0c1      	sub	sp, #260	@ 0x104
 80065bc:	af04      	add	r7, sp, #16
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 80065cc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 80065d6:	6838      	ldr	r0, [r7, #0]
 80065d8:	f7ff fa3d 	bl	8005a56 <lfs_tag_dsize>
 80065dc:	4602      	mov	r2, r0
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	441a      	add	r2, r3
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d237      	bcs.n	800665a <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 80065ea:	6838      	ldr	r0, [r7, #0]
 80065ec:	f7ff fa33 	bl	8005a56 <lfs_tag_dsize>
 80065f0:	4602      	mov	r2, r0
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4413      	add	r3, r2
 80065f6:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 80065f8:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 80065fe:	2204      	movs	r2, #4
 8006600:	9203      	str	r2, [sp, #12]
 8006602:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8006606:	9202      	str	r2, [sp, #8]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	9201      	str	r2, [sp, #4]
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	2304      	movs	r3, #4
 8006610:	460a      	mov	r2, r1
 8006612:	2100      	movs	r1, #0
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f7fe fd69 	bl	80050ec <lfs_bd_read>
 800661a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 800661e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <lfs_dir_traverse+0x74>
                    return err;
 8006626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800662a:	e3a5      	b.n	8006d78 <lfs_dir_traverse+0x7c0>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800662c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800662e:	4618      	mov	r0, r3
 8006630:	f7fe fd08 	bl	8005044 <lfs_frombe32>
 8006634:	4602      	mov	r2, r0
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	4053      	eors	r3, r2
 800663a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800663e:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	3304      	adds	r3, #4
 800664a:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 800664c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006650:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 8006654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006656:	603b      	str	r3, [r7, #0]
 8006658:	e01b      	b.n	8006692 <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 800665a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800665e:	2b00      	cmp	r3, #0
 8006660:	dd13      	ble.n	800668a <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 8006662:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 800666a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 8006674:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006678:	3308      	adds	r3, #8
 800667a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 800667e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006682:	3b01      	subs	r3, #1
 8006684:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006688:	e003      	b.n	8006692 <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 800668a:	2300      	movs	r3, #0
 800668c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 8006690:	e2a1      	b.n	8006bd6 <lfs_dir_traverse+0x61e>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8006692:	4b7e      	ldr	r3, [pc, #504]	@ (800688c <lfs_dir_traverse+0x2d4>)
 8006694:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8006698:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800669a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800669e:	405a      	eors	r2, r3
 80066a0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 80066a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80066a8:	400b      	ands	r3, r1
 80066aa:	4013      	ands	r3, r2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f040 8284 	bne.w	8006bba <lfs_dir_traverse+0x602>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 80066b2:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80066b6:	f7ff f9b1 	bl	8005a1c <lfs_tag_id>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 80ef 	beq.w	80068a0 <lfs_dir_traverse+0x2e8>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 80066c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d906      	bls.n	80066d8 <lfs_dir_traverse+0x120>
 80066ca:	4b71      	ldr	r3, [pc, #452]	@ (8006890 <lfs_dir_traverse+0x2d8>)
 80066cc:	4a71      	ldr	r2, [pc, #452]	@ (8006894 <lfs_dir_traverse+0x2dc>)
 80066ce:	f240 31b6 	movw	r1, #950	@ 0x3b6
 80066d2:	4871      	ldr	r0, [pc, #452]	@ (8006898 <lfs_dir_traverse+0x2e0>)
 80066d4:	f006 f91c 	bl	800c910 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 80066d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066da:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80066de:	4613      	mov	r3, r2
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	1a9b      	subs	r3, r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	33f0      	adds	r3, #240	@ 0xf0
 80066e8:	443b      	add	r3, r7
 80066ea:	3b98      	subs	r3, #152	@ 0x98
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80066f4:	4613      	mov	r3, r2
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	1a9b      	subs	r3, r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	33f0      	adds	r3, #240	@ 0xf0
 80066fe:	443b      	add	r3, r7
 8006700:	3b94      	subs	r3, #148	@ 0x94
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800670a:	4613      	mov	r3, r2
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	1a9b      	subs	r3, r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	33f0      	adds	r3, #240	@ 0xf0
 8006714:	443b      	add	r3, r7
 8006716:	3b90      	subs	r3, #144	@ 0x90
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8006720:	4613      	mov	r3, r2
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	1a9b      	subs	r3, r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	33f0      	adds	r3, #240	@ 0xf0
 800672a:	443b      	add	r3, r7
 800672c:	3b8c      	subs	r3, #140	@ 0x8c
 800672e:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8006738:	4613      	mov	r3, r2
 800673a:	011b      	lsls	r3, r3, #4
 800673c:	1a9b      	subs	r3, r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	33f0      	adds	r3, #240	@ 0xf0
 8006742:	443b      	add	r3, r7
 8006744:	3b88      	subs	r3, #136	@ 0x88
 8006746:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8006750:	4613      	mov	r3, r2
 8006752:	011b      	lsls	r3, r3, #4
 8006754:	1a9b      	subs	r3, r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	33f0      	adds	r3, #240	@ 0xf0
 800675a:	443b      	add	r3, r7
 800675c:	3b84      	subs	r3, #132	@ 0x84
 800675e:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8006768:	4613      	mov	r3, r2
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	1a9b      	subs	r3, r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	33f0      	adds	r3, #240	@ 0xf0
 8006772:	443b      	add	r3, r7
 8006774:	3b80      	subs	r3, #128	@ 0x80
 8006776:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8006780:	4613      	mov	r3, r2
 8006782:	011b      	lsls	r3, r3, #4
 8006784:	1a9b      	subs	r3, r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	33f0      	adds	r3, #240	@ 0xf0
 800678a:	443b      	add	r3, r7
 800678c:	3b7c      	subs	r3, #124	@ 0x7c
 800678e:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 8006792:	801a      	strh	r2, [r3, #0]
 8006794:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8006798:	4613      	mov	r3, r2
 800679a:	011b      	lsls	r3, r3, #4
 800679c:	1a9b      	subs	r3, r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	33f0      	adds	r3, #240	@ 0xf0
 80067a2:	443b      	add	r3, r7
 80067a4:	3b7a      	subs	r3, #122	@ 0x7a
 80067a6:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 80067aa:	801a      	strh	r2, [r3, #0]
 80067ac:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80067b0:	4613      	mov	r3, r2
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	33f0      	adds	r3, #240	@ 0xf0
 80067ba:	443b      	add	r3, r7
 80067bc:	3b78      	subs	r3, #120	@ 0x78
 80067be:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 80067c2:	801a      	strh	r2, [r3, #0]
 80067c4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80067c8:	4613      	mov	r3, r2
 80067ca:	011b      	lsls	r3, r3, #4
 80067cc:	1a9b      	subs	r3, r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	33f0      	adds	r3, #240	@ 0xf0
 80067d2:	443b      	add	r3, r7
 80067d4:	3b74      	subs	r3, #116	@ 0x74
 80067d6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80067e0:	4613      	mov	r3, r2
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	1a9b      	subs	r3, r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	33f0      	adds	r3, #240	@ 0xf0
 80067ea:	443b      	add	r3, r7
 80067ec:	3b70      	subs	r3, #112	@ 0x70
 80067ee:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80067f8:	4613      	mov	r3, r2
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	1a9b      	subs	r3, r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	33f0      	adds	r3, #240	@ 0xf0
 8006802:	443b      	add	r3, r7
 8006804:	3b6c      	subs	r3, #108	@ 0x6c
 8006806:	6019      	str	r1, [r3, #0]
 8006808:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800680c:	4613      	mov	r3, r2
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	1a9b      	subs	r3, r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	33f0      	adds	r3, #240	@ 0xf0
 8006816:	443b      	add	r3, r7
 8006818:	3b68      	subs	r3, #104	@ 0x68
 800681a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800681e:	601a      	str	r2, [r3, #0]
 8006820:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8006824:	4613      	mov	r3, r2
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	1a9b      	subs	r3, r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	33f0      	adds	r3, #240	@ 0xf0
 800682e:	443b      	add	r3, r7
 8006830:	3b68      	subs	r3, #104	@ 0x68
 8006832:	3304      	adds	r3, #4
 8006834:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8006838:	e892 0003 	ldmia.w	r2, {r0, r1}
 800683c:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8006840:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006844:	3301      	adds	r3, #1
 8006846:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 800684a:	2300      	movs	r3, #0
 800684c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 8006862:	2300      	movs	r3, #0
 8006864:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 8006868:	4b0c      	ldr	r3, [pc, #48]	@ (800689c <lfs_dir_traverse+0x2e4>)
 800686a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 800686e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006872:	1e5a      	subs	r2, r3, #1
 8006874:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8006878:	4613      	mov	r3, r2
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	3328      	adds	r3, #40	@ 0x28
 8006882:	440b      	add	r3, r1
 8006884:	3304      	adds	r3, #4
 8006886:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 800688a:	e19d      	b.n	8006bc8 <lfs_dir_traverse+0x610>
 800688c:	7ff00000 	.word	0x7ff00000
 8006890:	0800eb30 	.word	0x0800eb30
 8006894:	0800f77c 	.word	0x0800f77c
 8006898:	0800ea1c 	.word	0x0800ea1c
 800689c:	08006501 	.word	0x08006501
            }
        }

popped:
 80068a0:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 80068a2:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80068a6:	f7ff f8b9 	bl	8005a1c <lfs_tag_id>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d015      	beq.n	80068dc <lfs_dir_traverse+0x324>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 80068b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff f8b2 	bl	8005a1c <lfs_tag_id>
 80068b8:	4603      	mov	r3, r0
 80068ba:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 80068bc:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 80068c0:	4293      	cmp	r3, r2
 80068c2:	f200 817c 	bhi.w	8006bbe <lfs_dir_traverse+0x606>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 80068c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff f8a7 	bl	8005a1c <lfs_tag_id>
 80068ce:	4603      	mov	r3, r0
 80068d0:	461a      	mov	r2, r3
 80068d2:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 80068d6:	4293      	cmp	r3, r2
 80068d8:	f240 8171 	bls.w	8006bbe <lfs_dir_traverse+0x606>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 80068dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068de:	4618      	mov	r0, r3
 80068e0:	f7ff f872 	bl	80059c8 <lfs_tag_type3>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f43f ae75 	beq.w	80065d6 <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 80068ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff f86a 	bl	80059c8 <lfs_tag_type3>
 80068f4:	4603      	mov	r3, r0
 80068f6:	461a      	mov	r2, r3
 80068f8:	f240 1301 	movw	r3, #257	@ 0x101
 80068fc:	429a      	cmp	r2, r3
 80068fe:	f040 80e0 	bne.w	8006ac2 <lfs_dir_traverse+0x50a>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8006902:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006906:	4ab1      	ldr	r2, [pc, #708]	@ (8006bcc <lfs_dir_traverse+0x614>)
 8006908:	4293      	cmp	r3, r2
 800690a:	f000 815a 	beq.w	8006bc2 <lfs_dir_traverse+0x60a>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 800690e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8006912:	4613      	mov	r3, r2
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	1a9b      	subs	r3, r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	33f0      	adds	r3, #240	@ 0xf0
 800691c:	443b      	add	r3, r7
 800691e:	3b98      	subs	r3, #152	@ 0x98
 8006920:	4618      	mov	r0, r3
 8006922:	233c      	movs	r3, #60	@ 0x3c
 8006924:	461a      	mov	r2, r3
 8006926:	2100      	movs	r1, #0
 8006928:	f006 fa6a 	bl	800ce00 <memset>
 800692c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8006930:	4613      	mov	r3, r2
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	1a9b      	subs	r3, r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	33f0      	adds	r3, #240	@ 0xf0
 800693a:	443b      	add	r3, r7
 800693c:	3b98      	subs	r3, #152	@ 0x98
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8006946:	4613      	mov	r3, r2
 8006948:	011b      	lsls	r3, r3, #4
 800694a:	1a9b      	subs	r3, r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	33f0      	adds	r3, #240	@ 0xf0
 8006950:	443b      	add	r3, r7
 8006952:	3b94      	subs	r3, #148	@ 0x94
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800695c:	4613      	mov	r3, r2
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	1a9b      	subs	r3, r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	33f0      	adds	r3, #240	@ 0xf0
 8006966:	443b      	add	r3, r7
 8006968:	3b90      	subs	r3, #144	@ 0x90
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8006972:	4613      	mov	r3, r2
 8006974:	011b      	lsls	r3, r3, #4
 8006976:	1a9b      	subs	r3, r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	33f0      	adds	r3, #240	@ 0xf0
 800697c:	443b      	add	r3, r7
 800697e:	3b8c      	subs	r3, #140	@ 0x8c
 8006980:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800698a:	4613      	mov	r3, r2
 800698c:	011b      	lsls	r3, r3, #4
 800698e:	1a9b      	subs	r3, r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	33f0      	adds	r3, #240	@ 0xf0
 8006994:	443b      	add	r3, r7
 8006996:	3b88      	subs	r3, #136	@ 0x88
 8006998:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80069a2:	4613      	mov	r3, r2
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	1a9b      	subs	r3, r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	33f0      	adds	r3, #240	@ 0xf0
 80069ac:	443b      	add	r3, r7
 80069ae:	3b84      	subs	r3, #132	@ 0x84
 80069b0:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80069ba:	4613      	mov	r3, r2
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	1a9b      	subs	r3, r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	33f0      	adds	r3, #240	@ 0xf0
 80069c4:	443b      	add	r3, r7
 80069c6:	3b80      	subs	r3, #128	@ 0x80
 80069c8:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80069d2:	4613      	mov	r3, r2
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	1a9b      	subs	r3, r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	33f0      	adds	r3, #240	@ 0xf0
 80069dc:	443b      	add	r3, r7
 80069de:	3b7c      	subs	r3, #124	@ 0x7c
 80069e0:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 80069e4:	801a      	strh	r2, [r3, #0]
 80069e6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80069ea:	4613      	mov	r3, r2
 80069ec:	011b      	lsls	r3, r3, #4
 80069ee:	1a9b      	subs	r3, r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	33f0      	adds	r3, #240	@ 0xf0
 80069f4:	443b      	add	r3, r7
 80069f6:	3b7a      	subs	r3, #122	@ 0x7a
 80069f8:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 80069fc:	801a      	strh	r2, [r3, #0]
 80069fe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8006a02:	4613      	mov	r3, r2
 8006a04:	011b      	lsls	r3, r3, #4
 8006a06:	1a9b      	subs	r3, r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	33f0      	adds	r3, #240	@ 0xf0
 8006a0c:	443b      	add	r3, r7
 8006a0e:	3b78      	subs	r3, #120	@ 0x78
 8006a10:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 8006a14:	801a      	strh	r2, [r3, #0]
 8006a16:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	011b      	lsls	r3, r3, #4
 8006a1e:	1a9b      	subs	r3, r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	33f0      	adds	r3, #240	@ 0xf0
 8006a24:	443b      	add	r3, r7
 8006a26:	3b74      	subs	r3, #116	@ 0x74
 8006a28:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8006a32:	4613      	mov	r3, r2
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	1a9b      	subs	r3, r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	33f0      	adds	r3, #240	@ 0xf0
 8006a3c:	443b      	add	r3, r7
 8006a3e:	3b70      	subs	r3, #112	@ 0x70
 8006a40:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8006a44:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 8006a46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8006a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fe fff2 	bl	8005a3c <lfs_tag_size>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8006a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7fe ffdb 	bl	8005a1c <lfs_tag_id>
 8006a66:	4603      	mov	r3, r0
 8006a68:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 8006a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a70:	60bb      	str	r3, [r7, #8]
            off = 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8006a76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a7a:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 8006a82:	2300      	movs	r3, #0
 8006a84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8006a88:	4b51      	ldr	r3, [pc, #324]	@ (8006bd0 <lfs_dir_traverse+0x618>)
 8006a8a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8006a8e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006a92:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 8006a96:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8006a9a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 8006a9e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 8006aa8:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 8006aac:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8006ab8:	4413      	add	r3, r2
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 8006ac0:	e589      	b.n	80065d6 <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8006ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe ff7f 	bl	80059c8 <lfs_tag_type3>
 8006aca:	4603      	mov	r3, r0
 8006acc:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8006ad0:	d159      	bne.n	8006b86 <lfs_dir_traverse+0x5ce>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ad8:	e04b      	b.n	8006b72 <lfs_dir_traverse+0x5ba>
                const struct lfs_attr *a = buffer;
 8006ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ade:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8006ae2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	4413      	add	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	461a      	mov	r2, r3
 8006af0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006af4:	4413      	add	r3, r2
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8006afc:	051c      	lsls	r4, r3, #20
 8006afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fe ff8b 	bl	8005a1c <lfs_tag_id>
 8006b06:	4603      	mov	r3, r0
 8006b08:	461a      	mov	r2, r3
 8006b0a:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 8006b0e:	4413      	add	r3, r2
 8006b10:	029b      	lsls	r3, r3, #10
 8006b12:	ea44 0103 	orr.w	r1, r4, r3
 8006b16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	461a      	mov	r2, r3
 8006b24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b28:	4413      	add	r3, r2
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8006b2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006b32:	4613      	mov	r3, r2
 8006b34:	005b      	lsls	r3, r3, #1
 8006b36:	4413      	add	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b40:	4413      	add	r3, r2
 8006b42:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8006b44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b48:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8006b4c:	4798      	blx	r3
 8006b4e:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 8006b52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	da02      	bge.n	8006b60 <lfs_dir_traverse+0x5a8>
                    return res;
 8006b5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006b5e:	e10b      	b.n	8006d78 <lfs_dir_traverse+0x7c0>
                }

                if (res) {
 8006b60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d12e      	bne.n	8006bc6 <lfs_dir_traverse+0x60e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8006b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fe ff61 	bl	8005a3c <lfs_tag_size>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d3aa      	bcc.n	8006ada <lfs_dir_traverse+0x522>
 8006b84:	e527      	b.n	80065d6 <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8006b86:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 8006b8a:	029a      	lsls	r2, r3, #10
 8006b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b8e:	18d1      	adds	r1, r2, r3
 8006b90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b94:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006b98:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8006b9c:	4798      	blx	r3
 8006b9e:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 8006ba2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	da02      	bge.n	8006bb0 <lfs_dir_traverse+0x5f8>
                return res;
 8006baa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006bae:	e0e3      	b.n	8006d78 <lfs_dir_traverse+0x7c0>
            }

            if (res) {
 8006bb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10d      	bne.n	8006bd4 <lfs_dir_traverse+0x61c>
 8006bb8:	e50d      	b.n	80065d6 <lfs_dir_traverse+0x1e>
                continue;
 8006bba:	bf00      	nop
 8006bbc:	e50b      	b.n	80065d6 <lfs_dir_traverse+0x1e>
            continue;
 8006bbe:	bf00      	nop
 8006bc0:	e509      	b.n	80065d6 <lfs_dir_traverse+0x1e>
                continue;
 8006bc2:	bf00      	nop
 8006bc4:	e507      	b.n	80065d6 <lfs_dir_traverse+0x1e>
                    break;
 8006bc6:	bf00      	nop
        {
 8006bc8:	e505      	b.n	80065d6 <lfs_dir_traverse+0x1e>
 8006bca:	bf00      	nop
 8006bcc:	08006501 	.word	0x08006501
 8006bd0:	600ffc00 	.word	0x600ffc00
                break;
 8006bd4:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 8006bd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 80ca 	beq.w	8006d74 <lfs_dir_traverse+0x7bc>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8006be0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006be4:	1e5a      	subs	r2, r3, #1
 8006be6:	4613      	mov	r3, r2
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	1a9b      	subs	r3, r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	33f0      	adds	r3, #240	@ 0xf0
 8006bf0:	443b      	add	r3, r7
 8006bf2:	3b98      	subs	r3, #152	@ 0x98
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8006bf8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006bfc:	1e5a      	subs	r2, r3, #1
 8006bfe:	4613      	mov	r3, r2
 8006c00:	011b      	lsls	r3, r3, #4
 8006c02:	1a9b      	subs	r3, r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	33f0      	adds	r3, #240	@ 0xf0
 8006c08:	443b      	add	r3, r7
 8006c0a:	3b94      	subs	r3, #148	@ 0x94
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8006c10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c14:	1e5a      	subs	r2, r3, #1
 8006c16:	4613      	mov	r3, r2
 8006c18:	011b      	lsls	r3, r3, #4
 8006c1a:	1a9b      	subs	r3, r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	33f0      	adds	r3, #240	@ 0xf0
 8006c20:	443b      	add	r3, r7
 8006c22:	3b90      	subs	r3, #144	@ 0x90
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8006c28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c2c:	1e5a      	subs	r2, r3, #1
 8006c2e:	4613      	mov	r3, r2
 8006c30:	011b      	lsls	r3, r3, #4
 8006c32:	1a9b      	subs	r3, r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	33f0      	adds	r3, #240	@ 0xf0
 8006c38:	443b      	add	r3, r7
 8006c3a:	3b8c      	subs	r3, #140	@ 0x8c
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 8006c42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c46:	1e5a      	subs	r2, r3, #1
 8006c48:	4613      	mov	r3, r2
 8006c4a:	011b      	lsls	r3, r3, #4
 8006c4c:	1a9b      	subs	r3, r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	33f0      	adds	r3, #240	@ 0xf0
 8006c52:	443b      	add	r3, r7
 8006c54:	3b88      	subs	r3, #136	@ 0x88
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 8006c5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c60:	1e5a      	subs	r2, r3, #1
 8006c62:	4613      	mov	r3, r2
 8006c64:	011b      	lsls	r3, r3, #4
 8006c66:	1a9b      	subs	r3, r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	33f0      	adds	r3, #240	@ 0xf0
 8006c6c:	443b      	add	r3, r7
 8006c6e:	3b84      	subs	r3, #132	@ 0x84
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 8006c76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c7a:	1e5a      	subs	r2, r3, #1
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	1a9b      	subs	r3, r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	33f0      	adds	r3, #240	@ 0xf0
 8006c86:	443b      	add	r3, r7
 8006c88:	3b80      	subs	r3, #128	@ 0x80
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 8006c90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c94:	1e5a      	subs	r2, r3, #1
 8006c96:	4613      	mov	r3, r2
 8006c98:	011b      	lsls	r3, r3, #4
 8006c9a:	1a9b      	subs	r3, r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	33f0      	adds	r3, #240	@ 0xf0
 8006ca0:	443b      	add	r3, r7
 8006ca2:	3b7c      	subs	r3, #124	@ 0x7c
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 8006caa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006cae:	1e5a      	subs	r2, r3, #1
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	011b      	lsls	r3, r3, #4
 8006cb4:	1a9b      	subs	r3, r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	33f0      	adds	r3, #240	@ 0xf0
 8006cba:	443b      	add	r3, r7
 8006cbc:	3b7a      	subs	r3, #122	@ 0x7a
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 8006cc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006cc8:	1e5a      	subs	r2, r3, #1
 8006cca:	4613      	mov	r3, r2
 8006ccc:	011b      	lsls	r3, r3, #4
 8006cce:	1a9b      	subs	r3, r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	33f0      	adds	r3, #240	@ 0xf0
 8006cd4:	443b      	add	r3, r7
 8006cd6:	3b78      	subs	r3, #120	@ 0x78
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 8006cde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006ce2:	1e5a      	subs	r2, r3, #1
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	011b      	lsls	r3, r3, #4
 8006ce8:	1a9b      	subs	r3, r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	33f0      	adds	r3, #240	@ 0xf0
 8006cee:	443b      	add	r3, r7
 8006cf0:	3b74      	subs	r3, #116	@ 0x74
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 8006cf8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006cfc:	1e5a      	subs	r2, r3, #1
 8006cfe:	4613      	mov	r3, r2
 8006d00:	011b      	lsls	r3, r3, #4
 8006d02:	1a9b      	subs	r3, r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	33f0      	adds	r3, #240	@ 0xf0
 8006d08:	443b      	add	r3, r7
 8006d0a:	3b70      	subs	r3, #112	@ 0x70
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 8006d12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006d16:	1e5a      	subs	r2, r3, #1
 8006d18:	4613      	mov	r3, r2
 8006d1a:	011b      	lsls	r3, r3, #4
 8006d1c:	1a9b      	subs	r3, r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	33f0      	adds	r3, #240	@ 0xf0
 8006d22:	443b      	add	r3, r7
 8006d24:	3b6c      	subs	r3, #108	@ 0x6c
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 8006d2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006d2e:	1e5a      	subs	r2, r3, #1
 8006d30:	4613      	mov	r3, r2
 8006d32:	011b      	lsls	r3, r3, #4
 8006d34:	1a9b      	subs	r3, r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	33f0      	adds	r3, #240	@ 0xf0
 8006d3a:	443b      	add	r3, r7
 8006d3c:	3b68      	subs	r3, #104	@ 0x68
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 8006d44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006d48:	1e5a      	subs	r2, r3, #1
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	011b      	lsls	r3, r3, #4
 8006d4e:	1a9b      	subs	r3, r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	33f0      	adds	r3, #240	@ 0xf0
 8006d54:	443b      	add	r3, r7
 8006d56:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 8006d5a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006d5e:	3204      	adds	r2, #4
 8006d60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d64:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8006d68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 8006d72:	e596      	b.n	80068a2 <lfs_dir_traverse+0x2ea>
    } else {
        return res;
 8006d74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	37f4      	adds	r7, #244	@ 0xf4
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd90      	pop	{r4, r7, pc}

08006d80 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8006d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d82:	b0a5      	sub	sp, #148	@ 0x94
 8006d84:	af04      	add	r7, sp, #16
 8006d86:	6178      	str	r0, [r7, #20]
 8006d88:	6139      	str	r1, [r7, #16]
 8006d8a:	60fa      	str	r2, [r7, #12]
 8006d8c:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8006d8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d92:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00f      	beq.n	8006dbc <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d206      	bcs.n	8006db6 <lfs_dir_fetchmatch+0x36>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	3304      	adds	r3, #4
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d302      	bcc.n	8006dbc <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 8006db6:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8006dba:	e3a4      	b.n	8007506 <lfs_dir_fetchmatch+0x786>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
    int r = 0;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 8006dc8:	2300      	movs	r3, #0
 8006dca:	677b      	str	r3, [r7, #116]	@ 0x74
 8006dcc:	e05a      	b.n	8006e84 <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 8006dce:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8006dd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8006dd8:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8006dda:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8006dde:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006de0:	0092      	lsls	r2, r2, #2
 8006de2:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8006de4:	2104      	movs	r1, #4
 8006de6:	9103      	str	r1, [sp, #12]
 8006de8:	9202      	str	r2, [sp, #8]
 8006dea:	2200      	movs	r2, #0
 8006dec:	9201      	str	r2, [sp, #4]
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	2304      	movs	r3, #4
 8006df2:	4602      	mov	r2, r0
 8006df4:	2100      	movs	r1, #0
 8006df6:	6978      	ldr	r0, [r7, #20]
 8006df8:	f7fe f978 	bl	80050ec <lfs_bd_read>
 8006dfc:	64f8      	str	r0, [r7, #76]	@ 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 8006dfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	3378      	adds	r3, #120	@ 0x78
 8006e04:	f107 0208 	add.w	r2, r7, #8
 8006e08:	4413      	add	r3, r2
 8006e0a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fe f901 	bl	8005016 <lfs_fromle32>
 8006e14:	4602      	mov	r2, r0
 8006e16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	3378      	adds	r3, #120	@ 0x78
 8006e1c:	f107 0108 	add.w	r1, r7, #8
 8006e20:	440b      	add	r3, r1
 8006e22:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 8006e26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d005      	beq.n	8006e38 <lfs_dir_fetchmatch+0xb8>
 8006e2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e2e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006e32:	d001      	beq.n	8006e38 <lfs_dir_fetchmatch+0xb8>
            return err;
 8006e34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e36:	e366      	b.n	8007506 <lfs_dir_fetchmatch+0x786>
        }

        if (err != LFS_ERR_CORRUPT &&
 8006e38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e3a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006e3e:	d01e      	beq.n	8006e7e <lfs_dir_fetchmatch+0xfe>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8006e40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	3378      	adds	r3, #120	@ 0x78
 8006e46:	f107 0208 	add.w	r2, r7, #8
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8006e50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e52:	3301      	adds	r3, #1
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	bfb8      	it	lt
 8006e5c:	425b      	neglt	r3, r3
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	3378      	adds	r3, #120	@ 0x78
 8006e62:	f107 0108 	add.w	r1, r7, #8
 8006e66:	440b      	add	r3, r1
 8006e68:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	4610      	mov	r0, r2
 8006e70:	f7fe f8c3 	bl	8004ffa <lfs_scmp>
 8006e74:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	dd01      	ble.n	8006e7e <lfs_dir_fetchmatch+0xfe>
            r = i;
 8006e7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e7c:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 8006e7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e80:	3301      	adds	r3, #1
 8006e82:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	dda1      	ble.n	8006dce <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8006e8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	bfb8      	it	lt
 8006e94:	425b      	neglt	r3, r3
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8006ea2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	bfb8      	it	lt
 8006eae:	425b      	neglt	r3, r3
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8006ebc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	bfb8      	it	lt
 8006ec6:	425b      	neglt	r3, r3
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	3378      	adds	r3, #120	@ 0x78
 8006ecc:	f107 0208 	add.w	r2, r7, #8
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	2200      	movs	r2, #0
 8006ede:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ee4:	e2fb      	b.n	80074de <lfs_dir_fetchmatch+0x75e>
        lfs_off_t off = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	66fb      	str	r3, [r7, #108]	@ 0x6c
        lfs_tag_t ptag = 0xffffffff;
 8006eea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006eee:	66bb      	str	r3, [r7, #104]	@ 0x68

        uint16_t tempcount = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006ef6:	4aa9      	ldr	r2, [pc, #676]	@ (800719c <lfs_dir_fetchmatch+0x41c>)
 8006ef8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006efc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f00:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8006f04:	2300      	movs	r3, #0
 8006f06:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        lfs_stag_t tempbesttag = besttag;
 8006f0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f0c:	663b      	str	r3, [r7, #96]	@ 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        bool hasfcrc = false;
 8006f14:	2300      	movs	r3, #0
 8006f16:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fe f884 	bl	800502c <lfs_tole32>
 8006f24:	4602      	mov	r2, r0
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	2204      	movs	r2, #4
 8006f30:	4619      	mov	r1, r3
 8006f32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f36:	f004 fed9 	bl	800bcec <lfs_crc>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	633b      	str	r3, [r7, #48]	@ 0x30
        dir->rev = lfs_fromle32(dir->rev);
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fe f867 	bl	8005016 <lfs_fromle32>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8006f4e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8006f50:	f7fe fd81 	bl	8005a56 <lfs_tag_dsize>
 8006f54:	4602      	mov	r2, r0
 8006f56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f58:	4413      	add	r3, r2
 8006f5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            int err = lfs_bd_read(lfs,
 8006f5c:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f62:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2204      	movs	r2, #4
 8006f6a:	9203      	str	r2, [sp, #12]
 8006f6c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8006f70:	9202      	str	r2, [sp, #8]
 8006f72:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f74:	9201      	str	r2, [sp, #4]
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	4603      	mov	r3, r0
 8006f7a:	460a      	mov	r2, r1
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	6978      	ldr	r0, [r7, #20]
 8006f80:	f7fe f8b4 	bl	80050ec <lfs_bd_read>
 8006f84:	65b8      	str	r0, [r7, #88]	@ 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8006f86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d006      	beq.n	8006f9a <lfs_dir_fetchmatch+0x21a>
                if (err == LFS_ERR_CORRUPT) {
 8006f8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f8e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006f92:	f000 81d6 	beq.w	8007342 <lfs_dir_fetchmatch+0x5c2>
                    // can't continue?
                    break;
                }
                return err;
 8006f96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f98:	e2b5      	b.n	8007506 <lfs_dir_fetchmatch+0x786>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8006fa0:	2204      	movs	r2, #4
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f004 fea2 	bl	800bcec <lfs_crc>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	633b      	str	r3, [r7, #48]	@ 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 8006fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fe f848 	bl	8005044 <lfs_frombe32>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fb8:	4053      	eors	r3, r2
 8006fba:	62fb      	str	r3, [r7, #44]	@ 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 8006fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fe fcc1 	bl	8005946 <lfs_tag_isvalid>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	f083 0301 	eor.w	r3, r3, #1
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00b      	beq.n	8006fe8 <lfs_dir_fetchmatch+0x268>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 8006fd0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8006fd2:	f7fe fce9 	bl	80059a8 <lfs_tag_type2>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006fdc:	bf0c      	ite	eq
 8006fde:	2301      	moveq	r3, #1
 8006fe0:	2300      	movne	r3, #0
 8006fe2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                break;
 8006fe6:	e1bb      	b.n	8007360 <lfs_dir_fetchmatch+0x5e0>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8006fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fe fd33 	bl	8005a56 <lfs_tag_dsize>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ff4:	441a      	add	r2, r3
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ffa:	69db      	ldr	r3, [r3, #28]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	f200 81a2 	bhi.w	8007346 <lfs_dir_fetchmatch+0x5c6>
                break;
            }

            ptag = tag;
 8007002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007004:	66bb      	str	r3, [r7, #104]	@ 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 8007006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe fccd 	bl	80059a8 <lfs_tag_type2>
 800700e:	4603      	mov	r3, r0
 8007010:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007014:	d15e      	bne.n	80070d4 <lfs_dir_fetchmatch+0x354>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8007016:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800701c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007024:	3204      	adds	r2, #4
 8007026:	2104      	movs	r1, #4
 8007028:	9103      	str	r1, [sp, #12]
 800702a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800702e:	9102      	str	r1, [sp, #8]
 8007030:	9201      	str	r2, [sp, #4]
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	4623      	mov	r3, r4
 8007036:	4602      	mov	r2, r0
 8007038:	2100      	movs	r1, #0
 800703a:	6978      	ldr	r0, [r7, #20]
 800703c:	f7fe f856 	bl	80050ec <lfs_bd_read>
 8007040:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8007042:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007044:	2b00      	cmp	r3, #0
 8007046:	d006      	beq.n	8007056 <lfs_dir_fetchmatch+0x2d6>
                    if (err == LFS_ERR_CORRUPT) {
 8007048:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800704a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800704e:	f000 817c 	beq.w	800734a <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 8007052:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                return err;
 8007054:	e257      	b.n	8007506 <lfs_dir_fetchmatch+0x786>
                }
                dcrc = lfs_fromle32(dcrc);
 8007056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007058:	4618      	mov	r0, r3
 800705a:	f7fd ffdc 	bl	8005016 <lfs_fromle32>
 800705e:	4603      	mov	r3, r0
 8007060:	62bb      	str	r3, [r7, #40]	@ 0x28

                if (crc != dcrc) {
 8007062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007066:	429a      	cmp	r2, r3
 8007068:	f040 8171 	bne.w	800734e <lfs_dir_fetchmatch+0x5ce>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 800706c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800706e:	4618      	mov	r0, r3
 8007070:	f7fe fcba 	bl	80059e8 <lfs_tag_chunk>
 8007074:	4603      	mov	r3, r0
 8007076:	07db      	lsls	r3, r3, #31
 8007078:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800707a:	4053      	eors	r3, r2
 800707c:	66bb      	str	r3, [r7, #104]	@ 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007082:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8007086:	2204      	movs	r2, #4
 8007088:	4618      	mov	r0, r3
 800708a:	f004 fe2f 	bl	800bcec <lfs_crc>
 800708e:	4602      	mov	r2, r0
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8007094:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007096:	67fb      	str	r3, [r7, #124]	@ 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 8007098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709a:	4618      	mov	r0, r3
 800709c:	f7fe fcdb 	bl	8005a56 <lfs_tag_dsize>
 80070a0:	4602      	mov	r2, r0
 80070a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070a4:	441a      	add	r2, r3
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80070ae:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80070b6:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 80070b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 80070be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 80070ca:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 80070cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80070d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80070d2:	e73c      	b.n	8006f4e <lfs_dir_fetchmatch+0x1ce>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 80070d4:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	681c      	ldr	r4, [r3, #0]
 80070e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070e4:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 80070e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fe fcb4 	bl	8005a56 <lfs_tag_dsize>
 80070ee:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 80070f0:	3b04      	subs	r3, #4
 80070f2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80070f6:	9203      	str	r2, [sp, #12]
 80070f8:	9302      	str	r3, [sp, #8]
 80070fa:	9501      	str	r5, [sp, #4]
 80070fc:	9400      	str	r4, [sp, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4632      	mov	r2, r6
 8007102:	2100      	movs	r1, #0
 8007104:	6978      	ldr	r0, [r7, #20]
 8007106:	f7fe f98e 	bl	8005426 <lfs_bd_crc>
 800710a:	65b8      	str	r0, [r7, #88]	@ 0x58
            if (err) {
 800710c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800710e:	2b00      	cmp	r3, #0
 8007110:	d006      	beq.n	8007120 <lfs_dir_fetchmatch+0x3a0>
                if (err == LFS_ERR_CORRUPT) {
 8007112:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007114:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8007118:	f000 811b 	beq.w	8007352 <lfs_dir_fetchmatch+0x5d2>
                    break;
                }
                return err;
 800711c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800711e:	e1f2      	b.n	8007506 <lfs_dir_fetchmatch+0x786>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8007120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007122:	4618      	mov	r0, r3
 8007124:	f7fe fc30 	bl	8005988 <lfs_tag_type1>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d113      	bne.n	8007156 <lfs_dir_fetchmatch+0x3d6>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 800712e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007130:	4618      	mov	r0, r3
 8007132:	f7fe fc73 	bl	8005a1c <lfs_tag_id>
 8007136:	4603      	mov	r3, r0
 8007138:	461a      	mov	r2, r3
 800713a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800713e:	4293      	cmp	r3, r2
 8007140:	f200 80b6 	bhi.w	80072b0 <lfs_dir_fetchmatch+0x530>
                    tempcount = lfs_tag_id(tag) + 1;
 8007144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007146:	4618      	mov	r0, r3
 8007148:	f7fe fc68 	bl	8005a1c <lfs_tag_id>
 800714c:	4603      	mov	r3, r0
 800714e:	3301      	adds	r3, #1
 8007150:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007154:	e0ac      	b.n	80072b0 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8007156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007158:	4618      	mov	r0, r3
 800715a:	f7fe fc15 	bl	8005988 <lfs_tag_type1>
 800715e:	4603      	mov	r3, r0
 8007160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007164:	d13a      	bne.n	80071dc <lfs_dir_fetchmatch+0x45c>
                tempcount += lfs_tag_splice(tag);
 8007166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007168:	4618      	mov	r0, r3
 800716a:	f7fe fc4a 	bl	8005a02 <lfs_tag_splice>
 800716e:	4603      	mov	r3, r0
 8007170:	b29a      	uxth	r2, r3
 8007172:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007176:	4413      	add	r3, r2
 8007178:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800717c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800717e:	4b08      	ldr	r3, [pc, #32]	@ (80071a0 <lfs_dir_fetchmatch+0x420>)
 8007180:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8007182:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8007186:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800718a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800718c:	4293      	cmp	r3, r2
 800718e:	d109      	bne.n	80071a4 <lfs_dir_fetchmatch+0x424>
                    tempbesttag |= 0x80000000;
 8007190:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007192:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007196:	663b      	str	r3, [r7, #96]	@ 0x60
 8007198:	e08a      	b.n	80072b0 <lfs_dir_fetchmatch+0x530>
 800719a:	bf00      	nop
 800719c:	0800eb70 	.word	0x0800eb70
 80071a0:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 80071a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071aa:	f000 8081 	beq.w	80072b0 <lfs_dir_fetchmatch+0x530>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 80071ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fe fc33 	bl	8005a1c <lfs_tag_id>
 80071b6:	4603      	mov	r3, r0
 80071b8:	461c      	mov	r4, r3
 80071ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fe fc2d 	bl	8005a1c <lfs_tag_id>
 80071c2:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 80071c4:	429c      	cmp	r4, r3
 80071c6:	d873      	bhi.n	80072b0 <lfs_dir_fetchmatch+0x530>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80071c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fe fc19 	bl	8005a02 <lfs_tag_splice>
 80071d0:	4603      	mov	r3, r0
 80071d2:	029a      	lsls	r2, r3, #10
 80071d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071d6:	4413      	add	r3, r2
 80071d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80071da:	e069      	b.n	80072b0 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 80071dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe fbd2 	bl	8005988 <lfs_tag_type1>
 80071e4:	4603      	mov	r3, r0
 80071e6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80071ea:	d132      	bne.n	8007252 <lfs_dir_fetchmatch+0x4d2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 80071ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fe fbfa 	bl	80059e8 <lfs_tag_chunk>
 80071f4:	4603      	mov	r3, r0
 80071f6:	f003 0301 	and.w	r3, r3, #1
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	bf14      	ite	ne
 80071fe:	2301      	movne	r3, #1
 8007200:	2300      	moveq	r3, #0
 8007202:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

                err = lfs_bd_read(lfs,
 8007206:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800720c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007214:	3204      	adds	r2, #4
 8007216:	2108      	movs	r1, #8
 8007218:	9103      	str	r1, [sp, #12]
 800721a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800721e:	9102      	str	r1, [sp, #8]
 8007220:	9201      	str	r2, [sp, #4]
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	4623      	mov	r3, r4
 8007226:	4602      	mov	r2, r0
 8007228:	2100      	movs	r1, #0
 800722a:	6978      	ldr	r0, [r7, #20]
 800722c:	f7fd ff5e 	bl	80050ec <lfs_bd_read>
 8007230:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8007232:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007234:	2b00      	cmp	r3, #0
 8007236:	d006      	beq.n	8007246 <lfs_dir_fetchmatch+0x4c6>
                    if (err == LFS_ERR_CORRUPT) {
 8007238:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800723a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800723e:	f000 808a 	beq.w	8007356 <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                    return err;
 8007242:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007244:	e15f      	b.n	8007506 <lfs_dir_fetchmatch+0x786>
                }
                lfs_pair_fromle32(temptail);
 8007246:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800724a:	4618      	mov	r0, r3
 800724c:	f7fe fb47 	bl	80058de <lfs_pair_fromle32>
 8007250:	e02e      	b.n	80072b0 <lfs_dir_fetchmatch+0x530>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8007252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007254:	4618      	mov	r0, r3
 8007256:	f7fe fbb7 	bl	80059c8 <lfs_tag_type3>
 800725a:	4603      	mov	r3, r0
 800725c:	461a      	mov	r2, r3
 800725e:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 8007262:	429a      	cmp	r2, r3
 8007264:	d124      	bne.n	80072b0 <lfs_dir_fetchmatch+0x530>
                err = lfs_bd_read(lfs,
 8007266:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800726c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007274:	3204      	adds	r2, #4
 8007276:	2108      	movs	r1, #8
 8007278:	9103      	str	r1, [sp, #12]
 800727a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800727e:	9102      	str	r1, [sp, #8]
 8007280:	9201      	str	r2, [sp, #4]
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	4623      	mov	r3, r4
 8007286:	4602      	mov	r2, r0
 8007288:	2100      	movs	r1, #0
 800728a:	6978      	ldr	r0, [r7, #20]
 800728c:	f7fd ff2e 	bl	80050ec <lfs_bd_read>
 8007290:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 8007292:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <lfs_dir_fetchmatch+0x520>
                    if (err == LFS_ERR_CORRUPT) {
 8007298:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800729a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800729e:	d05c      	beq.n	800735a <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 80072a0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fe fcd5 	bl	8005c54 <lfs_fcrc_fromle32>
                hasfcrc = true;
 80072aa:	2301      	movs	r3, #1
 80072ac:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 80072b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072b6:	405a      	eors	r2, r3
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	4013      	ands	r3, r2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f47f ae46 	bne.w	8006f4e <lfs_dir_fetchmatch+0x1ce>
                int res = cb(data, tag, &(struct lfs_diskoff){
 80072c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
                        dir->pair[0], off+sizeof(tag)});
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 80072c8:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 80072ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072cc:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 80072ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80072d0:	f107 0220 	add.w	r2, r7, #32
 80072d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072d8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80072dc:	4798      	blx	r3
 80072de:	6578      	str	r0, [r7, #84]	@ 0x54
                if (res < 0) {
 80072e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	da05      	bge.n	80072f2 <lfs_dir_fetchmatch+0x572>
                    if (res == LFS_ERR_CORRUPT) {
 80072e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072e8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80072ec:	d037      	beq.n	800735e <lfs_dir_fetchmatch+0x5de>
                        break;
                    }
                    return res;
 80072ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                return err;
 80072f0:	e109      	b.n	8007506 <lfs_dir_fetchmatch+0x786>
                }

                if (res == LFS_CMP_EQ) {
 80072f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d102      	bne.n	80072fe <lfs_dir_fetchmatch+0x57e>
                    // found a match
                    tempbesttag = tag;
 80072f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80072fc:	e627      	b.n	8006f4e <lfs_dir_fetchmatch+0x1ce>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 80072fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007300:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007302:	405a      	eors	r2, r3
 8007304:	4b82      	ldr	r3, [pc, #520]	@ (8007510 <lfs_dir_fetchmatch+0x790>)
 8007306:	4013      	ands	r3, r2
 8007308:	2b00      	cmp	r3, #0
 800730a:	d103      	bne.n	8007314 <lfs_dir_fetchmatch+0x594>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 800730c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007310:	663b      	str	r3, [r7, #96]	@ 0x60
 8007312:	e61c      	b.n	8006f4e <lfs_dir_fetchmatch+0x1ce>
                } else if (res == LFS_CMP_GT &&
 8007314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007316:	2b02      	cmp	r3, #2
 8007318:	f47f ae19 	bne.w	8006f4e <lfs_dir_fetchmatch+0x1ce>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800731c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731e:	4618      	mov	r0, r3
 8007320:	f7fe fb7c 	bl	8005a1c <lfs_tag_id>
 8007324:	4603      	mov	r3, r0
 8007326:	461c      	mov	r4, r3
 8007328:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800732a:	4618      	mov	r0, r3
 800732c:	f7fe fb76 	bl	8005a1c <lfs_tag_id>
 8007330:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8007332:	429c      	cmp	r4, r3
 8007334:	f63f ae0b 	bhi.w	8006f4e <lfs_dir_fetchmatch+0x1ce>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8007338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800733e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007340:	e605      	b.n	8006f4e <lfs_dir_fetchmatch+0x1ce>
                    break;
 8007342:	bf00      	nop
 8007344:	e00c      	b.n	8007360 <lfs_dir_fetchmatch+0x5e0>
                break;
 8007346:	bf00      	nop
 8007348:	e00a      	b.n	8007360 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800734a:	bf00      	nop
 800734c:	e008      	b.n	8007360 <lfs_dir_fetchmatch+0x5e0>
                    break;
 800734e:	bf00      	nop
 8007350:	e006      	b.n	8007360 <lfs_dir_fetchmatch+0x5e0>
                    break;
 8007352:	bf00      	nop
 8007354:	e004      	b.n	8007360 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8007356:	bf00      	nop
 8007358:	e002      	b.n	8007360 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800735a:	bf00      	nop
 800735c:	e000      	b.n	8007360 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800735e:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d000      	beq.n	800736a <lfs_dir_fetchmatch+0x5ea>
 8007368:	e017      	b.n	800739a <lfs_dir_fetchmatch+0x61a>
            // try the other block?
            lfs_pair_swap(dir->pair);
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	4618      	mov	r0, r3
 800736e:	f7fe fa2f 	bl	80057d0 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8007372:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007374:	3301      	adds	r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	bfb8      	it	lt
 800737e:	425b      	neglt	r3, r3
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	3378      	adds	r3, #120	@ 0x78
 8007384:	f107 0208 	add.w	r2, r7, #8
 8007388:	4413      	add	r3, r2
 800738a:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8007392:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007394:	3301      	adds	r3, #1
 8007396:	673b      	str	r3, [r7, #112]	@ 0x70
 8007398:	e0a1      	b.n	80074de <lfs_dir_fetchmatch+0x75e>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	2200      	movs	r2, #0
 800739e:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 80073a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d03a      	beq.n	800741e <lfs_dir_fetchmatch+0x69e>
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80073b0:	6992      	ldr	r2, [r2, #24]
 80073b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80073b6:	fb01 f202 	mul.w	r2, r1, r2
 80073ba:	1a9b      	subs	r3, r3, r2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d12e      	bne.n	800741e <lfs_dir_fetchmatch+0x69e>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 80073c0:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d02a      	beq.n	800741e <lfs_dir_fetchmatch+0x69e>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 80073c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073cc:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 80073ce:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073d4:	69dd      	ldr	r5, [r3, #28]
                int err = lfs_bd_crc(lfs,
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	68d2      	ldr	r2, [r2, #12]
 80073de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80073e0:	f107 001c 	add.w	r0, r7, #28
 80073e4:	9003      	str	r0, [sp, #12]
 80073e6:	9102      	str	r1, [sp, #8]
 80073e8:	9201      	str	r2, [sp, #4]
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	462b      	mov	r3, r5
 80073ee:	4622      	mov	r2, r4
 80073f0:	2100      	movs	r1, #0
 80073f2:	6978      	ldr	r0, [r7, #20]
 80073f4:	f7fe f817 	bl	8005426 <lfs_bd_crc>
 80073f8:	6538      	str	r0, [r7, #80]	@ 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 80073fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d005      	beq.n	800740c <lfs_dir_fetchmatch+0x68c>
 8007400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007402:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8007406:	d001      	beq.n	800740c <lfs_dir_fetchmatch+0x68c>
                    return err;
 8007408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800740a:	e07c      	b.n	8007506 <lfs_dir_fetchmatch+0x786>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 800740c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	429a      	cmp	r2, r3
 8007412:	bf0c      	ite	eq
 8007414:	2301      	moveq	r3, #1
 8007416:	2300      	movne	r3, #0
 8007418:	b2da      	uxtb	r2, r3
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	333c      	adds	r3, #60	@ 0x3c
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	4611      	mov	r1, r2
 8007426:	4618      	mov	r0, r3
 8007428:	f7fe fbb4 	bl	8005b94 <lfs_gstate_hasmovehere>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d028      	beq.n	8007484 <lfs_dir_fetchmatch+0x704>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007436:	4618      	mov	r0, r3
 8007438:	f7fe faf0 	bl	8005a1c <lfs_tag_id>
 800743c:	4603      	mov	r3, r0
 800743e:	461c      	mov	r4, r3
 8007440:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007442:	4618      	mov	r0, r3
 8007444:	f7fe faea 	bl	8005a1c <lfs_tag_id>
 8007448:	4603      	mov	r3, r0
 800744a:	429c      	cmp	r4, r3
 800744c:	d104      	bne.n	8007458 <lfs_dir_fetchmatch+0x6d8>
                besttag |= 0x80000000;
 800744e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007450:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007454:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007456:	e015      	b.n	8007484 <lfs_dir_fetchmatch+0x704>
            } else if (besttag != -1 &&
 8007458:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800745a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800745e:	d011      	beq.n	8007484 <lfs_dir_fetchmatch+0x704>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007464:	4618      	mov	r0, r3
 8007466:	f7fe fad9 	bl	8005a1c <lfs_tag_id>
 800746a:	4603      	mov	r3, r0
 800746c:	461c      	mov	r4, r3
 800746e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007470:	4618      	mov	r0, r3
 8007472:	f7fe fad3 	bl	8005a1c <lfs_tag_id>
 8007476:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 8007478:	429c      	cmp	r4, r3
 800747a:	d203      	bcs.n	8007484 <lfs_dir_fetchmatch+0x704>
                besttag -= LFS_MKTAG(0, 1, 0);
 800747c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800747e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8007482:	67fb      	str	r3, [r7, #124]	@ 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8007484:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007488:	2b00      	cmp	r3, #0
 800748a:	d010      	beq.n	80074ae <lfs_dir_fetchmatch+0x72e>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800748c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe fac4 	bl	8005a1c <lfs_tag_id>
 8007494:	4603      	mov	r3, r0
 8007496:	461a      	mov	r2, r3
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	8a9b      	ldrh	r3, [r3, #20]
 800749c:	4619      	mov	r1, r3
 800749e:	4610      	mov	r0, r2
 80074a0:	f7fd fd49 	bl	8004f36 <lfs_min>
 80074a4:	4603      	mov	r3, r0
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074ac:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 80074ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fe fa48 	bl	8005946 <lfs_tag_isvalid>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <lfs_dir_fetchmatch+0x740>
            return besttag;
 80074bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80074be:	e022      	b.n	8007506 <lfs_dir_fetchmatch+0x786>
        } else if (lfs_tag_id(besttag) < dir->count) {
 80074c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fe faaa 	bl	8005a1c <lfs_tag_id>
 80074c8:	4603      	mov	r3, r0
 80074ca:	461a      	mov	r2, r3
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	8a9b      	ldrh	r3, [r3, #20]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d202      	bcs.n	80074da <lfs_dir_fetchmatch+0x75a>
            return LFS_ERR_NOENT;
 80074d4:	f06f 0301 	mvn.w	r3, #1
 80074d8:	e015      	b.n	8007506 <lfs_dir_fetchmatch+0x786>
        } else {
            return 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	e013      	b.n	8007506 <lfs_dir_fetchmatch+0x786>
    for (int i = 0; i < 2; i++) {
 80074de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	f77f ad00 	ble.w	8006ee6 <lfs_dir_fetchmatch+0x166>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	4909      	ldr	r1, [pc, #36]	@ (8007514 <lfs_dir_fetchmatch+0x794>)
 80074f0:	9101      	str	r1, [sp, #4]
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	4613      	mov	r3, r2
 80074f6:	f240 5259 	movw	r2, #1369	@ 0x559
 80074fa:	4907      	ldr	r1, [pc, #28]	@ (8007518 <lfs_dir_fetchmatch+0x798>)
 80074fc:	4807      	ldr	r0, [pc, #28]	@ (800751c <lfs_dir_fetchmatch+0x79c>)
 80074fe:	f005 fc5d 	bl	800cdbc <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8007502:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 8007506:	4618      	mov	r0, r3
 8007508:	3784      	adds	r7, #132	@ 0x84
 800750a:	46bd      	mov	sp, r7
 800750c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800750e:	bf00      	nop
 8007510:	7ffffc00 	.word	0x7ffffc00
 8007514:	0800eb2c 	.word	0x0800eb2c
 8007518:	0800ea1c 	.word	0x0800ea1c
 800751c:	0800eb38 	.word	0x0800eb38

08007520 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af04      	add	r7, sp, #16
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800752c:	2300      	movs	r3, #0
 800752e:	9303      	str	r3, [sp, #12]
 8007530:	2300      	movs	r3, #0
 8007532:	9302      	str	r3, [sp, #8]
 8007534:	2300      	movs	r3, #0
 8007536:	9301      	str	r3, [sp, #4]
 8007538:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	68b9      	ldr	r1, [r7, #8]
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f7ff fc1a 	bl	8006d80 <lfs_dir_fetchmatch>
 800754c:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
	...

08007558 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8007558:	b580      	push	{r7, lr}
 800755a:	b08a      	sub	sp, #40	@ 0x28
 800755c:	af02      	add	r7, sp, #8
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8007564:	f107 0310 	add.w	r3, r7, #16
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	4b12      	ldr	r3, [pc, #72]	@ (80075b4 <lfs_dir_getgstate+0x5c>)
 800756c:	4a12      	ldr	r2, [pc, #72]	@ (80075b8 <lfs_dir_getgstate+0x60>)
 800756e:	68b9      	ldr	r1, [r7, #8]
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f7fe fecf 	bl	8006314 <lfs_dir_get>
 8007576:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	2b00      	cmp	r3, #0
 800757c:	da05      	bge.n	800758a <lfs_dir_getgstate+0x32>
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	f113 0f02 	cmn.w	r3, #2
 8007584:	d001      	beq.n	800758a <lfs_dir_getgstate+0x32>
        return res;
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	e00f      	b.n	80075aa <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	f113 0f02 	cmn.w	r3, #2
 8007590:	d00a      	beq.n	80075a8 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8007592:	f107 0310 	add.w	r3, r7, #16
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe fb1c 	bl	8005bd4 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 800759c:	f107 0310 	add.w	r3, r7, #16
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fe fa6b 	bl	8005a7e <lfs_gstate_xor>
    }

    return 0;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3720      	adds	r7, #32
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	7ff0000c 	.word	0x7ff0000c
 80075b8:	7ff00000 	.word	0x7ff00000

080075bc <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80075bc:	b590      	push	{r4, r7, lr}
 80075be:	b08f      	sub	sp, #60	@ 0x3c
 80075c0:	af04      	add	r7, sp, #16
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 80075cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 80075d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d8:	689c      	ldr	r4, [r3, #8]
 80075da:	68b8      	ldr	r0, [r7, #8]
 80075dc:	f7fe fa2e 	bl	8005a3c <lfs_tag_size>
 80075e0:	4603      	mov	r3, r0
 80075e2:	4619      	mov	r1, r3
 80075e4:	4620      	mov	r0, r4
 80075e6:	f7fd fca6 	bl	8004f36 <lfs_min>
 80075ea:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 80075ec:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69fa      	ldr	r2, [r7, #28]
 80075f4:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 80075f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075f8:	6849      	ldr	r1, [r1, #4]
 80075fa:	69b8      	ldr	r0, [r7, #24]
 80075fc:	9003      	str	r0, [sp, #12]
 80075fe:	9102      	str	r1, [sp, #8]
 8007600:	9201      	str	r2, [sp, #4]
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	4622      	mov	r2, r4
 8007608:	2100      	movs	r1, #0
 800760a:	6a38      	ldr	r0, [r7, #32]
 800760c:	f7fd feba 	bl	8005384 <lfs_bd_cmp>
 8007610:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <lfs_dir_find_match+0x60>
        return res;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	e014      	b.n	8007646 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 800761c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761e:	689c      	ldr	r4, [r3, #8]
 8007620:	68b8      	ldr	r0, [r7, #8]
 8007622:	f7fe fa0b 	bl	8005a3c <lfs_tag_size>
 8007626:	4603      	mov	r3, r0
 8007628:	429c      	cmp	r4, r3
 800762a:	d00b      	beq.n	8007644 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800762c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762e:	689c      	ldr	r4, [r3, #8]
 8007630:	68b8      	ldr	r0, [r7, #8]
 8007632:	f7fe fa03 	bl	8005a3c <lfs_tag_size>
 8007636:	4603      	mov	r3, r0
 8007638:	429c      	cmp	r4, r3
 800763a:	d201      	bcs.n	8007640 <lfs_dir_find_match+0x84>
 800763c:	2301      	movs	r3, #1
 800763e:	e002      	b.n	8007646 <lfs_dir_find_match+0x8a>
 8007640:	2302      	movs	r3, #2
 8007642:	e000      	b.n	8007646 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	372c      	adds	r7, #44	@ 0x2c
 800764a:	46bd      	mov	sp, r7
 800764c:	bd90      	pop	{r4, r7, pc}
	...

08007650 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8007650:	b590      	push	{r4, r7, lr}
 8007652:	b093      	sub	sp, #76	@ 0x4c
 8007654:	af04      	add	r7, sp, #16
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
 800765c:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	637b      	str	r3, [r7, #52]	@ 0x34
    if (id) {
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8007670:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8007672:	4b6e      	ldr	r3, [pc, #440]	@ (800782c <lfs_dir_find+0x1dc>)
 8007674:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6a1a      	ldr	r2, [r3, #32]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8007686:	496a      	ldr	r1, [pc, #424]	@ (8007830 <lfs_dir_find+0x1e0>)
 8007688:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800768a:	f005 fbf1 	bl	800ce70 <strspn>
 800768e:	4602      	mov	r2, r0
 8007690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007692:	4413      	add	r3, r2
 8007694:	637b      	str	r3, [r7, #52]	@ 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8007696:	4966      	ldr	r1, [pc, #408]	@ (8007830 <lfs_dir_find+0x1e0>)
 8007698:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800769a:	f005 fbc6 	bl	800ce2a <strcspn>
 800769e:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 80076a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d105      	bne.n	80076b2 <lfs_dir_find+0x62>
 80076a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076a8:	781a      	ldrb	r2, [r3, #0]
 80076aa:	4b62      	ldr	r3, [pc, #392]	@ (8007834 <lfs_dir_find+0x1e4>)
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d00a      	beq.n	80076c8 <lfs_dir_find+0x78>
 80076b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d10c      	bne.n	80076d2 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 80076b8:	2202      	movs	r2, #2
 80076ba:	495f      	ldr	r1, [pc, #380]	@ (8007838 <lfs_dir_find+0x1e8>)
 80076bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80076be:	f005 fb8f 	bl	800cde0 <memcmp>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d104      	bne.n	80076d2 <lfs_dir_find+0x82>
            name += namelen;
 80076c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	4413      	add	r3, r2
 80076ce:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 80076d0:	e7d9      	b.n	8007686 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 80076d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d6:	4413      	add	r3, r2
 80076d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 80076da:	2301      	movs	r3, #1
 80076dc:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 80076de:	4954      	ldr	r1, [pc, #336]	@ (8007830 <lfs_dir_find+0x1e0>)
 80076e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80076e2:	f005 fbc5 	bl	800ce70 <strspn>
 80076e6:	4602      	mov	r2, r0
 80076e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ea:	4413      	add	r3, r2
 80076ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 80076ee:	4950      	ldr	r1, [pc, #320]	@ (8007830 <lfs_dir_find+0x1e0>)
 80076f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80076f2:	f005 fb9a 	bl	800ce2a <strcspn>
 80076f6:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d01d      	beq.n	800773a <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	2b02      	cmp	r3, #2
 8007702:	d112      	bne.n	800772a <lfs_dir_find+0xda>
 8007704:	2202      	movs	r2, #2
 8007706:	494c      	ldr	r1, [pc, #304]	@ (8007838 <lfs_dir_find+0x1e8>)
 8007708:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800770a:	f005 fb69 	bl	800cde0 <memcmp>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10a      	bne.n	800772a <lfs_dir_find+0xda>
                depth -= 1;
 8007714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007716:	3b01      	subs	r3, #1
 8007718:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 800771a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800771c:	2b00      	cmp	r3, #0
 800771e:	d107      	bne.n	8007730 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8007720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	4413      	add	r3, r2
 8007726:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 8007728:	e7ad      	b.n	8007686 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800772a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800772c:	3301      	adds	r3, #1
 800772e:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 8007730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007732:	6a3b      	ldr	r3, [r7, #32]
 8007734:	4413      	add	r3, r2
 8007736:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 8007738:	e7d1      	b.n	80076de <lfs_dir_find+0x8e>
                break;
 800773a:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 800773c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d101      	bne.n	8007748 <lfs_dir_find+0xf8>
            return tag;
 8007744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007746:	e06c      	b.n	8007822 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800774c:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800774e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007750:	4618      	mov	r0, r3
 8007752:	f7fe f939 	bl	80059c8 <lfs_tag_type3>
 8007756:	4603      	mov	r3, r0
 8007758:	2b02      	cmp	r3, #2
 800775a:	d002      	beq.n	8007762 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 800775c:	f06f 0313 	mvn.w	r3, #19
 8007760:	e05f      	b.n	8007822 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8007762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007764:	4618      	mov	r0, r3
 8007766:	f7fe f959 	bl	8005a1c <lfs_tag_id>
 800776a:	4603      	mov	r3, r0
 800776c:	461a      	mov	r2, r3
 800776e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8007772:	429a      	cmp	r2, r3
 8007774:	d01c      	beq.n	80077b0 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8007776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007778:	4618      	mov	r0, r3
 800777a:	f7fe f94f 	bl	8005a1c <lfs_tag_id>
 800777e:	4603      	mov	r3, r0
 8007780:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8007782:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007786:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800778e:	9200      	str	r2, [sp, #0]
 8007790:	4a2a      	ldr	r2, [pc, #168]	@ (800783c <lfs_dir_find+0x1ec>)
 8007792:	68b9      	ldr	r1, [r7, #8]
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f7fe fdbd 	bl	8006314 <lfs_dir_get>
 800779a:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	da01      	bge.n	80077a6 <lfs_dir_find+0x156>
                return res;
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	e03d      	b.n	8007822 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	3318      	adds	r3, #24
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fe f897 	bl	80058de <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 80077b6:	212f      	movs	r1, #47	@ 0x2f
 80077b8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80077ba:	f005 fb29 	bl	800ce10 <strchr>
 80077be:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <lfs_dir_find+0x178>
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	e000      	b.n	80077ca <lfs_dir_find+0x17a>
 80077c8:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	613a      	str	r2, [r7, #16]
 80077ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077d0:	617a      	str	r2, [r7, #20]
 80077d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077d4:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80077d6:	f107 0210 	add.w	r2, r7, #16
 80077da:	9203      	str	r2, [sp, #12]
 80077dc:	4a18      	ldr	r2, [pc, #96]	@ (8007840 <lfs_dir_find+0x1f0>)
 80077de:	9202      	str	r2, [sp, #8]
 80077e0:	9301      	str	r3, [sp, #4]
 80077e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 80077ea:	4622      	mov	r2, r4
 80077ec:	68b9      	ldr	r1, [r7, #8]
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f7ff fac6 	bl	8006d80 <lfs_dir_fetchmatch>
 80077f4:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 80077f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	da01      	bge.n	8007800 <lfs_dir_find+0x1b0>
                return tag;
 80077fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fe:	e010      	b.n	8007822 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8007800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007802:	2b00      	cmp	r3, #0
 8007804:	d004      	beq.n	8007810 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8007806:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780a:	4413      	add	r3, r2
 800780c:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 800780e:	e73a      	b.n	8007686 <lfs_dir_find+0x36>
            if (!dir->split) {
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	7ddb      	ldrb	r3, [r3, #23]
 8007814:	f083 0301 	eor.w	r3, r3, #1
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d0c8      	beq.n	80077b0 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 800781e:	f06f 0301 	mvn.w	r3, #1
    }
}
 8007822:	4618      	mov	r0, r3
 8007824:	373c      	adds	r7, #60	@ 0x3c
 8007826:	46bd      	mov	sp, r7
 8007828:	bd90      	pop	{r4, r7, pc}
 800782a:	bf00      	nop
 800782c:	002ffc00 	.word	0x002ffc00
 8007830:	0800eb78 	.word	0x0800eb78
 8007834:	0800eb7c 	.word	0x0800eb7c
 8007838:	0800eb80 	.word	0x0800eb80
 800783c:	700ffc00 	.word	0x700ffc00
 8007840:	080075bd 	.word	0x080075bd

08007844 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8007844:	b590      	push	{r4, r7, lr}
 8007846:	b08b      	sub	sp, #44	@ 0x2c
 8007848:	af04      	add	r7, sp, #16
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
 8007850:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f103 0010 	add.w	r0, r3, #16
 8007858:	68fc      	ldr	r4, [r7, #12]
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	6852      	ldr	r2, [r2, #4]
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	9103      	str	r1, [sp, #12]
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	9102      	str	r1, [sp, #8]
 800786a:	9201      	str	r2, [sp, #4]
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	2300      	movs	r3, #0
 8007870:	4622      	mov	r2, r4
 8007872:	4601      	mov	r1, r0
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f7fd fecb 	bl	8005610 <lfs_bd_prog>
 800787a:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <lfs_dir_commitprog+0x42>
        return err;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	e010      	b.n	80078a8 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	6879      	ldr	r1, [r7, #4]
 800788e:	4618      	mov	r0, r3
 8007890:	f004 fa2c 	bl	800bcec <lfs_crc>
 8007894:	4602      	mov	r2, r0
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	685a      	ldr	r2, [r3, #4]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	441a      	add	r2, r3
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	605a      	str	r2, [r3, #4]
    return 0;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	371c      	adds	r7, #28
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd90      	pop	{r4, r7, pc}

080078b0 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 80078b0:	b590      	push	{r4, r7, lr}
 80078b2:	b08f      	sub	sp, #60	@ 0x3c
 80078b4:	af04      	add	r7, sp, #16
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
 80078bc:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7fe f8c9 	bl	8005a56 <lfs_tag_dsize>
 80078c4:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	441a      	add	r2, r3
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d902      	bls.n	80078dc <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 80078d6:	f06f 031b 	mvn.w	r3, #27
 80078da:	e065      	b.n	80079a8 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	4053      	eors	r3, r2
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fd fbb7 	bl	800505c <lfs_tobe32>
 80078ee:	4603      	mov	r3, r0
 80078f0:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 80078f2:	f107 0214 	add.w	r2, r7, #20
 80078f6:	2304      	movs	r3, #4
 80078f8:	68b9      	ldr	r1, [r7, #8]
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f7ff ffa2 	bl	8007844 <lfs_dir_commitprog>
 8007900:	61f8      	str	r0, [r7, #28]
    if (err) {
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <lfs_dir_commitattr+0x5c>
        return err;
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	e04d      	b.n	80079a8 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	db0c      	blt.n	800792c <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8007912:	6a3b      	ldr	r3, [r7, #32]
 8007914:	3b04      	subs	r3, #4
 8007916:	683a      	ldr	r2, [r7, #0]
 8007918:	68b9      	ldr	r1, [r7, #8]
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f7ff ff92 	bl	8007844 <lfs_dir_commitprog>
 8007920:	61f8      	str	r0, [r7, #28]
        if (err) {
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d039      	beq.n	800799c <lfs_dir_commitattr+0xec>
            return err;
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	e03d      	b.n	80079a8 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8007930:	2300      	movs	r3, #0
 8007932:	627b      	str	r3, [r7, #36]	@ 0x24
 8007934:	e02d      	b.n	8007992 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8007936:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8007938:	6a3a      	ldr	r2, [r7, #32]
 800793a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793c:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800793e:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	69ba      	ldr	r2, [r7, #24]
 8007946:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8007948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800794a:	440a      	add	r2, r1
 800794c:	2101      	movs	r1, #1
 800794e:	9103      	str	r1, [sp, #12]
 8007950:	f107 0113 	add.w	r1, r7, #19
 8007954:	9102      	str	r1, [sp, #8]
 8007956:	9201      	str	r2, [sp, #4]
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	4623      	mov	r3, r4
 800795c:	4602      	mov	r2, r0
 800795e:	2100      	movs	r1, #0
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f7fd fbc3 	bl	80050ec <lfs_bd_read>
 8007966:	61f8      	str	r0, [r7, #28]
            if (err) {
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <lfs_dir_commitattr+0xc2>
                return err;
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	e01a      	b.n	80079a8 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8007972:	f107 0213 	add.w	r2, r7, #19
 8007976:	2301      	movs	r3, #1
 8007978:	68b9      	ldr	r1, [r7, #8]
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f7ff ff62 	bl	8007844 <lfs_dir_commitprog>
 8007980:	61f8      	str	r0, [r7, #28]
            if (err) {
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <lfs_dir_commitattr+0xdc>
                return err;
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	e00d      	b.n	80079a8 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800798c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798e:	3301      	adds	r3, #1
 8007990:	627b      	str	r3, [r7, #36]	@ 0x24
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	3b04      	subs	r3, #4
 8007996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007998:	429a      	cmp	r2, r3
 800799a:	d3cc      	bcc.n	8007936 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	609a      	str	r2, [r3, #8]
    return 0;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	372c      	adds	r7, #44	@ 0x2c
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd90      	pop	{r4, r7, pc}

080079b0 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 80079b0:	b590      	push	{r4, r7, lr}
 80079b2:	b097      	sub	sp, #92	@ 0x5c
 80079b4:	af04      	add	r7, sp, #16
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 80079be:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079c6:	69db      	ldr	r3, [r3, #28]
    const lfs_off_t end = lfs_alignup(
 80079c8:	4619      	mov	r1, r3
 80079ca:	4610      	mov	r0, r2
 80079cc:	f7fd fab3 	bl	8004f36 <lfs_min>
 80079d0:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079d6:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(
 80079d8:	4619      	mov	r1, r3
 80079da:	4610      	mov	r0, r2
 80079dc:	f7fd fad0 	bl	8004f80 <lfs_alignup>
 80079e0:	63b8      	str	r0, [r7, #56]	@ 0x38

    lfs_off_t off1 = 0;
 80079e2:	2300      	movs	r3, #0
 80079e4:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 80079e6:	2300      	movs	r3, #0
 80079e8:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 80079ea:	e0fe      	b.n	8007bea <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	3b04      	subs	r3, #4
 80079f6:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fd fa9b 	bl	8004f36 <lfs_min>
 8007a00:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	4413      	add	r3, r2
        lfs_off_t noff = (
 8007a08:	3304      	adds	r3, #4
 8007a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 8007a0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d206      	bcs.n	8007a22 <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 8007a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a16:	3b14      	subs	r3, #20
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007a1c:	f7fd fa8b 	bl	8004f36 <lfs_min>
 8007a20:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 8007a22:	23ff      	movs	r3, #255	@ 0xff
 8007a24:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 8007a26:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d35f      	bcc.n	8007aee <lfs_dir_commitcrc+0x13e>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a32:	69da      	ldr	r2, [r3, #28]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d855      	bhi.n	8007aee <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 8007a42:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a48:	6998      	ldr	r0, [r3, #24]
            int err = lfs_bd_read(lfs,
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	9203      	str	r2, [sp, #12]
 8007a52:	f107 021b 	add.w	r2, r7, #27
 8007a56:	9202      	str	r2, [sp, #8]
 8007a58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007a5a:	9201      	str	r2, [sp, #4]
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	4603      	mov	r3, r0
 8007a60:	460a      	mov	r2, r1
 8007a62:	2100      	movs	r1, #0
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7fd fb41 	bl	80050ec <lfs_bd_read>
 8007a6a:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 8007a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d005      	beq.n	8007a7e <lfs_dir_commitcrc+0xce>
 8007a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a74:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8007a78:	d001      	beq.n	8007a7e <lfs_dir_commitcrc+0xce>
                return err;
 8007a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a7c:	e101      	b.n	8007c82 <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a82:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 8007a84:	60bb      	str	r3, [r7, #8]
 8007a86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a8a:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8007a8c:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a92:	699c      	ldr	r4, [r3, #24]
                err = lfs_bd_crc(lfs,
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	f107 0108 	add.w	r1, r7, #8
 8007a9e:	3104      	adds	r1, #4
 8007aa0:	9103      	str	r1, [sp, #12]
 8007aa2:	9202      	str	r2, [sp, #8]
 8007aa4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007aa6:	9201      	str	r2, [sp, #4]
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	4623      	mov	r3, r4
 8007aac:	4602      	mov	r2, r0
 8007aae:	2100      	movs	r1, #0
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7fd fcb8 	bl	8005426 <lfs_bd_crc>
 8007ab6:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 8007ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d005      	beq.n	8007aca <lfs_dir_commitcrc+0x11a>
 8007abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8007ac4:	d001      	beq.n	8007aca <lfs_dir_commitcrc+0x11a>
                    return err;
 8007ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac8:	e010      	b.n	8007aec <lfs_dir_commitcrc+0x13c>
                }

                lfs_fcrc_tole32(&fcrc);
 8007aca:	f107 0308 	add.w	r3, r7, #8
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fe f8d8 	bl	8005c84 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 8007ad4:	f107 0308 	add.w	r3, r7, #8
 8007ad8:	4a6c      	ldr	r2, [pc, #432]	@ (8007c8c <lfs_dir_commitcrc+0x2dc>)
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7ff fee7 	bl	80078b0 <lfs_dir_commitattr>
 8007ae2:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 8007ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <lfs_dir_commitcrc+0x13e>
                    return err;
 8007aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 8007aec:	e0c9      	b.n	8007c82 <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 8007aee:	7efb      	ldrb	r3, [r7, #27]
 8007af0:	43db      	mvns	r3, r3
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	09db      	lsrs	r3, r3, #7
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007afc:	051a      	lsls	r2, r3, #20
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b04:	1acb      	subs	r3, r1, r3
 8007b06:	3b04      	subs	r3, #4
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 8007b0e:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8007b12:	62bb      	str	r3, [r7, #40]	@ 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1a:	4053      	eors	r3, r2
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fd fa9d 	bl	800505c <lfs_tobe32>
 8007b22:	4603      	mov	r3, r0
 8007b24:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	f107 0110 	add.w	r1, r7, #16
 8007b2e:	2204      	movs	r2, #4
 8007b30:	4618      	mov	r0, r3
 8007b32:	f004 f8db 	bl	800bcec <lfs_crc>
 8007b36:	4602      	mov	r2, r0
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fd fa73 	bl	800502c <lfs_tole32>
 8007b46:	4603      	mov	r3, r0
 8007b48:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f103 0010 	add.w	r0, r3, #16
 8007b50:	687c      	ldr	r4, [r7, #4]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	6852      	ldr	r2, [r2, #4]
 8007b5a:	2108      	movs	r1, #8
 8007b5c:	9103      	str	r1, [sp, #12]
 8007b5e:	f107 0110 	add.w	r1, r7, #16
 8007b62:	9102      	str	r1, [sp, #8]
 8007b64:	9201      	str	r2, [sp, #4]
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	2300      	movs	r3, #0
 8007b6a:	4622      	mov	r2, r4
 8007b6c:	4601      	mov	r1, r0
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7fd fd4e 	bl	8005610 <lfs_bd_prog>
 8007b74:	6278      	str	r0, [r7, #36]	@ 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 8007b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d001      	beq.n	8007b80 <lfs_dir_commitcrc+0x1d0>
            return err;
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7e:	e080      	b.n	8007c82 <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8007b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d106      	bne.n	8007b94 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off = noff;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007b98:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 8007b9a:	7efb      	ldrb	r3, [r7, #27]
 8007b9c:	43db      	mvns	r3, r3
 8007b9e:	061b      	lsls	r3, r3, #24
 8007ba0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8007ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba6:	405a      	eors	r2, r3
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007bb2:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 8007bb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d208      	bcs.n	8007bce <lfs_dir_commitcrc+0x21e>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	695a      	ldr	r2, [r3, #20]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc6:	4413      	add	r3, r2
 8007bc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d30d      	bcc.n	8007bea <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f103 0110 	add.w	r1, r3, #16
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f7fd fce5 	bl	80055a8 <lfs_bd_sync>
 8007bde:	6238      	str	r0, [r7, #32]
            if (err) {
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d001      	beq.n	8007bea <lfs_dir_commitcrc+0x23a>
                return err;
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	e04b      	b.n	8007c82 <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	f63f aefb 	bhi.w	80079ec <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t crc = 0xffffffff;
 8007bfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c00:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c06:	1d1c      	adds	r4, r3, #4
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007c0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c10:	1a8a      	subs	r2, r1, r2
 8007c12:	f107 011c 	add.w	r1, r7, #28
 8007c16:	9103      	str	r1, [sp, #12]
 8007c18:	9202      	str	r2, [sp, #8]
 8007c1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c1c:	9201      	str	r2, [sp, #4]
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	4623      	mov	r3, r4
 8007c22:	4602      	mov	r2, r0
 8007c24:	2100      	movs	r1, #0
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7fd fbfd 	bl	8005426 <lfs_bd_crc>
 8007c2c:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <lfs_dir_commitcrc+0x288>
        return err;
 8007c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c36:	e024      	b.n	8007c82 <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d002      	beq.n	8007c46 <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 8007c40:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8007c44:	e01d      	b.n	8007c82 <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f107 021c 	add.w	r2, r7, #28
 8007c50:	9203      	str	r2, [sp, #12]
 8007c52:	2204      	movs	r2, #4
 8007c54:	9202      	str	r2, [sp, #8]
 8007c56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c58:	9201      	str	r2, [sp, #4]
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	2304      	movs	r3, #4
 8007c5e:	460a      	mov	r2, r1
 8007c60:	2100      	movs	r1, #0
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7fd fbdf 	bl	8005426 <lfs_bd_crc>
 8007c68:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <lfs_dir_commitcrc+0x2c4>
        return err;
 8007c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c72:	e006      	b.n	8007c82 <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 8007c7a:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8007c7e:	e000      	b.n	8007c82 <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	374c      	adds	r7, #76	@ 0x4c
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd90      	pop	{r4, r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	5ffffc08 	.word	0x5ffffc08

08007c90 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08a      	sub	sp, #40	@ 0x28
 8007c94:	af04      	add	r7, sp, #16
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	617b      	str	r3, [r7, #20]
 8007c9e:	e016      	b.n	8007cce <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	bfb8      	it	lt
 8007cac:	425b      	neglt	r3, r3
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7fe f9ae 	bl	8006018 <lfs_alloc>
 8007cbc:	60f8      	str	r0, [r7, #12]
        if (err) {
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d001      	beq.n	8007cc8 <lfs_dir_alloc+0x38>
            return err;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	e058      	b.n	8007d7a <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	617b      	str	r3, [r7, #20]
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	dde5      	ble.n	8007ca0 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8007cda:	6879      	ldr	r1, [r7, #4]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8007ce4:	2004      	movs	r0, #4
 8007ce6:	9003      	str	r0, [sp, #12]
 8007ce8:	9202      	str	r2, [sp, #8]
 8007cea:	2200      	movs	r2, #0
 8007cec:	9201      	str	r2, [sp, #4]
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	2304      	movs	r3, #4
 8007cf2:	460a      	mov	r2, r1
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7fd f9f8 	bl	80050ec <lfs_bd_read>
 8007cfc:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fd f987 	bl	8005016 <lfs_fromle32>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d005      	beq.n	8007d20 <lfs_dir_alloc+0x90>
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8007d1a:	d001      	beq.n	8007d20 <lfs_dir_alloc+0x90>
        return err;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	e02c      	b.n	8007d7a <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	dd0e      	ble.n	8007d48 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	689a      	ldr	r2, [r3, #8]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d34:	3301      	adds	r3, #1
 8007d36:	f043 0301 	orr.w	r3, r3, #1
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	f7fd f91f 	bl	8004f80 <lfs_alignup>
 8007d42:	4602      	mov	r2, r0
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	2204      	movs	r2, #4
 8007d4c:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d54:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d62:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d6a:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2200      	movs	r2, #0
 8007d76:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b092      	sub	sp, #72	@ 0x48
 8007d86:	af04      	add	r7, sp, #16
 8007d88:	60f8      	str	r0, [r7, #12]
 8007d8a:	60b9      	str	r1, [r7, #8]
 8007d8c:	607a      	str	r2, [r7, #4]
 8007d8e:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8007d90:	f107 0310 	add.w	r3, r7, #16
 8007d94:	4619      	mov	r1, r3
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f7ff ff7a 	bl	8007c90 <lfs_dir_alloc>
 8007d9c:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 8007d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <lfs_dir_split+0x26>
        return err;
 8007da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da6:	e03c      	b.n	8007e22 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	7ddb      	ldrb	r3, [r3, #23]
 8007dac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8007dbc:	f107 0110 	add.w	r1, r7, #16
 8007dc0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007dc4:	9302      	str	r3, [sp, #8]
 8007dc6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007dca:	9301      	str	r3, [sp, #4]
 8007dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f000 f879 	bl	8007ecc <lfs_dir_compact>
 8007dda:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	da01      	bge.n	8007de6 <lfs_dir_split+0x64>
        return res;
 8007de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de4:	e01d      	b.n	8007e22 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	2201      	movs	r2, #1
 8007df6:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3320      	adds	r3, #32
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4610      	mov	r0, r2
 8007e02:	f7fd fd15 	bl	8005830 <lfs_pair_cmp>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d109      	bne.n	8007e20 <lfs_dir_split+0x9e>
 8007e0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d105      	bne.n	8007e20 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3738      	adds	r7, #56	@ 0x38
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b086      	sub	sp, #24
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8007e3a:	68b8      	ldr	r0, [r7, #8]
 8007e3c:	f7fd fe0b 	bl	8005a56 <lfs_tag_dsize>
 8007e40:	4602      	mov	r2, r0
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	441a      	add	r2, r3
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	601a      	str	r2, [r3, #0]
    return 0;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b086      	sub	sp, #24
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	6818      	ldr	r0, [r3, #0]
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	6859      	ldr	r1, [r3, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	f7ff fd1d 	bl	80078b0 <lfs_dir_commitattr>
 8007e76:	4603      	mov	r3, r0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3718      	adds	r7, #24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	dd11      	ble.n	8007eb8 <lfs_dir_needsrelocation+0x38>
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007e9e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007ea0:	3201      	adds	r2, #1
 8007ea2:	f042 0201 	orr.w	r2, r2, #1
 8007ea6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007eaa:	fb01 f202 	mul.w	r2, r1, r2
 8007eae:	1a9b      	subs	r3, r3, r2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <lfs_dir_needsrelocation+0x38>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e000      	b.n	8007eba <lfs_dir_needsrelocation+0x3a>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	b2db      	uxtb	r3, r3
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b0a4      	sub	sp, #144	@ 0x90
 8007ed0:	af0a      	add	r7, sp, #40	@ 0x28
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
 8007ed8:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8007eda:	2300      	movs	r3, #0
 8007edc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8007ee0:	68b9      	ldr	r1, [r7, #8]
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f7ff ffcc 	bl	8007e80 <lfs_dir_needsrelocation>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	1c5a      	adds	r2, r3, #1
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8007ef8:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00e      	beq.n	8007f1e <lfs_dir_compact+0x52>
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2200      	movs	r2, #0
 8007f04:	657a      	str	r2, [r7, #84]	@ 0x54
 8007f06:	2201      	movs	r2, #1
 8007f08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007f0a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8007f0e:	4611      	mov	r1, r2
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fd fc8d 	bl	8005830 <lfs_pair_cmp>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f040 8155 	bne.w	80081c8 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8007f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f24:	2300      	movs	r3, #0
 8007f26:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f34:	2300      	movs	r3, #0
 8007f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d004      	beq.n	8007f4c <lfs_dir_compact+0x80>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f48:	3b08      	subs	r3, #8
 8007f4a:	e003      	b.n	8007f54 <lfs_dir_compact+0x88>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f50:	69db      	ldr	r3, [r3, #28]
 8007f52:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8007f54:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f7fd fc05 	bl	800576c <lfs_bd_erase>
 8007f62:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8007f64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d006      	beq.n	8007f78 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8007f6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f6c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8007f70:	f000 812c 	beq.w	80081cc <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8007f74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f76:	e188      	b.n	800828a <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fd f855 	bl	800502c <lfs_tole32>
 8007f82:	4602      	mov	r2, r0
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8007f8e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8007f92:	2304      	movs	r3, #4
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f7ff fc55 	bl	8007844 <lfs_dir_commitprog>
 8007f9a:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fd f838 	bl	8005016 <lfs_fromle32>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	609a      	str	r2, [r3, #8]
            if (err) {
 8007fac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d006      	beq.n	8007fc0 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8007fb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fb4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8007fb8:	f000 810a 	beq.w	80081d0 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8007fbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fbe:	e164      	b.n	800828a <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8007fc0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8007fc4:	425b      	negs	r3, r3
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	637a      	str	r2, [r7, #52]	@ 0x34
 8007fce:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8007fd2:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 8007fd4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8007fd8:	9208      	str	r2, [sp, #32]
 8007fda:	4aae      	ldr	r2, [pc, #696]	@ (8008294 <lfs_dir_compact+0x3c8>)
 8007fdc:	9207      	str	r2, [sp, #28]
 8007fde:	9306      	str	r3, [sp, #24]
 8007fe0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8007fe4:	9305      	str	r3, [sp, #20]
 8007fe6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8007fea:	9304      	str	r3, [sp, #16]
 8007fec:	2300      	movs	r3, #0
 8007fee:	9303      	str	r3, [sp, #12]
 8007ff0:	4ba9      	ldr	r3, [pc, #676]	@ (8008298 <lfs_dir_compact+0x3cc>)
 8007ff2:	9302      	str	r3, [sp, #8]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	9301      	str	r3, [sp, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008000:	2200      	movs	r2, #0
 8008002:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f7fe fad7 	bl	80065b8 <lfs_dir_traverse>
 800800a:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 800800c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800800e:	2b00      	cmp	r3, #0
 8008010:	d006      	beq.n	8008020 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8008012:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008014:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8008018:	f000 80dc 	beq.w	80081d4 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 800801c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800801e:	e134      	b.n	800828a <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	3318      	adds	r3, #24
 8008024:	4618      	mov	r0, r3
 8008026:	f7fd fbe8 	bl	80057fa <lfs_pair_isnull>
 800802a:	4603      	mov	r3, r0
 800802c:	f083 0301 	eor.w	r3, r3, #1
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d022      	beq.n	800807c <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	3318      	adds	r3, #24
 800803a:	4618      	mov	r0, r3
 800803c:	f7fd fc69 	bl	8005912 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	7ddb      	ldrb	r3, [r3, #23]
 8008044:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8008048:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800804a:	4a94      	ldr	r2, [pc, #592]	@ (800829c <lfs_dir_compact+0x3d0>)
 800804c:	431a      	orrs	r2, r3
                        dir->tail);
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8008052:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f7ff fc2a 	bl	80078b0 <lfs_dir_commitattr>
 800805c:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	3318      	adds	r3, #24
 8008062:	4618      	mov	r0, r3
 8008064:	f7fd fc3b 	bl	80058de <lfs_pair_fromle32>
                if (err) {
 8008068:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800806a:	2b00      	cmp	r3, #0
 800806c:	d006      	beq.n	800807c <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 800806e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008070:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8008074:	f000 80b0 	beq.w	80081d8 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8008078:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800807a:	e106      	b.n	800828a <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 800807c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008080:	2200      	movs	r2, #0
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	605a      	str	r2, [r3, #4]
 8008086:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8008088:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800808c:	f083 0301 	eor.w	r3, r3, #1
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d011      	beq.n	80080ba <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800809c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80080a0:	4611      	mov	r1, r2
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fd fceb 	bl	8005a7e <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80080ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80080b2:	4611      	mov	r1, r2
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fd fce2 	bl	8005a7e <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80080c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80080c4:	4611      	mov	r1, r2
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fd fcd9 	bl	8005a7e <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80080cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80080d2:	f023 0303 	bic.w	r3, r3, #3
 80080d6:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 80080d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80080dc:	461a      	mov	r2, r3
 80080de:	68b9      	ldr	r1, [r7, #8]
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f7ff fa39 	bl	8007558 <lfs_dir_getgstate>
 80080e6:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 80080e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <lfs_dir_compact+0x226>
                return err;
 80080ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080f0:	e0cb      	b.n	800828a <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 80080f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fd fce6 	bl	8005ac8 <lfs_gstate_iszero>
 80080fc:	4603      	mov	r3, r0
 80080fe:	f083 0301 	eor.w	r3, r3, #1
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b00      	cmp	r3, #0
 8008106:	d016      	beq.n	8008136 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8008108:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800810c:	4618      	mov	r0, r3
 800810e:	f7fd fd81 	bl	8005c14 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8008112:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008116:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800811a:	4a61      	ldr	r2, [pc, #388]	@ (80082a0 <lfs_dir_compact+0x3d4>)
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f7ff fbc7 	bl	80078b0 <lfs_dir_commitattr>
 8008122:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8008124:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008126:	2b00      	cmp	r3, #0
 8008128:	d005      	beq.n	8008136 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 800812a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800812c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8008130:	d054      	beq.n	80081dc <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8008132:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008134:	e0a9      	b.n	800828a <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8008136:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800813a:	4619      	mov	r1, r3
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f7ff fc37 	bl	80079b0 <lfs_dir_commitcrc>
 8008142:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8008144:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008146:	2b00      	cmp	r3, #0
 8008148:	d005      	beq.n	8008156 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 800814a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800814c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8008150:	d046      	beq.n	80081e0 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8008152:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008154:	e099      	b.n	800828a <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8008156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800815c:	6992      	ldr	r2, [r2, #24]
 800815e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008162:	fb01 f202 	mul.w	r2, r1, r2
 8008166:	1a9b      	subs	r3, r3, r2
 8008168:	2b00      	cmp	r3, #0
 800816a:	d006      	beq.n	800817a <lfs_dir_compact+0x2ae>
 800816c:	4b4d      	ldr	r3, [pc, #308]	@ (80082a4 <lfs_dir_compact+0x3d8>)
 800816e:	4a4e      	ldr	r2, [pc, #312]	@ (80082a8 <lfs_dir_compact+0x3dc>)
 8008170:	f640 0106 	movw	r1, #2054	@ 0x806
 8008174:	484d      	ldr	r0, [pc, #308]	@ (80082ac <lfs_dir_compact+0x3e0>)
 8008176:	f004 fbcb 	bl	800c910 <__assert_func>
            lfs_pair_swap(dir->pair);
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	4618      	mov	r0, r3
 800817e:	f7fd fb27 	bl	80057d0 <lfs_pair_swap>
            dir->count = end - begin;
 8008182:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8008186:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	b29a      	uxth	r2, r3
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8008192:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8008198:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	3348      	adds	r3, #72	@ 0x48
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]
 80081a6:	605a      	str	r2, [r3, #4]
 80081a8:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80081aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80081ae:	f083 0301 	eor.w	r3, r3, #1
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d065      	beq.n	8008284 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	333c      	adds	r3, #60	@ 0x3c
 80081be:	3230      	adds	r2, #48	@ 0x30
 80081c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80081c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 80081c6:	e05d      	b.n	8008284 <lfs_dir_compact+0x3b8>
        goto relocate;
 80081c8:	bf00      	nop
 80081ca:	e00a      	b.n	80081e2 <lfs_dir_compact+0x316>
                    goto relocate;
 80081cc:	bf00      	nop
 80081ce:	e008      	b.n	80081e2 <lfs_dir_compact+0x316>
                    goto relocate;
 80081d0:	bf00      	nop
 80081d2:	e006      	b.n	80081e2 <lfs_dir_compact+0x316>
                    goto relocate;
 80081d4:	bf00      	nop
 80081d6:	e004      	b.n	80081e2 <lfs_dir_compact+0x316>
                        goto relocate;
 80081d8:	bf00      	nop
 80081da:	e002      	b.n	80081e2 <lfs_dir_compact+0x316>
                        goto relocate;
 80081dc:	bf00      	nop
 80081de:	e000      	b.n	80081e2 <lfs_dir_compact+0x316>
                    goto relocate;
 80081e0:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 80081e2:	2301      	movs	r3, #1
 80081e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	3310      	adds	r3, #16
 80081ec:	4619      	mov	r1, r3
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f7fc ff57 	bl	80050a2 <lfs_cache_drop>
        if (!tired) {
 80081f4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80081f8:	f083 0301 	eor.w	r3, r3, #1
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d009      	beq.n	8008216 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	4a2a      	ldr	r2, [pc, #168]	@ (80082b0 <lfs_dir_compact+0x3e4>)
 8008208:	9200      	str	r2, [sp, #0]
 800820a:	f640 0218 	movw	r2, #2072	@ 0x818
 800820e:	4927      	ldr	r1, [pc, #156]	@ (80082ac <lfs_dir_compact+0x3e0>)
 8008210:	4828      	ldr	r0, [pc, #160]	@ (80082b4 <lfs_dir_compact+0x3e8>)
 8008212:	f004 fdd3 	bl	800cdbc <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	2200      	movs	r2, #0
 800821a:	617a      	str	r2, [r7, #20]
 800821c:	2201      	movs	r2, #1
 800821e:	61ba      	str	r2, [r7, #24]
 8008220:	f107 0214 	add.w	r2, r7, #20
 8008224:	4611      	mov	r1, r2
 8008226:	4618      	mov	r0, r3
 8008228:	f7fd fb02 	bl	8005830 <lfs_pair_cmp>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10c      	bne.n	800824c <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	4a1e      	ldr	r2, [pc, #120]	@ (80082b0 <lfs_dir_compact+0x3e4>)
 8008238:	9200      	str	r2, [sp, #0]
 800823a:	f640 021d 	movw	r2, #2077	@ 0x81d
 800823e:	491b      	ldr	r1, [pc, #108]	@ (80082ac <lfs_dir_compact+0x3e0>)
 8008240:	481d      	ldr	r0, [pc, #116]	@ (80082b8 <lfs_dir_compact+0x3ec>)
 8008242:	f004 fdbb 	bl	800cdbc <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8008246:	f06f 031b 	mvn.w	r3, #27
 800824a:	e01e      	b.n	800828a <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	3304      	adds	r3, #4
 8008250:	4619      	mov	r1, r3
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f7fd fee0 	bl	8006018 <lfs_alloc>
 8008258:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800825a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00c      	beq.n	800827a <lfs_dir_compact+0x3ae>
 8008260:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008262:	f113 0f1c 	cmn.w	r3, #28
 8008266:	d106      	bne.n	8008276 <lfs_dir_compact+0x3aa>
 8008268:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800826c:	f083 0301 	eor.w	r3, r3, #1
 8008270:	b2db      	uxtb	r3, r3
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <lfs_dir_compact+0x3ae>
            return err;
 8008276:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008278:	e007      	b.n	800828a <lfs_dir_compact+0x3be>
        }

        tired = false;
 800827a:	2300      	movs	r3, #0
 800827c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 8008280:	bf00      	nop
    while (true) {
 8008282:	e64c      	b.n	8007f1e <lfs_dir_compact+0x52>
        break;
 8008284:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8008286:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800828a:	4618      	mov	r0, r3
 800828c:	3768      	adds	r7, #104	@ 0x68
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	08007e57 	.word	0x08007e57
 8008298:	400ffc00 	.word	0x400ffc00
 800829c:	000ffc08 	.word	0x000ffc08
 80082a0:	7ffffc0c 	.word	0x7ffffc0c
 80082a4:	0800eb84 	.word	0x0800eb84
 80082a8:	0800f790 	.word	0x0800f790
 80082ac:	0800ea1c 	.word	0x0800ea1c
 80082b0:	0800eb2c 	.word	0x0800eb2c
 80082b4:	0800ebac 	.word	0x0800ebac
 80082b8:	0800ebd0 	.word	0x0800ebd0

080082bc <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80082bc:	b590      	push	{r4, r7, lr}
 80082be:	b097      	sub	sp, #92	@ 0x5c
 80082c0:	af0a      	add	r7, sp, #40	@ 0x28
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
 80082c8:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 80082ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80082ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 80082d0:	e058      	b.n	8008384 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 80082d2:	2300      	movs	r3, #0
 80082d4:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 80082d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d8:	b29b      	uxth	r3, r3
 80082da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082dc:	b292      	uxth	r2, r2
 80082de:	4252      	negs	r2, r2
 80082e0:	b292      	uxth	r2, r2
 80082e2:	b212      	sxth	r2, r2
 80082e4:	f107 0118 	add.w	r1, r7, #24
 80082e8:	9108      	str	r1, [sp, #32]
 80082ea:	4979      	ldr	r1, [pc, #484]	@ (80084d0 <lfs_dir_splittingcompact+0x214>)
 80082ec:	9107      	str	r1, [sp, #28]
 80082ee:	9206      	str	r2, [sp, #24]
 80082f0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80082f4:	9205      	str	r2, [sp, #20]
 80082f6:	9304      	str	r3, [sp, #16]
 80082f8:	2300      	movs	r3, #0
 80082fa:	9303      	str	r3, [sp, #12]
 80082fc:	4b75      	ldr	r3, [pc, #468]	@ (80084d4 <lfs_dir_splittingcompact+0x218>)
 80082fe:	9302      	str	r3, [sp, #8]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	9301      	str	r3, [sp, #4]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800830c:	2200      	movs	r2, #0
 800830e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f7fe f951 	bl	80065b8 <lfs_dir_traverse>
 8008316:	62b8      	str	r0, [r7, #40]	@ 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8008318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <lfs_dir_splittingcompact+0x66>
                return err;
 800831e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008320:	e0d2      	b.n	80084c8 <lfs_dir_splittingcompact+0x20c>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8008322:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8008326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	2bfe      	cmp	r3, #254	@ 0xfe
 800832c:	d822      	bhi.n	8008374 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008332:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8008334:	f1a3 0428 	sub.w	r4, r3, #40	@ 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800833c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    && size <= lfs_min(
 800833e:	2b00      	cmp	r3, #0
 8008340:	d004      	beq.n	800834c <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    && size <= lfs_min(
 8008348:	085b      	lsrs	r3, r3, #1
 800834a:	e003      	b.n	8008354 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008350:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8008352:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008358:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(
 800835a:	4611      	mov	r1, r2
 800835c:	4618      	mov	r0, r3
 800835e:	f7fc fe0f 	bl	8004f80 <lfs_alignup>
 8008362:	4603      	mov	r3, r0
 8008364:	4619      	mov	r1, r3
 8008366:	4620      	mov	r0, r4
 8008368:	f7fc fde5 	bl	8004f36 <lfs_min>
 800836c:	4602      	mov	r2, r0
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	429a      	cmp	r2, r3
 8008372:	d20e      	bcs.n	8008392 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8008374:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8008378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	085b      	lsrs	r3, r3, #1
 800837e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008380:	4413      	add	r3, r2
 8008382:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 8008384:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8008388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	2b01      	cmp	r3, #1
 800838e:	d8a0      	bhi.n	80082d2 <lfs_dir_splittingcompact+0x16>
 8008390:	e000      	b.n	8008394 <lfs_dir_splittingcompact+0xd8>
                break;
 8008392:	bf00      	nop
        }

        if (split == begin) {
 8008394:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008398:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800839a:	429a      	cmp	r2, r3
 800839c:	d02d      	beq.n	80083fa <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800839e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80083a6:	9202      	str	r2, [sp, #8]
 80083a8:	9301      	str	r3, [sp, #4]
 80083aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	68b9      	ldr	r1, [r7, #8]
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f7ff fce4 	bl	8007d82 <lfs_dir_split>
 80083ba:	6278      	str	r0, [r7, #36]	@ 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 80083bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d005      	beq.n	80083ce <lfs_dir_splittingcompact+0x112>
 80083c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c4:	f113 0f1c 	cmn.w	r3, #28
 80083c8:	d001      	beq.n	80083ce <lfs_dir_splittingcompact+0x112>
            return err;
 80083ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083cc:	e07c      	b.n	80084c8 <lfs_dir_splittingcompact+0x20c>
        }

        if (err) {
 80083ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00e      	beq.n	80083f2 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	493e      	ldr	r1, [pc, #248]	@ (80084d8 <lfs_dir_splittingcompact+0x21c>)
 80083de:	9101      	str	r1, [sp, #4]
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	4613      	mov	r3, r2
 80083e4:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 80083e8:	493c      	ldr	r1, [pc, #240]	@ (80084dc <lfs_dir_splittingcompact+0x220>)
 80083ea:	483d      	ldr	r0, [pc, #244]	@ (80084e0 <lfs_dir_splittingcompact+0x224>)
 80083ec:	f004 fce6 	bl	800cdbc <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 80083f0:	e004      	b.n	80083fc <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 80083f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    while (true) {
 80083f8:	e767      	b.n	80082ca <lfs_dir_splittingcompact+0xe>
            break;
 80083fa:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 80083fc:	68b9      	ldr	r1, [r7, #8]
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f7ff fd3e 	bl	8007e80 <lfs_dir_needsrelocation>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d04f      	beq.n	80084aa <lfs_dir_splittingcompact+0x1ee>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	2200      	movs	r2, #0
 800840e:	613a      	str	r2, [r7, #16]
 8008410:	2201      	movs	r2, #1
 8008412:	617a      	str	r2, [r7, #20]
 8008414:	f107 0210 	add.w	r2, r7, #16
 8008418:	4611      	mov	r1, r2
 800841a:	4618      	mov	r0, r3
 800841c:	f7fd fa08 	bl	8005830 <lfs_pair_cmp>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d141      	bne.n	80084aa <lfs_dir_splittingcompact+0x1ee>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f003 faee 	bl	800ba08 <lfs_fs_size_>
 800842c:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 800842e:	6a3b      	ldr	r3, [r7, #32]
 8008430:	2b00      	cmp	r3, #0
 8008432:	da01      	bge.n	8008438 <lfs_dir_splittingcompact+0x17c>
            return size;
 8008434:	6a3b      	ldr	r3, [r7, #32]
 8008436:	e047      	b.n	80084c8 <lfs_dir_splittingcompact+0x20c>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800843c:	6a3b      	ldr	r3, [r7, #32]
 800843e:	1ad2      	subs	r2, r2, r3
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008444:	08db      	lsrs	r3, r3, #3
 8008446:	429a      	cmp	r2, r3
 8008448:	d92f      	bls.n	80084aa <lfs_dir_splittingcompact+0x1ee>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	4a22      	ldr	r2, [pc, #136]	@ (80084d8 <lfs_dir_splittingcompact+0x21c>)
 8008450:	9200      	str	r2, [sp, #0]
 8008452:	f640 0286 	movw	r2, #2182	@ 0x886
 8008456:	4921      	ldr	r1, [pc, #132]	@ (80084dc <lfs_dir_splittingcompact+0x220>)
 8008458:	4822      	ldr	r0, [pc, #136]	@ (80084e4 <lfs_dir_splittingcompact+0x228>)
 800845a:	f004 fcaf 	bl	800cdbc <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800845e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008462:	9302      	str	r3, [sp, #8]
 8008464:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008468:	9301      	str	r3, [sp, #4]
 800846a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	68b9      	ldr	r1, [r7, #8]
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f7ff fc84 	bl	8007d82 <lfs_dir_split>
 800847a:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d005      	beq.n	800848e <lfs_dir_splittingcompact+0x1d2>
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	f113 0f1c 	cmn.w	r3, #28
 8008488:	d001      	beq.n	800848e <lfs_dir_splittingcompact+0x1d2>
                return err;
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	e01c      	b.n	80084c8 <lfs_dir_splittingcompact+0x20c>
            }

            if (err) {
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d007      	beq.n	80084a4 <lfs_dir_splittingcompact+0x1e8>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8008494:	4b10      	ldr	r3, [pc, #64]	@ (80084d8 <lfs_dir_splittingcompact+0x21c>)
 8008496:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 800849a:	4910      	ldr	r1, [pc, #64]	@ (80084dc <lfs_dir_splittingcompact+0x220>)
 800849c:	4812      	ldr	r0, [pc, #72]	@ (80084e8 <lfs_dir_splittingcompact+0x22c>)
 800849e:	f004 fc8d 	bl	800cdbc <iprintf>
 80084a2:	e002      	b.n	80084aa <lfs_dir_splittingcompact+0x1ee>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 80084a4:	2301      	movs	r3, #1
 80084a6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 80084aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80084ae:	9302      	str	r3, [sp, #8]
 80084b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80084b4:	9301      	str	r3, [sp, #4]
 80084b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	68b9      	ldr	r1, [r7, #8]
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f7ff fd03 	bl	8007ecc <lfs_dir_compact>
 80084c6:	4603      	mov	r3, r0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3734      	adds	r7, #52	@ 0x34
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd90      	pop	{r4, r7, pc}
 80084d0:	08007e2b 	.word	0x08007e2b
 80084d4:	400ffc00 	.word	0x400ffc00
 80084d8:	0800eb2c 	.word	0x0800eb2c
 80084dc:	0800ea1c 	.word	0x0800ea1c
 80084e0:	0800ec08 	.word	0x0800ec08
 80084e4:	0800ec38 	.word	0x0800ec38
 80084e8:	0800ec68 	.word	0x0800ec68

080084ec <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 80084ec:	b5b0      	push	{r4, r5, r7, lr}
 80084ee:	b0a6      	sub	sp, #152	@ 0x98
 80084f0:	af0a      	add	r7, sp, #40	@ 0x28
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
 80084f8:	603b      	str	r3, [r7, #0]
    int state = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 80084fe:	2300      	movs	r3, #0
 8008500:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 8008504:	2300      	movs	r3, #0
 8008506:	667b      	str	r3, [r7, #100]	@ 0x64
 8008508:	e06d      	b.n	80085e6 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800850a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800850c:	00db      	lsls	r3, r3, #3
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	4413      	add	r3, r2
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4618      	mov	r0, r3
 8008516:	f7fd fa57 	bl	80059c8 <lfs_tag_type3>
 800851a:	4603      	mov	r3, r0
 800851c:	461a      	mov	r2, r3
 800851e:	f240 4301 	movw	r3, #1025	@ 0x401
 8008522:	429a      	cmp	r2, r3
 8008524:	d106      	bne.n	8008534 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	8a9b      	ldrh	r3, [r3, #20]
 800852a:	3301      	adds	r3, #1
 800852c:	b29a      	uxth	r2, r3
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	829a      	strh	r2, [r3, #20]
 8008532:	e055      	b.n	80085e0 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8008534:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008536:	00db      	lsls	r3, r3, #3
 8008538:	683a      	ldr	r2, [r7, #0]
 800853a:	4413      	add	r3, r2
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4618      	mov	r0, r3
 8008540:	f7fd fa42 	bl	80059c8 <lfs_tag_type3>
 8008544:	4603      	mov	r3, r0
 8008546:	461a      	mov	r2, r3
 8008548:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 800854c:	429a      	cmp	r2, r3
 800854e:	d114      	bne.n	800857a <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	8a9b      	ldrh	r3, [r3, #20]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d106      	bne.n	8008566 <lfs_dir_relocatingcommit+0x7a>
 8008558:	4ba4      	ldr	r3, [pc, #656]	@ (80087ec <lfs_dir_relocatingcommit+0x300>)
 800855a:	4aa5      	ldr	r2, [pc, #660]	@ (80087f0 <lfs_dir_relocatingcommit+0x304>)
 800855c:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 8008560:	48a4      	ldr	r0, [pc, #656]	@ (80087f4 <lfs_dir_relocatingcommit+0x308>)
 8008562:	f004 f9d5 	bl	800c910 <__assert_func>
            dir->count -= 1;
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	8a9b      	ldrh	r3, [r3, #20]
 800856a:	3b01      	subs	r3, #1
 800856c:	b29a      	uxth	r2, r3
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8008572:	2301      	movs	r3, #1
 8008574:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8008578:	e032      	b.n	80085e0 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800857a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800857c:	00db      	lsls	r3, r3, #3
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	4413      	add	r3, r2
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f7fd f9ff 	bl	8005988 <lfs_tag_type1>
 800858a:	4603      	mov	r3, r0
 800858c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008590:	d126      	bne.n	80085e0 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8008592:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008594:	00db      	lsls	r3, r3, #3
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	4413      	add	r3, r2
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 80085a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085a4:	00db      	lsls	r3, r3, #3
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	4413      	add	r3, r2
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	685a      	ldr	r2, [r3, #4]
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 80085b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085b4:	00db      	lsls	r3, r3, #3
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	4413      	add	r3, r2
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4618      	mov	r0, r3
 80085be:	f7fd fa13 	bl	80059e8 <lfs_tag_chunk>
 80085c2:	4603      	mov	r3, r0
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	bf14      	ite	ne
 80085cc:	2301      	movne	r3, #1
 80085ce:	2300      	moveq	r3, #0
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	3318      	adds	r3, #24
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fd f97f 	bl	80058de <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 80085e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085e2:	3301      	adds	r3, #1
 80085e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80085e6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80085e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80085ec:	429a      	cmp	r2, r3
 80085ee:	db8c      	blt.n	800850a <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 80085f0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d02b      	beq.n	8008650 <lfs_dir_relocatingcommit+0x164>
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	8a9b      	ldrh	r3, [r3, #20]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d127      	bne.n	8008650 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8008600:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008604:	2b00      	cmp	r3, #0
 8008606:	d106      	bne.n	8008616 <lfs_dir_relocatingcommit+0x12a>
 8008608:	4b7b      	ldr	r3, [pc, #492]	@ (80087f8 <lfs_dir_relocatingcommit+0x30c>)
 800860a:	4a79      	ldr	r2, [pc, #484]	@ (80087f0 <lfs_dir_relocatingcommit+0x304>)
 800860c:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 8008610:	4878      	ldr	r0, [pc, #480]	@ (80087f4 <lfs_dir_relocatingcommit+0x308>)
 8008612:	f004 f97d 	bl	800c910 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800861c:	4619      	mov	r1, r3
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f002 fd4e 	bl	800b0c0 <lfs_fs_pred>
 8008624:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 8008626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008628:	2b00      	cmp	r3, #0
 800862a:	d005      	beq.n	8008638 <lfs_dir_relocatingcommit+0x14c>
 800862c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800862e:	f113 0f02 	cmn.w	r3, #2
 8008632:	d001      	beq.n	8008638 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8008634:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008636:	e210      	b.n	8008a5a <lfs_dir_relocatingcommit+0x56e>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8008638:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800863a:	f113 0f02 	cmn.w	r3, #2
 800863e:	d007      	beq.n	8008650 <lfs_dir_relocatingcommit+0x164>
 8008640:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008644:	7ddb      	ldrb	r3, [r3, #23]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d002      	beq.n	8008650 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 800864a:	2302      	movs	r3, #2
 800864c:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 800864e:	e121      	b.n	8008894 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	7d9b      	ldrb	r3, [r3, #22]
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 80fb 	beq.w	8008850 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 800865e:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8008664:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800866a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800866c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008670:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8008676:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800867c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800867e:	2b00      	cmp	r3, #0
 8008680:	d004      	beq.n	800868c <lfs_dir_relocatingcommit+0x1a0>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008688:	3b08      	subs	r3, #8
 800868a:	e003      	b.n	8008694 <lfs_dir_relocatingcommit+0x1a8>
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8008694:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	3318      	adds	r3, #24
 800869a:	4618      	mov	r0, r3
 800869c:	f7fd f939 	bl	8005912 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80086b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 80086b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80086b6:	9308      	str	r3, [sp, #32]
 80086b8:	4b50      	ldr	r3, [pc, #320]	@ (80087fc <lfs_dir_relocatingcommit+0x310>)
 80086ba:	9307      	str	r3, [sp, #28]
 80086bc:	2300      	movs	r3, #0
 80086be:	9306      	str	r3, [sp, #24]
 80086c0:	2300      	movs	r3, #0
 80086c2:	9305      	str	r3, [sp, #20]
 80086c4:	2300      	movs	r3, #0
 80086c6:	9304      	str	r3, [sp, #16]
 80086c8:	2300      	movs	r3, #0
 80086ca:	9303      	str	r3, [sp, #12]
 80086cc:	2300      	movs	r3, #0
 80086ce:	9302      	str	r3, [sp, #8]
 80086d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80086d4:	9301      	str	r3, [sp, #4]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	460b      	mov	r3, r1
 80086dc:	68b9      	ldr	r1, [r7, #8]
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f7fd ff6a 	bl	80065b8 <lfs_dir_traverse>
 80086e4:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	3318      	adds	r3, #24
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fd f8f7 	bl	80058de <lfs_pair_fromle32>
        if (err) {
 80086f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00b      	beq.n	800870e <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80086f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086f8:	f113 0f1c 	cmn.w	r3, #28
 80086fc:	f000 80aa 	beq.w	8008854 <lfs_dir_relocatingcommit+0x368>
 8008700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008702:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8008706:	f000 80a5 	beq.w	8008854 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 800870a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800870c:	e1a5      	b.n	8008a5a <lfs_dir_relocatingcommit+0x56e>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 800870e:	f107 031c 	add.w	r3, r7, #28
 8008712:	2200      	movs	r2, #0
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	605a      	str	r2, [r3, #4]
 8008718:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008720:	f107 031c 	add.w	r3, r7, #28
 8008724:	4611      	mov	r1, r2
 8008726:	4618      	mov	r0, r3
 8008728:	f7fd f9a9 	bl	8005a7e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8008732:	f107 031c 	add.w	r3, r7, #28
 8008736:	4611      	mov	r1, r2
 8008738:	4618      	mov	r0, r3
 800873a:	f7fd f9a0 	bl	8005a7e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8008744:	f107 031c 	add.w	r3, r7, #28
 8008748:	4611      	mov	r1, r2
 800874a:	4618      	mov	r0, r3
 800874c:	f7fd f997 	bl	8005a7e <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008756:	f023 0303 	bic.w	r3, r3, #3
 800875a:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 800875c:	f107 031c 	add.w	r3, r7, #28
 8008760:	4618      	mov	r0, r3
 8008762:	f7fd f9b1 	bl	8005ac8 <lfs_gstate_iszero>
 8008766:	4603      	mov	r3, r0
 8008768:	f083 0301 	eor.w	r3, r3, #1
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b00      	cmp	r3, #0
 8008770:	d027      	beq.n	80087c2 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8008772:	f107 031c 	add.w	r3, r7, #28
 8008776:	461a      	mov	r2, r3
 8008778:	68b9      	ldr	r1, [r7, #8]
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f7fe feec 	bl	8007558 <lfs_dir_getgstate>
 8008780:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 8008782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8008788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800878a:	e166      	b.n	8008a5a <lfs_dir_relocatingcommit+0x56e>
            }

            lfs_gstate_tole32(&delta);
 800878c:	f107 031c 	add.w	r3, r7, #28
 8008790:	4618      	mov	r0, r3
 8008792:	f7fd fa3f 	bl	8005c14 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8008796:	f107 031c 	add.w	r3, r7, #28
 800879a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800879e:	4a18      	ldr	r2, [pc, #96]	@ (8008800 <lfs_dir_relocatingcommit+0x314>)
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f7ff f885 	bl	80078b0 <lfs_dir_commitattr>
 80087a6:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 80087a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d009      	beq.n	80087c2 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80087ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087b0:	f113 0f1c 	cmn.w	r3, #28
 80087b4:	d050      	beq.n	8008858 <lfs_dir_relocatingcommit+0x36c>
 80087b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087b8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80087bc:	d04c      	beq.n	8008858 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 80087be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087c0:	e14b      	b.n	8008a5a <lfs_dir_relocatingcommit+0x56e>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 80087c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80087c6:	4619      	mov	r1, r3
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f7ff f8f1 	bl	80079b0 <lfs_dir_commitcrc>
 80087ce:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 80087d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d016      	beq.n	8008804 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80087d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087d8:	f113 0f1c 	cmn.w	r3, #28
 80087dc:	d03e      	beq.n	800885c <lfs_dir_relocatingcommit+0x370>
 80087de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087e0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80087e4:	d03a      	beq.n	800885c <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 80087e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087e8:	e137      	b.n	8008a5a <lfs_dir_relocatingcommit+0x56e>
 80087ea:	bf00      	nop
 80087ec:	0800ec94 	.word	0x0800ec94
 80087f0:	0800f7a0 	.word	0x0800f7a0
 80087f4:	0800ea1c 	.word	0x0800ea1c
 80087f8:	0800eca4 	.word	0x0800eca4
 80087fc:	08007e57 	.word	0x08007e57
 8008800:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8008804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800880a:	6992      	ldr	r2, [r2, #24]
 800880c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008810:	fb01 f202 	mul.w	r2, r1, r2
 8008814:	1a9b      	subs	r3, r3, r2
 8008816:	2b00      	cmp	r3, #0
 8008818:	d006      	beq.n	8008828 <lfs_dir_relocatingcommit+0x33c>
 800881a:	4b92      	ldr	r3, [pc, #584]	@ (8008a64 <lfs_dir_relocatingcommit+0x578>)
 800881c:	4a92      	ldr	r2, [pc, #584]	@ (8008a68 <lfs_dir_relocatingcommit+0x57c>)
 800881e:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 8008822:	4892      	ldr	r0, [pc, #584]	@ (8008a6c <lfs_dir_relocatingcommit+0x580>)
 8008824:	f004 f874 	bl	800c910 <__assert_func>
        dir->off = commit.off;
 8008828:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 800882e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	333c      	adds	r3, #60	@ 0x3c
 800883a:	3230      	adds	r2, #48	@ 0x30
 800883c:	ca07      	ldmia	r2, {r0, r1, r2}
 800883e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	3348      	adds	r3, #72	@ 0x48
 8008846:	2200      	movs	r2, #0
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	605a      	str	r2, [r3, #4]
 800884c:	609a      	str	r2, [r3, #8]
 800884e:	e021      	b.n	8008894 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8008850:	bf00      	nop
 8008852:	e004      	b.n	800885e <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8008854:	bf00      	nop
 8008856:	e002      	b.n	800885e <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8008858:	bf00      	nop
 800885a:	e000      	b.n	800885e <lfs_dir_relocatingcommit+0x372>
                goto compact;
 800885c:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3310      	adds	r3, #16
 8008862:	4619      	mov	r1, r3
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f7fc fc1c 	bl	80050a2 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	8a9b      	ldrh	r3, [r3, #20]
 800886e:	9302      	str	r3, [sp, #8]
 8008870:	2300      	movs	r3, #0
 8008872:	9301      	str	r3, [sp, #4]
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800887c:	683a      	ldr	r2, [r7, #0]
 800887e:	68b9      	ldr	r1, [r7, #8]
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f7ff fd1b 	bl	80082bc <lfs_dir_splittingcompact>
 8008886:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8008888:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800888a:	2b00      	cmp	r3, #0
 800888c:	da01      	bge.n	8008892 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 800888e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008890:	e0e3      	b.n	8008a5a <lfs_dir_relocatingcommit+0x56e>
    }

    goto fixmlist;
 8008892:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	3304      	adds	r3, #4
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80088a8:	e0d2      	b.n	8008a50 <lfs_dir_relocatingcommit+0x564>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 80088aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088ac:	3308      	adds	r3, #8
 80088ae:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80088b2:	4611      	mov	r1, r2
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fc ffbb 	bl	8005830 <lfs_pair_cmp>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f040 80c4 	bne.w	8008a4a <lfs_dir_relocatingcommit+0x55e>
            d->m = *dir;
 80088c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	f103 0408 	add.w	r4, r3, #8
 80088ca:	4615      	mov	r5, r2
 80088cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80088d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 80088d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088da:	3308      	adds	r3, #8
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	429a      	cmp	r2, r3
 80088e0:	f000 80a9 	beq.w	8008a36 <lfs_dir_relocatingcommit+0x54a>
                for (int i = 0; i < attrcount; i++) {
 80088e4:	2300      	movs	r3, #0
 80088e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088e8:	e07b      	b.n	80089e2 <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80088ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088ec:	00db      	lsls	r3, r3, #3
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	4413      	add	r3, r2
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7fd f867 	bl	80059c8 <lfs_tag_type3>
 80088fa:	4603      	mov	r3, r0
 80088fc:	461a      	mov	r2, r3
 80088fe:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8008902:	429a      	cmp	r2, r3
 8008904:	d115      	bne.n	8008932 <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8008906:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008908:	889c      	ldrh	r4, [r3, #4]
 800890a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800890c:	00db      	lsls	r3, r3, #3
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	4413      	add	r3, r2
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4618      	mov	r0, r3
 8008916:	f7fd f881 	bl	8005a1c <lfs_tag_id>
 800891a:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800891c:	429c      	cmp	r4, r3
 800891e:	d108      	bne.n	8008932 <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8008920:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008922:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008926:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8008928:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800892a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800892e:	60da      	str	r2, [r3, #12]
 8008930:	e054      	b.n	80089dc <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8008932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008934:	00db      	lsls	r3, r3, #3
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	4413      	add	r3, r2
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4618      	mov	r0, r3
 800893e:	f7fd f843 	bl	80059c8 <lfs_tag_type3>
 8008942:	4603      	mov	r3, r0
 8008944:	461a      	mov	r2, r3
 8008946:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 800894a:	429a      	cmp	r2, r3
 800894c:	d11c      	bne.n	8008988 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 800894e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008950:	889c      	ldrh	r4, [r3, #4]
 8008952:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008954:	00db      	lsls	r3, r3, #3
 8008956:	683a      	ldr	r2, [r7, #0]
 8008958:	4413      	add	r3, r2
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4618      	mov	r0, r3
 800895e:	f7fd f85d 	bl	8005a1c <lfs_tag_id>
 8008962:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8008964:	429c      	cmp	r4, r3
 8008966:	d90f      	bls.n	8008988 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 8008968:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800896a:	889b      	ldrh	r3, [r3, #4]
 800896c:	3b01      	subs	r3, #1
 800896e:	b29a      	uxth	r2, r3
 8008970:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008972:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8008974:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008976:	799b      	ldrb	r3, [r3, #6]
 8008978:	2b02      	cmp	r3, #2
 800897a:	d12f      	bne.n	80089dc <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 800897c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800897e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008980:	1e5a      	subs	r2, r3, #1
 8008982:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008984:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8008986:	e029      	b.n	80089dc <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8008988:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800898a:	00db      	lsls	r3, r3, #3
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	4413      	add	r3, r2
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4618      	mov	r0, r3
 8008994:	f7fd f818 	bl	80059c8 <lfs_tag_type3>
 8008998:	4603      	mov	r3, r0
 800899a:	461a      	mov	r2, r3
 800899c:	f240 4301 	movw	r3, #1025	@ 0x401
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d11b      	bne.n	80089dc <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 80089a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089a6:	889c      	ldrh	r4, [r3, #4]
 80089a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089aa:	00db      	lsls	r3, r3, #3
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	4413      	add	r3, r2
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fd f832 	bl	8005a1c <lfs_tag_id>
 80089b8:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80089ba:	429c      	cmp	r4, r3
 80089bc:	d30e      	bcc.n	80089dc <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 80089be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089c0:	889b      	ldrh	r3, [r3, #4]
 80089c2:	3301      	adds	r3, #1
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089c8:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80089ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089cc:	799b      	ldrb	r3, [r3, #6]
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d104      	bne.n	80089dc <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 80089d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d6:	1c5a      	adds	r2, r3, #1
 80089d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089da:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 80089dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089de:	3301      	adds	r3, #1
 80089e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089e2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80089e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80089e8:	429a      	cmp	r2, r3
 80089ea:	f6ff af7e 	blt.w	80088ea <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 80089ee:	e022      	b.n	8008a36 <lfs_dir_relocatingcommit+0x54a>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 80089f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089f2:	f103 0220 	add.w	r2, r3, #32
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3320      	adds	r3, #32
 80089fa:	4619      	mov	r1, r3
 80089fc:	4610      	mov	r0, r2
 80089fe:	f7fc ff17 	bl	8005830 <lfs_pair_cmp>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d007      	beq.n	8008a18 <lfs_dir_relocatingcommit+0x52c>
                    d->id -= d->m.count;
 8008a08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a0a:	889a      	ldrh	r2, [r3, #4]
 8008a0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a0e:	8b9b      	ldrh	r3, [r3, #28]
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a16:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8008a18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a1a:	f103 0108 	add.w	r1, r3, #8
 8008a1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a20:	3320      	adds	r3, #32
 8008a22:	461a      	mov	r2, r3
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f7fe fd7b 	bl	8007520 <lfs_dir_fetch>
 8008a2a:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 8008a2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <lfs_dir_relocatingcommit+0x54a>
                    return err;
 8008a32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a34:	e011      	b.n	8008a5a <lfs_dir_relocatingcommit+0x56e>
            while (d->id >= d->m.count && d->m.split) {
 8008a36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a38:	889a      	ldrh	r2, [r3, #4]
 8008a3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a3c:	8b9b      	ldrh	r3, [r3, #28]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d303      	bcc.n	8008a4a <lfs_dir_relocatingcommit+0x55e>
 8008a42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a44:	7fdb      	ldrb	r3, [r3, #31]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1d2      	bne.n	80089f0 <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8008a4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f47f af29 	bne.w	80088aa <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 8008a58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3770      	adds	r7, #112	@ 0x70
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bdb0      	pop	{r4, r5, r7, pc}
 8008a62:	bf00      	nop
 8008a64:	0800eb84 	.word	0x0800eb84
 8008a68:	0800f7a0 	.word	0x0800f7a0
 8008a6c:	0800ea1c 	.word	0x0800ea1c

08008a70 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8008a70:	b5b0      	push	{r4, r5, r7, lr}
 8008a72:	b0bc      	sub	sp, #240	@ 0xf0
 8008a74:	af04      	add	r7, sp, #16
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008a86:	e045      	b.n	8008b14 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8008a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d03a      	beq.n	8008b0a <lfs_dir_orphaningcommit+0x9a>
 8008a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a98:	3308      	adds	r3, #8
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fc fec6 	bl	8005830 <lfs_pair_cmp>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d12f      	bne.n	8008b0a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8008aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aae:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d12a      	bne.n	8008b0a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8008ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d023      	beq.n	8008b0a <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8008ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d91b      	bls.n	8008b0a <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8008ad2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f000 fff2 	bl	8009ac0 <lfs_file_outline>
 8008adc:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 8008ae0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d002      	beq.n	8008aee <lfs_dir_orphaningcommit+0x7e>
                return err;
 8008ae8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008aec:	e2ad      	b.n	800904a <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8008aee:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f001 f806 	bl	8009b04 <lfs_file_flush>
 8008af8:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 8008afc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <lfs_dir_orphaningcommit+0x9a>
                return err;
 8008b04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008b08:	e29f      	b.n	800904a <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8008b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1b5      	bne.n	8008a88 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8008b32:	461d      	mov	r5, r3
 8008b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008b3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8008b46:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008b4a:	9301      	str	r3, [sp, #4]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f7ff fcca 	bl	80084ec <lfs_dir_relocatingcommit>
 8008b58:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8008b5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	da02      	bge.n	8008b6a <lfs_dir_orphaningcommit+0xfa>
        return state;
 8008b64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b68:	e26f      	b.n	800904a <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8008b70:	4611      	mov	r1, r2
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fc fe5c 	bl	8005830 <lfs_pair_cmp>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d109      	bne.n	8008b92 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	461d      	mov	r5, r3
 8008b82:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8008b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b8a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008b8e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8008b92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d14a      	bne.n	8008c30 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	3348      	adds	r3, #72	@ 0x48
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	68b9      	ldr	r1, [r7, #8]
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f7fe fcd8 	bl	8007558 <lfs_dir_getgstate>
 8008ba8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 8008bac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <lfs_dir_orphaningcommit+0x14a>
            return err;
 8008bb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008bb8:	e247      	b.n	800904a <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8008bba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 8008bc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	3318      	adds	r3, #24
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fc fea1 	bl	8005912 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	7ddb      	ldrb	r3, [r3, #23]
 8008bd4:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8008bd8:	051a      	lsls	r2, r3, #20
 8008bda:	4bc2      	ldr	r3, [pc, #776]	@ (8008ee4 <lfs_dir_orphaningcommit+0x474>)
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	667b      	str	r3, [r7, #100]	@ 0x64
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	3318      	adds	r3, #24
 8008be4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008be6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8008bea:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8008bee:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	9001      	str	r0, [sp, #4]
 8008bf6:	2001      	movs	r0, #1
 8008bf8:	9000      	str	r0, [sp, #0]
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f7ff fc76 	bl	80084ec <lfs_dir_relocatingcommit>
 8008c00:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	3318      	adds	r3, #24
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7fc fe68 	bl	80058de <lfs_pair_fromle32>
        if (state < 0) {
 8008c0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	da02      	bge.n	8008c1c <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8008c16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c1a:	e216      	b.n	800904a <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8008c1c:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8008c20:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8008c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008c2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8008c30:	2300      	movs	r3, #0
 8008c32:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 8008c36:	e1fc      	b.n	8009032 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8008c38:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8008c3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008c40:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8008c44:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008c48:	4ca7      	ldr	r4, [pc, #668]	@ (8008ee8 <lfs_dir_orphaningcommit+0x478>)
 8008c4a:	9403      	str	r4, [sp, #12]
 8008c4c:	9102      	str	r1, [sp, #8]
 8008c4e:	9201      	str	r2, [sp, #4]
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	4603      	mov	r3, r0
 8008c54:	f640 128c 	movw	r2, #2444	@ 0x98c
 8008c58:	49a4      	ldr	r1, [pc, #656]	@ (8008eec <lfs_dir_orphaningcommit+0x47c>)
 8008c5a:	48a5      	ldr	r0, [pc, #660]	@ (8008ef0 <lfs_dir_orphaningcommit+0x480>)
 8008c5c:	f004 f8ae 	bl	800cdbc <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f103 0220 	add.w	r2, r3, #32
 8008c6c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8008c70:	4611      	mov	r1, r2
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fc fddc 	bl	8005830 <lfs_pair_cmp>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d107      	bne.n	8008c8e <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8008c7e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8008c86:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c96:	e037      	b.n	8008d08 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8008c98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008c9c:	f103 0208 	add.w	r2, r3, #8
 8008ca0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fc fdc2 	bl	8005830 <lfs_pair_cmp>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d109      	bne.n	8008cc6 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8008cb2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8008cb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008cba:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8008cbc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8008cc0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008cc4:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8008cc6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008cca:	799b      	ldrb	r3, [r3, #6]
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d116      	bne.n	8008cfe <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8008cd0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008cd4:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8008cd8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8008cdc:	4611      	mov	r1, r2
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fc fda6 	bl	8005830 <lfs_pair_cmp>
 8008ce4:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d109      	bne.n	8008cfe <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8008cea:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8008cee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8008cf4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8008cf8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008cfc:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8008cfe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d08:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1c3      	bne.n	8008c98 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8008d10:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8008d14:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8008d18:	4619      	mov	r1, r3
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f002 fa82 	bl	800b224 <lfs_fs_parent>
 8008d20:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8008d24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	da07      	bge.n	8008d3c <lfs_dir_orphaningcommit+0x2cc>
 8008d2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008d30:	f113 0f02 	cmn.w	r3, #2
 8008d34:	d002      	beq.n	8008d3c <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8008d36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008d3a:	e186      	b.n	800904a <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8008d3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008d40:	f113 0f02 	cmn.w	r3, #2
 8008d44:	bf14      	ite	ne
 8008d46:	2301      	movne	r3, #1
 8008d48:	2300      	moveq	r3, #0
 8008d4a:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 8008d4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008d52:	f113 0f02 	cmn.w	r3, #2
 8008d56:	f000 809e 	beq.w	8008e96 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8008d5a:	2101      	movs	r1, #1
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f002 faf9 	bl	800b354 <lfs_fs_preporphans>
 8008d62:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 8008d66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <lfs_dir_orphaningcommit+0x304>
                return err;
 8008d6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008d72:	e16a      	b.n	800904a <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8008d74:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8008d78:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	3330      	adds	r3, #48	@ 0x30
 8008d80:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8008d84:	4611      	mov	r1, r2
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fc ff04 	bl	8005b94 <lfs_gstate_hasmovehere>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d02d      	beq.n	8008dee <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fc fe40 	bl	8005a1c <lfs_tag_id>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 8008da2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008da4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008da6:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 8008daa:	484f      	ldr	r0, [pc, #316]	@ (8008ee8 <lfs_dir_orphaningcommit+0x478>)
 8008dac:	9002      	str	r0, [sp, #8]
 8008dae:	9201      	str	r2, [sp, #4]
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	460b      	mov	r3, r1
 8008db4:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 8008db8:	494c      	ldr	r1, [pc, #304]	@ (8008eec <lfs_dir_orphaningcommit+0x47c>)
 8008dba:	484e      	ldr	r0, [pc, #312]	@ (8008ef4 <lfs_dir_orphaningcommit+0x484>)
 8008dbc:	f003 fffe 	bl	800cdbc <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f002 fb14 	bl	800b3f4 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8008dcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7fc fe23 	bl	8005a1c <lfs_tag_id>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	461a      	mov	r2, r3
 8008dda:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d205      	bcs.n	8008dee <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8008de2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008de6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8008dea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8008dee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008df0:	657b      	str	r3, [r7, #84]	@ 0x54
 8008df2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008df4:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 8008df6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fc fd89 	bl	8005912 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8008e00:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8008e04:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d007      	beq.n	8008e1c <lfs_dir_orphaningcommit+0x3ac>
 8008e0c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8008e10:	029b      	lsls	r3, r3, #10
 8008e12:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8008e16:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8008e1a:	e000      	b.n	8008e1e <lfs_dir_orphaningcommit+0x3ae>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e20:	2300      	movs	r3, #0
 8008e22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e2a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008e2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e30:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8008e34:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8008e38:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	9001      	str	r0, [sp, #4]
 8008e40:	2002      	movs	r0, #2
 8008e42:	9000      	str	r0, [sp, #0]
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f7ff fb51 	bl	80084ec <lfs_dir_relocatingcommit>
 8008e4a:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8008e4e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fc fd43 	bl	80058de <lfs_pair_fromle32>
            if (state < 0) {
 8008e58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	da02      	bge.n	8008e66 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8008e60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e64:	e0f1      	b.n	800904a <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8008e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d113      	bne.n	8008e96 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8008e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 8008e74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 8008e7a:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8008e7e:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8008e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e86:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008e8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8008e94:	e0cd      	b.n	8009032 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8008e96:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8008e9a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f002 f90d 	bl	800b0c0 <lfs_fs_pred>
 8008ea6:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8008eaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d007      	beq.n	8008ec2 <lfs_dir_orphaningcommit+0x452>
 8008eb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008eb6:	f113 0f02 	cmn.w	r3, #2
 8008eba:	d002      	beq.n	8008ec2 <lfs_dir_orphaningcommit+0x452>
            return err;
 8008ebc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ec0:	e0c3      	b.n	800904a <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8008ec2:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d01a      	beq.n	8008f00 <lfs_dir_orphaningcommit+0x490>
 8008eca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ece:	f113 0f02 	cmn.w	r3, #2
 8008ed2:	d115      	bne.n	8008f00 <lfs_dir_orphaningcommit+0x490>
 8008ed4:	4b08      	ldr	r3, [pc, #32]	@ (8008ef8 <lfs_dir_orphaningcommit+0x488>)
 8008ed6:	4a09      	ldr	r2, [pc, #36]	@ (8008efc <lfs_dir_orphaningcommit+0x48c>)
 8008ed8:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 8008edc:	4803      	ldr	r0, [pc, #12]	@ (8008eec <lfs_dir_orphaningcommit+0x47c>)
 8008ede:	f003 fd17 	bl	800c910 <__assert_func>
 8008ee2:	bf00      	nop
 8008ee4:	000ffc08 	.word	0x000ffc08
 8008ee8:	0800eb2c 	.word	0x0800eb2c
 8008eec:	0800ea1c 	.word	0x0800ea1c
 8008ef0:	0800ecac 	.word	0x0800ecac
 8008ef4:	0800ece8 	.word	0x0800ece8
 8008ef8:	0800ed2c 	.word	0x0800ed2c
 8008efc:	0800f7bc 	.word	0x0800f7bc

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8008f00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f04:	f113 0f02 	cmn.w	r3, #2
 8008f08:	f000 8093 	beq.w	8009032 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	3330      	adds	r3, #48	@ 0x30
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fc fdf6 	bl	8005b02 <lfs_gstate_hasorphans>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d011      	beq.n	8008f40 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8008f1c:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8008f20:	425b      	negs	r3, r3
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	b25b      	sxtb	r3, r3
 8008f26:	4619      	mov	r1, r3
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f002 fa13 	bl	800b354 <lfs_fs_preporphans>
 8008f2e:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 8008f32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d002      	beq.n	8008f40 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 8008f3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f3e:	e084      	b.n	800904a <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8008f40:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8008f44:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	3330      	adds	r3, #48	@ 0x30
 8008f4c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8008f50:	4611      	mov	r1, r2
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fc fe1e 	bl	8005b94 <lfs_gstate_hasmovehere>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d01c      	beq.n	8008f98 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fc fd5a 	bl	8005a1c <lfs_tag_id>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8008f6e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008f70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f72:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 8008f76:	4837      	ldr	r0, [pc, #220]	@ (8009054 <lfs_dir_orphaningcommit+0x5e4>)
 8008f78:	9002      	str	r0, [sp, #8]
 8008f7a:	9201      	str	r2, [sp, #4]
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 8008f84:	4934      	ldr	r1, [pc, #208]	@ (8009058 <lfs_dir_orphaningcommit+0x5e8>)
 8008f86:	4835      	ldr	r0, [pc, #212]	@ (800905c <lfs_dir_orphaningcommit+0x5ec>)
 8008f88:	f003 ff18 	bl	800cdbc <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f002 fa2e 	bl	800b3f4 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8008f98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 8008f9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 8008fa4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fc fcb2 	bl	8005912 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8008fae:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8008fb2:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d007      	beq.n	8008fca <lfs_dir_orphaningcommit+0x55a>
 8008fba:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8008fbe:	029b      	lsls	r3, r3, #10
 8008fc0:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8008fc4:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8008fc8:	e000      	b.n	8008fcc <lfs_dir_orphaningcommit+0x55c>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fce:	2300      	movs	r3, #0
 8008fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008fd2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8008fd6:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8008fda:	051a      	lsls	r2, r3, #20
 8008fdc:	4b20      	ldr	r3, [pc, #128]	@ (8009060 <lfs_dir_orphaningcommit+0x5f0>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fe2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008fe6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fe8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fec:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8008ff0:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	9001      	str	r0, [sp, #4]
 8008ff8:	2002      	movs	r0, #2
 8008ffa:	9000      	str	r0, [sp, #0]
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f7ff fa75 	bl	80084ec <lfs_dir_relocatingcommit>
 8009002:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8009006:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800900a:	4618      	mov	r0, r3
 800900c:	f7fc fc67 	bl	80058de <lfs_pair_fromle32>
            if (state < 0) {
 8009010:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009014:	2b00      	cmp	r3, #0
 8009016:	da02      	bge.n	800901e <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8009018:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800901c:	e015      	b.n	800904a <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 800901e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8009022:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8009026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800902a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800902e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8009032:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009036:	2b01      	cmp	r3, #1
 8009038:	f43f adfe 	beq.w	8008c38 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 800903c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <lfs_dir_orphaningcommit+0x5d8>
 8009044:	2303      	movs	r3, #3
 8009046:	e000      	b.n	800904a <lfs_dir_orphaningcommit+0x5da>
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	37e0      	adds	r7, #224	@ 0xe0
 800904e:	46bd      	mov	sp, r7
 8009050:	bdb0      	pop	{r4, r5, r7, pc}
 8009052:	bf00      	nop
 8009054:	0800eb2c 	.word	0x0800eb2c
 8009058:	0800ea1c 	.word	0x0800ea1c
 800905c:	0800ece8 	.word	0x0800ece8
 8009060:	000ffc08 	.word	0x000ffc08

08009064 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
 8009070:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	68b9      	ldr	r1, [r7, #8]
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f7ff fcf9 	bl	8008a70 <lfs_dir_orphaningcommit>
 800907e:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	2b00      	cmp	r3, #0
 8009084:	da01      	bge.n	800908a <lfs_dir_commit+0x26>
        return orphans;
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	e00d      	b.n	80090a6 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d009      	beq.n	80090a4 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8009090:	2100      	movs	r1, #0
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f002 fad0 	bl	800b638 <lfs_fs_deorphan>
 8009098:	6138      	str	r0, [r7, #16]
        if (err) {
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d001      	beq.n	80090a4 <lfs_dir_commit+0x40>
            return err;
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	e000      	b.n	80090a6 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3718      	adds	r7, #24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 80090ae:	b590      	push	{r4, r7, lr}
 80090b0:	b087      	sub	sp, #28
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090c2:	69db      	ldr	r3, [r3, #28]
 80090c4:	3b08      	subs	r3, #8
 80090c6:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d0:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <lfs_ctz_index+0x2e>
        return 0;
 80090d8:	2300      	movs	r3, #0
 80090da:	e01c      	b.n	8009116 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	3b01      	subs	r3, #1
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fb ff7e 	bl	8004fe2 <lfs_popc>
 80090e6:	4603      	mov	r3, r0
 80090e8:	3302      	adds	r3, #2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	1ad2      	subs	r2, r2, r3
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090f6:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	fb02 f303 	mul.w	r3, r2, r3
 8009100:	697a      	ldr	r2, [r7, #20]
 8009102:	1ad4      	subs	r4, r2, r3
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f7fb ff6c 	bl	8004fe2 <lfs_popc>
 800910a:	4603      	mov	r3, r0
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	1ae2      	subs	r2, r4, r3
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	601a      	str	r2, [r3, #0]
    return i;
 8009114:	68fb      	ldr	r3, [r7, #12]
}
 8009116:	4618      	mov	r0, r3
 8009118:	371c      	adds	r7, #28
 800911a:	46bd      	mov	sp, r7
 800911c:	bd90      	pop	{r4, r7, pc}

0800911e <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800911e:	b590      	push	{r4, r7, lr}
 8009120:	b08f      	sub	sp, #60	@ 0x3c
 8009122:	af04      	add	r7, sp, #16
 8009124:	60f8      	str	r0, [r7, #12]
 8009126:	60b9      	str	r1, [r7, #8]
 8009128:	607a      	str	r2, [r7, #4]
 800912a:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800912c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912e:	2b00      	cmp	r3, #0
 8009130:	d108      	bne.n	8009144 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8009132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009134:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009138:	601a      	str	r2, [r3, #0]
        *off = 0;
 800913a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800913c:	2200      	movs	r2, #0
 800913e:	601a      	str	r2, [r3, #0]
        return 0;
 8009140:	2300      	movs	r3, #0
 8009142:	e053      	b.n	80091ec <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8009144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009146:	3b01      	subs	r3, #1
 8009148:	617b      	str	r3, [r7, #20]
 800914a:	f107 0314 	add.w	r3, r7, #20
 800914e:	4619      	mov	r1, r3
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f7ff ffac 	bl	80090ae <lfs_ctz_index>
 8009156:	4603      	mov	r3, r0
 8009158:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800915a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800915e:	4619      	mov	r1, r3
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	f7ff ffa4 	bl	80090ae <lfs_ctz_index>
 8009166:	4603      	mov	r3, r0
 8009168:	623b      	str	r3, [r7, #32]

    while (current > target) {
 800916a:	e034      	b.n	80091d6 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 800916c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	3301      	adds	r3, #1
 8009174:	4618      	mov	r0, r3
 8009176:	f7fb ff15 	bl	8004fa4 <lfs_npw2>
 800917a:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 800917c:	1e5c      	subs	r4, r3, #1
 800917e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009180:	f7fb ff20 	bl	8004fc4 <lfs_ctz>
 8009184:	4603      	mov	r3, r0
 8009186:	4619      	mov	r1, r3
 8009188:	4620      	mov	r0, r4
 800918a:	f7fb fed4 	bl	8004f36 <lfs_min>
 800918e:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	69fa      	ldr	r2, [r7, #28]
 8009194:	0092      	lsls	r2, r2, #2
 8009196:	2104      	movs	r1, #4
 8009198:	9103      	str	r1, [sp, #12]
 800919a:	4639      	mov	r1, r7
 800919c:	9102      	str	r1, [sp, #8]
 800919e:	9201      	str	r2, [sp, #4]
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	2304      	movs	r3, #4
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	68b9      	ldr	r1, [r7, #8]
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f7fb ff9f 	bl	80050ec <lfs_bd_read>
 80091ae:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fb ff2f 	bl	8005016 <lfs_fromle32>
 80091b8:	4603      	mov	r3, r0
 80091ba:	603b      	str	r3, [r7, #0]
        if (err) {
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d001      	beq.n	80091c6 <lfs_ctz_find+0xa8>
            return err;
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	e012      	b.n	80091ec <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 80091c6:	2201      	movs	r2, #1
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	fa02 f303 	lsl.w	r3, r2, r3
 80091ce:	461a      	mov	r2, r3
 80091d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d2:	1a9b      	subs	r3, r3, r2
 80091d4:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 80091d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091d8:	6a3b      	ldr	r3, [r7, #32]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d8c6      	bhi.n	800916c <lfs_ctz_find+0x4e>
    }

    *block = head;
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091e2:	601a      	str	r2, [r3, #0]
    *off = pos;
 80091e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80091e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091e8:	601a      	str	r2, [r3, #0]
    return 0;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	372c      	adds	r7, #44	@ 0x2c
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd90      	pop	{r4, r7, pc}

080091f4 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b092      	sub	sp, #72	@ 0x48
 80091f8:	af04      	add	r7, sp, #16
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8009202:	f107 0320 	add.w	r3, r7, #32
 8009206:	4619      	mov	r1, r3
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f7fc ff05 	bl	8006018 <lfs_alloc>
 800920e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 8009210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <lfs_ctz_extend+0x26>
            return err;
 8009216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009218:	e0eb      	b.n	80093f2 <lfs_ctz_extend+0x1fe>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 800921a:	6a3b      	ldr	r3, [r7, #32]
 800921c:	4619      	mov	r1, r3
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f7fc faa4 	bl	800576c <lfs_bd_erase>
 8009224:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 8009226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009228:	2b00      	cmp	r3, #0
 800922a:	d006      	beq.n	800923a <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 800922c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800922e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8009232:	f000 80cd 	beq.w	80093d0 <lfs_ctz_extend+0x1dc>
                    goto relocate;
                }
                return err;
 8009236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009238:	e0db      	b.n	80093f2 <lfs_ctz_extend+0x1fe>
            }

            if (size == 0) {
 800923a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800923c:	2b00      	cmp	r3, #0
 800923e:	d107      	bne.n	8009250 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8009240:	6a3a      	ldr	r2, [r7, #32]
 8009242:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009244:	601a      	str	r2, [r3, #0]
                *off = 0;
 8009246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009248:	2200      	movs	r2, #0
 800924a:	601a      	str	r2, [r3, #0]
                return 0;
 800924c:	2300      	movs	r3, #0
 800924e:	e0d0      	b.n	80093f2 <lfs_ctz_extend+0x1fe>
            }

            lfs_size_t noff = size - 1;
 8009250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009252:	3b01      	subs	r3, #1
 8009254:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8009256:	f107 031c 	add.w	r3, r7, #28
 800925a:	4619      	mov	r1, r3
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f7ff ff26 	bl	80090ae <lfs_ctz_index>
 8009262:	4603      	mov	r3, r0
 8009264:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	3301      	adds	r3, #1
 800926a:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009270:	69da      	ldr	r2, [r3, #28]
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	429a      	cmp	r2, r3
 8009276:	d046      	beq.n	8009306 <lfs_ctz_extend+0x112>
                for (lfs_off_t i = 0; i < noff; i++) {
 8009278:	2300      	movs	r3, #0
 800927a:	637b      	str	r3, [r7, #52]	@ 0x34
 800927c:	e037      	b.n	80092ee <lfs_ctz_extend+0xfa>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 800927e:	69fa      	ldr	r2, [r7, #28]
 8009280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009282:	1ad2      	subs	r2, r2, r3
 8009284:	2301      	movs	r3, #1
 8009286:	9303      	str	r3, [sp, #12]
 8009288:	f107 0317 	add.w	r3, r7, #23
 800928c:	9302      	str	r3, [sp, #8]
 800928e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009290:	9301      	str	r3, [sp, #4]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	9300      	str	r3, [sp, #0]
 8009296:	4613      	mov	r3, r2
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	2100      	movs	r1, #0
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f7fb ff25 	bl	80050ec <lfs_bd_read>
 80092a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 80092a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <lfs_ctz_extend+0xba>
                        return err;
 80092aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ac:	e01e      	b.n	80092ec <lfs_ctz_extend+0xf8>
                    }

                    err = lfs_bd_prog(lfs,
 80092ae:	6a3b      	ldr	r3, [r7, #32]
 80092b0:	2201      	movs	r2, #1
 80092b2:	9203      	str	r2, [sp, #12]
 80092b4:	f107 0217 	add.w	r2, r7, #23
 80092b8:	9202      	str	r2, [sp, #8]
 80092ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092bc:	9201      	str	r2, [sp, #4]
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	2301      	movs	r3, #1
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	68b9      	ldr	r1, [r7, #8]
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f7fc f9a2 	bl	8005610 <lfs_bd_prog>
 80092cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 80092ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d007      	beq.n	80092e4 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 80092d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80092da:	d101      	bne.n	80092e0 <lfs_ctz_extend+0xec>
                            goto relocate;
 80092dc:	bf00      	nop
                    goto relocate;
 80092de:	e07a      	b.n	80093d6 <lfs_ctz_extend+0x1e2>
                        }
                        return err;
 80092e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092e2:	e003      	b.n	80092ec <lfs_ctz_extend+0xf8>
                for (lfs_off_t i = 0; i < noff; i++) {
 80092e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092e6:	3301      	adds	r3, #1
 80092e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80092ea:	e000      	b.n	80092ee <lfs_ctz_extend+0xfa>
                return err;
 80092ec:	e081      	b.n	80093f2 <lfs_ctz_extend+0x1fe>
                for (lfs_off_t i = 0; i < noff; i++) {
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d3c3      	bcc.n	800927e <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 80092f6:	6a3a      	ldr	r2, [r7, #32]
 80092f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092fa:	601a      	str	r2, [r3, #0]
                *off = noff;
 80092fc:	69fa      	ldr	r2, [r7, #28]
 80092fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009300:	601a      	str	r2, [r3, #0]
                return 0;
 8009302:	2300      	movs	r3, #0
 8009304:	e075      	b.n	80093f2 <lfs_ctz_extend+0x1fe>
            }

            // append block
            index += 1;
 8009306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009308:	3301      	adds	r3, #1
 800930a:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 800930c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800930e:	f7fb fe59 	bl	8004fc4 <lfs_ctz>
 8009312:	4603      	mov	r3, r0
 8009314:	3301      	adds	r3, #1
 8009316:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 800931c:	2300      	movs	r3, #0
 800931e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009320:	e049      	b.n	80093b6 <lfs_ctz_extend+0x1c2>
                nhead = lfs_tole32(nhead);
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	4618      	mov	r0, r3
 8009326:	f7fb fe81 	bl	800502c <lfs_tole32>
 800932a:	4603      	mov	r3, r0
 800932c:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009332:	0092      	lsls	r2, r2, #2
 8009334:	2104      	movs	r1, #4
 8009336:	9103      	str	r1, [sp, #12]
 8009338:	f107 0118 	add.w	r1, r7, #24
 800933c:	9102      	str	r1, [sp, #8]
 800933e:	9201      	str	r2, [sp, #4]
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	2301      	movs	r3, #1
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	68b9      	ldr	r1, [r7, #8]
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f7fc f961 	bl	8005610 <lfs_bd_prog>
 800934e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	4618      	mov	r0, r3
 8009354:	f7fb fe5f 	bl	8005016 <lfs_fromle32>
 8009358:	4603      	mov	r3, r0
 800935a:	61bb      	str	r3, [r7, #24]
                if (err) {
 800935c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800935e:	2b00      	cmp	r3, #0
 8009360:	d005      	beq.n	800936e <lfs_ctz_extend+0x17a>
                    if (err == LFS_ERR_CORRUPT) {
 8009362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009364:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8009368:	d034      	beq.n	80093d4 <lfs_ctz_extend+0x1e0>
                        goto relocate;
                    }
                    return err;
 800936a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800936c:	e041      	b.n	80093f2 <lfs_ctz_extend+0x1fe>
                }

                if (i != skips-1) {
 800936e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009370:	3b01      	subs	r3, #1
 8009372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009374:	429a      	cmp	r2, r3
 8009376:	d01b      	beq.n	80093b0 <lfs_ctz_extend+0x1bc>
                    err = lfs_bd_read(lfs,
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800937c:	0092      	lsls	r2, r2, #2
 800937e:	2104      	movs	r1, #4
 8009380:	9103      	str	r1, [sp, #12]
 8009382:	f107 0118 	add.w	r1, r7, #24
 8009386:	9102      	str	r1, [sp, #8]
 8009388:	9201      	str	r2, [sp, #4]
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	2304      	movs	r3, #4
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	2100      	movs	r1, #0
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f7fb feaa 	bl	80050ec <lfs_bd_read>
 8009398:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	4618      	mov	r0, r3
 800939e:	f7fb fe3a 	bl	8005016 <lfs_fromle32>
 80093a2:	4603      	mov	r3, r0
 80093a4:	61bb      	str	r3, [r7, #24]
                    if (err) {
 80093a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d001      	beq.n	80093b0 <lfs_ctz_extend+0x1bc>
                        return err;
 80093ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ae:	e020      	b.n	80093f2 <lfs_ctz_extend+0x1fe>
            for (lfs_off_t i = 0; i < skips; i++) {
 80093b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b2:	3301      	adds	r3, #1
 80093b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80093b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d3b1      	bcc.n	8009322 <lfs_ctz_extend+0x12e>
                    }
                }
            }

            *block = nblock;
 80093be:	6a3a      	ldr	r2, [r7, #32]
 80093c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093c2:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 80093c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c6:	009a      	lsls	r2, r3, #2
 80093c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093ca:	601a      	str	r2, [r3, #0]
            return 0;
 80093cc:	2300      	movs	r3, #0
 80093ce:	e010      	b.n	80093f2 <lfs_ctz_extend+0x1fe>
                    goto relocate;
 80093d0:	bf00      	nop
 80093d2:	e000      	b.n	80093d6 <lfs_ctz_extend+0x1e2>
                        goto relocate;
 80093d4:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	4a08      	ldr	r2, [pc, #32]	@ (80093fc <lfs_ctz_extend+0x208>)
 80093da:	9200      	str	r2, [sp, #0]
 80093dc:	f640 32a6 	movw	r2, #2982	@ 0xba6
 80093e0:	4907      	ldr	r1, [pc, #28]	@ (8009400 <lfs_ctz_extend+0x20c>)
 80093e2:	4808      	ldr	r0, [pc, #32]	@ (8009404 <lfs_ctz_extend+0x210>)
 80093e4:	f003 fcea 	bl	800cdbc <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 80093e8:	68b9      	ldr	r1, [r7, #8]
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f7fb fe59 	bl	80050a2 <lfs_cache_drop>
    while (true) {
 80093f0:	e707      	b.n	8009202 <lfs_ctz_extend+0xe>
    }
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3738      	adds	r7, #56	@ 0x38
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	0800eb2c 	.word	0x0800eb2c
 8009400:	0800ea1c 	.word	0x0800ea1c
 8009404:	0800ebac 	.word	0x0800ebac

08009408 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8009408:	b580      	push	{r7, lr}
 800940a:	b090      	sub	sp, #64	@ 0x40
 800940c:	af04      	add	r7, sp, #16
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
 8009414:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8009416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009418:	2b00      	cmp	r3, #0
 800941a:	d101      	bne.n	8009420 <lfs_ctz_traverse+0x18>
        return 0;
 800941c:	2300      	movs	r3, #0
 800941e:	e06b      	b.n	80094f8 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8009420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009422:	3b01      	subs	r3, #1
 8009424:	61fb      	str	r3, [r7, #28]
 8009426:	f107 031c 	add.w	r3, r7, #28
 800942a:	4619      	mov	r1, r3
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f7ff fe3e 	bl	80090ae <lfs_ctz_index>
 8009432:	4603      	mov	r3, r0
 8009434:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 8009436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009438:	6839      	ldr	r1, [r7, #0]
 800943a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800943c:	4798      	blx	r3
 800943e:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8009440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <lfs_ctz_traverse+0x42>
            return err;
 8009446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009448:	e056      	b.n	80094f8 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 800944a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800944c:	2b00      	cmp	r3, #0
 800944e:	d101      	bne.n	8009454 <lfs_ctz_traverse+0x4c>
            return 0;
 8009450:	2300      	movs	r3, #0
 8009452:	e051      	b.n	80094f8 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8009454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009456:	f003 0301 	and.w	r3, r3, #1
 800945a:	f1c3 0302 	rsb	r3, r3, #2
 800945e:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8009460:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8009462:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8009464:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8009466:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8009468:	9303      	str	r3, [sp, #12]
 800946a:	f107 0314 	add.w	r3, r7, #20
 800946e:	9302      	str	r3, [sp, #8]
 8009470:	2300      	movs	r3, #0
 8009472:	9301      	str	r3, [sp, #4]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	4613      	mov	r3, r2
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	68b9      	ldr	r1, [r7, #8]
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f7fb fe34 	bl	80050ec <lfs_bd_read>
 8009484:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	4618      	mov	r0, r3
 800948a:	f7fb fdc4 	bl	8005016 <lfs_fromle32>
 800948e:	4603      	mov	r3, r0
 8009490:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	4618      	mov	r0, r3
 8009496:	f7fb fdbe 	bl	8005016 <lfs_fromle32>
 800949a:	4603      	mov	r3, r0
 800949c:	61bb      	str	r3, [r7, #24]
        if (err) {
 800949e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d001      	beq.n	80094a8 <lfs_ctz_traverse+0xa0>
            return err;
 80094a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a6:	e027      	b.n	80094f8 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 80094a8:	2300      	movs	r3, #0
 80094aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094ac:	e012      	b.n	80094d4 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 80094ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	3330      	adds	r3, #48	@ 0x30
 80094b4:	443b      	add	r3, r7
 80094b6:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80094ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094bc:	4611      	mov	r1, r2
 80094be:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80094c0:	4798      	blx	r3
 80094c2:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 80094c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <lfs_ctz_traverse+0xc6>
                return err;
 80094ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094cc:	e014      	b.n	80094f8 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 80094ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d0:	3301      	adds	r3, #1
 80094d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	3b01      	subs	r3, #1
 80094d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094da:	429a      	cmp	r2, r3
 80094dc:	dbe7      	blt.n	80094ae <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 80094de:	6a3b      	ldr	r3, [r7, #32]
 80094e0:	3b01      	subs	r3, #1
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	3330      	adds	r3, #48	@ 0x30
 80094e6:	443b      	add	r3, r7
 80094e8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80094ec:	603b      	str	r3, [r7, #0]
        index -= count;
 80094ee:	6a3b      	ldr	r3, [r7, #32]
 80094f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 80094f6:	e79e      	b.n	8009436 <lfs_ctz_traverse+0x2e>
    }
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3730      	adds	r7, #48	@ 0x30
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8009500:	b5b0      	push	{r4, r5, r7, lr}
 8009502:	b09a      	sub	sp, #104	@ 0x68
 8009504:	af02      	add	r7, sp, #8
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
 800950c:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	f003 0302 	and.w	r3, r3, #2
 8009514:	2b00      	cmp	r3, #0
 8009516:	d008      	beq.n	800952a <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f002 fa3d 	bl	800b998 <lfs_fs_forceconsistency>
 800951e:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 8009520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <lfs_file_opencfg_+0x2a>
            return err;
 8009526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009528:	e1b0      	b.n	800988c <lfs_file_opencfg_+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800952e:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 8009530:	683a      	ldr	r2, [r7, #0]
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	2200      	movs	r2, #0
 800953a:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	2200      	movs	r2, #0
 8009540:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	2200      	movs	r2, #0
 8009546:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	f103 0108 	add.w	r1, r3, #8
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	3304      	adds	r3, #4
 8009552:	1d3a      	adds	r2, r7, #4
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f7fe f87b 	bl	8007650 <lfs_dir_find>
 800955a:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 800955c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800955e:	2b00      	cmp	r3, #0
 8009560:	da0c      	bge.n	800957c <lfs_file_opencfg_+0x7c>
 8009562:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009564:	f113 0f02 	cmn.w	r3, #2
 8009568:	d105      	bne.n	8009576 <lfs_file_opencfg_+0x76>
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	889b      	ldrh	r3, [r3, #4]
 800956e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8009572:	4293      	cmp	r3, r2
 8009574:	d102      	bne.n	800957c <lfs_file_opencfg_+0x7c>
        err = tag;
 8009576:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009578:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 800957a:	e17c      	b.n	8009876 <lfs_file_opencfg_+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	2201      	movs	r2, #1
 8009580:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8009582:	68b9      	ldr	r1, [r7, #8]
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f7fc fc74 	bl	8005e72 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 800958a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800958c:	f113 0f02 	cmn.w	r3, #2
 8009590:	d14e      	bne.n	8009630 <lfs_file_opencfg_+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009598:	2b00      	cmp	r3, #0
 800959a:	d103      	bne.n	80095a4 <lfs_file_opencfg_+0xa4>
            err = LFS_ERR_NOENT;
 800959c:	f06f 0301 	mvn.w	r3, #1
 80095a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80095a2:	e168      	b.n	8009876 <lfs_file_opencfg_+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7f6 fdf2 	bl	8000190 <strlen>
 80095ac:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d903      	bls.n	80095c0 <lfs_file_opencfg_+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 80095b8:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 80095bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80095be:	e15a      	b.n	8009876 <lfs_file_opencfg_+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	f103 0108 	add.w	r1, r3, #8
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	889b      	ldrh	r3, [r3, #4]
 80095ca:	029b      	lsls	r3, r3, #10
 80095cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095d6:	2300      	movs	r3, #0
 80095d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	889b      	ldrh	r3, [r3, #4]
 80095de:	029a      	lsls	r2, r3, #10
 80095e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095e2:	4313      	orrs	r3, r2
 80095e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	889b      	ldrh	r3, [r3, #4]
 80095f2:	029b      	lsls	r3, r3, #10
 80095f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80095f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095fe:	2300      	movs	r3, #0
 8009600:	643b      	str	r3, [r7, #64]	@ 0x40
 8009602:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8009606:	2303      	movs	r3, #3
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f7ff fd2b 	bl	8009064 <lfs_dir_commit>
 800960e:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8009610:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009612:	f113 0f1c 	cmn.w	r3, #28
 8009616:	d001      	beq.n	800961c <lfs_file_opencfg_+0x11c>
 8009618:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800961a:	e001      	b.n	8009620 <lfs_file_opencfg_+0x120>
 800961c:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8009620:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 8009622:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009624:	2b00      	cmp	r3, #0
 8009626:	f040 8125 	bne.w	8009874 <lfs_file_opencfg_+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 800962a:	4b9a      	ldr	r3, [pc, #616]	@ (8009894 <lfs_file_opencfg_+0x394>)
 800962c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800962e:	e044      	b.n	80096ba <lfs_file_opencfg_+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009636:	2b00      	cmp	r3, #0
 8009638:	d003      	beq.n	8009642 <lfs_file_opencfg_+0x142>
        err = LFS_ERR_EXIST;
 800963a:	f06f 0310 	mvn.w	r3, #16
 800963e:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8009640:	e119      	b.n	8009876 <lfs_file_opencfg_+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8009642:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009644:	4618      	mov	r0, r3
 8009646:	f7fc f9bf 	bl	80059c8 <lfs_tag_type3>
 800964a:	4603      	mov	r3, r0
 800964c:	2b01      	cmp	r3, #1
 800964e:	d003      	beq.n	8009658 <lfs_file_opencfg_+0x158>
        err = LFS_ERR_ISDIR;
 8009650:	f06f 0314 	mvn.w	r3, #20
 8009654:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8009656:	e10e      	b.n	8009876 <lfs_file_opencfg_+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00e      	beq.n	8009680 <lfs_file_opencfg_+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	889b      	ldrh	r3, [r3, #4]
 8009666:	029b      	lsls	r3, r3, #10
 8009668:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800966c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009670:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009676:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	631a      	str	r2, [r3, #48]	@ 0x30
 800967e:	e01c      	b.n	80096ba <lfs_file_opencfg_+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	889b      	ldrh	r3, [r3, #4]
 800968a:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800968c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009690:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8009698:	9200      	str	r2, [sp, #0]
 800969a:	4a7f      	ldr	r2, [pc, #508]	@ (8009898 <lfs_file_opencfg_+0x398>)
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f7fc fe39 	bl	8006314 <lfs_dir_get>
 80096a2:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 80096a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	da02      	bge.n	80096b0 <lfs_file_opencfg_+0x1b0>
            err = tag;
 80096aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80096ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80096ae:	e0e2      	b.n	8009876 <lfs_file_opencfg_+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	3328      	adds	r3, #40	@ 0x28
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fc fafd 	bl	8005cb4 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80096ba:	2300      	movs	r3, #0
 80096bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80096be:	e063      	b.n	8009788 <lfs_file_opencfg_+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d03c      	beq.n	8009746 <lfs_file_opencfg_+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096d6:	6859      	ldr	r1, [r3, #4]
 80096d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096da:	4613      	mov	r3, r2
 80096dc:	005b      	lsls	r3, r3, #1
 80096de:	4413      	add	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	440b      	add	r3, r1
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80096ea:	051a      	lsls	r2, r3, #20
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	889b      	ldrh	r3, [r3, #4]
 80096f0:	029b      	lsls	r3, r3, #10
 80096f2:	ea42 0103 	orr.w	r1, r2, r3
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096fa:	6858      	ldr	r0, [r3, #4]
 80096fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096fe:	4613      	mov	r3, r2
 8009700:	005b      	lsls	r3, r3, #1
 8009702:	4413      	add	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	4403      	add	r3, r0
 8009708:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800970a:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009712:	6859      	ldr	r1, [r3, #4]
 8009714:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009716:	4613      	mov	r3, r2
 8009718:	005b      	lsls	r3, r3, #1
 800971a:	4413      	add	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	4603      	mov	r3, r0
 8009726:	4a5d      	ldr	r2, [pc, #372]	@ (800989c <lfs_file_opencfg_+0x39c>)
 8009728:	4621      	mov	r1, r4
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f7fc fdf2 	bl	8006314 <lfs_dir_get>
 8009730:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8009732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009734:	2b00      	cmp	r3, #0
 8009736:	da06      	bge.n	8009746 <lfs_file_opencfg_+0x246>
 8009738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800973a:	f113 0f02 	cmn.w	r3, #2
 800973e:	d002      	beq.n	8009746 <lfs_file_opencfg_+0x246>
                err = res;
 8009740:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009742:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8009744:	e097      	b.n	8009876 <lfs_file_opencfg_+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800974a:	f003 0302 	and.w	r3, r3, #2
 800974e:	2b00      	cmp	r3, #0
 8009750:	d017      	beq.n	8009782 <lfs_file_opencfg_+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009756:	6859      	ldr	r1, [r3, #4]
 8009758:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800975a:	4613      	mov	r3, r2
 800975c:	005b      	lsls	r3, r3, #1
 800975e:	4413      	add	r3, r2
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	440b      	add	r3, r1
 8009764:	689a      	ldr	r2, [r3, #8]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800976a:	429a      	cmp	r2, r3
 800976c:	d903      	bls.n	8009776 <lfs_file_opencfg_+0x276>
                err = LFS_ERR_NOSPC;
 800976e:	f06f 031b 	mvn.w	r3, #27
 8009772:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8009774:	e07f      	b.n	8009876 <lfs_file_opencfg_+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800977a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8009782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009784:	3301      	adds	r3, #1
 8009786:	657b      	str	r3, [r7, #84]	@ 0x54
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009790:	429a      	cmp	r2, r3
 8009792:	d395      	bcc.n	80096c0 <lfs_file_opencfg_+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d005      	beq.n	80097aa <lfs_file_opencfg_+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80097a8:	e010      	b.n	80097cc <lfs_file_opencfg_+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80097ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7fb fc5f 	bl	8005074 <lfs_malloc>
 80097b6:	4602      	mov	r2, r0
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d103      	bne.n	80097cc <lfs_file_opencfg_+0x2cc>
            err = LFS_ERR_NOMEM;
 80097c4:	f06f 030b 	mvn.w	r3, #11
 80097c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80097ca:	e054      	b.n	8009876 <lfs_file_opencfg_+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	3340      	adds	r3, #64	@ 0x40
 80097d0:	4619      	mov	r1, r3
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f7fb fc74 	bl	80050c0 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80097d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fc f8f4 	bl	80059c8 <lfs_tag_type3>
 80097e0:	4603      	mov	r3, r0
 80097e2:	461a      	mov	r2, r3
 80097e4:	f240 2301 	movw	r3, #513	@ 0x201
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d141      	bne.n	8009870 <lfs_file_opencfg_+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	f06f 0201 	mvn.w	r2, #1
 80097f2:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 80097f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fc f920 	bl	8005a3c <lfs_tag_size>
 80097fc:	4602      	mov	r2, r0
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009806:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	2200      	movs	r2, #0
 800981a:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009820:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800982a:	2b00      	cmp	r3, #0
 800982c:	d020      	beq.n	8009870 <lfs_file_opencfg_+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	889b      	ldrh	r3, [r3, #4]
 8009838:	029c      	lsls	r4, r3, #10
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800983e:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 8009842:	4618      	mov	r0, r3
 8009844:	f7fb fb77 	bl	8004f36 <lfs_min>
 8009848:	4603      	mov	r3, r0
 800984a:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800984c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	4613      	mov	r3, r2
 8009858:	4a0f      	ldr	r2, [pc, #60]	@ (8009898 <lfs_file_opencfg_+0x398>)
 800985a:	4629      	mov	r1, r5
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f7fc fd59 	bl	8006314 <lfs_dir_get>
 8009862:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 8009864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009866:	2b00      	cmp	r3, #0
 8009868:	da02      	bge.n	8009870 <lfs_file_opencfg_+0x370>
                err = res;
 800986a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800986c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 800986e:	e002      	b.n	8009876 <lfs_file_opencfg_+0x376>
            }
        }
    }

    return 0;
 8009870:	2300      	movs	r3, #0
 8009872:	e00b      	b.n	800988c <lfs_file_opencfg_+0x38c>
            goto cleanup;
 8009874:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800987a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_close_(lfs, file);
 8009882:	68b9      	ldr	r1, [r7, #8]
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f000 f823 	bl	80098d0 <lfs_file_close_>
    return err;
 800988a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800988c:	4618      	mov	r0, r3
 800988e:	3760      	adds	r7, #96	@ 0x60
 8009890:	46bd      	mov	sp, r7
 8009892:	bdb0      	pop	{r4, r5, r7, pc}
 8009894:	20100000 	.word	0x20100000
 8009898:	700ffc00 	.word	0x700ffc00
 800989c:	7ffffc00 	.word	0x7ffffc00

080098a0 <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b088      	sub	sp, #32
 80098a4:	af02      	add	r7, sp, #8
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
 80098ac:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 80098ae:	4b07      	ldr	r3, [pc, #28]	@ (80098cc <lfs_file_open_+0x2c>)
 80098b0:	9300      	str	r3, [sp, #0]
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	68b9      	ldr	r1, [r7, #8]
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f7ff fe21 	bl	8009500 <lfs_file_opencfg_>
 80098be:	6178      	str	r0, [r7, #20]
    return err;
 80098c0:	697b      	ldr	r3, [r7, #20]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3718      	adds	r7, #24
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	0800f7d4 	.word	0x0800f7d4

080098d0 <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 80098da:	6839      	ldr	r1, [r7, #0]
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 f9e5 	bl	8009cac <lfs_file_sync_>
 80098e2:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f7fc faa1 	bl	8005e2e <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d104      	bne.n	8009900 <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fb fbc6 	bl	800508c <lfs_free>
    }

    return err;
 8009900:	68fb      	ldr	r3, [r7, #12]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
	...

0800990c <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 800990c:	b590      	push	{r4, r7, lr}
 800990e:	b08d      	sub	sp, #52	@ 0x34
 8009910:	af06      	add	r7, sp, #24
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8009916:	f107 030c 	add.w	r3, r7, #12
 800991a:	4619      	mov	r1, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f7fc fb7b 	bl	8006018 <lfs_alloc>
 8009922:	6138      	str	r0, [r7, #16]
        if (err) {
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d001      	beq.n	800992e <lfs_file_relocate+0x22>
            return err;
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	e0bb      	b.n	8009aa6 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	4619      	mov	r1, r3
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7fb ff1a 	bl	800576c <lfs_bd_erase>
 8009938:	6138      	str	r0, [r7, #16]
        if (err) {
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d006      	beq.n	800994e <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8009946:	f000 809b 	beq.w	8009a80 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	e0ab      	b.n	8009aa6 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 800994e:	2300      	movs	r3, #0
 8009950:	617b      	str	r3, [r7, #20]
 8009952:	e069      	b.n	8009a28 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009958:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d027      	beq.n	80099b0 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	f103 0008 	add.w	r0, r3, #8
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	889b      	ldrh	r3, [r3, #4]
 8009978:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 800997a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800997e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009982:	2101      	movs	r1, #1
 8009984:	9105      	str	r1, [sp, #20]
 8009986:	f107 010b 	add.w	r1, r7, #11
 800998a:	9104      	str	r1, [sp, #16]
 800998c:	6979      	ldr	r1, [r7, #20]
 800998e:	9103      	str	r1, [sp, #12]
 8009990:	9302      	str	r3, [sp, #8]
 8009992:	4b47      	ldr	r3, [pc, #284]	@ (8009ab0 <lfs_file_relocate+0x1a4>)
 8009994:	9301      	str	r3, [sp, #4]
 8009996:	9200      	str	r2, [sp, #0]
 8009998:	4623      	mov	r3, r4
 800999a:	2200      	movs	r2, #0
 800999c:	4601      	mov	r1, r0
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7fc fcd3 	bl	800634a <lfs_dir_getread>
 80099a4:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d01e      	beq.n	80099ea <lfs_file_relocate+0xde>
                    return err;
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	e07a      	b.n	8009aa6 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 80099b6:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	1ad4      	subs	r4, r2, r3
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c4:	2201      	movs	r2, #1
 80099c6:	9203      	str	r2, [sp, #12]
 80099c8:	f107 020b 	add.w	r2, r7, #11
 80099cc:	9202      	str	r2, [sp, #8]
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	9201      	str	r2, [sp, #4]
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	4623      	mov	r3, r4
 80099d6:	4602      	mov	r2, r0
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f7fb fb87 	bl	80050ec <lfs_bd_read>
 80099de:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d001      	beq.n	80099ea <lfs_file_relocate+0xde>
                    return err;
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	e05d      	b.n	8009aa6 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f103 0110 	add.w	r1, r3, #16
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2201      	movs	r2, #1
 80099f6:	9203      	str	r2, [sp, #12]
 80099f8:	f107 020b 	add.w	r2, r7, #11
 80099fc:	9202      	str	r2, [sp, #8]
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	9201      	str	r2, [sp, #4]
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	2301      	movs	r3, #1
 8009a06:	4602      	mov	r2, r0
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7fb fe01 	bl	8005610 <lfs_bd_prog>
 8009a0e:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d005      	beq.n	8009a22 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8009a1c:	d032      	beq.n	8009a84 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	e041      	b.n	8009aa6 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	3301      	adds	r3, #1
 8009a26:	617b      	str	r3, [r7, #20]
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d390      	bcc.n	8009954 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	69d9      	ldr	r1, [r3, #28]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a40:	461a      	mov	r2, r3
 8009a42:	f003 faa9 	bl	800cf98 <memcpy>
        file->cache.block = lfs->pcache.block;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	691a      	ldr	r2, [r3, #16]
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	695a      	ldr	r2, [r3, #20]
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	699a      	ldr	r2, [r3, #24]
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	3310      	adds	r3, #16
 8009a62:	4619      	mov	r1, r3
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f7fb fb2b 	bl	80050c0 <lfs_cache_zero>

        file->block = nblock;
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a74:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	e012      	b.n	8009aa6 <lfs_file_relocate+0x19a>
                goto relocate;
 8009a80:	bf00      	nop
 8009a82:	e000      	b.n	8009a86 <lfs_file_relocate+0x17a>
                    goto relocate;
 8009a84:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	4a0a      	ldr	r2, [pc, #40]	@ (8009ab4 <lfs_file_relocate+0x1a8>)
 8009a8a:	9200      	str	r2, [sp, #0]
 8009a8c:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 8009a90:	4909      	ldr	r1, [pc, #36]	@ (8009ab8 <lfs_file_relocate+0x1ac>)
 8009a92:	480a      	ldr	r0, [pc, #40]	@ (8009abc <lfs_file_relocate+0x1b0>)
 8009a94:	f003 f992 	bl	800cdbc <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	3310      	adds	r3, #16
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f7fb faff 	bl	80050a2 <lfs_cache_drop>
    while (true) {
 8009aa4:	e737      	b.n	8009916 <lfs_file_relocate+0xa>
    }
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	371c      	adds	r7, #28
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd90      	pop	{r4, r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	fff7fc00 	.word	0xfff7fc00
 8009ab4:	0800eb2c 	.word	0x0800eb2c
 8009ab8:	0800ea1c 	.word	0x0800ea1c
 8009abc:	0800ebac 	.word	0x0800ebac

08009ac0 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f7fc fa09 	bl	8005eea <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7ff ff16 	bl	800990c <lfs_file_relocate>
 8009ae0:	60f8      	str	r0, [r7, #12]
    if (err) {
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d001      	beq.n	8009aec <lfs_file_outline+0x2c>
        return err;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	e006      	b.n	8009afa <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009af0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
	...

08009b04 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8009b04:	b590      	push	{r4, r7, lr}
 8009b06:	b09f      	sub	sp, #124	@ 0x7c
 8009b08:	af02      	add	r7, sp, #8
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d011      	beq.n	8009b3e <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d105      	bne.n	8009b32 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	3340      	adds	r3, #64	@ 0x40
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7fb fab8 	bl	80050a2 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b36:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f000 80a4 	beq.w	8009c94 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b50:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d176      	bne.n	8009c4c <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8009b5e:	f107 030c 	add.w	r3, r7, #12
 8009b62:	2254      	movs	r2, #84	@ 0x54
 8009b64:	2100      	movs	r1, #0
 8009b66:	4618      	mov	r0, r3
 8009b68:	f003 f94a 	bl	800ce00 <memset>
                .ctz.head = file->ctz.head,
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 8009b70:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 8009b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b78:	2301      	movs	r3, #1
 8009b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 8009b80:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8009b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4619      	mov	r1, r3
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7fb fa85 	bl	80050a2 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8009b98:	e02b      	b.n	8009bf2 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8009b9a:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8009b9e:	f107 010c 	add.w	r1, r7, #12
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f921 	bl	8009dec <lfs_file_flushedread>
 8009baa:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8009bac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	da01      	bge.n	8009bb6 <lfs_file_flush+0xb2>
                    return res;
 8009bb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bb4:	e06f      	b.n	8009c96 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8009bb6:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8009bba:	2301      	movs	r3, #1
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fa1c 	bl	8009ffc <lfs_file_flushedwrite>
 8009bc4:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8009bc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	da01      	bge.n	8009bd0 <lfs_file_flush+0xcc>
                    return res;
 8009bcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bce:	e062      	b.n	8009c96 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bd8:	d00b      	beq.n	8009bf2 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8009bda:	f107 030c 	add.w	r3, r7, #12
 8009bde:	3340      	adds	r3, #64	@ 0x40
 8009be0:	4619      	mov	r1, r3
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7fb fa5d 	bl	80050a2 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4619      	mov	r1, r3
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f7fb fa58 	bl	80050a2 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d3cd      	bcc.n	8009b9a <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	2301      	movs	r3, #1
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7fb fc53 	bl	80054b4 <lfs_bd_flush>
 8009c0e:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8009c10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d026      	beq.n	8009c64 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8009c16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c18:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8009c1c:	d001      	beq.n	8009c22 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8009c1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c20:	e039      	b.n	8009c96 <lfs_file_flush+0x192>
                        goto relocate;
 8009c22:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c28:	4a1d      	ldr	r2, [pc, #116]	@ (8009ca0 <lfs_file_flush+0x19c>)
 8009c2a:	9200      	str	r2, [sp, #0]
 8009c2c:	f640 522b 	movw	r2, #3371	@ 0xd2b
 8009c30:	491c      	ldr	r1, [pc, #112]	@ (8009ca4 <lfs_file_flush+0x1a0>)
 8009c32:	481d      	ldr	r0, [pc, #116]	@ (8009ca8 <lfs_file_flush+0x1a4>)
 8009c34:	f003 f8c2 	bl	800cdbc <iprintf>
                err = lfs_file_relocate(lfs, file);
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f7ff fe66 	bl	800990c <lfs_file_relocate>
 8009c40:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8009c42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d0da      	beq.n	8009bfe <lfs_file_flush+0xfa>
                    return err;
 8009c48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c4a:	e024      	b.n	8009c96 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c54:	4619      	mov	r1, r3
 8009c56:	4610      	mov	r0, r2
 8009c58:	f7fb f95d 	bl	8004f16 <lfs_max>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	635a      	str	r2, [r3, #52]	@ 0x34
 8009c62:	e000      	b.n	8009c66 <lfs_file_flush+0x162>
                break;
 8009c64:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c7a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c86:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009c92:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3774      	adds	r7, #116	@ 0x74
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd90      	pop	{r4, r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	0800eb2c 	.word	0x0800eb2c
 8009ca4:	0800ea1c 	.word	0x0800ea1c
 8009ca8:	0800ebac 	.word	0x0800ebac

08009cac <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b090      	sub	sp, #64	@ 0x40
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	e08e      	b.n	8009de4 <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f7ff ff1b 	bl	8009b04 <lfs_file_flush>
 8009cce:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 8009cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d007      	beq.n	8009ce6 <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cda:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce4:	e07e      	b.n	8009de4 <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d077      	beq.n	8009de2 <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	3308      	adds	r3, #8
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fb fd7f 	bl	80057fa <lfs_pair_isnull>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	f083 0301 	eor.w	r3, r3, #1
 8009d02:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d06c      	beq.n	8009de2 <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10d      	bne.n	8009d30 <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f103 0110 	add.w	r1, r3, #16
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7fb fc42 	bl	80055a8 <lfs_bd_sync>
 8009d24:	6338      	str	r0, [r7, #48]	@ 0x30
            if (err) {
 8009d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <lfs_file_sync_+0x84>
                return err;
 8009d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2e:	e059      	b.n	8009de4 <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d009      	beq.n	8009d50 <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8009d3c:	f240 2301 	movw	r3, #513	@ 0x201
 8009d40:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d46:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d4e:	e014      	b.n	8009d7a <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8009d50:	f240 2302 	movw	r3, #514	@ 0x202
 8009d54:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009d5c:	3228      	adds	r2, #40	@ 0x28
 8009d5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d62:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8009d66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fb ffba 	bl	8005ce4 <lfs_ctz_tole32>
            buffer = &ctz;
 8009d70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009d74:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 8009d76:	2308      	movs	r3, #8
 8009d78:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	f103 0108 	add.w	r1, r3, #8
 8009d80:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009d82:	051a      	lsls	r2, r3, #20
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	889b      	ldrh	r3, [r3, #4]
 8009d88:	029b      	lsls	r3, r3, #10
 8009d8a:	431a      	orrs	r2, r3
 8009d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	61bb      	str	r3, [r7, #24]
 8009d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d94:	61fb      	str	r3, [r7, #28]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	889b      	ldrh	r3, [r3, #4]
 8009d9a:	029a      	lsls	r2, r3, #10
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 8009da8:	623b      	str	r3, [r7, #32]
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009db2:	f107 0218 	add.w	r2, r7, #24
 8009db6:	2302      	movs	r3, #2
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7ff f953 	bl	8009064 <lfs_dir_commit>
 8009dbe:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d007      	beq.n	8009dd6 <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dca:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd4:	e006      	b.n	8009de4 <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dda:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3740      	adds	r7, #64	@ 0x40
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8009dec:	b5b0      	push	{r4, r5, r7, lr}
 8009dee:	b090      	sub	sp, #64	@ 0x40
 8009df0:	af06      	add	r7, sp, #24
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
 8009df8:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d301      	bcc.n	8009e12 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	e0b7      	b.n	8009f82 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6838      	ldr	r0, [r7, #0]
 8009e20:	f7fb f889 	bl	8004f36 <lfs_min>
 8009e24:	6038      	str	r0, [r7, #0]
    nsize = size;
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8009e2a:	e0a5      	b.n	8009f78 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d006      	beq.n	8009e46 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e40:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d130      	bne.n	8009ea8 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d11c      	bne.n	8009e8c <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e60:	68ba      	ldr	r2, [r7, #8]
 8009e62:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009e64:	68b9      	ldr	r1, [r7, #8]
 8009e66:	3138      	adds	r1, #56	@ 0x38
 8009e68:	68b8      	ldr	r0, [r7, #8]
 8009e6a:	303c      	adds	r0, #60	@ 0x3c
 8009e6c:	9003      	str	r0, [sp, #12]
 8009e6e:	9102      	str	r1, [sp, #8]
 8009e70:	9201      	str	r2, [sp, #4]
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	462b      	mov	r3, r5
 8009e76:	4622      	mov	r2, r4
 8009e78:	2100      	movs	r1, #0
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f7ff f94f 	bl	800911e <lfs_ctz_find>
 8009e80:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d009      	beq.n	8009e9c <lfs_file_flushedread+0xb0>
                    return err;
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	e07a      	b.n	8009f82 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	f06f 0201 	mvn.w	r2, #1
 8009e92:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ea0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009eac:	69da      	ldr	r2, [r3, #28]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6a38      	ldr	r0, [r7, #32]
 8009eb8:	f7fb f83d 	bl	8004f36 <lfs_min>
 8009ebc:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ec2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d026      	beq.n	8009f18 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	f103 0408 	add.w	r4, r3, #8
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009eda:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	889b      	ldrh	r3, [r3, #4]
 8009ee0:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8009ee2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009ee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009eea:	68b9      	ldr	r1, [r7, #8]
 8009eec:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8009eee:	69b8      	ldr	r0, [r7, #24]
 8009ef0:	9005      	str	r0, [sp, #20]
 8009ef2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009ef4:	9004      	str	r0, [sp, #16]
 8009ef6:	9103      	str	r1, [sp, #12]
 8009ef8:	9302      	str	r3, [sp, #8]
 8009efa:	4b24      	ldr	r3, [pc, #144]	@ (8009f8c <lfs_file_flushedread+0x1a0>)
 8009efc:	9301      	str	r3, [sp, #4]
 8009efe:	9200      	str	r2, [sp, #0]
 8009f00:	462b      	mov	r3, r5
 8009f02:	2200      	movs	r2, #0
 8009f04:	4621      	mov	r1, r4
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f7fc fa1f 	bl	800634a <lfs_dir_getread>
 8009f0c:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d01d      	beq.n	8009f50 <lfs_file_flushedread+0x164>
                return err;
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	e034      	b.n	8009f82 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009f22:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009f2c:	69b9      	ldr	r1, [r7, #24]
 8009f2e:	9103      	str	r1, [sp, #12]
 8009f30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f32:	9102      	str	r1, [sp, #8]
 8009f34:	9201      	str	r2, [sp, #4]
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	4623      	mov	r3, r4
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f7fb f8d4 	bl	80050ec <lfs_bd_read>
 8009f44:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <lfs_file_flushedread+0x164>
                return err;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	e018      	b.n	8009f82 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	441a      	add	r2, r3
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	441a      	add	r2, r3
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8009f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 8009f70:	6a3a      	ldr	r2, [r7, #32]
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	1ad3      	subs	r3, r2, r3
 8009f76:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8009f78:	6a3b      	ldr	r3, [r7, #32]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f47f af56 	bne.w	8009e2c <lfs_file_flushedread+0x40>
    }

    return size;
 8009f80:	683b      	ldr	r3, [r7, #0]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3728      	adds	r7, #40	@ 0x28
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bdb0      	pop	{r4, r5, r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	fff7fc00 	.word	0xfff7fc00

08009f90 <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	607a      	str	r2, [r7, #4]
 8009f9c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fa2:	f003 0301 	and.w	r3, r3, #1
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d106      	bne.n	8009fb8 <lfs_file_read_+0x28>
 8009faa:	4b11      	ldr	r3, [pc, #68]	@ (8009ff0 <lfs_file_read_+0x60>)
 8009fac:	4a11      	ldr	r2, [pc, #68]	@ (8009ff4 <lfs_file_read_+0x64>)
 8009fae:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 8009fb2:	4811      	ldr	r0, [pc, #68]	@ (8009ff8 <lfs_file_read_+0x68>)
 8009fb4:	f002 fcac 	bl	800c910 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d009      	beq.n	8009fd8 <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8009fc4:	68b9      	ldr	r1, [r7, #8]
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	f7ff fd9c 	bl	8009b04 <lfs_file_flush>
 8009fcc:	6178      	str	r0, [r7, #20]
        if (err) {
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <lfs_file_read_+0x48>
            return err;
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	e006      	b.n	8009fe6 <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	68b9      	ldr	r1, [r7, #8]
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f7ff ff04 	bl	8009dec <lfs_file_flushedread>
 8009fe4:	4603      	mov	r3, r0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3718      	adds	r7, #24
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	0800ed54 	.word	0x0800ed54
 8009ff4:	0800f7e0 	.word	0x0800f7e0
 8009ff8:	0800ea1c 	.word	0x0800ea1c

08009ffc <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8009ffc:	b5b0      	push	{r4, r5, r7, lr}
 8009ffe:	b090      	sub	sp, #64	@ 0x40
 800a000:	af04      	add	r7, sp, #16
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
 800a008:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a016:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f000 80f4 	beq.w	800a208 <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a026:	441a      	add	r2, r3
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a02c:	4619      	mov	r1, r3
 800a02e:	4610      	mov	r0, r2
 800a030:	f7fa ff71 	bl	8004f16 <lfs_max>
 800a034:	4602      	mov	r2, r0
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 800a03a:	429a      	cmp	r2, r3
 800a03c:	f240 80e4 	bls.w	800a208 <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 800a040:	68b9      	ldr	r1, [r7, #8]
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f7ff fd3c 	bl	8009ac0 <lfs_file_outline>
 800a048:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 800a04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f000 80db 	beq.w	800a208 <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a056:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 800a05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a060:	e0d7      	b.n	800a212 <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d006      	beq.n	800a07c <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a076:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 800a078:	429a      	cmp	r2, r3
 800a07a:	d16d      	bne.n	800a158 <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a080:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a084:	2b00      	cmp	r3, #0
 800a086:	d159      	bne.n	800a13c <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a08c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a090:	2b00      	cmp	r3, #0
 800a092:	d12f      	bne.n	800a0f4 <lfs_file_flushedwrite+0xf8>
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d02b      	beq.n	800a0f4 <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800a0ae:	3a01      	subs	r2, #1
 800a0b0:	68b9      	ldr	r1, [r7, #8]
 800a0b2:	3138      	adds	r1, #56	@ 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800a0b8:	f107 0010 	add.w	r0, r7, #16
 800a0bc:	9003      	str	r0, [sp, #12]
 800a0be:	9102      	str	r1, [sp, #8]
 800a0c0:	9201      	str	r2, [sp, #4]
 800a0c2:	9300      	str	r3, [sp, #0]
 800a0c4:	462b      	mov	r3, r5
 800a0c6:	4622      	mov	r2, r4
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f7ff f827 	bl	800911e <lfs_ctz_find>
 800a0d0:	6238      	str	r0, [r7, #32]
                    if (err) {
 800a0d2:	6a3b      	ldr	r3, [r7, #32]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d007      	beq.n	800a0e8 <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0dc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 800a0e4:	6a3b      	ldr	r3, [r7, #32]
 800a0e6:	e094      	b.n	800a212 <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	3340      	adds	r3, #64	@ 0x40
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f7fa ffe6 	bl	80050c0 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f7fb fef8 	bl	8005eea <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800a100:	68fc      	ldr	r4, [r7, #12]
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	3238      	adds	r2, #56	@ 0x38
 800a10e:	68b9      	ldr	r1, [r7, #8]
 800a110:	313c      	adds	r1, #60	@ 0x3c
 800a112:	9102      	str	r1, [sp, #8]
 800a114:	9201      	str	r2, [sp, #4]
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	462b      	mov	r3, r5
 800a11a:	4622      	mov	r2, r4
 800a11c:	4601      	mov	r1, r0
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f7ff f868 	bl	80091f4 <lfs_ctz_extend>
 800a124:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00f      	beq.n	800a14c <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a130:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	e06a      	b.n	800a212 <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	f06f 0201 	mvn.w	r2, #1
 800a142:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a150:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a15c:	69da      	ldr	r2, [r3, #28]
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a162:	1ad3      	subs	r3, r2, r3
 800a164:	4619      	mov	r1, r3
 800a166:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a168:	f7fa fee5 	bl	8004f36 <lfs_min>
 800a16c:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800a174:	68fc      	ldr	r4, [r7, #12]
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a17e:	69b9      	ldr	r1, [r7, #24]
 800a180:	9103      	str	r1, [sp, #12]
 800a182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a184:	9102      	str	r1, [sp, #8]
 800a186:	9201      	str	r2, [sp, #4]
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	2301      	movs	r3, #1
 800a18c:	4622      	mov	r2, r4
 800a18e:	4601      	mov	r1, r0
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f7fb fa3d 	bl	8005610 <lfs_bd_prog>
 800a196:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d01c      	beq.n	800a1d8 <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800a1a4:	d007      	beq.n	800a1b6 <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1aa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	e02d      	b.n	800a212 <lfs_file_flushedwrite+0x216>
                    goto relocate;
 800a1b6:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 800a1b8:	68b9      	ldr	r1, [r7, #8]
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f7ff fba6 	bl	800990c <lfs_file_relocate>
 800a1c0:	6178      	str	r0, [r7, #20]
            if (err) {
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d0d2      	beq.n	800a16e <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1cc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	e01c      	b.n	800a212 <lfs_file_flushedwrite+0x216>
            break;
 800a1d8:	bf00      	nop
            }
        }

        file->pos += diff;
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	441a      	add	r2, r3
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	441a      	add	r2, r3
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 800a1f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 800a1fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	1ad3      	subs	r3, r2, r3
 800a200:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ckpoint(lfs);
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f7fb fe71 	bl	8005eea <lfs_alloc_ckpoint>
    while (nsize > 0) {
 800a208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	f47f af29 	bne.w	800a062 <lfs_file_flushedwrite+0x66>
    }

    return size;
 800a210:	683b      	ldr	r3, [r7, #0]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3730      	adds	r7, #48	@ 0x30
 800a216:	46bd      	mov	sp, r7
 800a218:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a21c <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b08a      	sub	sp, #40	@ 0x28
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
 800a228:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a22e:	f003 0302 	and.w	r3, r3, #2
 800a232:	2b00      	cmp	r3, #0
 800a234:	d106      	bne.n	800a244 <lfs_file_write_+0x28>
 800a236:	4b38      	ldr	r3, [pc, #224]	@ (800a318 <lfs_file_write_+0xfc>)
 800a238:	4a38      	ldr	r2, [pc, #224]	@ (800a31c <lfs_file_write_+0x100>)
 800a23a:	f640 6126 	movw	r1, #3622	@ 0xe26
 800a23e:	4838      	ldr	r0, [pc, #224]	@ (800a320 <lfs_file_write_+0x104>)
 800a240:	f002 fb66 	bl	800c910 <__assert_func>

    if (file->flags & LFS_F_READING) {
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a248:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d009      	beq.n	800a264 <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 800a250:	68b9      	ldr	r1, [r7, #8]
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f7ff fc56 	bl	8009b04 <lfs_file_flush>
 800a258:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 800a25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d001      	beq.n	800a264 <lfs_file_write_+0x48>
            return err;
 800a260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a262:	e055      	b.n	800a310 <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a268:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d009      	beq.n	800a284 <lfs_file_write_+0x68>
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a278:	429a      	cmp	r2, r3
 800a27a:	d203      	bcs.n	800a284 <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (file->pos + size > lfs->file_max) {
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	441a      	add	r2, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a290:	429a      	cmp	r2, r3
 800a292:	d902      	bls.n	800a29a <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 800a294:	f06f 031a 	mvn.w	r3, #26
 800a298:	e03a      	b.n	800a310 <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a29e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d121      	bne.n	800a2ea <lfs_file_write_+0xce>
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d91b      	bls.n	800a2ea <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2b6:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	635a      	str	r2, [r3, #52]	@ 0x34

        while (file->pos < pos) {
 800a2c0:	e00e      	b.n	800a2e0 <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	75fb      	strb	r3, [r7, #23]
 800a2c6:	f107 0217 	add.w	r2, r7, #23
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	68b9      	ldr	r1, [r7, #8]
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f7ff fe94 	bl	8009ffc <lfs_file_flushedwrite>
 800a2d4:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	da01      	bge.n	800a2e0 <lfs_file_write_+0xc4>
                return res;
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	e017      	b.n	800a310 <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2e4:	6a3a      	ldr	r2, [r7, #32]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d8eb      	bhi.n	800a2c2 <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	68b9      	ldr	r1, [r7, #8]
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f7ff fe83 	bl	8009ffc <lfs_file_flushedwrite>
 800a2f6:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	da01      	bge.n	800a302 <lfs_file_write_+0xe6>
        return nsize;
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	e006      	b.n	800a310 <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a306:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	631a      	str	r2, [r3, #48]	@ 0x30
    return nsize;
 800a30e:	69bb      	ldr	r3, [r7, #24]
}
 800a310:	4618      	mov	r0, r3
 800a312:	3728      	adds	r7, #40	@ 0x28
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	0800ed84 	.word	0x0800ed84
 800a31c:	0800f7f0 	.word	0x0800f7f0
 800a320:	0800ea1c 	.word	0x0800ea1c

0800a324 <lfs_file_seek_>:
#endif

static lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 800a324:	b580      	push	{r7, lr}
 800a326:	b08c      	sub	sp, #48	@ 0x30
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	607a      	str	r2, [r7, #4]
 800a330:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a336:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (whence == LFS_SEEK_SET) {
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d102      	bne.n	800a344 <lfs_file_seek_+0x20>
        npos = off;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a342:	e025      	b.n	800a390 <lfs_file_seek_+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	2b01      	cmp	r3, #1
 800a348:	d10f      	bne.n	800a36a <lfs_file_seek_+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a34e:	461a      	mov	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4413      	add	r3, r2
 800a354:	2b00      	cmp	r3, #0
 800a356:	da02      	bge.n	800a35e <lfs_file_seek_+0x3a>
            return LFS_ERR_INVAL;
 800a358:	f06f 0315 	mvn.w	r3, #21
 800a35c:	e067      	b.n	800a42e <lfs_file_seek_+0x10a>
        } else {
            npos = file->pos + off;
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4413      	add	r3, r2
 800a366:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a368:	e012      	b.n	800a390 <lfs_file_seek_+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d10f      	bne.n	800a390 <lfs_file_seek_+0x6c>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 800a370:	68b9      	ldr	r1, [r7, #8]
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f000 f882 	bl	800a47c <lfs_file_size_>
 800a378:	4602      	mov	r2, r0
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4413      	add	r3, r2
 800a37e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (res < 0) {
 800a380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a382:	2b00      	cmp	r3, #0
 800a384:	da02      	bge.n	800a38c <lfs_file_seek_+0x68>
            return LFS_ERR_INVAL;
 800a386:	f06f 0315 	mvn.w	r3, #21
 800a38a:	e050      	b.n	800a42e <lfs_file_seek_+0x10a>
        } else {
            npos = res;
 800a38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a38e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if (npos > lfs->file_max) {
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a394:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a396:	429a      	cmp	r2, r3
 800a398:	d902      	bls.n	800a3a0 <lfs_file_seek_+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 800a39a:	f06f 0315 	mvn.w	r3, #21
 800a39e:	e046      	b.n	800a42e <lfs_file_seek_+0x10a>
    }

    if (file->pos == npos) {
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d101      	bne.n	800a3ae <lfs_file_seek_+0x8a>
        // noop - position has not changed
        return npos;
 800a3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ac:	e03f      	b.n	800a42e <lfs_file_seek_+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
    if (
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d12b      	bne.n	800a412 <lfs_file_seek_+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3be:	61bb      	str	r3, [r7, #24]
 800a3c0:	f107 0318 	add.w	r3, r7, #24
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f7fe fe71 	bl	80090ae <lfs_ctz_index>
 800a3cc:	6278      	str	r0, [r7, #36]	@ 0x24
        lfs_off_t noff = npos;
 800a3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3d0:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 800a3d2:	f107 0314 	add.w	r3, r7, #20
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f7fe fe68 	bl	80090ae <lfs_ctz_index>
 800a3de:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 800a3e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3e2:	6a3b      	ldr	r3, [r7, #32]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d114      	bne.n	800a412 <lfs_file_seek_+0xee>
                && noff >= file->cache.off
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d80f      	bhi.n	800a412 <lfs_file_seek_+0xee>
                && noff < file->cache.off + file->cache.size) {
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3fa:	441a      	add	r2, r3
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d907      	bls.n	800a412 <lfs_file_seek_+0xee>
            file->pos = npos;
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a406:	635a      	str	r2, [r3, #52]	@ 0x34
            file->off = noff;
 800a408:	697a      	ldr	r2, [r7, #20]
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	63da      	str	r2, [r3, #60]	@ 0x3c
            return npos;
 800a40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a410:	e00d      	b.n	800a42e <lfs_file_seek_+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 800a412:	68b9      	ldr	r1, [r7, #8]
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f7ff fb75 	bl	8009b04 <lfs_file_flush>
 800a41a:	61f8      	str	r0, [r7, #28]
    if (err) {
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <lfs_file_seek_+0x102>
        return err;
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	e003      	b.n	800a42e <lfs_file_seek_+0x10a>
    }

    // update pos
    file->pos = npos;
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a42a:	635a      	str	r2, [r3, #52]	@ 0x34
    return npos;
 800a42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3730      	adds	r7, #48	@ 0x30
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <lfs_file_tell_>:

    return 0;
}
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
 800a436:	b480      	push	{r7}
 800a438:	b083      	sub	sp, #12
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	6039      	str	r1, [r7, #0]
    (void)lfs;
    return file->pos;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 800a444:	4618      	mov	r0, r3
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <lfs_file_rewind_>:

static int lfs_file_rewind_(lfs_t *lfs, lfs_file_t *file) {
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
    lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);
 800a45a:	2300      	movs	r3, #0
 800a45c:	2200      	movs	r2, #0
 800a45e:	6839      	ldr	r1, [r7, #0]
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f7ff ff5f 	bl	800a324 <lfs_file_seek_>
 800a466:	60f8      	str	r0, [r7, #12]
    if (res < 0) {
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	da01      	bge.n	800a472 <lfs_file_rewind_+0x22>
        return (int)res;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	e000      	b.n	800a474 <lfs_file_rewind_+0x24>
    }

    return 0;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <lfs_file_size_>:

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a48a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d009      	beq.n	800a4a6 <lfs_file_size_+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a49a:	4619      	mov	r1, r3
 800a49c:	4610      	mov	r0, r2
 800a49e:	f7fa fd3a 	bl	8004f16 <lfs_max>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	e001      	b.n	800a4aa <lfs_file_size_+0x2e>
    }
#endif

    return file->ctz.size;
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
	...

0800a4b4 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 800a4b4:	b590      	push	{r4, r7, lr}
 800a4b6:	b08d      	sub	sp, #52	@ 0x34
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	683a      	ldr	r2, [r7, #0]
 800a4c2:	669a      	str	r2, [r3, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	6a1a      	ldr	r2, [r3, #32]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	66da      	str	r2, [r3, #108]	@ 0x6c
    int err = 0;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d106      	bne.n	800a4e8 <lfs_init+0x34>
 800a4da:	4b96      	ldr	r3, [pc, #600]	@ (800a734 <lfs_init+0x280>)
 800a4dc:	4a96      	ldr	r2, [pc, #600]	@ (800a738 <lfs_init+0x284>)
 800a4de:	f241 0152 	movw	r1, #4178	@ 0x1052
 800a4e2:	4896      	ldr	r0, [pc, #600]	@ (800a73c <lfs_init+0x288>)
 800a4e4:	f002 fa14 	bl	800c910 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4ec:	699b      	ldr	r3, [r3, #24]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d106      	bne.n	800a500 <lfs_init+0x4c>
 800a4f2:	4b93      	ldr	r3, [pc, #588]	@ (800a740 <lfs_init+0x28c>)
 800a4f4:	4a90      	ldr	r2, [pc, #576]	@ (800a738 <lfs_init+0x284>)
 800a4f6:	f241 0153 	movw	r1, #4179	@ 0x1053
 800a4fa:	4890      	ldr	r0, [pc, #576]	@ (800a73c <lfs_init+0x288>)
 800a4fc:	f002 fa08 	bl	800c910 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a506:	2b00      	cmp	r3, #0
 800a508:	d106      	bne.n	800a518 <lfs_init+0x64>
 800a50a:	4b8e      	ldr	r3, [pc, #568]	@ (800a744 <lfs_init+0x290>)
 800a50c:	4a8a      	ldr	r2, [pc, #552]	@ (800a738 <lfs_init+0x284>)
 800a50e:	f241 0154 	movw	r1, #4180	@ 0x1054
 800a512:	488a      	ldr	r0, [pc, #552]	@ (800a73c <lfs_init+0x288>)
 800a514:	f002 f9fc 	bl	800c910 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a51c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800a522:	6952      	ldr	r2, [r2, #20]
 800a524:	fbb3 f1f2 	udiv	r1, r3, r2
 800a528:	fb01 f202 	mul.w	r2, r1, r2
 800a52c:	1a9b      	subs	r3, r3, r2
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d006      	beq.n	800a540 <lfs_init+0x8c>
 800a532:	4b85      	ldr	r3, [pc, #532]	@ (800a748 <lfs_init+0x294>)
 800a534:	4a80      	ldr	r2, [pc, #512]	@ (800a738 <lfs_init+0x284>)
 800a536:	f241 0158 	movw	r1, #4184	@ 0x1058
 800a53a:	4880      	ldr	r0, [pc, #512]	@ (800a73c <lfs_init+0x288>)
 800a53c:	f002 f9e8 	bl	800c910 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800a54a:	6992      	ldr	r2, [r2, #24]
 800a54c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a550:	fb01 f202 	mul.w	r2, r1, r2
 800a554:	1a9b      	subs	r3, r3, r2
 800a556:	2b00      	cmp	r3, #0
 800a558:	d006      	beq.n	800a568 <lfs_init+0xb4>
 800a55a:	4b7c      	ldr	r3, [pc, #496]	@ (800a74c <lfs_init+0x298>)
 800a55c:	4a76      	ldr	r2, [pc, #472]	@ (800a738 <lfs_init+0x284>)
 800a55e:	f241 0159 	movw	r1, #4185	@ 0x1059
 800a562:	4876      	ldr	r0, [pc, #472]	@ (800a73c <lfs_init+0x288>)
 800a564:	f002 f9d4 	bl	800c910 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a56c:	69db      	ldr	r3, [r3, #28]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800a572:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800a574:	fbb3 f1f2 	udiv	r1, r3, r2
 800a578:	fb01 f202 	mul.w	r2, r1, r2
 800a57c:	1a9b      	subs	r3, r3, r2
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d006      	beq.n	800a590 <lfs_init+0xdc>
 800a582:	4b73      	ldr	r3, [pc, #460]	@ (800a750 <lfs_init+0x29c>)
 800a584:	4a6c      	ldr	r2, [pc, #432]	@ (800a738 <lfs_init+0x284>)
 800a586:	f241 015a 	movw	r1, #4186	@ 0x105a
 800a58a:	486c      	ldr	r0, [pc, #432]	@ (800a73c <lfs_init+0x288>)
 800a58c:	f002 f9c0 	bl	800c910 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a594:	69db      	ldr	r3, [r3, #28]
 800a596:	2b7f      	cmp	r3, #127	@ 0x7f
 800a598:	d806      	bhi.n	800a5a8 <lfs_init+0xf4>
 800a59a:	4b6e      	ldr	r3, [pc, #440]	@ (800a754 <lfs_init+0x2a0>)
 800a59c:	4a66      	ldr	r2, [pc, #408]	@ (800a738 <lfs_init+0x284>)
 800a59e:	f241 015d 	movw	r1, #4189	@ 0x105d
 800a5a2:	4866      	ldr	r0, [pc, #408]	@ (800a73c <lfs_init+0x288>)
 800a5a4:	f002 f9b4 	bl	800c910 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5ac:	69db      	ldr	r3, [r3, #28]
 800a5ae:	3b08      	subs	r3, #8
 800a5b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7fa fcf3 	bl	8004fa4 <lfs_npw2>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	009a      	lsls	r2, r3, #2
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5c6:	69db      	ldr	r3, [r3, #28]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d906      	bls.n	800a5da <lfs_init+0x126>
 800a5cc:	4b62      	ldr	r3, [pc, #392]	@ (800a758 <lfs_init+0x2a4>)
 800a5ce:	4a5a      	ldr	r2, [pc, #360]	@ (800a738 <lfs_init+0x284>)
 800a5d0:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 800a5d4:	4859      	ldr	r0, [pc, #356]	@ (800a73c <lfs_init+0x288>)
 800a5d6:	f002 f99b 	bl	800c910 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d106      	bne.n	800a5f2 <lfs_init+0x13e>
 800a5e4:	4b5d      	ldr	r3, [pc, #372]	@ (800a75c <lfs_init+0x2a8>)
 800a5e6:	4a54      	ldr	r2, [pc, #336]	@ (800a738 <lfs_init+0x284>)
 800a5e8:	f241 0169 	movw	r1, #4201	@ 0x1069
 800a5ec:	4853      	ldr	r0, [pc, #332]	@ (800a73c <lfs_init+0x288>)
 800a5ee:	f002 f98f 	bl	800c910 <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00f      	beq.n	800a61c <lfs_init+0x168>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a600:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a606:	69db      	ldr	r3, [r3, #28]
 800a608:	085b      	lsrs	r3, r3, #1
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d206      	bcs.n	800a61c <lfs_init+0x168>
 800a60e:	4b54      	ldr	r3, [pc, #336]	@ (800a760 <lfs_init+0x2ac>)
 800a610:	4a49      	ldr	r2, [pc, #292]	@ (800a738 <lfs_init+0x284>)
 800a612:	f241 016f 	movw	r1, #4207	@ 0x106f
 800a616:	4849      	ldr	r0, [pc, #292]	@ (800a73c <lfs_init+0x288>)
 800a618:	f002 f97a 	bl	800c910 <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a622:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a626:	d00e      	beq.n	800a646 <lfs_init+0x192>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a62c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a632:	69db      	ldr	r3, [r3, #28]
 800a634:	429a      	cmp	r2, r3
 800a636:	d906      	bls.n	800a646 <lfs_init+0x192>
 800a638:	4b4a      	ldr	r3, [pc, #296]	@ (800a764 <lfs_init+0x2b0>)
 800a63a:	4a3f      	ldr	r2, [pc, #252]	@ (800a738 <lfs_init+0x284>)
 800a63c:	f241 0171 	movw	r1, #4209	@ 0x1071
 800a640:	483e      	ldr	r0, [pc, #248]	@ (800a73c <lfs_init+0x288>)
 800a642:	f002 f965 	bl	800c910 <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a64a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d005      	beq.n	800a65c <lfs_init+0x1a8>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a654:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	60da      	str	r2, [r3, #12]
 800a65a:	e010      	b.n	800a67e <lfs_init+0x1ca>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a662:	4618      	mov	r0, r3
 800a664:	f7fa fd06 	bl	8005074 <lfs_malloc>
 800a668:	4602      	mov	r2, r0
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d103      	bne.n	800a67e <lfs_init+0x1ca>
            err = LFS_ERR_NOMEM;
 800a676:	f06f 030b 	mvn.w	r3, #11
 800a67a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 800a67c:	e163      	b.n	800a946 <lfs_init+0x492>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a684:	2b00      	cmp	r3, #0
 800a686:	d005      	beq.n	800a694 <lfs_init+0x1e0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a68c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	61da      	str	r2, [r3, #28]
 800a692:	e010      	b.n	800a6b6 <lfs_init+0x202>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fa fcea 	bl	8005074 <lfs_malloc>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	69db      	ldr	r3, [r3, #28]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d103      	bne.n	800a6b6 <lfs_init+0x202>
            err = LFS_ERR_NOMEM;
 800a6ae:	f06f 030b 	mvn.w	r3, #11
 800a6b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 800a6b4:	e147      	b.n	800a946 <lfs_init+0x492>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f7fa fd00 	bl	80050c0 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	3310      	adds	r3, #16
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f7fa fcfa 	bl	80050c0 <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d106      	bne.n	800a6e4 <lfs_init+0x230>
 800a6d6:	4b24      	ldr	r3, [pc, #144]	@ (800a768 <lfs_init+0x2b4>)
 800a6d8:	4a17      	ldr	r2, [pc, #92]	@ (800a738 <lfs_init+0x284>)
 800a6da:	f241 0190 	movw	r1, #4240	@ 0x1090
 800a6de:	4817      	ldr	r0, [pc, #92]	@ (800a73c <lfs_init+0x288>)
 800a6e0:	f002 f916 	bl	800c910 <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d005      	beq.n	800a6fa <lfs_init+0x246>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	665a      	str	r2, [r3, #100]	@ 0x64
 800a6f8:	e010      	b.n	800a71c <lfs_init+0x268>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a700:	4618      	mov	r0, r3
 800a702:	f7fa fcb7 	bl	8005074 <lfs_malloc>
 800a706:	4602      	mov	r2, r0
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a710:	2b00      	cmp	r3, #0
 800a712:	d103      	bne.n	800a71c <lfs_init+0x268>
            err = LFS_ERR_NOMEM;
 800a714:	f06f 030b 	mvn.w	r3, #11
 800a718:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 800a71a:	e114      	b.n	800a946 <lfs_init+0x492>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a722:	2bff      	cmp	r3, #255	@ 0xff
 800a724:	d924      	bls.n	800a770 <lfs_init+0x2bc>
 800a726:	4b11      	ldr	r3, [pc, #68]	@ (800a76c <lfs_init+0x2b8>)
 800a728:	4a03      	ldr	r2, [pc, #12]	@ (800a738 <lfs_init+0x284>)
 800a72a:	f241 019c 	movw	r1, #4252	@ 0x109c
 800a72e:	4803      	ldr	r0, [pc, #12]	@ (800a73c <lfs_init+0x288>)
 800a730:	f002 f8ee 	bl	800c910 <__assert_func>
 800a734:	0800edb4 	.word	0x0800edb4
 800a738:	0800f800 	.word	0x0800f800
 800a73c:	0800ea1c 	.word	0x0800ea1c
 800a740:	0800edd0 	.word	0x0800edd0
 800a744:	0800edec 	.word	0x0800edec
 800a748:	0800ee08 	.word	0x0800ee08
 800a74c:	0800ee38 	.word	0x0800ee38
 800a750:	0800ee68 	.word	0x0800ee68
 800a754:	0800ee9c 	.word	0x0800ee9c
 800a758:	0800eeb8 	.word	0x0800eeb8
 800a75c:	0800ef04 	.word	0x0800ef04
 800a760:	0800ef20 	.word	0x0800ef20
 800a764:	0800ef74 	.word	0x0800ef74
 800a768:	0800efd4 	.word	0x0800efd4
 800a76c:	0800eff4 	.word	0x0800eff4
    lfs->name_max = lfs->cfg->name_max;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a774:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->name_max) {
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d102      	bne.n	800a788 <lfs_init+0x2d4>
        lfs->name_max = LFS_NAME_MAX;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	22ff      	movs	r2, #255	@ 0xff
 800a786:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a78c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a78e:	2b00      	cmp	r3, #0
 800a790:	da06      	bge.n	800a7a0 <lfs_init+0x2ec>
 800a792:	4b71      	ldr	r3, [pc, #452]	@ (800a958 <lfs_init+0x4a4>)
 800a794:	4a71      	ldr	r2, [pc, #452]	@ (800a95c <lfs_init+0x4a8>)
 800a796:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 800a79a:	4871      	ldr	r0, [pc, #452]	@ (800a960 <lfs_init+0x4ac>)
 800a79c:	f002 f8b8 	bl	800c910 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->file_max) {
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d103      	bne.n	800a7ba <lfs_init+0x306>
        lfs->file_max = LFS_FILE_MAX;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800a7b8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7c0:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d906      	bls.n	800a7d6 <lfs_init+0x322>
 800a7c8:	4b66      	ldr	r3, [pc, #408]	@ (800a964 <lfs_init+0x4b0>)
 800a7ca:	4a64      	ldr	r2, [pc, #400]	@ (800a95c <lfs_init+0x4a8>)
 800a7cc:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 800a7d0:	4863      	ldr	r0, [pc, #396]	@ (800a960 <lfs_init+0x4ac>)
 800a7d2:	f002 f89d 	bl	800c910 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	679a      	str	r2, [r3, #120]	@ 0x78
    if (!lfs->attr_max) {
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d103      	bne.n	800a7f0 <lfs_init+0x33c>
        lfs->attr_max = LFS_ATTR_MAX;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800a7ee:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7fa:	69db      	ldr	r3, [r3, #28]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d906      	bls.n	800a80e <lfs_init+0x35a>
 800a800:	4b59      	ldr	r3, [pc, #356]	@ (800a968 <lfs_init+0x4b4>)
 800a802:	4a56      	ldr	r2, [pc, #344]	@ (800a95c <lfs_init+0x4a8>)
 800a804:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 800a808:	4855      	ldr	r0, [pc, #340]	@ (800a960 <lfs_init+0x4ac>)
 800a80a:	f002 f881 	bl	800c910 <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a814:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a818:	d00e      	beq.n	800a838 <lfs_init+0x384>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a81e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a826:	429a      	cmp	r2, r3
 800a828:	d906      	bls.n	800a838 <lfs_init+0x384>
 800a82a:	4b50      	ldr	r3, [pc, #320]	@ (800a96c <lfs_init+0x4b8>)
 800a82c:	4a4b      	ldr	r2, [pc, #300]	@ (800a95c <lfs_init+0x4a8>)
 800a82e:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 800a832:	484b      	ldr	r0, [pc, #300]	@ (800a960 <lfs_init+0x4ac>)
 800a834:	f002 f86c 	bl	800c910 <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a83c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a83e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a842:	d00d      	beq.n	800a860 <lfs_init+0x3ac>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a848:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a84e:	429a      	cmp	r2, r3
 800a850:	d906      	bls.n	800a860 <lfs_init+0x3ac>
 800a852:	4b47      	ldr	r3, [pc, #284]	@ (800a970 <lfs_init+0x4bc>)
 800a854:	4a41      	ldr	r2, [pc, #260]	@ (800a95c <lfs_init+0x4a8>)
 800a856:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 800a85a:	4841      	ldr	r0, [pc, #260]	@ (800a960 <lfs_init+0x4ac>)
 800a85c:	f002 f858 	bl	800c910 <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a866:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a86a:	d019      	beq.n	800a8a0 <lfs_init+0x3ec>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a870:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d004      	beq.n	800a886 <lfs_init+0x3d2>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a882:	08db      	lsrs	r3, r3, #3
 800a884:	e003      	b.n	800a88e <lfs_init+0x3da>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a88a:	69db      	ldr	r3, [r3, #28]
 800a88c:	08db      	lsrs	r3, r3, #3
 800a88e:	4293      	cmp	r3, r2
 800a890:	d206      	bcs.n	800a8a0 <lfs_init+0x3ec>
 800a892:	4b38      	ldr	r3, [pc, #224]	@ (800a974 <lfs_init+0x4c0>)
 800a894:	4a31      	ldr	r2, [pc, #196]	@ (800a95c <lfs_init+0x4a8>)
 800a896:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 800a89a:	4831      	ldr	r0, [pc, #196]	@ (800a960 <lfs_init+0x4ac>)
 800a89c:	f002 f838 	bl	800c910 <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8b2:	d103      	bne.n	800a8bc <lfs_init+0x408>
        lfs->inline_max = 0;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	67da      	str	r2, [r3, #124]	@ 0x7c
 800a8ba:	e022      	b.n	800a902 <lfs_init+0x44e>
    } else if (lfs->inline_max == 0) {
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d11e      	bne.n	800a902 <lfs_init+0x44e>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8c8:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
        lfs->inline_max = lfs_min(
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d004      	beq.n	800a8e2 <lfs_init+0x42e>
                        ? lfs->cfg->metadata_max
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 800a8de:	08db      	lsrs	r3, r3, #3
 800a8e0:	e003      	b.n	800a8ea <lfs_init+0x436>
                        : lfs->cfg->block_size)/8));
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8e6:	69db      	ldr	r3, [r3, #28]
        lfs->inline_max = lfs_min(
 800a8e8:	08db      	lsrs	r3, r3, #3
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	f7fa fb22 	bl	8004f36 <lfs_min>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f7fa fb1d 	bl	8004f36 <lfs_min>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a908:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a910:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	333c      	adds	r3, #60	@ 0x3c
 800a922:	2200      	movs	r2, #0
 800a924:	601a      	str	r2, [r3, #0]
 800a926:	605a      	str	r2, [r3, #4]
 800a928:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	3330      	adds	r3, #48	@ 0x30
 800a92e:	2200      	movs	r2, #0
 800a930:	601a      	str	r2, [r3, #0]
 800a932:	605a      	str	r2, [r3, #4]
 800a934:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	3348      	adds	r3, #72	@ 0x48
 800a93a:	2200      	movs	r2, #0
 800a93c:	601a      	str	r2, [r3, #0]
 800a93e:	605a      	str	r2, [r3, #4]
 800a940:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 800a942:	2300      	movs	r3, #0
 800a944:	e003      	b.n	800a94e <lfs_init+0x49a>

cleanup:
    lfs_deinit(lfs);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f816 	bl	800a978 <lfs_deinit>
    return err;
 800a94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3734      	adds	r7, #52	@ 0x34
 800a952:	46bd      	mov	sp, r7
 800a954:	bd90      	pop	{r4, r7, pc}
 800a956:	bf00      	nop
 800a958:	0800f010 	.word	0x0800f010
 800a95c:	0800f800 	.word	0x0800f800
 800a960:	0800ea1c 	.word	0x0800ea1c
 800a964:	0800f034 	.word	0x0800f034
 800a968:	0800f050 	.word	0x0800f050
 800a96c:	0800f080 	.word	0x0800f080
 800a970:	0800f0d8 	.word	0x0800f0d8
 800a974:	0800f128 	.word	0x0800f128

0800a978 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a986:	2b00      	cmp	r3, #0
 800a988:	d104      	bne.n	800a994 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fa fb7c 	bl	800508c <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d104      	bne.n	800a9a8 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	69db      	ldr	r3, [r3, #28]
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7fa fb72 	bl	800508c <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d104      	bne.n	800a9bc <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fa fb68 	bl	800508c <lfs_free>
    }

    return 0;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3708      	adds	r7, #8
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
	...

0800a9c8 <lfs_mount_>:
    return err;

}
#endif

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 800a9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9ca:	b0a1      	sub	sp, #132	@ 0x84
 800a9cc:	af04      	add	r7, sp, #16
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 800a9d2:	6839      	ldr	r1, [r7, #0]
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f7ff fd6d 	bl	800a4b4 <lfs_init>
 800a9da:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (err) {
 800a9dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d001      	beq.n	800a9e6 <lfs_mount_+0x1e>
        return err;
 800a9e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9e4:	e202      	b.n	800adec <lfs_mount_+0x424>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 800a9e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a9ea:	2220      	movs	r2, #32
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f002 fa06 	bl	800ce00 <memset>
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	657b      	str	r3, [r7, #84]	@ 0x54
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800a9f8:	4a9a      	ldr	r2, [pc, #616]	@ (800ac64 <lfs_mount_+0x29c>)
 800a9fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a9fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aa02:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800aa06:	2301      	movs	r3, #1
 800aa08:	66bb      	str	r3, [r7, #104]	@ 0x68
    lfs_size_t tortoise_period = 1;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	667b      	str	r3, [r7, #100]	@ 0x64
    while (!lfs_pair_isnull(dir.tail)) {
 800aa0e:	e199      	b.n	800ad44 <lfs_mount_+0x37c>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 800aa10:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800aa14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800aa18:	3318      	adds	r3, #24
 800aa1a:	4611      	mov	r1, r2
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7fa ff31 	bl	8005884 <lfs_pair_issync>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00a      	beq.n	800aa3e <lfs_mount_+0x76>
            LFS_WARN("Cycle detected in tail list");
 800aa28:	4b8f      	ldr	r3, [pc, #572]	@ (800ac68 <lfs_mount_+0x2a0>)
 800aa2a:	f241 123d 	movw	r2, #4413	@ 0x113d
 800aa2e:	498f      	ldr	r1, [pc, #572]	@ (800ac6c <lfs_mount_+0x2a4>)
 800aa30:	488f      	ldr	r0, [pc, #572]	@ (800ac70 <lfs_mount_+0x2a8>)
 800aa32:	f002 f9c3 	bl	800cdbc <iprintf>
            err = LFS_ERR_CORRUPT;
 800aa36:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800aa3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 800aa3c:	e1d2      	b.n	800ade4 <lfs_mount_+0x41c>
        }
        if (tortoise_i == tortoise_period) {
 800aa3e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aa40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d108      	bne.n	800aa58 <lfs_mount_+0x90>
            tortoise[0] = dir.tail[0];
 800aa46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa48:	633b      	str	r3, [r7, #48]	@ 0x30
            tortoise[1] = dir.tail[1];
 800aa4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa4c:	637b      	str	r3, [r7, #52]	@ 0x34
            tortoise_i = 0;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	66bb      	str	r3, [r7, #104]	@ 0x68
            tortoise_period *= 2;
 800aa52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa54:	005b      	lsls	r3, r3, #1
 800aa56:	667b      	str	r3, [r7, #100]	@ 0x64
        }
        tortoise_i += 1;
 800aa58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	66bb      	str	r3, [r7, #104]	@ 0x68
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa62:	4b84      	ldr	r3, [pc, #528]	@ (800ac74 <lfs_mount_+0x2ac>)
 800aa64:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa66:	2308      	movs	r3, #8
 800aa68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800aa6a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800aa6e:	f103 0218 	add.w	r2, r3, #24
 800aa72:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800aa76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa7a:	9303      	str	r3, [sp, #12]
 800aa7c:	4b7e      	ldr	r3, [pc, #504]	@ (800ac78 <lfs_mount_+0x2b0>)
 800aa7e:	9302      	str	r3, [sp, #8]
 800aa80:	2300      	movs	r3, #0
 800aa82:	9301      	str	r3, [sp, #4]
 800aa84:	4b7d      	ldr	r3, [pc, #500]	@ (800ac7c <lfs_mount_+0x2b4>)
 800aa86:	9300      	str	r3, [sp, #0]
 800aa88:	4b7d      	ldr	r3, [pc, #500]	@ (800ac80 <lfs_mount_+0x2b8>)
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f7fc f978 	bl	8006d80 <lfs_dir_fetchmatch>
 800aa90:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    lfs, "littlefs", 8});
        if (tag < 0) {
 800aa92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	da02      	bge.n	800aa9e <lfs_mount_+0xd6>
            err = tag;
 800aa98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 800aa9c:	e1a2      	b.n	800ade4 <lfs_mount_+0x41c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 800aa9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f000 8142 	beq.w	800ad2a <lfs_mount_+0x362>
 800aaa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7fa ff5a 	bl	8005962 <lfs_tag_isdelete>
 800aaae:	4603      	mov	r3, r0
 800aab0:	f083 0301 	eor.w	r3, r3, #1
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f000 8137 	beq.w	800ad2a <lfs_mount_+0x362>
            // update root
            lfs->root[0] = dir.pair[0];
 800aabc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 800aac2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 800aac8:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800aacc:	f107 030c 	add.w	r3, r7, #12
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	4b6c      	ldr	r3, [pc, #432]	@ (800ac84 <lfs_mount_+0x2bc>)
 800aad4:	4a6a      	ldr	r2, [pc, #424]	@ (800ac80 <lfs_mount_+0x2b8>)
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f7fb fc1c 	bl	8006314 <lfs_dir_get>
 800aadc:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 800aade:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	da02      	bge.n	800aaea <lfs_mount_+0x122>
                err = tag;
 800aae4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aae6:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 800aae8:	e11e      	b.n	800ad28 <lfs_mount_+0x360>
            }
            lfs_superblock_fromle32(&superblock);
 800aaea:	f107 030c 	add.w	r3, r7, #12
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fb f910 	bl	8005d14 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	0c1b      	lsrs	r3, r3, #16
 800aaf8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
            if (major_version != lfs_fs_disk_version_major(lfs)
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7fb f9d6 	bl	8005eb4 <lfs_fs_disk_version_major>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d108      	bne.n	800ab26 <lfs_mount_+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f7fb f9db 	bl	8005ed0 <lfs_fs_disk_version_minor>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d91d      	bls.n	800ab62 <lfs_mount_+0x19a>
                LFS_ERROR("Invalid version "
 800ab26:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 800ab2a:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f7fb f9c0 	bl	8005eb4 <lfs_fs_disk_version_major>
 800ab34:	4603      	mov	r3, r0
 800ab36:	461e      	mov	r6, r3
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f7fb f9c9 	bl	8005ed0 <lfs_fs_disk_version_minor>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	461a      	mov	r2, r3
 800ab42:	4b49      	ldr	r3, [pc, #292]	@ (800ac68 <lfs_mount_+0x2a0>)
 800ab44:	9303      	str	r3, [sp, #12]
 800ab46:	9202      	str	r2, [sp, #8]
 800ab48:	9601      	str	r6, [sp, #4]
 800ab4a:	9400      	str	r4, [sp, #0]
 800ab4c:	462b      	mov	r3, r5
 800ab4e:	f241 126b 	movw	r2, #4459	@ 0x116b
 800ab52:	4946      	ldr	r1, [pc, #280]	@ (800ac6c <lfs_mount_+0x2a4>)
 800ab54:	484c      	ldr	r0, [pc, #304]	@ (800ac88 <lfs_mount_+0x2c0>)
 800ab56:	f002 f931 	bl	800cdbc <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 800ab5a:	f06f 0315 	mvn.w	r3, #21
 800ab5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 800ab60:	e0e2      	b.n	800ad28 <lfs_mount_+0x360>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 800ab62:	2300      	movs	r3, #0
 800ab64:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f7fb f9b1 	bl	8005ed0 <lfs_fs_disk_version_minor>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	461a      	mov	r2, r3
 800ab72:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d21c      	bcs.n	800abb4 <lfs_mount_+0x1ec>
                LFS_DEBUG("Found older minor version "
 800ab7a:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 800ab7e:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f7fb f996 	bl	8005eb4 <lfs_fs_disk_version_major>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	461e      	mov	r6, r3
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f7fb f99f 	bl	8005ed0 <lfs_fs_disk_version_minor>
 800ab92:	4603      	mov	r3, r0
 800ab94:	461a      	mov	r2, r3
 800ab96:	4b34      	ldr	r3, [pc, #208]	@ (800ac68 <lfs_mount_+0x2a0>)
 800ab98:	9303      	str	r3, [sp, #12]
 800ab9a:	9202      	str	r2, [sp, #8]
 800ab9c:	9601      	str	r6, [sp, #4]
 800ab9e:	9400      	str	r4, [sp, #0]
 800aba0:	462b      	mov	r3, r5
 800aba2:	f241 127a 	movw	r2, #4474	@ 0x117a
 800aba6:	4931      	ldr	r1, [pc, #196]	@ (800ac6c <lfs_mount_+0x2a4>)
 800aba8:	4838      	ldr	r0, [pc, #224]	@ (800ac8c <lfs_mount_+0x2c4>)
 800abaa:	f002 f907 	bl	800cdbc <iprintf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 800abae:	2301      	movs	r3, #1
 800abb0:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 800abb4:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800abb8:	4619      	mov	r1, r3
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 fbb4 	bl	800b328 <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d018      	beq.n	800abf8 <lfs_mount_+0x230>
                if (superblock.name_max > lfs->name_max) {
 800abc6:	69ba      	ldr	r2, [r7, #24]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abcc:	429a      	cmp	r2, r3
 800abce:	d910      	bls.n	800abf2 <lfs_mount_+0x22a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 800abd0:	69ba      	ldr	r2, [r7, #24]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abd6:	4924      	ldr	r1, [pc, #144]	@ (800ac68 <lfs_mount_+0x2a0>)
 800abd8:	9101      	str	r1, [sp, #4]
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	4613      	mov	r3, r2
 800abde:	f241 1289 	movw	r2, #4489	@ 0x1189
 800abe2:	4922      	ldr	r1, [pc, #136]	@ (800ac6c <lfs_mount_+0x2a4>)
 800abe4:	482a      	ldr	r0, [pc, #168]	@ (800ac90 <lfs_mount_+0x2c8>)
 800abe6:	f002 f8e9 	bl	800cdbc <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 800abea:	f06f 0315 	mvn.w	r3, #21
 800abee:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 800abf0:	e09a      	b.n	800ad28 <lfs_mount_+0x360>
                }

                lfs->name_max = superblock.name_max;
 800abf2:	69ba      	ldr	r2, [r7, #24]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.file_max) {
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d018      	beq.n	800ac30 <lfs_mount_+0x268>
                if (superblock.file_max > lfs->file_max) {
 800abfe:	69fa      	ldr	r2, [r7, #28]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d910      	bls.n	800ac2a <lfs_mount_+0x262>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 800ac08:	69fa      	ldr	r2, [r7, #28]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac0e:	4916      	ldr	r1, [pc, #88]	@ (800ac68 <lfs_mount_+0x2a0>)
 800ac10:	9101      	str	r1, [sp, #4]
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	4613      	mov	r3, r2
 800ac16:	f241 1294 	movw	r2, #4500	@ 0x1194
 800ac1a:	4914      	ldr	r1, [pc, #80]	@ (800ac6c <lfs_mount_+0x2a4>)
 800ac1c:	481d      	ldr	r0, [pc, #116]	@ (800ac94 <lfs_mount_+0x2cc>)
 800ac1e:	f002 f8cd 	bl	800cdbc <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 800ac22:	f06f 0315 	mvn.w	r3, #21
 800ac26:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 800ac28:	e07e      	b.n	800ad28 <lfs_mount_+0x360>
                }

                lfs->file_max = superblock.file_max;
 800ac2a:	69fa      	ldr	r2, [r7, #28]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.attr_max) {
 800ac30:	6a3b      	ldr	r3, [r7, #32]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d040      	beq.n	800acb8 <lfs_mount_+0x2f0>
                if (superblock.attr_max > lfs->attr_max) {
 800ac36:	6a3a      	ldr	r2, [r7, #32]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d92d      	bls.n	800ac9c <lfs_mount_+0x2d4>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 800ac40:	6a3a      	ldr	r2, [r7, #32]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac46:	4908      	ldr	r1, [pc, #32]	@ (800ac68 <lfs_mount_+0x2a0>)
 800ac48:	9101      	str	r1, [sp, #4]
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	f241 129f 	movw	r2, #4511	@ 0x119f
 800ac52:	4906      	ldr	r1, [pc, #24]	@ (800ac6c <lfs_mount_+0x2a4>)
 800ac54:	4810      	ldr	r0, [pc, #64]	@ (800ac98 <lfs_mount_+0x2d0>)
 800ac56:	f002 f8b1 	bl	800cdbc <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 800ac5a:	f06f 0315 	mvn.w	r3, #21
 800ac5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 800ac60:	e062      	b.n	800ad28 <lfs_mount_+0x360>
 800ac62:	bf00      	nop
 800ac64:	0800eb70 	.word	0x0800eb70
 800ac68:	0800eb2c 	.word	0x0800eb2c
 800ac6c:	0800ea1c 	.word	0x0800ea1c
 800ac70:	0800f1dc 	.word	0x0800f1dc
 800ac74:	0800f1d0 	.word	0x0800f1d0
 800ac78:	080075bd 	.word	0x080075bd
 800ac7c:	0ff00008 	.word	0x0ff00008
 800ac80:	7ffffc00 	.word	0x7ffffc00
 800ac84:	20100018 	.word	0x20100018
 800ac88:	0800f208 	.word	0x0800f208
 800ac8c:	0800f240 	.word	0x0800f240
 800ac90:	0800f280 	.word	0x0800f280
 800ac94:	0800f2b4 	.word	0x0800f2b4
 800ac98:	0800f2e8 	.word	0x0800f2e8
                }

                lfs->attr_max = superblock.attr_max;
 800ac9c:	6a3a      	ldr	r2, [r7, #32]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	679a      	str	r2, [r3, #120]	@ 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800acaa:	4619      	mov	r1, r3
 800acac:	4610      	mov	r0, r2
 800acae:	f7fa f942 	bl	8004f36 <lfs_min>
 800acb2:	4602      	mov	r2, r0
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800acbc:	6a1b      	ldr	r3, [r3, #32]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d017      	beq.n	800acf2 <lfs_mount_+0x32a>
                    && superblock.block_count != lfs->cfg->block_count) {
 800acc2:	697a      	ldr	r2, [r7, #20]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800acc8:	6a1b      	ldr	r3, [r3, #32]
 800acca:	429a      	cmp	r2, r3
 800accc:	d011      	beq.n	800acf2 <lfs_mount_+0x32a>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800acd4:	6a1b      	ldr	r3, [r3, #32]
 800acd6:	4947      	ldr	r1, [pc, #284]	@ (800adf4 <lfs_mount_+0x42c>)
 800acd8:	9101      	str	r1, [sp, #4]
 800acda:	9300      	str	r3, [sp, #0]
 800acdc:	4613      	mov	r3, r2
 800acde:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 800ace2:	4945      	ldr	r1, [pc, #276]	@ (800adf8 <lfs_mount_+0x430>)
 800ace4:	4845      	ldr	r0, [pc, #276]	@ (800adfc <lfs_mount_+0x434>)
 800ace6:	f002 f869 	bl	800cdbc <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 800acea:	f06f 0315 	mvn.w	r3, #21
 800acee:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 800acf0:	e01a      	b.n	800ad28 <lfs_mount_+0x360>
            }

            lfs->block_count = superblock.block_count;
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	66da      	str	r2, [r3, #108]	@ 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800acfe:	69db      	ldr	r3, [r3, #28]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d012      	beq.n	800ad2a <lfs_mount_+0x362>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 800ad04:	693a      	ldr	r2, [r7, #16]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad0a:	69db      	ldr	r3, [r3, #28]
 800ad0c:	4939      	ldr	r1, [pc, #228]	@ (800adf4 <lfs_mount_+0x42c>)
 800ad0e:	9101      	str	r1, [sp, #4]
 800ad10:	9300      	str	r3, [sp, #0]
 800ad12:	4613      	mov	r3, r2
 800ad14:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 800ad18:	4937      	ldr	r1, [pc, #220]	@ (800adf8 <lfs_mount_+0x430>)
 800ad1a:	4839      	ldr	r0, [pc, #228]	@ (800ae00 <lfs_mount_+0x438>)
 800ad1c:	f002 f84e 	bl	800cdbc <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 800ad20:	f06f 0315 	mvn.w	r3, #21
 800ad24:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 800ad26:	bf00      	nop
            goto cleanup;
 800ad28:	e05c      	b.n	800ade4 <lfs_mount_+0x41c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad30:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ad34:	4619      	mov	r1, r3
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7fc fc0e 	bl	8007558 <lfs_dir_getgstate>
 800ad3c:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err) {
 800ad3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d14e      	bne.n	800ade2 <lfs_mount_+0x41a>
    while (!lfs_pair_isnull(dir.tail)) {
 800ad44:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ad48:	3318      	adds	r3, #24
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7fa fd55 	bl	80057fa <lfs_pair_isnull>
 800ad50:	4603      	mov	r3, r0
 800ad52:	f083 0301 	eor.w	r3, r3, #1
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f47f ae59 	bne.w	800aa10 <lfs_mount_+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	3330      	adds	r3, #48	@ 0x30
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fa feb0 	bl	8005ac8 <lfs_gstate_iszero>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	f083 0301 	eor.w	r3, r3, #1
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d010      	beq.n	800ad96 <lfs_mount_+0x3ce>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ad80:	481c      	ldr	r0, [pc, #112]	@ (800adf4 <lfs_mount_+0x42c>)
 800ad82:	9002      	str	r0, [sp, #8]
 800ad84:	9201      	str	r2, [sp, #4]
 800ad86:	9300      	str	r3, [sp, #0]
 800ad88:	460b      	mov	r3, r1
 800ad8a:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 800ad8e:	491a      	ldr	r1, [pc, #104]	@ (800adf8 <lfs_mount_+0x430>)
 800ad90:	481c      	ldr	r0, [pc, #112]	@ (800ae04 <lfs_mount_+0x43c>)
 800ad92:	f002 f813 	bl	800cdbc <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7fa fdd3 	bl	8005946 <lfs_tag_isvalid>
 800ada0:	4603      	mov	r3, r0
 800ada2:	f083 0301 	eor.w	r3, r3, #1
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	461a      	mov	r2, r3
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adae:	441a      	add	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	333c      	adds	r3, #60	@ 0x3c
 800adba:	3230      	adds	r2, #48	@ 0x30
 800adbc:	ca07      	ldmia	r2, {r0, r1, r2}
 800adbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800adca:	fbb3 f1f2 	udiv	r1, r3, r2
 800adce:	fb01 f202 	mul.w	r2, r1, r2
 800add2:	1a9a      	subs	r2, r3, r2
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f7fb f894 	bl	8005f06 <lfs_alloc_drop>

    return 0;
 800adde:	2300      	movs	r3, #0
 800ade0:	e004      	b.n	800adec <lfs_mount_+0x424>
            goto cleanup;
 800ade2:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 f80f 	bl	800ae08 <lfs_unmount_>
    return err;
 800adea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 800adec:	4618      	mov	r0, r3
 800adee:	3774      	adds	r7, #116	@ 0x74
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adf4:	0800eb2c 	.word	0x0800eb2c
 800adf8:	0800ea1c 	.word	0x0800ea1c
 800adfc:	0800f31c 	.word	0x0800f31c
 800ae00:	0800f350 	.word	0x0800f350
 800ae04:	0800f380 	.word	0x0800f380

0800ae08 <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f7ff fdb1 	bl	800a978 <lfs_deinit>
 800ae16:	4603      	mov	r3, r0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3708      	adds	r7, #8
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 800ae20:	b590      	push	{r4, r7, lr}
 800ae22:	b0a1      	sub	sp, #132	@ 0x84
 800ae24:	af04      	add	r7, sp, #16
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	607a      	str	r2, [r7, #4]
 800ae2c:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 800ae2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae32:	2220      	movs	r2, #32
 800ae34:	2100      	movs	r1, #0
 800ae36:	4618      	mov	r0, r3
 800ae38:	f001 ffe2 	bl	800ce00 <memset>
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	643b      	str	r3, [r7, #64]	@ 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800ae40:	4a9a      	ldr	r2, [pc, #616]	@ (800b0ac <lfs_fs_traverse_+0x28c>)
 800ae42:	f107 031c 	add.w	r3, r7, #28
 800ae46:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ae4a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	66fb      	str	r3, [r7, #108]	@ 0x6c
    lfs_size_t tortoise_period = 1;
 800ae52:	2301      	movs	r3, #1
 800ae54:	66bb      	str	r3, [r7, #104]	@ 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 800ae56:	e0c0      	b.n	800afda <lfs_fs_traverse_+0x1ba>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 800ae58:	f107 021c 	add.w	r2, r7, #28
 800ae5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae60:	3318      	adds	r3, #24
 800ae62:	4611      	mov	r1, r2
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7fa fd0d 	bl	8005884 <lfs_pair_issync>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d009      	beq.n	800ae84 <lfs_fs_traverse_+0x64>
            LFS_WARN("Cycle detected in tail list");
 800ae70:	4b8f      	ldr	r3, [pc, #572]	@ (800b0b0 <lfs_fs_traverse_+0x290>)
 800ae72:	f241 2222 	movw	r2, #4642	@ 0x1222
 800ae76:	498f      	ldr	r1, [pc, #572]	@ (800b0b4 <lfs_fs_traverse_+0x294>)
 800ae78:	488f      	ldr	r0, [pc, #572]	@ (800b0b8 <lfs_fs_traverse_+0x298>)
 800ae7a:	f001 ff9f 	bl	800cdbc <iprintf>
            return LFS_ERR_CORRUPT;
 800ae7e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800ae82:	e10f      	b.n	800b0a4 <lfs_fs_traverse_+0x284>
        }
        if (tortoise_i == tortoise_period) {
 800ae84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ae86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d108      	bne.n	800ae9e <lfs_fs_traverse_+0x7e>
            tortoise[0] = dir.tail[0];
 800ae8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae8e:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 800ae90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae92:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 800ae94:	2300      	movs	r3, #0
 800ae96:	66fb      	str	r3, [r7, #108]	@ 0x6c
            tortoise_period *= 2;
 800ae98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ae9a:	005b      	lsls	r3, r3, #1
 800ae9c:	66bb      	str	r3, [r7, #104]	@ 0x68
        }
        tortoise_i += 1;
 800ae9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aea0:	3301      	adds	r3, #1
 800aea2:	66fb      	str	r3, [r7, #108]	@ 0x6c

        for (int i = 0; i < 2; i++) {
 800aea4:	2300      	movs	r3, #0
 800aea6:	667b      	str	r3, [r7, #100]	@ 0x64
 800aea8:	e013      	b.n	800aed2 <lfs_fs_traverse_+0xb2>
            int err = cb(data, dir.tail[i]);
 800aeaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aeac:	3306      	adds	r3, #6
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	3370      	adds	r3, #112	@ 0x70
 800aeb2:	443b      	add	r3, r7
 800aeb4:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	4611      	mov	r1, r2
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	4798      	blx	r3
 800aec0:	6478      	str	r0, [r7, #68]	@ 0x44
            if (err) {
 800aec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d001      	beq.n	800aecc <lfs_fs_traverse_+0xac>
                return err;
 800aec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aeca:	e0eb      	b.n	800b0a4 <lfs_fs_traverse_+0x284>
        for (int i = 0; i < 2; i++) {
 800aecc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aece:	3301      	adds	r3, #1
 800aed0:	667b      	str	r3, [r7, #100]	@ 0x64
 800aed2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	dde8      	ble.n	800aeaa <lfs_fs_traverse_+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800aed8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aedc:	f103 0218 	add.w	r2, r3, #24
 800aee0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aee4:	4619      	mov	r1, r3
 800aee6:	68f8      	ldr	r0, [r7, #12]
 800aee8:	f7fc fb1a 	bl	8007520 <lfs_dir_fetch>
 800aeec:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (err) {
 800aeee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d001      	beq.n	800aef8 <lfs_fs_traverse_+0xd8>
            return err;
 800aef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aef6:	e0d5      	b.n	800b0a4 <lfs_fs_traverse_+0x284>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800aef8:	2300      	movs	r3, #0
 800aefa:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800aefe:	e067      	b.n	800afd0 <lfs_fs_traverse_+0x1b0>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800af00:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800af04:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800af06:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800af0a:	f043 0308 	orr.w	r3, r3, #8
 800af0e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800af12:	f107 0214 	add.w	r2, r7, #20
 800af16:	9200      	str	r2, [sp, #0]
 800af18:	4a68      	ldr	r2, [pc, #416]	@ (800b0bc <lfs_fs_traverse_+0x29c>)
 800af1a:	68f8      	ldr	r0, [r7, #12]
 800af1c:	f7fb f9fa 	bl	8006314 <lfs_dir_get>
 800af20:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (tag < 0) {
 800af22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af24:	2b00      	cmp	r3, #0
 800af26:	da05      	bge.n	800af34 <lfs_fs_traverse_+0x114>
                if (tag == LFS_ERR_NOENT) {
 800af28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af2a:	f113 0f02 	cmn.w	r3, #2
 800af2e:	d049      	beq.n	800afc4 <lfs_fs_traverse_+0x1a4>
                    continue;
                }
                return tag;
 800af30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af32:	e0b7      	b.n	800b0a4 <lfs_fs_traverse_+0x284>
            }
            lfs_ctz_fromle32(&ctz);
 800af34:	f107 0314 	add.w	r3, r7, #20
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fa febb 	bl	8005cb4 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800af3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af40:	4618      	mov	r0, r3
 800af42:	f7fa fd41 	bl	80059c8 <lfs_tag_type3>
 800af46:	4603      	mov	r3, r0
 800af48:	461a      	mov	r2, r3
 800af4a:	f240 2302 	movw	r3, #514	@ 0x202
 800af4e:	429a      	cmp	r2, r3
 800af50:	d113      	bne.n	800af7a <lfs_fs_traverse_+0x15a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 800af52:	68f9      	ldr	r1, [r7, #12]
 800af54:	6978      	ldr	r0, [r7, #20]
 800af56:	69bb      	ldr	r3, [r7, #24]
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	9202      	str	r2, [sp, #8]
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	9201      	str	r2, [sp, #4]
 800af60:	9300      	str	r3, [sp, #0]
 800af62:	4603      	mov	r3, r0
 800af64:	460a      	mov	r2, r1
 800af66:	2100      	movs	r1, #0
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f7fe fa4d 	bl	8009408 <lfs_ctz_traverse>
 800af6e:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 800af70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af72:	2b00      	cmp	r3, #0
 800af74:	d027      	beq.n	800afc6 <lfs_fs_traverse_+0x1a6>
                    return err;
 800af76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af78:	e094      	b.n	800b0a4 <lfs_fs_traverse_+0x284>
                }
            } else if (includeorphans &&
 800af7a:	78fb      	ldrb	r3, [r7, #3]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d022      	beq.n	800afc6 <lfs_fs_traverse_+0x1a6>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 800af80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af82:	4618      	mov	r0, r3
 800af84:	f7fa fd20 	bl	80059c8 <lfs_tag_type3>
 800af88:	4603      	mov	r3, r0
            } else if (includeorphans &&
 800af8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af8e:	d11a      	bne.n	800afc6 <lfs_fs_traverse_+0x1a6>
                for (int i = 0; i < 2; i++) {
 800af90:	2300      	movs	r3, #0
 800af92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af94:	e012      	b.n	800afbc <lfs_fs_traverse_+0x19c>
                    err = cb(data, (&ctz.head)[i]);
 800af96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	f107 0214 	add.w	r2, r7, #20
 800af9e:	4413      	add	r3, r2
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	4611      	mov	r1, r2
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	4798      	blx	r3
 800afaa:	64f8      	str	r0, [r7, #76]	@ 0x4c
                    if (err) {
 800afac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d001      	beq.n	800afb6 <lfs_fs_traverse_+0x196>
                        return err;
 800afb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afb4:	e076      	b.n	800b0a4 <lfs_fs_traverse_+0x284>
                for (int i = 0; i < 2; i++) {
 800afb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afb8:	3301      	adds	r3, #1
 800afba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800afbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	dde9      	ble.n	800af96 <lfs_fs_traverse_+0x176>
 800afc2:	e000      	b.n	800afc6 <lfs_fs_traverse_+0x1a6>
                    continue;
 800afc4:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 800afc6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800afca:	3301      	adds	r3, #1
 800afcc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800afd0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800afd2:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d392      	bcc.n	800af00 <lfs_fs_traverse_+0xe0>
    while (!lfs_pair_isnull(dir.tail)) {
 800afda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800afde:	3318      	adds	r3, #24
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fa fc0a 	bl	80057fa <lfs_pair_isnull>
 800afe6:	4603      	mov	r3, r0
 800afe8:	f083 0301 	eor.w	r3, r3, #1
 800afec:	b2db      	uxtb	r3, r3
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f47f af32 	bne.w	800ae58 <lfs_fs_traverse_+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aff8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800affa:	e04f      	b.n	800b09c <lfs_fs_traverse_+0x27c>
        if (f->type != LFS_TYPE_REG) {
 800affc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800affe:	799b      	ldrb	r3, [r3, #6]
 800b000:	2b01      	cmp	r3, #1
 800b002:	d147      	bne.n	800b094 <lfs_fs_traverse_+0x274>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 800b004:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d01d      	beq.n	800b04c <lfs_fs_traverse_+0x22c>
 800b010:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b014:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d117      	bne.n	800b04c <lfs_fs_traverse_+0x22c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800b01c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b01e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b026:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800b028:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b02a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	9202      	str	r2, [sp, #8]
 800b030:	68ba      	ldr	r2, [r7, #8]
 800b032:	9201      	str	r2, [sp, #4]
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	4623      	mov	r3, r4
 800b038:	4602      	mov	r2, r0
 800b03a:	68f8      	ldr	r0, [r7, #12]
 800b03c:	f7fe f9e4 	bl	8009408 <lfs_ctz_traverse>
 800b040:	6578      	str	r0, [r7, #84]	@ 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 800b042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b044:	2b00      	cmp	r3, #0
 800b046:	d001      	beq.n	800b04c <lfs_fs_traverse_+0x22c>
                return err;
 800b048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b04a:	e02b      	b.n	800b0a4 <lfs_fs_traverse_+0x284>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 800b04c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b04e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b054:	2b00      	cmp	r3, #0
 800b056:	d01e      	beq.n	800b096 <lfs_fs_traverse_+0x276>
 800b058:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b05a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b05c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b060:	2b00      	cmp	r3, #0
 800b062:	d118      	bne.n	800b096 <lfs_fs_traverse_+0x276>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800b064:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b066:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b06e:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800b070:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	9202      	str	r2, [sp, #8]
 800b078:	68ba      	ldr	r2, [r7, #8]
 800b07a:	9201      	str	r2, [sp, #4]
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	4623      	mov	r3, r4
 800b080:	4602      	mov	r2, r0
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f7fe f9c0 	bl	8009408 <lfs_ctz_traverse>
 800b088:	6538      	str	r0, [r7, #80]	@ 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 800b08a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d002      	beq.n	800b096 <lfs_fs_traverse_+0x276>
                return err;
 800b090:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b092:	e007      	b.n	800b0a4 <lfs_fs_traverse_+0x284>
            continue;
 800b094:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800b096:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b09c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1ac      	bne.n	800affc <lfs_fs_traverse_+0x1dc>
            }
        }
    }
#endif

    return 0;
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3774      	adds	r7, #116	@ 0x74
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd90      	pop	{r4, r7, pc}
 800b0ac:	0800eb70 	.word	0x0800eb70
 800b0b0:	0800eb2c 	.word	0x0800eb2c
 800b0b4:	0800ea1c 	.word	0x0800ea1c
 800b0b8:	0800f1dc 	.word	0x0800f1dc
 800b0bc:	700ffc00 	.word	0x700ffc00

0800b0c0 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b08a      	sub	sp, #40	@ 0x28
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800b0d8:	4a2d      	ldr	r2, [pc, #180]	@ (800b190 <lfs_fs_pred+0xd0>)
 800b0da:	f107 0314 	add.w	r3, r7, #20
 800b0de:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b0e2:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t tortoise_period = 1;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 800b0ee:	e03e      	b.n	800b16e <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	3318      	adds	r3, #24
 800b0f4:	f107 0214 	add.w	r2, r7, #20
 800b0f8:	4611      	mov	r1, r2
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7fa fbc2 	bl	8005884 <lfs_pair_issync>
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	d009      	beq.n	800b11a <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 800b106:	4b23      	ldr	r3, [pc, #140]	@ (800b194 <lfs_fs_pred+0xd4>)
 800b108:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 800b10c:	4922      	ldr	r1, [pc, #136]	@ (800b198 <lfs_fs_pred+0xd8>)
 800b10e:	4823      	ldr	r0, [pc, #140]	@ (800b19c <lfs_fs_pred+0xdc>)
 800b110:	f001 fe54 	bl	800cdbc <iprintf>
            return LFS_ERR_CORRUPT;
 800b114:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800b118:	e036      	b.n	800b188 <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 800b11a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b11c:	6a3b      	ldr	r3, [r7, #32]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d10a      	bne.n	800b138 <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	699b      	ldr	r3, [r3, #24]
 800b126:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	69db      	ldr	r3, [r3, #28]
 800b12c:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 800b12e:	2300      	movs	r3, #0
 800b130:	627b      	str	r3, [r7, #36]	@ 0x24
            tortoise_period *= 2;
 800b132:	6a3b      	ldr	r3, [r7, #32]
 800b134:	005b      	lsls	r3, r3, #1
 800b136:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 800b138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b13a:	3301      	adds	r3, #1
 800b13c:	627b      	str	r3, [r7, #36]	@ 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	3318      	adds	r3, #24
 800b142:	68b9      	ldr	r1, [r7, #8]
 800b144:	4618      	mov	r0, r3
 800b146:	f7fa fb73 	bl	8005830 <lfs_pair_cmp>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d101      	bne.n	800b154 <lfs_fs_pred+0x94>
            return 0;
 800b150:	2300      	movs	r3, #0
 800b152:	e019      	b.n	800b188 <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	3318      	adds	r3, #24
 800b158:	461a      	mov	r2, r3
 800b15a:	6879      	ldr	r1, [r7, #4]
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f7fc f9df 	bl	8007520 <lfs_dir_fetch>
 800b162:	61f8      	str	r0, [r7, #28]
        if (err) {
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d001      	beq.n	800b16e <lfs_fs_pred+0xae>
            return err;
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	e00c      	b.n	800b188 <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	3318      	adds	r3, #24
 800b172:	4618      	mov	r0, r3
 800b174:	f7fa fb41 	bl	80057fa <lfs_pair_isnull>
 800b178:	4603      	mov	r3, r0
 800b17a:	f083 0301 	eor.w	r3, r3, #1
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	2b00      	cmp	r3, #0
 800b182:	d1b5      	bne.n	800b0f0 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 800b184:	f06f 0301 	mvn.w	r3, #1
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3728      	adds	r7, #40	@ 0x28
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	0800eb70 	.word	0x0800eb70
 800b194:	0800eb2c 	.word	0x0800eb2c
 800b198:	0800ea1c 	.word	0x0800ea1c
 800b19c:	0800f1dc 	.word	0x0800f1dc

0800b1a0 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800b1a0:	b5b0      	push	{r4, r5, r7, lr}
 800b1a2:	b08e      	sub	sp, #56	@ 0x38
 800b1a4:	af04      	add	r7, sp, #16
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800b1ba:	6a3b      	ldr	r3, [r7, #32]
 800b1bc:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 800b1c0:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800b1c2:	6a3b      	ldr	r3, [r7, #32]
 800b1c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b1c6:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	69fa      	ldr	r2, [r7, #28]
 800b1ce:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 800b1d0:	2108      	movs	r1, #8
 800b1d2:	9103      	str	r1, [sp, #12]
 800b1d4:	f107 0110 	add.w	r1, r7, #16
 800b1d8:	9102      	str	r1, [sp, #8]
 800b1da:	9201      	str	r2, [sp, #4]
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	462b      	mov	r3, r5
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	4601      	mov	r1, r0
 800b1e4:	6a38      	ldr	r0, [r7, #32]
 800b1e6:	f7f9 ff81 	bl	80050ec <lfs_bd_read>
 800b1ea:	61b8      	str	r0, [r7, #24]
    if (err) {
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d001      	beq.n	800b1f6 <lfs_fs_parent_match+0x56>
        return err;
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	e012      	b.n	800b21c <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800b1f6:	f107 0310 	add.w	r3, r7, #16
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fa fb6f 	bl	80058de <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 800b200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b202:	1d1a      	adds	r2, r3, #4
 800b204:	f107 0310 	add.w	r3, r7, #16
 800b208:	4611      	mov	r1, r2
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7fa fb10 	bl	8005830 <lfs_pair_cmp>
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	bf14      	ite	ne
 800b216:	2301      	movne	r3, #1
 800b218:	2300      	moveq	r3, #0
 800b21a:	b2db      	uxtb	r3, r3
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3728      	adds	r7, #40	@ 0x28
 800b220:	46bd      	mov	sp, r7
 800b222:	bdb0      	pop	{r4, r5, r7, pc}

0800b224 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 800b224:	b580      	push	{r7, lr}
 800b226:	b090      	sub	sp, #64	@ 0x40
 800b228:	af04      	add	r7, sp, #16
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800b23c:	4a33      	ldr	r2, [pc, #204]	@ (800b30c <lfs_fs_parent+0xe8>)
 800b23e:	f107 031c 	add.w	r3, r7, #28
 800b242:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b246:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800b24a:	2301      	movs	r3, #1
 800b24c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t tortoise_period = 1;
 800b24e:	2301      	movs	r3, #1
 800b250:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 800b252:	e04a      	b.n	800b2ea <lfs_fs_parent+0xc6>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	3318      	adds	r3, #24
 800b258:	f107 021c 	add.w	r2, r7, #28
 800b25c:	4611      	mov	r1, r2
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fa fb10 	bl	8005884 <lfs_pair_issync>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d009      	beq.n	800b27e <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 800b26a:	4b29      	ldr	r3, [pc, #164]	@ (800b310 <lfs_fs_parent+0xec>)
 800b26c:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 800b270:	4928      	ldr	r1, [pc, #160]	@ (800b314 <lfs_fs_parent+0xf0>)
 800b272:	4829      	ldr	r0, [pc, #164]	@ (800b318 <lfs_fs_parent+0xf4>)
 800b274:	f001 fda2 	bl	800cdbc <iprintf>
            return LFS_ERR_CORRUPT;
 800b278:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800b27c:	e042      	b.n	800b304 <lfs_fs_parent+0xe0>
        }
        if (tortoise_i == tortoise_period) {
 800b27e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b282:	429a      	cmp	r2, r3
 800b284:	d10a      	bne.n	800b29c <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	699b      	ldr	r3, [r3, #24]
 800b28a:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	69db      	ldr	r3, [r3, #28]
 800b290:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 800b292:	2300      	movs	r3, #0
 800b294:	62fb      	str	r3, [r7, #44]	@ 0x2c
            tortoise_period *= 2;
 800b296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b298:	005b      	lsls	r3, r3, #1
 800b29a:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        tortoise_i += 1;
 800b29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b29e:	3301      	adds	r3, #1
 800b2a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800b2b0:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	3304      	adds	r3, #4
 800b2b6:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800b2b8:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800b2ba:	f107 0310 	add.w	r3, r7, #16
 800b2be:	9303      	str	r3, [sp, #12]
 800b2c0:	4b16      	ldr	r3, [pc, #88]	@ (800b31c <lfs_fs_parent+0xf8>)
 800b2c2:	9302      	str	r3, [sp, #8]
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	9301      	str	r3, [sp, #4]
 800b2c8:	4b15      	ldr	r3, [pc, #84]	@ (800b320 <lfs_fs_parent+0xfc>)
 800b2ca:	9300      	str	r3, [sp, #0]
 800b2cc:	4b15      	ldr	r3, [pc, #84]	@ (800b324 <lfs_fs_parent+0x100>)
 800b2ce:	6879      	ldr	r1, [r7, #4]
 800b2d0:	68f8      	ldr	r0, [r7, #12]
 800b2d2:	f7fb fd55 	bl	8006d80 <lfs_dir_fetchmatch>
 800b2d6:	6278      	str	r0, [r7, #36]	@ 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 800b2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d005      	beq.n	800b2ea <lfs_fs_parent+0xc6>
 800b2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e0:	f113 0f02 	cmn.w	r3, #2
 800b2e4:	d001      	beq.n	800b2ea <lfs_fs_parent+0xc6>
            return tag;
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e8:	e00c      	b.n	800b304 <lfs_fs_parent+0xe0>
    while (!lfs_pair_isnull(parent->tail)) {
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	3318      	adds	r3, #24
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fa fa83 	bl	80057fa <lfs_pair_isnull>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	f083 0301 	eor.w	r3, r3, #1
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1a9      	bne.n	800b254 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 800b300:	f06f 0301 	mvn.w	r3, #1
}
 800b304:	4618      	mov	r0, r3
 800b306:	3730      	adds	r7, #48	@ 0x30
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	0800eb70 	.word	0x0800eb70
 800b310:	0800eb2c 	.word	0x0800eb2c
 800b314:	0800ea1c 	.word	0x0800ea1c
 800b318:	0800f1dc 	.word	0x0800f1dc
 800b31c:	0800b1a1 	.word	0x0800b1a1
 800b320:	20000008 	.word	0x20000008
 800b324:	7ff003ff 	.word	0x7ff003ff

0800b328 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	460b      	mov	r3, r1
 800b332:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b338:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 800b33c:	78fb      	ldrb	r3, [r7, #3]
 800b33e:	025b      	lsls	r3, r3, #9
 800b340:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b346:	bf00      	nop
 800b348:	370c      	adds	r7, #12
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr
	...

0800b354 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 800b354:	b590      	push	{r4, r7, lr}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	460b      	mov	r3, r1
 800b35e:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b364:	4618      	mov	r0, r3
 800b366:	f7fa fb69 	bl	8005a3c <lfs_tag_size>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d10a      	bne.n	800b386 <lfs_fs_preporphans+0x32>
 800b370:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b374:	2b00      	cmp	r3, #0
 800b376:	da06      	bge.n	800b386 <lfs_fs_preporphans+0x32>
 800b378:	4b1a      	ldr	r3, [pc, #104]	@ (800b3e4 <lfs_fs_preporphans+0x90>)
 800b37a:	4a1b      	ldr	r2, [pc, #108]	@ (800b3e8 <lfs_fs_preporphans+0x94>)
 800b37c:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 800b380:	481a      	ldr	r0, [pc, #104]	@ (800b3ec <lfs_fs_preporphans+0x98>)
 800b382:	f001 fac5 	bl	800c910 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7fa fb56 	bl	8005a3c <lfs_tag_size>
 800b390:	4603      	mov	r3, r0
 800b392:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 800b396:	d90a      	bls.n	800b3ae <lfs_fs_preporphans+0x5a>
 800b398:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	dd06      	ble.n	800b3ae <lfs_fs_preporphans+0x5a>
 800b3a0:	4b13      	ldr	r3, [pc, #76]	@ (800b3f0 <lfs_fs_preporphans+0x9c>)
 800b3a2:	4a11      	ldr	r2, [pc, #68]	@ (800b3e8 <lfs_fs_preporphans+0x94>)
 800b3a4:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 800b3a8:	4810      	ldr	r0, [pc, #64]	@ (800b3ec <lfs_fs_preporphans+0x98>)
 800b3aa:	f001 fab1 	bl	800c910 <__assert_func>
    lfs->gstate.tag += orphans;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b3b6:	441a      	add	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3c0:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	3330      	adds	r3, #48	@ 0x30
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7fa fb9a 	bl	8005b02 <lfs_gstate_hasorphans>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800b3d2:	ea44 0203 	orr.w	r2, r4, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 800b3da:	2300      	movs	r3, #0
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd90      	pop	{r4, r7, pc}
 800b3e4:	0800f3b8 	.word	0x0800f3b8
 800b3e8:	0800f80c 	.word	0x0800f80c
 800b3ec:	0800ea1c 	.word	0x0800ea1c
 800b3f0:	0800f3f0 	.word	0x0800f3f0

0800b3f4 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	607a      	str	r2, [r7, #4]
 800b400:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b406:	4a17      	ldr	r2, [pc, #92]	@ (800b464 <lfs_fs_prepmove+0x70>)
 800b408:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 800b40a:	897b      	ldrh	r3, [r7, #10]
 800b40c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800b410:	428b      	cmp	r3, r1
 800b412:	d006      	beq.n	800b422 <lfs_fs_prepmove+0x2e>
 800b414:	897b      	ldrh	r3, [r7, #10]
 800b416:	029b      	lsls	r3, r3, #10
 800b418:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800b41c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800b420:	e000      	b.n	800b424 <lfs_fs_prepmove+0x30>
 800b422:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800b424:	431a      	orrs	r2, r3
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 800b42a:	897b      	ldrh	r3, [r7, #10]
 800b42c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800b430:	4293      	cmp	r3, r2
 800b432:	d002      	beq.n	800b43a <lfs_fs_prepmove+0x46>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	e000      	b.n	800b43c <lfs_fs_prepmove+0x48>
 800b43a:	2300      	movs	r3, #0
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 800b440:	897b      	ldrh	r3, [r7, #10]
 800b442:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800b446:	4293      	cmp	r3, r2
 800b448:	d003      	beq.n	800b452 <lfs_fs_prepmove+0x5e>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	3304      	adds	r3, #4
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	e000      	b.n	800b454 <lfs_fs_prepmove+0x60>
 800b452:	2300      	movs	r3, #0
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800b458:	bf00      	nop
 800b45a:	3714      	adds	r7, #20
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr
 800b464:	800003ff 	.word	0x800003ff

0800b468 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 800b468:	b580      	push	{r7, lr}
 800b46a:	b098      	sub	sp, #96	@ 0x60
 800b46c:	af02      	add	r7, sp, #8
 800b46e:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	3330      	adds	r3, #48	@ 0x30
 800b474:	4618      	mov	r0, r3
 800b476:	f7fa fb79 	bl	8005b6c <lfs_gstate_needssuperblock>
 800b47a:	4603      	mov	r3, r0
 800b47c:	f083 0301 	eor.w	r3, r3, #1
 800b480:	b2db      	uxtb	r3, r3
 800b482:	2b00      	cmp	r3, #0
 800b484:	d001      	beq.n	800b48a <lfs_fs_desuperblock+0x22>
        return 0;
 800b486:	2300      	movs	r3, #0
 800b488:	e04e      	b.n	800b528 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a1a      	ldr	r2, [r3, #32]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b492:	4927      	ldr	r1, [pc, #156]	@ (800b530 <lfs_fs_desuperblock+0xc8>)
 800b494:	9101      	str	r1, [sp, #4]
 800b496:	9300      	str	r3, [sp, #0]
 800b498:	4613      	mov	r3, r2
 800b49a:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 800b49e:	4925      	ldr	r1, [pc, #148]	@ (800b534 <lfs_fs_desuperblock+0xcc>)
 800b4a0:	4825      	ldr	r0, [pc, #148]	@ (800b538 <lfs_fs_desuperblock+0xd0>)
 800b4a2:	f001 fc8b 	bl	800cdbc <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f103 0220 	add.w	r2, r3, #32
 800b4ac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f7fc f834 	bl	8007520 <lfs_dir_fetch>
 800b4b8:	6578      	str	r0, [r7, #84]	@ 0x54
    if (err) {
 800b4ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d001      	beq.n	800b4c4 <lfs_fs_desuperblock+0x5c>
        return err;
 800b4c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4c2:	e031      	b.n	800b528 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f7fa fce7 	bl	8005e98 <lfs_fs_disk_version>
 800b4ca:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 800b4cc:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b4d2:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 800b4d4:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 800b4da:	627b      	str	r3, [r7, #36]	@ 0x24
        .name_max    = lfs->name_max,
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    lfs_superblock_t superblock = {
 800b4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
        .file_max    = lfs->file_max,
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    lfs_superblock_t superblock = {
 800b4e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .attr_max    = lfs->attr_max,
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    lfs_superblock_t superblock = {
 800b4ec:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    lfs_superblock_tole32(&superblock);
 800b4ee:	f107 031c 	add.w	r3, r7, #28
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7fa fc46 	bl	8005d84 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800b4f8:	4b10      	ldr	r3, [pc, #64]	@ (800b53c <lfs_fs_desuperblock+0xd4>)
 800b4fa:	617b      	str	r3, [r7, #20]
 800b4fc:	f107 031c 	add.w	r3, r7, #28
 800b500:	61bb      	str	r3, [r7, #24]
 800b502:	f107 0214 	add.w	r2, r7, #20
 800b506:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800b50a:	2301      	movs	r3, #1
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f7fd fda9 	bl	8009064 <lfs_dir_commit>
 800b512:	6578      	str	r0, [r7, #84]	@ 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 800b514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b516:	2b00      	cmp	r3, #0
 800b518:	d001      	beq.n	800b51e <lfs_fs_desuperblock+0xb6>
        return err;
 800b51a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b51c:	e004      	b.n	800b528 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 800b51e:	2100      	movs	r1, #0
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f7ff ff01 	bl	800b328 <lfs_fs_prepsuperblock>
    return 0;
 800b526:	2300      	movs	r3, #0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3758      	adds	r7, #88	@ 0x58
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	0800eb2c 	.word	0x0800eb2c
 800b534:	0800ea1c 	.word	0x0800ea1c
 800b538:	0800f428 	.word	0x0800f428
 800b53c:	20100018 	.word	0x20100018

0800b540 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 800b540:	b5b0      	push	{r4, r5, r7, lr}
 800b542:	b094      	sub	sp, #80	@ 0x50
 800b544:	af04      	add	r7, sp, #16
 800b546:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	333c      	adds	r3, #60	@ 0x3c
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7fa fafa 	bl	8005b46 <lfs_gstate_hasmove>
 800b552:	4603      	mov	r3, r0
 800b554:	f083 0301 	eor.w	r3, r3, #1
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d001      	beq.n	800b562 <lfs_fs_demove+0x22>
        return 0;
 800b55e:	2300      	movs	r3, #0
 800b560:	e05b      	b.n	800b61a <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b56e:	4618      	mov	r0, r3
 800b570:	f7fa fa54 	bl	8005a1c <lfs_tag_id>
 800b574:	4603      	mov	r3, r0
 800b576:	461a      	mov	r2, r3
 800b578:	4b2a      	ldr	r3, [pc, #168]	@ (800b624 <lfs_fs_demove+0xe4>)
 800b57a:	9302      	str	r3, [sp, #8]
 800b57c:	9201      	str	r2, [sp, #4]
 800b57e:	9400      	str	r4, [sp, #0]
 800b580:	462b      	mov	r3, r5
 800b582:	f241 3224 	movw	r2, #4900	@ 0x1324
 800b586:	4928      	ldr	r1, [pc, #160]	@ (800b628 <lfs_fs_demove+0xe8>)
 800b588:	4828      	ldr	r0, [pc, #160]	@ (800b62c <lfs_fs_demove+0xec>)
 800b58a:	f001 fc17 	bl	800cdbc <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b592:	4618      	mov	r0, r3
 800b594:	f7fa fa18 	bl	80059c8 <lfs_tag_type3>
 800b598:	4603      	mov	r3, r0
 800b59a:	461a      	mov	r2, r3
 800b59c:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d006      	beq.n	800b5b2 <lfs_fs_demove+0x72>
 800b5a4:	4b22      	ldr	r3, [pc, #136]	@ (800b630 <lfs_fs_demove+0xf0>)
 800b5a6:	4a23      	ldr	r2, [pc, #140]	@ (800b634 <lfs_fs_demove+0xf4>)
 800b5a8:	f241 312b 	movw	r1, #4907	@ 0x132b
 800b5ac:	481e      	ldr	r0, [pc, #120]	@ (800b628 <lfs_fs_demove+0xe8>)
 800b5ae:	f001 f9af 	bl	800c910 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800b5b8:	f107 0318 	add.w	r3, r7, #24
 800b5bc:	4619      	mov	r1, r3
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f7fb ffae 	bl	8007520 <lfs_dir_fetch>
 800b5c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 800b5c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d001      	beq.n	800b5d0 <lfs_fs_demove+0x90>
        return err;
 800b5cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5ce:	e024      	b.n	800b61a <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7fa fa21 	bl	8005a1c <lfs_tag_id>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f7ff ff05 	bl	800b3f4 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 800b5ea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b5ec:	029b      	lsls	r3, r3, #10
 800b5ee:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800b5f2:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800b5f6:	613b      	str	r3, [r7, #16]
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	617b      	str	r3, [r7, #20]
 800b5fc:	f107 0210 	add.w	r2, r7, #16
 800b600:	f107 0118 	add.w	r1, r7, #24
 800b604:	2301      	movs	r3, #1
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f7fd fd2c 	bl	8009064 <lfs_dir_commit>
 800b60c:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800b60e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b610:	2b00      	cmp	r3, #0
 800b612:	d001      	beq.n	800b618 <lfs_fs_demove+0xd8>
        return err;
 800b614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b616:	e000      	b.n	800b61a <lfs_fs_demove+0xda>
    }

    return 0;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3740      	adds	r7, #64	@ 0x40
 800b61e:	46bd      	mov	sp, r7
 800b620:	bdb0      	pop	{r4, r5, r7, pc}
 800b622:	bf00      	nop
 800b624:	0800eb2c 	.word	0x0800eb2c
 800b628:	0800ea1c 	.word	0x0800ea1c
 800b62c:	0800f45c 	.word	0x0800f45c
 800b630:	0800f490 	.word	0x0800f490
 800b634:	0800f820 	.word	0x0800f820

0800b638 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 800b638:	b5b0      	push	{r4, r5, r7, lr}
 800b63a:	b0b2      	sub	sp, #200	@ 0xc8
 800b63c:	af04      	add	r7, sp, #16
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	460b      	mov	r3, r1
 800b642:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	3330      	adds	r3, #48	@ 0x30
 800b648:	4618      	mov	r0, r3
 800b64a:	f7fa fa5a 	bl	8005b02 <lfs_gstate_hasorphans>
 800b64e:	4603      	mov	r3, r0
 800b650:	f083 0301 	eor.w	r3, r3, #1
 800b654:	b2db      	uxtb	r3, r3
 800b656:	2b00      	cmp	r3, #0
 800b658:	d001      	beq.n	800b65e <lfs_fs_deorphan+0x26>
        return 0;
 800b65a:	2300      	movs	r3, #0
 800b65c:	e188      	b.n	800b970 <lfs_fs_deorphan+0x338>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 800b65e:	2300      	movs	r3, #0
 800b660:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 800b664:	e171      	b.n	800b94a <lfs_fs_deorphan+0x312>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 800b666:	f107 0308 	add.w	r3, r7, #8
 800b66a:	2220      	movs	r2, #32
 800b66c:	2100      	movs	r1, #0
 800b66e:	4618      	mov	r0, r3
 800b670:	f001 fbc6 	bl	800ce00 <memset>
 800b674:	2301      	movs	r3, #1
 800b676:	77fb      	strb	r3, [r7, #31]
 800b678:	2301      	movs	r3, #1
 800b67a:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 800b67c:	2300      	movs	r3, #0
 800b67e:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 800b682:	e14a      	b.n	800b91a <lfs_fs_deorphan+0x2e2>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 800b684:	f107 0308 	add.w	r3, r7, #8
 800b688:	f103 0218 	add.w	r2, r3, #24
 800b68c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7fb ff44 	bl	8007520 <lfs_dir_fetch>
 800b698:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
            if (err) {
 800b69c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d002      	beq.n	800b6aa <lfs_fs_deorphan+0x72>
                return err;
 800b6a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b6a8:	e162      	b.n	800b970 <lfs_fs_deorphan+0x338>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 800b6aa:	7ffb      	ldrb	r3, [r7, #31]
 800b6ac:	f083 0301 	eor.w	r3, r3, #1
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f000 8125 	beq.w	800b902 <lfs_fs_deorphan+0x2ca>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800b6b8:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800b6bc:	f107 0308 	add.w	r3, r7, #8
 800b6c0:	3318      	adds	r3, #24
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f7ff fdad 	bl	800b224 <lfs_fs_parent>
 800b6ca:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 800b6ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	da07      	bge.n	800b6e6 <lfs_fs_deorphan+0xae>
 800b6d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b6da:	f113 0f02 	cmn.w	r3, #2
 800b6de:	d002      	beq.n	800b6e6 <lfs_fs_deorphan+0xae>
                    return tag;
 800b6e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b6e4:	e10c      	b.n	800b900 <lfs_fs_deorphan+0x2c8>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 800b6e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f040 80ac 	bne.w	800b848 <lfs_fs_deorphan+0x210>
 800b6f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b6f4:	f113 0f02 	cmn.w	r3, #2
 800b6f8:	f000 80a6 	beq.w	800b848 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 800b6fc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b700:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800b704:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800b708:	9300      	str	r3, [sp, #0]
 800b70a:	4613      	mov	r3, r2
 800b70c:	4a9a      	ldr	r2, [pc, #616]	@ (800b978 <lfs_fs_deorphan+0x340>)
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f7fa fe00 	bl	8006314 <lfs_dir_get>
 800b714:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 800b718:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	da02      	bge.n	800b726 <lfs_fs_deorphan+0xee>
                        return state;
 800b720:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                    return tag;
 800b724:	e124      	b.n	800b970 <lfs_fs_deorphan+0x338>
                    }
                    lfs_pair_fromle32(pair);
 800b726:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7fa f8d7 	bl	80058de <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 800b730:	f107 0308 	add.w	r3, r7, #8
 800b734:	f103 0218 	add.w	r2, r3, #24
 800b738:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800b73c:	4611      	mov	r1, r2
 800b73e:	4618      	mov	r0, r3
 800b740:	f7fa f8a0 	bl	8005884 <lfs_pair_issync>
 800b744:	4603      	mov	r3, r0
 800b746:	f083 0301 	eor.w	r3, r3, #1
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d07b      	beq.n	800b848 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 800b750:	6a38      	ldr	r0, [r7, #32]
 800b752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b754:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b758:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800b75c:	4c87      	ldr	r4, [pc, #540]	@ (800b97c <lfs_fs_deorphan+0x344>)
 800b75e:	9403      	str	r4, [sp, #12]
 800b760:	9102      	str	r1, [sp, #8]
 800b762:	9201      	str	r2, [sp, #4]
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	4603      	mov	r3, r0
 800b768:	f241 3271 	movw	r2, #4977	@ 0x1371
 800b76c:	4984      	ldr	r1, [pc, #528]	@ (800b980 <lfs_fs_deorphan+0x348>)
 800b76e:	4885      	ldr	r0, [pc, #532]	@ (800b984 <lfs_fs_deorphan+0x34c>)
 800b770:	f001 fb24 	bl	800cdbc <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 800b774:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800b778:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	3330      	adds	r3, #48	@ 0x30
 800b780:	f107 0208 	add.w	r2, r7, #8
 800b784:	4611      	mov	r1, r2
 800b786:	4618      	mov	r0, r3
 800b788:	f7fa fa04 	bl	8005b94 <lfs_gstate_hasmovehere>
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d01c      	beq.n	800b7cc <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b796:	4618      	mov	r0, r3
 800b798:	f7fa f940 	bl	8005a1c <lfs_tag_id>
 800b79c:	4603      	mov	r3, r0
 800b79e:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 800b7a2:	68b9      	ldr	r1, [r7, #8]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 800b7aa:	4874      	ldr	r0, [pc, #464]	@ (800b97c <lfs_fs_deorphan+0x344>)
 800b7ac:	9002      	str	r0, [sp, #8]
 800b7ae:	9201      	str	r2, [sp, #4]
 800b7b0:	9300      	str	r3, [sp, #0]
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	f241 327c 	movw	r2, #4988	@ 0x137c
 800b7b8:	4971      	ldr	r1, [pc, #452]	@ (800b980 <lfs_fs_deorphan+0x348>)
 800b7ba:	4873      	ldr	r0, [pc, #460]	@ (800b988 <lfs_fs_deorphan+0x350>)
 800b7bc:	f001 fafe 	bl	800cdbc <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f7ff fe14 	bl	800b3f4 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 800b7cc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7fa f89e 	bl	8005912 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800b7d6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 800b7da:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d007      	beq.n	800b7f2 <lfs_fs_deorphan+0x1ba>
 800b7e2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 800b7e6:	029b      	lsls	r3, r3, #10
 800b7e8:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800b7ec:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800b7f0:	e000      	b.n	800b7f4 <lfs_fs_deorphan+0x1bc>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b7fe:	4b63      	ldr	r3, [pc, #396]	@ (800b98c <lfs_fs_deorphan+0x354>)
 800b800:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b804:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800b808:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b80c:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 800b810:	f107 0108 	add.w	r1, r7, #8
 800b814:	2302      	movs	r3, #2
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7fd f92a 	bl	8008a70 <lfs_dir_orphaningcommit>
 800b81c:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 800b820:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800b824:	4618      	mov	r0, r3
 800b826:	f7fa f85a 	bl	80058de <lfs_pair_fromle32>
                        if (state < 0) {
 800b82a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b82e:	2b00      	cmp	r3, #0
 800b830:	da02      	bge.n	800b838 <lfs_fs_deorphan+0x200>
                            return state;
 800b832:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 800b836:	e063      	b.n	800b900 <lfs_fs_deorphan+0x2c8>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 800b838:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b83c:	2b03      	cmp	r3, #3
 800b83e:	d16c      	bne.n	800b91a <lfs_fs_deorphan+0x2e2>
                            moreorphans = true;
 800b840:	2301      	movs	r3, #1
 800b842:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 800b846:	e068      	b.n	800b91a <lfs_fs_deorphan+0x2e2>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 800b848:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d158      	bne.n	800b902 <lfs_fs_deorphan+0x2ca>
 800b850:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b854:	f113 0f02 	cmn.w	r3, #2
 800b858:	d153      	bne.n	800b902 <lfs_fs_deorphan+0x2ca>
 800b85a:	78fb      	ldrb	r3, [r7, #3]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d050      	beq.n	800b902 <lfs_fs_deorphan+0x2ca>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 800b860:	6a3a      	ldr	r2, [r7, #32]
 800b862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b864:	4945      	ldr	r1, [pc, #276]	@ (800b97c <lfs_fs_deorphan+0x344>)
 800b866:	9101      	str	r1, [sp, #4]
 800b868:	9300      	str	r3, [sp, #0]
 800b86a:	4613      	mov	r3, r2
 800b86c:	f241 329c 	movw	r2, #5020	@ 0x139c
 800b870:	4943      	ldr	r1, [pc, #268]	@ (800b980 <lfs_fs_deorphan+0x348>)
 800b872:	4847      	ldr	r0, [pc, #284]	@ (800b990 <lfs_fs_deorphan+0x358>)
 800b874:	f001 faa2 	bl	800cdbc <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800b87e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b882:	4619      	mov	r1, r3
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f7fb fe67 	bl	8007558 <lfs_dir_getgstate>
 800b88a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                    if (err) {
 800b88e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b892:	2b00      	cmp	r3, #0
 800b894:	d002      	beq.n	800b89c <lfs_fs_deorphan+0x264>
                        return err;
 800b896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b89a:	e030      	b.n	800b8fe <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 800b89c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b8a0:	3318      	adds	r3, #24
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fa f835 	bl	8005912 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800b8a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b8ac:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800b8b0:	051a      	lsls	r2, r3, #20
 800b8b2:	4b38      	ldr	r3, [pc, #224]	@ (800b994 <lfs_fs_deorphan+0x35c>)
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	673b      	str	r3, [r7, #112]	@ 0x70
 800b8b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b8bc:	3318      	adds	r3, #24
 800b8be:	677b      	str	r3, [r7, #116]	@ 0x74
 800b8c0:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800b8c4:	f107 0108 	add.w	r1, r7, #8
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f7fd f8d0 	bl	8008a70 <lfs_dir_orphaningcommit>
 800b8d0:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 800b8d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b8d8:	3318      	adds	r3, #24
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7f9 ffff 	bl	80058de <lfs_pair_fromle32>
                    if (state < 0) {
 800b8e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	da02      	bge.n	800b8ee <lfs_fs_deorphan+0x2b6>
                        return state;
 800b8e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b8ec:	e007      	b.n	800b8fe <lfs_fs_deorphan+0x2c6>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 800b8ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b8f2:	2b03      	cmp	r3, #3
 800b8f4:	d110      	bne.n	800b918 <lfs_fs_deorphan+0x2e0>
                        moreorphans = true;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 800b8fc:	e00d      	b.n	800b91a <lfs_fs_deorphan+0x2e2>
                    return tag;
 800b8fe:	e037      	b.n	800b970 <lfs_fs_deorphan+0x338>
                return err;
 800b900:	e036      	b.n	800b970 <lfs_fs_deorphan+0x338>
                    // refetch tail
                    continue;
                }
            }

            pdir = dir;
 800b902:	f107 0408 	add.w	r4, r7, #8
 800b906:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 800b90a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b90c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b90e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b912:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b916:	e000      	b.n	800b91a <lfs_fs_deorphan+0x2e2>
                    continue;
 800b918:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 800b91a:	f107 0308 	add.w	r3, r7, #8
 800b91e:	3318      	adds	r3, #24
 800b920:	4618      	mov	r0, r3
 800b922:	f7f9 ff6a 	bl	80057fa <lfs_pair_isnull>
 800b926:	4603      	mov	r3, r0
 800b928:	f083 0301 	eor.w	r3, r3, #1
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	2b00      	cmp	r3, #0
 800b930:	f47f aea8 	bne.w	800b684 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 800b934:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d001      	beq.n	800b940 <lfs_fs_deorphan+0x308>
 800b93c:	2300      	movs	r3, #0
 800b93e:	e002      	b.n	800b946 <lfs_fs_deorphan+0x30e>
 800b940:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b944:	3301      	adds	r3, #1
 800b946:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 800b94a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b94e:	2b01      	cmp	r3, #1
 800b950:	f77f ae89 	ble.w	800b666 <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	3330      	adds	r3, #48	@ 0x30
 800b958:	4618      	mov	r0, r3
 800b95a:	f7fa f8e5 	bl	8005b28 <lfs_gstate_getorphans>
 800b95e:	4603      	mov	r3, r0
 800b960:	425b      	negs	r3, r3
 800b962:	b2db      	uxtb	r3, r3
 800b964:	b25b      	sxtb	r3, r3
 800b966:	4619      	mov	r1, r3
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f7ff fcf3 	bl	800b354 <lfs_fs_preporphans>
 800b96e:	4603      	mov	r3, r0
}
 800b970:	4618      	mov	r0, r3
 800b972:	37b8      	adds	r7, #184	@ 0xb8
 800b974:	46bd      	mov	sp, r7
 800b976:	bdb0      	pop	{r4, r5, r7, pc}
 800b978:	7ffffc00 	.word	0x7ffffc00
 800b97c:	0800eb2c 	.word	0x0800eb2c
 800b980:	0800ea1c 	.word	0x0800ea1c
 800b984:	0800f4c4 	.word	0x0800f4c4
 800b988:	0800f508 	.word	0x0800f508
 800b98c:	600ffc08 	.word	0x600ffc08
 800b990:	0800f550 	.word	0x0800f550
 800b994:	000ffc08 	.word	0x000ffc08

0800b998 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f7ff fd61 	bl	800b468 <lfs_fs_desuperblock>
 800b9a6:	60f8      	str	r0, [r7, #12]
    if (err) {
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d001      	beq.n	800b9b2 <lfs_fs_forceconsistency+0x1a>
        return err;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	e013      	b.n	800b9da <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f7ff fdc4 	bl	800b540 <lfs_fs_demove>
 800b9b8:	60f8      	str	r0, [r7, #12]
    if (err) {
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d001      	beq.n	800b9c4 <lfs_fs_forceconsistency+0x2c>
        return err;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	e00a      	b.n	800b9da <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 800b9c4:	2101      	movs	r1, #1
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f7ff fe36 	bl	800b638 <lfs_fs_deorphan>
 800b9cc:	60f8      	str	r0, [r7, #12]
    if (err) {
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d001      	beq.n	800b9d8 <lfs_fs_forceconsistency+0x40>
        return err;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	e000      	b.n	800b9da <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 800b9e2:	b480      	push	{r7}
 800b9e4:	b085      	sub	sp, #20
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	1c5a      	adds	r2, r3, #1
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	601a      	str	r2, [r3, #0]
    return 0;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3714      	adds	r7, #20
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 800ba10:	2300      	movs	r3, #0
 800ba12:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 800ba14:	f107 0208 	add.w	r2, r7, #8
 800ba18:	2300      	movs	r3, #0
 800ba1a:	4907      	ldr	r1, [pc, #28]	@ (800ba38 <lfs_fs_size_+0x30>)
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f7ff f9ff 	bl	800ae20 <lfs_fs_traverse_>
 800ba22:	60f8      	str	r0, [r7, #12]
    if (err) {
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d001      	beq.n	800ba2e <lfs_fs_size_+0x26>
        return err;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	e000      	b.n	800ba30 <lfs_fs_size_+0x28>
    }

    return size;
 800ba2e:	68bb      	ldr	r3, [r7, #8]
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3710      	adds	r7, #16
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	0800b9e3 	.word	0x0800b9e3

0800ba3c <lfs_mount>:
    LFS_UNLOCK(cfg);
    return err;
}
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800ba46:	2300      	movs	r3, #0
 800ba48:	60fb      	str	r3, [r7, #12]
    if (err) {
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d001      	beq.n	800ba54 <lfs_mount+0x18>
        return err;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	e005      	b.n	800ba60 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 800ba54:	6839      	ldr	r1, [r7, #0]
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7fe ffb6 	bl	800a9c8 <lfs_mount_>
 800ba5c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <lfs_unmount>:

int lfs_unmount(lfs_t *lfs) {
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 800ba70:	2300      	movs	r3, #0
 800ba72:	60fb      	str	r3, [r7, #12]
    if (err) {
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d001      	beq.n	800ba7e <lfs_unmount+0x16>
        return err;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	e004      	b.n	800ba88 <lfs_unmount+0x20>
    }
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);

    err = lfs_unmount_(lfs);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f7ff f9c2 	bl	800ae08 <lfs_unmount_>
 800ba84:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_unmount -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800ba86:	68fb      	ldr	r3, [r7, #12]
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
 800ba9c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800ba9e:	2300      	movs	r3, #0
 800baa0:	617b      	str	r3, [r7, #20]
    if (err) {
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d001      	beq.n	800baac <lfs_file_open+0x1c>
        return err;
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	e01a      	b.n	800bae2 <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bab0:	68b9      	ldr	r1, [r7, #8]
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7fa f99e 	bl	8005df4 <lfs_mlist_isopen>
 800bab8:	4603      	mov	r3, r0
 800baba:	f083 0301 	eor.w	r3, r3, #1
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d106      	bne.n	800bad2 <lfs_file_open+0x42>
 800bac4:	4b09      	ldr	r3, [pc, #36]	@ (800baec <lfs_file_open+0x5c>)
 800bac6:	4a0a      	ldr	r2, [pc, #40]	@ (800baf0 <lfs_file_open+0x60>)
 800bac8:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 800bacc:	4809      	ldr	r0, [pc, #36]	@ (800baf4 <lfs_file_open+0x64>)
 800bace:	f000 ff1f 	bl	800c910 <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	68b9      	ldr	r1, [r7, #8]
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f7fd fee1 	bl	80098a0 <lfs_file_open_>
 800bade:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800bae0:	697b      	ldr	r3, [r7, #20]
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3718      	adds	r7, #24
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	0800f5a0 	.word	0x0800f5a0
 800baf0:	0800f830 	.word	0x0800f830
 800baf4:	0800ea1c 	.word	0x0800ea1c

0800baf8 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800bb02:	2300      	movs	r3, #0
 800bb04:	60fb      	str	r3, [r7, #12]
    if (err) {
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d001      	beq.n	800bb10 <lfs_file_close+0x18>
        return err;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	e015      	b.n	800bb3c <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb14:	6839      	ldr	r1, [r7, #0]
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fa f96c 	bl	8005df4 <lfs_mlist_isopen>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d106      	bne.n	800bb30 <lfs_file_close+0x38>
 800bb22:	4b08      	ldr	r3, [pc, #32]	@ (800bb44 <lfs_file_close+0x4c>)
 800bb24:	4a08      	ldr	r2, [pc, #32]	@ (800bb48 <lfs_file_close+0x50>)
 800bb26:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 800bb2a:	4808      	ldr	r0, [pc, #32]	@ (800bb4c <lfs_file_close+0x54>)
 800bb2c:	f000 fef0 	bl	800c910 <__assert_func>

    err = lfs_file_close_(lfs, file);
 800bb30:	6839      	ldr	r1, [r7, #0]
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f7fd fecc 	bl	80098d0 <lfs_file_close_>
 800bb38:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	0800f5d8 	.word	0x0800f5d8
 800bb48:	0800f840 	.word	0x0800f840
 800bb4c:	0800ea1c 	.word	0x0800ea1c

0800bb50 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b086      	sub	sp, #24
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	607a      	str	r2, [r7, #4]
 800bb5c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800bb5e:	2300      	movs	r3, #0
 800bb60:	617b      	str	r3, [r7, #20]
    if (err) {
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d001      	beq.n	800bb6c <lfs_file_read+0x1c>
        return err;
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	e017      	b.n	800bb9c <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb70:	68b9      	ldr	r1, [r7, #8]
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fa f93e 	bl	8005df4 <lfs_mlist_isopen>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d106      	bne.n	800bb8c <lfs_file_read+0x3c>
 800bb7e:	4b09      	ldr	r3, [pc, #36]	@ (800bba4 <lfs_file_read+0x54>)
 800bb80:	4a09      	ldr	r2, [pc, #36]	@ (800bba8 <lfs_file_read+0x58>)
 800bb82:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 800bb86:	4809      	ldr	r0, [pc, #36]	@ (800bbac <lfs_file_read+0x5c>)
 800bb88:	f000 fec2 	bl	800c910 <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	68b9      	ldr	r1, [r7, #8]
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f7fe f9fc 	bl	8009f90 <lfs_file_read_>
 800bb98:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800bb9a:	693b      	ldr	r3, [r7, #16]
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3718      	adds	r7, #24
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	0800f5d8 	.word	0x0800f5d8
 800bba8:	0800f850 	.word	0x0800f850
 800bbac:	0800ea1c 	.word	0x0800ea1c

0800bbb0 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	607a      	str	r2, [r7, #4]
 800bbbc:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	617b      	str	r3, [r7, #20]
    if (err) {
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d001      	beq.n	800bbcc <lfs_file_write+0x1c>
        return err;
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	e017      	b.n	800bbfc <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbd0:	68b9      	ldr	r1, [r7, #8]
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fa f90e 	bl	8005df4 <lfs_mlist_isopen>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d106      	bne.n	800bbec <lfs_file_write+0x3c>
 800bbde:	4b09      	ldr	r3, [pc, #36]	@ (800bc04 <lfs_file_write+0x54>)
 800bbe0:	4a09      	ldr	r2, [pc, #36]	@ (800bc08 <lfs_file_write+0x58>)
 800bbe2:	f641 0105 	movw	r1, #6149	@ 0x1805
 800bbe6:	4809      	ldr	r0, [pc, #36]	@ (800bc0c <lfs_file_write+0x5c>)
 800bbe8:	f000 fe92 	bl	800c910 <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	68b9      	ldr	r1, [r7, #8]
 800bbf2:	68f8      	ldr	r0, [r7, #12]
 800bbf4:	f7fe fb12 	bl	800a21c <lfs_file_write_>
 800bbf8:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800bbfa:	693b      	ldr	r3, [r7, #16]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3718      	adds	r7, #24
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	0800f5d8 	.word	0x0800f5d8
 800bc08:	0800f860 	.word	0x0800f860
 800bc0c:	0800ea1c 	.word	0x0800ea1c

0800bc10 <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	60fb      	str	r3, [r7, #12]
    if (err) {
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d001      	beq.n	800bc28 <lfs_file_tell+0x18>
        return err;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	e015      	b.n	800bc54 <lfs_file_tell+0x44>
    }
    LFS_TRACE("lfs_file_tell(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc2c:	6839      	ldr	r1, [r7, #0]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fa f8e0 	bl	8005df4 <lfs_mlist_isopen>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d106      	bne.n	800bc48 <lfs_file_tell+0x38>
 800bc3a:	4b08      	ldr	r3, [pc, #32]	@ (800bc5c <lfs_file_tell+0x4c>)
 800bc3c:	4a08      	ldr	r2, [pc, #32]	@ (800bc60 <lfs_file_tell+0x50>)
 800bc3e:	f641 0138 	movw	r1, #6200	@ 0x1838
 800bc42:	4808      	ldr	r0, [pc, #32]	@ (800bc64 <lfs_file_tell+0x54>)
 800bc44:	f000 fe64 	bl	800c910 <__assert_func>

    lfs_soff_t res = lfs_file_tell_(lfs, file);
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f7fe fbf3 	bl	800a436 <lfs_file_tell_>
 800bc50:	60b8      	str	r0, [r7, #8]

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800bc52:	68bb      	ldr	r3, [r7, #8]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3710      	adds	r7, #16
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	0800f5d8 	.word	0x0800f5d8
 800bc60:	0800f870 	.word	0x0800f870
 800bc64:	0800ea1c 	.word	0x0800ea1c

0800bc68 <lfs_file_rewind>:

int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800bc72:	2300      	movs	r3, #0
 800bc74:	60fb      	str	r3, [r7, #12]
    if (err) {
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d001      	beq.n	800bc80 <lfs_file_rewind+0x18>
        return err;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	e005      	b.n	800bc8c <lfs_file_rewind+0x24>
    }
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);

    err = lfs_file_rewind_(lfs, file);
 800bc80:	6839      	ldr	r1, [r7, #0]
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f7fe fbe4 	bl	800a450 <lfs_file_rewind_>
 800bc88:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3710      	adds	r7, #16
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <lfs_file_size>:

lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800bc9e:	2300      	movs	r3, #0
 800bca0:	60fb      	str	r3, [r7, #12]
    if (err) {
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d001      	beq.n	800bcac <lfs_file_size+0x18>
        return err;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	e015      	b.n	800bcd8 <lfs_file_size+0x44>
    }
    LFS_TRACE("lfs_file_size(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcb0:	6839      	ldr	r1, [r7, #0]
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7fa f89e 	bl	8005df4 <lfs_mlist_isopen>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d106      	bne.n	800bccc <lfs_file_size+0x38>
 800bcbe:	4b08      	ldr	r3, [pc, #32]	@ (800bce0 <lfs_file_size+0x4c>)
 800bcc0:	4a08      	ldr	r2, [pc, #32]	@ (800bce4 <lfs_file_size+0x50>)
 800bcc2:	f641 0155 	movw	r1, #6229	@ 0x1855
 800bcc6:	4808      	ldr	r0, [pc, #32]	@ (800bce8 <lfs_file_size+0x54>)
 800bcc8:	f000 fe22 	bl	800c910 <__assert_func>

    lfs_soff_t res = lfs_file_size_(lfs, file);
 800bccc:	6839      	ldr	r1, [r7, #0]
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f7fe fbd4 	bl	800a47c <lfs_file_size_>
 800bcd4:	60b8      	str	r0, [r7, #8]

    LFS_TRACE("lfs_file_size -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800bcd6:	68bb      	ldr	r3, [r7, #8]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3710      	adds	r7, #16
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	0800f5d8 	.word	0x0800f5d8
 800bce4:	0800f880 	.word	0x0800f880
 800bce8:	0800ea1c 	.word	0x0800ea1c

0800bcec <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 800bcec:	b480      	push	{r7}
 800bcee:	b087      	sub	sp, #28
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	617b      	str	r3, [r7, #20]
 800bd00:	e024      	b.n	800bd4c <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	091a      	lsrs	r2, r3, #4
 800bd06:	6939      	ldr	r1, [r7, #16]
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	440b      	add	r3, r1
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	4619      	mov	r1, r3
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	404b      	eors	r3, r1
 800bd14:	f003 030f 	and.w	r3, r3, #15
 800bd18:	4912      	ldr	r1, [pc, #72]	@ (800bd64 <lfs_crc+0x78>)
 800bd1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bd1e:	4053      	eors	r3, r2
 800bd20:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	091a      	lsrs	r2, r3, #4
 800bd26:	6939      	ldr	r1, [r7, #16]
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	440b      	add	r3, r1
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	091b      	lsrs	r3, r3, #4
 800bd30:	b2db      	uxtb	r3, r3
 800bd32:	4619      	mov	r1, r3
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	404b      	eors	r3, r1
 800bd38:	f003 030f 	and.w	r3, r3, #15
 800bd3c:	4909      	ldr	r1, [pc, #36]	@ (800bd64 <lfs_crc+0x78>)
 800bd3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bd42:	4053      	eors	r3, r2
 800bd44:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	617b      	str	r3, [r7, #20]
 800bd4c:	697a      	ldr	r2, [r7, #20]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d3d6      	bcc.n	800bd02 <lfs_crc+0x16>
    }

    return crc;
 800bd54:	68fb      	ldr	r3, [r7, #12]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	371c      	adds	r7, #28
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop
 800bd64:	0800f890 	.word	0x0800f890

0800bd68 <LL_I2C_IsActiveFlag_TXE>:
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	699b      	ldr	r3, [r3, #24]
 800bd74:	f003 0301 	and.w	r3, r3, #1
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d101      	bne.n	800bd80 <LL_I2C_IsActiveFlag_TXE+0x18>
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e000      	b.n	800bd82 <LL_I2C_IsActiveFlag_TXE+0x1a>
 800bd80:	2300      	movs	r3, #0
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	370c      	adds	r7, #12
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr

0800bd8e <LL_I2C_IsActiveFlag_RXNE>:
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b083      	sub	sp, #12
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	699b      	ldr	r3, [r3, #24]
 800bd9a:	f003 0304 	and.w	r3, r3, #4
 800bd9e:	2b04      	cmp	r3, #4
 800bda0:	d101      	bne.n	800bda6 <LL_I2C_IsActiveFlag_RXNE+0x18>
 800bda2:	2301      	movs	r3, #1
 800bda4:	e000      	b.n	800bda8 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800bda6:	2300      	movs	r3, #0
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	370c      	adds	r7, #12
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <LL_I2C_HandleTransfer>:
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b087      	sub	sp, #28
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	607a      	str	r2, [r7, #4]
 800bdc0:	603b      	str	r3, [r7, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800bdce:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	041b      	lsls	r3, r3, #16
 800bdd4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 800bdd8:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bdda:	6a3b      	ldr	r3, [r7, #32]
 800bddc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800bdde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde0:	4313      	orrs	r3, r2
 800bde2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bde6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	685a      	ldr	r2, [r3, #4]
 800bdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdee:	0d5b      	lsrs	r3, r3, #21
 800bdf0:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800bdf4:	4b06      	ldr	r3, [pc, #24]	@ (800be10 <LL_I2C_HandleTransfer+0x5c>)
 800bdf6:	430b      	orrs	r3, r1
 800bdf8:	43db      	mvns	r3, r3
 800bdfa:	401a      	ands	r2, r3
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	431a      	orrs	r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	605a      	str	r2, [r3, #4]
}
 800be04:	bf00      	nop
 800be06:	371c      	adds	r7, #28
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr
 800be10:	03ff7bff 	.word	0x03ff7bff

0800be14 <LL_I2C_ReceiveData8>:
{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be20:	b2db      	uxtb	r3, r3
}
 800be22:	4618      	mov	r0, r3
 800be24:	370c      	adds	r7, #12
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr

0800be2e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800be2e:	b480      	push	{r7}
 800be30:	b083      	sub	sp, #12
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	460b      	mov	r3, r1
 800be38:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800be3a:	78fa      	ldrb	r2, [r7, #3]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800be40:	bf00      	nop
 800be42:	370c      	adds	r7, #12
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr

0800be4c <i2c_read_blocking>:

// these two I2C functions are not good, the args are mostly unused but writing
// the signature like this made copying RP2040 code faster

static int i2c_read_blocking(I2C_TypeDef *i2cx, uint8_t addr, uint8_t *buf,
                             uint32_t bytes, uint32_t temp) {
 800be4c:	b590      	push	{r4, r7, lr}
 800be4e:	b089      	sub	sp, #36	@ 0x24
 800be50:	af02      	add	r7, sp, #8
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	607a      	str	r2, [r7, #4]
 800be56:	603b      	str	r3, [r7, #0]
 800be58:	460b      	mov	r3, r1
 800be5a:	72fb      	strb	r3, [r7, #11]
  int timeout = 0; // I2C software timeout counter
 800be5c:	2300      	movs	r3, #0
 800be5e:	617b      	str	r3, [r7, #20]

  LL_I2C_HandleTransfer(I2C1, (addr << 1), LL_I2C_ADDRSLAVE_7BIT, bytes,
 800be60:	7afb      	ldrb	r3, [r7, #11]
 800be62:	0059      	lsls	r1, r3, #1
 800be64:	4b18      	ldr	r3, [pc, #96]	@ (800bec8 <i2c_read_blocking+0x7c>)
 800be66:	9301      	str	r3, [sp, #4]
 800be68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	2200      	movs	r2, #0
 800be72:	4816      	ldr	r0, [pc, #88]	@ (800becc <i2c_read_blocking+0x80>)
 800be74:	f7ff ff9e 	bl	800bdb4 <LL_I2C_HandleTransfer>
                        LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);

  for (int i = 0; i < bytes; i++) {
 800be78:	2300      	movs	r3, #0
 800be7a:	613b      	str	r3, [r7, #16]
 800be7c:	e01a      	b.n	800beb4 <i2c_read_blocking+0x68>

    while (LL_I2C_IsActiveFlag_RXNE(I2C1) == 0) { // wait for response
      if (timeout >= 2000000) {
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	4a13      	ldr	r2, [pc, #76]	@ (800bed0 <i2c_read_blocking+0x84>)
 800be82:	4293      	cmp	r3, r2
 800be84:	dd02      	ble.n	800be8c <i2c_read_blocking+0x40>
        return -1;
 800be86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800be8a:	e018      	b.n	800bebe <i2c_read_blocking+0x72>
      }
      timeout++;
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	3301      	adds	r3, #1
 800be90:	617b      	str	r3, [r7, #20]
    while (LL_I2C_IsActiveFlag_RXNE(I2C1) == 0) { // wait for response
 800be92:	480e      	ldr	r0, [pc, #56]	@ (800becc <i2c_read_blocking+0x80>)
 800be94:	f7ff ff7b 	bl	800bd8e <LL_I2C_IsActiveFlag_RXNE>
 800be98:	4603      	mov	r3, r0
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d0ef      	beq.n	800be7e <i2c_read_blocking+0x32>
    }

    buf[i] = LL_I2C_ReceiveData8(I2C1);
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	18d4      	adds	r4, r2, r3
 800bea4:	4809      	ldr	r0, [pc, #36]	@ (800becc <i2c_read_blocking+0x80>)
 800bea6:	f7ff ffb5 	bl	800be14 <LL_I2C_ReceiveData8>
 800beaa:	4603      	mov	r3, r0
 800beac:	7023      	strb	r3, [r4, #0]
  for (int i = 0; i < bytes; i++) {
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	3301      	adds	r3, #1
 800beb2:	613b      	str	r3, [r7, #16]
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	683a      	ldr	r2, [r7, #0]
 800beb8:	429a      	cmp	r2, r3
 800beba:	d8ea      	bhi.n	800be92 <i2c_read_blocking+0x46>
  }
  return 0;
 800bebc:	2300      	movs	r3, #0
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	371c      	adds	r7, #28
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd90      	pop	{r4, r7, pc}
 800bec6:	bf00      	nop
 800bec8:	80002400 	.word	0x80002400
 800becc:	40005400 	.word	0x40005400
 800bed0:	001e847f 	.word	0x001e847f

0800bed4 <i2c_write_blocking>:

static int i2c_write_blocking(I2C_TypeDef *i2cx, uint8_t addr, uint8_t *buf,
                              uint32_t bytes, uint32_t temp) {
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b088      	sub	sp, #32
 800bed8:	af02      	add	r7, sp, #8
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	607a      	str	r2, [r7, #4]
 800bede:	603b      	str	r3, [r7, #0]
 800bee0:	460b      	mov	r3, r1
 800bee2:	72fb      	strb	r3, [r7, #11]
  int timeout = 0; // I2C software timeout counter
 800bee4:	2300      	movs	r3, #0
 800bee6:	617b      	str	r3, [r7, #20]

  LL_I2C_HandleTransfer(I2C1, (addr << 1), LL_I2C_ADDRSLAVE_7BIT, bytes,
 800bee8:	7afb      	ldrb	r3, [r7, #11]
 800beea:	0059      	lsls	r1, r3, #1
 800beec:	4b18      	ldr	r3, [pc, #96]	@ (800bf50 <i2c_write_blocking+0x7c>)
 800beee:	9301      	str	r3, [sp, #4]
 800bef0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bef4:	9300      	str	r3, [sp, #0]
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	2200      	movs	r2, #0
 800befa:	4816      	ldr	r0, [pc, #88]	@ (800bf54 <i2c_write_blocking+0x80>)
 800befc:	f7ff ff5a 	bl	800bdb4 <LL_I2C_HandleTransfer>
                        LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);

  for (int i = 0; i < bytes; i++) {
 800bf00:	2300      	movs	r3, #0
 800bf02:	613b      	str	r3, [r7, #16]
 800bf04:	e01a      	b.n	800bf3c <i2c_write_blocking+0x68>

    while (LL_I2C_IsActiveFlag_TXE(I2C1) == 0) {
      if (timeout >= 2000000) {
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	4a13      	ldr	r2, [pc, #76]	@ (800bf58 <i2c_write_blocking+0x84>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	dd02      	ble.n	800bf14 <i2c_write_blocking+0x40>
        return -1;
 800bf0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bf12:	e018      	b.n	800bf46 <i2c_write_blocking+0x72>
      }
      timeout++;
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	3301      	adds	r3, #1
 800bf18:	617b      	str	r3, [r7, #20]
    while (LL_I2C_IsActiveFlag_TXE(I2C1) == 0) {
 800bf1a:	480e      	ldr	r0, [pc, #56]	@ (800bf54 <i2c_write_blocking+0x80>)
 800bf1c:	f7ff ff24 	bl	800bd68 <LL_I2C_IsActiveFlag_TXE>
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d0ef      	beq.n	800bf06 <i2c_write_blocking+0x32>
    }

    LL_I2C_TransmitData8(I2C1, buf[i]);
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	4619      	mov	r1, r3
 800bf30:	4808      	ldr	r0, [pc, #32]	@ (800bf54 <i2c_write_blocking+0x80>)
 800bf32:	f7ff ff7c 	bl	800be2e <LL_I2C_TransmitData8>
  for (int i = 0; i < bytes; i++) {
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	3301      	adds	r3, #1
 800bf3a:	613b      	str	r3, [r7, #16]
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	683a      	ldr	r2, [r7, #0]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d8ea      	bhi.n	800bf1a <i2c_write_blocking+0x46>
  }
  return 0;
 800bf44:	2300      	movs	r3, #0
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3718      	adds	r7, #24
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	80002000 	.word	0x80002000
 800bf54:	40005400 	.word	0x40005400
 800bf58:	001e847f 	.word	0x001e847f

0800bf5c <ms5607_init>:

int ms5607_init(I2C_TypeDef *i2cx) {
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  // TODO
  if (read_prom() == -1)
 800bf64:	f000 fa6e 	bl	800c444 <read_prom>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf6e:	d102      	bne.n	800bf76 <ms5607_init+0x1a>
    return -1;
 800bf70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bf74:	e000      	b.n	800bf78 <ms5607_init+0x1c>
  else
    return 0;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <ms5607_get_press_temp>:
  else
    read_prom();
  return 0;
}

int ms5607_get_press_temp(uint32_t *pressure, int32_t *temperature) {
 800bf80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf84:	b0c0      	sub	sp, #256	@ 0x100
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
 800bf8c:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8

  int32_t press = 0;
 800bf90:	2300      	movs	r3, #0
 800bf92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  int32_t temp = 0;
 800bf96:	2300      	movs	r3, #0
 800bf98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  int32_t t2 = 0;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  int64_t off2 = 0;
 800bfa2:	f04f 0200 	mov.w	r2, #0
 800bfa6:	f04f 0300 	mov.w	r3, #0
 800bfaa:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
  int64_t sens2 = 0;
 800bfae:	f04f 0200 	mov.w	r2, #0
 800bfb2:	f04f 0300 	mov.w	r3, #0
 800bfb6:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8

  // Step 1: Read calibration data from PROM
  // Already did this in the init()

  // Step 2: Read pressure and temperature from the MS5607
  if (conversion() == -1)
 800bfba:	f000 fb7b 	bl	800c6b4 <conversion>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bfc4:	d102      	bne.n	800bfcc <ms5607_get_press_temp+0x4c>
    return -1;
 800bfc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bfca:	e22d      	b.n	800c428 <ms5607_get_press_temp+0x4a8>

  // The rest of this function mostly looks like random math, it is actually
  // the compensation calculations outline in the datasheet for the device!

  // Step 3: Calculate temperature
  dT = d2 - ((int64_t)c5 << 8);
 800bfcc:	4bda      	ldr	r3, [pc, #872]	@ (800c338 <ms5607_get_press_temp+0x3b8>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bfd6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800bfda:	4bd8      	ldr	r3, [pc, #864]	@ (800c33c <ms5607_get_press_temp+0x3bc>)
 800bfdc:	881b      	ldrh	r3, [r3, #0]
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	4698      	mov	r8, r3
 800bfe4:	4691      	mov	r9, r2
 800bfe6:	f04f 0200 	mov.w	r2, #0
 800bfea:	f04f 0300 	mov.w	r3, #0
 800bfee:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800bff2:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 800bff6:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800bffa:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	@ 0xb0
 800bffe:	4641      	mov	r1, r8
 800c000:	1a89      	subs	r1, r1, r2
 800c002:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800c006:	4649      	mov	r1, r9
 800c008:	eb61 0303 	sbc.w	r3, r1, r3
 800c00c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c010:	4bcb      	ldr	r3, [pc, #812]	@ (800c340 <ms5607_get_press_temp+0x3c0>)
 800c012:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c016:	e9c3 1200 	strd	r1, r2, [r3]

  // temp is e.g. 2000 = 20.00 deg C
  temp = (int64_t)2000 + ((dT * (int64_t)c6) >> 23);
 800c01a:	4bca      	ldr	r3, [pc, #808]	@ (800c344 <ms5607_get_press_temp+0x3c4>)
 800c01c:	881b      	ldrh	r3, [r3, #0]
 800c01e:	b29b      	uxth	r3, r3
 800c020:	2200      	movs	r2, #0
 800c022:	469a      	mov	sl, r3
 800c024:	4693      	mov	fp, r2
 800c026:	4bc6      	ldr	r3, [pc, #792]	@ (800c340 <ms5607_get_press_temp+0x3c0>)
 800c028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02c:	fb02 f00b 	mul.w	r0, r2, fp
 800c030:	fb0a f103 	mul.w	r1, sl, r3
 800c034:	4401      	add	r1, r0
 800c036:	fbaa 4502 	umull	r4, r5, sl, r2
 800c03a:	194b      	adds	r3, r1, r5
 800c03c:	461d      	mov	r5, r3
 800c03e:	f04f 0200 	mov.w	r2, #0
 800c042:	f04f 0300 	mov.w	r3, #0
 800c046:	0de2      	lsrs	r2, r4, #23
 800c048:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 800c04c:	15eb      	asrs	r3, r5, #23
 800c04e:	4613      	mov	r3, r2
 800c050:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800c054:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

  // Step 4: Calculate temperature compensated pressure
  off = ((int64_t)c2 * (int64_t)131072) + (((int64_t)c4 * dT) / (int64_t)64);
 800c058:	4bbb      	ldr	r3, [pc, #748]	@ (800c348 <ms5607_get_press_temp+0x3c8>)
 800c05a:	881b      	ldrh	r3, [r3, #0]
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	2200      	movs	r2, #0
 800c060:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c064:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c068:	f04f 0400 	mov.w	r4, #0
 800c06c:	f04f 0500 	mov.w	r5, #0
 800c070:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c074:	4613      	mov	r3, r2
 800c076:	045d      	lsls	r5, r3, #17
 800c078:	460b      	mov	r3, r1
 800c07a:	ea45 35d3 	orr.w	r5, r5, r3, lsr #15
 800c07e:	460b      	mov	r3, r1
 800c080:	045c      	lsls	r4, r3, #17
 800c082:	4bb2      	ldr	r3, [pc, #712]	@ (800c34c <ms5607_get_press_temp+0x3cc>)
 800c084:	881b      	ldrh	r3, [r3, #0]
 800c086:	b29b      	uxth	r3, r3
 800c088:	2200      	movs	r2, #0
 800c08a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c08e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800c092:	4bab      	ldr	r3, [pc, #684]	@ (800c340 <ms5607_get_press_temp+0x3c0>)
 800c094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c098:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800c09c:	4649      	mov	r1, r9
 800c09e:	fb02 f001 	mul.w	r0, r2, r1
 800c0a2:	4641      	mov	r1, r8
 800c0a4:	fb01 f103 	mul.w	r1, r1, r3
 800c0a8:	4401      	add	r1, r0
 800c0aa:	4640      	mov	r0, r8
 800c0ac:	fba0 2302 	umull	r2, r3, r0, r2
 800c0b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c0b4:	4613      	mov	r3, r2
 800c0b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c0ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c0be:	18cb      	adds	r3, r1, r3
 800c0c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c0c4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	da07      	bge.n	800c0dc <ms5607_get_press_temp+0x15c>
 800c0cc:	f112 013f 	adds.w	r1, r2, #63	@ 0x3f
 800c0d0:	6439      	str	r1, [r7, #64]	@ 0x40
 800c0d2:	f143 0300 	adc.w	r3, r3, #0
 800c0d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c0d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c0dc:	f04f 0000 	mov.w	r0, #0
 800c0e0:	f04f 0100 	mov.w	r1, #0
 800c0e4:	0990      	lsrs	r0, r2, #6
 800c0e6:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 800c0ea:	1199      	asrs	r1, r3, #6
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	18a1      	adds	r1, r4, r2
 800c0f2:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800c0f6:	eb45 0303 	adc.w	r3, r5, r3
 800c0fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c0fe:	4b94      	ldr	r3, [pc, #592]	@ (800c350 <ms5607_get_press_temp+0x3d0>)
 800c100:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c104:	e9c3 1200 	strd	r1, r2, [r3]
  sens = ((int64_t)c1 * (int64_t)65536) + (((int64_t)c3 * dT) / (int64_t)128);
 800c108:	4b92      	ldr	r3, [pc, #584]	@ (800c354 <ms5607_get_press_temp+0x3d4>)
 800c10a:	881b      	ldrh	r3, [r3, #0]
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	2200      	movs	r2, #0
 800c110:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c114:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c118:	f04f 0400 	mov.w	r4, #0
 800c11c:	f04f 0500 	mov.w	r5, #0
 800c120:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c124:	4613      	mov	r3, r2
 800c126:	041d      	lsls	r5, r3, #16
 800c128:	460b      	mov	r3, r1
 800c12a:	ea45 4513 	orr.w	r5, r5, r3, lsr #16
 800c12e:	460b      	mov	r3, r1
 800c130:	041c      	lsls	r4, r3, #16
 800c132:	4b89      	ldr	r3, [pc, #548]	@ (800c358 <ms5607_get_press_temp+0x3d8>)
 800c134:	881b      	ldrh	r3, [r3, #0]
 800c136:	b29b      	uxth	r3, r3
 800c138:	2200      	movs	r2, #0
 800c13a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c13e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c142:	4b7f      	ldr	r3, [pc, #508]	@ (800c340 <ms5607_get_press_temp+0x3c0>)
 800c144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c148:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800c14c:	4649      	mov	r1, r9
 800c14e:	fb02 f001 	mul.w	r0, r2, r1
 800c152:	4641      	mov	r1, r8
 800c154:	fb01 f103 	mul.w	r1, r1, r3
 800c158:	4401      	add	r1, r0
 800c15a:	4640      	mov	r0, r8
 800c15c:	fba0 2302 	umull	r2, r3, r0, r2
 800c160:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c164:	4613      	mov	r3, r2
 800c166:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c16a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c16e:	18cb      	adds	r3, r1, r3
 800c170:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c174:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800c178:	2b00      	cmp	r3, #0
 800c17a:	da07      	bge.n	800c18c <ms5607_get_press_temp+0x20c>
 800c17c:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 800c180:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c182:	f143 0300 	adc.w	r3, r3, #0
 800c186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c188:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c18c:	f04f 0000 	mov.w	r0, #0
 800c190:	f04f 0100 	mov.w	r1, #0
 800c194:	09d0      	lsrs	r0, r2, #7
 800c196:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800c19a:	11d9      	asrs	r1, r3, #7
 800c19c:	4602      	mov	r2, r0
 800c19e:	460b      	mov	r3, r1
 800c1a0:	18a1      	adds	r1, r4, r2
 800c1a2:	67b9      	str	r1, [r7, #120]	@ 0x78
 800c1a4:	eb45 0303 	adc.w	r3, r5, r3
 800c1a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c1aa:	4b6c      	ldr	r3, [pc, #432]	@ (800c35c <ms5607_get_press_temp+0x3dc>)
 800c1ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c1b0:	e9c3 1200 	strd	r1, r2, [r3]

  // Second order compensation
  if (temp < (int)2000) {
 800c1b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c1b8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800c1bc:	f280 80d5 	bge.w	800c36a <ms5607_get_press_temp+0x3ea>

    t2 = ((dT * dT) / ((int64_t)2147483648));
 800c1c0:	4b5f      	ldr	r3, [pc, #380]	@ (800c340 <ms5607_get_press_temp+0x3c0>)
 800c1c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1c6:	4b5e      	ldr	r3, [pc, #376]	@ (800c340 <ms5607_get_press_temp+0x3c0>)
 800c1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1cc:	fb02 f501 	mul.w	r5, r2, r1
 800c1d0:	fb00 f403 	mul.w	r4, r0, r3
 800c1d4:	442c      	add	r4, r5
 800c1d6:	fba0 2302 	umull	r2, r3, r0, r2
 800c1da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c1de:	4613      	mov	r3, r2
 800c1e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c1e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c1e8:	18e3      	adds	r3, r4, r3
 800c1ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c1ee:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	da08      	bge.n	800c208 <ms5607_get_press_temp+0x288>
 800c1f6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c1fa:	1851      	adds	r1, r2, r1
 800c1fc:	6339      	str	r1, [r7, #48]	@ 0x30
 800c1fe:	f143 0300 	adc.w	r3, r3, #0
 800c202:	637b      	str	r3, [r7, #52]	@ 0x34
 800c204:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800c208:	f04f 0000 	mov.w	r0, #0
 800c20c:	f04f 0100 	mov.w	r1, #0
 800c210:	0fd0      	lsrs	r0, r2, #31
 800c212:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800c216:	17d9      	asrs	r1, r3, #31
 800c218:	4602      	mov	r2, r0
 800c21a:	460b      	mov	r3, r1
 800c21c:	4613      	mov	r3, r2
 800c21e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    off2 = (61 * ((temp - 2000) * (temp - 2000)) / 16);
 800c222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c226:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 800c22a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c22e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800c232:	fb03 f202 	mul.w	r2, r3, r2
 800c236:	4613      	mov	r3, r2
 800c238:	011b      	lsls	r3, r3, #4
 800c23a:	1a9b      	subs	r3, r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	4413      	add	r3, r2
 800c240:	2b00      	cmp	r3, #0
 800c242:	da00      	bge.n	800c246 <ms5607_get_press_temp+0x2c6>
 800c244:	330f      	adds	r3, #15
 800c246:	111b      	asrs	r3, r3, #4
 800c248:	17da      	asrs	r2, r3, #31
 800c24a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c24c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c24e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800c252:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0
    sens2 = (2 * ((temp - 2000) ^ 2));
 800c256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c25a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800c25e:	f083 0302 	eor.w	r3, r3, #2
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	17da      	asrs	r2, r3, #31
 800c266:	623b      	str	r3, [r7, #32]
 800c268:	627a      	str	r2, [r7, #36]	@ 0x24
 800c26a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c26e:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8

    if (temp < -15) {
 800c272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c276:	f113 0f0f 	cmn.w	r3, #15
 800c27a:	da3b      	bge.n	800c2f4 <ms5607_get_press_temp+0x374>

      off2 = (off2 + (15 * ((temp + 1500) * (temp + 1500))));
 800c27c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c280:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 800c284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c288:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800c28c:	fb03 f202 	mul.w	r2, r3, r2
 800c290:	4613      	mov	r3, r2
 800c292:	011b      	lsls	r3, r3, #4
 800c294:	1a9b      	subs	r3, r3, r2
 800c296:	17da      	asrs	r2, r3, #31
 800c298:	673b      	str	r3, [r7, #112]	@ 0x70
 800c29a:	677a      	str	r2, [r7, #116]	@ 0x74
 800c29c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 800c2a0:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800c2a4:	4621      	mov	r1, r4
 800c2a6:	1851      	adds	r1, r2, r1
 800c2a8:	61b9      	str	r1, [r7, #24]
 800c2aa:	4629      	mov	r1, r5
 800c2ac:	eb43 0101 	adc.w	r1, r3, r1
 800c2b0:	61f9      	str	r1, [r7, #28]
 800c2b2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c2b6:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0
      sens2 = (sens2 + (8 * ((temp + 1500) * (temp + 1500))));
 800c2ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c2be:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 800c2c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c2c6:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800c2ca:	fb02 f303 	mul.w	r3, r2, r3
 800c2ce:	00db      	lsls	r3, r3, #3
 800c2d0:	17da      	asrs	r2, r3, #31
 800c2d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c2d4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c2d6:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 800c2da:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800c2de:	4621      	mov	r1, r4
 800c2e0:	1851      	adds	r1, r2, r1
 800c2e2:	6139      	str	r1, [r7, #16]
 800c2e4:	4629      	mov	r1, r5
 800c2e6:	eb43 0101 	adc.w	r1, r3, r1
 800c2ea:	6179      	str	r1, [r7, #20]
 800c2ec:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c2f0:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8
    }

    temp = temp - t2;
 800c2f4:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800c2f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2fc:	1ad3      	subs	r3, r2, r3
 800c2fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    off = off - off2;
 800c302:	4b13      	ldr	r3, [pc, #76]	@ (800c350 <ms5607_get_press_temp+0x3d0>)
 800c304:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c308:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 800c30c:	1a84      	subs	r4, r0, r2
 800c30e:	663c      	str	r4, [r7, #96]	@ 0x60
 800c310:	eb61 0303 	sbc.w	r3, r1, r3
 800c314:	667b      	str	r3, [r7, #100]	@ 0x64
 800c316:	4b0e      	ldr	r3, [pc, #56]	@ (800c350 <ms5607_get_press_temp+0x3d0>)
 800c318:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c31c:	e9c3 1200 	strd	r1, r2, [r3]
    sens = sens - sens2;
 800c320:	4b0e      	ldr	r3, [pc, #56]	@ (800c35c <ms5607_get_press_temp+0x3dc>)
 800c322:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c326:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 800c32a:	1a84      	subs	r4, r0, r2
 800c32c:	65bc      	str	r4, [r7, #88]	@ 0x58
 800c32e:	eb61 0303 	sbc.w	r3, r1, r3
 800c332:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c334:	e014      	b.n	800c360 <ms5607_get_press_temp+0x3e0>
 800c336:	bf00      	nop
 800c338:	20000420 	.word	0x20000420
 800c33c:	20000418 	.word	0x20000418
 800c340:	20000428 	.word	0x20000428
 800c344:	2000041a 	.word	0x2000041a
 800c348:	20000412 	.word	0x20000412
 800c34c:	20000416 	.word	0x20000416
 800c350:	20000430 	.word	0x20000430
 800c354:	20000410 	.word	0x20000410
 800c358:	20000414 	.word	0x20000414
 800c35c:	20000438 	.word	0x20000438
 800c360:	4b34      	ldr	r3, [pc, #208]	@ (800c434 <ms5607_get_press_temp+0x4b4>)
 800c362:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c366:	e9c3 1200 	strd	r1, r2, [r3]
  }

  press = (((d1 * sens) / (2097152)) - off) / (32768);
 800c36a:	4b33      	ldr	r3, [pc, #204]	@ (800c438 <ms5607_get_press_temp+0x4b8>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2200      	movs	r2, #0
 800c370:	653b      	str	r3, [r7, #80]	@ 0x50
 800c372:	657a      	str	r2, [r7, #84]	@ 0x54
 800c374:	4b2f      	ldr	r3, [pc, #188]	@ (800c434 <ms5607_get_press_temp+0x4b4>)
 800c376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800c37e:	4629      	mov	r1, r5
 800c380:	fb02 f001 	mul.w	r0, r2, r1
 800c384:	4621      	mov	r1, r4
 800c386:	fb01 f103 	mul.w	r1, r1, r3
 800c38a:	4401      	add	r1, r0
 800c38c:	4620      	mov	r0, r4
 800c38e:	fba0 2302 	umull	r2, r3, r0, r2
 800c392:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c396:	4613      	mov	r3, r2
 800c398:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c39c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c3a0:	18cb      	adds	r3, r1, r3
 800c3a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c3a6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	da07      	bge.n	800c3be <ms5607_get_press_temp+0x43e>
 800c3ae:	4923      	ldr	r1, [pc, #140]	@ (800c43c <ms5607_get_press_temp+0x4bc>)
 800c3b0:	1851      	adds	r1, r2, r1
 800c3b2:	60b9      	str	r1, [r7, #8]
 800c3b4:	f143 0300 	adc.w	r3, r3, #0
 800c3b8:	60fb      	str	r3, [r7, #12]
 800c3ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c3be:	f04f 0000 	mov.w	r0, #0
 800c3c2:	f04f 0100 	mov.w	r1, #0
 800c3c6:	0d50      	lsrs	r0, r2, #21
 800c3c8:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800c3cc:	1559      	asrs	r1, r3, #21
 800c3ce:	4b1c      	ldr	r3, [pc, #112]	@ (800c440 <ms5607_get_press_temp+0x4c0>)
 800c3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d4:	1a84      	subs	r4, r0, r2
 800c3d6:	64bc      	str	r4, [r7, #72]	@ 0x48
 800c3d8:	eb61 0303 	sbc.w	r3, r1, r3
 800c3dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	da08      	bge.n	800c3f8 <ms5607_get_press_temp+0x478>
 800c3e6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800c3ea:	1851      	adds	r1, r2, r1
 800c3ec:	6039      	str	r1, [r7, #0]
 800c3ee:	f143 0300 	adc.w	r3, r3, #0
 800c3f2:	607b      	str	r3, [r7, #4]
 800c3f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3f8:	f04f 0000 	mov.w	r0, #0
 800c3fc:	f04f 0100 	mov.w	r1, #0
 800c400:	0bd0      	lsrs	r0, r2, #15
 800c402:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 800c406:	13d9      	asrs	r1, r3, #15
 800c408:	4602      	mov	r2, r0
 800c40a:	460b      	mov	r3, r1
 800c40c:	4613      	mov	r3, r2
 800c40e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

  // in "centi-celsius" e.g. 2000 = 20.00 deg C
  *temperature = temp;
 800c412:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c416:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800c41a:	601a      	str	r2, [r3, #0]

  // in "centi-millibar" e.g. 110002 = 1100.02 mbar
  *pressure = press;
 800c41c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c424:	601a      	str	r2, [r3, #0]

  return 0;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c42e:	46bd      	mov	sp, r7
 800c430:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c434:	20000438 	.word	0x20000438
 800c438:	2000041c 	.word	0x2000041c
 800c43c:	001fffff 	.word	0x001fffff
 800c440:	20000430 	.word	0x20000430

0800c444 <read_prom>:

static int read_prom() {
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af02      	add	r7, sp, #8
  uint8_t buf[2] = {0, 0};
 800c44a:	2300      	movs	r3, #0
 800c44c:	80bb      	strh	r3, [r7, #4]

  uint8_t cmd = MS5607_READ_C1_CMD;
 800c44e:	23a2      	movs	r3, #162	@ 0xa2
 800c450:	70fb      	strb	r3, [r7, #3]
  if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, false) == -1)
 800c452:	4b91      	ldr	r3, [pc, #580]	@ (800c698 <read_prom+0x254>)
 800c454:	6818      	ldr	r0, [r3, #0]
 800c456:	1cfa      	adds	r2, r7, #3
 800c458:	2300      	movs	r3, #0
 800c45a:	9300      	str	r3, [sp, #0]
 800c45c:	2301      	movs	r3, #1
 800c45e:	2177      	movs	r1, #119	@ 0x77
 800c460:	f7ff fd38 	bl	800bed4 <i2c_write_blocking>
 800c464:	4603      	mov	r3, r0
 800c466:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c46a:	d102      	bne.n	800c472 <read_prom+0x2e>
    return -1;
 800c46c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c470:	e10e      	b.n	800c690 <read_prom+0x24c>
  LL_mDelay(20);
 800c472:	2014      	movs	r0, #20
 800c474:	f7f8 f9f8 	bl	8004868 <LL_mDelay>
  if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 2, false) == -1)
 800c478:	4b87      	ldr	r3, [pc, #540]	@ (800c698 <read_prom+0x254>)
 800c47a:	6818      	ldr	r0, [r3, #0]
 800c47c:	1d3a      	adds	r2, r7, #4
 800c47e:	2300      	movs	r3, #0
 800c480:	9300      	str	r3, [sp, #0]
 800c482:	2302      	movs	r3, #2
 800c484:	2177      	movs	r1, #119	@ 0x77
 800c486:	f7ff fce1 	bl	800be4c <i2c_read_blocking>
 800c48a:	4603      	mov	r3, r0
 800c48c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c490:	d102      	bne.n	800c498 <read_prom+0x54>
    return -1;
 800c492:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c496:	e0fb      	b.n	800c690 <read_prom+0x24c>
  c1 = ((uint16_t)buf[0] << 8) | buf[1];
 800c498:	793b      	ldrb	r3, [r7, #4]
 800c49a:	b21b      	sxth	r3, r3
 800c49c:	021b      	lsls	r3, r3, #8
 800c49e:	b21a      	sxth	r2, r3
 800c4a0:	797b      	ldrb	r3, [r7, #5]
 800c4a2:	b21b      	sxth	r3, r3
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	b21b      	sxth	r3, r3
 800c4a8:	b29a      	uxth	r2, r3
 800c4aa:	4b7c      	ldr	r3, [pc, #496]	@ (800c69c <read_prom+0x258>)
 800c4ac:	801a      	strh	r2, [r3, #0]

  cmd = MS5607_READ_C2_CMD;
 800c4ae:	23a4      	movs	r3, #164	@ 0xa4
 800c4b0:	70fb      	strb	r3, [r7, #3]
  if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, false) == -1)
 800c4b2:	4b79      	ldr	r3, [pc, #484]	@ (800c698 <read_prom+0x254>)
 800c4b4:	6818      	ldr	r0, [r3, #0]
 800c4b6:	1cfa      	adds	r2, r7, #3
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	9300      	str	r3, [sp, #0]
 800c4bc:	2301      	movs	r3, #1
 800c4be:	2177      	movs	r1, #119	@ 0x77
 800c4c0:	f7ff fd08 	bl	800bed4 <i2c_write_blocking>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c4ca:	d102      	bne.n	800c4d2 <read_prom+0x8e>
    return -1;
 800c4cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c4d0:	e0de      	b.n	800c690 <read_prom+0x24c>
  LL_mDelay(20);
 800c4d2:	2014      	movs	r0, #20
 800c4d4:	f7f8 f9c8 	bl	8004868 <LL_mDelay>
  if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 2, false) == -1)
 800c4d8:	4b6f      	ldr	r3, [pc, #444]	@ (800c698 <read_prom+0x254>)
 800c4da:	6818      	ldr	r0, [r3, #0]
 800c4dc:	1d3a      	adds	r2, r7, #4
 800c4de:	2300      	movs	r3, #0
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	2302      	movs	r3, #2
 800c4e4:	2177      	movs	r1, #119	@ 0x77
 800c4e6:	f7ff fcb1 	bl	800be4c <i2c_read_blocking>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c4f0:	d102      	bne.n	800c4f8 <read_prom+0xb4>
    return -1;
 800c4f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c4f6:	e0cb      	b.n	800c690 <read_prom+0x24c>
  c2 = ((uint16_t)buf[0] << 8) | buf[1];
 800c4f8:	793b      	ldrb	r3, [r7, #4]
 800c4fa:	b21b      	sxth	r3, r3
 800c4fc:	021b      	lsls	r3, r3, #8
 800c4fe:	b21a      	sxth	r2, r3
 800c500:	797b      	ldrb	r3, [r7, #5]
 800c502:	b21b      	sxth	r3, r3
 800c504:	4313      	orrs	r3, r2
 800c506:	b21b      	sxth	r3, r3
 800c508:	b29a      	uxth	r2, r3
 800c50a:	4b65      	ldr	r3, [pc, #404]	@ (800c6a0 <read_prom+0x25c>)
 800c50c:	801a      	strh	r2, [r3, #0]

  cmd = MS5607_READ_C3_CMD;
 800c50e:	23a6      	movs	r3, #166	@ 0xa6
 800c510:	70fb      	strb	r3, [r7, #3]
  if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, false) == -1)
 800c512:	4b61      	ldr	r3, [pc, #388]	@ (800c698 <read_prom+0x254>)
 800c514:	6818      	ldr	r0, [r3, #0]
 800c516:	1cfa      	adds	r2, r7, #3
 800c518:	2300      	movs	r3, #0
 800c51a:	9300      	str	r3, [sp, #0]
 800c51c:	2301      	movs	r3, #1
 800c51e:	2177      	movs	r1, #119	@ 0x77
 800c520:	f7ff fcd8 	bl	800bed4 <i2c_write_blocking>
 800c524:	4603      	mov	r3, r0
 800c526:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c52a:	d102      	bne.n	800c532 <read_prom+0xee>
    return -1;
 800c52c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c530:	e0ae      	b.n	800c690 <read_prom+0x24c>
  LL_mDelay(20);
 800c532:	2014      	movs	r0, #20
 800c534:	f7f8 f998 	bl	8004868 <LL_mDelay>
  if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 2, false) == -1)
 800c538:	4b57      	ldr	r3, [pc, #348]	@ (800c698 <read_prom+0x254>)
 800c53a:	6818      	ldr	r0, [r3, #0]
 800c53c:	1d3a      	adds	r2, r7, #4
 800c53e:	2300      	movs	r3, #0
 800c540:	9300      	str	r3, [sp, #0]
 800c542:	2302      	movs	r3, #2
 800c544:	2177      	movs	r1, #119	@ 0x77
 800c546:	f7ff fc81 	bl	800be4c <i2c_read_blocking>
 800c54a:	4603      	mov	r3, r0
 800c54c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c550:	d102      	bne.n	800c558 <read_prom+0x114>
    return -1;
 800c552:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c556:	e09b      	b.n	800c690 <read_prom+0x24c>
  c3 = ((uint16_t)buf[0] << 8) | buf[1];
 800c558:	793b      	ldrb	r3, [r7, #4]
 800c55a:	b21b      	sxth	r3, r3
 800c55c:	021b      	lsls	r3, r3, #8
 800c55e:	b21a      	sxth	r2, r3
 800c560:	797b      	ldrb	r3, [r7, #5]
 800c562:	b21b      	sxth	r3, r3
 800c564:	4313      	orrs	r3, r2
 800c566:	b21b      	sxth	r3, r3
 800c568:	b29a      	uxth	r2, r3
 800c56a:	4b4e      	ldr	r3, [pc, #312]	@ (800c6a4 <read_prom+0x260>)
 800c56c:	801a      	strh	r2, [r3, #0]

  cmd = MS5607_READ_C4_CMD;
 800c56e:	23a8      	movs	r3, #168	@ 0xa8
 800c570:	70fb      	strb	r3, [r7, #3]
  if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, false) == -1)
 800c572:	4b49      	ldr	r3, [pc, #292]	@ (800c698 <read_prom+0x254>)
 800c574:	6818      	ldr	r0, [r3, #0]
 800c576:	1cfa      	adds	r2, r7, #3
 800c578:	2300      	movs	r3, #0
 800c57a:	9300      	str	r3, [sp, #0]
 800c57c:	2301      	movs	r3, #1
 800c57e:	2177      	movs	r1, #119	@ 0x77
 800c580:	f7ff fca8 	bl	800bed4 <i2c_write_blocking>
 800c584:	4603      	mov	r3, r0
 800c586:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c58a:	d102      	bne.n	800c592 <read_prom+0x14e>
    return -1;
 800c58c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c590:	e07e      	b.n	800c690 <read_prom+0x24c>
  LL_mDelay(20);
 800c592:	2014      	movs	r0, #20
 800c594:	f7f8 f968 	bl	8004868 <LL_mDelay>
  if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 2, false) == -1)
 800c598:	4b3f      	ldr	r3, [pc, #252]	@ (800c698 <read_prom+0x254>)
 800c59a:	6818      	ldr	r0, [r3, #0]
 800c59c:	1d3a      	adds	r2, r7, #4
 800c59e:	2300      	movs	r3, #0
 800c5a0:	9300      	str	r3, [sp, #0]
 800c5a2:	2302      	movs	r3, #2
 800c5a4:	2177      	movs	r1, #119	@ 0x77
 800c5a6:	f7ff fc51 	bl	800be4c <i2c_read_blocking>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c5b0:	d102      	bne.n	800c5b8 <read_prom+0x174>
    return -1;
 800c5b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c5b6:	e06b      	b.n	800c690 <read_prom+0x24c>
  c4 = ((uint16_t)buf[0] << 8) | buf[1];
 800c5b8:	793b      	ldrb	r3, [r7, #4]
 800c5ba:	b21b      	sxth	r3, r3
 800c5bc:	021b      	lsls	r3, r3, #8
 800c5be:	b21a      	sxth	r2, r3
 800c5c0:	797b      	ldrb	r3, [r7, #5]
 800c5c2:	b21b      	sxth	r3, r3
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	b21b      	sxth	r3, r3
 800c5c8:	b29a      	uxth	r2, r3
 800c5ca:	4b37      	ldr	r3, [pc, #220]	@ (800c6a8 <read_prom+0x264>)
 800c5cc:	801a      	strh	r2, [r3, #0]

  cmd = MS5607_READ_C5_CMD;
 800c5ce:	23aa      	movs	r3, #170	@ 0xaa
 800c5d0:	70fb      	strb	r3, [r7, #3]
  if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, false) == -1)
 800c5d2:	4b31      	ldr	r3, [pc, #196]	@ (800c698 <read_prom+0x254>)
 800c5d4:	6818      	ldr	r0, [r3, #0]
 800c5d6:	1cfa      	adds	r2, r7, #3
 800c5d8:	2300      	movs	r3, #0
 800c5da:	9300      	str	r3, [sp, #0]
 800c5dc:	2301      	movs	r3, #1
 800c5de:	2177      	movs	r1, #119	@ 0x77
 800c5e0:	f7ff fc78 	bl	800bed4 <i2c_write_blocking>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c5ea:	d102      	bne.n	800c5f2 <read_prom+0x1ae>
    return -1;
 800c5ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c5f0:	e04e      	b.n	800c690 <read_prom+0x24c>
  LL_mDelay(20);
 800c5f2:	2014      	movs	r0, #20
 800c5f4:	f7f8 f938 	bl	8004868 <LL_mDelay>
  if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 2, false) == -1)
 800c5f8:	4b27      	ldr	r3, [pc, #156]	@ (800c698 <read_prom+0x254>)
 800c5fa:	6818      	ldr	r0, [r3, #0]
 800c5fc:	1d3a      	adds	r2, r7, #4
 800c5fe:	2300      	movs	r3, #0
 800c600:	9300      	str	r3, [sp, #0]
 800c602:	2302      	movs	r3, #2
 800c604:	2177      	movs	r1, #119	@ 0x77
 800c606:	f7ff fc21 	bl	800be4c <i2c_read_blocking>
 800c60a:	4603      	mov	r3, r0
 800c60c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c610:	d102      	bne.n	800c618 <read_prom+0x1d4>
    return -1;
 800c612:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c616:	e03b      	b.n	800c690 <read_prom+0x24c>
  c5 = ((uint16_t)buf[0] << 8) | buf[1];
 800c618:	793b      	ldrb	r3, [r7, #4]
 800c61a:	b21b      	sxth	r3, r3
 800c61c:	021b      	lsls	r3, r3, #8
 800c61e:	b21a      	sxth	r2, r3
 800c620:	797b      	ldrb	r3, [r7, #5]
 800c622:	b21b      	sxth	r3, r3
 800c624:	4313      	orrs	r3, r2
 800c626:	b21b      	sxth	r3, r3
 800c628:	b29a      	uxth	r2, r3
 800c62a:	4b20      	ldr	r3, [pc, #128]	@ (800c6ac <read_prom+0x268>)
 800c62c:	801a      	strh	r2, [r3, #0]

  cmd = MS5607_READ_C6_CMD;
 800c62e:	23ac      	movs	r3, #172	@ 0xac
 800c630:	70fb      	strb	r3, [r7, #3]
  if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, false) == -1)
 800c632:	4b19      	ldr	r3, [pc, #100]	@ (800c698 <read_prom+0x254>)
 800c634:	6818      	ldr	r0, [r3, #0]
 800c636:	1cfa      	adds	r2, r7, #3
 800c638:	2300      	movs	r3, #0
 800c63a:	9300      	str	r3, [sp, #0]
 800c63c:	2301      	movs	r3, #1
 800c63e:	2177      	movs	r1, #119	@ 0x77
 800c640:	f7ff fc48 	bl	800bed4 <i2c_write_blocking>
 800c644:	4603      	mov	r3, r0
 800c646:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c64a:	d102      	bne.n	800c652 <read_prom+0x20e>
    return -1;
 800c64c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c650:	e01e      	b.n	800c690 <read_prom+0x24c>
  LL_mDelay(20);
 800c652:	2014      	movs	r0, #20
 800c654:	f7f8 f908 	bl	8004868 <LL_mDelay>
  if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 2, false) == -1)
 800c658:	4b0f      	ldr	r3, [pc, #60]	@ (800c698 <read_prom+0x254>)
 800c65a:	6818      	ldr	r0, [r3, #0]
 800c65c:	1d3a      	adds	r2, r7, #4
 800c65e:	2300      	movs	r3, #0
 800c660:	9300      	str	r3, [sp, #0]
 800c662:	2302      	movs	r3, #2
 800c664:	2177      	movs	r1, #119	@ 0x77
 800c666:	f7ff fbf1 	bl	800be4c <i2c_read_blocking>
 800c66a:	4603      	mov	r3, r0
 800c66c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c670:	d102      	bne.n	800c678 <read_prom+0x234>
    return -1;
 800c672:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c676:	e00b      	b.n	800c690 <read_prom+0x24c>
  c6 = ((uint16_t)buf[0] << 8) | buf[1];
 800c678:	793b      	ldrb	r3, [r7, #4]
 800c67a:	b21b      	sxth	r3, r3
 800c67c:	021b      	lsls	r3, r3, #8
 800c67e:	b21a      	sxth	r2, r3
 800c680:	797b      	ldrb	r3, [r7, #5]
 800c682:	b21b      	sxth	r3, r3
 800c684:	4313      	orrs	r3, r2
 800c686:	b21b      	sxth	r3, r3
 800c688:	b29a      	uxth	r2, r3
 800c68a:	4b09      	ldr	r3, [pc, #36]	@ (800c6b0 <read_prom+0x26c>)
 800c68c:	801a      	strh	r2, [r3, #0]

  return 0;
 800c68e:	2300      	movs	r3, #0
}
 800c690:	4618      	mov	r0, r3
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	20000440 	.word	0x20000440
 800c69c:	20000410 	.word	0x20000410
 800c6a0:	20000412 	.word	0x20000412
 800c6a4:	20000414 	.word	0x20000414
 800c6a8:	20000416 	.word	0x20000416
 800c6ac:	20000418 	.word	0x20000418
 800c6b0:	2000041a 	.word	0x2000041a

0800c6b4 <conversion>:

static int conversion() {
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af02      	add	r7, sp, #8
  uint8_t buf[3] = {0, 0, 0};
 800c6ba:	1d3b      	adds	r3, r7, #4
 800c6bc:	2100      	movs	r1, #0
 800c6be:	460a      	mov	r2, r1
 800c6c0:	801a      	strh	r2, [r3, #0]
 800c6c2:	460a      	mov	r2, r1
 800c6c4:	709a      	strb	r2, [r3, #2]

  uint8_t cmd = MS5607_PRESS_CONV_CMD;
 800c6c6:	2348      	movs	r3, #72	@ 0x48
 800c6c8:	70fb      	strb	r3, [r7, #3]
  if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, false) == -1)
 800c6ca:	4b47      	ldr	r3, [pc, #284]	@ (800c7e8 <conversion+0x134>)
 800c6cc:	6818      	ldr	r0, [r3, #0]
 800c6ce:	1cfa      	adds	r2, r7, #3
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	9300      	str	r3, [sp, #0]
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	2177      	movs	r1, #119	@ 0x77
 800c6d8:	f7ff fbfc 	bl	800bed4 <i2c_write_blocking>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c6e2:	d102      	bne.n	800c6ea <conversion+0x36>
    return -1;
 800c6e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c6e8:	e07a      	b.n	800c7e0 <conversion+0x12c>
  LL_mDelay(20);
 800c6ea:	2014      	movs	r0, #20
 800c6ec:	f7f8 f8bc 	bl	8004868 <LL_mDelay>

  cmd = MS5607_READ_CMD;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	70fb      	strb	r3, [r7, #3]
  if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, false) == -1)
 800c6f4:	4b3c      	ldr	r3, [pc, #240]	@ (800c7e8 <conversion+0x134>)
 800c6f6:	6818      	ldr	r0, [r3, #0]
 800c6f8:	1cfa      	adds	r2, r7, #3
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	9300      	str	r3, [sp, #0]
 800c6fe:	2301      	movs	r3, #1
 800c700:	2177      	movs	r1, #119	@ 0x77
 800c702:	f7ff fbe7 	bl	800bed4 <i2c_write_blocking>
 800c706:	4603      	mov	r3, r0
 800c708:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c70c:	d102      	bne.n	800c714 <conversion+0x60>
    return -1;
 800c70e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c712:	e065      	b.n	800c7e0 <conversion+0x12c>
  LL_mDelay(20);
 800c714:	2014      	movs	r0, #20
 800c716:	f7f8 f8a7 	bl	8004868 <LL_mDelay>

  if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 3, false) == -1)
 800c71a:	4b33      	ldr	r3, [pc, #204]	@ (800c7e8 <conversion+0x134>)
 800c71c:	6818      	ldr	r0, [r3, #0]
 800c71e:	1d3a      	adds	r2, r7, #4
 800c720:	2300      	movs	r3, #0
 800c722:	9300      	str	r3, [sp, #0]
 800c724:	2303      	movs	r3, #3
 800c726:	2177      	movs	r1, #119	@ 0x77
 800c728:	f7ff fb90 	bl	800be4c <i2c_read_blocking>
 800c72c:	4603      	mov	r3, r0
 800c72e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c732:	d102      	bne.n	800c73a <conversion+0x86>
    return -1;
 800c734:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c738:	e052      	b.n	800c7e0 <conversion+0x12c>

  d1 = ((uint32_t)buf[0] << 16) | ((uint32_t)buf[1] << 8) | buf[2];
 800c73a:	793b      	ldrb	r3, [r7, #4]
 800c73c:	041a      	lsls	r2, r3, #16
 800c73e:	797b      	ldrb	r3, [r7, #5]
 800c740:	021b      	lsls	r3, r3, #8
 800c742:	4313      	orrs	r3, r2
 800c744:	79ba      	ldrb	r2, [r7, #6]
 800c746:	4313      	orrs	r3, r2
 800c748:	4a28      	ldr	r2, [pc, #160]	@ (800c7ec <conversion+0x138>)
 800c74a:	6013      	str	r3, [r2, #0]

  buf[0] = 0;
 800c74c:	2300      	movs	r3, #0
 800c74e:	713b      	strb	r3, [r7, #4]
  buf[1] = 0;
 800c750:	2300      	movs	r3, #0
 800c752:	717b      	strb	r3, [r7, #5]
  buf[2] = 0;
 800c754:	2300      	movs	r3, #0
 800c756:	71bb      	strb	r3, [r7, #6]

  cmd = MS5607_TEMP_CONV_CMD;
 800c758:	2358      	movs	r3, #88	@ 0x58
 800c75a:	70fb      	strb	r3, [r7, #3]
  if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, false) == -1)
 800c75c:	4b22      	ldr	r3, [pc, #136]	@ (800c7e8 <conversion+0x134>)
 800c75e:	6818      	ldr	r0, [r3, #0]
 800c760:	1cfa      	adds	r2, r7, #3
 800c762:	2300      	movs	r3, #0
 800c764:	9300      	str	r3, [sp, #0]
 800c766:	2301      	movs	r3, #1
 800c768:	2177      	movs	r1, #119	@ 0x77
 800c76a:	f7ff fbb3 	bl	800bed4 <i2c_write_blocking>
 800c76e:	4603      	mov	r3, r0
 800c770:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c774:	d102      	bne.n	800c77c <conversion+0xc8>
    return -1;
 800c776:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c77a:	e031      	b.n	800c7e0 <conversion+0x12c>
  LL_mDelay(20);
 800c77c:	2014      	movs	r0, #20
 800c77e:	f7f8 f873 	bl	8004868 <LL_mDelay>

  cmd = MS5607_READ_CMD;
 800c782:	2300      	movs	r3, #0
 800c784:	70fb      	strb	r3, [r7, #3]
  if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, false) == -1)
 800c786:	4b18      	ldr	r3, [pc, #96]	@ (800c7e8 <conversion+0x134>)
 800c788:	6818      	ldr	r0, [r3, #0]
 800c78a:	1cfa      	adds	r2, r7, #3
 800c78c:	2300      	movs	r3, #0
 800c78e:	9300      	str	r3, [sp, #0]
 800c790:	2301      	movs	r3, #1
 800c792:	2177      	movs	r1, #119	@ 0x77
 800c794:	f7ff fb9e 	bl	800bed4 <i2c_write_blocking>
 800c798:	4603      	mov	r3, r0
 800c79a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c79e:	d102      	bne.n	800c7a6 <conversion+0xf2>
    return -1;
 800c7a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c7a4:	e01c      	b.n	800c7e0 <conversion+0x12c>
  LL_mDelay(20);
 800c7a6:	2014      	movs	r0, #20
 800c7a8:	f7f8 f85e 	bl	8004868 <LL_mDelay>

  if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 3, false) == -1)
 800c7ac:	4b0e      	ldr	r3, [pc, #56]	@ (800c7e8 <conversion+0x134>)
 800c7ae:	6818      	ldr	r0, [r3, #0]
 800c7b0:	1d3a      	adds	r2, r7, #4
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	9300      	str	r3, [sp, #0]
 800c7b6:	2303      	movs	r3, #3
 800c7b8:	2177      	movs	r1, #119	@ 0x77
 800c7ba:	f7ff fb47 	bl	800be4c <i2c_read_blocking>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c7c4:	d102      	bne.n	800c7cc <conversion+0x118>
    return -1;
 800c7c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c7ca:	e009      	b.n	800c7e0 <conversion+0x12c>

  d2 = ((uint32_t)buf[0] << 16) | ((uint32_t)buf[1] << 8) | buf[2];
 800c7cc:	793b      	ldrb	r3, [r7, #4]
 800c7ce:	041a      	lsls	r2, r3, #16
 800c7d0:	797b      	ldrb	r3, [r7, #5]
 800c7d2:	021b      	lsls	r3, r3, #8
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	79ba      	ldrb	r2, [r7, #6]
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	4a05      	ldr	r2, [pc, #20]	@ (800c7f0 <conversion+0x13c>)
 800c7dc:	6013      	str	r3, [r2, #0]

  return 0;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	20000440 	.word	0x20000440
 800c7ec:	2000041c 	.word	0x2000041c
 800c7f0:	20000420 	.word	0x20000420

0800c7f4 <PIDController_Init>:
#include "PID.h"

#include <stdint.h>

void PIDController_Init(PIDController *pid) {
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]

  /* Clear controller variables */
  pid->integrator = 0;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	625a      	str	r2, [r3, #36]	@ 0x24
  pid->prevError = 0;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2200      	movs	r2, #0
 800c806:	629a      	str	r2, [r3, #40]	@ 0x28

  pid->differentiator = 0;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid->prevMeasurement = 0;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2200      	movs	r2, #0
 800c812:	631a      	str	r2, [r3, #48]	@ 0x30

  pid->out = 0;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800c81a:	bf00      	nop
 800c81c:	370c      	adds	r7, #12
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr
	...

0800c828 <PIDController_Update>:

int32_t PIDController_Update(PIDController *pid, int32_t setpoint,
                             int32_t measurement) {
 800c828:	b480      	push	{r7}
 800c82a:	b087      	sub	sp, #28
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]

  /*
   * Error signal
   */
  int32_t error = setpoint - measurement;
 800c834:	68ba      	ldr	r2, [r7, #8]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	1ad3      	subs	r3, r2, r3
 800c83a:	617b      	str	r3, [r7, #20]

  /*
   * Proportional
   */
  int32_t proportional = pid->Kp * error;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	fb02 f303 	mul.w	r3, r2, r3
 800c846:	613b      	str	r3, [r7, #16]

  /*
   * Integral
   */
  pid->integrator =
      pid->integrator +
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      ((pid->Ki * pid->T * (error + pid->prevError)) / (int32_t)100);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	68f9      	ldr	r1, [r7, #12]
 800c852:	6a09      	ldr	r1, [r1, #32]
 800c854:	fb01 f303 	mul.w	r3, r1, r3
 800c858:	68f9      	ldr	r1, [r7, #12]
 800c85a:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 800c85c:	6979      	ldr	r1, [r7, #20]
 800c85e:	4401      	add	r1, r0
 800c860:	fb01 f303 	mul.w	r3, r1, r3
 800c864:	4928      	ldr	r1, [pc, #160]	@ (800c908 <PIDController_Update+0xe0>)
 800c866:	fb81 0103 	smull	r0, r1, r1, r3
 800c86a:	1149      	asrs	r1, r1, #5
 800c86c:	17db      	asrs	r3, r3, #31
 800c86e:	1acb      	subs	r3, r1, r3
      pid->integrator +
 800c870:	441a      	add	r2, r3
  pid->integrator =
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Anti-wind-up via integrator clamping */
  if (pid->integrator > pid->limMaxInt) {
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	69db      	ldr	r3, [r3, #28]
 800c87e:	429a      	cmp	r2, r3
 800c880:	dd04      	ble.n	800c88c <PIDController_Update+0x64>

    pid->integrator = pid->limMaxInt;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	69da      	ldr	r2, [r3, #28]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	625a      	str	r2, [r3, #36]	@ 0x24
 800c88a:	e009      	b.n	800c8a0 <PIDController_Update+0x78>

  } else if (pid->integrator < pid->limMinInt) {
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	699b      	ldr	r3, [r3, #24]
 800c894:	429a      	cmp	r2, r3
 800c896:	da03      	bge.n	800c8a0 <PIDController_Update+0x78>

    pid->integrator = pid->limMinInt;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	699a      	ldr	r2, [r3, #24]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	625a      	str	r2, [r3, #36]	@ 0x24
        (2.0f * pid->tau + pid->T);
  */
  /*
   * Compute output and apply limits
   */
  pid->out = (proportional / 30) + (pid->integrator) + pid->differentiator;
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	4a1a      	ldr	r2, [pc, #104]	@ (800c90c <PIDController_Update+0xe4>)
 800c8a4:	fb82 1203 	smull	r1, r2, r2, r3
 800c8a8:	441a      	add	r2, r3
 800c8aa:	1112      	asrs	r2, r2, #4
 800c8ac:	17db      	asrs	r3, r3, #31
 800c8ae:	1ad2      	subs	r2, r2, r3
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8b4:	441a      	add	r2, r3
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8ba:	441a      	add	r2, r3
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	635a      	str	r2, [r3, #52]	@ 0x34

  if (pid->out > pid->limMax) {
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	695b      	ldr	r3, [r3, #20]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	dd04      	ble.n	800c8d6 <PIDController_Update+0xae>

    pid->out = pid->limMax;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	695a      	ldr	r2, [r3, #20]
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	635a      	str	r2, [r3, #52]	@ 0x34
 800c8d4:	e009      	b.n	800c8ea <PIDController_Update+0xc2>

  } else if (pid->out < pid->limMin) {
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	691b      	ldr	r3, [r3, #16]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	da03      	bge.n	800c8ea <PIDController_Update+0xc2>

    pid->out = pid->limMin;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	691a      	ldr	r2, [r3, #16]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Store error and measurement for later use */
  pid->prevError = error;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	697a      	ldr	r2, [r7, #20]
 800c8ee:	629a      	str	r2, [r3, #40]	@ 0x28
  pid->prevMeasurement = measurement;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Return controller output */
  return pid->out;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	371c      	adds	r7, #28
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop
 800c908:	51eb851f 	.word	0x51eb851f
 800c90c:	88888889 	.word	0x88888889

0800c910 <__assert_func>:
 800c910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c912:	4614      	mov	r4, r2
 800c914:	461a      	mov	r2, r3
 800c916:	4b09      	ldr	r3, [pc, #36]	@ (800c93c <__assert_func+0x2c>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4605      	mov	r5, r0
 800c91c:	68d8      	ldr	r0, [r3, #12]
 800c91e:	b14c      	cbz	r4, 800c934 <__assert_func+0x24>
 800c920:	4b07      	ldr	r3, [pc, #28]	@ (800c940 <__assert_func+0x30>)
 800c922:	9100      	str	r1, [sp, #0]
 800c924:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c928:	4906      	ldr	r1, [pc, #24]	@ (800c944 <__assert_func+0x34>)
 800c92a:	462b      	mov	r3, r5
 800c92c:	f000 fa16 	bl	800cd5c <fiprintf>
 800c930:	f000 fb40 	bl	800cfb4 <abort>
 800c934:	4b04      	ldr	r3, [pc, #16]	@ (800c948 <__assert_func+0x38>)
 800c936:	461c      	mov	r4, r3
 800c938:	e7f3      	b.n	800c922 <__assert_func+0x12>
 800c93a:	bf00      	nop
 800c93c:	20000034 	.word	0x20000034
 800c940:	0800f8d0 	.word	0x0800f8d0
 800c944:	0800f8dd 	.word	0x0800f8dd
 800c948:	0800f90b 	.word	0x0800f90b

0800c94c <exit>:
 800c94c:	b508      	push	{r3, lr}
 800c94e:	4b06      	ldr	r3, [pc, #24]	@ (800c968 <exit+0x1c>)
 800c950:	4604      	mov	r4, r0
 800c952:	b113      	cbz	r3, 800c95a <exit+0xe>
 800c954:	2100      	movs	r1, #0
 800c956:	f3af 8000 	nop.w
 800c95a:	4b04      	ldr	r3, [pc, #16]	@ (800c96c <exit+0x20>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	b103      	cbz	r3, 800c962 <exit+0x16>
 800c960:	4798      	blx	r3
 800c962:	4620      	mov	r0, r4
 800c964:	f7f4 fff8 	bl	8001958 <_exit>
 800c968:	00000000 	.word	0x00000000
 800c96c:	20000584 	.word	0x20000584

0800c970 <malloc>:
 800c970:	4b02      	ldr	r3, [pc, #8]	@ (800c97c <malloc+0xc>)
 800c972:	4601      	mov	r1, r0
 800c974:	6818      	ldr	r0, [r3, #0]
 800c976:	f000 b82d 	b.w	800c9d4 <_malloc_r>
 800c97a:	bf00      	nop
 800c97c:	20000034 	.word	0x20000034

0800c980 <free>:
 800c980:	4b02      	ldr	r3, [pc, #8]	@ (800c98c <free+0xc>)
 800c982:	4601      	mov	r1, r0
 800c984:	6818      	ldr	r0, [r3, #0]
 800c986:	f000 bb1d 	b.w	800cfc4 <_free_r>
 800c98a:	bf00      	nop
 800c98c:	20000034 	.word	0x20000034

0800c990 <sbrk_aligned>:
 800c990:	b570      	push	{r4, r5, r6, lr}
 800c992:	4e0f      	ldr	r6, [pc, #60]	@ (800c9d0 <sbrk_aligned+0x40>)
 800c994:	460c      	mov	r4, r1
 800c996:	6831      	ldr	r1, [r6, #0]
 800c998:	4605      	mov	r5, r0
 800c99a:	b911      	cbnz	r1, 800c9a2 <sbrk_aligned+0x12>
 800c99c:	f000 fa9c 	bl	800ced8 <_sbrk_r>
 800c9a0:	6030      	str	r0, [r6, #0]
 800c9a2:	4621      	mov	r1, r4
 800c9a4:	4628      	mov	r0, r5
 800c9a6:	f000 fa97 	bl	800ced8 <_sbrk_r>
 800c9aa:	1c43      	adds	r3, r0, #1
 800c9ac:	d103      	bne.n	800c9b6 <sbrk_aligned+0x26>
 800c9ae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	bd70      	pop	{r4, r5, r6, pc}
 800c9b6:	1cc4      	adds	r4, r0, #3
 800c9b8:	f024 0403 	bic.w	r4, r4, #3
 800c9bc:	42a0      	cmp	r0, r4
 800c9be:	d0f8      	beq.n	800c9b2 <sbrk_aligned+0x22>
 800c9c0:	1a21      	subs	r1, r4, r0
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	f000 fa88 	bl	800ced8 <_sbrk_r>
 800c9c8:	3001      	adds	r0, #1
 800c9ca:	d1f2      	bne.n	800c9b2 <sbrk_aligned+0x22>
 800c9cc:	e7ef      	b.n	800c9ae <sbrk_aligned+0x1e>
 800c9ce:	bf00      	nop
 800c9d0:	20000444 	.word	0x20000444

0800c9d4 <_malloc_r>:
 800c9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9d8:	1ccd      	adds	r5, r1, #3
 800c9da:	f025 0503 	bic.w	r5, r5, #3
 800c9de:	3508      	adds	r5, #8
 800c9e0:	2d0c      	cmp	r5, #12
 800c9e2:	bf38      	it	cc
 800c9e4:	250c      	movcc	r5, #12
 800c9e6:	2d00      	cmp	r5, #0
 800c9e8:	4606      	mov	r6, r0
 800c9ea:	db01      	blt.n	800c9f0 <_malloc_r+0x1c>
 800c9ec:	42a9      	cmp	r1, r5
 800c9ee:	d904      	bls.n	800c9fa <_malloc_r+0x26>
 800c9f0:	230c      	movs	r3, #12
 800c9f2:	6033      	str	r3, [r6, #0]
 800c9f4:	2000      	movs	r0, #0
 800c9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cad0 <_malloc_r+0xfc>
 800c9fe:	f000 f869 	bl	800cad4 <__malloc_lock>
 800ca02:	f8d8 3000 	ldr.w	r3, [r8]
 800ca06:	461c      	mov	r4, r3
 800ca08:	bb44      	cbnz	r4, 800ca5c <_malloc_r+0x88>
 800ca0a:	4629      	mov	r1, r5
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	f7ff ffbf 	bl	800c990 <sbrk_aligned>
 800ca12:	1c43      	adds	r3, r0, #1
 800ca14:	4604      	mov	r4, r0
 800ca16:	d158      	bne.n	800caca <_malloc_r+0xf6>
 800ca18:	f8d8 4000 	ldr.w	r4, [r8]
 800ca1c:	4627      	mov	r7, r4
 800ca1e:	2f00      	cmp	r7, #0
 800ca20:	d143      	bne.n	800caaa <_malloc_r+0xd6>
 800ca22:	2c00      	cmp	r4, #0
 800ca24:	d04b      	beq.n	800cabe <_malloc_r+0xea>
 800ca26:	6823      	ldr	r3, [r4, #0]
 800ca28:	4639      	mov	r1, r7
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	eb04 0903 	add.w	r9, r4, r3
 800ca30:	f000 fa52 	bl	800ced8 <_sbrk_r>
 800ca34:	4581      	cmp	r9, r0
 800ca36:	d142      	bne.n	800cabe <_malloc_r+0xea>
 800ca38:	6821      	ldr	r1, [r4, #0]
 800ca3a:	1a6d      	subs	r5, r5, r1
 800ca3c:	4629      	mov	r1, r5
 800ca3e:	4630      	mov	r0, r6
 800ca40:	f7ff ffa6 	bl	800c990 <sbrk_aligned>
 800ca44:	3001      	adds	r0, #1
 800ca46:	d03a      	beq.n	800cabe <_malloc_r+0xea>
 800ca48:	6823      	ldr	r3, [r4, #0]
 800ca4a:	442b      	add	r3, r5
 800ca4c:	6023      	str	r3, [r4, #0]
 800ca4e:	f8d8 3000 	ldr.w	r3, [r8]
 800ca52:	685a      	ldr	r2, [r3, #4]
 800ca54:	bb62      	cbnz	r2, 800cab0 <_malloc_r+0xdc>
 800ca56:	f8c8 7000 	str.w	r7, [r8]
 800ca5a:	e00f      	b.n	800ca7c <_malloc_r+0xa8>
 800ca5c:	6822      	ldr	r2, [r4, #0]
 800ca5e:	1b52      	subs	r2, r2, r5
 800ca60:	d420      	bmi.n	800caa4 <_malloc_r+0xd0>
 800ca62:	2a0b      	cmp	r2, #11
 800ca64:	d917      	bls.n	800ca96 <_malloc_r+0xc2>
 800ca66:	1961      	adds	r1, r4, r5
 800ca68:	42a3      	cmp	r3, r4
 800ca6a:	6025      	str	r5, [r4, #0]
 800ca6c:	bf18      	it	ne
 800ca6e:	6059      	strne	r1, [r3, #4]
 800ca70:	6863      	ldr	r3, [r4, #4]
 800ca72:	bf08      	it	eq
 800ca74:	f8c8 1000 	streq.w	r1, [r8]
 800ca78:	5162      	str	r2, [r4, r5]
 800ca7a:	604b      	str	r3, [r1, #4]
 800ca7c:	4630      	mov	r0, r6
 800ca7e:	f000 f82f 	bl	800cae0 <__malloc_unlock>
 800ca82:	f104 000b 	add.w	r0, r4, #11
 800ca86:	1d23      	adds	r3, r4, #4
 800ca88:	f020 0007 	bic.w	r0, r0, #7
 800ca8c:	1ac2      	subs	r2, r0, r3
 800ca8e:	bf1c      	itt	ne
 800ca90:	1a1b      	subne	r3, r3, r0
 800ca92:	50a3      	strne	r3, [r4, r2]
 800ca94:	e7af      	b.n	800c9f6 <_malloc_r+0x22>
 800ca96:	6862      	ldr	r2, [r4, #4]
 800ca98:	42a3      	cmp	r3, r4
 800ca9a:	bf0c      	ite	eq
 800ca9c:	f8c8 2000 	streq.w	r2, [r8]
 800caa0:	605a      	strne	r2, [r3, #4]
 800caa2:	e7eb      	b.n	800ca7c <_malloc_r+0xa8>
 800caa4:	4623      	mov	r3, r4
 800caa6:	6864      	ldr	r4, [r4, #4]
 800caa8:	e7ae      	b.n	800ca08 <_malloc_r+0x34>
 800caaa:	463c      	mov	r4, r7
 800caac:	687f      	ldr	r7, [r7, #4]
 800caae:	e7b6      	b.n	800ca1e <_malloc_r+0x4a>
 800cab0:	461a      	mov	r2, r3
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	42a3      	cmp	r3, r4
 800cab6:	d1fb      	bne.n	800cab0 <_malloc_r+0xdc>
 800cab8:	2300      	movs	r3, #0
 800caba:	6053      	str	r3, [r2, #4]
 800cabc:	e7de      	b.n	800ca7c <_malloc_r+0xa8>
 800cabe:	230c      	movs	r3, #12
 800cac0:	6033      	str	r3, [r6, #0]
 800cac2:	4630      	mov	r0, r6
 800cac4:	f000 f80c 	bl	800cae0 <__malloc_unlock>
 800cac8:	e794      	b.n	800c9f4 <_malloc_r+0x20>
 800caca:	6005      	str	r5, [r0, #0]
 800cacc:	e7d6      	b.n	800ca7c <_malloc_r+0xa8>
 800cace:	bf00      	nop
 800cad0:	20000448 	.word	0x20000448

0800cad4 <__malloc_lock>:
 800cad4:	4801      	ldr	r0, [pc, #4]	@ (800cadc <__malloc_lock+0x8>)
 800cad6:	f000 ba4c 	b.w	800cf72 <__retarget_lock_acquire_recursive>
 800cada:	bf00      	nop
 800cadc:	20000588 	.word	0x20000588

0800cae0 <__malloc_unlock>:
 800cae0:	4801      	ldr	r0, [pc, #4]	@ (800cae8 <__malloc_unlock+0x8>)
 800cae2:	f000 ba47 	b.w	800cf74 <__retarget_lock_release_recursive>
 800cae6:	bf00      	nop
 800cae8:	20000588 	.word	0x20000588

0800caec <siprintf>:
 800caec:	b40e      	push	{r1, r2, r3}
 800caee:	b510      	push	{r4, lr}
 800caf0:	b09d      	sub	sp, #116	@ 0x74
 800caf2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800caf4:	9002      	str	r0, [sp, #8]
 800caf6:	9006      	str	r0, [sp, #24]
 800caf8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cafc:	480a      	ldr	r0, [pc, #40]	@ (800cb28 <siprintf+0x3c>)
 800cafe:	9107      	str	r1, [sp, #28]
 800cb00:	9104      	str	r1, [sp, #16]
 800cb02:	490a      	ldr	r1, [pc, #40]	@ (800cb2c <siprintf+0x40>)
 800cb04:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb08:	9105      	str	r1, [sp, #20]
 800cb0a:	2400      	movs	r4, #0
 800cb0c:	a902      	add	r1, sp, #8
 800cb0e:	6800      	ldr	r0, [r0, #0]
 800cb10:	9301      	str	r3, [sp, #4]
 800cb12:	941b      	str	r4, [sp, #108]	@ 0x6c
 800cb14:	f000 fafc 	bl	800d110 <_svfiprintf_r>
 800cb18:	9b02      	ldr	r3, [sp, #8]
 800cb1a:	701c      	strb	r4, [r3, #0]
 800cb1c:	b01d      	add	sp, #116	@ 0x74
 800cb1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb22:	b003      	add	sp, #12
 800cb24:	4770      	bx	lr
 800cb26:	bf00      	nop
 800cb28:	20000034 	.word	0x20000034
 800cb2c:	ffff0208 	.word	0xffff0208

0800cb30 <siscanf>:
 800cb30:	b40e      	push	{r1, r2, r3}
 800cb32:	b570      	push	{r4, r5, r6, lr}
 800cb34:	b09d      	sub	sp, #116	@ 0x74
 800cb36:	ac21      	add	r4, sp, #132	@ 0x84
 800cb38:	2500      	movs	r5, #0
 800cb3a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800cb3e:	f854 6b04 	ldr.w	r6, [r4], #4
 800cb42:	f8ad 2014 	strh.w	r2, [sp, #20]
 800cb46:	951b      	str	r5, [sp, #108]	@ 0x6c
 800cb48:	9002      	str	r0, [sp, #8]
 800cb4a:	9006      	str	r0, [sp, #24]
 800cb4c:	f7f3 fb20 	bl	8000190 <strlen>
 800cb50:	4b0b      	ldr	r3, [pc, #44]	@ (800cb80 <siscanf+0x50>)
 800cb52:	9003      	str	r0, [sp, #12]
 800cb54:	9007      	str	r0, [sp, #28]
 800cb56:	480b      	ldr	r0, [pc, #44]	@ (800cb84 <siscanf+0x54>)
 800cb58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cb5e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cb62:	4632      	mov	r2, r6
 800cb64:	4623      	mov	r3, r4
 800cb66:	a902      	add	r1, sp, #8
 800cb68:	6800      	ldr	r0, [r0, #0]
 800cb6a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800cb6c:	9514      	str	r5, [sp, #80]	@ 0x50
 800cb6e:	9401      	str	r4, [sp, #4]
 800cb70:	f000 fc24 	bl	800d3bc <__ssvfiscanf_r>
 800cb74:	b01d      	add	sp, #116	@ 0x74
 800cb76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb7a:	b003      	add	sp, #12
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	0800cbab 	.word	0x0800cbab
 800cb84:	20000034 	.word	0x20000034

0800cb88 <__sread>:
 800cb88:	b510      	push	{r4, lr}
 800cb8a:	460c      	mov	r4, r1
 800cb8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb90:	f000 f990 	bl	800ceb4 <_read_r>
 800cb94:	2800      	cmp	r0, #0
 800cb96:	bfab      	itete	ge
 800cb98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cb9a:	89a3      	ldrhlt	r3, [r4, #12]
 800cb9c:	181b      	addge	r3, r3, r0
 800cb9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cba2:	bfac      	ite	ge
 800cba4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cba6:	81a3      	strhlt	r3, [r4, #12]
 800cba8:	bd10      	pop	{r4, pc}

0800cbaa <__seofread>:
 800cbaa:	2000      	movs	r0, #0
 800cbac:	4770      	bx	lr

0800cbae <__swrite>:
 800cbae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb2:	461f      	mov	r7, r3
 800cbb4:	898b      	ldrh	r3, [r1, #12]
 800cbb6:	05db      	lsls	r3, r3, #23
 800cbb8:	4605      	mov	r5, r0
 800cbba:	460c      	mov	r4, r1
 800cbbc:	4616      	mov	r6, r2
 800cbbe:	d505      	bpl.n	800cbcc <__swrite+0x1e>
 800cbc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbc4:	2302      	movs	r3, #2
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	f000 f962 	bl	800ce90 <_lseek_r>
 800cbcc:	89a3      	ldrh	r3, [r4, #12]
 800cbce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cbd6:	81a3      	strh	r3, [r4, #12]
 800cbd8:	4632      	mov	r2, r6
 800cbda:	463b      	mov	r3, r7
 800cbdc:	4628      	mov	r0, r5
 800cbde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe2:	f000 b989 	b.w	800cef8 <_write_r>

0800cbe6 <__sseek>:
 800cbe6:	b510      	push	{r4, lr}
 800cbe8:	460c      	mov	r4, r1
 800cbea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbee:	f000 f94f 	bl	800ce90 <_lseek_r>
 800cbf2:	1c43      	adds	r3, r0, #1
 800cbf4:	89a3      	ldrh	r3, [r4, #12]
 800cbf6:	bf15      	itete	ne
 800cbf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cbfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cbfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cc02:	81a3      	strheq	r3, [r4, #12]
 800cc04:	bf18      	it	ne
 800cc06:	81a3      	strhne	r3, [r4, #12]
 800cc08:	bd10      	pop	{r4, pc}

0800cc0a <__sclose>:
 800cc0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc0e:	f000 b9b3 	b.w	800cf78 <_close_r>
	...

0800cc14 <std>:
 800cc14:	2300      	movs	r3, #0
 800cc16:	b510      	push	{r4, lr}
 800cc18:	4604      	mov	r4, r0
 800cc1a:	e9c0 3300 	strd	r3, r3, [r0]
 800cc1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc22:	6083      	str	r3, [r0, #8]
 800cc24:	8181      	strh	r1, [r0, #12]
 800cc26:	6643      	str	r3, [r0, #100]	@ 0x64
 800cc28:	81c2      	strh	r2, [r0, #14]
 800cc2a:	6183      	str	r3, [r0, #24]
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	2208      	movs	r2, #8
 800cc30:	305c      	adds	r0, #92	@ 0x5c
 800cc32:	f000 f8e5 	bl	800ce00 <memset>
 800cc36:	4b0d      	ldr	r3, [pc, #52]	@ (800cc6c <std+0x58>)
 800cc38:	6263      	str	r3, [r4, #36]	@ 0x24
 800cc3a:	4b0d      	ldr	r3, [pc, #52]	@ (800cc70 <std+0x5c>)
 800cc3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cc3e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc74 <std+0x60>)
 800cc40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cc42:	4b0d      	ldr	r3, [pc, #52]	@ (800cc78 <std+0x64>)
 800cc44:	6323      	str	r3, [r4, #48]	@ 0x30
 800cc46:	4b0d      	ldr	r3, [pc, #52]	@ (800cc7c <std+0x68>)
 800cc48:	6224      	str	r4, [r4, #32]
 800cc4a:	429c      	cmp	r4, r3
 800cc4c:	d006      	beq.n	800cc5c <std+0x48>
 800cc4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cc52:	4294      	cmp	r4, r2
 800cc54:	d002      	beq.n	800cc5c <std+0x48>
 800cc56:	33d0      	adds	r3, #208	@ 0xd0
 800cc58:	429c      	cmp	r4, r3
 800cc5a:	d105      	bne.n	800cc68 <std+0x54>
 800cc5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cc60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc64:	f000 b984 	b.w	800cf70 <__retarget_lock_init_recursive>
 800cc68:	bd10      	pop	{r4, pc}
 800cc6a:	bf00      	nop
 800cc6c:	0800cb89 	.word	0x0800cb89
 800cc70:	0800cbaf 	.word	0x0800cbaf
 800cc74:	0800cbe7 	.word	0x0800cbe7
 800cc78:	0800cc0b 	.word	0x0800cc0b
 800cc7c:	2000044c 	.word	0x2000044c

0800cc80 <stdio_exit_handler>:
 800cc80:	4a02      	ldr	r2, [pc, #8]	@ (800cc8c <stdio_exit_handler+0xc>)
 800cc82:	4903      	ldr	r1, [pc, #12]	@ (800cc90 <stdio_exit_handler+0x10>)
 800cc84:	4803      	ldr	r0, [pc, #12]	@ (800cc94 <stdio_exit_handler+0x14>)
 800cc86:	f000 b87b 	b.w	800cd80 <_fwalk_sglue>
 800cc8a:	bf00      	nop
 800cc8c:	20000028 	.word	0x20000028
 800cc90:	0800e05d 	.word	0x0800e05d
 800cc94:	20000038 	.word	0x20000038

0800cc98 <cleanup_stdio>:
 800cc98:	6841      	ldr	r1, [r0, #4]
 800cc9a:	4b0c      	ldr	r3, [pc, #48]	@ (800cccc <cleanup_stdio+0x34>)
 800cc9c:	4299      	cmp	r1, r3
 800cc9e:	b510      	push	{r4, lr}
 800cca0:	4604      	mov	r4, r0
 800cca2:	d001      	beq.n	800cca8 <cleanup_stdio+0x10>
 800cca4:	f001 f9da 	bl	800e05c <_fflush_r>
 800cca8:	68a1      	ldr	r1, [r4, #8]
 800ccaa:	4b09      	ldr	r3, [pc, #36]	@ (800ccd0 <cleanup_stdio+0x38>)
 800ccac:	4299      	cmp	r1, r3
 800ccae:	d002      	beq.n	800ccb6 <cleanup_stdio+0x1e>
 800ccb0:	4620      	mov	r0, r4
 800ccb2:	f001 f9d3 	bl	800e05c <_fflush_r>
 800ccb6:	68e1      	ldr	r1, [r4, #12]
 800ccb8:	4b06      	ldr	r3, [pc, #24]	@ (800ccd4 <cleanup_stdio+0x3c>)
 800ccba:	4299      	cmp	r1, r3
 800ccbc:	d004      	beq.n	800ccc8 <cleanup_stdio+0x30>
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccc4:	f001 b9ca 	b.w	800e05c <_fflush_r>
 800ccc8:	bd10      	pop	{r4, pc}
 800ccca:	bf00      	nop
 800cccc:	2000044c 	.word	0x2000044c
 800ccd0:	200004b4 	.word	0x200004b4
 800ccd4:	2000051c 	.word	0x2000051c

0800ccd8 <global_stdio_init.part.0>:
 800ccd8:	b510      	push	{r4, lr}
 800ccda:	4b0b      	ldr	r3, [pc, #44]	@ (800cd08 <global_stdio_init.part.0+0x30>)
 800ccdc:	4c0b      	ldr	r4, [pc, #44]	@ (800cd0c <global_stdio_init.part.0+0x34>)
 800ccde:	4a0c      	ldr	r2, [pc, #48]	@ (800cd10 <global_stdio_init.part.0+0x38>)
 800cce0:	601a      	str	r2, [r3, #0]
 800cce2:	4620      	mov	r0, r4
 800cce4:	2200      	movs	r2, #0
 800cce6:	2104      	movs	r1, #4
 800cce8:	f7ff ff94 	bl	800cc14 <std>
 800ccec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	2109      	movs	r1, #9
 800ccf4:	f7ff ff8e 	bl	800cc14 <std>
 800ccf8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ccfc:	2202      	movs	r2, #2
 800ccfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd02:	2112      	movs	r1, #18
 800cd04:	f7ff bf86 	b.w	800cc14 <std>
 800cd08:	20000584 	.word	0x20000584
 800cd0c:	2000044c 	.word	0x2000044c
 800cd10:	0800cc81 	.word	0x0800cc81

0800cd14 <__sfp_lock_acquire>:
 800cd14:	4801      	ldr	r0, [pc, #4]	@ (800cd1c <__sfp_lock_acquire+0x8>)
 800cd16:	f000 b92c 	b.w	800cf72 <__retarget_lock_acquire_recursive>
 800cd1a:	bf00      	nop
 800cd1c:	20000589 	.word	0x20000589

0800cd20 <__sfp_lock_release>:
 800cd20:	4801      	ldr	r0, [pc, #4]	@ (800cd28 <__sfp_lock_release+0x8>)
 800cd22:	f000 b927 	b.w	800cf74 <__retarget_lock_release_recursive>
 800cd26:	bf00      	nop
 800cd28:	20000589 	.word	0x20000589

0800cd2c <__sinit>:
 800cd2c:	b510      	push	{r4, lr}
 800cd2e:	4604      	mov	r4, r0
 800cd30:	f7ff fff0 	bl	800cd14 <__sfp_lock_acquire>
 800cd34:	6a23      	ldr	r3, [r4, #32]
 800cd36:	b11b      	cbz	r3, 800cd40 <__sinit+0x14>
 800cd38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd3c:	f7ff bff0 	b.w	800cd20 <__sfp_lock_release>
 800cd40:	4b04      	ldr	r3, [pc, #16]	@ (800cd54 <__sinit+0x28>)
 800cd42:	6223      	str	r3, [r4, #32]
 800cd44:	4b04      	ldr	r3, [pc, #16]	@ (800cd58 <__sinit+0x2c>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d1f5      	bne.n	800cd38 <__sinit+0xc>
 800cd4c:	f7ff ffc4 	bl	800ccd8 <global_stdio_init.part.0>
 800cd50:	e7f2      	b.n	800cd38 <__sinit+0xc>
 800cd52:	bf00      	nop
 800cd54:	0800cc99 	.word	0x0800cc99
 800cd58:	20000584 	.word	0x20000584

0800cd5c <fiprintf>:
 800cd5c:	b40e      	push	{r1, r2, r3}
 800cd5e:	b503      	push	{r0, r1, lr}
 800cd60:	4601      	mov	r1, r0
 800cd62:	ab03      	add	r3, sp, #12
 800cd64:	4805      	ldr	r0, [pc, #20]	@ (800cd7c <fiprintf+0x20>)
 800cd66:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd6a:	6800      	ldr	r0, [r0, #0]
 800cd6c:	9301      	str	r3, [sp, #4]
 800cd6e:	f000 fcc5 	bl	800d6fc <_vfiprintf_r>
 800cd72:	b002      	add	sp, #8
 800cd74:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd78:	b003      	add	sp, #12
 800cd7a:	4770      	bx	lr
 800cd7c:	20000034 	.word	0x20000034

0800cd80 <_fwalk_sglue>:
 800cd80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd84:	4607      	mov	r7, r0
 800cd86:	4688      	mov	r8, r1
 800cd88:	4614      	mov	r4, r2
 800cd8a:	2600      	movs	r6, #0
 800cd8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd90:	f1b9 0901 	subs.w	r9, r9, #1
 800cd94:	d505      	bpl.n	800cda2 <_fwalk_sglue+0x22>
 800cd96:	6824      	ldr	r4, [r4, #0]
 800cd98:	2c00      	cmp	r4, #0
 800cd9a:	d1f7      	bne.n	800cd8c <_fwalk_sglue+0xc>
 800cd9c:	4630      	mov	r0, r6
 800cd9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cda2:	89ab      	ldrh	r3, [r5, #12]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d907      	bls.n	800cdb8 <_fwalk_sglue+0x38>
 800cda8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdac:	3301      	adds	r3, #1
 800cdae:	d003      	beq.n	800cdb8 <_fwalk_sglue+0x38>
 800cdb0:	4629      	mov	r1, r5
 800cdb2:	4638      	mov	r0, r7
 800cdb4:	47c0      	blx	r8
 800cdb6:	4306      	orrs	r6, r0
 800cdb8:	3568      	adds	r5, #104	@ 0x68
 800cdba:	e7e9      	b.n	800cd90 <_fwalk_sglue+0x10>

0800cdbc <iprintf>:
 800cdbc:	b40f      	push	{r0, r1, r2, r3}
 800cdbe:	b507      	push	{r0, r1, r2, lr}
 800cdc0:	4906      	ldr	r1, [pc, #24]	@ (800cddc <iprintf+0x20>)
 800cdc2:	ab04      	add	r3, sp, #16
 800cdc4:	6808      	ldr	r0, [r1, #0]
 800cdc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdca:	6881      	ldr	r1, [r0, #8]
 800cdcc:	9301      	str	r3, [sp, #4]
 800cdce:	f000 fc95 	bl	800d6fc <_vfiprintf_r>
 800cdd2:	b003      	add	sp, #12
 800cdd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdd8:	b004      	add	sp, #16
 800cdda:	4770      	bx	lr
 800cddc:	20000034 	.word	0x20000034

0800cde0 <memcmp>:
 800cde0:	b510      	push	{r4, lr}
 800cde2:	3901      	subs	r1, #1
 800cde4:	4402      	add	r2, r0
 800cde6:	4290      	cmp	r0, r2
 800cde8:	d101      	bne.n	800cdee <memcmp+0xe>
 800cdea:	2000      	movs	r0, #0
 800cdec:	e005      	b.n	800cdfa <memcmp+0x1a>
 800cdee:	7803      	ldrb	r3, [r0, #0]
 800cdf0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cdf4:	42a3      	cmp	r3, r4
 800cdf6:	d001      	beq.n	800cdfc <memcmp+0x1c>
 800cdf8:	1b18      	subs	r0, r3, r4
 800cdfa:	bd10      	pop	{r4, pc}
 800cdfc:	3001      	adds	r0, #1
 800cdfe:	e7f2      	b.n	800cde6 <memcmp+0x6>

0800ce00 <memset>:
 800ce00:	4402      	add	r2, r0
 800ce02:	4603      	mov	r3, r0
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d100      	bne.n	800ce0a <memset+0xa>
 800ce08:	4770      	bx	lr
 800ce0a:	f803 1b01 	strb.w	r1, [r3], #1
 800ce0e:	e7f9      	b.n	800ce04 <memset+0x4>

0800ce10 <strchr>:
 800ce10:	b2c9      	uxtb	r1, r1
 800ce12:	4603      	mov	r3, r0
 800ce14:	4618      	mov	r0, r3
 800ce16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce1a:	b112      	cbz	r2, 800ce22 <strchr+0x12>
 800ce1c:	428a      	cmp	r2, r1
 800ce1e:	d1f9      	bne.n	800ce14 <strchr+0x4>
 800ce20:	4770      	bx	lr
 800ce22:	2900      	cmp	r1, #0
 800ce24:	bf18      	it	ne
 800ce26:	2000      	movne	r0, #0
 800ce28:	4770      	bx	lr

0800ce2a <strcspn>:
 800ce2a:	b570      	push	{r4, r5, r6, lr}
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	461e      	mov	r6, r3
 800ce30:	f813 4b01 	ldrb.w	r4, [r3], #1
 800ce34:	b144      	cbz	r4, 800ce48 <strcspn+0x1e>
 800ce36:	1e4a      	subs	r2, r1, #1
 800ce38:	e001      	b.n	800ce3e <strcspn+0x14>
 800ce3a:	42a5      	cmp	r5, r4
 800ce3c:	d004      	beq.n	800ce48 <strcspn+0x1e>
 800ce3e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800ce42:	2d00      	cmp	r5, #0
 800ce44:	d1f9      	bne.n	800ce3a <strcspn+0x10>
 800ce46:	e7f2      	b.n	800ce2e <strcspn+0x4>
 800ce48:	1a30      	subs	r0, r6, r0
 800ce4a:	bd70      	pop	{r4, r5, r6, pc}

0800ce4c <strncmp>:
 800ce4c:	b510      	push	{r4, lr}
 800ce4e:	b16a      	cbz	r2, 800ce6c <strncmp+0x20>
 800ce50:	3901      	subs	r1, #1
 800ce52:	1884      	adds	r4, r0, r2
 800ce54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce58:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d103      	bne.n	800ce68 <strncmp+0x1c>
 800ce60:	42a0      	cmp	r0, r4
 800ce62:	d001      	beq.n	800ce68 <strncmp+0x1c>
 800ce64:	2a00      	cmp	r2, #0
 800ce66:	d1f5      	bne.n	800ce54 <strncmp+0x8>
 800ce68:	1ad0      	subs	r0, r2, r3
 800ce6a:	bd10      	pop	{r4, pc}
 800ce6c:	4610      	mov	r0, r2
 800ce6e:	e7fc      	b.n	800ce6a <strncmp+0x1e>

0800ce70 <strspn>:
 800ce70:	b570      	push	{r4, r5, r6, lr}
 800ce72:	4603      	mov	r3, r0
 800ce74:	461e      	mov	r6, r3
 800ce76:	f813 4b01 	ldrb.w	r4, [r3], #1
 800ce7a:	b13c      	cbz	r4, 800ce8c <strspn+0x1c>
 800ce7c:	1e4a      	subs	r2, r1, #1
 800ce7e:	e001      	b.n	800ce84 <strspn+0x14>
 800ce80:	42a5      	cmp	r5, r4
 800ce82:	d0f7      	beq.n	800ce74 <strspn+0x4>
 800ce84:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800ce88:	2d00      	cmp	r5, #0
 800ce8a:	d1f9      	bne.n	800ce80 <strspn+0x10>
 800ce8c:	1a30      	subs	r0, r6, r0
 800ce8e:	bd70      	pop	{r4, r5, r6, pc}

0800ce90 <_lseek_r>:
 800ce90:	b538      	push	{r3, r4, r5, lr}
 800ce92:	4d07      	ldr	r5, [pc, #28]	@ (800ceb0 <_lseek_r+0x20>)
 800ce94:	4604      	mov	r4, r0
 800ce96:	4608      	mov	r0, r1
 800ce98:	4611      	mov	r1, r2
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	602a      	str	r2, [r5, #0]
 800ce9e:	461a      	mov	r2, r3
 800cea0:	f7f4 fdc5 	bl	8001a2e <_lseek>
 800cea4:	1c43      	adds	r3, r0, #1
 800cea6:	d102      	bne.n	800ceae <_lseek_r+0x1e>
 800cea8:	682b      	ldr	r3, [r5, #0]
 800ceaa:	b103      	cbz	r3, 800ceae <_lseek_r+0x1e>
 800ceac:	6023      	str	r3, [r4, #0]
 800ceae:	bd38      	pop	{r3, r4, r5, pc}
 800ceb0:	2000058c 	.word	0x2000058c

0800ceb4 <_read_r>:
 800ceb4:	b538      	push	{r3, r4, r5, lr}
 800ceb6:	4d07      	ldr	r5, [pc, #28]	@ (800ced4 <_read_r+0x20>)
 800ceb8:	4604      	mov	r4, r0
 800ceba:	4608      	mov	r0, r1
 800cebc:	4611      	mov	r1, r2
 800cebe:	2200      	movs	r2, #0
 800cec0:	602a      	str	r2, [r5, #0]
 800cec2:	461a      	mov	r2, r3
 800cec4:	f7f4 fd53 	bl	800196e <_read>
 800cec8:	1c43      	adds	r3, r0, #1
 800ceca:	d102      	bne.n	800ced2 <_read_r+0x1e>
 800cecc:	682b      	ldr	r3, [r5, #0]
 800cece:	b103      	cbz	r3, 800ced2 <_read_r+0x1e>
 800ced0:	6023      	str	r3, [r4, #0]
 800ced2:	bd38      	pop	{r3, r4, r5, pc}
 800ced4:	2000058c 	.word	0x2000058c

0800ced8 <_sbrk_r>:
 800ced8:	b538      	push	{r3, r4, r5, lr}
 800ceda:	4d06      	ldr	r5, [pc, #24]	@ (800cef4 <_sbrk_r+0x1c>)
 800cedc:	2300      	movs	r3, #0
 800cede:	4604      	mov	r4, r0
 800cee0:	4608      	mov	r0, r1
 800cee2:	602b      	str	r3, [r5, #0]
 800cee4:	f7f4 fdb0 	bl	8001a48 <_sbrk>
 800cee8:	1c43      	adds	r3, r0, #1
 800ceea:	d102      	bne.n	800cef2 <_sbrk_r+0x1a>
 800ceec:	682b      	ldr	r3, [r5, #0]
 800ceee:	b103      	cbz	r3, 800cef2 <_sbrk_r+0x1a>
 800cef0:	6023      	str	r3, [r4, #0]
 800cef2:	bd38      	pop	{r3, r4, r5, pc}
 800cef4:	2000058c 	.word	0x2000058c

0800cef8 <_write_r>:
 800cef8:	b538      	push	{r3, r4, r5, lr}
 800cefa:	4d07      	ldr	r5, [pc, #28]	@ (800cf18 <_write_r+0x20>)
 800cefc:	4604      	mov	r4, r0
 800cefe:	4608      	mov	r0, r1
 800cf00:	4611      	mov	r1, r2
 800cf02:	2200      	movs	r2, #0
 800cf04:	602a      	str	r2, [r5, #0]
 800cf06:	461a      	mov	r2, r3
 800cf08:	f7f4 fd4e 	bl	80019a8 <_write>
 800cf0c:	1c43      	adds	r3, r0, #1
 800cf0e:	d102      	bne.n	800cf16 <_write_r+0x1e>
 800cf10:	682b      	ldr	r3, [r5, #0]
 800cf12:	b103      	cbz	r3, 800cf16 <_write_r+0x1e>
 800cf14:	6023      	str	r3, [r4, #0]
 800cf16:	bd38      	pop	{r3, r4, r5, pc}
 800cf18:	2000058c 	.word	0x2000058c

0800cf1c <__errno>:
 800cf1c:	4b01      	ldr	r3, [pc, #4]	@ (800cf24 <__errno+0x8>)
 800cf1e:	6818      	ldr	r0, [r3, #0]
 800cf20:	4770      	bx	lr
 800cf22:	bf00      	nop
 800cf24:	20000034 	.word	0x20000034

0800cf28 <__libc_init_array>:
 800cf28:	b570      	push	{r4, r5, r6, lr}
 800cf2a:	4d0d      	ldr	r5, [pc, #52]	@ (800cf60 <__libc_init_array+0x38>)
 800cf2c:	4c0d      	ldr	r4, [pc, #52]	@ (800cf64 <__libc_init_array+0x3c>)
 800cf2e:	1b64      	subs	r4, r4, r5
 800cf30:	10a4      	asrs	r4, r4, #2
 800cf32:	2600      	movs	r6, #0
 800cf34:	42a6      	cmp	r6, r4
 800cf36:	d109      	bne.n	800cf4c <__libc_init_array+0x24>
 800cf38:	4d0b      	ldr	r5, [pc, #44]	@ (800cf68 <__libc_init_array+0x40>)
 800cf3a:	4c0c      	ldr	r4, [pc, #48]	@ (800cf6c <__libc_init_array+0x44>)
 800cf3c:	f001 fb9c 	bl	800e678 <_init>
 800cf40:	1b64      	subs	r4, r4, r5
 800cf42:	10a4      	asrs	r4, r4, #2
 800cf44:	2600      	movs	r6, #0
 800cf46:	42a6      	cmp	r6, r4
 800cf48:	d105      	bne.n	800cf56 <__libc_init_array+0x2e>
 800cf4a:	bd70      	pop	{r4, r5, r6, pc}
 800cf4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf50:	4798      	blx	r3
 800cf52:	3601      	adds	r6, #1
 800cf54:	e7ee      	b.n	800cf34 <__libc_init_array+0xc>
 800cf56:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf5a:	4798      	blx	r3
 800cf5c:	3601      	adds	r6, #1
 800cf5e:	e7f2      	b.n	800cf46 <__libc_init_array+0x1e>
 800cf60:	0800fa64 	.word	0x0800fa64
 800cf64:	0800fa64 	.word	0x0800fa64
 800cf68:	0800fa64 	.word	0x0800fa64
 800cf6c:	0800fa68 	.word	0x0800fa68

0800cf70 <__retarget_lock_init_recursive>:
 800cf70:	4770      	bx	lr

0800cf72 <__retarget_lock_acquire_recursive>:
 800cf72:	4770      	bx	lr

0800cf74 <__retarget_lock_release_recursive>:
 800cf74:	4770      	bx	lr
	...

0800cf78 <_close_r>:
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	4d06      	ldr	r5, [pc, #24]	@ (800cf94 <_close_r+0x1c>)
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	4604      	mov	r4, r0
 800cf80:	4608      	mov	r0, r1
 800cf82:	602b      	str	r3, [r5, #0]
 800cf84:	f7f4 fd2c 	bl	80019e0 <_close>
 800cf88:	1c43      	adds	r3, r0, #1
 800cf8a:	d102      	bne.n	800cf92 <_close_r+0x1a>
 800cf8c:	682b      	ldr	r3, [r5, #0]
 800cf8e:	b103      	cbz	r3, 800cf92 <_close_r+0x1a>
 800cf90:	6023      	str	r3, [r4, #0]
 800cf92:	bd38      	pop	{r3, r4, r5, pc}
 800cf94:	2000058c 	.word	0x2000058c

0800cf98 <memcpy>:
 800cf98:	440a      	add	r2, r1
 800cf9a:	4291      	cmp	r1, r2
 800cf9c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800cfa0:	d100      	bne.n	800cfa4 <memcpy+0xc>
 800cfa2:	4770      	bx	lr
 800cfa4:	b510      	push	{r4, lr}
 800cfa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfae:	4291      	cmp	r1, r2
 800cfb0:	d1f9      	bne.n	800cfa6 <memcpy+0xe>
 800cfb2:	bd10      	pop	{r4, pc}

0800cfb4 <abort>:
 800cfb4:	b508      	push	{r3, lr}
 800cfb6:	2006      	movs	r0, #6
 800cfb8:	f001 fb04 	bl	800e5c4 <raise>
 800cfbc:	2001      	movs	r0, #1
 800cfbe:	f7f4 fccb 	bl	8001958 <_exit>
	...

0800cfc4 <_free_r>:
 800cfc4:	b538      	push	{r3, r4, r5, lr}
 800cfc6:	4605      	mov	r5, r0
 800cfc8:	2900      	cmp	r1, #0
 800cfca:	d041      	beq.n	800d050 <_free_r+0x8c>
 800cfcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfd0:	1f0c      	subs	r4, r1, #4
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	bfb8      	it	lt
 800cfd6:	18e4      	addlt	r4, r4, r3
 800cfd8:	f7ff fd7c 	bl	800cad4 <__malloc_lock>
 800cfdc:	4a1d      	ldr	r2, [pc, #116]	@ (800d054 <_free_r+0x90>)
 800cfde:	6813      	ldr	r3, [r2, #0]
 800cfe0:	b933      	cbnz	r3, 800cff0 <_free_r+0x2c>
 800cfe2:	6063      	str	r3, [r4, #4]
 800cfe4:	6014      	str	r4, [r2, #0]
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfec:	f7ff bd78 	b.w	800cae0 <__malloc_unlock>
 800cff0:	42a3      	cmp	r3, r4
 800cff2:	d908      	bls.n	800d006 <_free_r+0x42>
 800cff4:	6820      	ldr	r0, [r4, #0]
 800cff6:	1821      	adds	r1, r4, r0
 800cff8:	428b      	cmp	r3, r1
 800cffa:	bf01      	itttt	eq
 800cffc:	6819      	ldreq	r1, [r3, #0]
 800cffe:	685b      	ldreq	r3, [r3, #4]
 800d000:	1809      	addeq	r1, r1, r0
 800d002:	6021      	streq	r1, [r4, #0]
 800d004:	e7ed      	b.n	800cfe2 <_free_r+0x1e>
 800d006:	461a      	mov	r2, r3
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	b10b      	cbz	r3, 800d010 <_free_r+0x4c>
 800d00c:	42a3      	cmp	r3, r4
 800d00e:	d9fa      	bls.n	800d006 <_free_r+0x42>
 800d010:	6811      	ldr	r1, [r2, #0]
 800d012:	1850      	adds	r0, r2, r1
 800d014:	42a0      	cmp	r0, r4
 800d016:	d10b      	bne.n	800d030 <_free_r+0x6c>
 800d018:	6820      	ldr	r0, [r4, #0]
 800d01a:	4401      	add	r1, r0
 800d01c:	1850      	adds	r0, r2, r1
 800d01e:	4283      	cmp	r3, r0
 800d020:	6011      	str	r1, [r2, #0]
 800d022:	d1e0      	bne.n	800cfe6 <_free_r+0x22>
 800d024:	6818      	ldr	r0, [r3, #0]
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	6053      	str	r3, [r2, #4]
 800d02a:	4408      	add	r0, r1
 800d02c:	6010      	str	r0, [r2, #0]
 800d02e:	e7da      	b.n	800cfe6 <_free_r+0x22>
 800d030:	d902      	bls.n	800d038 <_free_r+0x74>
 800d032:	230c      	movs	r3, #12
 800d034:	602b      	str	r3, [r5, #0]
 800d036:	e7d6      	b.n	800cfe6 <_free_r+0x22>
 800d038:	6820      	ldr	r0, [r4, #0]
 800d03a:	1821      	adds	r1, r4, r0
 800d03c:	428b      	cmp	r3, r1
 800d03e:	bf04      	itt	eq
 800d040:	6819      	ldreq	r1, [r3, #0]
 800d042:	685b      	ldreq	r3, [r3, #4]
 800d044:	6063      	str	r3, [r4, #4]
 800d046:	bf04      	itt	eq
 800d048:	1809      	addeq	r1, r1, r0
 800d04a:	6021      	streq	r1, [r4, #0]
 800d04c:	6054      	str	r4, [r2, #4]
 800d04e:	e7ca      	b.n	800cfe6 <_free_r+0x22>
 800d050:	bd38      	pop	{r3, r4, r5, pc}
 800d052:	bf00      	nop
 800d054:	20000448 	.word	0x20000448

0800d058 <__ssputs_r>:
 800d058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d05c:	688e      	ldr	r6, [r1, #8]
 800d05e:	461f      	mov	r7, r3
 800d060:	42be      	cmp	r6, r7
 800d062:	680b      	ldr	r3, [r1, #0]
 800d064:	4682      	mov	sl, r0
 800d066:	460c      	mov	r4, r1
 800d068:	4690      	mov	r8, r2
 800d06a:	d82d      	bhi.n	800d0c8 <__ssputs_r+0x70>
 800d06c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d070:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d074:	d026      	beq.n	800d0c4 <__ssputs_r+0x6c>
 800d076:	6965      	ldr	r5, [r4, #20]
 800d078:	6909      	ldr	r1, [r1, #16]
 800d07a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d07e:	eba3 0901 	sub.w	r9, r3, r1
 800d082:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d086:	1c7b      	adds	r3, r7, #1
 800d088:	444b      	add	r3, r9
 800d08a:	106d      	asrs	r5, r5, #1
 800d08c:	429d      	cmp	r5, r3
 800d08e:	bf38      	it	cc
 800d090:	461d      	movcc	r5, r3
 800d092:	0553      	lsls	r3, r2, #21
 800d094:	d527      	bpl.n	800d0e6 <__ssputs_r+0x8e>
 800d096:	4629      	mov	r1, r5
 800d098:	f7ff fc9c 	bl	800c9d4 <_malloc_r>
 800d09c:	4606      	mov	r6, r0
 800d09e:	b360      	cbz	r0, 800d0fa <__ssputs_r+0xa2>
 800d0a0:	6921      	ldr	r1, [r4, #16]
 800d0a2:	464a      	mov	r2, r9
 800d0a4:	f7ff ff78 	bl	800cf98 <memcpy>
 800d0a8:	89a3      	ldrh	r3, [r4, #12]
 800d0aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d0ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0b2:	81a3      	strh	r3, [r4, #12]
 800d0b4:	6126      	str	r6, [r4, #16]
 800d0b6:	6165      	str	r5, [r4, #20]
 800d0b8:	444e      	add	r6, r9
 800d0ba:	eba5 0509 	sub.w	r5, r5, r9
 800d0be:	6026      	str	r6, [r4, #0]
 800d0c0:	60a5      	str	r5, [r4, #8]
 800d0c2:	463e      	mov	r6, r7
 800d0c4:	42be      	cmp	r6, r7
 800d0c6:	d900      	bls.n	800d0ca <__ssputs_r+0x72>
 800d0c8:	463e      	mov	r6, r7
 800d0ca:	6820      	ldr	r0, [r4, #0]
 800d0cc:	4632      	mov	r2, r6
 800d0ce:	4641      	mov	r1, r8
 800d0d0:	f001 fa36 	bl	800e540 <memmove>
 800d0d4:	68a3      	ldr	r3, [r4, #8]
 800d0d6:	1b9b      	subs	r3, r3, r6
 800d0d8:	60a3      	str	r3, [r4, #8]
 800d0da:	6823      	ldr	r3, [r4, #0]
 800d0dc:	4433      	add	r3, r6
 800d0de:	6023      	str	r3, [r4, #0]
 800d0e0:	2000      	movs	r0, #0
 800d0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0e6:	462a      	mov	r2, r5
 800d0e8:	f001 f81a 	bl	800e120 <_realloc_r>
 800d0ec:	4606      	mov	r6, r0
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	d1e0      	bne.n	800d0b4 <__ssputs_r+0x5c>
 800d0f2:	6921      	ldr	r1, [r4, #16]
 800d0f4:	4650      	mov	r0, sl
 800d0f6:	f7ff ff65 	bl	800cfc4 <_free_r>
 800d0fa:	230c      	movs	r3, #12
 800d0fc:	f8ca 3000 	str.w	r3, [sl]
 800d100:	89a3      	ldrh	r3, [r4, #12]
 800d102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d106:	81a3      	strh	r3, [r4, #12]
 800d108:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d10c:	e7e9      	b.n	800d0e2 <__ssputs_r+0x8a>
	...

0800d110 <_svfiprintf_r>:
 800d110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d114:	4698      	mov	r8, r3
 800d116:	898b      	ldrh	r3, [r1, #12]
 800d118:	061b      	lsls	r3, r3, #24
 800d11a:	b09d      	sub	sp, #116	@ 0x74
 800d11c:	4607      	mov	r7, r0
 800d11e:	460d      	mov	r5, r1
 800d120:	4614      	mov	r4, r2
 800d122:	d510      	bpl.n	800d146 <_svfiprintf_r+0x36>
 800d124:	690b      	ldr	r3, [r1, #16]
 800d126:	b973      	cbnz	r3, 800d146 <_svfiprintf_r+0x36>
 800d128:	2140      	movs	r1, #64	@ 0x40
 800d12a:	f7ff fc53 	bl	800c9d4 <_malloc_r>
 800d12e:	6028      	str	r0, [r5, #0]
 800d130:	6128      	str	r0, [r5, #16]
 800d132:	b930      	cbnz	r0, 800d142 <_svfiprintf_r+0x32>
 800d134:	230c      	movs	r3, #12
 800d136:	603b      	str	r3, [r7, #0]
 800d138:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d13c:	b01d      	add	sp, #116	@ 0x74
 800d13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d142:	2340      	movs	r3, #64	@ 0x40
 800d144:	616b      	str	r3, [r5, #20]
 800d146:	2300      	movs	r3, #0
 800d148:	9309      	str	r3, [sp, #36]	@ 0x24
 800d14a:	2320      	movs	r3, #32
 800d14c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d150:	f8cd 800c 	str.w	r8, [sp, #12]
 800d154:	2330      	movs	r3, #48	@ 0x30
 800d156:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d2f4 <_svfiprintf_r+0x1e4>
 800d15a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d15e:	f04f 0901 	mov.w	r9, #1
 800d162:	4623      	mov	r3, r4
 800d164:	469a      	mov	sl, r3
 800d166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d16a:	b10a      	cbz	r2, 800d170 <_svfiprintf_r+0x60>
 800d16c:	2a25      	cmp	r2, #37	@ 0x25
 800d16e:	d1f9      	bne.n	800d164 <_svfiprintf_r+0x54>
 800d170:	ebba 0b04 	subs.w	fp, sl, r4
 800d174:	d00b      	beq.n	800d18e <_svfiprintf_r+0x7e>
 800d176:	465b      	mov	r3, fp
 800d178:	4622      	mov	r2, r4
 800d17a:	4629      	mov	r1, r5
 800d17c:	4638      	mov	r0, r7
 800d17e:	f7ff ff6b 	bl	800d058 <__ssputs_r>
 800d182:	3001      	adds	r0, #1
 800d184:	f000 80a7 	beq.w	800d2d6 <_svfiprintf_r+0x1c6>
 800d188:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d18a:	445a      	add	r2, fp
 800d18c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d18e:	f89a 3000 	ldrb.w	r3, [sl]
 800d192:	2b00      	cmp	r3, #0
 800d194:	f000 809f 	beq.w	800d2d6 <_svfiprintf_r+0x1c6>
 800d198:	2300      	movs	r3, #0
 800d19a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d19e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1a2:	f10a 0a01 	add.w	sl, sl, #1
 800d1a6:	9304      	str	r3, [sp, #16]
 800d1a8:	9307      	str	r3, [sp, #28]
 800d1aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d1ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1b0:	4654      	mov	r4, sl
 800d1b2:	2205      	movs	r2, #5
 800d1b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1b8:	484e      	ldr	r0, [pc, #312]	@ (800d2f4 <_svfiprintf_r+0x1e4>)
 800d1ba:	f7f2 fff1 	bl	80001a0 <memchr>
 800d1be:	9a04      	ldr	r2, [sp, #16]
 800d1c0:	b9d8      	cbnz	r0, 800d1fa <_svfiprintf_r+0xea>
 800d1c2:	06d0      	lsls	r0, r2, #27
 800d1c4:	bf44      	itt	mi
 800d1c6:	2320      	movmi	r3, #32
 800d1c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1cc:	0711      	lsls	r1, r2, #28
 800d1ce:	bf44      	itt	mi
 800d1d0:	232b      	movmi	r3, #43	@ 0x2b
 800d1d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1d6:	f89a 3000 	ldrb.w	r3, [sl]
 800d1da:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1dc:	d015      	beq.n	800d20a <_svfiprintf_r+0xfa>
 800d1de:	9a07      	ldr	r2, [sp, #28]
 800d1e0:	4654      	mov	r4, sl
 800d1e2:	2000      	movs	r0, #0
 800d1e4:	f04f 0c0a 	mov.w	ip, #10
 800d1e8:	4621      	mov	r1, r4
 800d1ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1ee:	3b30      	subs	r3, #48	@ 0x30
 800d1f0:	2b09      	cmp	r3, #9
 800d1f2:	d94b      	bls.n	800d28c <_svfiprintf_r+0x17c>
 800d1f4:	b1b0      	cbz	r0, 800d224 <_svfiprintf_r+0x114>
 800d1f6:	9207      	str	r2, [sp, #28]
 800d1f8:	e014      	b.n	800d224 <_svfiprintf_r+0x114>
 800d1fa:	eba0 0308 	sub.w	r3, r0, r8
 800d1fe:	fa09 f303 	lsl.w	r3, r9, r3
 800d202:	4313      	orrs	r3, r2
 800d204:	9304      	str	r3, [sp, #16]
 800d206:	46a2      	mov	sl, r4
 800d208:	e7d2      	b.n	800d1b0 <_svfiprintf_r+0xa0>
 800d20a:	9b03      	ldr	r3, [sp, #12]
 800d20c:	1d19      	adds	r1, r3, #4
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	9103      	str	r1, [sp, #12]
 800d212:	2b00      	cmp	r3, #0
 800d214:	bfbb      	ittet	lt
 800d216:	425b      	neglt	r3, r3
 800d218:	f042 0202 	orrlt.w	r2, r2, #2
 800d21c:	9307      	strge	r3, [sp, #28]
 800d21e:	9307      	strlt	r3, [sp, #28]
 800d220:	bfb8      	it	lt
 800d222:	9204      	strlt	r2, [sp, #16]
 800d224:	7823      	ldrb	r3, [r4, #0]
 800d226:	2b2e      	cmp	r3, #46	@ 0x2e
 800d228:	d10a      	bne.n	800d240 <_svfiprintf_r+0x130>
 800d22a:	7863      	ldrb	r3, [r4, #1]
 800d22c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d22e:	d132      	bne.n	800d296 <_svfiprintf_r+0x186>
 800d230:	9b03      	ldr	r3, [sp, #12]
 800d232:	1d1a      	adds	r2, r3, #4
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	9203      	str	r2, [sp, #12]
 800d238:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d23c:	3402      	adds	r4, #2
 800d23e:	9305      	str	r3, [sp, #20]
 800d240:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d304 <_svfiprintf_r+0x1f4>
 800d244:	7821      	ldrb	r1, [r4, #0]
 800d246:	2203      	movs	r2, #3
 800d248:	4650      	mov	r0, sl
 800d24a:	f7f2 ffa9 	bl	80001a0 <memchr>
 800d24e:	b138      	cbz	r0, 800d260 <_svfiprintf_r+0x150>
 800d250:	9b04      	ldr	r3, [sp, #16]
 800d252:	eba0 000a 	sub.w	r0, r0, sl
 800d256:	2240      	movs	r2, #64	@ 0x40
 800d258:	4082      	lsls	r2, r0
 800d25a:	4313      	orrs	r3, r2
 800d25c:	3401      	adds	r4, #1
 800d25e:	9304      	str	r3, [sp, #16]
 800d260:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d264:	4824      	ldr	r0, [pc, #144]	@ (800d2f8 <_svfiprintf_r+0x1e8>)
 800d266:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d26a:	2206      	movs	r2, #6
 800d26c:	f7f2 ff98 	bl	80001a0 <memchr>
 800d270:	2800      	cmp	r0, #0
 800d272:	d036      	beq.n	800d2e2 <_svfiprintf_r+0x1d2>
 800d274:	4b21      	ldr	r3, [pc, #132]	@ (800d2fc <_svfiprintf_r+0x1ec>)
 800d276:	bb1b      	cbnz	r3, 800d2c0 <_svfiprintf_r+0x1b0>
 800d278:	9b03      	ldr	r3, [sp, #12]
 800d27a:	3307      	adds	r3, #7
 800d27c:	f023 0307 	bic.w	r3, r3, #7
 800d280:	3308      	adds	r3, #8
 800d282:	9303      	str	r3, [sp, #12]
 800d284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d286:	4433      	add	r3, r6
 800d288:	9309      	str	r3, [sp, #36]	@ 0x24
 800d28a:	e76a      	b.n	800d162 <_svfiprintf_r+0x52>
 800d28c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d290:	460c      	mov	r4, r1
 800d292:	2001      	movs	r0, #1
 800d294:	e7a8      	b.n	800d1e8 <_svfiprintf_r+0xd8>
 800d296:	2300      	movs	r3, #0
 800d298:	3401      	adds	r4, #1
 800d29a:	9305      	str	r3, [sp, #20]
 800d29c:	4619      	mov	r1, r3
 800d29e:	f04f 0c0a 	mov.w	ip, #10
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2a8:	3a30      	subs	r2, #48	@ 0x30
 800d2aa:	2a09      	cmp	r2, #9
 800d2ac:	d903      	bls.n	800d2b6 <_svfiprintf_r+0x1a6>
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d0c6      	beq.n	800d240 <_svfiprintf_r+0x130>
 800d2b2:	9105      	str	r1, [sp, #20]
 800d2b4:	e7c4      	b.n	800d240 <_svfiprintf_r+0x130>
 800d2b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e7f0      	b.n	800d2a2 <_svfiprintf_r+0x192>
 800d2c0:	ab03      	add	r3, sp, #12
 800d2c2:	9300      	str	r3, [sp, #0]
 800d2c4:	462a      	mov	r2, r5
 800d2c6:	4b0e      	ldr	r3, [pc, #56]	@ (800d300 <_svfiprintf_r+0x1f0>)
 800d2c8:	a904      	add	r1, sp, #16
 800d2ca:	4638      	mov	r0, r7
 800d2cc:	f3af 8000 	nop.w
 800d2d0:	1c42      	adds	r2, r0, #1
 800d2d2:	4606      	mov	r6, r0
 800d2d4:	d1d6      	bne.n	800d284 <_svfiprintf_r+0x174>
 800d2d6:	89ab      	ldrh	r3, [r5, #12]
 800d2d8:	065b      	lsls	r3, r3, #25
 800d2da:	f53f af2d 	bmi.w	800d138 <_svfiprintf_r+0x28>
 800d2de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2e0:	e72c      	b.n	800d13c <_svfiprintf_r+0x2c>
 800d2e2:	ab03      	add	r3, sp, #12
 800d2e4:	9300      	str	r3, [sp, #0]
 800d2e6:	462a      	mov	r2, r5
 800d2e8:	4b05      	ldr	r3, [pc, #20]	@ (800d300 <_svfiprintf_r+0x1f0>)
 800d2ea:	a904      	add	r1, sp, #16
 800d2ec:	4638      	mov	r0, r7
 800d2ee:	f000 fb8b 	bl	800da08 <_printf_i>
 800d2f2:	e7ed      	b.n	800d2d0 <_svfiprintf_r+0x1c0>
 800d2f4:	0800f90c 	.word	0x0800f90c
 800d2f8:	0800f916 	.word	0x0800f916
 800d2fc:	00000000 	.word	0x00000000
 800d300:	0800d059 	.word	0x0800d059
 800d304:	0800f912 	.word	0x0800f912

0800d308 <_sungetc_r>:
 800d308:	b538      	push	{r3, r4, r5, lr}
 800d30a:	1c4b      	adds	r3, r1, #1
 800d30c:	4614      	mov	r4, r2
 800d30e:	d103      	bne.n	800d318 <_sungetc_r+0x10>
 800d310:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d314:	4628      	mov	r0, r5
 800d316:	bd38      	pop	{r3, r4, r5, pc}
 800d318:	8993      	ldrh	r3, [r2, #12]
 800d31a:	f023 0320 	bic.w	r3, r3, #32
 800d31e:	8193      	strh	r3, [r2, #12]
 800d320:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d322:	6852      	ldr	r2, [r2, #4]
 800d324:	b2cd      	uxtb	r5, r1
 800d326:	b18b      	cbz	r3, 800d34c <_sungetc_r+0x44>
 800d328:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d32a:	4293      	cmp	r3, r2
 800d32c:	dd08      	ble.n	800d340 <_sungetc_r+0x38>
 800d32e:	6823      	ldr	r3, [r4, #0]
 800d330:	1e5a      	subs	r2, r3, #1
 800d332:	6022      	str	r2, [r4, #0]
 800d334:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d338:	6863      	ldr	r3, [r4, #4]
 800d33a:	3301      	adds	r3, #1
 800d33c:	6063      	str	r3, [r4, #4]
 800d33e:	e7e9      	b.n	800d314 <_sungetc_r+0xc>
 800d340:	4621      	mov	r1, r4
 800d342:	f000 feb3 	bl	800e0ac <__submore>
 800d346:	2800      	cmp	r0, #0
 800d348:	d0f1      	beq.n	800d32e <_sungetc_r+0x26>
 800d34a:	e7e1      	b.n	800d310 <_sungetc_r+0x8>
 800d34c:	6921      	ldr	r1, [r4, #16]
 800d34e:	6823      	ldr	r3, [r4, #0]
 800d350:	b151      	cbz	r1, 800d368 <_sungetc_r+0x60>
 800d352:	4299      	cmp	r1, r3
 800d354:	d208      	bcs.n	800d368 <_sungetc_r+0x60>
 800d356:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d35a:	42a9      	cmp	r1, r5
 800d35c:	d104      	bne.n	800d368 <_sungetc_r+0x60>
 800d35e:	3b01      	subs	r3, #1
 800d360:	3201      	adds	r2, #1
 800d362:	6023      	str	r3, [r4, #0]
 800d364:	6062      	str	r2, [r4, #4]
 800d366:	e7d5      	b.n	800d314 <_sungetc_r+0xc>
 800d368:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800d36c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d370:	6363      	str	r3, [r4, #52]	@ 0x34
 800d372:	2303      	movs	r3, #3
 800d374:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d376:	4623      	mov	r3, r4
 800d378:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d37c:	6023      	str	r3, [r4, #0]
 800d37e:	2301      	movs	r3, #1
 800d380:	e7dc      	b.n	800d33c <_sungetc_r+0x34>

0800d382 <__ssrefill_r>:
 800d382:	b510      	push	{r4, lr}
 800d384:	460c      	mov	r4, r1
 800d386:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d388:	b169      	cbz	r1, 800d3a6 <__ssrefill_r+0x24>
 800d38a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d38e:	4299      	cmp	r1, r3
 800d390:	d001      	beq.n	800d396 <__ssrefill_r+0x14>
 800d392:	f7ff fe17 	bl	800cfc4 <_free_r>
 800d396:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d398:	6063      	str	r3, [r4, #4]
 800d39a:	2000      	movs	r0, #0
 800d39c:	6360      	str	r0, [r4, #52]	@ 0x34
 800d39e:	b113      	cbz	r3, 800d3a6 <__ssrefill_r+0x24>
 800d3a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d3a2:	6023      	str	r3, [r4, #0]
 800d3a4:	bd10      	pop	{r4, pc}
 800d3a6:	6923      	ldr	r3, [r4, #16]
 800d3a8:	6023      	str	r3, [r4, #0]
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	6063      	str	r3, [r4, #4]
 800d3ae:	89a3      	ldrh	r3, [r4, #12]
 800d3b0:	f043 0320 	orr.w	r3, r3, #32
 800d3b4:	81a3      	strh	r3, [r4, #12]
 800d3b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3ba:	e7f3      	b.n	800d3a4 <__ssrefill_r+0x22>

0800d3bc <__ssvfiscanf_r>:
 800d3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c0:	460c      	mov	r4, r1
 800d3c2:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800d3cc:	49a6      	ldr	r1, [pc, #664]	@ (800d668 <__ssvfiscanf_r+0x2ac>)
 800d3ce:	91a0      	str	r1, [sp, #640]	@ 0x280
 800d3d0:	f10d 0804 	add.w	r8, sp, #4
 800d3d4:	49a5      	ldr	r1, [pc, #660]	@ (800d66c <__ssvfiscanf_r+0x2b0>)
 800d3d6:	4fa6      	ldr	r7, [pc, #664]	@ (800d670 <__ssvfiscanf_r+0x2b4>)
 800d3d8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800d3dc:	4606      	mov	r6, r0
 800d3de:	91a1      	str	r1, [sp, #644]	@ 0x284
 800d3e0:	9300      	str	r3, [sp, #0]
 800d3e2:	f892 9000 	ldrb.w	r9, [r2]
 800d3e6:	f1b9 0f00 	cmp.w	r9, #0
 800d3ea:	f000 8158 	beq.w	800d69e <__ssvfiscanf_r+0x2e2>
 800d3ee:	f817 3009 	ldrb.w	r3, [r7, r9]
 800d3f2:	f013 0308 	ands.w	r3, r3, #8
 800d3f6:	f102 0501 	add.w	r5, r2, #1
 800d3fa:	d019      	beq.n	800d430 <__ssvfiscanf_r+0x74>
 800d3fc:	6863      	ldr	r3, [r4, #4]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	dd0f      	ble.n	800d422 <__ssvfiscanf_r+0x66>
 800d402:	6823      	ldr	r3, [r4, #0]
 800d404:	781a      	ldrb	r2, [r3, #0]
 800d406:	5cba      	ldrb	r2, [r7, r2]
 800d408:	0712      	lsls	r2, r2, #28
 800d40a:	d401      	bmi.n	800d410 <__ssvfiscanf_r+0x54>
 800d40c:	462a      	mov	r2, r5
 800d40e:	e7e8      	b.n	800d3e2 <__ssvfiscanf_r+0x26>
 800d410:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d412:	3201      	adds	r2, #1
 800d414:	9245      	str	r2, [sp, #276]	@ 0x114
 800d416:	6862      	ldr	r2, [r4, #4]
 800d418:	3301      	adds	r3, #1
 800d41a:	3a01      	subs	r2, #1
 800d41c:	6062      	str	r2, [r4, #4]
 800d41e:	6023      	str	r3, [r4, #0]
 800d420:	e7ec      	b.n	800d3fc <__ssvfiscanf_r+0x40>
 800d422:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d424:	4621      	mov	r1, r4
 800d426:	4630      	mov	r0, r6
 800d428:	4798      	blx	r3
 800d42a:	2800      	cmp	r0, #0
 800d42c:	d0e9      	beq.n	800d402 <__ssvfiscanf_r+0x46>
 800d42e:	e7ed      	b.n	800d40c <__ssvfiscanf_r+0x50>
 800d430:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800d434:	f040 8085 	bne.w	800d542 <__ssvfiscanf_r+0x186>
 800d438:	9341      	str	r3, [sp, #260]	@ 0x104
 800d43a:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d43c:	7853      	ldrb	r3, [r2, #1]
 800d43e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d440:	bf02      	ittt	eq
 800d442:	2310      	moveq	r3, #16
 800d444:	1c95      	addeq	r5, r2, #2
 800d446:	9341      	streq	r3, [sp, #260]	@ 0x104
 800d448:	220a      	movs	r2, #10
 800d44a:	46aa      	mov	sl, r5
 800d44c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d450:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800d454:	2b09      	cmp	r3, #9
 800d456:	d91e      	bls.n	800d496 <__ssvfiscanf_r+0xda>
 800d458:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800d674 <__ssvfiscanf_r+0x2b8>
 800d45c:	2203      	movs	r2, #3
 800d45e:	4658      	mov	r0, fp
 800d460:	f7f2 fe9e 	bl	80001a0 <memchr>
 800d464:	b138      	cbz	r0, 800d476 <__ssvfiscanf_r+0xba>
 800d466:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d468:	eba0 000b 	sub.w	r0, r0, fp
 800d46c:	2301      	movs	r3, #1
 800d46e:	4083      	lsls	r3, r0
 800d470:	4313      	orrs	r3, r2
 800d472:	9341      	str	r3, [sp, #260]	@ 0x104
 800d474:	4655      	mov	r5, sl
 800d476:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d47a:	2b78      	cmp	r3, #120	@ 0x78
 800d47c:	d806      	bhi.n	800d48c <__ssvfiscanf_r+0xd0>
 800d47e:	2b57      	cmp	r3, #87	@ 0x57
 800d480:	d810      	bhi.n	800d4a4 <__ssvfiscanf_r+0xe8>
 800d482:	2b25      	cmp	r3, #37	@ 0x25
 800d484:	d05d      	beq.n	800d542 <__ssvfiscanf_r+0x186>
 800d486:	d857      	bhi.n	800d538 <__ssvfiscanf_r+0x17c>
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d075      	beq.n	800d578 <__ssvfiscanf_r+0x1bc>
 800d48c:	2303      	movs	r3, #3
 800d48e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d490:	230a      	movs	r3, #10
 800d492:	9342      	str	r3, [sp, #264]	@ 0x108
 800d494:	e088      	b.n	800d5a8 <__ssvfiscanf_r+0x1ec>
 800d496:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800d498:	fb02 1103 	mla	r1, r2, r3, r1
 800d49c:	3930      	subs	r1, #48	@ 0x30
 800d49e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d4a0:	4655      	mov	r5, sl
 800d4a2:	e7d2      	b.n	800d44a <__ssvfiscanf_r+0x8e>
 800d4a4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800d4a8:	2a20      	cmp	r2, #32
 800d4aa:	d8ef      	bhi.n	800d48c <__ssvfiscanf_r+0xd0>
 800d4ac:	a101      	add	r1, pc, #4	@ (adr r1, 800d4b4 <__ssvfiscanf_r+0xf8>)
 800d4ae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d4b2:	bf00      	nop
 800d4b4:	0800d587 	.word	0x0800d587
 800d4b8:	0800d48d 	.word	0x0800d48d
 800d4bc:	0800d48d 	.word	0x0800d48d
 800d4c0:	0800d5e1 	.word	0x0800d5e1
 800d4c4:	0800d48d 	.word	0x0800d48d
 800d4c8:	0800d48d 	.word	0x0800d48d
 800d4cc:	0800d48d 	.word	0x0800d48d
 800d4d0:	0800d48d 	.word	0x0800d48d
 800d4d4:	0800d48d 	.word	0x0800d48d
 800d4d8:	0800d48d 	.word	0x0800d48d
 800d4dc:	0800d48d 	.word	0x0800d48d
 800d4e0:	0800d5f7 	.word	0x0800d5f7
 800d4e4:	0800d5dd 	.word	0x0800d5dd
 800d4e8:	0800d53f 	.word	0x0800d53f
 800d4ec:	0800d53f 	.word	0x0800d53f
 800d4f0:	0800d53f 	.word	0x0800d53f
 800d4f4:	0800d48d 	.word	0x0800d48d
 800d4f8:	0800d599 	.word	0x0800d599
 800d4fc:	0800d48d 	.word	0x0800d48d
 800d500:	0800d48d 	.word	0x0800d48d
 800d504:	0800d48d 	.word	0x0800d48d
 800d508:	0800d48d 	.word	0x0800d48d
 800d50c:	0800d607 	.word	0x0800d607
 800d510:	0800d5a1 	.word	0x0800d5a1
 800d514:	0800d57f 	.word	0x0800d57f
 800d518:	0800d48d 	.word	0x0800d48d
 800d51c:	0800d48d 	.word	0x0800d48d
 800d520:	0800d603 	.word	0x0800d603
 800d524:	0800d48d 	.word	0x0800d48d
 800d528:	0800d5dd 	.word	0x0800d5dd
 800d52c:	0800d48d 	.word	0x0800d48d
 800d530:	0800d48d 	.word	0x0800d48d
 800d534:	0800d587 	.word	0x0800d587
 800d538:	3b45      	subs	r3, #69	@ 0x45
 800d53a:	2b02      	cmp	r3, #2
 800d53c:	d8a6      	bhi.n	800d48c <__ssvfiscanf_r+0xd0>
 800d53e:	2305      	movs	r3, #5
 800d540:	e031      	b.n	800d5a6 <__ssvfiscanf_r+0x1ea>
 800d542:	6863      	ldr	r3, [r4, #4]
 800d544:	2b00      	cmp	r3, #0
 800d546:	dd0d      	ble.n	800d564 <__ssvfiscanf_r+0x1a8>
 800d548:	6823      	ldr	r3, [r4, #0]
 800d54a:	781a      	ldrb	r2, [r3, #0]
 800d54c:	454a      	cmp	r2, r9
 800d54e:	f040 80a6 	bne.w	800d69e <__ssvfiscanf_r+0x2e2>
 800d552:	3301      	adds	r3, #1
 800d554:	6862      	ldr	r2, [r4, #4]
 800d556:	6023      	str	r3, [r4, #0]
 800d558:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d55a:	3a01      	subs	r2, #1
 800d55c:	3301      	adds	r3, #1
 800d55e:	6062      	str	r2, [r4, #4]
 800d560:	9345      	str	r3, [sp, #276]	@ 0x114
 800d562:	e753      	b.n	800d40c <__ssvfiscanf_r+0x50>
 800d564:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d566:	4621      	mov	r1, r4
 800d568:	4630      	mov	r0, r6
 800d56a:	4798      	blx	r3
 800d56c:	2800      	cmp	r0, #0
 800d56e:	d0eb      	beq.n	800d548 <__ssvfiscanf_r+0x18c>
 800d570:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d572:	2800      	cmp	r0, #0
 800d574:	f040 808b 	bne.w	800d68e <__ssvfiscanf_r+0x2d2>
 800d578:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d57c:	e08b      	b.n	800d696 <__ssvfiscanf_r+0x2da>
 800d57e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d580:	f042 0220 	orr.w	r2, r2, #32
 800d584:	9241      	str	r2, [sp, #260]	@ 0x104
 800d586:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d588:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d58c:	9241      	str	r2, [sp, #260]	@ 0x104
 800d58e:	2210      	movs	r2, #16
 800d590:	2b6e      	cmp	r3, #110	@ 0x6e
 800d592:	9242      	str	r2, [sp, #264]	@ 0x108
 800d594:	d902      	bls.n	800d59c <__ssvfiscanf_r+0x1e0>
 800d596:	e005      	b.n	800d5a4 <__ssvfiscanf_r+0x1e8>
 800d598:	2300      	movs	r3, #0
 800d59a:	9342      	str	r3, [sp, #264]	@ 0x108
 800d59c:	2303      	movs	r3, #3
 800d59e:	e002      	b.n	800d5a6 <__ssvfiscanf_r+0x1ea>
 800d5a0:	2308      	movs	r3, #8
 800d5a2:	9342      	str	r3, [sp, #264]	@ 0x108
 800d5a4:	2304      	movs	r3, #4
 800d5a6:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d5a8:	6863      	ldr	r3, [r4, #4]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	dd39      	ble.n	800d622 <__ssvfiscanf_r+0x266>
 800d5ae:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d5b0:	0659      	lsls	r1, r3, #25
 800d5b2:	d404      	bmi.n	800d5be <__ssvfiscanf_r+0x202>
 800d5b4:	6823      	ldr	r3, [r4, #0]
 800d5b6:	781a      	ldrb	r2, [r3, #0]
 800d5b8:	5cba      	ldrb	r2, [r7, r2]
 800d5ba:	0712      	lsls	r2, r2, #28
 800d5bc:	d438      	bmi.n	800d630 <__ssvfiscanf_r+0x274>
 800d5be:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800d5c0:	2b02      	cmp	r3, #2
 800d5c2:	dc47      	bgt.n	800d654 <__ssvfiscanf_r+0x298>
 800d5c4:	466b      	mov	r3, sp
 800d5c6:	4622      	mov	r2, r4
 800d5c8:	a941      	add	r1, sp, #260	@ 0x104
 800d5ca:	4630      	mov	r0, r6
 800d5cc:	f000 fb3a 	bl	800dc44 <_scanf_chars>
 800d5d0:	2801      	cmp	r0, #1
 800d5d2:	d064      	beq.n	800d69e <__ssvfiscanf_r+0x2e2>
 800d5d4:	2802      	cmp	r0, #2
 800d5d6:	f47f af19 	bne.w	800d40c <__ssvfiscanf_r+0x50>
 800d5da:	e7c9      	b.n	800d570 <__ssvfiscanf_r+0x1b4>
 800d5dc:	220a      	movs	r2, #10
 800d5de:	e7d7      	b.n	800d590 <__ssvfiscanf_r+0x1d4>
 800d5e0:	4629      	mov	r1, r5
 800d5e2:	4640      	mov	r0, r8
 800d5e4:	f000 fc7c 	bl	800dee0 <__sccl>
 800d5e8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d5ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5ee:	9341      	str	r3, [sp, #260]	@ 0x104
 800d5f0:	4605      	mov	r5, r0
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e7d7      	b.n	800d5a6 <__ssvfiscanf_r+0x1ea>
 800d5f6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d5f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5fc:	9341      	str	r3, [sp, #260]	@ 0x104
 800d5fe:	2300      	movs	r3, #0
 800d600:	e7d1      	b.n	800d5a6 <__ssvfiscanf_r+0x1ea>
 800d602:	2302      	movs	r3, #2
 800d604:	e7cf      	b.n	800d5a6 <__ssvfiscanf_r+0x1ea>
 800d606:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800d608:	06c3      	lsls	r3, r0, #27
 800d60a:	f53f aeff 	bmi.w	800d40c <__ssvfiscanf_r+0x50>
 800d60e:	9b00      	ldr	r3, [sp, #0]
 800d610:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d612:	1d19      	adds	r1, r3, #4
 800d614:	9100      	str	r1, [sp, #0]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	07c0      	lsls	r0, r0, #31
 800d61a:	bf4c      	ite	mi
 800d61c:	801a      	strhmi	r2, [r3, #0]
 800d61e:	601a      	strpl	r2, [r3, #0]
 800d620:	e6f4      	b.n	800d40c <__ssvfiscanf_r+0x50>
 800d622:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d624:	4621      	mov	r1, r4
 800d626:	4630      	mov	r0, r6
 800d628:	4798      	blx	r3
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d0bf      	beq.n	800d5ae <__ssvfiscanf_r+0x1f2>
 800d62e:	e79f      	b.n	800d570 <__ssvfiscanf_r+0x1b4>
 800d630:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d632:	3201      	adds	r2, #1
 800d634:	9245      	str	r2, [sp, #276]	@ 0x114
 800d636:	6862      	ldr	r2, [r4, #4]
 800d638:	3a01      	subs	r2, #1
 800d63a:	2a00      	cmp	r2, #0
 800d63c:	6062      	str	r2, [r4, #4]
 800d63e:	dd02      	ble.n	800d646 <__ssvfiscanf_r+0x28a>
 800d640:	3301      	adds	r3, #1
 800d642:	6023      	str	r3, [r4, #0]
 800d644:	e7b6      	b.n	800d5b4 <__ssvfiscanf_r+0x1f8>
 800d646:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d648:	4621      	mov	r1, r4
 800d64a:	4630      	mov	r0, r6
 800d64c:	4798      	blx	r3
 800d64e:	2800      	cmp	r0, #0
 800d650:	d0b0      	beq.n	800d5b4 <__ssvfiscanf_r+0x1f8>
 800d652:	e78d      	b.n	800d570 <__ssvfiscanf_r+0x1b4>
 800d654:	2b04      	cmp	r3, #4
 800d656:	dc0f      	bgt.n	800d678 <__ssvfiscanf_r+0x2bc>
 800d658:	466b      	mov	r3, sp
 800d65a:	4622      	mov	r2, r4
 800d65c:	a941      	add	r1, sp, #260	@ 0x104
 800d65e:	4630      	mov	r0, r6
 800d660:	f000 fb4a 	bl	800dcf8 <_scanf_i>
 800d664:	e7b4      	b.n	800d5d0 <__ssvfiscanf_r+0x214>
 800d666:	bf00      	nop
 800d668:	0800d309 	.word	0x0800d309
 800d66c:	0800d383 	.word	0x0800d383
 800d670:	0800f95b 	.word	0x0800f95b
 800d674:	0800f912 	.word	0x0800f912
 800d678:	4b0a      	ldr	r3, [pc, #40]	@ (800d6a4 <__ssvfiscanf_r+0x2e8>)
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	f43f aec6 	beq.w	800d40c <__ssvfiscanf_r+0x50>
 800d680:	466b      	mov	r3, sp
 800d682:	4622      	mov	r2, r4
 800d684:	a941      	add	r1, sp, #260	@ 0x104
 800d686:	4630      	mov	r0, r6
 800d688:	f3af 8000 	nop.w
 800d68c:	e7a0      	b.n	800d5d0 <__ssvfiscanf_r+0x214>
 800d68e:	89a3      	ldrh	r3, [r4, #12]
 800d690:	065b      	lsls	r3, r3, #25
 800d692:	f53f af71 	bmi.w	800d578 <__ssvfiscanf_r+0x1bc>
 800d696:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800d69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d69e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d6a0:	e7f9      	b.n	800d696 <__ssvfiscanf_r+0x2da>
 800d6a2:	bf00      	nop
 800d6a4:	00000000 	.word	0x00000000

0800d6a8 <__sfputc_r>:
 800d6a8:	6893      	ldr	r3, [r2, #8]
 800d6aa:	3b01      	subs	r3, #1
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	b410      	push	{r4}
 800d6b0:	6093      	str	r3, [r2, #8]
 800d6b2:	da08      	bge.n	800d6c6 <__sfputc_r+0x1e>
 800d6b4:	6994      	ldr	r4, [r2, #24]
 800d6b6:	42a3      	cmp	r3, r4
 800d6b8:	db01      	blt.n	800d6be <__sfputc_r+0x16>
 800d6ba:	290a      	cmp	r1, #10
 800d6bc:	d103      	bne.n	800d6c6 <__sfputc_r+0x1e>
 800d6be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6c2:	f000 bd5b 	b.w	800e17c <__swbuf_r>
 800d6c6:	6813      	ldr	r3, [r2, #0]
 800d6c8:	1c58      	adds	r0, r3, #1
 800d6ca:	6010      	str	r0, [r2, #0]
 800d6cc:	7019      	strb	r1, [r3, #0]
 800d6ce:	4608      	mov	r0, r1
 800d6d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6d4:	4770      	bx	lr

0800d6d6 <__sfputs_r>:
 800d6d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6d8:	4606      	mov	r6, r0
 800d6da:	460f      	mov	r7, r1
 800d6dc:	4614      	mov	r4, r2
 800d6de:	18d5      	adds	r5, r2, r3
 800d6e0:	42ac      	cmp	r4, r5
 800d6e2:	d101      	bne.n	800d6e8 <__sfputs_r+0x12>
 800d6e4:	2000      	movs	r0, #0
 800d6e6:	e007      	b.n	800d6f8 <__sfputs_r+0x22>
 800d6e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6ec:	463a      	mov	r2, r7
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	f7ff ffda 	bl	800d6a8 <__sfputc_r>
 800d6f4:	1c43      	adds	r3, r0, #1
 800d6f6:	d1f3      	bne.n	800d6e0 <__sfputs_r+0xa>
 800d6f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d6fc <_vfiprintf_r>:
 800d6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d700:	460d      	mov	r5, r1
 800d702:	b09d      	sub	sp, #116	@ 0x74
 800d704:	4614      	mov	r4, r2
 800d706:	4698      	mov	r8, r3
 800d708:	4606      	mov	r6, r0
 800d70a:	b118      	cbz	r0, 800d714 <_vfiprintf_r+0x18>
 800d70c:	6a03      	ldr	r3, [r0, #32]
 800d70e:	b90b      	cbnz	r3, 800d714 <_vfiprintf_r+0x18>
 800d710:	f7ff fb0c 	bl	800cd2c <__sinit>
 800d714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d716:	07d9      	lsls	r1, r3, #31
 800d718:	d405      	bmi.n	800d726 <_vfiprintf_r+0x2a>
 800d71a:	89ab      	ldrh	r3, [r5, #12]
 800d71c:	059a      	lsls	r2, r3, #22
 800d71e:	d402      	bmi.n	800d726 <_vfiprintf_r+0x2a>
 800d720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d722:	f7ff fc26 	bl	800cf72 <__retarget_lock_acquire_recursive>
 800d726:	89ab      	ldrh	r3, [r5, #12]
 800d728:	071b      	lsls	r3, r3, #28
 800d72a:	d501      	bpl.n	800d730 <_vfiprintf_r+0x34>
 800d72c:	692b      	ldr	r3, [r5, #16]
 800d72e:	b99b      	cbnz	r3, 800d758 <_vfiprintf_r+0x5c>
 800d730:	4629      	mov	r1, r5
 800d732:	4630      	mov	r0, r6
 800d734:	f000 fe4c 	bl	800e3d0 <__swsetup_r>
 800d738:	b170      	cbz	r0, 800d758 <_vfiprintf_r+0x5c>
 800d73a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d73c:	07dc      	lsls	r4, r3, #31
 800d73e:	d504      	bpl.n	800d74a <_vfiprintf_r+0x4e>
 800d740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d744:	b01d      	add	sp, #116	@ 0x74
 800d746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d74a:	89ab      	ldrh	r3, [r5, #12]
 800d74c:	0598      	lsls	r0, r3, #22
 800d74e:	d4f7      	bmi.n	800d740 <_vfiprintf_r+0x44>
 800d750:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d752:	f7ff fc0f 	bl	800cf74 <__retarget_lock_release_recursive>
 800d756:	e7f3      	b.n	800d740 <_vfiprintf_r+0x44>
 800d758:	2300      	movs	r3, #0
 800d75a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d75c:	2320      	movs	r3, #32
 800d75e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d762:	f8cd 800c 	str.w	r8, [sp, #12]
 800d766:	2330      	movs	r3, #48	@ 0x30
 800d768:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d918 <_vfiprintf_r+0x21c>
 800d76c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d770:	f04f 0901 	mov.w	r9, #1
 800d774:	4623      	mov	r3, r4
 800d776:	469a      	mov	sl, r3
 800d778:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d77c:	b10a      	cbz	r2, 800d782 <_vfiprintf_r+0x86>
 800d77e:	2a25      	cmp	r2, #37	@ 0x25
 800d780:	d1f9      	bne.n	800d776 <_vfiprintf_r+0x7a>
 800d782:	ebba 0b04 	subs.w	fp, sl, r4
 800d786:	d00b      	beq.n	800d7a0 <_vfiprintf_r+0xa4>
 800d788:	465b      	mov	r3, fp
 800d78a:	4622      	mov	r2, r4
 800d78c:	4629      	mov	r1, r5
 800d78e:	4630      	mov	r0, r6
 800d790:	f7ff ffa1 	bl	800d6d6 <__sfputs_r>
 800d794:	3001      	adds	r0, #1
 800d796:	f000 80a7 	beq.w	800d8e8 <_vfiprintf_r+0x1ec>
 800d79a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d79c:	445a      	add	r2, fp
 800d79e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d7a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	f000 809f 	beq.w	800d8e8 <_vfiprintf_r+0x1ec>
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d7b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7b4:	f10a 0a01 	add.w	sl, sl, #1
 800d7b8:	9304      	str	r3, [sp, #16]
 800d7ba:	9307      	str	r3, [sp, #28]
 800d7bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d7c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d7c2:	4654      	mov	r4, sl
 800d7c4:	2205      	movs	r2, #5
 800d7c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7ca:	4853      	ldr	r0, [pc, #332]	@ (800d918 <_vfiprintf_r+0x21c>)
 800d7cc:	f7f2 fce8 	bl	80001a0 <memchr>
 800d7d0:	9a04      	ldr	r2, [sp, #16]
 800d7d2:	b9d8      	cbnz	r0, 800d80c <_vfiprintf_r+0x110>
 800d7d4:	06d1      	lsls	r1, r2, #27
 800d7d6:	bf44      	itt	mi
 800d7d8:	2320      	movmi	r3, #32
 800d7da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7de:	0713      	lsls	r3, r2, #28
 800d7e0:	bf44      	itt	mi
 800d7e2:	232b      	movmi	r3, #43	@ 0x2b
 800d7e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7e8:	f89a 3000 	ldrb.w	r3, [sl]
 800d7ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7ee:	d015      	beq.n	800d81c <_vfiprintf_r+0x120>
 800d7f0:	9a07      	ldr	r2, [sp, #28]
 800d7f2:	4654      	mov	r4, sl
 800d7f4:	2000      	movs	r0, #0
 800d7f6:	f04f 0c0a 	mov.w	ip, #10
 800d7fa:	4621      	mov	r1, r4
 800d7fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d800:	3b30      	subs	r3, #48	@ 0x30
 800d802:	2b09      	cmp	r3, #9
 800d804:	d94b      	bls.n	800d89e <_vfiprintf_r+0x1a2>
 800d806:	b1b0      	cbz	r0, 800d836 <_vfiprintf_r+0x13a>
 800d808:	9207      	str	r2, [sp, #28]
 800d80a:	e014      	b.n	800d836 <_vfiprintf_r+0x13a>
 800d80c:	eba0 0308 	sub.w	r3, r0, r8
 800d810:	fa09 f303 	lsl.w	r3, r9, r3
 800d814:	4313      	orrs	r3, r2
 800d816:	9304      	str	r3, [sp, #16]
 800d818:	46a2      	mov	sl, r4
 800d81a:	e7d2      	b.n	800d7c2 <_vfiprintf_r+0xc6>
 800d81c:	9b03      	ldr	r3, [sp, #12]
 800d81e:	1d19      	adds	r1, r3, #4
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	9103      	str	r1, [sp, #12]
 800d824:	2b00      	cmp	r3, #0
 800d826:	bfbb      	ittet	lt
 800d828:	425b      	neglt	r3, r3
 800d82a:	f042 0202 	orrlt.w	r2, r2, #2
 800d82e:	9307      	strge	r3, [sp, #28]
 800d830:	9307      	strlt	r3, [sp, #28]
 800d832:	bfb8      	it	lt
 800d834:	9204      	strlt	r2, [sp, #16]
 800d836:	7823      	ldrb	r3, [r4, #0]
 800d838:	2b2e      	cmp	r3, #46	@ 0x2e
 800d83a:	d10a      	bne.n	800d852 <_vfiprintf_r+0x156>
 800d83c:	7863      	ldrb	r3, [r4, #1]
 800d83e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d840:	d132      	bne.n	800d8a8 <_vfiprintf_r+0x1ac>
 800d842:	9b03      	ldr	r3, [sp, #12]
 800d844:	1d1a      	adds	r2, r3, #4
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	9203      	str	r2, [sp, #12]
 800d84a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d84e:	3402      	adds	r4, #2
 800d850:	9305      	str	r3, [sp, #20]
 800d852:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d928 <_vfiprintf_r+0x22c>
 800d856:	7821      	ldrb	r1, [r4, #0]
 800d858:	2203      	movs	r2, #3
 800d85a:	4650      	mov	r0, sl
 800d85c:	f7f2 fca0 	bl	80001a0 <memchr>
 800d860:	b138      	cbz	r0, 800d872 <_vfiprintf_r+0x176>
 800d862:	9b04      	ldr	r3, [sp, #16]
 800d864:	eba0 000a 	sub.w	r0, r0, sl
 800d868:	2240      	movs	r2, #64	@ 0x40
 800d86a:	4082      	lsls	r2, r0
 800d86c:	4313      	orrs	r3, r2
 800d86e:	3401      	adds	r4, #1
 800d870:	9304      	str	r3, [sp, #16]
 800d872:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d876:	4829      	ldr	r0, [pc, #164]	@ (800d91c <_vfiprintf_r+0x220>)
 800d878:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d87c:	2206      	movs	r2, #6
 800d87e:	f7f2 fc8f 	bl	80001a0 <memchr>
 800d882:	2800      	cmp	r0, #0
 800d884:	d03f      	beq.n	800d906 <_vfiprintf_r+0x20a>
 800d886:	4b26      	ldr	r3, [pc, #152]	@ (800d920 <_vfiprintf_r+0x224>)
 800d888:	bb1b      	cbnz	r3, 800d8d2 <_vfiprintf_r+0x1d6>
 800d88a:	9b03      	ldr	r3, [sp, #12]
 800d88c:	3307      	adds	r3, #7
 800d88e:	f023 0307 	bic.w	r3, r3, #7
 800d892:	3308      	adds	r3, #8
 800d894:	9303      	str	r3, [sp, #12]
 800d896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d898:	443b      	add	r3, r7
 800d89a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d89c:	e76a      	b.n	800d774 <_vfiprintf_r+0x78>
 800d89e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8a2:	460c      	mov	r4, r1
 800d8a4:	2001      	movs	r0, #1
 800d8a6:	e7a8      	b.n	800d7fa <_vfiprintf_r+0xfe>
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	3401      	adds	r4, #1
 800d8ac:	9305      	str	r3, [sp, #20]
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	f04f 0c0a 	mov.w	ip, #10
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8ba:	3a30      	subs	r2, #48	@ 0x30
 800d8bc:	2a09      	cmp	r2, #9
 800d8be:	d903      	bls.n	800d8c8 <_vfiprintf_r+0x1cc>
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d0c6      	beq.n	800d852 <_vfiprintf_r+0x156>
 800d8c4:	9105      	str	r1, [sp, #20]
 800d8c6:	e7c4      	b.n	800d852 <_vfiprintf_r+0x156>
 800d8c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8cc:	4604      	mov	r4, r0
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	e7f0      	b.n	800d8b4 <_vfiprintf_r+0x1b8>
 800d8d2:	ab03      	add	r3, sp, #12
 800d8d4:	9300      	str	r3, [sp, #0]
 800d8d6:	462a      	mov	r2, r5
 800d8d8:	4b12      	ldr	r3, [pc, #72]	@ (800d924 <_vfiprintf_r+0x228>)
 800d8da:	a904      	add	r1, sp, #16
 800d8dc:	4630      	mov	r0, r6
 800d8de:	f3af 8000 	nop.w
 800d8e2:	4607      	mov	r7, r0
 800d8e4:	1c78      	adds	r0, r7, #1
 800d8e6:	d1d6      	bne.n	800d896 <_vfiprintf_r+0x19a>
 800d8e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8ea:	07d9      	lsls	r1, r3, #31
 800d8ec:	d405      	bmi.n	800d8fa <_vfiprintf_r+0x1fe>
 800d8ee:	89ab      	ldrh	r3, [r5, #12]
 800d8f0:	059a      	lsls	r2, r3, #22
 800d8f2:	d402      	bmi.n	800d8fa <_vfiprintf_r+0x1fe>
 800d8f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8f6:	f7ff fb3d 	bl	800cf74 <__retarget_lock_release_recursive>
 800d8fa:	89ab      	ldrh	r3, [r5, #12]
 800d8fc:	065b      	lsls	r3, r3, #25
 800d8fe:	f53f af1f 	bmi.w	800d740 <_vfiprintf_r+0x44>
 800d902:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d904:	e71e      	b.n	800d744 <_vfiprintf_r+0x48>
 800d906:	ab03      	add	r3, sp, #12
 800d908:	9300      	str	r3, [sp, #0]
 800d90a:	462a      	mov	r2, r5
 800d90c:	4b05      	ldr	r3, [pc, #20]	@ (800d924 <_vfiprintf_r+0x228>)
 800d90e:	a904      	add	r1, sp, #16
 800d910:	4630      	mov	r0, r6
 800d912:	f000 f879 	bl	800da08 <_printf_i>
 800d916:	e7e4      	b.n	800d8e2 <_vfiprintf_r+0x1e6>
 800d918:	0800f90c 	.word	0x0800f90c
 800d91c:	0800f916 	.word	0x0800f916
 800d920:	00000000 	.word	0x00000000
 800d924:	0800d6d7 	.word	0x0800d6d7
 800d928:	0800f912 	.word	0x0800f912

0800d92c <_printf_common>:
 800d92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d930:	4616      	mov	r6, r2
 800d932:	4698      	mov	r8, r3
 800d934:	688a      	ldr	r2, [r1, #8]
 800d936:	690b      	ldr	r3, [r1, #16]
 800d938:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d93c:	4293      	cmp	r3, r2
 800d93e:	bfb8      	it	lt
 800d940:	4613      	movlt	r3, r2
 800d942:	6033      	str	r3, [r6, #0]
 800d944:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d948:	4607      	mov	r7, r0
 800d94a:	460c      	mov	r4, r1
 800d94c:	b10a      	cbz	r2, 800d952 <_printf_common+0x26>
 800d94e:	3301      	adds	r3, #1
 800d950:	6033      	str	r3, [r6, #0]
 800d952:	6823      	ldr	r3, [r4, #0]
 800d954:	0699      	lsls	r1, r3, #26
 800d956:	bf42      	ittt	mi
 800d958:	6833      	ldrmi	r3, [r6, #0]
 800d95a:	3302      	addmi	r3, #2
 800d95c:	6033      	strmi	r3, [r6, #0]
 800d95e:	6825      	ldr	r5, [r4, #0]
 800d960:	f015 0506 	ands.w	r5, r5, #6
 800d964:	d106      	bne.n	800d974 <_printf_common+0x48>
 800d966:	f104 0a19 	add.w	sl, r4, #25
 800d96a:	68e3      	ldr	r3, [r4, #12]
 800d96c:	6832      	ldr	r2, [r6, #0]
 800d96e:	1a9b      	subs	r3, r3, r2
 800d970:	42ab      	cmp	r3, r5
 800d972:	dc26      	bgt.n	800d9c2 <_printf_common+0x96>
 800d974:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d978:	6822      	ldr	r2, [r4, #0]
 800d97a:	3b00      	subs	r3, #0
 800d97c:	bf18      	it	ne
 800d97e:	2301      	movne	r3, #1
 800d980:	0692      	lsls	r2, r2, #26
 800d982:	d42b      	bmi.n	800d9dc <_printf_common+0xb0>
 800d984:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d988:	4641      	mov	r1, r8
 800d98a:	4638      	mov	r0, r7
 800d98c:	47c8      	blx	r9
 800d98e:	3001      	adds	r0, #1
 800d990:	d01e      	beq.n	800d9d0 <_printf_common+0xa4>
 800d992:	6823      	ldr	r3, [r4, #0]
 800d994:	6922      	ldr	r2, [r4, #16]
 800d996:	f003 0306 	and.w	r3, r3, #6
 800d99a:	2b04      	cmp	r3, #4
 800d99c:	bf02      	ittt	eq
 800d99e:	68e5      	ldreq	r5, [r4, #12]
 800d9a0:	6833      	ldreq	r3, [r6, #0]
 800d9a2:	1aed      	subeq	r5, r5, r3
 800d9a4:	68a3      	ldr	r3, [r4, #8]
 800d9a6:	bf0c      	ite	eq
 800d9a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d9ac:	2500      	movne	r5, #0
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	bfc4      	itt	gt
 800d9b2:	1a9b      	subgt	r3, r3, r2
 800d9b4:	18ed      	addgt	r5, r5, r3
 800d9b6:	2600      	movs	r6, #0
 800d9b8:	341a      	adds	r4, #26
 800d9ba:	42b5      	cmp	r5, r6
 800d9bc:	d11a      	bne.n	800d9f4 <_printf_common+0xc8>
 800d9be:	2000      	movs	r0, #0
 800d9c0:	e008      	b.n	800d9d4 <_printf_common+0xa8>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	4652      	mov	r2, sl
 800d9c6:	4641      	mov	r1, r8
 800d9c8:	4638      	mov	r0, r7
 800d9ca:	47c8      	blx	r9
 800d9cc:	3001      	adds	r0, #1
 800d9ce:	d103      	bne.n	800d9d8 <_printf_common+0xac>
 800d9d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9d8:	3501      	adds	r5, #1
 800d9da:	e7c6      	b.n	800d96a <_printf_common+0x3e>
 800d9dc:	18e1      	adds	r1, r4, r3
 800d9de:	1c5a      	adds	r2, r3, #1
 800d9e0:	2030      	movs	r0, #48	@ 0x30
 800d9e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d9e6:	4422      	add	r2, r4
 800d9e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d9ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d9f0:	3302      	adds	r3, #2
 800d9f2:	e7c7      	b.n	800d984 <_printf_common+0x58>
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	4622      	mov	r2, r4
 800d9f8:	4641      	mov	r1, r8
 800d9fa:	4638      	mov	r0, r7
 800d9fc:	47c8      	blx	r9
 800d9fe:	3001      	adds	r0, #1
 800da00:	d0e6      	beq.n	800d9d0 <_printf_common+0xa4>
 800da02:	3601      	adds	r6, #1
 800da04:	e7d9      	b.n	800d9ba <_printf_common+0x8e>
	...

0800da08 <_printf_i>:
 800da08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da0c:	7e0f      	ldrb	r7, [r1, #24]
 800da0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da10:	2f78      	cmp	r7, #120	@ 0x78
 800da12:	4691      	mov	r9, r2
 800da14:	4680      	mov	r8, r0
 800da16:	460c      	mov	r4, r1
 800da18:	469a      	mov	sl, r3
 800da1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800da1e:	d807      	bhi.n	800da30 <_printf_i+0x28>
 800da20:	2f62      	cmp	r7, #98	@ 0x62
 800da22:	d80a      	bhi.n	800da3a <_printf_i+0x32>
 800da24:	2f00      	cmp	r7, #0
 800da26:	f000 80d1 	beq.w	800dbcc <_printf_i+0x1c4>
 800da2a:	2f58      	cmp	r7, #88	@ 0x58
 800da2c:	f000 80b8 	beq.w	800dba0 <_printf_i+0x198>
 800da30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800da38:	e03a      	b.n	800dab0 <_printf_i+0xa8>
 800da3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800da3e:	2b15      	cmp	r3, #21
 800da40:	d8f6      	bhi.n	800da30 <_printf_i+0x28>
 800da42:	a101      	add	r1, pc, #4	@ (adr r1, 800da48 <_printf_i+0x40>)
 800da44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da48:	0800daa1 	.word	0x0800daa1
 800da4c:	0800dab5 	.word	0x0800dab5
 800da50:	0800da31 	.word	0x0800da31
 800da54:	0800da31 	.word	0x0800da31
 800da58:	0800da31 	.word	0x0800da31
 800da5c:	0800da31 	.word	0x0800da31
 800da60:	0800dab5 	.word	0x0800dab5
 800da64:	0800da31 	.word	0x0800da31
 800da68:	0800da31 	.word	0x0800da31
 800da6c:	0800da31 	.word	0x0800da31
 800da70:	0800da31 	.word	0x0800da31
 800da74:	0800dbb3 	.word	0x0800dbb3
 800da78:	0800dadf 	.word	0x0800dadf
 800da7c:	0800db6d 	.word	0x0800db6d
 800da80:	0800da31 	.word	0x0800da31
 800da84:	0800da31 	.word	0x0800da31
 800da88:	0800dbd5 	.word	0x0800dbd5
 800da8c:	0800da31 	.word	0x0800da31
 800da90:	0800dadf 	.word	0x0800dadf
 800da94:	0800da31 	.word	0x0800da31
 800da98:	0800da31 	.word	0x0800da31
 800da9c:	0800db75 	.word	0x0800db75
 800daa0:	6833      	ldr	r3, [r6, #0]
 800daa2:	1d1a      	adds	r2, r3, #4
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	6032      	str	r2, [r6, #0]
 800daa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800daac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dab0:	2301      	movs	r3, #1
 800dab2:	e09c      	b.n	800dbee <_printf_i+0x1e6>
 800dab4:	6833      	ldr	r3, [r6, #0]
 800dab6:	6820      	ldr	r0, [r4, #0]
 800dab8:	1d19      	adds	r1, r3, #4
 800daba:	6031      	str	r1, [r6, #0]
 800dabc:	0606      	lsls	r6, r0, #24
 800dabe:	d501      	bpl.n	800dac4 <_printf_i+0xbc>
 800dac0:	681d      	ldr	r5, [r3, #0]
 800dac2:	e003      	b.n	800dacc <_printf_i+0xc4>
 800dac4:	0645      	lsls	r5, r0, #25
 800dac6:	d5fb      	bpl.n	800dac0 <_printf_i+0xb8>
 800dac8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dacc:	2d00      	cmp	r5, #0
 800dace:	da03      	bge.n	800dad8 <_printf_i+0xd0>
 800dad0:	232d      	movs	r3, #45	@ 0x2d
 800dad2:	426d      	negs	r5, r5
 800dad4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dad8:	4858      	ldr	r0, [pc, #352]	@ (800dc3c <_printf_i+0x234>)
 800dada:	230a      	movs	r3, #10
 800dadc:	e011      	b.n	800db02 <_printf_i+0xfa>
 800dade:	6821      	ldr	r1, [r4, #0]
 800dae0:	6833      	ldr	r3, [r6, #0]
 800dae2:	0608      	lsls	r0, r1, #24
 800dae4:	f853 5b04 	ldr.w	r5, [r3], #4
 800dae8:	d402      	bmi.n	800daf0 <_printf_i+0xe8>
 800daea:	0649      	lsls	r1, r1, #25
 800daec:	bf48      	it	mi
 800daee:	b2ad      	uxthmi	r5, r5
 800daf0:	2f6f      	cmp	r7, #111	@ 0x6f
 800daf2:	4852      	ldr	r0, [pc, #328]	@ (800dc3c <_printf_i+0x234>)
 800daf4:	6033      	str	r3, [r6, #0]
 800daf6:	bf14      	ite	ne
 800daf8:	230a      	movne	r3, #10
 800dafa:	2308      	moveq	r3, #8
 800dafc:	2100      	movs	r1, #0
 800dafe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800db02:	6866      	ldr	r6, [r4, #4]
 800db04:	60a6      	str	r6, [r4, #8]
 800db06:	2e00      	cmp	r6, #0
 800db08:	db05      	blt.n	800db16 <_printf_i+0x10e>
 800db0a:	6821      	ldr	r1, [r4, #0]
 800db0c:	432e      	orrs	r6, r5
 800db0e:	f021 0104 	bic.w	r1, r1, #4
 800db12:	6021      	str	r1, [r4, #0]
 800db14:	d04b      	beq.n	800dbae <_printf_i+0x1a6>
 800db16:	4616      	mov	r6, r2
 800db18:	fbb5 f1f3 	udiv	r1, r5, r3
 800db1c:	fb03 5711 	mls	r7, r3, r1, r5
 800db20:	5dc7      	ldrb	r7, [r0, r7]
 800db22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db26:	462f      	mov	r7, r5
 800db28:	42bb      	cmp	r3, r7
 800db2a:	460d      	mov	r5, r1
 800db2c:	d9f4      	bls.n	800db18 <_printf_i+0x110>
 800db2e:	2b08      	cmp	r3, #8
 800db30:	d10b      	bne.n	800db4a <_printf_i+0x142>
 800db32:	6823      	ldr	r3, [r4, #0]
 800db34:	07df      	lsls	r7, r3, #31
 800db36:	d508      	bpl.n	800db4a <_printf_i+0x142>
 800db38:	6923      	ldr	r3, [r4, #16]
 800db3a:	6861      	ldr	r1, [r4, #4]
 800db3c:	4299      	cmp	r1, r3
 800db3e:	bfde      	ittt	le
 800db40:	2330      	movle	r3, #48	@ 0x30
 800db42:	f806 3c01 	strble.w	r3, [r6, #-1]
 800db46:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800db4a:	1b92      	subs	r2, r2, r6
 800db4c:	6122      	str	r2, [r4, #16]
 800db4e:	f8cd a000 	str.w	sl, [sp]
 800db52:	464b      	mov	r3, r9
 800db54:	aa03      	add	r2, sp, #12
 800db56:	4621      	mov	r1, r4
 800db58:	4640      	mov	r0, r8
 800db5a:	f7ff fee7 	bl	800d92c <_printf_common>
 800db5e:	3001      	adds	r0, #1
 800db60:	d14a      	bne.n	800dbf8 <_printf_i+0x1f0>
 800db62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db66:	b004      	add	sp, #16
 800db68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db6c:	6823      	ldr	r3, [r4, #0]
 800db6e:	f043 0320 	orr.w	r3, r3, #32
 800db72:	6023      	str	r3, [r4, #0]
 800db74:	4832      	ldr	r0, [pc, #200]	@ (800dc40 <_printf_i+0x238>)
 800db76:	2778      	movs	r7, #120	@ 0x78
 800db78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800db7c:	6823      	ldr	r3, [r4, #0]
 800db7e:	6831      	ldr	r1, [r6, #0]
 800db80:	061f      	lsls	r7, r3, #24
 800db82:	f851 5b04 	ldr.w	r5, [r1], #4
 800db86:	d402      	bmi.n	800db8e <_printf_i+0x186>
 800db88:	065f      	lsls	r7, r3, #25
 800db8a:	bf48      	it	mi
 800db8c:	b2ad      	uxthmi	r5, r5
 800db8e:	6031      	str	r1, [r6, #0]
 800db90:	07d9      	lsls	r1, r3, #31
 800db92:	bf44      	itt	mi
 800db94:	f043 0320 	orrmi.w	r3, r3, #32
 800db98:	6023      	strmi	r3, [r4, #0]
 800db9a:	b11d      	cbz	r5, 800dba4 <_printf_i+0x19c>
 800db9c:	2310      	movs	r3, #16
 800db9e:	e7ad      	b.n	800dafc <_printf_i+0xf4>
 800dba0:	4826      	ldr	r0, [pc, #152]	@ (800dc3c <_printf_i+0x234>)
 800dba2:	e7e9      	b.n	800db78 <_printf_i+0x170>
 800dba4:	6823      	ldr	r3, [r4, #0]
 800dba6:	f023 0320 	bic.w	r3, r3, #32
 800dbaa:	6023      	str	r3, [r4, #0]
 800dbac:	e7f6      	b.n	800db9c <_printf_i+0x194>
 800dbae:	4616      	mov	r6, r2
 800dbb0:	e7bd      	b.n	800db2e <_printf_i+0x126>
 800dbb2:	6833      	ldr	r3, [r6, #0]
 800dbb4:	6825      	ldr	r5, [r4, #0]
 800dbb6:	6961      	ldr	r1, [r4, #20]
 800dbb8:	1d18      	adds	r0, r3, #4
 800dbba:	6030      	str	r0, [r6, #0]
 800dbbc:	062e      	lsls	r6, r5, #24
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	d501      	bpl.n	800dbc6 <_printf_i+0x1be>
 800dbc2:	6019      	str	r1, [r3, #0]
 800dbc4:	e002      	b.n	800dbcc <_printf_i+0x1c4>
 800dbc6:	0668      	lsls	r0, r5, #25
 800dbc8:	d5fb      	bpl.n	800dbc2 <_printf_i+0x1ba>
 800dbca:	8019      	strh	r1, [r3, #0]
 800dbcc:	2300      	movs	r3, #0
 800dbce:	6123      	str	r3, [r4, #16]
 800dbd0:	4616      	mov	r6, r2
 800dbd2:	e7bc      	b.n	800db4e <_printf_i+0x146>
 800dbd4:	6833      	ldr	r3, [r6, #0]
 800dbd6:	1d1a      	adds	r2, r3, #4
 800dbd8:	6032      	str	r2, [r6, #0]
 800dbda:	681e      	ldr	r6, [r3, #0]
 800dbdc:	6862      	ldr	r2, [r4, #4]
 800dbde:	2100      	movs	r1, #0
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	f7f2 fadd 	bl	80001a0 <memchr>
 800dbe6:	b108      	cbz	r0, 800dbec <_printf_i+0x1e4>
 800dbe8:	1b80      	subs	r0, r0, r6
 800dbea:	6060      	str	r0, [r4, #4]
 800dbec:	6863      	ldr	r3, [r4, #4]
 800dbee:	6123      	str	r3, [r4, #16]
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbf6:	e7aa      	b.n	800db4e <_printf_i+0x146>
 800dbf8:	6923      	ldr	r3, [r4, #16]
 800dbfa:	4632      	mov	r2, r6
 800dbfc:	4649      	mov	r1, r9
 800dbfe:	4640      	mov	r0, r8
 800dc00:	47d0      	blx	sl
 800dc02:	3001      	adds	r0, #1
 800dc04:	d0ad      	beq.n	800db62 <_printf_i+0x15a>
 800dc06:	6823      	ldr	r3, [r4, #0]
 800dc08:	079b      	lsls	r3, r3, #30
 800dc0a:	d413      	bmi.n	800dc34 <_printf_i+0x22c>
 800dc0c:	68e0      	ldr	r0, [r4, #12]
 800dc0e:	9b03      	ldr	r3, [sp, #12]
 800dc10:	4298      	cmp	r0, r3
 800dc12:	bfb8      	it	lt
 800dc14:	4618      	movlt	r0, r3
 800dc16:	e7a6      	b.n	800db66 <_printf_i+0x15e>
 800dc18:	2301      	movs	r3, #1
 800dc1a:	4632      	mov	r2, r6
 800dc1c:	4649      	mov	r1, r9
 800dc1e:	4640      	mov	r0, r8
 800dc20:	47d0      	blx	sl
 800dc22:	3001      	adds	r0, #1
 800dc24:	d09d      	beq.n	800db62 <_printf_i+0x15a>
 800dc26:	3501      	adds	r5, #1
 800dc28:	68e3      	ldr	r3, [r4, #12]
 800dc2a:	9903      	ldr	r1, [sp, #12]
 800dc2c:	1a5b      	subs	r3, r3, r1
 800dc2e:	42ab      	cmp	r3, r5
 800dc30:	dcf2      	bgt.n	800dc18 <_printf_i+0x210>
 800dc32:	e7eb      	b.n	800dc0c <_printf_i+0x204>
 800dc34:	2500      	movs	r5, #0
 800dc36:	f104 0619 	add.w	r6, r4, #25
 800dc3a:	e7f5      	b.n	800dc28 <_printf_i+0x220>
 800dc3c:	0800f91d 	.word	0x0800f91d
 800dc40:	0800f92e 	.word	0x0800f92e

0800dc44 <_scanf_chars>:
 800dc44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc48:	4615      	mov	r5, r2
 800dc4a:	688a      	ldr	r2, [r1, #8]
 800dc4c:	4680      	mov	r8, r0
 800dc4e:	460c      	mov	r4, r1
 800dc50:	b932      	cbnz	r2, 800dc60 <_scanf_chars+0x1c>
 800dc52:	698a      	ldr	r2, [r1, #24]
 800dc54:	2a00      	cmp	r2, #0
 800dc56:	bf14      	ite	ne
 800dc58:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800dc5c:	2201      	moveq	r2, #1
 800dc5e:	608a      	str	r2, [r1, #8]
 800dc60:	6822      	ldr	r2, [r4, #0]
 800dc62:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800dcf4 <_scanf_chars+0xb0>
 800dc66:	06d1      	lsls	r1, r2, #27
 800dc68:	bf5f      	itttt	pl
 800dc6a:	681a      	ldrpl	r2, [r3, #0]
 800dc6c:	1d11      	addpl	r1, r2, #4
 800dc6e:	6019      	strpl	r1, [r3, #0]
 800dc70:	6816      	ldrpl	r6, [r2, #0]
 800dc72:	2700      	movs	r7, #0
 800dc74:	69a0      	ldr	r0, [r4, #24]
 800dc76:	b188      	cbz	r0, 800dc9c <_scanf_chars+0x58>
 800dc78:	2801      	cmp	r0, #1
 800dc7a:	d107      	bne.n	800dc8c <_scanf_chars+0x48>
 800dc7c:	682b      	ldr	r3, [r5, #0]
 800dc7e:	781a      	ldrb	r2, [r3, #0]
 800dc80:	6963      	ldr	r3, [r4, #20]
 800dc82:	5c9b      	ldrb	r3, [r3, r2]
 800dc84:	b953      	cbnz	r3, 800dc9c <_scanf_chars+0x58>
 800dc86:	2f00      	cmp	r7, #0
 800dc88:	d031      	beq.n	800dcee <_scanf_chars+0xaa>
 800dc8a:	e022      	b.n	800dcd2 <_scanf_chars+0x8e>
 800dc8c:	2802      	cmp	r0, #2
 800dc8e:	d120      	bne.n	800dcd2 <_scanf_chars+0x8e>
 800dc90:	682b      	ldr	r3, [r5, #0]
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	f819 3003 	ldrb.w	r3, [r9, r3]
 800dc98:	071b      	lsls	r3, r3, #28
 800dc9a:	d41a      	bmi.n	800dcd2 <_scanf_chars+0x8e>
 800dc9c:	6823      	ldr	r3, [r4, #0]
 800dc9e:	06da      	lsls	r2, r3, #27
 800dca0:	bf5e      	ittt	pl
 800dca2:	682b      	ldrpl	r3, [r5, #0]
 800dca4:	781b      	ldrbpl	r3, [r3, #0]
 800dca6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800dcaa:	682a      	ldr	r2, [r5, #0]
 800dcac:	686b      	ldr	r3, [r5, #4]
 800dcae:	3201      	adds	r2, #1
 800dcb0:	602a      	str	r2, [r5, #0]
 800dcb2:	68a2      	ldr	r2, [r4, #8]
 800dcb4:	3b01      	subs	r3, #1
 800dcb6:	3a01      	subs	r2, #1
 800dcb8:	606b      	str	r3, [r5, #4]
 800dcba:	3701      	adds	r7, #1
 800dcbc:	60a2      	str	r2, [r4, #8]
 800dcbe:	b142      	cbz	r2, 800dcd2 <_scanf_chars+0x8e>
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	dcd7      	bgt.n	800dc74 <_scanf_chars+0x30>
 800dcc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dcc8:	4629      	mov	r1, r5
 800dcca:	4640      	mov	r0, r8
 800dccc:	4798      	blx	r3
 800dcce:	2800      	cmp	r0, #0
 800dcd0:	d0d0      	beq.n	800dc74 <_scanf_chars+0x30>
 800dcd2:	6823      	ldr	r3, [r4, #0]
 800dcd4:	f013 0310 	ands.w	r3, r3, #16
 800dcd8:	d105      	bne.n	800dce6 <_scanf_chars+0xa2>
 800dcda:	68e2      	ldr	r2, [r4, #12]
 800dcdc:	3201      	adds	r2, #1
 800dcde:	60e2      	str	r2, [r4, #12]
 800dce0:	69a2      	ldr	r2, [r4, #24]
 800dce2:	b102      	cbz	r2, 800dce6 <_scanf_chars+0xa2>
 800dce4:	7033      	strb	r3, [r6, #0]
 800dce6:	6923      	ldr	r3, [r4, #16]
 800dce8:	443b      	add	r3, r7
 800dcea:	6123      	str	r3, [r4, #16]
 800dcec:	2000      	movs	r0, #0
 800dcee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcf2:	bf00      	nop
 800dcf4:	0800f95b 	.word	0x0800f95b

0800dcf8 <_scanf_i>:
 800dcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcfc:	4698      	mov	r8, r3
 800dcfe:	4b74      	ldr	r3, [pc, #464]	@ (800ded0 <_scanf_i+0x1d8>)
 800dd00:	460c      	mov	r4, r1
 800dd02:	4682      	mov	sl, r0
 800dd04:	4616      	mov	r6, r2
 800dd06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dd0a:	b087      	sub	sp, #28
 800dd0c:	ab03      	add	r3, sp, #12
 800dd0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800dd12:	4b70      	ldr	r3, [pc, #448]	@ (800ded4 <_scanf_i+0x1dc>)
 800dd14:	69a1      	ldr	r1, [r4, #24]
 800dd16:	4a70      	ldr	r2, [pc, #448]	@ (800ded8 <_scanf_i+0x1e0>)
 800dd18:	2903      	cmp	r1, #3
 800dd1a:	bf08      	it	eq
 800dd1c:	461a      	moveq	r2, r3
 800dd1e:	68a3      	ldr	r3, [r4, #8]
 800dd20:	9201      	str	r2, [sp, #4]
 800dd22:	1e5a      	subs	r2, r3, #1
 800dd24:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800dd28:	bf88      	it	hi
 800dd2a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800dd2e:	4627      	mov	r7, r4
 800dd30:	bf82      	ittt	hi
 800dd32:	eb03 0905 	addhi.w	r9, r3, r5
 800dd36:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800dd3a:	60a3      	strhi	r3, [r4, #8]
 800dd3c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800dd40:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800dd44:	bf98      	it	ls
 800dd46:	f04f 0900 	movls.w	r9, #0
 800dd4a:	6023      	str	r3, [r4, #0]
 800dd4c:	463d      	mov	r5, r7
 800dd4e:	f04f 0b00 	mov.w	fp, #0
 800dd52:	6831      	ldr	r1, [r6, #0]
 800dd54:	ab03      	add	r3, sp, #12
 800dd56:	7809      	ldrb	r1, [r1, #0]
 800dd58:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800dd5c:	2202      	movs	r2, #2
 800dd5e:	f7f2 fa1f 	bl	80001a0 <memchr>
 800dd62:	b328      	cbz	r0, 800ddb0 <_scanf_i+0xb8>
 800dd64:	f1bb 0f01 	cmp.w	fp, #1
 800dd68:	d159      	bne.n	800de1e <_scanf_i+0x126>
 800dd6a:	6862      	ldr	r2, [r4, #4]
 800dd6c:	b92a      	cbnz	r2, 800dd7a <_scanf_i+0x82>
 800dd6e:	6822      	ldr	r2, [r4, #0]
 800dd70:	2108      	movs	r1, #8
 800dd72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dd76:	6061      	str	r1, [r4, #4]
 800dd78:	6022      	str	r2, [r4, #0]
 800dd7a:	6822      	ldr	r2, [r4, #0]
 800dd7c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800dd80:	6022      	str	r2, [r4, #0]
 800dd82:	68a2      	ldr	r2, [r4, #8]
 800dd84:	1e51      	subs	r1, r2, #1
 800dd86:	60a1      	str	r1, [r4, #8]
 800dd88:	b192      	cbz	r2, 800ddb0 <_scanf_i+0xb8>
 800dd8a:	6832      	ldr	r2, [r6, #0]
 800dd8c:	1c51      	adds	r1, r2, #1
 800dd8e:	6031      	str	r1, [r6, #0]
 800dd90:	7812      	ldrb	r2, [r2, #0]
 800dd92:	f805 2b01 	strb.w	r2, [r5], #1
 800dd96:	6872      	ldr	r2, [r6, #4]
 800dd98:	3a01      	subs	r2, #1
 800dd9a:	2a00      	cmp	r2, #0
 800dd9c:	6072      	str	r2, [r6, #4]
 800dd9e:	dc07      	bgt.n	800ddb0 <_scanf_i+0xb8>
 800dda0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800dda4:	4631      	mov	r1, r6
 800dda6:	4650      	mov	r0, sl
 800dda8:	4790      	blx	r2
 800ddaa:	2800      	cmp	r0, #0
 800ddac:	f040 8085 	bne.w	800deba <_scanf_i+0x1c2>
 800ddb0:	f10b 0b01 	add.w	fp, fp, #1
 800ddb4:	f1bb 0f03 	cmp.w	fp, #3
 800ddb8:	d1cb      	bne.n	800dd52 <_scanf_i+0x5a>
 800ddba:	6863      	ldr	r3, [r4, #4]
 800ddbc:	b90b      	cbnz	r3, 800ddc2 <_scanf_i+0xca>
 800ddbe:	230a      	movs	r3, #10
 800ddc0:	6063      	str	r3, [r4, #4]
 800ddc2:	6863      	ldr	r3, [r4, #4]
 800ddc4:	4945      	ldr	r1, [pc, #276]	@ (800dedc <_scanf_i+0x1e4>)
 800ddc6:	6960      	ldr	r0, [r4, #20]
 800ddc8:	1ac9      	subs	r1, r1, r3
 800ddca:	f000 f889 	bl	800dee0 <__sccl>
 800ddce:	f04f 0b00 	mov.w	fp, #0
 800ddd2:	68a3      	ldr	r3, [r4, #8]
 800ddd4:	6822      	ldr	r2, [r4, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d03d      	beq.n	800de56 <_scanf_i+0x15e>
 800ddda:	6831      	ldr	r1, [r6, #0]
 800dddc:	6960      	ldr	r0, [r4, #20]
 800ddde:	f891 c000 	ldrb.w	ip, [r1]
 800dde2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800dde6:	2800      	cmp	r0, #0
 800dde8:	d035      	beq.n	800de56 <_scanf_i+0x15e>
 800ddea:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ddee:	d124      	bne.n	800de3a <_scanf_i+0x142>
 800ddf0:	0510      	lsls	r0, r2, #20
 800ddf2:	d522      	bpl.n	800de3a <_scanf_i+0x142>
 800ddf4:	f10b 0b01 	add.w	fp, fp, #1
 800ddf8:	f1b9 0f00 	cmp.w	r9, #0
 800ddfc:	d003      	beq.n	800de06 <_scanf_i+0x10e>
 800ddfe:	3301      	adds	r3, #1
 800de00:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800de04:	60a3      	str	r3, [r4, #8]
 800de06:	6873      	ldr	r3, [r6, #4]
 800de08:	3b01      	subs	r3, #1
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	6073      	str	r3, [r6, #4]
 800de0e:	dd1b      	ble.n	800de48 <_scanf_i+0x150>
 800de10:	6833      	ldr	r3, [r6, #0]
 800de12:	3301      	adds	r3, #1
 800de14:	6033      	str	r3, [r6, #0]
 800de16:	68a3      	ldr	r3, [r4, #8]
 800de18:	3b01      	subs	r3, #1
 800de1a:	60a3      	str	r3, [r4, #8]
 800de1c:	e7d9      	b.n	800ddd2 <_scanf_i+0xda>
 800de1e:	f1bb 0f02 	cmp.w	fp, #2
 800de22:	d1ae      	bne.n	800dd82 <_scanf_i+0x8a>
 800de24:	6822      	ldr	r2, [r4, #0]
 800de26:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800de2a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800de2e:	d1bf      	bne.n	800ddb0 <_scanf_i+0xb8>
 800de30:	2110      	movs	r1, #16
 800de32:	6061      	str	r1, [r4, #4]
 800de34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800de38:	e7a2      	b.n	800dd80 <_scanf_i+0x88>
 800de3a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800de3e:	6022      	str	r2, [r4, #0]
 800de40:	780b      	ldrb	r3, [r1, #0]
 800de42:	f805 3b01 	strb.w	r3, [r5], #1
 800de46:	e7de      	b.n	800de06 <_scanf_i+0x10e>
 800de48:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800de4c:	4631      	mov	r1, r6
 800de4e:	4650      	mov	r0, sl
 800de50:	4798      	blx	r3
 800de52:	2800      	cmp	r0, #0
 800de54:	d0df      	beq.n	800de16 <_scanf_i+0x11e>
 800de56:	6823      	ldr	r3, [r4, #0]
 800de58:	05d9      	lsls	r1, r3, #23
 800de5a:	d50d      	bpl.n	800de78 <_scanf_i+0x180>
 800de5c:	42bd      	cmp	r5, r7
 800de5e:	d909      	bls.n	800de74 <_scanf_i+0x17c>
 800de60:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800de64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800de68:	4632      	mov	r2, r6
 800de6a:	4650      	mov	r0, sl
 800de6c:	4798      	blx	r3
 800de6e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800de72:	464d      	mov	r5, r9
 800de74:	42bd      	cmp	r5, r7
 800de76:	d028      	beq.n	800deca <_scanf_i+0x1d2>
 800de78:	6822      	ldr	r2, [r4, #0]
 800de7a:	f012 0210 	ands.w	r2, r2, #16
 800de7e:	d113      	bne.n	800dea8 <_scanf_i+0x1b0>
 800de80:	702a      	strb	r2, [r5, #0]
 800de82:	6863      	ldr	r3, [r4, #4]
 800de84:	9e01      	ldr	r6, [sp, #4]
 800de86:	4639      	mov	r1, r7
 800de88:	4650      	mov	r0, sl
 800de8a:	47b0      	blx	r6
 800de8c:	f8d8 3000 	ldr.w	r3, [r8]
 800de90:	6821      	ldr	r1, [r4, #0]
 800de92:	1d1a      	adds	r2, r3, #4
 800de94:	f8c8 2000 	str.w	r2, [r8]
 800de98:	f011 0f20 	tst.w	r1, #32
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	d00f      	beq.n	800dec0 <_scanf_i+0x1c8>
 800dea0:	6018      	str	r0, [r3, #0]
 800dea2:	68e3      	ldr	r3, [r4, #12]
 800dea4:	3301      	adds	r3, #1
 800dea6:	60e3      	str	r3, [r4, #12]
 800dea8:	6923      	ldr	r3, [r4, #16]
 800deaa:	1bed      	subs	r5, r5, r7
 800deac:	445d      	add	r5, fp
 800deae:	442b      	add	r3, r5
 800deb0:	6123      	str	r3, [r4, #16]
 800deb2:	2000      	movs	r0, #0
 800deb4:	b007      	add	sp, #28
 800deb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deba:	f04f 0b00 	mov.w	fp, #0
 800debe:	e7ca      	b.n	800de56 <_scanf_i+0x15e>
 800dec0:	07ca      	lsls	r2, r1, #31
 800dec2:	bf4c      	ite	mi
 800dec4:	8018      	strhmi	r0, [r3, #0]
 800dec6:	6018      	strpl	r0, [r3, #0]
 800dec8:	e7eb      	b.n	800dea2 <_scanf_i+0x1aa>
 800deca:	2001      	movs	r0, #1
 800decc:	e7f2      	b.n	800deb4 <_scanf_i+0x1bc>
 800dece:	bf00      	nop
 800ded0:	0800f648 	.word	0x0800f648
 800ded4:	0800e2ed 	.word	0x0800e2ed
 800ded8:	0800e3cd 	.word	0x0800e3cd
 800dedc:	0800f94f 	.word	0x0800f94f

0800dee0 <__sccl>:
 800dee0:	b570      	push	{r4, r5, r6, lr}
 800dee2:	780b      	ldrb	r3, [r1, #0]
 800dee4:	4604      	mov	r4, r0
 800dee6:	2b5e      	cmp	r3, #94	@ 0x5e
 800dee8:	bf0b      	itete	eq
 800deea:	784b      	ldrbeq	r3, [r1, #1]
 800deec:	1c4a      	addne	r2, r1, #1
 800deee:	1c8a      	addeq	r2, r1, #2
 800def0:	2100      	movne	r1, #0
 800def2:	bf08      	it	eq
 800def4:	2101      	moveq	r1, #1
 800def6:	3801      	subs	r0, #1
 800def8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800defc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800df00:	42a8      	cmp	r0, r5
 800df02:	d1fb      	bne.n	800defc <__sccl+0x1c>
 800df04:	b90b      	cbnz	r3, 800df0a <__sccl+0x2a>
 800df06:	1e50      	subs	r0, r2, #1
 800df08:	bd70      	pop	{r4, r5, r6, pc}
 800df0a:	f081 0101 	eor.w	r1, r1, #1
 800df0e:	54e1      	strb	r1, [r4, r3]
 800df10:	4610      	mov	r0, r2
 800df12:	4602      	mov	r2, r0
 800df14:	f812 5b01 	ldrb.w	r5, [r2], #1
 800df18:	2d2d      	cmp	r5, #45	@ 0x2d
 800df1a:	d005      	beq.n	800df28 <__sccl+0x48>
 800df1c:	2d5d      	cmp	r5, #93	@ 0x5d
 800df1e:	d016      	beq.n	800df4e <__sccl+0x6e>
 800df20:	2d00      	cmp	r5, #0
 800df22:	d0f1      	beq.n	800df08 <__sccl+0x28>
 800df24:	462b      	mov	r3, r5
 800df26:	e7f2      	b.n	800df0e <__sccl+0x2e>
 800df28:	7846      	ldrb	r6, [r0, #1]
 800df2a:	2e5d      	cmp	r6, #93	@ 0x5d
 800df2c:	d0fa      	beq.n	800df24 <__sccl+0x44>
 800df2e:	42b3      	cmp	r3, r6
 800df30:	dcf8      	bgt.n	800df24 <__sccl+0x44>
 800df32:	3002      	adds	r0, #2
 800df34:	461a      	mov	r2, r3
 800df36:	3201      	adds	r2, #1
 800df38:	4296      	cmp	r6, r2
 800df3a:	54a1      	strb	r1, [r4, r2]
 800df3c:	dcfb      	bgt.n	800df36 <__sccl+0x56>
 800df3e:	1af2      	subs	r2, r6, r3
 800df40:	3a01      	subs	r2, #1
 800df42:	1c5d      	adds	r5, r3, #1
 800df44:	42b3      	cmp	r3, r6
 800df46:	bfa8      	it	ge
 800df48:	2200      	movge	r2, #0
 800df4a:	18ab      	adds	r3, r5, r2
 800df4c:	e7e1      	b.n	800df12 <__sccl+0x32>
 800df4e:	4610      	mov	r0, r2
 800df50:	e7da      	b.n	800df08 <__sccl+0x28>
	...

0800df54 <__sflush_r>:
 800df54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800df58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df5c:	0716      	lsls	r6, r2, #28
 800df5e:	4605      	mov	r5, r0
 800df60:	460c      	mov	r4, r1
 800df62:	d454      	bmi.n	800e00e <__sflush_r+0xba>
 800df64:	684b      	ldr	r3, [r1, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	dc02      	bgt.n	800df70 <__sflush_r+0x1c>
 800df6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	dd48      	ble.n	800e002 <__sflush_r+0xae>
 800df70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800df72:	2e00      	cmp	r6, #0
 800df74:	d045      	beq.n	800e002 <__sflush_r+0xae>
 800df76:	2300      	movs	r3, #0
 800df78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800df7c:	682f      	ldr	r7, [r5, #0]
 800df7e:	6a21      	ldr	r1, [r4, #32]
 800df80:	602b      	str	r3, [r5, #0]
 800df82:	d030      	beq.n	800dfe6 <__sflush_r+0x92>
 800df84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800df86:	89a3      	ldrh	r3, [r4, #12]
 800df88:	0759      	lsls	r1, r3, #29
 800df8a:	d505      	bpl.n	800df98 <__sflush_r+0x44>
 800df8c:	6863      	ldr	r3, [r4, #4]
 800df8e:	1ad2      	subs	r2, r2, r3
 800df90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800df92:	b10b      	cbz	r3, 800df98 <__sflush_r+0x44>
 800df94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800df96:	1ad2      	subs	r2, r2, r3
 800df98:	2300      	movs	r3, #0
 800df9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800df9c:	6a21      	ldr	r1, [r4, #32]
 800df9e:	4628      	mov	r0, r5
 800dfa0:	47b0      	blx	r6
 800dfa2:	1c43      	adds	r3, r0, #1
 800dfa4:	89a3      	ldrh	r3, [r4, #12]
 800dfa6:	d106      	bne.n	800dfb6 <__sflush_r+0x62>
 800dfa8:	6829      	ldr	r1, [r5, #0]
 800dfaa:	291d      	cmp	r1, #29
 800dfac:	d82b      	bhi.n	800e006 <__sflush_r+0xb2>
 800dfae:	4a2a      	ldr	r2, [pc, #168]	@ (800e058 <__sflush_r+0x104>)
 800dfb0:	40ca      	lsrs	r2, r1
 800dfb2:	07d6      	lsls	r6, r2, #31
 800dfb4:	d527      	bpl.n	800e006 <__sflush_r+0xb2>
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	6062      	str	r2, [r4, #4]
 800dfba:	04d9      	lsls	r1, r3, #19
 800dfbc:	6922      	ldr	r2, [r4, #16]
 800dfbe:	6022      	str	r2, [r4, #0]
 800dfc0:	d504      	bpl.n	800dfcc <__sflush_r+0x78>
 800dfc2:	1c42      	adds	r2, r0, #1
 800dfc4:	d101      	bne.n	800dfca <__sflush_r+0x76>
 800dfc6:	682b      	ldr	r3, [r5, #0]
 800dfc8:	b903      	cbnz	r3, 800dfcc <__sflush_r+0x78>
 800dfca:	6560      	str	r0, [r4, #84]	@ 0x54
 800dfcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dfce:	602f      	str	r7, [r5, #0]
 800dfd0:	b1b9      	cbz	r1, 800e002 <__sflush_r+0xae>
 800dfd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dfd6:	4299      	cmp	r1, r3
 800dfd8:	d002      	beq.n	800dfe0 <__sflush_r+0x8c>
 800dfda:	4628      	mov	r0, r5
 800dfdc:	f7fe fff2 	bl	800cfc4 <_free_r>
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	6363      	str	r3, [r4, #52]	@ 0x34
 800dfe4:	e00d      	b.n	800e002 <__sflush_r+0xae>
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	4628      	mov	r0, r5
 800dfea:	47b0      	blx	r6
 800dfec:	4602      	mov	r2, r0
 800dfee:	1c50      	adds	r0, r2, #1
 800dff0:	d1c9      	bne.n	800df86 <__sflush_r+0x32>
 800dff2:	682b      	ldr	r3, [r5, #0]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d0c6      	beq.n	800df86 <__sflush_r+0x32>
 800dff8:	2b1d      	cmp	r3, #29
 800dffa:	d001      	beq.n	800e000 <__sflush_r+0xac>
 800dffc:	2b16      	cmp	r3, #22
 800dffe:	d11e      	bne.n	800e03e <__sflush_r+0xea>
 800e000:	602f      	str	r7, [r5, #0]
 800e002:	2000      	movs	r0, #0
 800e004:	e022      	b.n	800e04c <__sflush_r+0xf8>
 800e006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e00a:	b21b      	sxth	r3, r3
 800e00c:	e01b      	b.n	800e046 <__sflush_r+0xf2>
 800e00e:	690f      	ldr	r7, [r1, #16]
 800e010:	2f00      	cmp	r7, #0
 800e012:	d0f6      	beq.n	800e002 <__sflush_r+0xae>
 800e014:	0793      	lsls	r3, r2, #30
 800e016:	680e      	ldr	r6, [r1, #0]
 800e018:	bf08      	it	eq
 800e01a:	694b      	ldreq	r3, [r1, #20]
 800e01c:	600f      	str	r7, [r1, #0]
 800e01e:	bf18      	it	ne
 800e020:	2300      	movne	r3, #0
 800e022:	eba6 0807 	sub.w	r8, r6, r7
 800e026:	608b      	str	r3, [r1, #8]
 800e028:	f1b8 0f00 	cmp.w	r8, #0
 800e02c:	dde9      	ble.n	800e002 <__sflush_r+0xae>
 800e02e:	6a21      	ldr	r1, [r4, #32]
 800e030:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e032:	4643      	mov	r3, r8
 800e034:	463a      	mov	r2, r7
 800e036:	4628      	mov	r0, r5
 800e038:	47b0      	blx	r6
 800e03a:	2800      	cmp	r0, #0
 800e03c:	dc08      	bgt.n	800e050 <__sflush_r+0xfc>
 800e03e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e046:	81a3      	strh	r3, [r4, #12]
 800e048:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e050:	4407      	add	r7, r0
 800e052:	eba8 0800 	sub.w	r8, r8, r0
 800e056:	e7e7      	b.n	800e028 <__sflush_r+0xd4>
 800e058:	20400001 	.word	0x20400001

0800e05c <_fflush_r>:
 800e05c:	b538      	push	{r3, r4, r5, lr}
 800e05e:	690b      	ldr	r3, [r1, #16]
 800e060:	4605      	mov	r5, r0
 800e062:	460c      	mov	r4, r1
 800e064:	b913      	cbnz	r3, 800e06c <_fflush_r+0x10>
 800e066:	2500      	movs	r5, #0
 800e068:	4628      	mov	r0, r5
 800e06a:	bd38      	pop	{r3, r4, r5, pc}
 800e06c:	b118      	cbz	r0, 800e076 <_fflush_r+0x1a>
 800e06e:	6a03      	ldr	r3, [r0, #32]
 800e070:	b90b      	cbnz	r3, 800e076 <_fflush_r+0x1a>
 800e072:	f7fe fe5b 	bl	800cd2c <__sinit>
 800e076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d0f3      	beq.n	800e066 <_fflush_r+0xa>
 800e07e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e080:	07d0      	lsls	r0, r2, #31
 800e082:	d404      	bmi.n	800e08e <_fflush_r+0x32>
 800e084:	0599      	lsls	r1, r3, #22
 800e086:	d402      	bmi.n	800e08e <_fflush_r+0x32>
 800e088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e08a:	f7fe ff72 	bl	800cf72 <__retarget_lock_acquire_recursive>
 800e08e:	4628      	mov	r0, r5
 800e090:	4621      	mov	r1, r4
 800e092:	f7ff ff5f 	bl	800df54 <__sflush_r>
 800e096:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e098:	07da      	lsls	r2, r3, #31
 800e09a:	4605      	mov	r5, r0
 800e09c:	d4e4      	bmi.n	800e068 <_fflush_r+0xc>
 800e09e:	89a3      	ldrh	r3, [r4, #12]
 800e0a0:	059b      	lsls	r3, r3, #22
 800e0a2:	d4e1      	bmi.n	800e068 <_fflush_r+0xc>
 800e0a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e0a6:	f7fe ff65 	bl	800cf74 <__retarget_lock_release_recursive>
 800e0aa:	e7dd      	b.n	800e068 <_fflush_r+0xc>

0800e0ac <__submore>:
 800e0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b0:	460c      	mov	r4, r1
 800e0b2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e0b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e0b8:	4299      	cmp	r1, r3
 800e0ba:	d11d      	bne.n	800e0f8 <__submore+0x4c>
 800e0bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e0c0:	f7fe fc88 	bl	800c9d4 <_malloc_r>
 800e0c4:	b918      	cbnz	r0, 800e0ce <__submore+0x22>
 800e0c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e0d2:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e0d4:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800e0d8:	6360      	str	r0, [r4, #52]	@ 0x34
 800e0da:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e0de:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e0e2:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800e0e6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e0ea:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800e0ee:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e0f2:	6020      	str	r0, [r4, #0]
 800e0f4:	2000      	movs	r0, #0
 800e0f6:	e7e8      	b.n	800e0ca <__submore+0x1e>
 800e0f8:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e0fa:	0077      	lsls	r7, r6, #1
 800e0fc:	463a      	mov	r2, r7
 800e0fe:	f000 f80f 	bl	800e120 <_realloc_r>
 800e102:	4605      	mov	r5, r0
 800e104:	2800      	cmp	r0, #0
 800e106:	d0de      	beq.n	800e0c6 <__submore+0x1a>
 800e108:	eb00 0806 	add.w	r8, r0, r6
 800e10c:	4601      	mov	r1, r0
 800e10e:	4632      	mov	r2, r6
 800e110:	4640      	mov	r0, r8
 800e112:	f7fe ff41 	bl	800cf98 <memcpy>
 800e116:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e11a:	f8c4 8000 	str.w	r8, [r4]
 800e11e:	e7e9      	b.n	800e0f4 <__submore+0x48>

0800e120 <_realloc_r>:
 800e120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e124:	4607      	mov	r7, r0
 800e126:	4614      	mov	r4, r2
 800e128:	460d      	mov	r5, r1
 800e12a:	b921      	cbnz	r1, 800e136 <_realloc_r+0x16>
 800e12c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e130:	4611      	mov	r1, r2
 800e132:	f7fe bc4f 	b.w	800c9d4 <_malloc_r>
 800e136:	b92a      	cbnz	r2, 800e144 <_realloc_r+0x24>
 800e138:	f7fe ff44 	bl	800cfc4 <_free_r>
 800e13c:	4625      	mov	r5, r4
 800e13e:	4628      	mov	r0, r5
 800e140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e144:	f000 fa7c 	bl	800e640 <_malloc_usable_size_r>
 800e148:	4284      	cmp	r4, r0
 800e14a:	4606      	mov	r6, r0
 800e14c:	d802      	bhi.n	800e154 <_realloc_r+0x34>
 800e14e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e152:	d8f4      	bhi.n	800e13e <_realloc_r+0x1e>
 800e154:	4621      	mov	r1, r4
 800e156:	4638      	mov	r0, r7
 800e158:	f7fe fc3c 	bl	800c9d4 <_malloc_r>
 800e15c:	4680      	mov	r8, r0
 800e15e:	b908      	cbnz	r0, 800e164 <_realloc_r+0x44>
 800e160:	4645      	mov	r5, r8
 800e162:	e7ec      	b.n	800e13e <_realloc_r+0x1e>
 800e164:	42b4      	cmp	r4, r6
 800e166:	4622      	mov	r2, r4
 800e168:	4629      	mov	r1, r5
 800e16a:	bf28      	it	cs
 800e16c:	4632      	movcs	r2, r6
 800e16e:	f7fe ff13 	bl	800cf98 <memcpy>
 800e172:	4629      	mov	r1, r5
 800e174:	4638      	mov	r0, r7
 800e176:	f7fe ff25 	bl	800cfc4 <_free_r>
 800e17a:	e7f1      	b.n	800e160 <_realloc_r+0x40>

0800e17c <__swbuf_r>:
 800e17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e17e:	460e      	mov	r6, r1
 800e180:	4614      	mov	r4, r2
 800e182:	4605      	mov	r5, r0
 800e184:	b118      	cbz	r0, 800e18e <__swbuf_r+0x12>
 800e186:	6a03      	ldr	r3, [r0, #32]
 800e188:	b90b      	cbnz	r3, 800e18e <__swbuf_r+0x12>
 800e18a:	f7fe fdcf 	bl	800cd2c <__sinit>
 800e18e:	69a3      	ldr	r3, [r4, #24]
 800e190:	60a3      	str	r3, [r4, #8]
 800e192:	89a3      	ldrh	r3, [r4, #12]
 800e194:	071a      	lsls	r2, r3, #28
 800e196:	d501      	bpl.n	800e19c <__swbuf_r+0x20>
 800e198:	6923      	ldr	r3, [r4, #16]
 800e19a:	b943      	cbnz	r3, 800e1ae <__swbuf_r+0x32>
 800e19c:	4621      	mov	r1, r4
 800e19e:	4628      	mov	r0, r5
 800e1a0:	f000 f916 	bl	800e3d0 <__swsetup_r>
 800e1a4:	b118      	cbz	r0, 800e1ae <__swbuf_r+0x32>
 800e1a6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e1aa:	4638      	mov	r0, r7
 800e1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1ae:	6823      	ldr	r3, [r4, #0]
 800e1b0:	6922      	ldr	r2, [r4, #16]
 800e1b2:	1a98      	subs	r0, r3, r2
 800e1b4:	6963      	ldr	r3, [r4, #20]
 800e1b6:	b2f6      	uxtb	r6, r6
 800e1b8:	4283      	cmp	r3, r0
 800e1ba:	4637      	mov	r7, r6
 800e1bc:	dc05      	bgt.n	800e1ca <__swbuf_r+0x4e>
 800e1be:	4621      	mov	r1, r4
 800e1c0:	4628      	mov	r0, r5
 800e1c2:	f7ff ff4b 	bl	800e05c <_fflush_r>
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	d1ed      	bne.n	800e1a6 <__swbuf_r+0x2a>
 800e1ca:	68a3      	ldr	r3, [r4, #8]
 800e1cc:	3b01      	subs	r3, #1
 800e1ce:	60a3      	str	r3, [r4, #8]
 800e1d0:	6823      	ldr	r3, [r4, #0]
 800e1d2:	1c5a      	adds	r2, r3, #1
 800e1d4:	6022      	str	r2, [r4, #0]
 800e1d6:	701e      	strb	r6, [r3, #0]
 800e1d8:	6962      	ldr	r2, [r4, #20]
 800e1da:	1c43      	adds	r3, r0, #1
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d004      	beq.n	800e1ea <__swbuf_r+0x6e>
 800e1e0:	89a3      	ldrh	r3, [r4, #12]
 800e1e2:	07db      	lsls	r3, r3, #31
 800e1e4:	d5e1      	bpl.n	800e1aa <__swbuf_r+0x2e>
 800e1e6:	2e0a      	cmp	r6, #10
 800e1e8:	d1df      	bne.n	800e1aa <__swbuf_r+0x2e>
 800e1ea:	4621      	mov	r1, r4
 800e1ec:	4628      	mov	r0, r5
 800e1ee:	f7ff ff35 	bl	800e05c <_fflush_r>
 800e1f2:	2800      	cmp	r0, #0
 800e1f4:	d0d9      	beq.n	800e1aa <__swbuf_r+0x2e>
 800e1f6:	e7d6      	b.n	800e1a6 <__swbuf_r+0x2a>

0800e1f8 <_strtol_l.isra.0>:
 800e1f8:	2b24      	cmp	r3, #36	@ 0x24
 800e1fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1fe:	4686      	mov	lr, r0
 800e200:	4690      	mov	r8, r2
 800e202:	d801      	bhi.n	800e208 <_strtol_l.isra.0+0x10>
 800e204:	2b01      	cmp	r3, #1
 800e206:	d106      	bne.n	800e216 <_strtol_l.isra.0+0x1e>
 800e208:	f7fe fe88 	bl	800cf1c <__errno>
 800e20c:	2316      	movs	r3, #22
 800e20e:	6003      	str	r3, [r0, #0]
 800e210:	2000      	movs	r0, #0
 800e212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e216:	4834      	ldr	r0, [pc, #208]	@ (800e2e8 <_strtol_l.isra.0+0xf0>)
 800e218:	460d      	mov	r5, r1
 800e21a:	462a      	mov	r2, r5
 800e21c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e220:	5d06      	ldrb	r6, [r0, r4]
 800e222:	f016 0608 	ands.w	r6, r6, #8
 800e226:	d1f8      	bne.n	800e21a <_strtol_l.isra.0+0x22>
 800e228:	2c2d      	cmp	r4, #45	@ 0x2d
 800e22a:	d110      	bne.n	800e24e <_strtol_l.isra.0+0x56>
 800e22c:	782c      	ldrb	r4, [r5, #0]
 800e22e:	2601      	movs	r6, #1
 800e230:	1c95      	adds	r5, r2, #2
 800e232:	f033 0210 	bics.w	r2, r3, #16
 800e236:	d115      	bne.n	800e264 <_strtol_l.isra.0+0x6c>
 800e238:	2c30      	cmp	r4, #48	@ 0x30
 800e23a:	d10d      	bne.n	800e258 <_strtol_l.isra.0+0x60>
 800e23c:	782a      	ldrb	r2, [r5, #0]
 800e23e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e242:	2a58      	cmp	r2, #88	@ 0x58
 800e244:	d108      	bne.n	800e258 <_strtol_l.isra.0+0x60>
 800e246:	786c      	ldrb	r4, [r5, #1]
 800e248:	3502      	adds	r5, #2
 800e24a:	2310      	movs	r3, #16
 800e24c:	e00a      	b.n	800e264 <_strtol_l.isra.0+0x6c>
 800e24e:	2c2b      	cmp	r4, #43	@ 0x2b
 800e250:	bf04      	itt	eq
 800e252:	782c      	ldrbeq	r4, [r5, #0]
 800e254:	1c95      	addeq	r5, r2, #2
 800e256:	e7ec      	b.n	800e232 <_strtol_l.isra.0+0x3a>
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d1f6      	bne.n	800e24a <_strtol_l.isra.0+0x52>
 800e25c:	2c30      	cmp	r4, #48	@ 0x30
 800e25e:	bf14      	ite	ne
 800e260:	230a      	movne	r3, #10
 800e262:	2308      	moveq	r3, #8
 800e264:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e268:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800e26c:	2200      	movs	r2, #0
 800e26e:	fbbc f9f3 	udiv	r9, ip, r3
 800e272:	4610      	mov	r0, r2
 800e274:	fb03 ca19 	mls	sl, r3, r9, ip
 800e278:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e27c:	2f09      	cmp	r7, #9
 800e27e:	d80f      	bhi.n	800e2a0 <_strtol_l.isra.0+0xa8>
 800e280:	463c      	mov	r4, r7
 800e282:	42a3      	cmp	r3, r4
 800e284:	dd1b      	ble.n	800e2be <_strtol_l.isra.0+0xc6>
 800e286:	1c57      	adds	r7, r2, #1
 800e288:	d007      	beq.n	800e29a <_strtol_l.isra.0+0xa2>
 800e28a:	4581      	cmp	r9, r0
 800e28c:	d314      	bcc.n	800e2b8 <_strtol_l.isra.0+0xc0>
 800e28e:	d101      	bne.n	800e294 <_strtol_l.isra.0+0x9c>
 800e290:	45a2      	cmp	sl, r4
 800e292:	db11      	blt.n	800e2b8 <_strtol_l.isra.0+0xc0>
 800e294:	fb00 4003 	mla	r0, r0, r3, r4
 800e298:	2201      	movs	r2, #1
 800e29a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e29e:	e7eb      	b.n	800e278 <_strtol_l.isra.0+0x80>
 800e2a0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e2a4:	2f19      	cmp	r7, #25
 800e2a6:	d801      	bhi.n	800e2ac <_strtol_l.isra.0+0xb4>
 800e2a8:	3c37      	subs	r4, #55	@ 0x37
 800e2aa:	e7ea      	b.n	800e282 <_strtol_l.isra.0+0x8a>
 800e2ac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e2b0:	2f19      	cmp	r7, #25
 800e2b2:	d804      	bhi.n	800e2be <_strtol_l.isra.0+0xc6>
 800e2b4:	3c57      	subs	r4, #87	@ 0x57
 800e2b6:	e7e4      	b.n	800e282 <_strtol_l.isra.0+0x8a>
 800e2b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e2bc:	e7ed      	b.n	800e29a <_strtol_l.isra.0+0xa2>
 800e2be:	1c53      	adds	r3, r2, #1
 800e2c0:	d108      	bne.n	800e2d4 <_strtol_l.isra.0+0xdc>
 800e2c2:	2322      	movs	r3, #34	@ 0x22
 800e2c4:	f8ce 3000 	str.w	r3, [lr]
 800e2c8:	4660      	mov	r0, ip
 800e2ca:	f1b8 0f00 	cmp.w	r8, #0
 800e2ce:	d0a0      	beq.n	800e212 <_strtol_l.isra.0+0x1a>
 800e2d0:	1e69      	subs	r1, r5, #1
 800e2d2:	e006      	b.n	800e2e2 <_strtol_l.isra.0+0xea>
 800e2d4:	b106      	cbz	r6, 800e2d8 <_strtol_l.isra.0+0xe0>
 800e2d6:	4240      	negs	r0, r0
 800e2d8:	f1b8 0f00 	cmp.w	r8, #0
 800e2dc:	d099      	beq.n	800e212 <_strtol_l.isra.0+0x1a>
 800e2de:	2a00      	cmp	r2, #0
 800e2e0:	d1f6      	bne.n	800e2d0 <_strtol_l.isra.0+0xd8>
 800e2e2:	f8c8 1000 	str.w	r1, [r8]
 800e2e6:	e794      	b.n	800e212 <_strtol_l.isra.0+0x1a>
 800e2e8:	0800f95b 	.word	0x0800f95b

0800e2ec <_strtol_r>:
 800e2ec:	f7ff bf84 	b.w	800e1f8 <_strtol_l.isra.0>

0800e2f0 <_strtoul_l.isra.0>:
 800e2f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e2f4:	4e34      	ldr	r6, [pc, #208]	@ (800e3c8 <_strtoul_l.isra.0+0xd8>)
 800e2f6:	4686      	mov	lr, r0
 800e2f8:	460d      	mov	r5, r1
 800e2fa:	4628      	mov	r0, r5
 800e2fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e300:	5d37      	ldrb	r7, [r6, r4]
 800e302:	f017 0708 	ands.w	r7, r7, #8
 800e306:	d1f8      	bne.n	800e2fa <_strtoul_l.isra.0+0xa>
 800e308:	2c2d      	cmp	r4, #45	@ 0x2d
 800e30a:	d110      	bne.n	800e32e <_strtoul_l.isra.0+0x3e>
 800e30c:	782c      	ldrb	r4, [r5, #0]
 800e30e:	2701      	movs	r7, #1
 800e310:	1c85      	adds	r5, r0, #2
 800e312:	f033 0010 	bics.w	r0, r3, #16
 800e316:	d115      	bne.n	800e344 <_strtoul_l.isra.0+0x54>
 800e318:	2c30      	cmp	r4, #48	@ 0x30
 800e31a:	d10d      	bne.n	800e338 <_strtoul_l.isra.0+0x48>
 800e31c:	7828      	ldrb	r0, [r5, #0]
 800e31e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800e322:	2858      	cmp	r0, #88	@ 0x58
 800e324:	d108      	bne.n	800e338 <_strtoul_l.isra.0+0x48>
 800e326:	786c      	ldrb	r4, [r5, #1]
 800e328:	3502      	adds	r5, #2
 800e32a:	2310      	movs	r3, #16
 800e32c:	e00a      	b.n	800e344 <_strtoul_l.isra.0+0x54>
 800e32e:	2c2b      	cmp	r4, #43	@ 0x2b
 800e330:	bf04      	itt	eq
 800e332:	782c      	ldrbeq	r4, [r5, #0]
 800e334:	1c85      	addeq	r5, r0, #2
 800e336:	e7ec      	b.n	800e312 <_strtoul_l.isra.0+0x22>
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d1f6      	bne.n	800e32a <_strtoul_l.isra.0+0x3a>
 800e33c:	2c30      	cmp	r4, #48	@ 0x30
 800e33e:	bf14      	ite	ne
 800e340:	230a      	movne	r3, #10
 800e342:	2308      	moveq	r3, #8
 800e344:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800e348:	2600      	movs	r6, #0
 800e34a:	fbb8 f8f3 	udiv	r8, r8, r3
 800e34e:	fb03 f908 	mul.w	r9, r3, r8
 800e352:	ea6f 0909 	mvn.w	r9, r9
 800e356:	4630      	mov	r0, r6
 800e358:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800e35c:	f1bc 0f09 	cmp.w	ip, #9
 800e360:	d810      	bhi.n	800e384 <_strtoul_l.isra.0+0x94>
 800e362:	4664      	mov	r4, ip
 800e364:	42a3      	cmp	r3, r4
 800e366:	dd1e      	ble.n	800e3a6 <_strtoul_l.isra.0+0xb6>
 800e368:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800e36c:	d007      	beq.n	800e37e <_strtoul_l.isra.0+0x8e>
 800e36e:	4580      	cmp	r8, r0
 800e370:	d316      	bcc.n	800e3a0 <_strtoul_l.isra.0+0xb0>
 800e372:	d101      	bne.n	800e378 <_strtoul_l.isra.0+0x88>
 800e374:	45a1      	cmp	r9, r4
 800e376:	db13      	blt.n	800e3a0 <_strtoul_l.isra.0+0xb0>
 800e378:	fb00 4003 	mla	r0, r0, r3, r4
 800e37c:	2601      	movs	r6, #1
 800e37e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e382:	e7e9      	b.n	800e358 <_strtoul_l.isra.0+0x68>
 800e384:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800e388:	f1bc 0f19 	cmp.w	ip, #25
 800e38c:	d801      	bhi.n	800e392 <_strtoul_l.isra.0+0xa2>
 800e38e:	3c37      	subs	r4, #55	@ 0x37
 800e390:	e7e8      	b.n	800e364 <_strtoul_l.isra.0+0x74>
 800e392:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800e396:	f1bc 0f19 	cmp.w	ip, #25
 800e39a:	d804      	bhi.n	800e3a6 <_strtoul_l.isra.0+0xb6>
 800e39c:	3c57      	subs	r4, #87	@ 0x57
 800e39e:	e7e1      	b.n	800e364 <_strtoul_l.isra.0+0x74>
 800e3a0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800e3a4:	e7eb      	b.n	800e37e <_strtoul_l.isra.0+0x8e>
 800e3a6:	1c73      	adds	r3, r6, #1
 800e3a8:	d106      	bne.n	800e3b8 <_strtoul_l.isra.0+0xc8>
 800e3aa:	2322      	movs	r3, #34	@ 0x22
 800e3ac:	f8ce 3000 	str.w	r3, [lr]
 800e3b0:	4630      	mov	r0, r6
 800e3b2:	b932      	cbnz	r2, 800e3c2 <_strtoul_l.isra.0+0xd2>
 800e3b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3b8:	b107      	cbz	r7, 800e3bc <_strtoul_l.isra.0+0xcc>
 800e3ba:	4240      	negs	r0, r0
 800e3bc:	2a00      	cmp	r2, #0
 800e3be:	d0f9      	beq.n	800e3b4 <_strtoul_l.isra.0+0xc4>
 800e3c0:	b106      	cbz	r6, 800e3c4 <_strtoul_l.isra.0+0xd4>
 800e3c2:	1e69      	subs	r1, r5, #1
 800e3c4:	6011      	str	r1, [r2, #0]
 800e3c6:	e7f5      	b.n	800e3b4 <_strtoul_l.isra.0+0xc4>
 800e3c8:	0800f95b 	.word	0x0800f95b

0800e3cc <_strtoul_r>:
 800e3cc:	f7ff bf90 	b.w	800e2f0 <_strtoul_l.isra.0>

0800e3d0 <__swsetup_r>:
 800e3d0:	b538      	push	{r3, r4, r5, lr}
 800e3d2:	4b29      	ldr	r3, [pc, #164]	@ (800e478 <__swsetup_r+0xa8>)
 800e3d4:	4605      	mov	r5, r0
 800e3d6:	6818      	ldr	r0, [r3, #0]
 800e3d8:	460c      	mov	r4, r1
 800e3da:	b118      	cbz	r0, 800e3e4 <__swsetup_r+0x14>
 800e3dc:	6a03      	ldr	r3, [r0, #32]
 800e3de:	b90b      	cbnz	r3, 800e3e4 <__swsetup_r+0x14>
 800e3e0:	f7fe fca4 	bl	800cd2c <__sinit>
 800e3e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3e8:	0719      	lsls	r1, r3, #28
 800e3ea:	d422      	bmi.n	800e432 <__swsetup_r+0x62>
 800e3ec:	06da      	lsls	r2, r3, #27
 800e3ee:	d407      	bmi.n	800e400 <__swsetup_r+0x30>
 800e3f0:	2209      	movs	r2, #9
 800e3f2:	602a      	str	r2, [r5, #0]
 800e3f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3f8:	81a3      	strh	r3, [r4, #12]
 800e3fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e3fe:	e033      	b.n	800e468 <__swsetup_r+0x98>
 800e400:	0758      	lsls	r0, r3, #29
 800e402:	d512      	bpl.n	800e42a <__swsetup_r+0x5a>
 800e404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e406:	b141      	cbz	r1, 800e41a <__swsetup_r+0x4a>
 800e408:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e40c:	4299      	cmp	r1, r3
 800e40e:	d002      	beq.n	800e416 <__swsetup_r+0x46>
 800e410:	4628      	mov	r0, r5
 800e412:	f7fe fdd7 	bl	800cfc4 <_free_r>
 800e416:	2300      	movs	r3, #0
 800e418:	6363      	str	r3, [r4, #52]	@ 0x34
 800e41a:	89a3      	ldrh	r3, [r4, #12]
 800e41c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e420:	81a3      	strh	r3, [r4, #12]
 800e422:	2300      	movs	r3, #0
 800e424:	6063      	str	r3, [r4, #4]
 800e426:	6923      	ldr	r3, [r4, #16]
 800e428:	6023      	str	r3, [r4, #0]
 800e42a:	89a3      	ldrh	r3, [r4, #12]
 800e42c:	f043 0308 	orr.w	r3, r3, #8
 800e430:	81a3      	strh	r3, [r4, #12]
 800e432:	6923      	ldr	r3, [r4, #16]
 800e434:	b94b      	cbnz	r3, 800e44a <__swsetup_r+0x7a>
 800e436:	89a3      	ldrh	r3, [r4, #12]
 800e438:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e43c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e440:	d003      	beq.n	800e44a <__swsetup_r+0x7a>
 800e442:	4621      	mov	r1, r4
 800e444:	4628      	mov	r0, r5
 800e446:	f000 f83f 	bl	800e4c8 <__smakebuf_r>
 800e44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e44e:	f013 0201 	ands.w	r2, r3, #1
 800e452:	d00a      	beq.n	800e46a <__swsetup_r+0x9a>
 800e454:	2200      	movs	r2, #0
 800e456:	60a2      	str	r2, [r4, #8]
 800e458:	6962      	ldr	r2, [r4, #20]
 800e45a:	4252      	negs	r2, r2
 800e45c:	61a2      	str	r2, [r4, #24]
 800e45e:	6922      	ldr	r2, [r4, #16]
 800e460:	b942      	cbnz	r2, 800e474 <__swsetup_r+0xa4>
 800e462:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e466:	d1c5      	bne.n	800e3f4 <__swsetup_r+0x24>
 800e468:	bd38      	pop	{r3, r4, r5, pc}
 800e46a:	0799      	lsls	r1, r3, #30
 800e46c:	bf58      	it	pl
 800e46e:	6962      	ldrpl	r2, [r4, #20]
 800e470:	60a2      	str	r2, [r4, #8]
 800e472:	e7f4      	b.n	800e45e <__swsetup_r+0x8e>
 800e474:	2000      	movs	r0, #0
 800e476:	e7f7      	b.n	800e468 <__swsetup_r+0x98>
 800e478:	20000034 	.word	0x20000034

0800e47c <__swhatbuf_r>:
 800e47c:	b570      	push	{r4, r5, r6, lr}
 800e47e:	460c      	mov	r4, r1
 800e480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e484:	2900      	cmp	r1, #0
 800e486:	b096      	sub	sp, #88	@ 0x58
 800e488:	4615      	mov	r5, r2
 800e48a:	461e      	mov	r6, r3
 800e48c:	da0d      	bge.n	800e4aa <__swhatbuf_r+0x2e>
 800e48e:	89a3      	ldrh	r3, [r4, #12]
 800e490:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e494:	f04f 0100 	mov.w	r1, #0
 800e498:	bf14      	ite	ne
 800e49a:	2340      	movne	r3, #64	@ 0x40
 800e49c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e4a0:	2000      	movs	r0, #0
 800e4a2:	6031      	str	r1, [r6, #0]
 800e4a4:	602b      	str	r3, [r5, #0]
 800e4a6:	b016      	add	sp, #88	@ 0x58
 800e4a8:	bd70      	pop	{r4, r5, r6, pc}
 800e4aa:	466a      	mov	r2, sp
 800e4ac:	f000 f8b6 	bl	800e61c <_fstat_r>
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	dbec      	blt.n	800e48e <__swhatbuf_r+0x12>
 800e4b4:	9901      	ldr	r1, [sp, #4]
 800e4b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e4ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e4be:	4259      	negs	r1, r3
 800e4c0:	4159      	adcs	r1, r3
 800e4c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e4c6:	e7eb      	b.n	800e4a0 <__swhatbuf_r+0x24>

0800e4c8 <__smakebuf_r>:
 800e4c8:	898b      	ldrh	r3, [r1, #12]
 800e4ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4cc:	079d      	lsls	r5, r3, #30
 800e4ce:	4606      	mov	r6, r0
 800e4d0:	460c      	mov	r4, r1
 800e4d2:	d507      	bpl.n	800e4e4 <__smakebuf_r+0x1c>
 800e4d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e4d8:	6023      	str	r3, [r4, #0]
 800e4da:	6123      	str	r3, [r4, #16]
 800e4dc:	2301      	movs	r3, #1
 800e4de:	6163      	str	r3, [r4, #20]
 800e4e0:	b003      	add	sp, #12
 800e4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4e4:	ab01      	add	r3, sp, #4
 800e4e6:	466a      	mov	r2, sp
 800e4e8:	f7ff ffc8 	bl	800e47c <__swhatbuf_r>
 800e4ec:	9f00      	ldr	r7, [sp, #0]
 800e4ee:	4605      	mov	r5, r0
 800e4f0:	4639      	mov	r1, r7
 800e4f2:	4630      	mov	r0, r6
 800e4f4:	f7fe fa6e 	bl	800c9d4 <_malloc_r>
 800e4f8:	b948      	cbnz	r0, 800e50e <__smakebuf_r+0x46>
 800e4fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4fe:	059a      	lsls	r2, r3, #22
 800e500:	d4ee      	bmi.n	800e4e0 <__smakebuf_r+0x18>
 800e502:	f023 0303 	bic.w	r3, r3, #3
 800e506:	f043 0302 	orr.w	r3, r3, #2
 800e50a:	81a3      	strh	r3, [r4, #12]
 800e50c:	e7e2      	b.n	800e4d4 <__smakebuf_r+0xc>
 800e50e:	89a3      	ldrh	r3, [r4, #12]
 800e510:	6020      	str	r0, [r4, #0]
 800e512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e516:	81a3      	strh	r3, [r4, #12]
 800e518:	9b01      	ldr	r3, [sp, #4]
 800e51a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e51e:	b15b      	cbz	r3, 800e538 <__smakebuf_r+0x70>
 800e520:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e524:	4630      	mov	r0, r6
 800e526:	f000 f855 	bl	800e5d4 <_isatty_r>
 800e52a:	b128      	cbz	r0, 800e538 <__smakebuf_r+0x70>
 800e52c:	89a3      	ldrh	r3, [r4, #12]
 800e52e:	f023 0303 	bic.w	r3, r3, #3
 800e532:	f043 0301 	orr.w	r3, r3, #1
 800e536:	81a3      	strh	r3, [r4, #12]
 800e538:	89a3      	ldrh	r3, [r4, #12]
 800e53a:	431d      	orrs	r5, r3
 800e53c:	81a5      	strh	r5, [r4, #12]
 800e53e:	e7cf      	b.n	800e4e0 <__smakebuf_r+0x18>

0800e540 <memmove>:
 800e540:	4288      	cmp	r0, r1
 800e542:	b510      	push	{r4, lr}
 800e544:	eb01 0402 	add.w	r4, r1, r2
 800e548:	d902      	bls.n	800e550 <memmove+0x10>
 800e54a:	4284      	cmp	r4, r0
 800e54c:	4623      	mov	r3, r4
 800e54e:	d807      	bhi.n	800e560 <memmove+0x20>
 800e550:	1e43      	subs	r3, r0, #1
 800e552:	42a1      	cmp	r1, r4
 800e554:	d008      	beq.n	800e568 <memmove+0x28>
 800e556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e55a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e55e:	e7f8      	b.n	800e552 <memmove+0x12>
 800e560:	4402      	add	r2, r0
 800e562:	4601      	mov	r1, r0
 800e564:	428a      	cmp	r2, r1
 800e566:	d100      	bne.n	800e56a <memmove+0x2a>
 800e568:	bd10      	pop	{r4, pc}
 800e56a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e56e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e572:	e7f7      	b.n	800e564 <memmove+0x24>

0800e574 <_raise_r>:
 800e574:	291f      	cmp	r1, #31
 800e576:	b538      	push	{r3, r4, r5, lr}
 800e578:	4605      	mov	r5, r0
 800e57a:	460c      	mov	r4, r1
 800e57c:	d904      	bls.n	800e588 <_raise_r+0x14>
 800e57e:	2316      	movs	r3, #22
 800e580:	6003      	str	r3, [r0, #0]
 800e582:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e586:	bd38      	pop	{r3, r4, r5, pc}
 800e588:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e58a:	b112      	cbz	r2, 800e592 <_raise_r+0x1e>
 800e58c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e590:	b94b      	cbnz	r3, 800e5a6 <_raise_r+0x32>
 800e592:	4628      	mov	r0, r5
 800e594:	f000 f840 	bl	800e618 <_getpid_r>
 800e598:	4622      	mov	r2, r4
 800e59a:	4601      	mov	r1, r0
 800e59c:	4628      	mov	r0, r5
 800e59e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5a2:	f000 b827 	b.w	800e5f4 <_kill_r>
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d00a      	beq.n	800e5c0 <_raise_r+0x4c>
 800e5aa:	1c59      	adds	r1, r3, #1
 800e5ac:	d103      	bne.n	800e5b6 <_raise_r+0x42>
 800e5ae:	2316      	movs	r3, #22
 800e5b0:	6003      	str	r3, [r0, #0]
 800e5b2:	2001      	movs	r0, #1
 800e5b4:	e7e7      	b.n	800e586 <_raise_r+0x12>
 800e5b6:	2100      	movs	r1, #0
 800e5b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e5bc:	4620      	mov	r0, r4
 800e5be:	4798      	blx	r3
 800e5c0:	2000      	movs	r0, #0
 800e5c2:	e7e0      	b.n	800e586 <_raise_r+0x12>

0800e5c4 <raise>:
 800e5c4:	4b02      	ldr	r3, [pc, #8]	@ (800e5d0 <raise+0xc>)
 800e5c6:	4601      	mov	r1, r0
 800e5c8:	6818      	ldr	r0, [r3, #0]
 800e5ca:	f7ff bfd3 	b.w	800e574 <_raise_r>
 800e5ce:	bf00      	nop
 800e5d0:	20000034 	.word	0x20000034

0800e5d4 <_isatty_r>:
 800e5d4:	b538      	push	{r3, r4, r5, lr}
 800e5d6:	4d06      	ldr	r5, [pc, #24]	@ (800e5f0 <_isatty_r+0x1c>)
 800e5d8:	2300      	movs	r3, #0
 800e5da:	4604      	mov	r4, r0
 800e5dc:	4608      	mov	r0, r1
 800e5de:	602b      	str	r3, [r5, #0]
 800e5e0:	f7f3 fa1a 	bl	8001a18 <_isatty>
 800e5e4:	1c43      	adds	r3, r0, #1
 800e5e6:	d102      	bne.n	800e5ee <_isatty_r+0x1a>
 800e5e8:	682b      	ldr	r3, [r5, #0]
 800e5ea:	b103      	cbz	r3, 800e5ee <_isatty_r+0x1a>
 800e5ec:	6023      	str	r3, [r4, #0]
 800e5ee:	bd38      	pop	{r3, r4, r5, pc}
 800e5f0:	2000058c 	.word	0x2000058c

0800e5f4 <_kill_r>:
 800e5f4:	b538      	push	{r3, r4, r5, lr}
 800e5f6:	4d07      	ldr	r5, [pc, #28]	@ (800e614 <_kill_r+0x20>)
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	4604      	mov	r4, r0
 800e5fc:	4608      	mov	r0, r1
 800e5fe:	4611      	mov	r1, r2
 800e600:	602b      	str	r3, [r5, #0]
 800e602:	f7f3 f999 	bl	8001938 <_kill>
 800e606:	1c43      	adds	r3, r0, #1
 800e608:	d102      	bne.n	800e610 <_kill_r+0x1c>
 800e60a:	682b      	ldr	r3, [r5, #0]
 800e60c:	b103      	cbz	r3, 800e610 <_kill_r+0x1c>
 800e60e:	6023      	str	r3, [r4, #0]
 800e610:	bd38      	pop	{r3, r4, r5, pc}
 800e612:	bf00      	nop
 800e614:	2000058c 	.word	0x2000058c

0800e618 <_getpid_r>:
 800e618:	f7f3 b986 	b.w	8001928 <_getpid>

0800e61c <_fstat_r>:
 800e61c:	b538      	push	{r3, r4, r5, lr}
 800e61e:	4d07      	ldr	r5, [pc, #28]	@ (800e63c <_fstat_r+0x20>)
 800e620:	2300      	movs	r3, #0
 800e622:	4604      	mov	r4, r0
 800e624:	4608      	mov	r0, r1
 800e626:	4611      	mov	r1, r2
 800e628:	602b      	str	r3, [r5, #0]
 800e62a:	f7f3 f9e5 	bl	80019f8 <_fstat>
 800e62e:	1c43      	adds	r3, r0, #1
 800e630:	d102      	bne.n	800e638 <_fstat_r+0x1c>
 800e632:	682b      	ldr	r3, [r5, #0]
 800e634:	b103      	cbz	r3, 800e638 <_fstat_r+0x1c>
 800e636:	6023      	str	r3, [r4, #0]
 800e638:	bd38      	pop	{r3, r4, r5, pc}
 800e63a:	bf00      	nop
 800e63c:	2000058c 	.word	0x2000058c

0800e640 <_malloc_usable_size_r>:
 800e640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e644:	1f18      	subs	r0, r3, #4
 800e646:	2b00      	cmp	r3, #0
 800e648:	bfbc      	itt	lt
 800e64a:	580b      	ldrlt	r3, [r1, r0]
 800e64c:	18c0      	addlt	r0, r0, r3
 800e64e:	4770      	bx	lr

0800e650 <__popcountsi2>:
 800e650:	0843      	lsrs	r3, r0, #1
 800e652:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 800e656:	1ac0      	subs	r0, r0, r3
 800e658:	0883      	lsrs	r3, r0, #2
 800e65a:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 800e65e:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 800e662:	4418      	add	r0, r3
 800e664:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 800e668:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 800e66c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 800e670:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 800e674:	0e00      	lsrs	r0, r0, #24
 800e676:	4770      	bx	lr

0800e678 <_init>:
 800e678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e67a:	bf00      	nop
 800e67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e67e:	bc08      	pop	{r3}
 800e680:	469e      	mov	lr, r3
 800e682:	4770      	bx	lr

0800e684 <_fini>:
 800e684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e686:	bf00      	nop
 800e688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e68a:	bc08      	pop	{r3}
 800e68c:	469e      	mov	lr, r3
 800e68e:	4770      	bx	lr
