
digital_cube_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db9c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001380  0800dd2c  0800dd2c  0000ed2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0ac  0800f0ac  000110bc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f0ac  0800f0ac  000100ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0b4  0800f0b4  000110bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0b4  0800f0b4  000100b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f0b8  0800f0b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  0800f0bc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  200000c0  0800f178  000110c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  0800f178  00011570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000110bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001354a  00000000  00000000  000110ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255f  00000000  00000000  00024636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  00026b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb5  00000000  00000000  00027e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cbf2  00000000  00000000  00028dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d956  00000000  00000000  000459bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dacd  00000000  00000000  00053315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000045  00000000  00000000  000e0de2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f3c  00000000  00000000  000e0e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000172  00000000  00000000  000e6d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <deregister_tm_clones>:
 8000240:	4803      	ldr	r0, [pc, #12]	@ (8000250 <deregister_tm_clones+0x10>)
 8000242:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <deregister_tm_clones+0x14>)
 8000244:	4283      	cmp	r3, r0
 8000246:	d002      	beq.n	800024e <deregister_tm_clones+0xe>
 8000248:	4b03      	ldr	r3, [pc, #12]	@ (8000258 <deregister_tm_clones+0x18>)
 800024a:	b103      	cbz	r3, 800024e <deregister_tm_clones+0xe>
 800024c:	4718      	bx	r3
 800024e:	4770      	bx	lr
 8000250:	200000bc 	.word	0x200000bc
 8000254:	200000bc 	.word	0x200000bc
 8000258:	00000000 	.word	0x00000000

0800025c <register_tm_clones>:
 800025c:	4805      	ldr	r0, [pc, #20]	@ (8000274 <register_tm_clones+0x18>)
 800025e:	4b06      	ldr	r3, [pc, #24]	@ (8000278 <register_tm_clones+0x1c>)
 8000260:	1a1b      	subs	r3, r3, r0
 8000262:	0fd9      	lsrs	r1, r3, #31
 8000264:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000268:	1049      	asrs	r1, r1, #1
 800026a:	d002      	beq.n	8000272 <register_tm_clones+0x16>
 800026c:	4b03      	ldr	r3, [pc, #12]	@ (800027c <register_tm_clones+0x20>)
 800026e:	b103      	cbz	r3, 8000272 <register_tm_clones+0x16>
 8000270:	4718      	bx	r3
 8000272:	4770      	bx	lr
 8000274:	200000bc 	.word	0x200000bc
 8000278:	200000bc 	.word	0x200000bc
 800027c:	00000000 	.word	0x00000000

08000280 <__do_global_dtors_aux>:
 8000280:	b510      	push	{r4, lr}
 8000282:	4c06      	ldr	r4, [pc, #24]	@ (800029c <__do_global_dtors_aux+0x1c>)
 8000284:	7823      	ldrb	r3, [r4, #0]
 8000286:	b943      	cbnz	r3, 800029a <__do_global_dtors_aux+0x1a>
 8000288:	f7ff ffda 	bl	8000240 <deregister_tm_clones>
 800028c:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <__do_global_dtors_aux+0x20>)
 800028e:	b113      	cbz	r3, 8000296 <__do_global_dtors_aux+0x16>
 8000290:	4804      	ldr	r0, [pc, #16]	@ (80002a4 <__do_global_dtors_aux+0x24>)
 8000292:	f3af 8000 	nop.w
 8000296:	2301      	movs	r3, #1
 8000298:	7023      	strb	r3, [r4, #0]
 800029a:	bd10      	pop	{r4, pc}
 800029c:	200000c0 	.word	0x200000c0
 80002a0:	00000000 	.word	0x00000000
 80002a4:	0800dd14 	.word	0x0800dd14

080002a8 <frame_dummy>:
 80002a8:	b508      	push	{r3, lr}
 80002aa:	4b05      	ldr	r3, [pc, #20]	@ (80002c0 <frame_dummy+0x18>)
 80002ac:	b11b      	cbz	r3, 80002b6 <frame_dummy+0xe>
 80002ae:	4905      	ldr	r1, [pc, #20]	@ (80002c4 <frame_dummy+0x1c>)
 80002b0:	4805      	ldr	r0, [pc, #20]	@ (80002c8 <frame_dummy+0x20>)
 80002b2:	f3af 8000 	nop.w
 80002b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80002ba:	f7ff bfcf 	b.w	800025c <register_tm_clones>
 80002be:	bf00      	nop
 80002c0:	00000000 	.word	0x00000000
 80002c4:	200000c4 	.word	0x200000c4
 80002c8:	0800dd14 	.word	0x0800dd14

080002cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b085      	sub	sp, #20
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f003 0307 	and.w	r3, r3, #7
 80002da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000310 <__NVIC_SetPriorityGrouping+0x44>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002e2:	68ba      	ldr	r2, [r7, #8]
 80002e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80002e8:	4013      	ands	r3, r2
 80002ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80002f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002fe:	4a04      	ldr	r2, [pc, #16]	@ (8000310 <__NVIC_SetPriorityGrouping+0x44>)
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	60d3      	str	r3, [r2, #12]
}
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000318:	4b04      	ldr	r3, [pc, #16]	@ (800032c <__NVIC_GetPriorityGrouping+0x18>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	0a1b      	lsrs	r3, r3, #8
 800031e:	f003 0307 	and.w	r3, r3, #7
}
 8000322:	4618      	mov	r0, r3
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	6039      	str	r1, [r7, #0]
 800033a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800033c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000340:	2b00      	cmp	r3, #0
 8000342:	db0a      	blt.n	800035a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	b2da      	uxtb	r2, r3
 8000348:	490c      	ldr	r1, [pc, #48]	@ (800037c <__NVIC_SetPriority+0x4c>)
 800034a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034e:	0112      	lsls	r2, r2, #4
 8000350:	b2d2      	uxtb	r2, r2
 8000352:	440b      	add	r3, r1
 8000354:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000358:	e00a      	b.n	8000370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	b2da      	uxtb	r2, r3
 800035e:	4908      	ldr	r1, [pc, #32]	@ (8000380 <__NVIC_SetPriority+0x50>)
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	f003 030f 	and.w	r3, r3, #15
 8000366:	3b04      	subs	r3, #4
 8000368:	0112      	lsls	r2, r2, #4
 800036a:	b2d2      	uxtb	r2, r2
 800036c:	440b      	add	r3, r1
 800036e:	761a      	strb	r2, [r3, #24]
}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	e000e100 	.word	0xe000e100
 8000380:	e000ed00 	.word	0xe000ed00

08000384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000384:	b480      	push	{r7}
 8000386:	b089      	sub	sp, #36	@ 0x24
 8000388:	af00      	add	r7, sp, #0
 800038a:	60f8      	str	r0, [r7, #12]
 800038c:	60b9      	str	r1, [r7, #8]
 800038e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	f003 0307 	and.w	r3, r3, #7
 8000396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000398:	69fb      	ldr	r3, [r7, #28]
 800039a:	f1c3 0307 	rsb	r3, r3, #7
 800039e:	2b04      	cmp	r3, #4
 80003a0:	bf28      	it	cs
 80003a2:	2304      	movcs	r3, #4
 80003a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	3304      	adds	r3, #4
 80003aa:	2b06      	cmp	r3, #6
 80003ac:	d902      	bls.n	80003b4 <NVIC_EncodePriority+0x30>
 80003ae:	69fb      	ldr	r3, [r7, #28]
 80003b0:	3b03      	subs	r3, #3
 80003b2:	e000      	b.n	80003b6 <NVIC_EncodePriority+0x32>
 80003b4:	2300      	movs	r3, #0
 80003b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80003bc:	69bb      	ldr	r3, [r7, #24]
 80003be:	fa02 f303 	lsl.w	r3, r2, r3
 80003c2:	43da      	mvns	r2, r3
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	401a      	ands	r2, r3
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	fa01 f303 	lsl.w	r3, r1, r3
 80003d6:	43d9      	mvns	r1, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003dc:	4313      	orrs	r3, r2
         );
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3724      	adds	r7, #36	@ 0x24
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr

080003ea <LL_ADC_REG_SetContinuousMode>:
  *         @arg @ref LL_ADC_REG_CONV_SINGLE
  *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
{
 80003ea:	b480      	push	{r7}
 80003ec:	b083      	sub	sp, #12
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	6078      	str	r0, [r7, #4]
 80003f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	431a      	orrs	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	60da      	str	r2, [r3, #12]
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000420:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000424:	f043 0201 	orr.w	r2, r3, #1
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000448:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800044c:	f043 0202 	orr.w	r2, r3, #2
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000470:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000474:	f043 0204 	orr.w	r2, r3, #4
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800047c:	bf00      	nop
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(const ADC_TypeDef *ADCx)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000494:	b29b      	uxth	r3, r3
}
 8000496:	4618      	mov	r0, r3
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(const ADC_TypeDef *ADCx)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b083      	sub	sp, #12
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f003 0304 	and.w	r3, r3, #4
 80004b2:	2b04      	cmp	r3, #4
 80004b4:	d101      	bne.n	80004ba <LL_ADC_IsActiveFlag_EOC+0x18>
 80004b6:	2301      	movs	r3, #1
 80004b8:	e000      	b.n	80004bc <LL_ADC_IsActiveFlag_EOC+0x1a>
 80004ba:	2300      	movs	r3, #0
}
 80004bc:	4618      	mov	r0, r3
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr

080004c8 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2204      	movs	r2, #4
 80004d4:	601a      	str	r2, [r3, #0]
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f043 0201 	orr.w	r2, r3, #1
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	601a      	str	r2, [r3, #0]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
	...

08000504 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800050c:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <LL_APB1_GRP1_EnableClock+0x2c>)
 800050e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000510:	4907      	ldr	r1, [pc, #28]	@ (8000530 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4313      	orrs	r3, r2
 8000516:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000518:	4b05      	ldr	r3, [pc, #20]	@ (8000530 <LL_APB1_GRP1_EnableClock+0x2c>)
 800051a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4013      	ands	r3, r2
 8000520:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000522:	68fb      	ldr	r3, [r7, #12]
}
 8000524:	bf00      	nop
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	40021000 	.word	0x40021000

08000534 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800053c:	4b08      	ldr	r3, [pc, #32]	@ (8000560 <LL_APB2_GRP1_EnableClock+0x2c>)
 800053e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000540:	4907      	ldr	r1, [pc, #28]	@ (8000560 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4313      	orrs	r3, r2
 8000546:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000548:	4b05      	ldr	r3, [pc, #20]	@ (8000560 <LL_APB2_GRP1_EnableClock+0x2c>)
 800054a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4013      	ands	r3, r2
 8000550:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000552:	68fb      	ldr	r3, [r7, #12]
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	40021000 	.word	0x40021000

08000564 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	601a      	str	r2, [r3, #0]
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f043 0201 	orr.w	r2, r3, #1
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	601a      	str	r2, [r3, #0]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f023 0201 	bic.w	r2, r3, #1
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	601a      	str	r2, [r3, #0]
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6a1a      	ldr	r2, [r3, #32]
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	431a      	orrs	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	621a      	str	r2, [r3, #32]
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80005e6:	b480      	push	{r7}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
 80005ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	683a      	ldr	r2, [r7, #0]
 80005f4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8000602:	b480      	push	{r7}
 8000604:	b083      	sub	sp, #12
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800060e:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
 800062a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	683a      	ldr	r2, [r7, #0]
 8000630:	619a      	str	r2, [r3, #24]
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800063e:	b480      	push	{r7}
 8000640:	b083      	sub	sp, #12
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
 8000646:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <LL_LPTIM_Enable>:
  * @rmtoll CR           ENABLE        LL_LPTIM_Enable
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_Enable(LPTIM_TypeDef *LPTIMx)
{
 800065a:	b480      	push	{r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	691b      	ldr	r3, [r3, #16]
 8000666:	f043 0201 	orr.w	r2, r3, #1
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	611a      	str	r2, [r3, #16]
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr

0800067a <LL_LPTIM_StartCounter>:
  *         @arg @ref LL_LPTIM_OPERATING_MODE_CONTINUOUS
  *         @arg @ref LL_LPTIM_OPERATING_MODE_ONESHOT
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_StartCounter(LPTIM_TypeDef *LPTIMx, uint32_t OperatingMode)
{
 800067a:	b480      	push	{r7}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
 8000682:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	f023 0206 	bic.w	r2, r3, #6
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	431a      	orrs	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	611a      	str	r2, [r3, #16]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <LL_LPTIM_SetAutoReload>:
  * @param  LPTIMx Low-Power Timer instance
  * @param  AutoReload Value between Min_Data=0x0001 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetAutoReload(LPTIM_TypeDef *LPTIMx, uint32_t AutoReload)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	0c1b      	lsrs	r3, r3, #16
 80006b0:	041b      	lsls	r3, r3, #16
 80006b2:	683a      	ldr	r2, [r7, #0]
 80006b4:	431a      	orrs	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	619a      	str	r2, [r3, #24]
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <LL_LPTIM_ClearFlag_ARRM>:
  * @rmtoll ICR          ARRMCF        LL_LPTIM_ClearFlag_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_ClearFlag_ARRM(LPTIM_TypeDef *LPTIMx)
{
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	f043 0202 	orr.w	r2, r3, #2
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	605a      	str	r2, [r3, #4]
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <LL_LPTIM_IsActiveFlag_ARRM>:
  * @rmtoll ISR          ARRM          LL_LPTIM_IsActiveFlag_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPTIM_IsActiveFlag_ARRM(const LPTIM_TypeDef *LPTIMx)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d101      	bne.n	80006fe <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 80006fa:	2301      	movs	r3, #1
 80006fc:	e000      	b.n	8000700 <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 80006fe:	2300      	movs	r3, #0
}
 8000700:	4618      	mov	r0, r3
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	f043 0202 	orr.w	r2, r3, #2
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	609a      	str	r2, [r3, #8]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <LL_IWDG_ReloadCounter>:
  * @rmtoll KR           KEY           LL_IWDG_ReloadCounter
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800073a:	601a      	str	r2, [r3, #0]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074a:	b095      	sub	sp, #84	@ 0x54
 800074c:	af0a      	add	r7, sp, #40	@ 0x28

  int err = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  uint32_t boot_count = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  uint16_t adc_value = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	837b      	strh	r3, [r7, #26]
  uint32_t isns_value = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t batt_value = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	623b      	str	r3, [r7, #32]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff fee6 	bl	8000534 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000768:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800076c:	f7ff feca 	bl	8000504 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000770:	2003      	movs	r0, #3
 8000772:	f7ff fdab 	bl	80002cc <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn,
 8000776:	f7ff fdcd 	bl	8000314 <__NVIC_GetPriorityGrouping>
 800077a:	4603      	mov	r3, r0
 800077c:	2200      	movs	r2, #0
 800077e:	210f      	movs	r1, #15
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff fdff 	bl	8000384 <NVIC_EncodePriority>
 8000786:	4603      	mov	r3, r0
 8000788:	4619      	mov	r1, r3
 800078a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800078e:	f7ff fdcf 	bl	8000330 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 15, 0));

  SystemClock_Config();
 8000792:	f001 fceb 	bl	800216c <SystemClock_Config>

  // Init Peripherals
  // USB_Init(); // needs testing
  MX_GPIO_Init();
 8000796:	f001 ff91 	bl	80026bc <MX_GPIO_Init>
  // MX_ADC1_Init();
  // MX_COMP1_Init();
  MX_I2C1_Init();
 800079a:	f001 fdfb 	bl	8002394 <MX_I2C1_Init>
  MX_SPI1_Init();
 800079e:	f001 fe59 	bl	8002454 <MX_SPI1_Init>
  MX_TIM1_Init();
 80007a2:	f001 fec3 	bl	800252c <MX_TIM1_Init>
  MX_LPTIM1_Init();
 80007a6:	f001 ffe5 	bl	8002774 <MX_LPTIM1_Init>
  // MX_USART2_UART_Init();
  MX_IWDG_Init(); // init watchdog with 32 second timer
 80007aa:	f002 f81f 	bl	80027ec <MX_IWDG_Init>

  // enable LPTIM1 which triggers interrupt every 30 seconds
  LL_LPTIM_Enable(LPTIM1);
 80007ae:	488b      	ldr	r0, [pc, #556]	@ (80009dc <main+0x294>)
 80007b0:	f7ff ff53 	bl	800065a <LL_LPTIM_Enable>
  LL_LPTIM_EnableIT_ARRM(LPTIM1);
 80007b4:	4889      	ldr	r0, [pc, #548]	@ (80009dc <main+0x294>)
 80007b6:	f7ff ffa9 	bl	800070c <LL_LPTIM_EnableIT_ARRM>
  LL_LPTIM_SetAutoReload(LPTIM1, (256 * ROUTINE_INTERVAL)); // 7680 = 30 seconds
 80007ba:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 80007be:	4887      	ldr	r0, [pc, #540]	@ (80009dc <main+0x294>)
 80007c0:	f7ff ff6e 	bl	80006a0 <LL_LPTIM_SetAutoReload>
  LL_LPTIM_StartCounter(LPTIM1, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 80007c4:	2104      	movs	r1, #4
 80007c6:	4885      	ldr	r0, [pc, #532]	@ (80009dc <main+0x294>)
 80007c8:	f7ff ff57 	bl	800067a <LL_LPTIM_StartCounter>

  // Enable Peripherals
  // LL_ADC_Enable(ADC1);
  LL_I2C_Enable(I2C1);
 80007cc:	4884      	ldr	r0, [pc, #528]	@ (80009e0 <main+0x298>)
 80007ce:	f7ff fe88 	bl	80004e2 <LL_I2C_Enable>
  LL_SPI_Enable(SPI1);
 80007d2:	4884      	ldr	r0, [pc, #528]	@ (80009e4 <main+0x29c>)
 80007d4:	f7ff fec6 	bl	8000564 <LL_SPI_Enable>

  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_0); // Radio NSS high
 80007d8:	2101      	movs	r1, #1
 80007da:	4883      	ldr	r0, [pc, #524]	@ (80009e8 <main+0x2a0>)
 80007dc:	f7ff ff21 	bl	8000622 <LL_GPIO_SetOutputPin>
  PA8_LOW
 80007e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e8:	f7ff ff29 	bl	800063e <LL_GPIO_ResetOutputPin>
  PA6_LOW
 80007ec:	2140      	movs	r1, #64	@ 0x40
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f2:	f7ff ff24 	bl	800063e <LL_GPIO_ResetOutputPin>

  fram_init(&memory, SPI1, 0, 0, 0, 0);
 80007f6:	2300      	movs	r3, #0
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	2300      	movs	r3, #0
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2300      	movs	r3, #0
 8000800:	2200      	movs	r2, #0
 8000802:	4978      	ldr	r1, [pc, #480]	@ (80009e4 <main+0x29c>)
 8000804:	4879      	ldr	r0, [pc, #484]	@ (80009ec <main+0x2a4>)
 8000806:	f003 f8af 	bl	8003968 <fram_init>
  // dump_fram();

  // -- Update Saved Values --
  err = lfs_mount(&lfs, &cfg);
 800080a:	4979      	ldr	r1, [pc, #484]	@ (80009f0 <main+0x2a8>)
 800080c:	4879      	ldr	r0, [pc, #484]	@ (80009f4 <main+0x2ac>)
 800080e:	f00a f85d 	bl	800a8cc <lfs_mount>
 8000812:	61f8      	str	r0, [r7, #28]

  if (err) {
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d003      	beq.n	8000822 <main+0xda>
    // NVIC_SystemReset(); // request reset
    exit(-1);
 800081a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800081e:	f00b fbe3 	bl	800bfe8 <exit>
    // err = lfs_format(&lfs, &cfg);
    // err = lfs_mount(&lfs, &cfg);
  }

  // update boot count
  lfs_file_open(&lfs, &file, "boot_count", LFS_O_RDWR | LFS_O_CREAT);
 8000822:	f240 1303 	movw	r3, #259	@ 0x103
 8000826:	4a74      	ldr	r2, [pc, #464]	@ (80009f8 <main+0x2b0>)
 8000828:	4974      	ldr	r1, [pc, #464]	@ (80009fc <main+0x2b4>)
 800082a:	4872      	ldr	r0, [pc, #456]	@ (80009f4 <main+0x2ac>)
 800082c:	f00a f878 	bl	800a920 <lfs_file_open>
  lfs_file_read(&lfs, &file, &boot_count, sizeof(boot_count));
 8000830:	f107 0214 	add.w	r2, r7, #20
 8000834:	2304      	movs	r3, #4
 8000836:	4971      	ldr	r1, [pc, #452]	@ (80009fc <main+0x2b4>)
 8000838:	486e      	ldr	r0, [pc, #440]	@ (80009f4 <main+0x2ac>)
 800083a:	f00a f8d1 	bl	800a9e0 <lfs_file_read>
  boot_count += 1;
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3301      	adds	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
  lfs_file_rewind(&lfs, &file);
 8000844:	496d      	ldr	r1, [pc, #436]	@ (80009fc <main+0x2b4>)
 8000846:	486b      	ldr	r0, [pc, #428]	@ (80009f4 <main+0x2ac>)
 8000848:	f00a f92a 	bl	800aaa0 <lfs_file_rewind>
  lfs_file_write(&lfs, &file, &boot_count, sizeof(boot_count));
 800084c:	f107 0214 	add.w	r2, r7, #20
 8000850:	2304      	movs	r3, #4
 8000852:	496a      	ldr	r1, [pc, #424]	@ (80009fc <main+0x2b4>)
 8000854:	4867      	ldr	r0, [pc, #412]	@ (80009f4 <main+0x2ac>)
 8000856:	f00a f8f3 	bl	800aa40 <lfs_file_write>
  lfs_file_close(&lfs, &file);
 800085a:	4968      	ldr	r1, [pc, #416]	@ (80009fc <main+0x2b4>)
 800085c:	4865      	ldr	r0, [pc, #404]	@ (80009f4 <main+0x2ac>)
 800085e:	f00a f893 	bl	800a988 <lfs_file_close>

  // update 30 seond interval count
  lfs_file_open(&lfs, &int_count_save, "int_count_30",
 8000862:	f240 1303 	movw	r3, #259	@ 0x103
 8000866:	4a66      	ldr	r2, [pc, #408]	@ (8000a00 <main+0x2b8>)
 8000868:	4966      	ldr	r1, [pc, #408]	@ (8000a04 <main+0x2bc>)
 800086a:	4862      	ldr	r0, [pc, #392]	@ (80009f4 <main+0x2ac>)
 800086c:	f00a f858 	bl	800a920 <lfs_file_open>
                LFS_O_RDWR | LFS_O_CREAT);
  // lfs_file_read(&lfs, &int_count_save, &int_count_30,
  // sizeof(int_count_30));
  lfs_file_close(&lfs, &int_count_save);
 8000870:	4964      	ldr	r1, [pc, #400]	@ (8000a04 <main+0x2bc>)
 8000872:	4860      	ldr	r0, [pc, #384]	@ (80009f4 <main+0x2ac>)
 8000874:	f00a f888 	bl	800a988 <lfs_file_close>
  lfs_unmount(&lfs);
 8000878:	485e      	ldr	r0, [pc, #376]	@ (80009f4 <main+0x2ac>)
 800087a:	f00a f83d 	bl	800a8f8 <lfs_unmount>
  // end update saved values

  LL_IWDG_ReloadCounter(IWDG);
 800087e:	4862      	ldr	r0, [pc, #392]	@ (8000a08 <main+0x2c0>)
 8000880:	f7ff ff54 	bl	800072c <LL_IWDG_ReloadCounter>

  // write boot and flags to flight log
  sprintf(log_buf, "%lu, boot\n", boot_count);
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	461a      	mov	r2, r3
 8000888:	4960      	ldr	r1, [pc, #384]	@ (8000a0c <main+0x2c4>)
 800088a:	4861      	ldr	r0, [pc, #388]	@ (8000a10 <main+0x2c8>)
 800088c:	f00b fc7c 	bl	800c188 <siprintf>
  write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                  strlen(log_buf));
 8000890:	485f      	ldr	r0, [pc, #380]	@ (8000a10 <main+0x2c8>)
 8000892:	f7ff fc7d 	bl	8000190 <strlen>
 8000896:	4603      	mov	r3, r0
  write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	4b5d      	ldr	r3, [pc, #372]	@ (8000a10 <main+0x2c8>)
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	4b5d      	ldr	r3, [pc, #372]	@ (8000a14 <main+0x2cc>)
 80008a0:	4a5d      	ldr	r2, [pc, #372]	@ (8000a18 <main+0x2d0>)
 80008a2:	4953      	ldr	r1, [pc, #332]	@ (80009f0 <main+0x2a8>)
 80008a4:	4853      	ldr	r0, [pc, #332]	@ (80009f4 <main+0x2ac>)
 80008a6:	f003 f965 	bl	8003b74 <write_buf_to_fs>

  sprintf(log_buf, "%lu, flags: 0x%lx\n", boot_count, flags);
 80008aa:	697a      	ldr	r2, [r7, #20]
 80008ac:	4b5b      	ldr	r3, [pc, #364]	@ (8000a1c <main+0x2d4>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	495b      	ldr	r1, [pc, #364]	@ (8000a20 <main+0x2d8>)
 80008b2:	4857      	ldr	r0, [pc, #348]	@ (8000a10 <main+0x2c8>)
 80008b4:	f00b fc68 	bl	800c188 <siprintf>
  write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                  strlen(log_buf));
 80008b8:	4855      	ldr	r0, [pc, #340]	@ (8000a10 <main+0x2c8>)
 80008ba:	f7ff fc69 	bl	8000190 <strlen>
 80008be:	4603      	mov	r3, r0
  write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	4b53      	ldr	r3, [pc, #332]	@ (8000a10 <main+0x2c8>)
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	4b53      	ldr	r3, [pc, #332]	@ (8000a14 <main+0x2cc>)
 80008c8:	4a53      	ldr	r2, [pc, #332]	@ (8000a18 <main+0x2d0>)
 80008ca:	4949      	ldr	r1, [pc, #292]	@ (80009f0 <main+0x2a8>)
 80008cc:	4849      	ldr	r0, [pc, #292]	@ (80009f4 <main+0x2ac>)
 80008ce:	f003 f951 	bl	8003b74 <write_buf_to_fs>

  // read_log(); // dump log over USART2 on PA2

  err = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  log_item.lat_dir = '0';
 80008d6:	4b53      	ldr	r3, [pc, #332]	@ (8000a24 <main+0x2dc>)
 80008d8:	2230      	movs	r2, #48	@ 0x30
 80008da:	731a      	strb	r2, [r3, #12]
  log_item.lon_dir = '0';
 80008dc:	4b51      	ldr	r3, [pc, #324]	@ (8000a24 <main+0x2dc>)
 80008de:	2230      	movs	r2, #48	@ 0x30
 80008e0:	761a      	strb	r2, [r3, #24]

  geofence_init();
 80008e2:	f00b f8a7 	bl	800ba34 <geofence_init>

  // ms5607_reset();
  ms5607_init(I2C1);
 80008e6:	483e      	ldr	r0, [pc, #248]	@ (80009e0 <main+0x298>)
 80008e8:	f00a fa28 	bl	800ad3c <ms5607_init>
  ms5607_get_press_temp(&log_item.pressure, &log_item.temperature);
 80008ec:	494e      	ldr	r1, [pc, #312]	@ (8000a28 <main+0x2e0>)
 80008ee:	484f      	ldr	r0, [pc, #316]	@ (8000a2c <main+0x2e4>)
 80008f0:	f00a fa36 	bl	800ad60 <ms5607_get_press_temp>

  // Enable ADC here since it shares pins with USART2 used in read_log()
  MX_ADC1_Init();
 80008f4:	f001 fc9a 	bl	800222c <MX_ADC1_Init>
  LL_ADC_Enable(ADC1);
 80008f8:	484d      	ldr	r0, [pc, #308]	@ (8000a30 <main+0x2e8>)
 80008fa:	f7ff fd89 	bl	8000410 <LL_ADC_Enable>

  // PID Init
  PIDController_Init(&pid);
 80008fe:	484d      	ldr	r0, [pc, #308]	@ (8000a34 <main+0x2ec>)
 8000900:	f00a fe68 	bl	800b5d4 <PIDController_Init>

  pid_blocking(); // little test function for characterizing power stage
 8000904:	f00b f8ce 	bl	800baa4 <pid_blocking>

  while (1) {

    // tight PI loop
    while ((flags & CUT_FLAG) &&
 8000908:	e0b7      	b.n	8000a7a <main+0x332>
           !(LL_LPTIM_IsActiveFlag_ARRM(LPTIM1) || (flags & LOG_FLAG))) {

      LL_IWDG_ReloadCounter(IWDG);
 800090a:	483f      	ldr	r0, [pc, #252]	@ (8000a08 <main+0x2c0>)
 800090c:	f7ff ff0e 	bl	800072c <LL_IWDG_ReloadCounter>

      // -- Read ADC --
      LL_ADC_REG_StartConversion(ADC1);
 8000910:	4847      	ldr	r0, [pc, #284]	@ (8000a30 <main+0x2e8>)
 8000912:	f7ff fda5 	bl	8000460 <LL_ADC_REG_StartConversion>

      // wait end of conversion flag
      while (!LL_ADC_IsActiveFlag_EOC(ADC1))
 8000916:	bf00      	nop
 8000918:	4845      	ldr	r0, [pc, #276]	@ (8000a30 <main+0x2e8>)
 800091a:	f7ff fdc2 	bl	80004a2 <LL_ADC_IsActiveFlag_EOC>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d0f9      	beq.n	8000918 <main+0x1d0>
        ;

      // read channel1 data in mV
      adc_value = LL_ADC_REG_ReadConversionData12(ADC1);
 8000924:	4842      	ldr	r0, [pc, #264]	@ (8000a30 <main+0x2e8>)
 8000926:	f7ff fdaf 	bl	8000488 <LL_ADC_REG_ReadConversionData12>
 800092a:	4603      	mov	r3, r0
 800092c:	837b      	strh	r3, [r7, #26]

      // clear flag
      LL_ADC_ClearFlag_EOC(ADC1);
 800092e:	4840      	ldr	r0, [pc, #256]	@ (8000a30 <main+0x2e8>)
 8000930:	f7ff fdca 	bl	80004c8 <LL_ADC_ClearFlag_EOC>

      if (log_item.pressure <
 8000934:	4b3b      	ldr	r3, [pc, #236]	@ (8000a24 <main+0x2dc>)
 8000936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000938:	4a3f      	ldr	r2, [pc, #252]	@ (8000a38 <main+0x2f0>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d80e      	bhi.n	800095c <main+0x214>
          100000) // total kludge since it's difficult to figure out if on
                  // battery or USB power right now, if pressure is less than
                  // 1000 mbar it's pretty likely that system is airborne
        batt_value = __LL_ADC_CALC_DATA_TO_VOLTAGE(3000, adc_value,
 800093e:	8b7b      	ldrh	r3, [r7, #26]
 8000940:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000944:	fb02 f303 	mul.w	r3, r2, r3
 8000948:	461a      	mov	r2, r3
 800094a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a3c <main+0x2f4>)
 800094c:	fba3 1302 	umull	r1, r3, r3, r2
 8000950:	1ad2      	subs	r2, r2, r3
 8000952:	0852      	lsrs	r2, r2, #1
 8000954:	4413      	add	r3, r2
 8000956:	0adb      	lsrs	r3, r3, #11
 8000958:	623b      	str	r3, [r7, #32]
 800095a:	e00d      	b.n	8000978 <main+0x230>
                                                   LL_ADC_RESOLUTION_12B);
      else
        batt_value = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, adc_value,
 800095c:	8b7b      	ldrh	r3, [r7, #26]
 800095e:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000962:	fb02 f303 	mul.w	r3, r2, r3
 8000966:	461a      	mov	r2, r3
 8000968:	4b34      	ldr	r3, [pc, #208]	@ (8000a3c <main+0x2f4>)
 800096a:	fba3 1302 	umull	r1, r3, r3, r2
 800096e:	1ad2      	subs	r2, r2, r3
 8000970:	0852      	lsrs	r2, r2, #1
 8000972:	4413      	add	r3, r2
 8000974:	0adb      	lsrs	r3, r3, #11
 8000976:	623b      	str	r3, [r7, #32]
                                                   LL_ADC_RESOLUTION_12B);

      batt_value = (batt_value * 24) / 10;
 8000978:	6a3a      	ldr	r2, [r7, #32]
 800097a:	4613      	mov	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	4413      	add	r3, r2
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	461a      	mov	r2, r3
 8000984:	4b2e      	ldr	r3, [pc, #184]	@ (8000a40 <main+0x2f8>)
 8000986:	fba3 2302 	umull	r2, r3, r3, r2
 800098a:	08db      	lsrs	r3, r3, #3
 800098c:	623b      	str	r3, [r7, #32]

      LL_ADC_REG_StartConversion(ADC1);
 800098e:	4828      	ldr	r0, [pc, #160]	@ (8000a30 <main+0x2e8>)
 8000990:	f7ff fd66 	bl	8000460 <LL_ADC_REG_StartConversion>

      // wait end of conversion flag
      while (!LL_ADC_IsActiveFlag_EOC(ADC1))
 8000994:	bf00      	nop
 8000996:	4826      	ldr	r0, [pc, #152]	@ (8000a30 <main+0x2e8>)
 8000998:	f7ff fd83 	bl	80004a2 <LL_ADC_IsActiveFlag_EOC>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d0f9      	beq.n	8000996 <main+0x24e>
        ;

      // read channel1 data in mV
      adc_value = LL_ADC_REG_ReadConversionData12(ADC1);
 80009a2:	4823      	ldr	r0, [pc, #140]	@ (8000a30 <main+0x2e8>)
 80009a4:	f7ff fd70 	bl	8000488 <LL_ADC_REG_ReadConversionData12>
 80009a8:	4603      	mov	r3, r0
 80009aa:	837b      	strh	r3, [r7, #26]

      // clear flag
      LL_ADC_ClearFlag_EOC(ADC1);
 80009ac:	4820      	ldr	r0, [pc, #128]	@ (8000a30 <main+0x2e8>)
 80009ae:	f7ff fd8b 	bl	80004c8 <LL_ADC_ClearFlag_EOC>

      if (log_item.pressure <
 80009b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <main+0x2dc>)
 80009b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009b6:	4a20      	ldr	r2, [pc, #128]	@ (8000a38 <main+0x2f0>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d843      	bhi.n	8000a44 <main+0x2fc>
          100000) // total kludge since it's difficult to figure out if on
                  // battery or USB power right now, if pressure is less than
                  // 1000 mbar it's pretty likely that system is airborne
        isns_value = __LL_ADC_CALC_DATA_TO_VOLTAGE(3000, adc_value,
 80009bc:	8b7b      	ldrh	r3, [r7, #26]
 80009be:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80009c2:	fb02 f303 	mul.w	r3, r2, r3
 80009c6:	461a      	mov	r2, r3
 80009c8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a3c <main+0x2f4>)
 80009ca:	fba3 1302 	umull	r1, r3, r3, r2
 80009ce:	1ad2      	subs	r2, r2, r3
 80009d0:	0852      	lsrs	r2, r2, #1
 80009d2:	4413      	add	r3, r2
 80009d4:	0adb      	lsrs	r3, r3, #11
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80009d8:	e042      	b.n	8000a60 <main+0x318>
 80009da:	bf00      	nop
 80009dc:	40007c00 	.word	0x40007c00
 80009e0:	40005400 	.word	0x40005400
 80009e4:	40013000 	.word	0x40013000
 80009e8:	48000400 	.word	0x48000400
 80009ec:	200000e4 	.word	0x200000e4
 80009f0:	0800ed0c 	.word	0x0800ed0c
 80009f4:	200001a4 	.word	0x200001a4
 80009f8:	0800dd2c 	.word	0x0800dd2c
 80009fc:	20000224 	.word	0x20000224
 8000a00:	0800dd38 	.word	0x0800dd38
 8000a04:	200002cc 	.word	0x200002cc
 8000a08:	40003000 	.word	0x40003000
 8000a0c:	0800dd48 	.word	0x0800dd48
 8000a10:	20000140 	.word	0x20000140
 8000a14:	0800dd54 	.word	0x0800dd54
 8000a18:	20000278 	.word	0x20000278
 8000a1c:	20000004 	.word	0x20000004
 8000a20:	0800dd60 	.word	0x0800dd60
 8000a24:	200000f8 	.word	0x200000f8
 8000a28:	20000128 	.word	0x20000128
 8000a2c:	20000124 	.word	0x20000124
 8000a30:	50040000 	.word	0x50040000
 8000a34:	20000008 	.word	0x20000008
 8000a38:	0001869f 	.word	0x0001869f
 8000a3c:	00100101 	.word	0x00100101
 8000a40:	cccccccd 	.word	0xcccccccd
                                                   LL_ADC_RESOLUTION_12B);
      else
        isns_value = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, adc_value,
 8000a44:	8b7b      	ldrh	r3, [r7, #26]
 8000a46:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b75      	ldr	r3, [pc, #468]	@ (8000c28 <main+0x4e0>)
 8000a52:	fba3 1302 	umull	r1, r3, r3, r2
 8000a56:	1ad2      	subs	r2, r2, r3
 8000a58:	0852      	lsrs	r2, r2, #1
 8000a5a:	4413      	add	r3, r2
 8000a5c:	0adb      	lsrs	r3, r3, #11
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
                                                   LL_ADC_RESOLUTION_12B);
      // end ADC read

      PIDController_Update(
 8000a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a62:	461a      	mov	r2, r3
 8000a64:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a68:	4870      	ldr	r0, [pc, #448]	@ (8000c2c <main+0x4e4>)
 8000a6a:	f00a fdcd 	bl	800b608 <PIDController_Update>
          &pid, 1000,
          isns_value); // update PID controller with set point 1000mV
      LL_TIM_OC_SetCompareCH3(TIM1, pid.out);
 8000a6e:	4b6f      	ldr	r3, [pc, #444]	@ (8000c2c <main+0x4e4>)
 8000a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a72:	4619      	mov	r1, r3
 8000a74:	486e      	ldr	r0, [pc, #440]	@ (8000c30 <main+0x4e8>)
 8000a76:	f7ff fdb6 	bl	80005e6 <LL_TIM_OC_SetCompareCH3>
    while ((flags & CUT_FLAG) &&
 8000a7a:	4b6e      	ldr	r3, [pc, #440]	@ (8000c34 <main+0x4ec>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d00c      	beq.n	8000aa0 <main+0x358>
           !(LL_LPTIM_IsActiveFlag_ARRM(LPTIM1) || (flags & LOG_FLAG))) {
 8000a86:	486c      	ldr	r0, [pc, #432]	@ (8000c38 <main+0x4f0>)
 8000a88:	f7ff fe2d 	bl	80006e6 <LL_LPTIM_IsActiveFlag_ARRM>
 8000a8c:	4603      	mov	r3, r0
    while ((flags & CUT_FLAG) &&
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d106      	bne.n	8000aa0 <main+0x358>
           !(LL_LPTIM_IsActiveFlag_ARRM(LPTIM1) || (flags & LOG_FLAG))) {
 8000a92:	4b68      	ldr	r3, [pc, #416]	@ (8000c34 <main+0x4ec>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f43f af35 	beq.w	800090a <main+0x1c2>
    }

    // regular 30 second routine
    if (LL_LPTIM_IsActiveFlag_ARRM(LPTIM1) || (flags & LOG_FLAG)) {
 8000aa0:	4865      	ldr	r0, [pc, #404]	@ (8000c38 <main+0x4f0>)
 8000aa2:	f7ff fe20 	bl	80006e6 <LL_LPTIM_IsActiveFlag_ARRM>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d106      	bne.n	8000aba <main+0x372>
 8000aac:	4b61      	ldr	r3, [pc, #388]	@ (8000c34 <main+0x4ec>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f000 8348 	beq.w	800114a <main+0xa02>

      log_item.log_count++;
 8000aba:	4b60      	ldr	r3, [pc, #384]	@ (8000c3c <main+0x4f4>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a5e      	ldr	r2, [pc, #376]	@ (8000c3c <main+0x4f4>)
 8000ac2:	6413      	str	r3, [r2, #64]	@ 0x40
      int_count_30++;
 8000ac4:	4b5e      	ldr	r3, [pc, #376]	@ (8000c40 <main+0x4f8>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	4a5d      	ldr	r2, [pc, #372]	@ (8000c40 <main+0x4f8>)
 8000acc:	6013      	str	r3, [r2, #0]

      // if currently cutting, need to disable quickly
      if (flags & CUT_FLAG) {
 8000ace:	4b59      	ldr	r3, [pc, #356]	@ (8000c34 <main+0x4ec>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d04f      	beq.n	8000b7a <main+0x432>
        LL_TIM_OC_SetCompareCH3(TIM1, 0);
 8000ada:	2100      	movs	r1, #0
 8000adc:	4854      	ldr	r0, [pc, #336]	@ (8000c30 <main+0x4e8>)
 8000ade:	f7ff fd82 	bl	80005e6 <LL_TIM_OC_SetCompareCH3>
        LL_TIM_DisableCounter(TIM1);
 8000ae2:	4853      	ldr	r0, [pc, #332]	@ (8000c30 <main+0x4e8>)
 8000ae4:	f7ff fd5e 	bl	80005a4 <LL_TIM_DisableCounter>

        LL_ADC_REG_SetContinuousMode(ADC1, LL_ADC_REG_CONV_SINGLE);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4856      	ldr	r0, [pc, #344]	@ (8000c44 <main+0x4fc>)
 8000aec:	f7ff fc7d 	bl	80003ea <LL_ADC_REG_SetContinuousMode>

        sprintf(log_buf, "%lu, %lu, end cut %lu at %lu\n", boot_count,
 8000af0:	6979      	ldr	r1, [r7, #20]
 8000af2:	4b52      	ldr	r3, [pc, #328]	@ (8000c3c <main+0x4f4>)
 8000af4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8000af6:	4b54      	ldr	r3, [pc, #336]	@ (8000c48 <main+0x500>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a50      	ldr	r2, [pc, #320]	@ (8000c3c <main+0x4f4>)
 8000afc:	6812      	ldr	r2, [r2, #0]
 8000afe:	9201      	str	r2, [sp, #4]
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	4603      	mov	r3, r0
 8000b04:	460a      	mov	r2, r1
 8000b06:	4951      	ldr	r1, [pc, #324]	@ (8000c4c <main+0x504>)
 8000b08:	4851      	ldr	r0, [pc, #324]	@ (8000c50 <main+0x508>)
 8000b0a:	f00b fb3d 	bl	800c188 <siprintf>
                log_item.log_count, cut_counter, log_item.time);
        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                        strlen(log_buf));
 8000b0e:	4850      	ldr	r0, [pc, #320]	@ (8000c50 <main+0x508>)
 8000b10:	f7ff fb3e 	bl	8000190 <strlen>
 8000b14:	4603      	mov	r3, r0
        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8000b16:	9301      	str	r3, [sp, #4]
 8000b18:	4b4d      	ldr	r3, [pc, #308]	@ (8000c50 <main+0x508>)
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	4b4d      	ldr	r3, [pc, #308]	@ (8000c54 <main+0x50c>)
 8000b1e:	4a4e      	ldr	r2, [pc, #312]	@ (8000c58 <main+0x510>)
 8000b20:	494e      	ldr	r1, [pc, #312]	@ (8000c5c <main+0x514>)
 8000b22:	484f      	ldr	r0, [pc, #316]	@ (8000c60 <main+0x518>)
 8000b24:	f003 f826 	bl	8003b74 <write_buf_to_fs>

        sprintf(log_buf, "%lu, %lu, %lu isns: %lu duty: %lu \n", boot_count,
 8000b28:	6979      	ldr	r1, [r7, #20]
 8000b2a:	4b44      	ldr	r3, [pc, #272]	@ (8000c3c <main+0x4f4>)
 8000b2c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8000b2e:	4b46      	ldr	r3, [pc, #280]	@ (8000c48 <main+0x500>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a3e      	ldr	r2, [pc, #248]	@ (8000c2c <main+0x4e4>)
 8000b34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000b36:	9202      	str	r2, [sp, #8]
 8000b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b3a:	9201      	str	r2, [sp, #4]
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	4603      	mov	r3, r0
 8000b40:	460a      	mov	r2, r1
 8000b42:	4948      	ldr	r1, [pc, #288]	@ (8000c64 <main+0x51c>)
 8000b44:	4842      	ldr	r0, [pc, #264]	@ (8000c50 <main+0x508>)
 8000b46:	f00b fb1f 	bl	800c188 <siprintf>
                log_item.log_count, cut_counter, isns_value, pid.out);
        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                        strlen(log_buf));
 8000b4a:	4841      	ldr	r0, [pc, #260]	@ (8000c50 <main+0x508>)
 8000b4c:	f7ff fb20 	bl	8000190 <strlen>
 8000b50:	4603      	mov	r3, r0
        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8000b52:	9301      	str	r3, [sp, #4]
 8000b54:	4b3e      	ldr	r3, [pc, #248]	@ (8000c50 <main+0x508>)
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	4b3e      	ldr	r3, [pc, #248]	@ (8000c54 <main+0x50c>)
 8000b5a:	4a3f      	ldr	r2, [pc, #252]	@ (8000c58 <main+0x510>)
 8000b5c:	493f      	ldr	r1, [pc, #252]	@ (8000c5c <main+0x514>)
 8000b5e:	4840      	ldr	r0, [pc, #256]	@ (8000c60 <main+0x518>)
 8000b60:	f003 f808 	bl	8003b74 <write_buf_to_fs>

        cut_counter++;
 8000b64:	4b38      	ldr	r3, [pc, #224]	@ (8000c48 <main+0x500>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	4a37      	ldr	r2, [pc, #220]	@ (8000c48 <main+0x500>)
 8000b6c:	6013      	str	r3, [r2, #0]

        flags = flags & ~(CUT_FLAG);
 8000b6e:	4b31      	ldr	r3, [pc, #196]	@ (8000c34 <main+0x4ec>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f023 0302 	bic.w	r3, r3, #2
 8000b76:	4a2f      	ldr	r2, [pc, #188]	@ (8000c34 <main+0x4ec>)
 8000b78:	6013      	str	r3, [r2, #0]
      }

      // -- Pressure/Temp Conversion --
      log_item.prev_pressure = log_item.pressure;
 8000b7a:	4b30      	ldr	r3, [pc, #192]	@ (8000c3c <main+0x4f4>)
 8000b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8000c3c <main+0x4f4>)
 8000b80:	6293      	str	r3, [r2, #40]	@ 0x28
      if (ms5607_get_press_temp(&log_item.pressure, &log_item.temperature) ==
 8000b82:	4939      	ldr	r1, [pc, #228]	@ (8000c68 <main+0x520>)
 8000b84:	4839      	ldr	r0, [pc, #228]	@ (8000c6c <main+0x524>)
 8000b86:	f00a f8eb 	bl	800ad60 <ms5607_get_press_temp>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b90:	d107      	bne.n	8000ba2 <main+0x45a>
          -1)
        sprintf(log_buf, "%lu, %lu, p/t conv fail\n", boot_count,
 8000b92:	697a      	ldr	r2, [r7, #20]
 8000b94:	4b29      	ldr	r3, [pc, #164]	@ (8000c3c <main+0x4f4>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b98:	4935      	ldr	r1, [pc, #212]	@ (8000c70 <main+0x528>)
 8000b9a:	482d      	ldr	r0, [pc, #180]	@ (8000c50 <main+0x508>)
 8000b9c:	f00b faf4 	bl	800c188 <siprintf>
 8000ba0:	e00e      	b.n	8000bc0 <main+0x478>
                log_item.log_count);
      else {
        sprintf(log_buf, "%lu,%lu,%lu,%ld\n", boot_count, log_item.log_count,
 8000ba2:	6979      	ldr	r1, [r7, #20]
 8000ba4:	4b25      	ldr	r3, [pc, #148]	@ (8000c3c <main+0x4f4>)
 8000ba6:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8000ba8:	4b24      	ldr	r3, [pc, #144]	@ (8000c3c <main+0x4f4>)
 8000baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bac:	4a23      	ldr	r2, [pc, #140]	@ (8000c3c <main+0x4f4>)
 8000bae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8000bb0:	9201      	str	r2, [sp, #4]
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	460a      	mov	r2, r1
 8000bb8:	492e      	ldr	r1, [pc, #184]	@ (8000c74 <main+0x52c>)
 8000bba:	4825      	ldr	r0, [pc, #148]	@ (8000c50 <main+0x508>)
 8000bbc:	f00b fae4 	bl	800c188 <siprintf>
                log_item.pressure, log_item.temperature);
      }

      write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                      strlen(log_buf));
 8000bc0:	4823      	ldr	r0, [pc, #140]	@ (8000c50 <main+0x508>)
 8000bc2:	f7ff fae5 	bl	8000190 <strlen>
 8000bc6:	4603      	mov	r3, r0
      write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <main+0x508>)
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	4b21      	ldr	r3, [pc, #132]	@ (8000c54 <main+0x50c>)
 8000bd0:	4a21      	ldr	r2, [pc, #132]	@ (8000c58 <main+0x510>)
 8000bd2:	4922      	ldr	r1, [pc, #136]	@ (8000c5c <main+0x514>)
 8000bd4:	4822      	ldr	r0, [pc, #136]	@ (8000c60 <main+0x518>)
 8000bd6:	f002 ffcd 	bl	8003b74 <write_buf_to_fs>
      // end p/t

      // Save pressure/temp data and current interval count
      err = lfs_mount(&lfs, &cfg);
 8000bda:	4920      	ldr	r1, [pc, #128]	@ (8000c5c <main+0x514>)
 8000bdc:	4820      	ldr	r0, [pc, #128]	@ (8000c60 <main+0x518>)
 8000bde:	f009 fe75 	bl	800a8cc <lfs_mount>
 8000be2:	61f8      	str	r0, [r7, #28]

      if (err) {
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <main+0x4aa>
        exit(-1); // trouble mounting FS
 8000bea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bee:	f00b f9fb 	bl	800bfe8 <exit>
        // lfs_format(&lfs, &cfg);
        // lfs_mount(&lfs, &cfg);
      }

      // update 30 seond interval count
      update_int_count(int_count_30);
 8000bf2:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <main+0x4f8>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f00b f814 	bl	800bc24 <update_int_count>

      // -- GPS read --
      log_item.prev_altitude = log_item.altitude;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <main+0x4f4>)
 8000bfe:	6a1b      	ldr	r3, [r3, #32]
 8000c00:	4a0e      	ldr	r2, [pc, #56]	@ (8000c3c <main+0x4f4>)
 8000c02:	61d3      	str	r3, [r2, #28]

      if (get_gps_data() < 0) {
 8000c04:	f00b f866 	bl	800bcd4 <get_gps_data>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	da36      	bge.n	8000c7c <main+0x534>
        // GPS parse failed
        sprintf(log_buf, "%lu, %lu, GPS parse failed\n", boot_count,
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <main+0x4f4>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c14:	4918      	ldr	r1, [pc, #96]	@ (8000c78 <main+0x530>)
 8000c16:	480e      	ldr	r0, [pc, #56]	@ (8000c50 <main+0x508>)
 8000c18:	f00b fab6 	bl	800c188 <siprintf>
                log_item.log_count);
        log_buf[99] = 0x00;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <main+0x508>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
 8000c24:	e058      	b.n	8000cd8 <main+0x590>
 8000c26:	bf00      	nop
 8000c28:	00100101 	.word	0x00100101
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	40012c00 	.word	0x40012c00
 8000c34:	20000004 	.word	0x20000004
 8000c38:	40007c00 	.word	0x40007c00
 8000c3c:	200000f8 	.word	0x200000f8
 8000c40:	200000dc 	.word	0x200000dc
 8000c44:	50040000 	.word	0x50040000
 8000c48:	200000e0 	.word	0x200000e0
 8000c4c:	0800dd74 	.word	0x0800dd74
 8000c50:	20000140 	.word	0x20000140
 8000c54:	0800dd54 	.word	0x0800dd54
 8000c58:	20000278 	.word	0x20000278
 8000c5c:	0800ed0c 	.word	0x0800ed0c
 8000c60:	200001a4 	.word	0x200001a4
 8000c64:	0800dd94 	.word	0x0800dd94
 8000c68:	20000128 	.word	0x20000128
 8000c6c:	20000124 	.word	0x20000124
 8000c70:	0800ddb8 	.word	0x0800ddb8
 8000c74:	0800ddd4 	.word	0x0800ddd4
 8000c78:	0800dde8 	.word	0x0800dde8
      } else {

        sprintf(log_buf, "%lu,%lu,%lu,%lu.%lu,%c,%lu.%lu,%c,%lu,%lu \n",
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	4b70      	ldr	r3, [pc, #448]	@ (8000e44 <main+0x6fc>)
 8000c82:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	4b6f      	ldr	r3, [pc, #444]	@ (8000e44 <main+0x6fc>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a6e      	ldr	r2, [pc, #440]	@ (8000e44 <main+0x6fc>)
 8000c8c:	6852      	ldr	r2, [r2, #4]
 8000c8e:	496d      	ldr	r1, [pc, #436]	@ (8000e44 <main+0x6fc>)
 8000c90:	6889      	ldr	r1, [r1, #8]
                boot_count, log_item.log_count, log_item.time, log_item.lat_int,
                log_item.lat_frac, log_item.lat_dir, log_item.lon_int,
 8000c92:	486c      	ldr	r0, [pc, #432]	@ (8000e44 <main+0x6fc>)
 8000c94:	7b00      	ldrb	r0, [r0, #12]
        sprintf(log_buf, "%lu,%lu,%lu,%lu.%lu,%c,%lu.%lu,%c,%lu,%lu \n",
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	486a      	ldr	r0, [pc, #424]	@ (8000e44 <main+0x6fc>)
 8000c9a:	6900      	ldr	r0, [r0, #16]
 8000c9c:	4c69      	ldr	r4, [pc, #420]	@ (8000e44 <main+0x6fc>)
 8000c9e:	6964      	ldr	r4, [r4, #20]
                log_item.lon_frac, log_item.lon_dir, log_item.altitude,
 8000ca0:	4d68      	ldr	r5, [pc, #416]	@ (8000e44 <main+0x6fc>)
 8000ca2:	7e2d      	ldrb	r5, [r5, #24]
        sprintf(log_buf, "%lu,%lu,%lu,%lu.%lu,%c,%lu.%lu,%c,%lu,%lu \n",
 8000ca4:	603d      	str	r5, [r7, #0]
 8000ca6:	4d67      	ldr	r5, [pc, #412]	@ (8000e44 <main+0x6fc>)
 8000ca8:	6a2d      	ldr	r5, [r5, #32]
 8000caa:	4e66      	ldr	r6, [pc, #408]	@ (8000e44 <main+0x6fc>)
 8000cac:	6a76      	ldr	r6, [r6, #36]	@ 0x24
 8000cae:	9608      	str	r6, [sp, #32]
 8000cb0:	9507      	str	r5, [sp, #28]
 8000cb2:	683d      	ldr	r5, [r7, #0]
 8000cb4:	9506      	str	r5, [sp, #24]
 8000cb6:	9405      	str	r4, [sp, #20]
 8000cb8:	9004      	str	r0, [sp, #16]
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	9003      	str	r0, [sp, #12]
 8000cbe:	9102      	str	r1, [sp, #8]
 8000cc0:	9201      	str	r2, [sp, #4]
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	495f      	ldr	r1, [pc, #380]	@ (8000e48 <main+0x700>)
 8000cca:	4860      	ldr	r0, [pc, #384]	@ (8000e4c <main+0x704>)
 8000ccc:	f00b fa5c 	bl	800c188 <siprintf>
                log_item.date);
        log_buf[99] = 0x00;
 8000cd0:	4b5e      	ldr	r3, [pc, #376]	@ (8000e4c <main+0x704>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      }

      write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                      strlen(log_buf));
 8000cd8:	485c      	ldr	r0, [pc, #368]	@ (8000e4c <main+0x704>)
 8000cda:	f7ff fa59 	bl	8000190 <strlen>
 8000cde:	4603      	mov	r3, r0
      write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8000ce0:	9301      	str	r3, [sp, #4]
 8000ce2:	4b5a      	ldr	r3, [pc, #360]	@ (8000e4c <main+0x704>)
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	4b5a      	ldr	r3, [pc, #360]	@ (8000e50 <main+0x708>)
 8000ce8:	4a5a      	ldr	r2, [pc, #360]	@ (8000e54 <main+0x70c>)
 8000cea:	495b      	ldr	r1, [pc, #364]	@ (8000e58 <main+0x710>)
 8000cec:	485b      	ldr	r0, [pc, #364]	@ (8000e5c <main+0x714>)
 8000cee:	f002 ff41 	bl	8003b74 <write_buf_to_fs>
      // end GPS read

      // -- Read ADC --
      LL_ADC_REG_StartConversion(ADC1);
 8000cf2:	485b      	ldr	r0, [pc, #364]	@ (8000e60 <main+0x718>)
 8000cf4:	f7ff fbb4 	bl	8000460 <LL_ADC_REG_StartConversion>

      // wait end of conversion flag
      while (!LL_ADC_IsActiveFlag_EOC(ADC1))
 8000cf8:	bf00      	nop
 8000cfa:	4859      	ldr	r0, [pc, #356]	@ (8000e60 <main+0x718>)
 8000cfc:	f7ff fbd1 	bl	80004a2 <LL_ADC_IsActiveFlag_EOC>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0f9      	beq.n	8000cfa <main+0x5b2>
        ;

      adc_value = LL_ADC_REG_ReadConversionData12(ADC1);
 8000d06:	4856      	ldr	r0, [pc, #344]	@ (8000e60 <main+0x718>)
 8000d08:	f7ff fbbe 	bl	8000488 <LL_ADC_REG_ReadConversionData12>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	837b      	strh	r3, [r7, #26]

      // clear flag
      LL_ADC_ClearFlag_EOC(ADC1);
 8000d10:	4853      	ldr	r0, [pc, #332]	@ (8000e60 <main+0x718>)
 8000d12:	f7ff fbd9 	bl	80004c8 <LL_ADC_ClearFlag_EOC>

      if (log_item.pressure <
 8000d16:	4b4b      	ldr	r3, [pc, #300]	@ (8000e44 <main+0x6fc>)
 8000d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d1a:	4a52      	ldr	r2, [pc, #328]	@ (8000e64 <main+0x71c>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d80e      	bhi.n	8000d3e <main+0x5f6>
          100000) // total kludge since it's difficult to figure out if on
                  // battery or USB power right now, if pressure is less than
                  // 1000 mbar it's pretty likely that system is airborne
        batt_value = __LL_ADC_CALC_DATA_TO_VOLTAGE(3000, adc_value,
 8000d20:	8b7b      	ldrh	r3, [r7, #26]
 8000d22:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000d26:	fb02 f303 	mul.w	r3, r2, r3
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b4e      	ldr	r3, [pc, #312]	@ (8000e68 <main+0x720>)
 8000d2e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d32:	1ad2      	subs	r2, r2, r3
 8000d34:	0852      	lsrs	r2, r2, #1
 8000d36:	4413      	add	r3, r2
 8000d38:	0adb      	lsrs	r3, r3, #11
 8000d3a:	623b      	str	r3, [r7, #32]
 8000d3c:	e00d      	b.n	8000d5a <main+0x612>
                                                   LL_ADC_RESOLUTION_12B);
      else
        batt_value = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, adc_value,
 8000d3e:	8b7b      	ldrh	r3, [r7, #26]
 8000d40:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000d44:	fb02 f303 	mul.w	r3, r2, r3
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b47      	ldr	r3, [pc, #284]	@ (8000e68 <main+0x720>)
 8000d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8000d50:	1ad2      	subs	r2, r2, r3
 8000d52:	0852      	lsrs	r2, r2, #1
 8000d54:	4413      	add	r3, r2
 8000d56:	0adb      	lsrs	r3, r3, #11
 8000d58:	623b      	str	r3, [r7, #32]
                                                   LL_ADC_RESOLUTION_12B);

      batt_value = (batt_value * 24) / 10;
 8000d5a:	6a3a      	ldr	r2, [r7, #32]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b41      	ldr	r3, [pc, #260]	@ (8000e6c <main+0x724>)
 8000d68:	fba3 2302 	umull	r2, r3, r3, r2
 8000d6c:	08db      	lsrs	r3, r3, #3
 8000d6e:	623b      	str	r3, [r7, #32]
      log_item.batt_v = batt_value;
 8000d70:	4a34      	ldr	r2, [pc, #208]	@ (8000e44 <main+0x6fc>)
 8000d72:	6a3b      	ldr	r3, [r7, #32]
 8000d74:	6453      	str	r3, [r2, #68]	@ 0x44

      // do another conversion to get back to the start of the sequence
      LL_ADC_REG_StartConversion(ADC1);
 8000d76:	483a      	ldr	r0, [pc, #232]	@ (8000e60 <main+0x718>)
 8000d78:	f7ff fb72 	bl	8000460 <LL_ADC_REG_StartConversion>
      // wait end of conversion flag
      while (!LL_ADC_IsActiveFlag_EOC(ADC1))
 8000d7c:	bf00      	nop
 8000d7e:	4838      	ldr	r0, [pc, #224]	@ (8000e60 <main+0x718>)
 8000d80:	f7ff fb8f 	bl	80004a2 <LL_ADC_IsActiveFlag_EOC>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d0f9      	beq.n	8000d7e <main+0x636>
        ;
      // clear flag
      LL_ADC_ClearFlag_EOC(ADC1);
 8000d8a:	4835      	ldr	r0, [pc, #212]	@ (8000e60 <main+0x718>)
 8000d8c:	f7ff fb9c 	bl	80004c8 <LL_ADC_ClearFlag_EOC>

      sprintf(log_buf, "%lu,%lu,batt %lu\n", boot_count, log_item.log_count,
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	4b2c      	ldr	r3, [pc, #176]	@ (8000e44 <main+0x6fc>)
 8000d94:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000d96:	4b2b      	ldr	r3, [pc, #172]	@ (8000e44 <main+0x6fc>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	4934      	ldr	r1, [pc, #208]	@ (8000e70 <main+0x728>)
 8000da0:	482a      	ldr	r0, [pc, #168]	@ (8000e4c <main+0x704>)
 8000da2:	f00b f9f1 	bl	800c188 <siprintf>
              log_item.batt_v);

      write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                      strlen(log_buf));
 8000da6:	4829      	ldr	r0, [pc, #164]	@ (8000e4c <main+0x704>)
 8000da8:	f7ff f9f2 	bl	8000190 <strlen>
 8000dac:	4603      	mov	r3, r0
      write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	4b26      	ldr	r3, [pc, #152]	@ (8000e4c <main+0x704>)
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	4b26      	ldr	r3, [pc, #152]	@ (8000e50 <main+0x708>)
 8000db6:	4a27      	ldr	r2, [pc, #156]	@ (8000e54 <main+0x70c>)
 8000db8:	4927      	ldr	r1, [pc, #156]	@ (8000e58 <main+0x710>)
 8000dba:	4828      	ldr	r0, [pc, #160]	@ (8000e5c <main+0x714>)
 8000dbc:	f002 feda 	bl	8003b74 <write_buf_to_fs>
      // end ADC read

      // -- Thermal Management --
      if ((log_item.temperature) <= -2000 && !(flags & HEAT_FLAG)) {
 8000dc0:	4b20      	ldr	r3, [pc, #128]	@ (8000e44 <main+0x6fc>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc4:	f513 6ffa 	cmn.w	r3, #2000	@ 0x7d0
 8000dc8:	dc5a      	bgt.n	8000e80 <main+0x738>
 8000dca:	4b2a      	ldr	r3, [pc, #168]	@ (8000e74 <main+0x72c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d154      	bne.n	8000e80 <main+0x738>
        // turn on heater?
        PA6_HIGH
 8000dd6:	2140      	movs	r1, #64	@ 0x40
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ddc:	f7ff fc21 	bl	8000622 <LL_GPIO_SetOutputPin>

        // Enable PWM channel outputs
        LL_TIM_EnableCounter(TIM1);
 8000de0:	4825      	ldr	r0, [pc, #148]	@ (8000e78 <main+0x730>)
 8000de2:	f7ff fbcf 	bl	8000584 <LL_TIM_EnableCounter>
        LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH3N);
 8000de6:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8000dea:	4823      	ldr	r0, [pc, #140]	@ (8000e78 <main+0x730>)
 8000dec:	f7ff fbea 	bl	80005c4 <LL_TIM_CC_EnableChannel>
        LL_TIM_OC_SetCompareCH3(TIM1, 15);
 8000df0:	210f      	movs	r1, #15
 8000df2:	4821      	ldr	r0, [pc, #132]	@ (8000e78 <main+0x730>)
 8000df4:	f7ff fbf7 	bl	80005e6 <LL_TIM_OC_SetCompareCH3>
        LL_TIM_EnableAllOutputs(TIM1);
 8000df8:	481f      	ldr	r0, [pc, #124]	@ (8000e78 <main+0x730>)
 8000dfa:	f7ff fc02 	bl	8000602 <LL_TIM_EnableAllOutputs>

        sprintf(log_buf, "%lu,%lu, HEAT ON, temp is %lu at %lu\n", boot_count,
 8000dfe:	6979      	ldr	r1, [r7, #20]
 8000e00:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <main+0x6fc>)
 8000e02:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8000e04:	4b0f      	ldr	r3, [pc, #60]	@ (8000e44 <main+0x6fc>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e08:	4a0e      	ldr	r2, [pc, #56]	@ (8000e44 <main+0x6fc>)
 8000e0a:	6812      	ldr	r2, [r2, #0]
 8000e0c:	9201      	str	r2, [sp, #4]
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	4603      	mov	r3, r0
 8000e12:	460a      	mov	r2, r1
 8000e14:	4919      	ldr	r1, [pc, #100]	@ (8000e7c <main+0x734>)
 8000e16:	480d      	ldr	r0, [pc, #52]	@ (8000e4c <main+0x704>)
 8000e18:	f00b f9b6 	bl	800c188 <siprintf>
                log_item.log_count, log_item.temperature, log_item.time);
        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                        strlen(log_buf));
 8000e1c:	480b      	ldr	r0, [pc, #44]	@ (8000e4c <main+0x704>)
 8000e1e:	f7ff f9b7 	bl	8000190 <strlen>
 8000e22:	4603      	mov	r3, r0
        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8000e24:	9301      	str	r3, [sp, #4]
 8000e26:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <main+0x704>)
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <main+0x708>)
 8000e2c:	4a09      	ldr	r2, [pc, #36]	@ (8000e54 <main+0x70c>)
 8000e2e:	490a      	ldr	r1, [pc, #40]	@ (8000e58 <main+0x710>)
 8000e30:	480a      	ldr	r0, [pc, #40]	@ (8000e5c <main+0x714>)
 8000e32:	f002 fe9f 	bl	8003b74 <write_buf_to_fs>

        flags = flags | HEAT_FLAG;
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <main+0x72c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e3e:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <main+0x72c>)
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	e056      	b.n	8000ef2 <main+0x7aa>
 8000e44:	200000f8 	.word	0x200000f8
 8000e48:	0800de04 	.word	0x0800de04
 8000e4c:	20000140 	.word	0x20000140
 8000e50:	0800dd54 	.word	0x0800dd54
 8000e54:	20000278 	.word	0x20000278
 8000e58:	0800ed0c 	.word	0x0800ed0c
 8000e5c:	200001a4 	.word	0x200001a4
 8000e60:	50040000 	.word	0x50040000
 8000e64:	0001869f 	.word	0x0001869f
 8000e68:	00100101 	.word	0x00100101
 8000e6c:	cccccccd 	.word	0xcccccccd
 8000e70:	0800de30 	.word	0x0800de30
 8000e74:	20000004 	.word	0x20000004
 8000e78:	40012c00 	.word	0x40012c00
 8000e7c:	0800de44 	.word	0x0800de44

      } else if ((log_item.temperature) >= -1500 && (flags & HEAT_FLAG)) {
 8000e80:	4b99      	ldr	r3, [pc, #612]	@ (80010e8 <main+0x9a0>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e84:	4a99      	ldr	r2, [pc, #612]	@ (80010ec <main+0x9a4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	db33      	blt.n	8000ef2 <main+0x7aa>
 8000e8a:	4b99      	ldr	r3, [pc, #612]	@ (80010f0 <main+0x9a8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d02d      	beq.n	8000ef2 <main+0x7aa>
        PA6_LOW
 8000e96:	2140      	movs	r1, #64	@ 0x40
 8000e98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e9c:	f7ff fbcf 	bl	800063e <LL_GPIO_ResetOutputPin>

        LL_TIM_OC_SetCompareCH3(TIM1, 0);
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4894      	ldr	r0, [pc, #592]	@ (80010f4 <main+0x9ac>)
 8000ea4:	f7ff fb9f 	bl	80005e6 <LL_TIM_OC_SetCompareCH3>
        LL_TIM_DisableCounter(TIM1);
 8000ea8:	4892      	ldr	r0, [pc, #584]	@ (80010f4 <main+0x9ac>)
 8000eaa:	f7ff fb7b 	bl	80005a4 <LL_TIM_DisableCounter>

        sprintf(log_buf, "%lu,%lu, HEAT OFF, temp is %lu at %lu\n", boot_count,
 8000eae:	6979      	ldr	r1, [r7, #20]
 8000eb0:	4b8d      	ldr	r3, [pc, #564]	@ (80010e8 <main+0x9a0>)
 8000eb2:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8000eb4:	4b8c      	ldr	r3, [pc, #560]	@ (80010e8 <main+0x9a0>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb8:	4a8b      	ldr	r2, [pc, #556]	@ (80010e8 <main+0x9a0>)
 8000eba:	6812      	ldr	r2, [r2, #0]
 8000ebc:	9201      	str	r2, [sp, #4]
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	460a      	mov	r2, r1
 8000ec4:	498c      	ldr	r1, [pc, #560]	@ (80010f8 <main+0x9b0>)
 8000ec6:	488d      	ldr	r0, [pc, #564]	@ (80010fc <main+0x9b4>)
 8000ec8:	f00b f95e 	bl	800c188 <siprintf>
                log_item.log_count, log_item.temperature, log_item.time);
        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                        strlen(log_buf));
 8000ecc:	488b      	ldr	r0, [pc, #556]	@ (80010fc <main+0x9b4>)
 8000ece:	f7ff f95f 	bl	8000190 <strlen>
 8000ed2:	4603      	mov	r3, r0
        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	4b89      	ldr	r3, [pc, #548]	@ (80010fc <main+0x9b4>)
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	4b89      	ldr	r3, [pc, #548]	@ (8001100 <main+0x9b8>)
 8000edc:	4a89      	ldr	r2, [pc, #548]	@ (8001104 <main+0x9bc>)
 8000ede:	498a      	ldr	r1, [pc, #552]	@ (8001108 <main+0x9c0>)
 8000ee0:	488a      	ldr	r0, [pc, #552]	@ (800110c <main+0x9c4>)
 8000ee2:	f002 fe47 	bl	8003b74 <write_buf_to_fs>

        flags = flags & ~(HEAT_FLAG);
 8000ee6:	4b82      	ldr	r3, [pc, #520]	@ (80010f0 <main+0x9a8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000eee:	4a80      	ldr	r2, [pc, #512]	@ (80010f0 <main+0x9a8>)
 8000ef0:	6013      	str	r3, [r2, #0]
      }
      // end thermal management

      // -- Termination Logic --
      if (log_item.prev_pressure <
 8000ef2:	4b7d      	ldr	r3, [pc, #500]	@ (80010e8 <main+0x9a0>)
 8000ef4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
          log_item.pressure) { // if pressure increased since last
 8000ef6:	4b7c      	ldr	r3, [pc, #496]	@ (80010e8 <main+0x9a0>)
 8000ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (log_item.prev_pressure <
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d226      	bcs.n	8000f4c <main+0x804>
                               // measurement, might be descending, would be
                               // more accurate with more historical data
        if (log_item.pressure - log_item.prev_pressure >= 1000) {
 8000efe:	4b7a      	ldr	r3, [pc, #488]	@ (80010e8 <main+0x9a0>)
 8000f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f02:	4b79      	ldr	r3, [pc, #484]	@ (80010e8 <main+0x9a0>)
 8000f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f0c:	d31e      	bcc.n	8000f4c <main+0x804>

          sprintf(log_buf, "%lu, %lu, DESC, press diff is %lu at %lu\n",
 8000f0e:	6979      	ldr	r1, [r7, #20]
 8000f10:	4b75      	ldr	r3, [pc, #468]	@ (80010e8 <main+0x9a0>)
 8000f12:	6c18      	ldr	r0, [r3, #64]	@ 0x40
                  boot_count, log_item.log_count,
                  (log_item.pressure - log_item.prev_pressure), log_item.time);
 8000f14:	4b74      	ldr	r3, [pc, #464]	@ (80010e8 <main+0x9a0>)
 8000f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f18:	4b73      	ldr	r3, [pc, #460]	@ (80010e8 <main+0x9a0>)
 8000f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          sprintf(log_buf, "%lu, %lu, DESC, press diff is %lu at %lu\n",
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	4a72      	ldr	r2, [pc, #456]	@ (80010e8 <main+0x9a0>)
 8000f20:	6812      	ldr	r2, [r2, #0]
 8000f22:	9201      	str	r2, [sp, #4]
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	4603      	mov	r3, r0
 8000f28:	460a      	mov	r2, r1
 8000f2a:	4979      	ldr	r1, [pc, #484]	@ (8001110 <main+0x9c8>)
 8000f2c:	4873      	ldr	r0, [pc, #460]	@ (80010fc <main+0x9b4>)
 8000f2e:	f00b f92b 	bl	800c188 <siprintf>

          write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                          strlen(log_buf));
 8000f32:	4872      	ldr	r0, [pc, #456]	@ (80010fc <main+0x9b4>)
 8000f34:	f7ff f92c 	bl	8000190 <strlen>
 8000f38:	4603      	mov	r3, r0
          write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	4b6f      	ldr	r3, [pc, #444]	@ (80010fc <main+0x9b4>)
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	4b6f      	ldr	r3, [pc, #444]	@ (8001100 <main+0x9b8>)
 8000f42:	4a70      	ldr	r2, [pc, #448]	@ (8001104 <main+0x9bc>)
 8000f44:	4970      	ldr	r1, [pc, #448]	@ (8001108 <main+0x9c0>)
 8000f46:	4871      	ldr	r0, [pc, #452]	@ (800110c <main+0x9c4>)
 8000f48:	f002 fe14 	bl	8003b74 <write_buf_to_fs>

          // set the flag which we're not doing right now
        }
      }

      if (log_item.prev_altitude >
 8000f4c:	4b66      	ldr	r3, [pc, #408]	@ (80010e8 <main+0x9a0>)
 8000f4e:	69da      	ldr	r2, [r3, #28]
          log_item.altitude) { // if altitude descreased, might be descending
 8000f50:	4b65      	ldr	r3, [pc, #404]	@ (80010e8 <main+0x9a0>)
 8000f52:	6a1b      	ldr	r3, [r3, #32]
      if (log_item.prev_altitude >
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d926      	bls.n	8000fa6 <main+0x85e>
        if (log_item.prev_altitude - log_item.altitude >= 900) {
 8000f58:	4b63      	ldr	r3, [pc, #396]	@ (80010e8 <main+0x9a0>)
 8000f5a:	69da      	ldr	r2, [r3, #28]
 8000f5c:	4b62      	ldr	r3, [pc, #392]	@ (80010e8 <main+0x9a0>)
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000f66:	d31e      	bcc.n	8000fa6 <main+0x85e>

          sprintf(log_buf, "%lu,%lu, DESC, altitude diff is %lu at %lu\n",
 8000f68:	6979      	ldr	r1, [r7, #20]
 8000f6a:	4b5f      	ldr	r3, [pc, #380]	@ (80010e8 <main+0x9a0>)
 8000f6c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
                  boot_count, log_item.log_count,
                  (log_item.pressure - log_item.prev_pressure), log_item.time);
 8000f6e:	4b5e      	ldr	r3, [pc, #376]	@ (80010e8 <main+0x9a0>)
 8000f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f72:	4b5d      	ldr	r3, [pc, #372]	@ (80010e8 <main+0x9a0>)
 8000f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          sprintf(log_buf, "%lu,%lu, DESC, altitude diff is %lu at %lu\n",
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	4a5b      	ldr	r2, [pc, #364]	@ (80010e8 <main+0x9a0>)
 8000f7a:	6812      	ldr	r2, [r2, #0]
 8000f7c:	9201      	str	r2, [sp, #4]
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	4603      	mov	r3, r0
 8000f82:	460a      	mov	r2, r1
 8000f84:	4963      	ldr	r1, [pc, #396]	@ (8001114 <main+0x9cc>)
 8000f86:	485d      	ldr	r0, [pc, #372]	@ (80010fc <main+0x9b4>)
 8000f88:	f00b f8fe 	bl	800c188 <siprintf>

          write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                          strlen(log_buf));
 8000f8c:	485b      	ldr	r0, [pc, #364]	@ (80010fc <main+0x9b4>)
 8000f8e:	f7ff f8ff 	bl	8000190 <strlen>
 8000f92:	4603      	mov	r3, r0
          write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	4b59      	ldr	r3, [pc, #356]	@ (80010fc <main+0x9b4>)
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	4b59      	ldr	r3, [pc, #356]	@ (8001100 <main+0x9b8>)
 8000f9c:	4a59      	ldr	r2, [pc, #356]	@ (8001104 <main+0x9bc>)
 8000f9e:	495a      	ldr	r1, [pc, #360]	@ (8001108 <main+0x9c0>)
 8000fa0:	485a      	ldr	r0, [pc, #360]	@ (800110c <main+0x9c4>)
 8000fa2:	f002 fde7 	bl	8003b74 <write_buf_to_fs>

          // set the flag which we're not doing right now
        }
      }

      if (cut_counter < 4) { // limit total number of cut attempts
 8000fa6:	4b5c      	ldr	r3, [pc, #368]	@ (8001118 <main+0x9d0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d85b      	bhi.n	8001066 <main+0x91e>

        if ((int_count_30 >= (cut_int_timer * 2)) &&
 8000fae:	4b5b      	ldr	r3, [pc, #364]	@ (800111c <main+0x9d4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	005a      	lsls	r2, r3, #1
 8000fb4:	4b5a      	ldr	r3, [pc, #360]	@ (8001120 <main+0x9d8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d827      	bhi.n	800100c <main+0x8c4>
            (flags & INT_TIM_EN_FLAG)) { // timer trigger
 8000fbc:	4b4c      	ldr	r3, [pc, #304]	@ (80010f0 <main+0x9a8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0308 	and.w	r3, r3, #8
        if ((int_count_30 >= (cut_int_timer * 2)) &&
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d021      	beq.n	800100c <main+0x8c4>

          sprintf(log_buf, "%lu,%lu, cut %lu int trig: int cnt at %lu\n",
 8000fc8:	6979      	ldr	r1, [r7, #20]
 8000fca:	4b47      	ldr	r3, [pc, #284]	@ (80010e8 <main+0x9a0>)
 8000fcc:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8000fce:	4b52      	ldr	r3, [pc, #328]	@ (8001118 <main+0x9d0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a45      	ldr	r2, [pc, #276]	@ (80010e8 <main+0x9a0>)
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	9201      	str	r2, [sp, #4]
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460a      	mov	r2, r1
 8000fde:	4951      	ldr	r1, [pc, #324]	@ (8001124 <main+0x9dc>)
 8000fe0:	4846      	ldr	r0, [pc, #280]	@ (80010fc <main+0x9b4>)
 8000fe2:	f00b f8d1 	bl	800c188 <siprintf>
                  boot_count, log_item.log_count, cut_counter, log_item.time);

          write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                          strlen(log_buf));
 8000fe6:	4845      	ldr	r0, [pc, #276]	@ (80010fc <main+0x9b4>)
 8000fe8:	f7ff f8d2 	bl	8000190 <strlen>
 8000fec:	4603      	mov	r3, r0
          write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	4b42      	ldr	r3, [pc, #264]	@ (80010fc <main+0x9b4>)
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	4b42      	ldr	r3, [pc, #264]	@ (8001100 <main+0x9b8>)
 8000ff6:	4a43      	ldr	r2, [pc, #268]	@ (8001104 <main+0x9bc>)
 8000ff8:	4943      	ldr	r1, [pc, #268]	@ (8001108 <main+0x9c0>)
 8000ffa:	4844      	ldr	r0, [pc, #272]	@ (800110c <main+0x9c4>)
 8000ffc:	f002 fdba 	bl	8003b74 <write_buf_to_fs>

          flags = flags | CUT_FLAG;
 8001000:	4b3b      	ldr	r3, [pc, #236]	@ (80010f0 <main+0x9a8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	4a39      	ldr	r2, [pc, #228]	@ (80010f0 <main+0x9a8>)
 800100a:	6013      	str	r3, [r2, #0]
        }

        if ((log_item.temperature <= -3000) &&
 800100c:	4b36      	ldr	r3, [pc, #216]	@ (80010e8 <main+0x9a0>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001010:	4a45      	ldr	r2, [pc, #276]	@ (8001128 <main+0x9e0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	da27      	bge.n	8001066 <main+0x91e>
            (flags & INT_TIM_EN_FLAG)) { // temperature trigger
 8001016:	4b36      	ldr	r3, [pc, #216]	@ (80010f0 <main+0x9a8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0308 	and.w	r3, r3, #8
        if ((log_item.temperature <= -3000) &&
 800101e:	2b00      	cmp	r3, #0
 8001020:	d021      	beq.n	8001066 <main+0x91e>

          sprintf(log_buf, "%lu,%lu, cut %lu temp trig: int cnt at %lu\n",
 8001022:	6979      	ldr	r1, [r7, #20]
 8001024:	4b30      	ldr	r3, [pc, #192]	@ (80010e8 <main+0x9a0>)
 8001026:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001028:	4b3b      	ldr	r3, [pc, #236]	@ (8001118 <main+0x9d0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a2e      	ldr	r2, [pc, #184]	@ (80010e8 <main+0x9a0>)
 800102e:	6812      	ldr	r2, [r2, #0]
 8001030:	9201      	str	r2, [sp, #4]
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	4603      	mov	r3, r0
 8001036:	460a      	mov	r2, r1
 8001038:	493c      	ldr	r1, [pc, #240]	@ (800112c <main+0x9e4>)
 800103a:	4830      	ldr	r0, [pc, #192]	@ (80010fc <main+0x9b4>)
 800103c:	f00b f8a4 	bl	800c188 <siprintf>
                  boot_count, log_item.log_count, cut_counter, log_item.time);

          write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                          strlen(log_buf));
 8001040:	482e      	ldr	r0, [pc, #184]	@ (80010fc <main+0x9b4>)
 8001042:	f7ff f8a5 	bl	8000190 <strlen>
 8001046:	4603      	mov	r3, r0
          write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	4b2c      	ldr	r3, [pc, #176]	@ (80010fc <main+0x9b4>)
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	4b2c      	ldr	r3, [pc, #176]	@ (8001100 <main+0x9b8>)
 8001050:	4a2c      	ldr	r2, [pc, #176]	@ (8001104 <main+0x9bc>)
 8001052:	492d      	ldr	r1, [pc, #180]	@ (8001108 <main+0x9c0>)
 8001054:	482d      	ldr	r0, [pc, #180]	@ (800110c <main+0x9c4>)
 8001056:	f002 fd8d 	bl	8003b74 <write_buf_to_fs>

          flags = flags | CUT_FLAG;
 800105a:	4b25      	ldr	r3, [pc, #148]	@ (80010f0 <main+0x9a8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	4a23      	ldr	r2, [pc, #140]	@ (80010f0 <main+0x9a8>)
 8001064:	6013      	str	r3, [r2, #0]
        }
      }

      if ((flags & CUT_FLAG) &&
 8001066:	4b22      	ldr	r3, [pc, #136]	@ (80010f0 <main+0x9a8>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d062      	beq.n	8001138 <main+0x9f0>
          (flags &
 8001072:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <main+0x9a8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f023 0320 	bic.w	r3, r3, #32
      if ((flags & CUT_FLAG) &&
 800107a:	2b00      	cmp	r3, #0
 800107c:	d05c      	beq.n	8001138 <main+0x9f0>
           ~(DESC_FLAG))) { // a trigger set cut flag AND descent not detected

        // disable thermal management
        PA6_LOW
 800107e:	2140      	movs	r1, #64	@ 0x40
 8001080:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001084:	f7ff fadb 	bl	800063e <LL_GPIO_ResetOutputPin>

        // Enable PWM channel outputs
        LL_TIM_EnableCounter(TIM1);
 8001088:	481a      	ldr	r0, [pc, #104]	@ (80010f4 <main+0x9ac>)
 800108a:	f7ff fa7b 	bl	8000584 <LL_TIM_EnableCounter>
        LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH3N);
 800108e:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001092:	4818      	ldr	r0, [pc, #96]	@ (80010f4 <main+0x9ac>)
 8001094:	f7ff fa96 	bl	80005c4 <LL_TIM_CC_EnableChannel>
        LL_TIM_OC_SetCompareCH3(TIM1, 0);
 8001098:	2100      	movs	r1, #0
 800109a:	4816      	ldr	r0, [pc, #88]	@ (80010f4 <main+0x9ac>)
 800109c:	f7ff faa3 	bl	80005e6 <LL_TIM_OC_SetCompareCH3>
        LL_TIM_EnableAllOutputs(TIM1);
 80010a0:	4814      	ldr	r0, [pc, #80]	@ (80010f4 <main+0x9ac>)
 80010a2:	f7ff faae 	bl	8000602 <LL_TIM_EnableAllOutputs>

        LL_ADC_Disable(ADC1);
 80010a6:	4822      	ldr	r0, [pc, #136]	@ (8001130 <main+0x9e8>)
 80010a8:	f7ff f9c6 	bl	8000438 <LL_ADC_Disable>
        MX_ADC1_Init();
 80010ac:	f001 f8be 	bl	800222c <MX_ADC1_Init>
        LL_ADC_Enable(ADC1);
 80010b0:	481f      	ldr	r0, [pc, #124]	@ (8001130 <main+0x9e8>)
 80010b2:	f7ff f9ad 	bl	8000410 <LL_ADC_Enable>

        sprintf(log_buf, "%lu, start cut %lu at %lu\n", boot_count, cut_counter,
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <main+0x9d0>)
 80010ba:	6819      	ldr	r1, [r3, #0]
 80010bc:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <main+0x9a0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	460b      	mov	r3, r1
 80010c4:	491b      	ldr	r1, [pc, #108]	@ (8001134 <main+0x9ec>)
 80010c6:	480d      	ldr	r0, [pc, #52]	@ (80010fc <main+0x9b4>)
 80010c8:	f00b f85e 	bl	800c188 <siprintf>
                log_item.time);
        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
                        strlen(log_buf));
 80010cc:	480b      	ldr	r0, [pc, #44]	@ (80010fc <main+0x9b4>)
 80010ce:	f7ff f85f 	bl	8000190 <strlen>
 80010d2:	4603      	mov	r3, r0
        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", log_buf,
 80010d4:	9301      	str	r3, [sp, #4]
 80010d6:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <main+0x9b4>)
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <main+0x9b8>)
 80010dc:	4a09      	ldr	r2, [pc, #36]	@ (8001104 <main+0x9bc>)
 80010de:	490a      	ldr	r1, [pc, #40]	@ (8001108 <main+0x9c0>)
 80010e0:	480a      	ldr	r0, [pc, #40]	@ (800110c <main+0x9c4>)
 80010e2:	f002 fd47 	bl	8003b74 <write_buf_to_fs>
 80010e6:	e027      	b.n	8001138 <main+0x9f0>
 80010e8:	200000f8 	.word	0x200000f8
 80010ec:	fffffa24 	.word	0xfffffa24
 80010f0:	20000004 	.word	0x20000004
 80010f4:	40012c00 	.word	0x40012c00
 80010f8:	0800de6c 	.word	0x0800de6c
 80010fc:	20000140 	.word	0x20000140
 8001100:	0800dd54 	.word	0x0800dd54
 8001104:	20000278 	.word	0x20000278
 8001108:	0800ed0c 	.word	0x0800ed0c
 800110c:	200001a4 	.word	0x200001a4
 8001110:	0800de94 	.word	0x0800de94
 8001114:	0800dec0 	.word	0x0800dec0
 8001118:	200000e0 	.word	0x200000e0
 800111c:	20000000 	.word	0x20000000
 8001120:	200000dc 	.word	0x200000dc
 8001124:	0800deec 	.word	0x0800deec
 8001128:	fffff449 	.word	0xfffff449
 800112c:	0800df18 	.word	0x0800df18
 8001130:	50040000 	.word	0x50040000
 8001134:	0800df44 	.word	0x0800df44
      }
      // end Termination Logic

      // clean up loop
      flags = flags & ~(LOG_FLAG);
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <main+0xa0c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f023 0301 	bic.w	r3, r3, #1
 8001140:	4a04      	ldr	r2, [pc, #16]	@ (8001154 <main+0xa0c>)
 8001142:	6013      	str	r3, [r2, #0]
      LL_LPTIM_ClearFLAG_ARRM(LPTIM1);
 8001144:	4804      	ldr	r0, [pc, #16]	@ (8001158 <main+0xa10>)
 8001146:	f7ff fabe 	bl	80006c6 <LL_LPTIM_ClearFlag_ARRM>
    }

    LL_IWDG_ReloadCounter(IWDG);
 800114a:	4804      	ldr	r0, [pc, #16]	@ (800115c <main+0xa14>)
 800114c:	f7ff faee 	bl	800072c <LL_IWDG_ReloadCounter>
    while ((flags & CUT_FLAG) &&
 8001150:	e493      	b.n	8000a7a <main+0x332>
 8001152:	bf00      	nop
 8001154:	20000004 	.word	0x20000004
 8001158:	40007c00 	.word	0x40007c00
 800115c:	40003000 	.word	0x40003000

08001160 <LPTIM1_IRQHandler>:
  }
}

void LPTIM1_IRQHandler(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  flags = flags | LOG_FLAG; // set log flag to signal to main loop to do a log
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <LPTIM1_IRQHandler+0x1c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	4a03      	ldr	r2, [pc, #12]	@ (800117c <LPTIM1_IRQHandler+0x1c>)
 800116e:	6013      	str	r3, [r2, #0]
  // LL_TIM_EnableCounter(TIM1);
  // LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH3N);
  // LL_TIM_OC_SetCompareCH3(TIM1, 50); // change this
  //  LL_TIM_EnableAllOutputs(TIM1);

  LL_LPTIM_ClearFLAG_ARRM(LPTIM1);
 8001170:	4803      	ldr	r0, [pc, #12]	@ (8001180 <LPTIM1_IRQHandler+0x20>)
 8001172:	f7ff faa8 	bl	80006c6 <LL_LPTIM_ClearFlag_ARRM>
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000004 	.word	0x20000004
 8001180:	40007c00 	.word	0x40007c00

08001184 <USB_IRQHandler>:

  // Clear the USB Reset (D+ & D- low) to start enumeration
  USB->CNTR &= ~USB_CNTR_FRES;
}

void USB_IRQHandler() {}
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001196:	bf00      	nop
 8001198:	e7fd      	b.n	8001196 <NMI_Handler+0x4>

0800119a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119e:	bf00      	nop
 80011a0:	e7fd      	b.n	800119e <HardFault_Handler+0x4>

080011a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a6:	bf00      	nop
 80011a8:	e7fd      	b.n	80011a6 <MemManage_Handler+0x4>

080011aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	bf00      	nop
 80011b0:	e7fd      	b.n	80011ae <BusFault_Handler+0x4>

080011b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b6:	bf00      	nop
 80011b8:	e7fd      	b.n	80011b6 <UsageFault_Handler+0x4>

080011ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  return 1;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <_kill>:

int _kill(int pid, int sig)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800120c:	f00b f9d4 	bl	800c5b8 <__errno>
 8001210:	4603      	mov	r3, r0
 8001212:	2216      	movs	r2, #22
 8001214:	601a      	str	r2, [r3, #0]
  return -1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <_exit>:

void _exit (int status)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800122a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ffe7 	bl	8001202 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <_exit+0x12>

08001238 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	e00a      	b.n	8001260 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800124a:	f3af 8000 	nop.w
 800124e:	4601      	mov	r1, r0
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	60ba      	str	r2, [r7, #8]
 8001256:	b2ca      	uxtb	r2, r1
 8001258:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	429a      	cmp	r2, r3
 8001266:	dbf0      	blt.n	800124a <_read+0x12>
  }

  return len;
 8001268:	687b      	ldr	r3, [r7, #4]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	60f8      	str	r0, [r7, #12]
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	e009      	b.n	8001298 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	60ba      	str	r2, [r7, #8]
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	429a      	cmp	r2, r3
 800129e:	dbf1      	blt.n	8001284 <_write+0x12>
  }
  return len;
 80012a0:	687b      	ldr	r3, [r7, #4]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <_close>:

int _close(int file)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012d2:	605a      	str	r2, [r3, #4]
  return 0;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <_isatty>:

int _isatty(int file)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800131c:	4a14      	ldr	r2, [pc, #80]	@ (8001370 <_sbrk+0x5c>)
 800131e:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <_sbrk+0x60>)
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001328:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d102      	bne.n	8001336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001330:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <_sbrk+0x64>)
 8001332:	4a12      	ldr	r2, [pc, #72]	@ (800137c <_sbrk+0x68>)
 8001334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001336:	4b10      	ldr	r3, [pc, #64]	@ (8001378 <_sbrk+0x64>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	429a      	cmp	r2, r3
 8001342:	d207      	bcs.n	8001354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001344:	f00b f938 	bl	800c5b8 <__errno>
 8001348:	4603      	mov	r3, r0
 800134a:	220c      	movs	r2, #12
 800134c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001352:	e009      	b.n	8001368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001354:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <_sbrk+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135a:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	4a05      	ldr	r2, [pc, #20]	@ (8001378 <_sbrk+0x64>)
 8001364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000a000 	.word	0x2000a000
 8001374:	00000400 	.word	0x00000400
 8001378:	20000320 	.word	0x20000320
 800137c:	20000570 	.word	0x20000570

08001380 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <SystemInit+0x20>)
 8001386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800138a:	4a05      	ldr	r2, [pc, #20]	@ (80013a0 <SystemInit+0x20>)
 800138c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001390:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a8:	f7ff ffea 	bl	8001380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ac:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80013ae:	490d      	ldr	r1, [pc, #52]	@ (80013e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b0:	4a0d      	ldr	r2, [pc, #52]	@ (80013e8 <LoopForever+0xe>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c4:	4c0a      	ldr	r4, [pc, #40]	@ (80013f0 <LoopForever+0x16>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d2:	f00b f8f7 	bl	800c5c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013d6:	f7ff f9b7 	bl	8000748 <main>

080013da <LoopForever>:

LoopForever:
    b LoopForever
 80013da:	e7fe      	b.n	80013da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013dc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80013e8:	0800f0bc 	.word	0x0800f0bc
  ldr r2, =_sbss
 80013ec:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 80013f0:	20000570 	.word	0x20000570

080013f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC1_2_IRQHandler>
	...

080013f8 <__NVIC_GetPriorityGrouping>:
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013fc:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <__NVIC_GetPriorityGrouping+0x18>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	f003 0307 	and.w	r3, r3, #7
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_SetPriority>:
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	db0a      	blt.n	800143e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	@ (8001460 <__NVIC_SetPriority+0x4c>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800143c:	e00a      	b.n	8001454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4908      	ldr	r1, [pc, #32]	@ (8001464 <__NVIC_SetPriority+0x50>)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	3b04      	subs	r3, #4
 800144c:	0112      	lsls	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	440b      	add	r3, r1
 8001452:	761a      	strb	r2, [r3, #24]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_EncodePriority>:
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	@ 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf28      	it	cs
 8001486:	2304      	movcs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3304      	adds	r3, #4
 800148e:	2b06      	cmp	r3, #6
 8001490:	d902      	bls.n	8001498 <NVIC_EncodePriority+0x30>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3b03      	subs	r3, #3
 8001496:	e000      	b.n	800149a <NVIC_EncodePriority+0x32>
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	401a      	ands	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	43d9      	mvns	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	4313      	orrs	r3, r2
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3724      	adds	r7, #36	@ 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <LL_ADC_SetCommonPathInternalCh>:
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	609a      	str	r2, [r3, #8]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_ADC_REG_SetSequencerRanks>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	3330      	adds	r3, #48	@ 0x30
 8001504:	461a      	mov	r2, r3
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	f003 030c 	and.w	r3, r3, #12
 8001510:	4413      	add	r3, r2
 8001512:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	f003 031f 	and.w	r3, r3, #31
 800151e:	211f      	movs	r1, #31
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	401a      	ands	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	0e9b      	lsrs	r3, r3, #26
 800152c:	f003 011f 	and.w	r1, r3, #31
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	431a      	orrs	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	601a      	str	r2, [r3, #0]
}
 8001540:	bf00      	nop
 8001542:	371c      	adds	r7, #28
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_ADC_SetChannelSamplingTime>:
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3314      	adds	r3, #20
 800155c:	461a      	mov	r2, r3
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	0e5b      	lsrs	r3, r3, #25
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	4413      	add	r3, r2
 800156a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	0d1b      	lsrs	r3, r3, #20
 8001574:	f003 031f 	and.w	r3, r3, #31
 8001578:	2107      	movs	r1, #7
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	401a      	ands	r2, r3
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	0d1b      	lsrs	r3, r3, #20
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	fa01 f303 	lsl.w	r3, r1, r3
 8001590:	431a      	orrs	r2, r3
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	601a      	str	r2, [r3, #0]
}
 8001596:	bf00      	nop
 8001598:	371c      	adds	r7, #28
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <LL_ADC_SetChannelSingleDiff>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015bc:	43db      	mvns	r3, r3
 80015be:	401a      	ands	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 0318 	and.w	r3, r3, #24
 80015c6:	4908      	ldr	r1, [pc, #32]	@ (80015e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80015c8:	40d9      	lsrs	r1, r3
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	400b      	ands	r3, r1
 80015ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015d2:	431a      	orrs	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	0007ffff 	.word	0x0007ffff

080015ec <LL_ADC_SetOverSamplingScope>:
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80015fe:	f023 0303 	bic.w	r3, r3, #3
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	611a      	str	r2, [r3, #16]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_ADC_DisableDeepPowerDown>:
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001626:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6093      	str	r3, [r2, #8]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <LL_ADC_EnableInternalRegulator>:
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800164a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800164e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	609a      	str	r2, [r3, #8]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	601a      	str	r2, [r3, #0]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	601a      	str	r2, [r3, #0]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b085      	sub	sp, #20
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80016b6:	f023 0306 	bic.w	r3, r3, #6
 80016ba:	68b9      	ldr	r1, [r7, #8]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	430a      	orrs	r2, r1
 80016c0:	431a      	orrs	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	60da      	str	r2, [r3, #12]
}
 80016c6:	bf00      	nop
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	60da      	str	r2, [r3, #12]
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	605a      	str	r2, [r3, #4]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <LL_RCC_HSE_EnableBypass+0x1c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a04      	ldr	r2, [pc, #16]	@ (8001730 <LL_RCC_HSE_EnableBypass+0x1c>)
 800171e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000

08001734 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001738:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <LL_RCC_HSE_Enable+0x1c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a04      	ldr	r2, [pc, #16]	@ (8001750 <LL_RCC_HSE_Enable+0x1c>)
 800173e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000

08001754 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 8001758:	4b07      	ldr	r3, [pc, #28]	@ (8001778 <LL_RCC_HSE_IsReady+0x24>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001760:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001764:	d101      	bne.n	800176a <LL_RCC_HSE_IsReady+0x16>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <LL_RCC_HSE_IsReady+0x18>
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000

0800177c <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <LL_RCC_LSE_Enable+0x20>)
 8001782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001786:	4a05      	ldr	r2, [pc, #20]	@ (800179c <LL_RCC_LSE_Enable+0x20>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000

080017a0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80017a8:	4b07      	ldr	r3, [pc, #28]	@ (80017c8 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ae:	f023 0218 	bic.w	r2, r3, #24
 80017b2:	4905      	ldr	r1, [pc, #20]	@ (80017c8 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	40021000 	.word	0x40021000

080017cc <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80017d0:	4b07      	ldr	r3, [pc, #28]	@ (80017f0 <LL_RCC_LSE_IsReady+0x24>)
 80017d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d101      	bne.n	80017e2 <LL_RCC_LSE_IsReady+0x16>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <LL_RCC_LSE_IsReady+0x18>
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000

080017f4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <LL_RCC_LSI_Enable+0x20>)
 80017fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017fe:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <LL_RCC_LSI_Enable+0x20>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000

08001818 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 800181c:	4b07      	ldr	r3, [pc, #28]	@ (800183c <LL_RCC_LSI_IsReady+0x24>)
 800181e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b02      	cmp	r3, #2
 8001828:	d101      	bne.n	800182e <LL_RCC_LSI_IsReady+0x16>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <LL_RCC_LSI_IsReady+0x18>
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000

08001840 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001848:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <LL_RCC_SetSysClkSource+0x24>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f023 0203 	bic.w	r2, r3, #3
 8001850:	4904      	ldr	r1, [pc, #16]	@ (8001864 <LL_RCC_SetSysClkSource+0x24>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4313      	orrs	r3, r2
 8001856:	608b      	str	r3, [r1, #8]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	40021000 	.word	0x40021000

08001868 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800186c:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <LL_RCC_GetSysClkSource+0x18>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 030c 	and.w	r3, r3, #12
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000

08001884 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <LL_RCC_SetAHBPrescaler+0x24>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001894:	4904      	ldr	r1, [pc, #16]	@ (80018a8 <LL_RCC_SetAHBPrescaler+0x24>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4313      	orrs	r3, r2
 800189a:	608b      	str	r3, [r1, #8]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	40021000 	.word	0x40021000

080018ac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80018b4:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018bc:	4904      	ldr	r1, [pc, #16]	@ (80018d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	608b      	str	r3, [r1, #8]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	40021000 	.word	0x40021000

080018d4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80018dc:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018e4:	4904      	ldr	r1, [pc, #16]	@ (80018f8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	608b      	str	r3, [r1, #8]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	40021000 	.word	0x40021000

080018fc <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	0e1a      	lsrs	r2, r3, #24
 8001908:	4b0f      	ldr	r3, [pc, #60]	@ (8001948 <LL_RCC_SetI2CClockSource+0x4c>)
 800190a:	4413      	add	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3UL << ((I2CxSource & 0x001F0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x001F0000U) >> 16U)));
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	0c1b      	lsrs	r3, r3, #16
 8001916:	f003 031f 	and.w	r3, r3, #31
 800191a:	2103      	movs	r1, #3
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	401a      	ands	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	b2d9      	uxtb	r1, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	0c1b      	lsrs	r3, r3, #16
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	fa01 f303 	lsl.w	r3, r1, r3
 8001934:	431a      	orrs	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	601a      	str	r2, [r3, #0]
}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40021088 	.word	0x40021088

0800194c <LL_RCC_SetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM2_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM2_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 8001954:	4b09      	ldr	r3, [pc, #36]	@ (800197c <LL_RCC_SetLPTIMClockSource+0x30>)
 8001956:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	0c1b      	lsrs	r3, r3, #16
 800195e:	041b      	lsls	r3, r3, #16
 8001960:	43db      	mvns	r3, r3
 8001962:	401a      	ands	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	041b      	lsls	r3, r3, #16
 8001968:	4904      	ldr	r1, [pc, #16]	@ (800197c <LL_RCC_SetLPTIMClockSource+0x30>)
 800196a:	4313      	orrs	r3, r2
 800196c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	40021000 	.word	0x40021000

08001980 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001984:	4b05      	ldr	r3, [pc, #20]	@ (800199c <LL_RCC_PLL_Enable+0x1c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a04      	ldr	r2, [pc, #16]	@ (800199c <LL_RCC_PLL_Enable+0x1c>)
 800198a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000

080019a0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80019a4:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <LL_RCC_PLL_IsReady+0x24>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80019b0:	d101      	bne.n	80019b6 <LL_RCC_PLL_IsReady+0x16>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <LL_RCC_PLL_IsReady+0x18>
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000

080019c8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80019dc:	4013      	ands	r3, r2
 80019de:	68f9      	ldr	r1, [r7, #12]
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	4311      	orrs	r1, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	0212      	lsls	r2, r2, #8
 80019e8:	4311      	orrs	r1, r2
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	4904      	ldr	r1, [pc, #16]	@ (8001a00 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	40021000 	.word	0x40021000
 8001a04:	f9ff808c 	.word	0xf9ff808c

08001a08 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001a0c:	4b05      	ldr	r3, [pc, #20]	@ (8001a24 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000

08001a28 <LL_AHB2_GRP1_EnableClock>:
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a30:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a34:	4907      	ldr	r1, [pc, #28]	@ (8001a54 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a3c:	4b05      	ldr	r3, [pc, #20]	@ (8001a54 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4013      	ands	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	40021000 	.word	0x40021000

08001a58 <LL_APB1_GRP1_EnableClock>:
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a60:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a62:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a64:	4907      	ldr	r1, [pc, #28]	@ (8001a84 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a6c:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a6e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4013      	ands	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	40021000 	.word	0x40021000

08001a88 <LL_APB2_GRP1_EnableClock>:
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a90:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a92:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a94:	4907      	ldr	r1, [pc, #28]	@ (8001ab4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a9c:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a9e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001ac0:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <LL_FLASH_SetLatency+0x24>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f023 0207 	bic.w	r2, r3, #7
 8001ac8:	4904      	ldr	r1, [pc, #16]	@ (8001adc <LL_FLASH_SetLatency+0x24>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	40022000 	.word	0x40022000

08001ae0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001ae4:	4b04      	ldr	r3, [pc, #16]	@ (8001af8 <LL_FLASH_GetLatency+0x18>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40022000 	.word	0x40022000

08001afc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8001b0c:	4904      	ldr	r1, [pc, #16]	@ (8001b20 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	40007000 	.word	0x40007000

08001b24 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b28:	4b05      	ldr	r3, [pc, #20]	@ (8001b40 <LL_PWR_EnableBkUpAccess+0x1c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a04      	ldr	r2, [pc, #16]	@ (8001b40 <LL_PWR_EnableBkUpAccess+0x1c>)
 8001b2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b32:	6013      	str	r3, [r2, #0]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40007000 	.word	0x40007000

08001b44 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8001b48:	4b07      	ldr	r3, [pc, #28]	@ (8001b68 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b54:	d101      	bne.n	8001b5a <LL_PWR_IsActiveFlag_VOS+0x16>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <LL_PWR_IsActiveFlag_VOS+0x18>
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40007000 	.word	0x40007000

08001b6c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f023 0210 	bic.w	r2, r3, #16
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	431a      	orrs	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	605a      	str	r2, [r3, #4]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f043 0208 	orr.w	r2, r3, #8
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	605a      	str	r2, [r3, #4]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d101      	bne.n	8001bf0 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	330c      	adds	r3, #12
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	b2db      	uxtb	r3, r3
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b085      	sub	sp, #20
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	330c      	adds	r3, #12
 8001c2a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	78fa      	ldrb	r2, [r7, #3]
 8001c30:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_TIM_DisableARRPreload>:
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	601a      	str	r2, [r3, #0]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <LL_TIM_OC_DisableFast>:
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d028      	beq.n	8001cc2 <LL_TIM_OC_DisableFast+0x62>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d023      	beq.n	8001cbe <LL_TIM_OC_DisableFast+0x5e>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b10      	cmp	r3, #16
 8001c7a:	d01e      	beq.n	8001cba <LL_TIM_OC_DisableFast+0x5a>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	2b40      	cmp	r3, #64	@ 0x40
 8001c80:	d019      	beq.n	8001cb6 <LL_TIM_OC_DisableFast+0x56>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c88:	d013      	beq.n	8001cb2 <LL_TIM_OC_DisableFast+0x52>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c90:	d00d      	beq.n	8001cae <LL_TIM_OC_DisableFast+0x4e>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c98:	d007      	beq.n	8001caa <LL_TIM_OC_DisableFast+0x4a>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ca0:	d101      	bne.n	8001ca6 <LL_TIM_OC_DisableFast+0x46>
 8001ca2:	2307      	movs	r3, #7
 8001ca4:	e00e      	b.n	8001cc4 <LL_TIM_OC_DisableFast+0x64>
 8001ca6:	2308      	movs	r3, #8
 8001ca8:	e00c      	b.n	8001cc4 <LL_TIM_OC_DisableFast+0x64>
 8001caa:	2306      	movs	r3, #6
 8001cac:	e00a      	b.n	8001cc4 <LL_TIM_OC_DisableFast+0x64>
 8001cae:	2305      	movs	r3, #5
 8001cb0:	e008      	b.n	8001cc4 <LL_TIM_OC_DisableFast+0x64>
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	e006      	b.n	8001cc4 <LL_TIM_OC_DisableFast+0x64>
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e004      	b.n	8001cc4 <LL_TIM_OC_DisableFast+0x64>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e002      	b.n	8001cc4 <LL_TIM_OC_DisableFast+0x64>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <LL_TIM_OC_DisableFast+0x64>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3318      	adds	r3, #24
 8001cca:	4619      	mov	r1, r3
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	4a0b      	ldr	r2, [pc, #44]	@ (8001cfc <LL_TIM_OC_DisableFast+0x9c>)
 8001cd0:	5cd3      	ldrb	r3, [r2, r3]
 8001cd2:	440b      	add	r3, r1
 8001cd4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	4908      	ldr	r1, [pc, #32]	@ (8001d00 <LL_TIM_OC_DisableFast+0xa0>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	408b      	lsls	r3, r1
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	401a      	ands	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	601a      	str	r2, [r3, #0]
}
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	0800ed60 	.word	0x0800ed60
 8001d00:	0800ed6c 	.word	0x0800ed6c

08001d04 <LL_TIM_OC_EnablePreload>:
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d028      	beq.n	8001d66 <LL_TIM_OC_EnablePreload+0x62>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d023      	beq.n	8001d62 <LL_TIM_OC_EnablePreload+0x5e>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b10      	cmp	r3, #16
 8001d1e:	d01e      	beq.n	8001d5e <LL_TIM_OC_EnablePreload+0x5a>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2b40      	cmp	r3, #64	@ 0x40
 8001d24:	d019      	beq.n	8001d5a <LL_TIM_OC_EnablePreload+0x56>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d2c:	d013      	beq.n	8001d56 <LL_TIM_OC_EnablePreload+0x52>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d34:	d00d      	beq.n	8001d52 <LL_TIM_OC_EnablePreload+0x4e>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d3c:	d007      	beq.n	8001d4e <LL_TIM_OC_EnablePreload+0x4a>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d44:	d101      	bne.n	8001d4a <LL_TIM_OC_EnablePreload+0x46>
 8001d46:	2307      	movs	r3, #7
 8001d48:	e00e      	b.n	8001d68 <LL_TIM_OC_EnablePreload+0x64>
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	e00c      	b.n	8001d68 <LL_TIM_OC_EnablePreload+0x64>
 8001d4e:	2306      	movs	r3, #6
 8001d50:	e00a      	b.n	8001d68 <LL_TIM_OC_EnablePreload+0x64>
 8001d52:	2305      	movs	r3, #5
 8001d54:	e008      	b.n	8001d68 <LL_TIM_OC_EnablePreload+0x64>
 8001d56:	2304      	movs	r3, #4
 8001d58:	e006      	b.n	8001d68 <LL_TIM_OC_EnablePreload+0x64>
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e004      	b.n	8001d68 <LL_TIM_OC_EnablePreload+0x64>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e002      	b.n	8001d68 <LL_TIM_OC_EnablePreload+0x64>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <LL_TIM_OC_EnablePreload+0x64>
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3318      	adds	r3, #24
 8001d6e:	4619      	mov	r1, r3
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	4a0a      	ldr	r2, [pc, #40]	@ (8001d9c <LL_TIM_OC_EnablePreload+0x98>)
 8001d74:	5cd3      	ldrb	r3, [r2, r3]
 8001d76:	440b      	add	r3, r1
 8001d78:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	4907      	ldr	r1, [pc, #28]	@ (8001da0 <LL_TIM_OC_EnablePreload+0x9c>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	4619      	mov	r1, r3
 8001d86:	2308      	movs	r3, #8
 8001d88:	408b      	lsls	r3, r1
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	601a      	str	r2, [r3, #0]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	0800ed60 	.word	0x0800ed60
 8001da0:	0800ed6c 	.word	0x0800ed6c

08001da4 <LL_TIM_DisableExternalClock>:
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	609a      	str	r2, [r3, #8]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_TIM_SetClockSource>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8001dd6:	f023 0307 	bic.w	r3, r3, #7
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	609a      	str	r2, [r3, #8]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <LL_TIM_SetTriggerOutput>:
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	605a      	str	r2, [r3, #4]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_TIM_SetTriggerOutput2>:
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	605a      	str	r2, [r3, #4]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <LL_TIM_DisableMasterSlaveMode>:
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <LL_TIM_ConfigETR>:
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b085      	sub	sp, #20
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f423 423f 	bic.w	r2, r3, #48896	@ 0xbf00
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4319      	orrs	r1, r3
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	609a      	str	r2, [r3, #8]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_TIM_SetOCRefClearInputSource>:
  *         @arg @ref LL_TIM_OCREF_CLR_INT_NC
  *         @arg @ref LL_TIM_OCREF_CLR_INT_ETR
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOCRefClearInputSource(TIM_TypeDef *TIMx, uint32_t OCRefClearInputSource)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f023 0208 	bic.w	r2, r3, #8
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <LL_GPIO_ResetOutputPin>:
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <LL_LPTIM_SetUpdateMode>:
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	60da      	str	r2, [r3, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_LPTIM_SetCounterMode>:
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	60da      	str	r2, [r3, #12]
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_LPTIM_SetPolarity>:
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	60da      	str	r2, [r3, #12]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_LPTIM_SetPrescaler>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	60da      	str	r2, [r3, #12]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <LL_LPTIM_SetInput1Src>:
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	f023 0203 	bic.w	r2, r3, #3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	621a      	str	r2, [r3, #32]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_LPTIM_SetInput2Src>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	f023 0203 	bic.w	r2, r3, #3
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	621a      	str	r2, [r3, #32]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <LL_LPTIM_TrigSw>:
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	60da      	str	r2, [r3, #12]
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <LL_LPTIM_SetClockSource>:
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f023 0201 	bic.w	r2, r3, #1
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	60da      	str	r2, [r3, #12]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_IWDG_Enable>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8002006:	601a      	str	r2, [r3, #0]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_IWDG_ReloadCounter>:
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002022:	601a      	str	r2, [r3, #0]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_IWDG_EnableWriteAccess>:
  * @rmtoll KR           KEY           LL_IWDG_EnableWriteAccess
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f245 5255 	movw	r2, #21845	@ 0x5555
 800203e:	601a      	str	r2, [r3, #0]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <LL_IWDG_SetPrescaler>:
  *         @arg @ref LL_IWDG_PRESCALER_128
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f003 0207 	and.w	r2, r3, #7
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	605a      	str	r2, [r3, #4]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_IWDG_SetReloadCounter>:
  * @param  IWDGx IWDG Instance
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	609a      	str	r2, [r3, #8]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_IWDG_IsReady>:
  *         SR           WVU           LL_IWDG_IsReady
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(const IWDG_TypeDef *IWDGx)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <LL_IWDG_IsReady+0x18>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <LL_IWDG_IsReady+0x1a>
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <spi_read>:
    LL_GPIO_SetOutputPin(pin.port, pin.pin);
  else
    LL_GPIO_ResetOutputPin(pin.port, pin.pin);
}

void spi_read(SPI_TypeDef *spix, uint8_t *const buf, uint32_t num_bytes) {
 80020b2:	b590      	push	{r4, r7, lr}
 80020b4:	b087      	sub	sp, #28
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < num_bytes; i++) {
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	e00b      	b.n	80020dc <spi_read+0x2a>
    buf[i] = spi_transfer(spix, 0x00);
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	18d4      	adds	r4, r2, r3
 80020ca:	2100      	movs	r1, #0
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f82b 	bl	8002128 <spi_transfer>
 80020d2:	4603      	mov	r3, r0
 80020d4:	7023      	strb	r3, [r4, #0]
  for (int i = 0; i < num_bytes; i++) {
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	3301      	adds	r3, #1
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d8ef      	bhi.n	80020c4 <spi_read+0x12>
  }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	371c      	adds	r7, #28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd90      	pop	{r4, r7, pc}

080020ee <spi_write>:
    rx_buf[i] = spi_transfer(spix, tx_buf[i]);
  }
}

void spi_write(SPI_TypeDef *spix, const uint8_t *const buf,
               uint32_t num_bytes) {
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < num_bytes; i++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	e00a      	b.n	8002116 <spi_write+0x28>
    spi_transfer(spix, buf[i]);
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	4413      	add	r3, r2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 f80c 	bl	8002128 <spi_transfer>
  for (int i = 0; i < num_bytes; i++)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	3301      	adds	r3, #1
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	429a      	cmp	r2, r3
 800211c:	d8f0      	bhi.n	8002100 <spi_write+0x12>
}
 800211e:	bf00      	nop
 8002120:	bf00      	nop
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <spi_transfer>:

// Blocking SPI transfer
uint8_t spi_transfer(SPI_TypeDef *spix, uint8_t data) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	70fb      	strb	r3, [r7, #3]
  // transmit
  LL_SPI_TransmitData8(spix, data);
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff fd6e 	bl	8001c1a <LL_SPI_TransmitData8>
  while (!LL_SPI_IsActiveFlag_TXE(spix))
 800213e:	bf00      	nop
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff fd49 	bl	8001bd8 <LL_SPI_IsActiveFlag_TXE>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f9      	beq.n	8002140 <spi_transfer+0x18>
    ;

  // receive
  while (!LL_SPI_IsActiveFlag_RXNE(spix))
 800214c:	bf00      	nop
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff fd2f 	bl	8001bb2 <LL_SPI_IsActiveFlag_RXNE>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f9      	beq.n	800214e <spi_transfer+0x26>
    ;
  return LL_SPI_ReceiveData8(spix);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff fd4f 	bl	8001bfe <LL_SPI_ReceiveData8>
 8002160:	4603      	mov	r3, r0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <SystemClock_Config>:
//   LL_Init1msTick(25000000);
//
//   LL_SetSystemCoreClock(25000000);
// }

void SystemClock_Config(void) {
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8002170:	2004      	movs	r0, #4
 8002172:	f7ff fca1 	bl	8001ab8 <LL_FLASH_SetLatency>
  while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4) {
 8002176:	bf00      	nop
 8002178:	f7ff fcb2 	bl	8001ae0 <LL_FLASH_GetLatency>
 800217c:	4603      	mov	r3, r0
 800217e:	2b04      	cmp	r3, #4
 8002180:	d1fa      	bne.n	8002178 <SystemClock_Config+0xc>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8002182:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002186:	f7ff fcb9 	bl	8001afc <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0) {
 800218a:	bf00      	nop
 800218c:	f7ff fcda 	bl	8001b44 <LL_PWR_IsActiveFlag_VOS>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1fa      	bne.n	800218c <SystemClock_Config+0x20>
  }
  LL_RCC_HSE_EnableBypass();
 8002196:	f7ff fabd 	bl	8001714 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 800219a:	f7ff facb 	bl	8001734 <LL_RCC_HSE_Enable>

  /* Wait till HSE is ready */
  while (LL_RCC_HSE_IsReady() != 1) {
 800219e:	bf00      	nop
 80021a0:	f7ff fad8 	bl	8001754 <LL_RCC_HSE_IsReady>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d1fa      	bne.n	80021a0 <SystemClock_Config+0x34>
  }
  LL_RCC_LSI_Enable();
 80021aa:	f7ff fb23 	bl	80017f4 <LL_RCC_LSI_Enable>

  /* Wait till LSI is ready */
  while (LL_RCC_LSI_IsReady() != 1) {
 80021ae:	bf00      	nop
 80021b0:	f7ff fb32 	bl	8001818 <LL_RCC_LSI_IsReady>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d1fa      	bne.n	80021b0 <SystemClock_Config+0x44>
  }
  LL_PWR_EnableBkUpAccess();
 80021ba:	f7ff fcb3 	bl	8001b24 <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 80021be:	2000      	movs	r0, #0
 80021c0:	f7ff faee 	bl	80017a0 <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 80021c4:	f7ff fada 	bl	800177c <LL_RCC_LSE_Enable>

  /* Wait till LSE is ready */
  while (LL_RCC_LSE_IsReady() != 1) {
 80021c8:	bf00      	nop
 80021ca:	f7ff faff 	bl	80017cc <LL_RCC_LSE_IsReady>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d1fa      	bne.n	80021ca <SystemClock_Config+0x5e>
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_5, 32,
 80021d4:	2300      	movs	r3, #0
 80021d6:	2220      	movs	r2, #32
 80021d8:	2140      	movs	r1, #64	@ 0x40
 80021da:	2003      	movs	r0, #3
 80021dc:	f7ff fbf4 	bl	80019c8 <LL_RCC_PLL_ConfigDomain_SYS>
                              LL_RCC_PLLR_DIV_2);
  LL_RCC_PLL_EnableDomain_SYS();
 80021e0:	f7ff fc12 	bl	8001a08 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80021e4:	f7ff fbcc 	bl	8001980 <LL_RCC_PLL_Enable>

  /* Wait till PLL is ready */
  while (LL_RCC_PLL_IsReady() != 1) {
 80021e8:	bf00      	nop
 80021ea:	f7ff fbd9 	bl	80019a0 <LL_RCC_PLL_IsReady>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d1fa      	bne.n	80021ea <SystemClock_Config+0x7e>
  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80021f4:	2003      	movs	r0, #3
 80021f6:	f7ff fb23 	bl	8001840 <LL_RCC_SetSysClkSource>

  /* Wait till System clock is ready */
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 80021fa:	bf00      	nop
 80021fc:	f7ff fb34 	bl	8001868 <LL_RCC_GetSysClkSource>
 8002200:	4603      	mov	r3, r0
 8002202:	2b0c      	cmp	r3, #12
 8002204:	d1fa      	bne.n	80021fc <SystemClock_Config+0x90>
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002206:	2000      	movs	r0, #0
 8002208:	f7ff fb3c 	bl	8001884 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800220c:	2000      	movs	r0, #0
 800220e:	f7ff fb4d 	bl	80018ac <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002212:	2000      	movs	r0, #0
 8002214:	f7ff fb5e 	bl	80018d4 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(80000000);
 8002218:	4803      	ldr	r0, [pc, #12]	@ (8002228 <SystemClock_Config+0xbc>)
 800221a:	f001 fb43 	bl	80038a4 <LL_Init1msTick>

  LL_SetSystemCoreClock(80000000);
 800221e:	4802      	ldr	r0, [pc, #8]	@ (8002228 <SystemClock_Config+0xbc>)
 8002220:	f001 fb76 	bl	8003910 <LL_SetSystemCoreClock>
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	04c4b400 	.word	0x04c4b400

0800222c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
void MX_ADC1_Init(void) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b094      	sub	sp, #80	@ 0x50
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8002232:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800223e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	60da      	str	r2, [r3, #12]
 800224c:	611a      	str	r2, [r3, #16]
 800224e:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8002250:	f107 0318 	add.w	r3, r7, #24
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225e:	463b      	mov	r3, r7
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
 800226c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 800226e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002272:	f7ff fbd9 	bl	8001a28 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002276:	2001      	movs	r0, #1
 8002278:	f7ff fbd6 	bl	8001a28 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA2   ------> ADC1_IN7
  PA3   ------> ADC1_IN8
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2 | LL_GPIO_PIN_3;
 800227c:	230c      	movs	r3, #12
 800227e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002280:	2303      	movs	r3, #3
 8002282:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002288:	463b      	mov	r3, r7
 800228a:	4619      	mov	r1, r3
 800228c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002290:	f000 fced 	bl	8002c6e <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8002294:	2300      	movs	r3, #0
 8002296:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002298:	2300      	movs	r3, #0
 800229a:	647b      	str	r3, [r7, #68]	@ 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800229c:	2300      	movs	r3, #0
 800229e:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80022a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80022a4:	4619      	mov	r1, r3
 80022a6:	4834      	ldr	r0, [pc, #208]	@ (8002378 <MX_ADC1_Init+0x14c>)
 80022a8:	f000 fb26 	bl	80028f8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 80022b0:	2301      	movs	r3, #1
 80022b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 80022b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022b8:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80022ba:	2300      	movs	r3, #0
 80022bc:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80022be:	2300      	movs	r3, #0
 80022c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80022c2:	2300      	movs	r3, #0
 80022c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80022c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022ca:	4619      	mov	r1, r3
 80022cc:	482a      	ldr	r0, [pc, #168]	@ (8002378 <MX_ADC1_Init+0x14c>)
 80022ce:	f000 fb39 	bl	8002944 <LL_ADC_REG_Init>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 80022d2:	2100      	movs	r1, #0
 80022d4:	4828      	ldr	r0, [pc, #160]	@ (8002378 <MX_ADC1_Init+0x14c>)
 80022d6:	f7ff f989 	bl	80015ec <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80022e2:	f107 0318 	add.w	r3, r7, #24
 80022e6:	4619      	mov	r1, r3
 80022e8:	4824      	ldr	r0, [pc, #144]	@ (800237c <MX_ADC1_Init+0x150>)
 80022ea:	f000 fac5 	bl	8002878 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1),
 80022ee:	2100      	movs	r1, #0
 80022f0:	4822      	ldr	r0, [pc, #136]	@ (800237c <MX_ADC1_Init+0x150>)
 80022f2:	f7ff f8ec 	bl	80014ce <LL_ADC_SetCommonPathInternalCh>
                                 LL_ADC_PATH_INTERNAL_NONE);

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 80022f6:	4820      	ldr	r0, [pc, #128]	@ (8002378 <MX_ADC1_Init+0x14c>)
 80022f8:	f7ff f98d 	bl	8001616 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 80022fc:	481e      	ldr	r0, [pc, #120]	@ (8002378 <MX_ADC1_Init+0x14c>)
 80022fe:	f7ff f99c 	bl	800163a <LL_ADC_EnableInternalRegulator>
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US *
                      (SystemCoreClock / (100000 * 2))) /
 8002302:	4b1f      	ldr	r3, [pc, #124]	@ (8002380 <MX_ADC1_Init+0x154>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	099b      	lsrs	r3, r3, #6
 8002308:	4a1e      	ldr	r2, [pc, #120]	@ (8002384 <MX_ADC1_Init+0x158>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	099a      	lsrs	r2, r3, #6
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US *
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	461a      	mov	r2, r3
 800231a:	4b1b      	ldr	r3, [pc, #108]	@ (8002388 <MX_ADC1_Init+0x15c>)
 800231c:	fba3 2302 	umull	r2, r3, r3, r2
 8002320:	08db      	lsrs	r3, r3, #3
 8002322:	64fb      	str	r3, [r7, #76]	@ 0x4c
                     10);
  while (wait_loop_index != 0) {
 8002324:	e002      	b.n	800232c <MX_ADC1_Init+0x100>
    wait_loop_index--;
 8002326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002328:	3b01      	subs	r3, #1
 800232a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (wait_loop_index != 0) {
 800232c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f9      	bne.n	8002326 <MX_ADC1_Init+0xfa>
  }

  /** Configure Regular Channel
   */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_8);
 8002332:	4a16      	ldr	r2, [pc, #88]	@ (800238c <MX_ADC1_Init+0x160>)
 8002334:	2106      	movs	r1, #6
 8002336:	4810      	ldr	r0, [pc, #64]	@ (8002378 <MX_ADC1_Init+0x14c>)
 8002338:	f7ff f8dc 	bl	80014f4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8,
 800233c:	2200      	movs	r2, #0
 800233e:	4913      	ldr	r1, [pc, #76]	@ (800238c <MX_ADC1_Init+0x160>)
 8002340:	480d      	ldr	r0, [pc, #52]	@ (8002378 <MX_ADC1_Init+0x14c>)
 8002342:	f7ff f903 	bl	800154c <LL_ADC_SetChannelSamplingTime>
                                LL_ADC_SAMPLINGTIME_2CYCLES_5);
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SINGLE_ENDED);
 8002346:	227f      	movs	r2, #127	@ 0x7f
 8002348:	4910      	ldr	r1, [pc, #64]	@ (800238c <MX_ADC1_Init+0x160>)
 800234a:	480b      	ldr	r0, [pc, #44]	@ (8002378 <MX_ADC1_Init+0x14c>)
 800234c:	f7ff f92a 	bl	80015a4 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
   */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_7);
 8002350:	4a0f      	ldr	r2, [pc, #60]	@ (8002390 <MX_ADC1_Init+0x164>)
 8002352:	210c      	movs	r1, #12
 8002354:	4808      	ldr	r0, [pc, #32]	@ (8002378 <MX_ADC1_Init+0x14c>)
 8002356:	f7ff f8cd 	bl	80014f4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7,
 800235a:	2200      	movs	r2, #0
 800235c:	490c      	ldr	r1, [pc, #48]	@ (8002390 <MX_ADC1_Init+0x164>)
 800235e:	4806      	ldr	r0, [pc, #24]	@ (8002378 <MX_ADC1_Init+0x14c>)
 8002360:	f7ff f8f4 	bl	800154c <LL_ADC_SetChannelSamplingTime>
                                LL_ADC_SAMPLINGTIME_2CYCLES_5);
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SINGLE_ENDED);
 8002364:	227f      	movs	r2, #127	@ 0x7f
 8002366:	490a      	ldr	r1, [pc, #40]	@ (8002390 <MX_ADC1_Init+0x164>)
 8002368:	4803      	ldr	r0, [pc, #12]	@ (8002378 <MX_ADC1_Init+0x14c>)
 800236a:	f7ff f91b 	bl	80015a4 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 800236e:	bf00      	nop
 8002370:	3750      	adds	r7, #80	@ 0x50
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	50040000 	.word	0x50040000
 800237c:	50040300 	.word	0x50040300
 8002380:	20000040 	.word	0x20000040
 8002384:	053e2d63 	.word	0x053e2d63
 8002388:	cccccccd 	.word	0xcccccccd
 800238c:	21800100 	.word	0x21800100
 8002390:	1d500080 	.word	0x1d500080

08002394 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
void MX_I2C1_Init(void) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b08e      	sub	sp, #56	@ 0x38
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800239a:	f107 031c 	add.w	r3, r7, #28
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	60da      	str	r2, [r3, #12]
 80023a8:	611a      	str	r2, [r3, #16]
 80023aa:	615a      	str	r2, [r3, #20]
 80023ac:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
 80023bc:	615a      	str	r2, [r3, #20]

  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 80023be:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 80023c2:	f7ff fa9b 	bl	80018fc <LL_RCC_SetI2CClockSource>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80023c6:	2002      	movs	r0, #2
 80023c8:	f7ff fb2e 	bl	8001a28 <LL_AHB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6 | LL_GPIO_PIN_7;
 80023cc:	23c0      	movs	r3, #192	@ 0xc0
 80023ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80023d0:	2302      	movs	r3, #2
 80023d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80023d4:	2303      	movs	r3, #3
 80023d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80023d8:	2301      	movs	r3, #1
 80023da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80023e0:	2304      	movs	r3, #4
 80023e2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	4619      	mov	r1, r3
 80023e8:	4817      	ldr	r0, [pc, #92]	@ (8002448 <MX_I2C1_Init+0xb4>)
 80023ea:	f000 fc40 	bl	8002c6e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80023ee:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80023f2:	f7ff fb31 	bl	8001a58 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
   */
  LL_I2C_EnableAutoEndMode(I2C1);
 80023f6:	4815      	ldr	r0, [pc, #84]	@ (800244c <MX_I2C1_Init+0xb8>)
 80023f8:	f7ff f97b 	bl	80016f2 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80023fc:	4813      	ldr	r0, [pc, #76]	@ (800244c <MX_I2C1_Init+0xb8>)
 80023fe:	f7ff f968 	bl	80016d2 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002402:	4812      	ldr	r0, [pc, #72]	@ (800244c <MX_I2C1_Init+0xb8>)
 8002404:	f7ff f93d 	bl	8001682 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8002408:	4810      	ldr	r0, [pc, #64]	@ (800244c <MX_I2C1_Init+0xb8>)
 800240a:	f7ff f92a 	bl	8001662 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x004018D5;
 8002412:	4b0f      	ldr	r3, [pc, #60]	@ (8002450 <MX_I2C1_Init+0xbc>)
 8002414:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002422:	2300      	movs	r3, #0
 8002424:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002426:	2300      	movs	r3, #0
 8002428:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800242a:	f107 031c 	add.w	r3, r7, #28
 800242e:	4619      	mov	r1, r3
 8002430:	4806      	ldr	r0, [pc, #24]	@ (800244c <MX_I2C1_Init+0xb8>)
 8002432:	f000 fd2d 	bl	8002e90 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8002436:	2200      	movs	r2, #0
 8002438:	2100      	movs	r1, #0
 800243a:	4804      	ldr	r0, [pc, #16]	@ (800244c <MX_I2C1_Init+0xb8>)
 800243c:	f7ff f931 	bl	80016a2 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8002440:	bf00      	nop
 8002442:	3738      	adds	r7, #56	@ 0x38
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	48000400 	.word	0x48000400
 800244c:	40005400 	.word	0x40005400
 8002450:	004018d5 	.word	0x004018d5

08002454 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b090      	sub	sp, #64	@ 0x40
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800245a:	f107 0318 	add.w	r3, r7, #24
 800245e:	2228      	movs	r2, #40	@ 0x28
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f00a f81a 	bl	800c49c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	463b      	mov	r3, r7
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	60da      	str	r2, [r3, #12]
 8002474:	611a      	str	r2, [r3, #16]
 8002476:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002478:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800247c:	f7ff fb04 	bl	8001a88 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002480:	2001      	movs	r0, #1
 8002482:	f7ff fad1 	bl	8001a28 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002486:	2002      	movs	r0, #2
 8002488:	f7ff face 	bl	8001a28 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA7   ------> SPI1_MOSI
  PB4 (NJTRST)   ------> SPI1_MISO
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5 | LL_GPIO_PIN_7;
 800248c:	23a0      	movs	r3, #160	@ 0xa0
 800248e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002490:	2302      	movs	r3, #2
 8002492:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002494:	2303      	movs	r3, #3
 8002496:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80024a0:	2305      	movs	r3, #5
 80024a2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a4:	463b      	mov	r3, r7
 80024a6:	4619      	mov	r1, r3
 80024a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024ac:	f000 fbdf 	bl	8002c6e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80024b0:	2310      	movs	r3, #16
 80024b2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80024b4:	2302      	movs	r3, #2
 80024b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80024b8:	2303      	movs	r3, #3
 80024ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80024c0:	2300      	movs	r3, #0
 80024c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80024c4:	2305      	movs	r3, #5
 80024c6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c8:	463b      	mov	r3, r7
 80024ca:	4619      	mov	r1, r3
 80024cc:	4815      	ldr	r0, [pc, #84]	@ (8002524 <MX_SPI1_Init+0xd0>)
 80024ce:	f000 fbce 	bl	8002c6e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80024d6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80024da:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80024dc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80024e0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80024ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80024f0:	2318      	movs	r3, #24
 80024f2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80024f4:	2300      	movs	r3, #0
 80024f6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80024f8:	2300      	movs	r3, #0
 80024fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 80024fc:	2307      	movs	r3, #7
 80024fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002500:	f107 0318 	add.w	r3, r7, #24
 8002504:	4619      	mov	r1, r3
 8002506:	4808      	ldr	r0, [pc, #32]	@ (8002528 <MX_SPI1_Init+0xd4>)
 8002508:	f000 fd34 	bl	8002f74 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800250c:	2100      	movs	r1, #0
 800250e:	4806      	ldr	r0, [pc, #24]	@ (8002528 <MX_SPI1_Init+0xd4>)
 8002510:	f7ff fb2c 	bl	8001b6c <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 8002514:	4804      	ldr	r0, [pc, #16]	@ (8002528 <MX_SPI1_Init+0xd4>)
 8002516:	f7ff fb3c 	bl	8001b92 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 800251a:	bf00      	nop
 800251c:	3740      	adds	r7, #64	@ 0x40
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	48000400 	.word	0x48000400
 8002528:	40013000 	.word	0x40013000

0800252c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM1_Init(void) {
 800252c:	b580      	push	{r7, lr}
 800252e:	b09e      	sub	sp, #120	@ 0x78
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002532:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	60da      	str	r2, [r3, #12]
 8002540:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002542:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002546:	2220      	movs	r2, #32
 8002548:	2100      	movs	r1, #0
 800254a:	4618      	mov	r0, r3
 800254c:	f009 ffa6 	bl	800c49c <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8002550:	f107 031c 	add.w	r3, r7, #28
 8002554:	2228      	movs	r2, #40	@ 0x28
 8002556:	2100      	movs	r1, #0
 8002558:	4618      	mov	r0, r3
 800255a:	f009 ff9f 	bl	800c49c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
 800256c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800256e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002572:	f7ff fa89 	bl	8001a88 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800257c:	2300      	movs	r3, #0
 800257e:	66bb      	str	r3, [r7, #104]	@ 0x68
  TIM_InitStruct.Autoreload = 100;
 8002580:	2364      	movs	r3, #100	@ 0x64
 8002582:	66fb      	str	r3, [r7, #108]	@ 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002584:	2300      	movs	r3, #0
 8002586:	673b      	str	r3, [r7, #112]	@ 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	677b      	str	r3, [r7, #116]	@ 0x74
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800258c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002590:	4619      	mov	r1, r3
 8002592:	4848      	ldr	r0, [pc, #288]	@ (80026b4 <MX_TIM1_Init+0x188>)
 8002594:	f000 fdd6 	bl	8003144 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002598:	4846      	ldr	r0, [pc, #280]	@ (80026b4 <MX_TIM1_Init+0x188>)
 800259a:	f7ff fb50 	bl	8001c3e <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800259e:	2100      	movs	r1, #0
 80025a0:	4844      	ldr	r0, [pc, #272]	@ (80026b4 <MX_TIM1_Init+0x188>)
 80025a2:	f7ff fc0f 	bl	8001dc4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 80025a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025aa:	4842      	ldr	r0, [pc, #264]	@ (80026b4 <MX_TIM1_Init+0x188>)
 80025ac:	f7ff fbaa 	bl	8001d04 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80025b0:	2360      	movs	r3, #96	@ 0x60
 80025b2:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.CompareValue = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	653b      	str	r3, [r7, #80]	@ 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80025c0:	2300      	movs	r3, #0
 80025c2:	657b      	str	r3, [r7, #84]	@ 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80025c4:	2300      	movs	r3, #0
 80025c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80025c8:	2300      	movs	r3, #0
 80025ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	663b      	str	r3, [r7, #96]	@ 0x60
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80025d0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80025d4:	461a      	mov	r2, r3
 80025d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025da:	4836      	ldr	r0, [pc, #216]	@ (80026b4 <MX_TIM1_Init+0x188>)
 80025dc:	f000 fe10 	bl	8003200 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 80025e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025e4:	4833      	ldr	r0, [pc, #204]	@ (80026b4 <MX_TIM1_Init+0x188>)
 80025e6:	f7ff fb3b 	bl	8001c60 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOCRefClearInputSource(TIM1, LL_TIM_OCREF_CLR_INT_NC);
 80025ea:	2100      	movs	r1, #0
 80025ec:	4831      	ldr	r0, [pc, #196]	@ (80026b4 <MX_TIM1_Init+0x188>)
 80025ee:	f7ff fc4d 	bl	8001e8c <LL_TIM_SetOCRefClearInputSource>
  LL_TIM_DisableExternalClock(TIM1);
 80025f2:	4830      	ldr	r0, [pc, #192]	@ (80026b4 <MX_TIM1_Init+0x188>)
 80025f4:	f7ff fbd6 	bl	8001da4 <LL_TIM_DisableExternalClock>
  LL_TIM_ConfigETR(TIM1, LL_TIM_ETR_POLARITY_NONINVERTED,
 80025f8:	2300      	movs	r3, #0
 80025fa:	2200      	movs	r2, #0
 80025fc:	2100      	movs	r1, #0
 80025fe:	482d      	ldr	r0, [pc, #180]	@ (80026b4 <MX_TIM1_Init+0x188>)
 8002600:	f7ff fc2b 	bl	8001e5a <LL_TIM_ConfigETR>
                   LL_TIM_ETR_PRESCALER_DIV1, LL_TIM_ETR_FILTER_FDIV1);
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002604:	2100      	movs	r1, #0
 8002606:	482b      	ldr	r0, [pc, #172]	@ (80026b4 <MX_TIM1_Init+0x188>)
 8002608:	f7ff fbf1 	bl	8001dee <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 800260c:	2100      	movs	r1, #0
 800260e:	4829      	ldr	r0, [pc, #164]	@ (80026b4 <MX_TIM1_Init+0x188>)
 8002610:	f7ff fc00 	bl	8001e14 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002614:	4827      	ldr	r0, [pc, #156]	@ (80026b4 <MX_TIM1_Init+0x188>)
 8002616:	f7ff fc10 	bl	8001e3a <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002622:	2300      	movs	r3, #0
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 5;
 8002626:	2305      	movs	r3, #5
 8002628:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 800262c:	2300      	movs	r3, #0
 800262e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002630:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8002636:	2300      	movs	r3, #0
 8002638:	633b      	str	r3, [r7, #48]	@ 0x30
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 800263a:	2300      	movs	r3, #0
 800263c:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 800263e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002642:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8002644:	2300      	movs	r3, #0
 8002646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	643b      	str	r3, [r7, #64]	@ 0x40
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800264c:	f107 031c 	add.w	r3, r7, #28
 8002650:	4619      	mov	r1, r3
 8002652:	4818      	ldr	r0, [pc, #96]	@ (80026b4 <MX_TIM1_Init+0x188>)
 8002654:	f000 fe34 	bl	80032c0 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002658:	2002      	movs	r0, #2
 800265a:	f7ff f9e5 	bl	8001a28 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800265e:	2001      	movs	r0, #1
 8002660:	f7ff f9e2 	bl	8001a28 <LL_AHB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PB1   ------> TIM1_CH3N
  PA10   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002664:	2302      	movs	r3, #2
 8002666:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002668:	2302      	movs	r3, #2
 800266a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002678:	2301      	movs	r3, #1
 800267a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800267c:	1d3b      	adds	r3, r7, #4
 800267e:	4619      	mov	r1, r3
 8002680:	480d      	ldr	r0, [pc, #52]	@ (80026b8 <MX_TIM1_Init+0x18c>)
 8002682:	f000 faf4 	bl	8002c6e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002686:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800268a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800268c:	2302      	movs	r3, #2
 800268e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800269c:	2301      	movs	r3, #1
 800269e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a0:	1d3b      	adds	r3, r7, #4
 80026a2:	4619      	mov	r1, r3
 80026a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026a8:	f000 fae1 	bl	8002c6e <LL_GPIO_Init>
}
 80026ac:	bf00      	nop
 80026ae:	3778      	adds	r7, #120	@ 0x78
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40012c00 	.word	0x40012c00
 80026b8:	48000400 	.word	0x48000400

080026bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c2:	463b      	mov	r3, r7
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
 80026d0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80026d2:	2004      	movs	r0, #4
 80026d4:	f7ff f9a8 	bl	8001a28 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80026d8:	2001      	movs	r0, #1
 80026da:	f7ff f9a5 	bl	8001a28 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80026de:	2002      	movs	r0, #2
 80026e0:	f7ff f9a2 	bl	8001a28 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80026e4:	2110      	movs	r1, #16
 80026e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026ea:	f7ff fbe2 	bl	8001eb2 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 80026ee:	2101      	movs	r1, #1
 80026f0:	481f      	ldr	r0, [pc, #124]	@ (8002770 <MX_GPIO_Init+0xb4>)
 80026f2:	f7ff fbde 	bl	8001eb2 <LL_GPIO_ResetOutputPin>

  /*Configure GPIO Outputs*/
  GPIO_InitStruct.Pin =
 80026f6:	f248 1350 	movw	r3, #33104	@ 0x8150
 80026fa:	603b      	str	r3, [r7, #0]
      (LL_GPIO_PIN_4 | LL_GPIO_PIN_6 | LL_GPIO_PIN_8 | LL_GPIO_PIN_15);
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80026fc:	2301      	movs	r3, #1
 80026fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270c:	463b      	mov	r3, r7
 800270e:	4619      	mov	r1, r3
 8002710:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002714:	f000 faab 	bl	8002c6e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8002718:	2301      	movs	r3, #1
 800271a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800271c:	2301      	movs	r3, #1
 800271e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002720:	2300      	movs	r3, #0
 8002722:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002728:	2300      	movs	r3, #0
 800272a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272c:	463b      	mov	r3, r7
 800272e:	4619      	mov	r1, r3
 8002730:	480f      	ldr	r0, [pc, #60]	@ (8002770 <MX_GPIO_Init+0xb4>)
 8002732:	f000 fa9c 	bl	8002c6e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002736:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800273a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800273c:	2300      	movs	r3, #0
 800273e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002740:	2300      	movs	r3, #0
 8002742:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002744:	463b      	mov	r3, r7
 8002746:	4619      	mov	r1, r3
 8002748:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800274c:	f000 fa8f 	bl	8002c6e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8002750:	2308      	movs	r3, #8
 8002752:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002754:	2300      	movs	r3, #0
 8002756:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002758:	2300      	movs	r3, #0
 800275a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275c:	463b      	mov	r3, r7
 800275e:	4619      	mov	r1, r3
 8002760:	4803      	ldr	r0, [pc, #12]	@ (8002770 <MX_GPIO_Init+0xb4>)
 8002762:	f000 fa84 	bl	8002c6e <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002766:	bf00      	nop
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	48000400 	.word	0x48000400

08002774 <MX_LPTIM1_Init>:
/**
 * @brief LPTIM1 Initialization Function
 * @param None
 * @retval None
 */
void MX_LPTIM1_Init(void) {
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM1_Init 0 */

  /* USER CODE END LPTIM1_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE_LSE);
 8002778:	f04f 100c 	mov.w	r0, #786444	@ 0xc000c
 800277c:	f7ff f8e6 	bl	800194c <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_LPTIM1);
 8002780:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8002784:	f7ff f968 	bl	8001a58 <LL_APB1_GRP1_EnableClock>

  /* LPTIM1 interrupt Init */
  NVIC_SetPriority(LPTIM1_IRQn,
 8002788:	f7fe fe36 	bl	80013f8 <__NVIC_GetPriorityGrouping>
 800278c:	4603      	mov	r3, r0
 800278e:	2200      	movs	r2, #0
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fe68 	bl	8001468 <NVIC_EncodePriority>
 8002798:	4603      	mov	r3, r0
 800279a:	4619      	mov	r1, r3
 800279c:	2041      	movs	r0, #65	@ 0x41
 800279e:	f7fe fe39 	bl	8001414 <__NVIC_SetPriority>
  // NVIC_EnableIRQ(LPTIM1_IRQn);

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM1, LL_LPTIM_CLK_SOURCE_INTERNAL);
 80027a2:	2100      	movs	r1, #0
 80027a4:	4810      	ldr	r0, [pc, #64]	@ (80027e8 <MX_LPTIM1_Init+0x74>)
 80027a6:	f7ff fc14 	bl	8001fd2 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM1, LL_LPTIM_PRESCALER_DIV128);
 80027aa:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 80027ae:	480e      	ldr	r0, [pc, #56]	@ (80027e8 <MX_LPTIM1_Init+0x74>)
 80027b0:	f7ff fbc6 	bl	8001f40 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM1, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 80027b4:	2100      	movs	r1, #0
 80027b6:	480c      	ldr	r0, [pc, #48]	@ (80027e8 <MX_LPTIM1_Init+0x74>)
 80027b8:	f7ff fbaf 	bl	8001f1a <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM1, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 80027bc:	2100      	movs	r1, #0
 80027be:	480a      	ldr	r0, [pc, #40]	@ (80027e8 <MX_LPTIM1_Init+0x74>)
 80027c0:	f7ff fb85 	bl	8001ece <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM1, LL_LPTIM_COUNTER_MODE_INTERNAL);
 80027c4:	2100      	movs	r1, #0
 80027c6:	4808      	ldr	r0, [pc, #32]	@ (80027e8 <MX_LPTIM1_Init+0x74>)
 80027c8:	f7ff fb94 	bl	8001ef4 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM1);
 80027cc:	4806      	ldr	r0, [pc, #24]	@ (80027e8 <MX_LPTIM1_Init+0x74>)
 80027ce:	f7ff fbf0 	bl	8001fb2 <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM1, LL_LPTIM_INPUT1_SRC_GPIO);
 80027d2:	2100      	movs	r1, #0
 80027d4:	4804      	ldr	r0, [pc, #16]	@ (80027e8 <MX_LPTIM1_Init+0x74>)
 80027d6:	f7ff fbc6 	bl	8001f66 <LL_LPTIM_SetInput1Src>
  LL_LPTIM_SetInput2Src(LPTIM1, LL_LPTIM_INPUT2_SRC_GPIO);
 80027da:	2100      	movs	r1, #0
 80027dc:	4802      	ldr	r0, [pc, #8]	@ (80027e8 <MX_LPTIM1_Init+0x74>)
 80027de:	f7ff fbd5 	bl	8001f8c <LL_LPTIM_SetInput2Src>
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40007c00 	.word	0x40007c00

080027ec <MX_IWDG_Init>:
/**
 * @brief IWDG Initialization Function
 * @param None
 * @retval None
 */
void MX_IWDG_Init(void) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  LL_IWDG_Enable(IWDG);
 80027f0:	480d      	ldr	r0, [pc, #52]	@ (8002828 <MX_IWDG_Init+0x3c>)
 80027f2:	f7ff fc01 	bl	8001ff8 <LL_IWDG_Enable>
  LL_IWDG_EnableWriteAccess(IWDG);
 80027f6:	480c      	ldr	r0, [pc, #48]	@ (8002828 <MX_IWDG_Init+0x3c>)
 80027f8:	f7ff fc1a 	bl	8002030 <LL_IWDG_EnableWriteAccess>
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_256);
 80027fc:	2106      	movs	r1, #6
 80027fe:	480a      	ldr	r0, [pc, #40]	@ (8002828 <MX_IWDG_Init+0x3c>)
 8002800:	f7ff fc24 	bl	800204c <LL_IWDG_SetPrescaler>
  LL_IWDG_SetReloadCounter(IWDG, 4095);
 8002804:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8002808:	4807      	ldr	r0, [pc, #28]	@ (8002828 <MX_IWDG_Init+0x3c>)
 800280a:	f7ff fc2f 	bl	800206c <LL_IWDG_SetReloadCounter>
  while (LL_IWDG_IsReady(IWDG) != 1) {
 800280e:	bf00      	nop
 8002810:	4805      	ldr	r0, [pc, #20]	@ (8002828 <MX_IWDG_Init+0x3c>)
 8002812:	f7ff fc3b 	bl	800208c <LL_IWDG_IsReady>
 8002816:	4603      	mov	r3, r0
 8002818:	2b01      	cmp	r3, #1
 800281a:	d1f9      	bne.n	8002810 <MX_IWDG_Init+0x24>
  }

  LL_IWDG_ReloadCounter(IWDG);
 800281c:	4802      	ldr	r0, [pc, #8]	@ (8002828 <MX_IWDG_Init+0x3c>)
 800281e:	f7ff fbf9 	bl	8002014 <LL_IWDG_ReloadCounter>
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40003000 	.word	0x40003000

0800282c <LL_ADC_REG_SetSequencerLength>:
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	f023 020f 	bic.w	r2, r3, #15
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <LL_ADC_IsEnabled>:
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <LL_ADC_IsEnabled+0x18>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <LL_ADC_IsEnabled+0x1a>
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, const LL_ADC_CommonInitTypeDef *pADC_CommonInitStruct)
{
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8002886:	4819      	ldr	r0, [pc, #100]	@ (80028ec <LL_ADC_CommonInit+0x74>)
 8002888:	f7ff ffe3 	bl	8002852 <LL_ADC_IsEnabled>
 800288c:	4604      	mov	r4, r0
 800288e:	4818      	ldr	r0, [pc, #96]	@ (80028f0 <LL_ADC_CommonInit+0x78>)
 8002890:	f7ff ffdf 	bl	8002852 <LL_ADC_IsEnabled>
 8002894:	4603      	mov	r3, r0
 8002896:	4323      	orrs	r3, r4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d120      	bne.n	80028de <LL_ADC_CommonInit+0x66>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (pADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d012      	beq.n	80028ca <LL_ADC_CommonInit+0x52>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	4b12      	ldr	r3, [pc, #72]	@ (80028f4 <LL_ADC_CommonInit+0x7c>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	6811      	ldr	r1, [r2, #0]
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	6852      	ldr	r2, [r2, #4]
 80028b4:	4311      	orrs	r1, r2
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	6892      	ldr	r2, [r2, #8]
 80028ba:	4311      	orrs	r1, r2
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	68d2      	ldr	r2, [r2, #12]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	e00b      	b.n	80028e2 <LL_ADC_CommonInit+0x6a>
                 | pADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <LL_ADC_CommonInit+0x7c>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	e001      	b.n	80028e2 <LL_ADC_CommonInit+0x6a>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd90      	pop	{r4, r7, pc}
 80028ec:	50040000 	.word	0x50040000
 80028f0:	50040100 	.word	0x50040100
 80028f4:	ffc030e0 	.word	0xffc030e0

080028f8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, const LL_ADC_InitTypeDef *pADC_InitStruct)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002902:	2300      	movs	r3, #0
 8002904:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(pADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(pADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ffa3 	bl	8002852 <LL_ADC_IsEnabled>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d111      	bne.n	8002936 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800291a:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	6811      	ldr	r1, [r2, #0]
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	6852      	ldr	r2, [r2, #4]
 8002926:	4311      	orrs	r1, r2
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	6892      	ldr	r2, [r2, #8]
 800292c:	430a      	orrs	r2, r1
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	60da      	str	r2, [r3, #12]
 8002934:	e001      	b.n	800293a <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800293a:	7bfb      	ldrb	r3, [r7, #15]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, const LL_ADC_REG_InitTypeDef *pADC_RegInitStruct)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(pADC_RegInitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(pADC_RegInitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ff7d 	bl	8002852 <LL_ADC_IsEnabled>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d132      	bne.n	80029c4 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (pADC_RegInitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d015      	beq.n	8002992 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	4b1a      	ldr	r3, [pc, #104]	@ (80029d4 <LL_ADC_REG_Init+0x90>)
 800296c:	4013      	ands	r3, r2
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	6811      	ldr	r1, [r2, #0]
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	6892      	ldr	r2, [r2, #8]
 8002976:	4311      	orrs	r1, r2
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	68d2      	ldr	r2, [r2, #12]
 800297c:	4311      	orrs	r1, r2
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	6912      	ldr	r2, [r2, #16]
 8002982:	4311      	orrs	r1, r2
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	6952      	ldr	r2, [r2, #20]
 8002988:	430a      	orrs	r2, r1
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	60da      	str	r2, [r3, #12]
 8002990:	e011      	b.n	80029b6 <LL_ADC_REG_Init+0x72>
                 | pADC_RegInitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	4b0f      	ldr	r3, [pc, #60]	@ (80029d4 <LL_ADC_REG_Init+0x90>)
 8002998:	4013      	ands	r3, r2
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	6811      	ldr	r1, [r2, #0]
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	68d2      	ldr	r2, [r2, #12]
 80029a2:	4311      	orrs	r1, r2
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	6912      	ldr	r2, [r2, #16]
 80029a8:	4311      	orrs	r1, r2
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	6952      	ldr	r2, [r2, #20]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	60da      	str	r2, [r3, #12]
                 | pADC_RegInitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, pADC_RegInitStruct->SequencerLength);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4619      	mov	r1, r3
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ff35 	bl	800282c <LL_ADC_REG_SetSequencerLength>
 80029c2:	e001      	b.n	80029c8 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	fff0c03c 	.word	0xfff0c03c

080029d8 <LL_GPIO_SetPinMode>:
{
 80029d8:	b480      	push	{r7}
 80029da:	b08b      	sub	sp, #44	@ 0x2c
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80029fe:	2320      	movs	r3, #32
 8002a00:	e003      	b.n	8002a0a <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	fab3 f383 	clz	r3, r3
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2103      	movs	r1, #3
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	401a      	ands	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	61fb      	str	r3, [r7, #28]
  return result;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	e003      	b.n	8002a38 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a40:	431a      	orrs	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	601a      	str	r2, [r3, #0]
}
 8002a46:	bf00      	nop
 8002a48:	372c      	adds	r7, #44	@ 0x2c
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <LL_GPIO_SetPinOutputType>:
{
 8002a52:	b480      	push	{r7}
 8002a54:	b085      	sub	sp, #20
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	401a      	ands	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	431a      	orrs	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	605a      	str	r2, [r3, #4]
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <LL_GPIO_SetPinSpeed>:
{
 8002a82:	b480      	push	{r7}
 8002a84:	b08b      	sub	sp, #44	@ 0x2c
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	613b      	str	r3, [r7, #16]
  return result;
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002aa8:	2320      	movs	r3, #32
 8002aaa:	e003      	b.n	8002ab4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	fab3 f383 	clz	r3, r3
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2103      	movs	r1, #3
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	401a      	ands	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	61fb      	str	r3, [r7, #28]
  return result;
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002ad6:	2320      	movs	r3, #32
 8002ad8:	e003      	b.n	8002ae2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	431a      	orrs	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	609a      	str	r2, [r3, #8]
}
 8002af0:	bf00      	nop
 8002af2:	372c      	adds	r7, #44	@ 0x2c
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <LL_GPIO_SetPinPull>:
{
 8002afc:	b480      	push	{r7}
 8002afe:	b08b      	sub	sp, #44	@ 0x2c
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	613b      	str	r3, [r7, #16]
  return result;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002b22:	2320      	movs	r3, #32
 8002b24:	e003      	b.n	8002b2e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	2103      	movs	r1, #3
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	401a      	ands	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	61fb      	str	r3, [r7, #28]
  return result;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002b50:	2320      	movs	r3, #32
 8002b52:	e003      	b.n	8002b5c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	fa01 f303 	lsl.w	r3, r1, r3
 8002b64:	431a      	orrs	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	60da      	str	r2, [r3, #12]
}
 8002b6a:	bf00      	nop
 8002b6c:	372c      	adds	r7, #44	@ 0x2c
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <LL_GPIO_SetAFPin_0_7>:
{
 8002b76:	b480      	push	{r7}
 8002b78:	b08b      	sub	sp, #44	@ 0x2c
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a1a      	ldr	r2, [r3, #32]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	fa93 f3a3 	rbit	r3, r3
 8002b90:	613b      	str	r3, [r7, #16]
  return result;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002b9c:	2320      	movs	r3, #32
 8002b9e:	e003      	b.n	8002ba8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	210f      	movs	r1, #15
 8002bac:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	fa93 f3a3 	rbit	r3, r3
 8002bbe:	61fb      	str	r3, [r7, #28]
  return result;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002bca:	2320      	movs	r3, #32
 8002bcc:	e003      	b.n	8002bd6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	fab3 f383 	clz	r3, r3
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	fa01 f303 	lsl.w	r3, r1, r3
 8002bde:	431a      	orrs	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	621a      	str	r2, [r3, #32]
}
 8002be4:	bf00      	nop
 8002be6:	372c      	adds	r7, #44	@ 0x2c
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_GPIO_SetAFPin_8_15>:
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b08b      	sub	sp, #44	@ 0x2c
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	0a1b      	lsrs	r3, r3, #8
 8002c04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	fa93 f3a3 	rbit	r3, r3
 8002c0c:	613b      	str	r3, [r7, #16]
  return result;
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002c18:	2320      	movs	r3, #32
 8002c1a:	e003      	b.n	8002c24 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	210f      	movs	r1, #15
 8002c28:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	401a      	ands	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	0a1b      	lsrs	r3, r3, #8
 8002c34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	61fb      	str	r3, [r7, #28]
  return result;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002c48:	2320      	movs	r3, #32
 8002c4a:	e003      	b.n	8002c54 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	fab3 f383 	clz	r3, r3
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002c62:	bf00      	nop
 8002c64:	372c      	adds	r7, #44	@ 0x2c
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b088      	sub	sp, #32
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	60fb      	str	r3, [r7, #12]
  return result;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <LL_GPIO_Init+0x26>
    return 32U;
 8002c90:	2320      	movs	r3, #32
 8002c92:	e003      	b.n	8002c9c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002c9e:	e048      	b.n	8002d32 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d03a      	beq.n	8002d2c <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d003      	beq.n	8002cc6 <LL_GPIO_Init+0x58>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d10e      	bne.n	8002ce4 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	69b9      	ldr	r1, [r7, #24]
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff fed7 	bl	8002a82 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	6819      	ldr	r1, [r3, #0]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff feb7 	bl	8002a52 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	69b9      	ldr	r1, [r7, #24]
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ff05 	bl	8002afc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d111      	bne.n	8002d1e <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2bff      	cmp	r3, #255	@ 0xff
 8002cfe:	d807      	bhi.n	8002d10 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	461a      	mov	r2, r3
 8002d06:	69b9      	ldr	r1, [r7, #24]
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff ff34 	bl	8002b76 <LL_GPIO_SetAFPin_0_7>
 8002d0e:	e006      	b.n	8002d1e <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	461a      	mov	r2, r3
 8002d16:	69b9      	ldr	r1, [r7, #24]
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff ff69 	bl	8002bf0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	461a      	mov	r2, r3
 8002d24:	69b9      	ldr	r1, [r7, #24]
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff fe56 	bl	80029d8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1af      	bne.n	8002ca0 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3720      	adds	r7, #32
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <LL_I2C_Enable>:
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f043 0201 	orr.w	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	601a      	str	r2, [r3, #0]
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <LL_I2C_Disable>:
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 0201 	bic.w	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	601a      	str	r2, [r3, #0]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_I2C_ConfigFilters>:
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	0219      	lsls	r1, r3, #8
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	430b      	orrs	r3, r1
 8002da6:	431a      	orrs	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	601a      	str	r2, [r3, #0]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <LL_I2C_SetOwnAddress1>:
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002dcc:	f023 0307 	bic.w	r3, r3, #7
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	609a      	str	r2, [r3, #8]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <LL_I2C_EnableOwnAddress1>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <LL_I2C_DisableOwnAddress1>:
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <LL_I2C_SetTiming>:
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	611a      	str	r2, [r3, #16]
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <LL_I2C_SetMode>:
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	601a      	str	r2, [r3, #0]
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	605a      	str	r2, [r3, #4]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff ff65 	bl	8002d6a <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	6899      	ldr	r1, [r3, #8]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff ff6d 	bl	8002d8a <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff ffb6 	bl	8002e28 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff ff44 	bl	8002d4a <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ffa0 	bl	8002e08 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	6919      	ldr	r1, [r3, #16]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ff70 	bl	8002db8 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff ff81 	bl	8002de8 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4619      	mov	r1, r3
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff ffa9 	bl	8002e44 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff ffb6 	bl	8002e6a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <LL_SPI_IsEnabled>:
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f18:	2b40      	cmp	r3, #64	@ 0x40
 8002f1a:	d101      	bne.n	8002f20 <LL_SPI_IsEnabled+0x18>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <LL_SPI_IsEnabled+0x1a>
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <LL_SPI_SetRxFIFOThreshold>:
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	605a      	str	r2, [r3, #4]
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_SPI_SetCRCPolynomial>:
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	611a      	str	r2, [r3, #16]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff ffc0 	bl	8002f08 <LL_SPI_IsEnabled>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d145      	bne.n	800301a <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f96:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	6811      	ldr	r1, [r2, #0]
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	6852      	ldr	r2, [r2, #4]
 8002fa2:	4311      	orrs	r1, r2
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	68d2      	ldr	r2, [r2, #12]
 8002fa8:	4311      	orrs	r1, r2
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	6912      	ldr	r2, [r2, #16]
 8002fae:	4311      	orrs	r1, r2
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	6952      	ldr	r2, [r2, #20]
 8002fb4:	4311      	orrs	r1, r2
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	6992      	ldr	r2, [r2, #24]
 8002fba:	4311      	orrs	r1, r2
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	69d2      	ldr	r2, [r2, #28]
 8002fc0:	4311      	orrs	r1, r2
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	6a12      	ldr	r2, [r2, #32]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002fd6:	f023 0304 	bic.w	r3, r3, #4
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	6891      	ldr	r1, [r2, #8]
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	6952      	ldr	r2, [r2, #20]
 8002fe2:	0c12      	lsrs	r2, r2, #16
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ff4:	d204      	bcs.n	8003000 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8002ff6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff ff97 	bl	8002f2e <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003008:	d105      	bne.n	8003016 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300e:	4619      	mov	r1, r3
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff ff9f 	bl	8002f54 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003016:	2300      	movs	r3, #0
 8003018:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800301a:	7bfb      	ldrb	r3, [r7, #15]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <LL_TIM_SetPrescaler>:
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <LL_TIM_SetAutoReload>:
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <LL_TIM_SetRepetitionCounter>:
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_TIM_OC_SetCompareCH1>:
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <LL_TIM_OC_SetCompareCH2>:
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_TIM_OC_SetCompareCH3>:
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <LL_TIM_OC_SetCompareCH4>:
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <LL_TIM_OC_SetCompareCH5>:
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <LL_TIM_OC_SetCompareCH6>:
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	f043 0201 	orr.w	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	615a      	str	r2, [r3, #20]
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a27      	ldr	r2, [pc, #156]	@ (80031f4 <LL_TIM_Init+0xb0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d003      	beq.n	8003164 <LL_TIM_Init+0x20>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003162:	d106      	bne.n	8003172 <LL_TIM_Init+0x2e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a1f      	ldr	r2, [pc, #124]	@ (80031f4 <LL_TIM_Init+0xb0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00b      	beq.n	8003192 <LL_TIM_Init+0x4e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003180:	d007      	beq.n	8003192 <LL_TIM_Init+0x4e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a1c      	ldr	r2, [pc, #112]	@ (80031f8 <LL_TIM_Init+0xb4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d003      	beq.n	8003192 <LL_TIM_Init+0x4e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a1b      	ldr	r2, [pc, #108]	@ (80031fc <LL_TIM_Init+0xb8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d106      	bne.n	80031a0 <LL_TIM_Init+0x5c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	4619      	mov	r1, r3
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff ff47 	bl	8003040 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	4619      	mov	r1, r3
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff ff33 	bl	8003024 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a0c      	ldr	r2, [pc, #48]	@ (80031f4 <LL_TIM_Init+0xb0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d007      	beq.n	80031d6 <LL_TIM_Init+0x92>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a0b      	ldr	r2, [pc, #44]	@ (80031f8 <LL_TIM_Init+0xb4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d003      	beq.n	80031d6 <LL_TIM_Init+0x92>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a0a      	ldr	r2, [pc, #40]	@ (80031fc <LL_TIM_Init+0xb8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d105      	bne.n	80031e2 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	4619      	mov	r1, r3
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff ff3d 	bl	800305c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff ff9e 	bl	8003124 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40012c00 	.word	0x40012c00
 80031f8:	40014000 	.word	0x40014000
 80031fc:	40014400 	.word	0x40014400

08003200 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003216:	d045      	beq.n	80032a4 <LL_TIM_OC_Init+0xa4>
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800321e:	d848      	bhi.n	80032b2 <LL_TIM_OC_Init+0xb2>
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003226:	d036      	beq.n	8003296 <LL_TIM_OC_Init+0x96>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800322e:	d840      	bhi.n	80032b2 <LL_TIM_OC_Init+0xb2>
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003236:	d027      	beq.n	8003288 <LL_TIM_OC_Init+0x88>
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800323e:	d838      	bhi.n	80032b2 <LL_TIM_OC_Init+0xb2>
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003246:	d018      	beq.n	800327a <LL_TIM_OC_Init+0x7a>
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800324e:	d830      	bhi.n	80032b2 <LL_TIM_OC_Init+0xb2>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d003      	beq.n	800325e <LL_TIM_OC_Init+0x5e>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b10      	cmp	r3, #16
 800325a:	d007      	beq.n	800326c <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800325c:	e029      	b.n	80032b2 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f891 	bl	8003388 <OC1Config>
 8003266:	4603      	mov	r3, r0
 8003268:	75fb      	strb	r3, [r7, #23]
      break;
 800326a:	e023      	b.n	80032b4 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f8fe 	bl	8003470 <OC2Config>
 8003274:	4603      	mov	r3, r0
 8003276:	75fb      	strb	r3, [r7, #23]
      break;
 8003278:	e01c      	b.n	80032b4 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f96f 	bl	8003560 <OC3Config>
 8003282:	4603      	mov	r3, r0
 8003284:	75fb      	strb	r3, [r7, #23]
      break;
 8003286:	e015      	b.n	80032b4 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 f9e0 	bl	8003650 <OC4Config>
 8003290:	4603      	mov	r3, r0
 8003292:	75fb      	strb	r3, [r7, #23]
      break;
 8003294:	e00e      	b.n	80032b4 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 fa39 	bl	8003710 <OC5Config>
 800329e:	4603      	mov	r3, r0
 80032a0:	75fb      	strb	r3, [r7, #23]
      break;
 80032a2:	e007      	b.n	80032b4 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 fa8a 	bl	80037c0 <OC6Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	75fb      	strb	r3, [r7, #23]
      break;
 80032b0:	e000      	b.n	80032b4 <LL_TIM_OC_Init+0xb4>
      break;
 80032b2:	bf00      	nop
  }

  return result;
 80032b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	7b12      	ldrb	r2, [r2, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	89d2      	ldrh	r2, [r2, #14]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a10      	ldr	r2, [pc, #64]	@ (8003384 <LL_TIM_BDTR_Init+0xc4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d114      	bne.n	8003370 <LL_TIM_BDTR_Init+0xb0>
    assert_param(IS_LL_TIM_BREAK2_STATE(TIM_BDTRInitStruct->Break2State));
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	40012c00 	.word	0x40012c00

08003388 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	f023 0201 	bic.w	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0303 	bic.w	r3, r3, #3
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	6812      	ldr	r2, [r2, #0]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f023 0202 	bic.w	r2, r3, #2
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 0201 	bic.w	r2, r3, #1
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003464 <OC1Config+0xdc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d007      	beq.n	80033fe <OC1Config+0x76>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003468 <OC1Config+0xe0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d003      	beq.n	80033fe <OC1Config+0x76>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a1c      	ldr	r2, [pc, #112]	@ (800346c <OC1Config+0xe4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d11e      	bne.n	800343c <OC1Config+0xb4>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f023 0208 	bic.w	r2, r3, #8
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4313      	orrs	r3, r2
 800340c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f023 0204 	bic.w	r2, r3, #4
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	4619      	mov	r1, r3
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff fe12 	bl	8003078 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40012c00 	.word	0x40012c00
 8003468:	40014000 	.word	0x40014000
 800346c:	40014400 	.word	0x40014400

08003470 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	f023 0210 	bic.w	r2, r3, #16
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800349e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	0212      	lsls	r2, r2, #8
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f023 0220 	bic.w	r2, r3, #32
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	4313      	orrs	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f023 0210 	bic.w	r2, r3, #16
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003554 <OC2Config+0xe4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d007      	beq.n	80034ec <OC2Config+0x7c>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a1e      	ldr	r2, [pc, #120]	@ (8003558 <OC2Config+0xe8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d003      	beq.n	80034ec <OC2Config+0x7c>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a1d      	ldr	r2, [pc, #116]	@ (800355c <OC2Config+0xec>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d11f      	bne.n	800352c <OC2Config+0xbc>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	019b      	lsls	r3, r3, #6
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	019b      	lsls	r3, r3, #6
 8003508:	4313      	orrs	r3, r2
 800350a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4619      	mov	r1, r3
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff fda8 	bl	8003094 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40012c00 	.word	0x40012c00
 8003558:	40014000 	.word	0x40014000
 800355c:	40014400 	.word	0x40014400

08003560 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0303 	bic.w	r3, r3, #3
 800358e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	6812      	ldr	r2, [r2, #0]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	021b      	lsls	r3, r3, #8
 80035ae:	4313      	orrs	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	021b      	lsls	r3, r3, #8
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003644 <OC3Config+0xe4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d007      	beq.n	80035da <OC3Config+0x7a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003648 <OC3Config+0xe8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d003      	beq.n	80035da <OC3Config+0x7a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a1d      	ldr	r2, [pc, #116]	@ (800364c <OC3Config+0xec>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d11f      	bne.n	800361a <OC3Config+0xba>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	029b      	lsls	r3, r3, #10
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	029b      	lsls	r3, r3, #10
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	015b      	lsls	r3, r3, #5
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	4619      	mov	r1, r3
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff fd3f 	bl	80030b0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40012c00 	.word	0x40012c00
 8003648:	40014000 	.word	0x40014000
 800364c:	40014400 	.word	0x40014400

08003650 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800367e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003686:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	0212      	lsls	r2, r2, #8
 8003690:	4313      	orrs	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	031b      	lsls	r3, r3, #12
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	031b      	lsls	r3, r3, #12
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a13      	ldr	r2, [pc, #76]	@ (8003704 <OC4Config+0xb4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d007      	beq.n	80036cc <OC4Config+0x7c>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a12      	ldr	r2, [pc, #72]	@ (8003708 <OC4Config+0xb8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d003      	beq.n	80036cc <OC4Config+0x7c>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a11      	ldr	r2, [pc, #68]	@ (800370c <OC4Config+0xbc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d107      	bne.n	80036dc <OC4Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	019b      	lsls	r3, r3, #6
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4619      	mov	r1, r3
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff fcec 	bl	80030cc <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40012c00 	.word	0x40012c00
 8003708:	40014000 	.word	0x40014000
 800370c:	40014400 	.word	0x40014400

08003710 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003730:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003738:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	4313      	orrs	r3, r2
 8003742:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	041b      	lsls	r3, r3, #16
 8003750:	4313      	orrs	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	041b      	lsls	r3, r3, #16
 8003760:	4313      	orrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a13      	ldr	r2, [pc, #76]	@ (80037b4 <OC5Config+0xa4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d007      	beq.n	800377c <OC5Config+0x6c>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a12      	ldr	r2, [pc, #72]	@ (80037b8 <OC5Config+0xa8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d003      	beq.n	800377c <OC5Config+0x6c>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a11      	ldr	r2, [pc, #68]	@ (80037bc <OC5Config+0xac>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d109      	bne.n	8003790 <OC5Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	021b      	lsls	r3, r3, #8
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	4619      	mov	r1, r3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff fca3 	bl	80030e8 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40012c00 	.word	0x40012c00
 80037b8:	40014000 	.word	0x40014000
 80037bc:	40014400 	.word	0x40014400

080037c0 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	0212      	lsls	r2, r2, #8
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	051b      	lsls	r3, r3, #20
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	051b      	lsls	r3, r3, #20
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a12      	ldr	r2, [pc, #72]	@ (8003864 <OC6Config+0xa4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d007      	beq.n	800382e <OC6Config+0x6e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a11      	ldr	r2, [pc, #68]	@ (8003868 <OC6Config+0xa8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d003      	beq.n	800382e <OC6Config+0x6e>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a10      	ldr	r2, [pc, #64]	@ (800386c <OC6Config+0xac>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d109      	bne.n	8003842 <OC6Config+0x82>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	029b      	lsls	r3, r3, #10
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4619      	mov	r1, r3
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff fc5a 	bl	8003108 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40012c00 	.word	0x40012c00
 8003868:	40014000 	.word	0x40014000
 800386c:	40014400 	.word	0x40014400

08003870 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003882:	4a07      	ldr	r2, [pc, #28]	@ (80038a0 <LL_InitTick+0x30>)
 8003884:	3b01      	subs	r3, #1
 8003886:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003888:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <LL_InitTick+0x30>)
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800388e:	4b04      	ldr	r3, [pc, #16]	@ (80038a0 <LL_InitTick+0x30>)
 8003890:	2205      	movs	r2, #5
 8003892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	e000e010 	.word	0xe000e010

080038a4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80038ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ffdd 	bl	8003870 <LL_InitTick>
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80038c8:	4b10      	ldr	r3, [pc, #64]	@ (800390c <LL_mDelay+0x4c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80038d2:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038da:	d00c      	beq.n	80038f6 <LL_mDelay+0x36>
  {
    tmpDelay++;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	3301      	adds	r3, #1
 80038e0:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 80038e2:	e008      	b.n	80038f6 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80038e4:	4b09      	ldr	r3, [pc, #36]	@ (800390c <LL_mDelay+0x4c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <LL_mDelay+0x36>
    {
      tmpDelay--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1f3      	bne.n	80038e4 <LL_mDelay+0x24>
    }
  }
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	e000e010 	.word	0xe000e010

08003910 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003918:	4a04      	ldr	r2, [pc, #16]	@ (800392c <LL_SetSystemCoreClock+0x1c>)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6013      	str	r3, [r2, #0]
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000040 	.word	0x20000040

08003930 <LL_GPIO_SetOutputPin>:
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	619a      	str	r2, [r3, #24]
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <LL_GPIO_ResetOutputPin>:
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <fram_init>:
int fram_rdsr(fram_t *dev);
int fram_wrsr(fram_t *dev);
int fram_get_id(fram_t *dev);

int fram_init(fram_t *dev, SPI_TypeDef *SPIx, uint8_t cs_pin, uint8_t sck_pin,
              uint8_t mosi_pin, uint8_t miso_pin) {
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	4611      	mov	r1, r2
 8003974:	461a      	mov	r2, r3
 8003976:	460b      	mov	r3, r1
 8003978:	71fb      	strb	r3, [r7, #7]
 800397a:	4613      	mov	r3, r2
 800397c:	71bb      	strb	r3, [r7, #6]
  dev->spi_device = SPIx;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	601a      	str	r2, [r3, #0]

  dev->cs_pin = cs_pin;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	79fa      	ldrb	r2, [r7, #7]
 8003988:	711a      	strb	r2, [r3, #4]
  dev->sck_pin = sck_pin;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	79ba      	ldrb	r2, [r7, #6]
 800398e:	715a      	strb	r2, [r3, #5]
  dev->mosi_pin = mosi_pin;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	7e3a      	ldrb	r2, [r7, #24]
 8003994:	719a      	strb	r2, [r3, #6]
  dev->miso_pin = miso_pin;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	7f3a      	ldrb	r2, [r7, #28]
 800399a:	71da      	strb	r2, [r3, #7]

  dev->wp_pin = 255;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	22ff      	movs	r2, #255	@ 0xff
 80039a0:	721a      	strb	r2, [r3, #8]
  dev->hold_pin = 255;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	22ff      	movs	r2, #255	@ 0xff
 80039a6:	725a      	strb	r2, [r3, #9]

  // TODO actually make this driver use the given CS pin
  CS_HIGH
 80039a8:	2110      	movs	r1, #16
 80039aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039ae:	f7ff ffbf 	bl	8003930 <LL_GPIO_SetOutputPin>

  fram_get_id(dev);
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f805 	bl	80039c2 <fram_get_id>

  return 0;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <fram_get_id>:

int fram_get_id(fram_t *dev) {
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  uint8_t cmd = RDID_CMD;
 80039ca:	239f      	movs	r3, #159	@ 0x9f
 80039cc:	73fb      	strb	r3, [r7, #15]

  CS_LOW
 80039ce:	2110      	movs	r1, #16
 80039d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039d4:	f7ff ffba 	bl	800394c <LL_GPIO_ResetOutputPin>

  spi_write(dev->spi_device, &cmd, 1);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f107 010f 	add.w	r1, r7, #15
 80039e0:	2201      	movs	r2, #1
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fe fb83 	bl	80020ee <spi_write>

  spi_read(dev->spi_device, (uint8_t *)&(dev->device_id), 4);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3310      	adds	r3, #16
 80039f0:	2204      	movs	r2, #4
 80039f2:	4619      	mov	r1, r3
 80039f4:	f7fe fb5d 	bl	80020b2 <spi_read>

  CS_HIGH
 80039f8:	2110      	movs	r1, #16
 80039fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039fe:	f7ff ff97 	bl	8003930 <LL_GPIO_SetOutputPin>

  return 0;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <fram_wren>:

// TODO actually check for errors
// Set write enable latch (enable writes)
int fram_wren(fram_t *dev) {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint8_t cmd = WREN_CMD;
 8003a14:	2306      	movs	r3, #6
 8003a16:	73fb      	strb	r3, [r7, #15]

  CS_LOW
 8003a18:	2110      	movs	r1, #16
 8003a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a1e:	f7ff ff95 	bl	800394c <LL_GPIO_ResetOutputPin>

  spi_write(dev->spi_device, &cmd, 1);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f107 010f 	add.w	r1, r7, #15
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fe fb5e 	bl	80020ee <spi_write>

  CS_HIGH
 8003a32:	2110      	movs	r1, #16
 8003a34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a38:	f7ff ff7a 	bl	8003930 <LL_GPIO_SetOutputPin>

  return 0;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <fram_write>:
  // TODO
  return -1;
}

int fram_write(fram_t *dev, SPI_TypeDef *SPIx, uint32_t addr, uint8_t *buf,
               uint32_t num_bytes) {
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b086      	sub	sp, #24
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	603b      	str	r3, [r7, #0]
  uint8_t cmd = WRITE_CMD;
 8003a54:	2302      	movs	r3, #2
 8003a56:	75fb      	strb	r3, [r7, #23]

  uint8_t addr_byte_1 = (addr >> 16) & 0xFF;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	0c1b      	lsrs	r3, r3, #16
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	75bb      	strb	r3, [r7, #22]
  uint8_t addr_byte_2 = (addr >> 8) & 0xFF;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	0a1b      	lsrs	r3, r3, #8
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	757b      	strb	r3, [r7, #21]
  uint8_t addr_byte_3 = addr & 0xFF;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	753b      	strb	r3, [r7, #20]

  fram_wren(dev);
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f7ff ffcc 	bl	8003a0c <fram_wren>

  CS_LOW
 8003a74:	2110      	movs	r1, #16
 8003a76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a7a:	f7ff ff67 	bl	800394c <LL_GPIO_ResetOutputPin>

  spi_write(dev->spi_device, &cmd, 1);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f107 0117 	add.w	r1, r7, #23
 8003a86:	2201      	movs	r2, #1
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fe fb30 	bl	80020ee <spi_write>

  spi_write(dev->spi_device, &addr_byte_1, 1);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f107 0116 	add.w	r1, r7, #22
 8003a96:	2201      	movs	r2, #1
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fe fb28 	bl	80020ee <spi_write>
  spi_write(dev->spi_device, &addr_byte_2, 1);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f107 0115 	add.w	r1, r7, #21
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fe fb20 	bl	80020ee <spi_write>
  spi_write(dev->spi_device, &addr_byte_3, 1);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f107 0114 	add.w	r1, r7, #20
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fe fb18 	bl	80020ee <spi_write>

  spi_write(dev->spi_device, buf, num_bytes);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6a3a      	ldr	r2, [r7, #32]
 8003ac4:	6839      	ldr	r1, [r7, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe fb11 	bl	80020ee <spi_write>

  CS_HIGH
 8003acc:	2110      	movs	r1, #16
 8003ace:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ad2:	f7ff ff2d 	bl	8003930 <LL_GPIO_SetOutputPin>

  return 0;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <fram_read>:

int fram_read(fram_t *dev, SPI_TypeDef *SPIx, uint32_t addr, uint8_t *buf,
              uint32_t num_bytes) {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  uint8_t cmd = READ_CMD;
 8003aee:	2303      	movs	r3, #3
 8003af0:	75fb      	strb	r3, [r7, #23]

  uint8_t addr_byte_1 = (addr >> 16) & 0xFF;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	0c1b      	lsrs	r3, r3, #16
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	75bb      	strb	r3, [r7, #22]
  uint8_t addr_byte_2 = (addr >> 8) & 0xFF;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	0a1b      	lsrs	r3, r3, #8
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	757b      	strb	r3, [r7, #21]
  uint8_t addr_byte_3 = addr & 0xFF;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	753b      	strb	r3, [r7, #20]

  CS_LOW
 8003b08:	2110      	movs	r1, #16
 8003b0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b0e:	f7ff ff1d 	bl	800394c <LL_GPIO_ResetOutputPin>

  spi_write(dev->spi_device, &cmd, 1);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f107 0117 	add.w	r1, r7, #23
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fe fae6 	bl	80020ee <spi_write>

  spi_write(dev->spi_device, &addr_byte_1, 1);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f107 0116 	add.w	r1, r7, #22
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fe fade 	bl	80020ee <spi_write>
  spi_write(dev->spi_device, &addr_byte_2, 1);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f107 0115 	add.w	r1, r7, #21
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe fad6 	bl	80020ee <spi_write>
  spi_write(dev->spi_device, &addr_byte_3, 1);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f107 0114 	add.w	r1, r7, #20
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe face 	bl	80020ee <spi_write>

  spi_read(dev->spi_device, buf, num_bytes);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6a3a      	ldr	r2, [r7, #32]
 8003b58:	6839      	ldr	r1, [r7, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe faa9 	bl	80020b2 <spi_read>

  CS_HIGH
 8003b60:	2110      	movs	r1, #16
 8003b62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b66:	f7ff fee3 	bl	8003930 <LL_GPIO_SetOutputPin>

  return 0;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <write_buf_to_fs>:

// Mounts, opens file, write to file, closes file, unmounts, returns -1 if mount
// fails
int write_buf_to_fs(lfs_t *lfs, const struct lfs_config *config,
                    lfs_file_t *file, const char *path, char *buf,
                    uint32_t bytes) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]

  int err = lfs_mount(lfs, config);
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f006 fea1 	bl	800a8cc <lfs_mount>
 8003b8a:	6178      	str	r0, [r7, #20]

  if (err) {
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <write_buf_to_fs+0x24>
    return -1;
 8003b92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b96:	e014      	b.n	8003bc2 <write_buf_to_fs+0x4e>
  }

  lfs_file_open(lfs, file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_APPEND);
 8003b98:	f640 1303 	movw	r3, #2307	@ 0x903
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f006 febd 	bl	800a920 <lfs_file_open>

  lfs_file_write(lfs, file, buf, bytes);
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	6a3a      	ldr	r2, [r7, #32]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f006 ff47 	bl	800aa40 <lfs_file_write>

  lfs_file_close(lfs, file);
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f006 fee7 	bl	800a988 <lfs_file_close>
  lfs_unmount(lfs);
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f006 fe9c 	bl	800a8f8 <lfs_unmount>

  return 0;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <fs_flash_read>:

// littleFS port functions

int fs_flash_read(const struct lfs_config *cfg, lfs_block_t block,
                  lfs_off_t off, void *buffer, lfs_size_t size) {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
  assert(off % cfg->read_size == 0);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	695a      	ldr	r2, [r3, #20]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003be4:	fb01 f202 	mul.w	r2, r1, r2
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d005      	beq.n	8003bfa <fs_flash_read+0x2e>
 8003bee:	4b1f      	ldr	r3, [pc, #124]	@ (8003c6c <fs_flash_read+0xa0>)
 8003bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c70 <fs_flash_read+0xa4>)
 8003bf2:	212d      	movs	r1, #45	@ 0x2d
 8003bf4:	481f      	ldr	r0, [pc, #124]	@ (8003c74 <fs_flash_read+0xa8>)
 8003bf6:	f008 f9d9 	bl	800bfac <__assert_func>
  assert(size % cfg->read_size == 0);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c04:	fb01 f202 	mul.w	r2, r1, r2
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <fs_flash_read+0x4e>
 8003c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8003c78 <fs_flash_read+0xac>)
 8003c10:	4a17      	ldr	r2, [pc, #92]	@ (8003c70 <fs_flash_read+0xa4>)
 8003c12:	212e      	movs	r1, #46	@ 0x2e
 8003c14:	4817      	ldr	r0, [pc, #92]	@ (8003c74 <fs_flash_read+0xa8>)
 8003c16:	f008 f9c9 	bl	800bfac <__assert_func>
  assert(block < cfg->block_count);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d305      	bcc.n	8003c30 <fs_flash_read+0x64>
 8003c24:	4b15      	ldr	r3, [pc, #84]	@ (8003c7c <fs_flash_read+0xb0>)
 8003c26:	4a12      	ldr	r2, [pc, #72]	@ (8003c70 <fs_flash_read+0xa4>)
 8003c28:	212f      	movs	r1, #47	@ 0x2f
 8003c2a:	4812      	ldr	r0, [pc, #72]	@ (8003c74 <fs_flash_read+0xa8>)
 8003c2c:	f008 f9be 	bl	800bfac <__assert_func>

  uint32_t startAddress = block * (cfg->block_size) + off;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	fb02 f303 	mul.w	r3, r2, r3
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
  int ret = fram_read(&memory, memory.spi_device, startAddress,
 8003c40:	4b0f      	ldr	r3, [pc, #60]	@ (8003c80 <fs_flash_read+0xb4>)
 8003c42:	6819      	ldr	r1, [r3, #0]
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	480c      	ldr	r0, [pc, #48]	@ (8003c80 <fs_flash_read+0xb4>)
 8003c4e:	f7ff ff47 	bl	8003ae0 <fram_read>
 8003c52:	6138      	str	r0, [r7, #16]
                      (uint8_t *)buffer, size);

  if (ret == -1) {
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c5a:	d102      	bne.n	8003c62 <fs_flash_read+0x96>
    return -1;
 8003c5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c60:	e000      	b.n	8003c64 <fs_flash_read+0x98>
  } else {
    return 0;
 8003c62:	2300      	movs	r3, #0
  }
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	0800df60 	.word	0x0800df60
 8003c70:	0800ed78 	.word	0x0800ed78
 8003c74:	0800df7c 	.word	0x0800df7c
 8003c78:	0800df98 	.word	0x0800df98
 8003c7c:	0800dfb4 	.word	0x0800dfb4
 8003c80:	200000e4 	.word	0x200000e4

08003c84 <fs_flash_prog>:

int fs_flash_prog(const struct lfs_config *cfg, lfs_block_t block,
                  lfs_off_t off, const void *buffer, lfs_size_t size) {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]

  assert(off % cfg->prog_size == 0);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c9c:	fb01 f202 	mul.w	r2, r1, r2
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <fs_flash_prog+0x2e>
 8003ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8003d24 <fs_flash_prog+0xa0>)
 8003ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8003d28 <fs_flash_prog+0xa4>)
 8003caa:	213f      	movs	r1, #63	@ 0x3f
 8003cac:	481f      	ldr	r0, [pc, #124]	@ (8003d2c <fs_flash_prog+0xa8>)
 8003cae:	f008 f97d 	bl	800bfac <__assert_func>
  assert(size % cfg->prog_size == 0);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8003cbc:	fb01 f202 	mul.w	r2, r1, r2
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <fs_flash_prog+0x4e>
 8003cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d30 <fs_flash_prog+0xac>)
 8003cc8:	4a17      	ldr	r2, [pc, #92]	@ (8003d28 <fs_flash_prog+0xa4>)
 8003cca:	2140      	movs	r1, #64	@ 0x40
 8003ccc:	4817      	ldr	r0, [pc, #92]	@ (8003d2c <fs_flash_prog+0xa8>)
 8003cce:	f008 f96d 	bl	800bfac <__assert_func>
  assert(block < cfg->block_count);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d305      	bcc.n	8003ce8 <fs_flash_prog+0x64>
 8003cdc:	4b15      	ldr	r3, [pc, #84]	@ (8003d34 <fs_flash_prog+0xb0>)
 8003cde:	4a12      	ldr	r2, [pc, #72]	@ (8003d28 <fs_flash_prog+0xa4>)
 8003ce0:	2141      	movs	r1, #65	@ 0x41
 8003ce2:	4812      	ldr	r0, [pc, #72]	@ (8003d2c <fs_flash_prog+0xa8>)
 8003ce4:	f008 f962 	bl	800bfac <__assert_func>

  uint32_t startAddress = block * (cfg->block_size) + off;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	fb02 f303 	mul.w	r3, r2, r3
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
  int ret = fram_write(&memory, memory.spi_device, startAddress,
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8003d38 <fs_flash_prog+0xb4>)
 8003cfa:	6819      	ldr	r1, [r3, #0]
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	480c      	ldr	r0, [pc, #48]	@ (8003d38 <fs_flash_prog+0xb4>)
 8003d06:	f7ff fe9e 	bl	8003a46 <fram_write>
 8003d0a:	6138      	str	r0, [r7, #16]
                       (uint8_t *)buffer, size);

  if (ret == -1) {
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d12:	d102      	bne.n	8003d1a <fs_flash_prog+0x96>
    return -1;
 8003d14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d18:	e000      	b.n	8003d1c <fs_flash_prog+0x98>
  } else {
    return 0;
 8003d1a:	2300      	movs	r3, #0
  }
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	0800dfd0 	.word	0x0800dfd0
 8003d28:	0800ed88 	.word	0x0800ed88
 8003d2c:	0800df7c 	.word	0x0800df7c
 8003d30:	0800dfec 	.word	0x0800dfec
 8003d34:	0800dfb4 	.word	0x0800dfb4
 8003d38:	200000e4 	.word	0x200000e4

08003d3c <fs_flash_erase>:

int fs_flash_erase(const struct lfs_config *cfg, lfs_block_t block) {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  assert(block < cfg->block_count);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d305      	bcc.n	8003d5c <fs_flash_erase+0x20>
 8003d50:	4b12      	ldr	r3, [pc, #72]	@ (8003d9c <fs_flash_erase+0x60>)
 8003d52:	4a13      	ldr	r2, [pc, #76]	@ (8003da0 <fs_flash_erase+0x64>)
 8003d54:	214f      	movs	r1, #79	@ 0x4f
 8003d56:	4813      	ldr	r0, [pc, #76]	@ (8003da4 <fs_flash_erase+0x68>)
 8003d58:	f008 f928 	bl	800bfac <__assert_func>
  uint8_t zero = 0x00;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	73fb      	strb	r3, [r7, #15]

  uint32_t startAddress = block * (cfg->block_size);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69da      	ldr	r2, [r3, #28]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	fb02 f303 	mul.w	r3, r2, r3
 8003d6a:	617b      	str	r3, [r7, #20]
  int ret = fram_write(&memory, memory.spi_device, startAddress, &zero, 128);
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8003da8 <fs_flash_erase+0x6c>)
 8003d6e:	6819      	ldr	r1, [r3, #0]
 8003d70:	f107 030f 	add.w	r3, r7, #15
 8003d74:	2280      	movs	r2, #128	@ 0x80
 8003d76:	9200      	str	r2, [sp, #0]
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	480b      	ldr	r0, [pc, #44]	@ (8003da8 <fs_flash_erase+0x6c>)
 8003d7c:	f7ff fe63 	bl	8003a46 <fram_write>
 8003d80:	6138      	str	r0, [r7, #16]

  if (ret == -1) {
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d88:	d102      	bne.n	8003d90 <fs_flash_erase+0x54>
    return -1;
 8003d8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d8e:	e000      	b.n	8003d92 <fs_flash_erase+0x56>
  } else {
    return 0;
 8003d90:	2300      	movs	r3, #0
  }
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	0800dfb4 	.word	0x0800dfb4
 8003da0:	0800ed98 	.word	0x0800ed98
 8003da4:	0800df7c 	.word	0x0800df7c
 8003da8:	200000e4 	.word	0x200000e4

08003dac <fs_flash_sync>:

// SPI implementation is blocking
int fs_flash_sync(const struct lfs_config *c) { return 0; }
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	2300      	movs	r3, #0
 8003db6:	4618      	mov	r0, r3
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	bf38      	it	cc
 8003dd4:	4613      	movcc	r3, r2
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4293      	cmp	r3, r2
 8003df2:	bf28      	it	cs
 8003df4:	4613      	movcs	r3, r2
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e14:	6839      	ldr	r1, [r7, #0]
 8003e16:	fb01 f202 	mul.w	r2, r1, r2
 8003e1a:	1a9b      	subs	r3, r3, r2
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	1ad3      	subs	r3, r2, r3
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	6839      	ldr	r1, [r7, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ffde 	bl	8003e02 <lfs_aligndown>
 8003e46:	4603      	mov	r3, r0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	fab3 f383 	clz	r3, r3
 8003e60:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	fa93 f3a3 	rbit	r3, r3
 8003e7e:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f009 ff28 	bl	800dcec <__popcountsi2>
 8003e9c:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	1ad3      	subs	r3, r2, r3
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8003eca:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff ffee 	bl	8003ec2 <lfs_fromle32>
 8003ee6:	4603      	mov	r3, r0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff ffed 	bl	8003ef0 <lfs_frombe32>
 8003f16:	4603      	mov	r3, r0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f008 f86f 	bl	800c00c <malloc>
 8003f2e:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f008 f86b 	bl	800c01c <free>
#else
    (void)p;
#endif
}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f5e:	601a      	str	r2, [r3, #0]
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68d8      	ldr	r0, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f80:	461a      	mov	r2, r3
 8003f82:	21ff      	movs	r1, #255	@ 0xff
 8003f84:	f008 fa8a 	bl	800c49c <memset>
    pcache->block = LFS_BLOCK_NULL;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f8e:	601a      	str	r2, [r3, #0]
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8003f98:	b5b0      	push	{r4, r5, r7, lr}
 8003f9a:	b08a      	sub	sp, #40	@ 0x28
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa8:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 8003faa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fae:	441a      	add	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d80a      	bhi.n	8003fd0 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 8124 	beq.w	800420c <lfs_bd_read+0x274>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	f0c0 811e 	bcc.w	800420c <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 8003fd0:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8003fd4:	e11f      	b.n	8004216 <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8003fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fd8:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d03f      	beq.n	8004060 <lfs_bd_read+0xc8>
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d13a      	bne.n	8004060 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8003ff4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d232      	bcs.n	8004060 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004000:	429a      	cmp	r2, r3
 8004002:	d324      	bcc.n	800404e <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	6859      	ldr	r1, [r3, #4]
 800400c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400e:	1acb      	subs	r3, r1, r3
 8004010:	4413      	add	r3, r2
 8004012:	4619      	mov	r1, r3
 8004014:	69b8      	ldr	r0, [r7, #24]
 8004016:	f7ff fee4 	bl	8003de2 <lfs_min>
 800401a:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004026:	1acb      	subs	r3, r1, r3
 8004028:	4413      	add	r3, r2
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4619      	mov	r1, r3
 800402e:	69f8      	ldr	r0, [r7, #28]
 8004030:	f008 fb00 	bl	800c634 <memcpy>

                data += diff;
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	4413      	add	r3, r2
 800403a:	61fb      	str	r3, [r7, #28]
                off += diff;
 800403c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	4413      	add	r3, r2
 8004042:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8004044:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800404c:	e0de      	b.n	800420c <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	4619      	mov	r1, r3
 8004058:	69b8      	ldr	r0, [r7, #24]
 800405a:	f7ff fec2 	bl	8003de2 <lfs_min>
 800405e:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004066:	429a      	cmp	r2, r3
 8004068:	d13a      	bne.n	80040e0 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	4413      	add	r3, r2
        if (block == rcache->block &&
 8004074:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004076:	429a      	cmp	r2, r3
 8004078:	d232      	bcs.n	80040e0 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004080:	429a      	cmp	r2, r3
 8004082:	d324      	bcc.n	80040ce <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6859      	ldr	r1, [r3, #4]
 800408c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800408e:	1acb      	subs	r3, r1, r3
 8004090:	4413      	add	r3, r2
 8004092:	4619      	mov	r1, r3
 8004094:	69b8      	ldr	r0, [r7, #24]
 8004096:	f7ff fea4 	bl	8003de2 <lfs_min>
 800409a:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80040a6:	1acb      	subs	r3, r1, r3
 80040a8:	4413      	add	r3, r2
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4619      	mov	r1, r3
 80040ae:	69f8      	ldr	r0, [r7, #28]
 80040b0:	f008 fac0 	bl	800c634 <memcpy>

                data += diff;
 80040b4:	69fa      	ldr	r2, [r7, #28]
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	4413      	add	r3, r2
 80040ba:	61fb      	str	r3, [r7, #28]
                off += diff;
 80040bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	4413      	add	r3, r2
 80040c2:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 80040c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 80040cc:	e09e      	b.n	800420c <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	4619      	mov	r1, r3
 80040d8:	69b8      	ldr	r0, [r7, #24]
 80040da:	f7ff fe82 	bl	8003de2 <lfs_min>
 80040de:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80040e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d336      	bcc.n	8004156 <lfs_bd_read+0x1be>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040ec:	695a      	ldr	r2, [r3, #20]
 80040ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80040f4:	fb01 f202 	mul.w	r2, r1, r2
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d12b      	bne.n	8004156 <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004102:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8004104:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004106:	429a      	cmp	r2, r3
 8004108:	d325      	bcc.n	8004156 <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	4619      	mov	r1, r3
 8004112:	69b8      	ldr	r0, [r7, #24]
 8004114:	f7ff fe75 	bl	8003e02 <lfs_aligndown>
 8004118:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800411e:	685c      	ldr	r4, [r3, #4]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800412c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800412e:	47a0      	blx	r4
 8004130:	6178      	str	r0, [r7, #20]
            if (err) {
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <lfs_bd_read+0x1a4>
                return err;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	e06c      	b.n	8004216 <lfs_bd_read+0x27e>
            }

            data += diff;
 800413c:	69fa      	ldr	r2, [r7, #28]
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	4413      	add	r3, r2
 8004142:	61fb      	str	r3, [r7, #28]
            off += diff;
 8004144:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	4413      	add	r3, r2
 800414a:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 800414c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 8004154:	e05a      	b.n	800420c <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <lfs_bd_read+0x1dc>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004164:	429a      	cmp	r2, r3
 8004166:	d305      	bcc.n	8004174 <lfs_bd_read+0x1dc>
 8004168:	4b2d      	ldr	r3, [pc, #180]	@ (8004220 <lfs_bd_read+0x288>)
 800416a:	4a2e      	ldr	r2, [pc, #184]	@ (8004224 <lfs_bd_read+0x28c>)
 800416c:	216b      	movs	r1, #107	@ 0x6b
 800416e:	482e      	ldr	r0, [pc, #184]	@ (8004228 <lfs_bd_read+0x290>)
 8004170:	f007 ff1c 	bl	800bfac <__assert_func>
        rcache->block = block;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004178:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	4619      	mov	r1, r3
 8004182:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004184:	f7ff fe3d 	bl	8003e02 <lfs_aligndown>
 8004188:	4602      	mov	r2, r0
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800418e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004198:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 800419a:	4619      	mov	r1, r3
 800419c:	4610      	mov	r0, r2
 800419e:	f7ff fe45 	bl	8003e2c <lfs_alignup>
 80041a2:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041a8:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 80041aa:	4619      	mov	r1, r3
 80041ac:	4610      	mov	r0, r2
 80041ae:	f7ff fe18 	bl	8003de2 <lfs_min>
 80041b2:	4602      	mov	r2, r0
                - rcache->off,
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 80041b8:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(
 80041c0:	4619      	mov	r1, r3
 80041c2:	4610      	mov	r0, r2
 80041c4:	f7ff fe0d 	bl	8003de2 <lfs_min>
 80041c8:	4602      	mov	r2, r0
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041d2:	685c      	ldr	r4, [r3, #4]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6819      	ldr	r1, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	462b      	mov	r3, r5
 80041ec:	47a0      	blx	r4
 80041ee:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	dd05      	ble.n	8004202 <lfs_bd_read+0x26a>
 80041f6:	4b0d      	ldr	r3, [pc, #52]	@ (800422c <lfs_bd_read+0x294>)
 80041f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004224 <lfs_bd_read+0x28c>)
 80041fa:	2176      	movs	r1, #118	@ 0x76
 80041fc:	480a      	ldr	r0, [pc, #40]	@ (8004228 <lfs_bd_read+0x290>)
 80041fe:	f007 fed5 	bl	800bfac <__assert_func>
        if (err) {
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <lfs_bd_read+0x274>
            return err;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	e004      	b.n	8004216 <lfs_bd_read+0x27e>
    while (size > 0) {
 800420c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800420e:	2b00      	cmp	r3, #0
 8004210:	f47f aee1 	bne.w	8003fd6 <lfs_bd_read+0x3e>
        }
    }

    return 0;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3720      	adds	r7, #32
 800421a:	46bd      	mov	sp, r7
 800421c:	bdb0      	pop	{r4, r5, r7, pc}
 800421e:	bf00      	nop
 8004220:	0800e008 	.word	0x0800e008
 8004224:	0800eda8 	.word	0x0800eda8
 8004228:	0800e038 	.word	0x0800e038
 800422c:	0800e050 	.word	0x0800e050

08004230 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8004230:	b580      	push	{r7, lr}
 8004232:	b090      	sub	sp, #64	@ 0x40
 8004234:	af04      	add	r7, sp, #16
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800423e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004240:	62bb      	str	r3, [r7, #40]	@ 0x28
    lfs_size_t diff = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	627b      	str	r3, [r7, #36]	@ 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 8004246:	2300      	movs	r3, #0
 8004248:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800424a:	e039      	b.n	80042c0 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 800424c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800424e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2108      	movs	r1, #8
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fdc4 	bl	8003de2 <lfs_min>
 800425a:	6278      	str	r0, [r7, #36]	@ 0x24
        int err = lfs_bd_read(lfs,
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004260:	1ad1      	subs	r1, r2, r3
 8004262:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004266:	4413      	add	r3, r2
 8004268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800426a:	9203      	str	r2, [sp, #12]
 800426c:	f107 0214 	add.w	r2, r7, #20
 8004270:	9202      	str	r2, [sp, #8]
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	460b      	mov	r3, r1
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f7ff fe8a 	bl	8003f98 <lfs_bd_read>
 8004284:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <lfs_bd_cmp+0x60>
            return err;
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	e01c      	b.n	80042ca <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8004290:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004294:	18d1      	adds	r1, r2, r3
 8004296:	f107 0314 	add.w	r3, r7, #20
 800429a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800429c:	4618      	mov	r0, r3
 800429e:	f008 f8ed 	bl	800c47c <memcmp>
 80042a2:	61f8      	str	r0, [r7, #28]
        if (res) {
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d006      	beq.n	80042b8 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	da01      	bge.n	80042b4 <lfs_bd_cmp+0x84>
 80042b0:	2301      	movs	r3, #1
 80042b2:	e00a      	b.n	80042ca <lfs_bd_cmp+0x9a>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e008      	b.n	80042ca <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 80042b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042bc:	4413      	add	r3, r2
 80042be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d3c1      	bcc.n	800424c <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3730      	adds	r7, #48	@ 0x30
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b08e      	sub	sp, #56	@ 0x38
 80042d6:	af04      	add	r7, sp, #16
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 80042e0:	2300      	movs	r3, #0
 80042e2:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 80042e4:	2300      	movs	r3, #0
 80042e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80042e8:	e030      	b.n	800434c <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 80042ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2108      	movs	r1, #8
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fd75 	bl	8003de2 <lfs_min>
 80042f8:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fe:	1ad1      	subs	r1, r2, r3
 8004300:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004304:	4413      	add	r3, r2
 8004306:	6a3a      	ldr	r2, [r7, #32]
 8004308:	9203      	str	r2, [sp, #12]
 800430a:	f107 0214 	add.w	r2, r7, #20
 800430e:	9202      	str	r2, [sp, #8]
 8004310:	9301      	str	r3, [sp, #4]
 8004312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	460b      	mov	r3, r1
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	68b9      	ldr	r1, [r7, #8]
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f7ff fe3b 	bl	8003f98 <lfs_bd_read>
 8004322:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <lfs_bd_crc+0x5c>
            return err;
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	e013      	b.n	8004356 <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 800432e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f107 0114 	add.w	r1, r7, #20
 8004336:	6a3a      	ldr	r2, [r7, #32]
 8004338:	4618      	mov	r0, r3
 800433a:	f006 fbc7 	bl	800aacc <lfs_crc>
 800433e:	4602      	mov	r2, r0
 8004340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004342:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8004344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	4413      	add	r3, r2
 800434a:	627b      	str	r3, [r7, #36]	@ 0x24
 800434c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800434e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004350:	429a      	cmp	r2, r3
 8004352:	d3ca      	bcc.n	80042ea <lfs_bd_crc+0x18>
    }

    return 0;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3728      	adds	r7, #40	@ 0x28
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8004360:	b5b0      	push	{r4, r5, r7, lr}
 8004362:	b08c      	sub	sp, #48	@ 0x30
 8004364:	af04      	add	r7, sp, #16
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004376:	d060      	beq.n	800443a <lfs_bd_flush+0xda>
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f113 0f02 	cmn.w	r3, #2
 8004380:	d05b      	beq.n	800443a <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800438a:	429a      	cmp	r2, r3
 800438c:	d305      	bcc.n	800439a <lfs_bd_flush+0x3a>
 800438e:	4b2d      	ldr	r3, [pc, #180]	@ (8004444 <lfs_bd_flush+0xe4>)
 8004390:	4a2d      	ldr	r2, [pc, #180]	@ (8004448 <lfs_bd_flush+0xe8>)
 8004392:	21b3      	movs	r1, #179	@ 0xb3
 8004394:	482d      	ldr	r0, [pc, #180]	@ (800444c <lfs_bd_flush+0xec>)
 8004396:	f007 fe09 	bl	800bfac <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	4619      	mov	r1, r3
 80043a6:	4610      	mov	r0, r2
 80043a8:	f7ff fd40 	bl	8003e2c <lfs_alignup>
 80043ac:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043b2:	689c      	ldr	r4, [r3, #8]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	6819      	ldr	r1, [r3, #0]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	462b      	mov	r3, r5
 80043ca:	47a0      	blx	r4
 80043cc:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	dd05      	ble.n	80043e0 <lfs_bd_flush+0x80>
 80043d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004450 <lfs_bd_flush+0xf0>)
 80043d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004448 <lfs_bd_flush+0xe8>)
 80043d8:	21b7      	movs	r1, #183	@ 0xb7
 80043da:	481c      	ldr	r0, [pc, #112]	@ (800444c <lfs_bd_flush+0xec>)
 80043dc:	f007 fde6 	bl	800bfac <__assert_func>
        if (err) {
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <lfs_bd_flush+0x8a>
            return err;
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	e028      	b.n	800443c <lfs_bd_flush+0xdc>
        }

        if (validate) {
 80043ea:	78fb      	ldrb	r3, [r7, #3]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d020      	beq.n	8004432 <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f7ff fdab 	bl	8003f4e <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8004400:	68b9      	ldr	r1, [r7, #8]
 8004402:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8004404:	69f8      	ldr	r0, [r7, #28]
 8004406:	9003      	str	r0, [sp, #12]
 8004408:	9102      	str	r1, [sp, #8]
 800440a:	9201      	str	r2, [sp, #4]
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	2100      	movs	r1, #0
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f7ff ff0b 	bl	8004230 <lfs_bd_cmp>
 800441a:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	da01      	bge.n	8004426 <lfs_bd_flush+0xc6>
                return res;
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	e00a      	b.n	800443c <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 800442c:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8004430:	e004      	b.n	800443c <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8004432:	68b9      	ldr	r1, [r7, #8]
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f7ff fd99 	bl	8003f6c <lfs_cache_zero>
    }

    return 0;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3720      	adds	r7, #32
 8004440:	46bd      	mov	sp, r7
 8004442:	bdb0      	pop	{r4, r5, r7, pc}
 8004444:	0800e05c 	.word	0x0800e05c
 8004448:	0800edb4 	.word	0x0800edb4
 800444c:	0800e038 	.word	0x0800e038
 8004450:	0800e050 	.word	0x0800e050

08004454 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f7ff fd72 	bl	8003f4e <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	68b9      	ldr	r1, [r7, #8]
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f7ff ff75 	bl	8004360 <lfs_bd_flush>
 8004476:	6178      	str	r0, [r7, #20]
    if (err) {
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <lfs_bd_sync+0x2e>
        return err;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	e011      	b.n	80044a6 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800448c:	4610      	mov	r0, r2
 800448e:	4798      	blx	r3
 8004490:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	dd05      	ble.n	80044a4 <lfs_bd_sync+0x50>
 8004498:	4b05      	ldr	r3, [pc, #20]	@ (80044b0 <lfs_bd_sync+0x5c>)
 800449a:	4a06      	ldr	r2, [pc, #24]	@ (80044b4 <lfs_bd_sync+0x60>)
 800449c:	21dd      	movs	r1, #221	@ 0xdd
 800449e:	4806      	ldr	r0, [pc, #24]	@ (80044b8 <lfs_bd_sync+0x64>)
 80044a0:	f007 fd84 	bl	800bfac <__assert_func>
    return err;
 80044a4:	697b      	ldr	r3, [r7, #20]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	0800e050 	.word	0x0800e050
 80044b4:	0800edc4 	.word	0x0800edc4
 80044b8:	0800e038 	.word	0x0800e038

080044bc <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 80044ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044cc:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 80044ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d0:	f113 0f02 	cmn.w	r3, #2
 80044d4:	d00a      	beq.n	80044ec <lfs_bd_prog+0x30>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044dc:	429a      	cmp	r2, r3
 80044de:	d305      	bcc.n	80044ec <lfs_bd_prog+0x30>
 80044e0:	4b48      	ldr	r3, [pc, #288]	@ (8004604 <lfs_bd_prog+0x148>)
 80044e2:	4a49      	ldr	r2, [pc, #292]	@ (8004608 <lfs_bd_prog+0x14c>)
 80044e4:	21e8      	movs	r1, #232	@ 0xe8
 80044e6:	4849      	ldr	r0, [pc, #292]	@ (800460c <lfs_bd_prog+0x150>)
 80044e8:	f007 fd60 	bl	800bfac <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 80044ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f0:	441a      	add	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d97a      	bls.n	80045f2 <lfs_bd_prog+0x136>
 80044fc:	4b44      	ldr	r3, [pc, #272]	@ (8004610 <lfs_bd_prog+0x154>)
 80044fe:	4a42      	ldr	r2, [pc, #264]	@ (8004608 <lfs_bd_prog+0x14c>)
 8004500:	21e9      	movs	r1, #233	@ 0xe9
 8004502:	4842      	ldr	r0, [pc, #264]	@ (800460c <lfs_bd_prog+0x150>)
 8004504:	f007 fd52 	bl	800bfac <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800450e:	429a      	cmp	r2, r3
 8004510:	d151      	bne.n	80045b6 <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8004516:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004518:	429a      	cmp	r2, r3
 800451a:	d34c      	bcc.n	80045b6 <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004526:	4413      	add	r3, r2
                off >= pcache->off &&
 8004528:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800452a:	429a      	cmp	r2, r3
 800452c:	d243      	bcs.n	80045b6 <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004532:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	6859      	ldr	r1, [r3, #4]
 8004538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453a:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 800453c:	4413      	add	r3, r2
 800453e:	4619      	mov	r1, r3
 8004540:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004542:	f7ff fc4e 	bl	8003de2 <lfs_min>
 8004546:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004552:	1acb      	subs	r3, r1, r3
 8004554:	4413      	add	r3, r2
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	69f9      	ldr	r1, [r7, #28]
 800455a:	4618      	mov	r0, r3
 800455c:	f008 f86a 	bl	800c634 <memcpy>

            data += diff;
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	4413      	add	r3, r2
 8004566:	61fb      	str	r3, [r7, #28]
            off += diff;
 8004568:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	4413      	add	r3, r2
 800456e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 8004570:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	6898      	ldr	r0, [r3, #8]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	4619      	mov	r1, r3
 8004586:	f7ff fc1c 	bl	8003dc2 <lfs_max>
 800458a:	4602      	mov	r2, r0
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459a:	429a      	cmp	r2, r3
 800459c:	d128      	bne.n	80045f0 <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	68b9      	ldr	r1, [r7, #8]
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f7ff fedb 	bl	8004360 <lfs_bd_flush>
 80045aa:	6178      	str	r0, [r7, #20]
                if (err) {
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d01e      	beq.n	80045f0 <lfs_bd_prog+0x134>
                    return err;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	e021      	b.n	80045fa <lfs_bd_prog+0x13e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045be:	d006      	beq.n	80045ce <lfs_bd_prog+0x112>
 80045c0:	4b14      	ldr	r3, [pc, #80]	@ (8004614 <lfs_bd_prog+0x158>)
 80045c2:	4a11      	ldr	r2, [pc, #68]	@ (8004608 <lfs_bd_prog+0x14c>)
 80045c4:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80045c8:	4810      	ldr	r0, [pc, #64]	@ (800460c <lfs_bd_prog+0x150>)
 80045ca:	f007 fcef 	bl	800bfac <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045d2:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	4619      	mov	r1, r3
 80045dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80045de:	f7ff fc10 	bl	8003e02 <lfs_aligndown>
 80045e2:	4602      	mov	r2, r0
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2200      	movs	r2, #0
 80045ec:	609a      	str	r2, [r3, #8]
 80045ee:	e000      	b.n	80045f2 <lfs_bd_prog+0x136>
            continue;
 80045f0:	bf00      	nop
    while (size > 0) {
 80045f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d187      	bne.n	8004508 <lfs_bd_prog+0x4c>
    }

    return 0;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3720      	adds	r7, #32
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	0800e080 	.word	0x0800e080
 8004608:	0800edd0 	.word	0x0800edd0
 800460c:	0800e038 	.word	0x0800e038
 8004610:	0800e0b8 	.word	0x0800e0b8
 8004614:	0800e0dc 	.word	0x0800e0dc

08004618 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d306      	bcc.n	800463a <lfs_bd_erase+0x22>
 800462c:	4b0f      	ldr	r3, [pc, #60]	@ (800466c <lfs_bd_erase+0x54>)
 800462e:	4a10      	ldr	r2, [pc, #64]	@ (8004670 <lfs_bd_erase+0x58>)
 8004630:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8004634:	480f      	ldr	r0, [pc, #60]	@ (8004674 <lfs_bd_erase+0x5c>)
 8004636:	f007 fcb9 	bl	800bfac <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004644:	6839      	ldr	r1, [r7, #0]
 8004646:	4610      	mov	r0, r2
 8004648:	4798      	blx	r3
 800464a:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	dd06      	ble.n	8004660 <lfs_bd_erase+0x48>
 8004652:	4b09      	ldr	r3, [pc, #36]	@ (8004678 <lfs_bd_erase+0x60>)
 8004654:	4a06      	ldr	r2, [pc, #24]	@ (8004670 <lfs_bd_erase+0x58>)
 8004656:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800465a:	4806      	ldr	r0, [pc, #24]	@ (8004674 <lfs_bd_erase+0x5c>)
 800465c:	f007 fca6 	bl	800bfac <__assert_func>
    return err;
 8004660:	68fb      	ldr	r3, [r7, #12]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	0800e100 	.word	0x0800e100
 8004670:	0800eddc 	.word	0x0800eddc
 8004674:	0800e038 	.word	0x0800e038
 8004678:	0800e050 	.word	0x0800e050

0800467c <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3304      	adds	r3, #4
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	601a      	str	r2, [r3, #0]
}
 800469a:	bf00      	nop
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046b6:	d005      	beq.n	80046c4 <lfs_pair_isnull+0x1e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3304      	adds	r3, #4
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046c2:	d101      	bne.n	80046c8 <lfs_pair_isnull+0x22>
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <lfs_pair_isnull+0x24>
 80046c8:	2300      	movs	r3, #0
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	b2db      	uxtb	r3, r3
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d017      	beq.n	8004722 <lfs_pair_cmp+0x46>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3304      	adds	r3, #4
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	3304      	adds	r3, #4
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d00f      	beq.n	8004722 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	3304      	adds	r3, #4
 800470a:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800470c:	429a      	cmp	r2, r3
 800470e:	d008      	beq.n	8004722 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3304      	adds	r3, #4
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800471a:	429a      	cmp	r2, r3
 800471c:	d001      	beq.n	8004722 <lfs_pair_cmp+0x46>
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <lfs_pair_cmp+0x48>
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d107      	bne.n	8004756 <lfs_pair_issync+0x26>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3304      	adds	r3, #4
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	3304      	adds	r3, #4
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d00d      	beq.n	8004772 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	3304      	adds	r3, #4
 800475e:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8004760:	429a      	cmp	r2, r3
 8004762:	d108      	bne.n	8004776 <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3304      	adds	r3, #4
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d101      	bne.n	8004776 <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <lfs_pair_issync+0x48>
 8004776:	2300      	movs	r3, #0
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	b2db      	uxtb	r3, r3
}
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 800478a:	b590      	push	{r4, r7, lr}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff fb93 	bl	8003ec2 <lfs_fromle32>
 800479c:	4602      	mov	r2, r0
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3304      	adds	r3, #4
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	1d1c      	adds	r4, r3, #4
 80047ac:	4610      	mov	r0, r2
 80047ae:	f7ff fb88 	bl	8003ec2 <lfs_fromle32>
 80047b2:	4603      	mov	r3, r0
 80047b4:	6023      	str	r3, [r4, #0]
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd90      	pop	{r4, r7, pc}

080047be <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 80047be:	b590      	push	{r4, r7, lr}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff fb84 	bl	8003ed8 <lfs_tole32>
 80047d0:	4602      	mov	r2, r0
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3304      	adds	r3, #4
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	1d1c      	adds	r4, r3, #4
 80047e0:	4610      	mov	r0, r2
 80047e2:	f7ff fb79 	bl	8003ed8 <lfs_tole32>
 80047e6:	4603      	mov	r3, r0
 80047e8:	6023      	str	r3, [r4, #0]
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd90      	pop	{r4, r7, pc}

080047f2 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	43db      	mvns	r3, r3
 80047fe:	0fdb      	lsrs	r3, r3, #31
 8004800:	b2db      	uxtb	r3, r3
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	059b      	lsls	r3, r3, #22
 800481a:	159b      	asrs	r3, r3, #22
 800481c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004820:	bf0c      	ite	eq
 8004822:	2301      	moveq	r3, #1
 8004824:	2300      	movne	r3, #0
 8004826:	b2db      	uxtb	r3, r3
}
 8004828:	4618      	mov	r0, r3
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	0d1b      	lsrs	r3, r3, #20
 8004840:	b29b      	uxth	r3, r3
 8004842:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004846:	b29b      	uxth	r3, r3
}
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	0d1b      	lsrs	r3, r3, #20
 8004860:	b29b      	uxth	r3, r3
 8004862:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
 8004866:	b29b      	uxth	r3, r3
}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	0d1b      	lsrs	r3, r3, #20
 8004880:	b29b      	uxth	r3, r3
 8004882:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004886:	b29b      	uxth	r3, r3
}
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	0d1b      	lsrs	r3, r3, #20
 80048a0:	b2db      	uxtb	r3, r3
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff ffec 	bl	8004894 <lfs_tag_chunk>
 80048bc:	4603      	mov	r3, r0
 80048be:	b25b      	sxtb	r3, r3
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	0a9b      	lsrs	r3, r3, #10
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048da:	b29b      	uxth	r3, r3
}
 80048dc:	4618      	mov	r0, r3
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff ff7f 	bl	800480e <lfs_tag_isdelete>
 8004910:	4603      	mov	r3, r0
 8004912:	461a      	mov	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4413      	add	r3, r2
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff ffe5 	bl	80048e8 <lfs_tag_size>
 800491e:	4603      	mov	r3, r0
 8004920:	3304      	adds	r3, #4
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800492a:	b480      	push	{r7}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8004934:	2300      	movs	r3, #0
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	e012      	b.n	8004960 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	4413      	add	r3, r2
 8004942:	6819      	ldr	r1, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	4413      	add	r3, r2
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	4403      	add	r3, r0
 8004956:	404a      	eors	r2, r1
 8004958:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	3301      	adds	r3, #1
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b02      	cmp	r3, #2
 8004964:	dde9      	ble.n	800493a <lfs_gstate_xor+0x10>
    }
}
 8004966:	bf00      	nop
 8004968:	bf00      	nop
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800497c:	2300      	movs	r3, #0
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	e00b      	b.n	800499a <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	4413      	add	r3, r2
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <lfs_gstate_iszero+0x20>
            return false;
 8004990:	2300      	movs	r3, #0
 8004992:	e006      	b.n	80049a2 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3301      	adds	r3, #1
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b02      	cmp	r3, #2
 800499e:	ddf0      	ble.n	8004982 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80049a0:	2301      	movs	r3, #1
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff ff94 	bl	80048e8 <lfs_tag_size>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bf14      	ite	ne
 80049c6:	2301      	movne	r3, #1
 80049c8:	2300      	moveq	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff ff81 	bl	80048e8 <lfs_tag_size>
 80049e6:	4603      	mov	r3, r0
 80049e8:	b2db      	uxtb	r3, r3
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff ff18 	bl	8004834 <lfs_tag_type1>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	bf14      	ite	ne
 8004a0a:	2301      	movne	r3, #1
 8004a0c:	2300      	moveq	r3, #0
 8004a0e:	b2db      	uxtb	r3, r3
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff ff5f 	bl	80048e8 <lfs_tag_size>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	0a5b      	lsrs	r3, r3, #9
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	bf14      	ite	ne
 8004a32:	2301      	movne	r3, #1
 8004a34:	2300      	moveq	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff fef0 	bl	8004834 <lfs_tag_type1>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <lfs_gstate_hasmovehere+0x30>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	6839      	ldr	r1, [r7, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff fe3b 	bl	80046dc <lfs_pair_cmp>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <lfs_gstate_hasmovehere+0x30>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <lfs_gstate_hasmovehere+0x32>
 8004a70:	2300      	movs	r3, #0
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	b2db      	uxtb	r3, r3
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff fa18 	bl	8003ec2 <lfs_fromle32>
 8004a92:	4602      	mov	r2, r0
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff fa10 	bl	8003ec2 <lfs_fromle32>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff fa08 	bl	8003ec2 <lfs_fromle32>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	609a      	str	r2, [r3, #8]
}
 8004ab8:	bf00      	nop
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff fa03 	bl	8003ed8 <lfs_tole32>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff f9fb 	bl	8003ed8 <lfs_tole32>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff f9f3 	bl	8003ed8 <lfs_tole32>
 8004af2:	4602      	mov	r2, r0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	609a      	str	r2, [r3, #8]
}
 8004af8:	bf00      	nop
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff f9d8 	bl	8003ec2 <lfs_fromle32>
 8004b12:	4602      	mov	r2, r0
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff f9d0 	bl	8003ec2 <lfs_fromle32>
 8004b22:	4602      	mov	r2, r0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	605a      	str	r2, [r3, #4]
}
 8004b28:	bf00      	nop
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff f9cb 	bl	8003ed8 <lfs_tole32>
 8004b42:	4602      	mov	r2, r0
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff f9c3 	bl	8003ed8 <lfs_tole32>
 8004b52:	4602      	mov	r2, r0
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	605a      	str	r2, [r3, #4]
}
 8004b58:	bf00      	nop
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff f9a8 	bl	8003ec2 <lfs_fromle32>
 8004b72:	4602      	mov	r2, r0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff f9a0 	bl	8003ec2 <lfs_fromle32>
 8004b82:	4602      	mov	r2, r0
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	605a      	str	r2, [r3, #4]
}
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff f99b 	bl	8003ed8 <lfs_tole32>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7ff f993 	bl	8003ed8 <lfs_tole32>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	605a      	str	r2, [r3, #4]
}
 8004bb8:	bf00      	nop
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff f978 	bl	8003ec2 <lfs_fromle32>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7ff f970 	bl	8003ec2 <lfs_fromle32>
 8004be2:	4602      	mov	r2, r0
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff f968 	bl	8003ec2 <lfs_fromle32>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff f960 	bl	8003ec2 <lfs_fromle32>
 8004c02:	4602      	mov	r2, r0
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff f958 	bl	8003ec2 <lfs_fromle32>
 8004c12:	4602      	mov	r2, r0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff f950 	bl	8003ec2 <lfs_fromle32>
 8004c22:	4602      	mov	r2, r0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	615a      	str	r2, [r3, #20]
}
 8004c28:	bf00      	nop
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff f94b 	bl	8003ed8 <lfs_tole32>
 8004c42:	4602      	mov	r2, r0
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff f943 	bl	8003ed8 <lfs_tole32>
 8004c52:	4602      	mov	r2, r0
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff f93b 	bl	8003ed8 <lfs_tole32>
 8004c62:	4602      	mov	r2, r0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff f933 	bl	8003ed8 <lfs_tole32>
 8004c72:	4602      	mov	r2, r0
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff f92b 	bl	8003ed8 <lfs_tole32>
 8004c82:	4602      	mov	r2, r0
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff f923 	bl	8003ed8 <lfs_tole32>
 8004c92:	4602      	mov	r2, r0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	615a      	str	r2, [r3, #20]
}
 8004c98:	bf00      	nop
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8004caa:	1d3b      	adds	r3, r7, #4
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	e009      	b.n	8004cc4 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d101      	bne.n	8004cbe <lfs_mlist_isopen+0x1e>
            return true;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e007      	b.n	8004cce <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f1      	bne.n	8004cb0 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8004cda:	b480      	push	{r7}
 8004cdc:	b085      	sub	sp, #20
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3328      	adds	r3, #40	@ 0x28
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	e00d      	b.n	8004d08 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d105      	bne.n	8004d02 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	601a      	str	r2, [r3, #0]
            break;
 8004d00:	e007      	b.n	8004d12 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1ed      	bne.n	8004cec <lfs_mlist_remove+0x12>
        }
    }
}
 8004d10:	bf00      	nop
 8004d12:	bf00      	nop
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
	...

08004d44 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 8004d4c:	4b03      	ldr	r3, [pc, #12]	@ (8004d5c <lfs_fs_disk_version+0x18>)
    }
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	00020001 	.word	0x00020001

08004d60 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff ffeb 	bl	8004d44 <lfs_fs_disk_version>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	b29b      	uxth	r3, r3

}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff ffdd 	bl	8004d44 <lfs_fs_disk_version>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	b29b      	uxth	r3, r3
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->lookahead.next = 0;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7ff ffe5 	bl	8004d96 <lfs_alloc_ckpoint>
}
 8004dcc:	bf00      	nop
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dee:	4413      	add	r3, r2
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 8004df4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004df8:	fb01 f202 	mul.w	r2, r1, r2
 8004dfc:	1a9b      	subs	r3, r3, r2
 8004dfe:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d212      	bcs.n	8004e30 <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	08db      	lsrs	r3, r3, #3
 8004e12:	441a      	add	r2, r3
 8004e14:	7811      	ldrb	r1, [r2, #0]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	f002 0207 	and.w	r2, r2, #7
 8004e1c:	2001      	movs	r0, #1
 8004e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8004e28:	4403      	add	r3, r0
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e50:	4413      	add	r3, r2
            % lfs->block_count;
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004e56:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e5a:	fb01 f202 	mul.w	r2, r1, r2
 8004e5e:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs->lookahead.next = 0;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    lfs->lookahead.size = lfs_min(
 8004e70:	00da      	lsls	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e76:	4619      	mov	r1, r3
 8004e78:	4610      	mov	r0, r2
 8004e7a:	f7fe ffb2 	bl	8003de2 <lfs_min>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	659a      	str	r2, [r3, #88]	@ 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8e:	461a      	mov	r2, r3
 8004e90:	2100      	movs	r1, #0
 8004e92:	f007 fb03 	bl	800c49c <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 8004e96:	2301      	movs	r3, #1
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	4909      	ldr	r1, [pc, #36]	@ (8004ec0 <lfs_alloc_scan+0x80>)
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f004 ff07 	bl	8009cb0 <lfs_fs_traverse_>
 8004ea2:	60f8      	str	r0, [r7, #12]
    if (err) {
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d004      	beq.n	8004eb4 <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff ff81 	bl	8004db2 <lfs_alloc_drop>
        return err;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	e000      	b.n	8004eb6 <lfs_alloc_scan+0x76>
    }

    return 0;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	08004dd5 	.word	0x08004dd5

08004ec4 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 8004ece:	e04d      	b.n	8004f6c <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed8:	08db      	lsrs	r3, r3, #3
 8004eda:	4413      	add	r3, r2
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee4:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8004ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d131      	bne.n	8004f58 <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004efc:	4413      	add	r3, r2
                        % lfs->block_count;
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004f02:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f06:	fb01 f202 	mul.w	r2, r1, r2
 8004f0a:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f1e:	1e5a      	subs	r2, r3, #1
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	661a      	str	r2, [r3, #96]	@ 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d211      	bcs.n	8004f54 <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f38:	08db      	lsrs	r3, r3, #3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f44:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8004f48:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1dd      	bne.n	8004f10 <lfs_alloc+0x4c>
                        return 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e032      	b.n	8004fbe <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f66:	1e5a      	subs	r2, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	661a      	str	r2, [r3, #96]	@ 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d3ab      	bcc.n	8004ed0 <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d116      	bne.n	8004fae <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f88:	4413      	add	r3, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004f8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f92:	fb01 f202 	mul.w	r2, r1, r2
 8004f96:	1a9b      	subs	r3, r3, r2
 8004f98:	4a0b      	ldr	r2, [pc, #44]	@ (8004fc8 <lfs_alloc+0x104>)
 8004f9a:	9200      	str	r2, [sp, #0]
 8004f9c:	f240 22b1 	movw	r2, #689	@ 0x2b1
 8004fa0:	490a      	ldr	r1, [pc, #40]	@ (8004fcc <lfs_alloc+0x108>)
 8004fa2:	480b      	ldr	r0, [pc, #44]	@ (8004fd0 <lfs_alloc+0x10c>)
 8004fa4:	f007 fa58 	bl	800c458 <iprintf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 8004fa8:	f06f 031b 	mvn.w	r3, #27
 8004fac:	e007      	b.n	8004fbe <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff ff46 	bl	8004e40 <lfs_alloc_scan>
 8004fb4:	60f8      	str	r0, [r7, #12]
        if(err) {
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d088      	beq.n	8004ece <lfs_alloc+0xa>
            return err;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	0800e148 	.word	0x0800e148
 8004fcc:	0800e038 	.word	0x0800e038
 8004fd0:	0800e11c 	.word	0x0800e11c

08004fd4 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8004fd4:	b590      	push	{r4, r7, lr}
 8004fd6:	b08f      	sub	sp, #60	@ 0x3c
 8004fd8:	af04      	add	r7, sp, #16
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	333c      	adds	r3, #60	@ 0x3c
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff fd20 	bl	8004a40 <lfs_gstate_hasmovehere>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80ca 	beq.w	800519c <lfs_dir_getslice+0x1c8>
            lfs_tag_id(gmask) != 0) {
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff fc5d 	bl	80048c8 <lfs_tag_id>
 800500e:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 80c3 	beq.w	800519c <lfs_dir_getslice+0x1c8>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff fc54 	bl	80048c8 <lfs_tag_id>
 8005020:	4603      	mov	r3, r0
 8005022:	461c      	mov	r4, r3
 8005024:	6838      	ldr	r0, [r7, #0]
 8005026:	f7ff fc4f 	bl	80048c8 <lfs_tag_id>
 800502a:	4603      	mov	r3, r0
 800502c:	429c      	cmp	r4, r3
 800502e:	d102      	bne.n	8005036 <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 8005030:	f06f 0301 	mvn.w	r3, #1
 8005034:	e0be      	b.n	80051b4 <lfs_dir_getslice+0x1e0>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff fc44 	bl	80048c8 <lfs_tag_id>
 8005040:	4603      	mov	r3, r0
 8005042:	461c      	mov	r4, r3
 8005044:	6838      	ldr	r0, [r7, #0]
 8005046:	f7ff fc3f 	bl	80048c8 <lfs_tag_id>
 800504a:	4603      	mov	r3, r0
 800504c:	429c      	cmp	r4, r3
 800504e:	f080 80a5 	bcs.w	800519c <lfs_dir_getslice+0x1c8>
            gdiff -= LFS_MKTAG(0, 1, 0);
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8005058:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800505a:	e09f      	b.n	800519c <lfs_dir_getslice+0x1c8>
        off -= lfs_tag_dsize(ntag);
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff fc4f 	bl	8004902 <lfs_tag_dsize>
 8005064:	4602      	mov	r2, r0
 8005066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005068:	1a9b      	subs	r3, r3, r2
 800506a:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8005070:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 8005076:	2204      	movs	r2, #4
 8005078:	9203      	str	r2, [sp, #12]
 800507a:	f107 0210 	add.w	r2, r7, #16
 800507e:	9202      	str	r2, [sp, #8]
 8005080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005082:	9201      	str	r2, [sp, #4]
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	2304      	movs	r3, #4
 8005088:	460a      	mov	r2, r1
 800508a:	2100      	movs	r1, #0
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f7fe ff83 	bl	8003f98 <lfs_bd_read>
 8005092:	61b8      	str	r0, [r7, #24]
        if (err) {
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <lfs_dir_getslice+0xca>
            return err;
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	e08a      	b.n	80051b4 <lfs_dir_getslice+0x1e0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7fe ff25 	bl	8003ef0 <lfs_frombe32>
 80050a6:	4602      	mov	r2, r0
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	4053      	eors	r3, r2
 80050ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80050b0:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff fc08 	bl	80048c8 <lfs_tag_id>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d02b      	beq.n	8005116 <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80050be:	69f8      	ldr	r0, [r7, #28]
 80050c0:	f7ff fbb8 	bl	8004834 <lfs_tag_type1>
 80050c4:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 80050c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ca:	d124      	bne.n	8005116 <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 80050cc:	69f8      	ldr	r0, [r7, #28]
 80050ce:	f7ff fbfb 	bl	80048c8 <lfs_tag_id>
 80050d2:	4603      	mov	r3, r0
 80050d4:	461c      	mov	r4, r3
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	4618      	mov	r0, r3
 80050de:	f7ff fbf3 	bl	80048c8 <lfs_tag_id>
 80050e2:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80050e4:	429c      	cmp	r4, r3
 80050e6:	d816      	bhi.n	8005116 <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	1ad2      	subs	r2, r2, r3
 80050ee:	4b33      	ldr	r3, [pc, #204]	@ (80051bc <lfs_dir_getslice+0x1e8>)
 80050f0:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 80050f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d102      	bne.n	8005106 <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 8005100:	f06f 0301 	mvn.w	r3, #1
 8005104:	e056      	b.n	80051b4 <lfs_dir_getslice+0x1e0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8005106:	69f8      	ldr	r0, [r7, #28]
 8005108:	f7ff fbd1 	bl	80048ae <lfs_tag_splice>
 800510c:	4603      	mov	r3, r0
 800510e:	029a      	lsls	r2, r3, #10
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	4413      	add	r3, r2
 8005114:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	401a      	ands	r2, r3
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	6839      	ldr	r1, [r7, #0]
 8005120:	1ac9      	subs	r1, r1, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	400b      	ands	r3, r1
 8005126:	429a      	cmp	r2, r3
 8005128:	d138      	bne.n	800519c <lfs_dir_getslice+0x1c8>
            if (lfs_tag_isdelete(tag)) {
 800512a:	69f8      	ldr	r0, [r7, #28]
 800512c:	f7ff fb6f 	bl	800480e <lfs_tag_isdelete>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d002      	beq.n	800513c <lfs_dir_getslice+0x168>
                return LFS_ERR_NOENT;
 8005136:	f06f 0301 	mvn.w	r3, #1
 800513a:	e03b      	b.n	80051b4 <lfs_dir_getslice+0x1e0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800513c:	69f8      	ldr	r0, [r7, #28]
 800513e:	f7ff fbd3 	bl	80048e8 <lfs_tag_size>
 8005142:	4603      	mov	r3, r0
 8005144:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005146:	4618      	mov	r0, r3
 8005148:	f7fe fe4b 	bl	8003de2 <lfs_min>
 800514c:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 800514e:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005156:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005158:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 800515a:	3204      	adds	r2, #4
 800515c:	6979      	ldr	r1, [r7, #20]
 800515e:	9103      	str	r1, [sp, #12]
 8005160:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005162:	9102      	str	r1, [sp, #8]
 8005164:	9201      	str	r2, [sp, #4]
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	4602      	mov	r2, r0
 800516c:	2100      	movs	r1, #0
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f7fe ff12 	bl	8003f98 <lfs_bd_read>
 8005174:	61b8      	str	r0, [r7, #24]
            if (err) {
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <lfs_dir_getslice+0x1ac>
                return err;
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	e019      	b.n	80051b4 <lfs_dir_getslice+0x1e0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8005180:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	18d0      	adds	r0, r2, r3
 8005186:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	461a      	mov	r2, r3
 800518e:	2100      	movs	r1, #0
 8005190:	f007 f984 	bl	800c49c <memset>

            return tag + gdiff;
 8005194:	6a3a      	ldr	r2, [r7, #32]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	4413      	add	r3, r2
 800519a:	e00b      	b.n	80051b4 <lfs_dir_getslice+0x1e0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff fbaf 	bl	8004902 <lfs_tag_dsize>
 80051a4:	4603      	mov	r3, r0
 80051a6:	3304      	adds	r3, #4
 80051a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051aa:	429a      	cmp	r2, r3
 80051ac:	f4bf af56 	bcs.w	800505c <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 80051b0:	f06f 0301 	mvn.w	r3, #1
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	372c      	adds	r7, #44	@ 0x2c
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd90      	pop	{r4, r7, pc}
 80051bc:	000ffc00 	.word	0x000ffc00

080051c0 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af04      	add	r7, sp, #16
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 80051ce:	6838      	ldr	r0, [r7, #0]
 80051d0:	f7ff fb8a 	bl	80048e8 <lfs_tag_size>
 80051d4:	4603      	mov	r3, r0
 80051d6:	9302      	str	r3, [sp, #8]
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	2300      	movs	r3, #0
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	68b9      	ldr	r1, [r7, #8]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f7ff fef4 	bl	8004fd4 <lfs_dir_getslice>
 80051ec:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b08c      	sub	sp, #48	@ 0x30
 80051fa:	af04      	add	r7, sp, #16
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	607a      	str	r2, [r7, #4]
 8005202:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8005204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005206:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8005208:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800520a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800520c:	441a      	add	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	429a      	cmp	r2, r3
 8005216:	f240 80c0 	bls.w	800539a <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800521a:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800521e:	e0c1      	b.n	80053a4 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8005220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005222:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d03f      	beq.n	80052aa <lfs_dir_getread+0xb4>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f113 0f02 	cmn.w	r3, #2
 8005232:	d13a      	bne.n	80052aa <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800523e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005240:	429a      	cmp	r2, r3
 8005242:	d232      	bcs.n	80052aa <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800524a:	429a      	cmp	r2, r3
 800524c:	d324      	bcc.n	8005298 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6859      	ldr	r1, [r3, #4]
 8005256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005258:	1acb      	subs	r3, r1, r3
 800525a:	4413      	add	r3, r2
 800525c:	4619      	mov	r1, r3
 800525e:	69b8      	ldr	r0, [r7, #24]
 8005260:	f7fe fdbf 	bl	8003de2 <lfs_min>
 8005264:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005270:	1acb      	subs	r3, r1, r3
 8005272:	4413      	add	r3, r2
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	4619      	mov	r1, r3
 8005278:	69f8      	ldr	r0, [r7, #28]
 800527a:	f007 f9db 	bl	800c634 <memcpy>

                data += diff;
 800527e:	69fa      	ldr	r2, [r7, #28]
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	4413      	add	r3, r2
 8005284:	61fb      	str	r3, [r7, #28]
                off += diff;
 8005286:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	4413      	add	r3, r2
 800528c:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800528e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8005296:	e080      	b.n	800539a <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	4619      	mov	r1, r3
 80052a2:	69b8      	ldr	r0, [r7, #24]
 80052a4:	f7fe fd9d 	bl	8003de2 <lfs_min>
 80052a8:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f113 0f02 	cmn.w	r3, #2
 80052b2:	d13a      	bne.n	800532a <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 80052be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d232      	bcs.n	800532a <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d324      	bcc.n	8005318 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	6859      	ldr	r1, [r3, #4]
 80052d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d8:	1acb      	subs	r3, r1, r3
 80052da:	4413      	add	r3, r2
 80052dc:	4619      	mov	r1, r3
 80052de:	69b8      	ldr	r0, [r7, #24]
 80052e0:	f7fe fd7f 	bl	8003de2 <lfs_min>
 80052e4:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80052f0:	1acb      	subs	r3, r1, r3
 80052f2:	4413      	add	r3, r2
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	4619      	mov	r1, r3
 80052f8:	69f8      	ldr	r0, [r7, #28]
 80052fa:	f007 f99b 	bl	800c634 <memcpy>

                data += diff;
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	4413      	add	r3, r2
 8005304:	61fb      	str	r3, [r7, #28]
                off += diff;
 8005306:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	4413      	add	r3, r2
 800530c:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800530e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8005316:	e040      	b.n	800539a <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	4619      	mov	r1, r3
 8005322:	69b8      	ldr	r0, [r7, #24]
 8005324:	f7fe fd5d 	bl	8003de2 <lfs_min>
 8005328:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	f06f 0201 	mvn.w	r2, #1
 8005330:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	4619      	mov	r1, r3
 800533a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800533c:	f7fe fd61 	bl	8003e02 <lfs_aligndown>
 8005340:	4602      	mov	r2, r0
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8005346:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534a:	441a      	add	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	4619      	mov	r1, r3
 8005354:	4610      	mov	r0, r2
 8005356:	f7fe fd69 	bl	8003e2c <lfs_alignup>
 800535a:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8005362:	4619      	mov	r1, r3
 8005364:	4610      	mov	r0, r2
 8005366:	f7fe fd3c 	bl	8003de2 <lfs_min>
 800536a:	4602      	mov	r2, r0
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8005378:	6839      	ldr	r1, [r7, #0]
 800537a:	6889      	ldr	r1, [r1, #8]
 800537c:	9102      	str	r1, [sp, #8]
 800537e:	9201      	str	r2, [sp, #4]
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005384:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f7ff fe23 	bl	8004fd4 <lfs_dir_getslice>
 800538e:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2b00      	cmp	r3, #0
 8005394:	da01      	bge.n	800539a <lfs_dir_getread+0x1a4>
            return err;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	e004      	b.n	80053a4 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 800539a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800539c:	2b00      	cmp	r3, #0
 800539e:	f47f af3f 	bne.w	8005220 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3720      	adds	r7, #32
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 80053ac:	b590      	push	{r4, r7, lr}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <lfs_dir_traverse_filter+0x1e>
 80053c6:	4b24      	ldr	r3, [pc, #144]	@ (8005458 <lfs_dir_traverse_filter+0xac>)
 80053c8:	e000      	b.n	80053cc <lfs_dir_traverse_filter+0x20>
 80053ca:	4b24      	ldr	r3, [pc, #144]	@ (800545c <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 80053cc:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	405a      	eors	r2, r3
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	4013      	ands	r3, r2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d014      	beq.n	8005408 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff fa13 	bl	800480e <lfs_tag_isdelete>
 80053e8:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10c      	bne.n	8005408 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	4a19      	ldr	r2, [pc, #100]	@ (8005458 <lfs_dir_traverse_filter+0xac>)
 80053f2:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	6819      	ldr	r1, [r3, #0]
 80053f8:	4b19      	ldr	r3, [pc, #100]	@ (8005460 <lfs_dir_traverse_filter+0xb4>)
 80053fa:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80053fc:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8005400:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8005404:	429a      	cmp	r2, r3
 8005406:	d104      	bne.n	8005412 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]
        return true;
 800540e:	2301      	movs	r3, #1
 8005410:	e01e      	b.n	8005450 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8005412:	68b8      	ldr	r0, [r7, #8]
 8005414:	f7ff fa0e 	bl	8004834 <lfs_tag_type1>
 8005418:	4603      	mov	r3, r0
 800541a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800541e:	d116      	bne.n	800544e <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8005420:	68b8      	ldr	r0, [r7, #8]
 8005422:	f7ff fa51 	bl	80048c8 <lfs_tag_id>
 8005426:	4603      	mov	r3, r0
 8005428:	461c      	mov	r4, r3
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f7ff fa4a 	bl	80048c8 <lfs_tag_id>
 8005434:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8005436:	429c      	cmp	r4, r3
 8005438:	d809      	bhi.n	800544e <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800543a:	68b8      	ldr	r0, [r7, #8]
 800543c:	f7ff fa37 	bl	80048ae <lfs_tag_splice>
 8005440:	4603      	mov	r3, r0
 8005442:	029a      	lsls	r2, r3, #10
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	441a      	add	r2, r3
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	601a      	str	r2, [r3, #0]
    }

    return false;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	bd90      	pop	{r4, r7, pc}
 8005458:	7ffffc00 	.word	0x7ffffc00
 800545c:	700ffc00 	.word	0x700ffc00
 8005460:	000ffc00 	.word	0x000ffc00

08005464 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8005464:	b590      	push	{r4, r7, lr}
 8005466:	b0c1      	sub	sp, #260	@ 0x104
 8005468:	af04      	add	r7, sp, #16
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8005472:	2300      	movs	r3, #0
 8005474:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 8005478:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8005482:	6838      	ldr	r0, [r7, #0]
 8005484:	f7ff fa3d 	bl	8004902 <lfs_tag_dsize>
 8005488:	4602      	mov	r2, r0
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	441a      	add	r2, r3
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	429a      	cmp	r2, r3
 8005494:	d237      	bcs.n	8005506 <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 8005496:	6838      	ldr	r0, [r7, #0]
 8005498:	f7ff fa33 	bl	8004902 <lfs_tag_dsize>
 800549c:	4602      	mov	r2, r0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4413      	add	r3, r2
 80054a2:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 80054a4:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 80054aa:	2204      	movs	r2, #4
 80054ac:	9203      	str	r2, [sp, #12]
 80054ae:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80054b2:	9202      	str	r2, [sp, #8]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	9201      	str	r2, [sp, #4]
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	2304      	movs	r3, #4
 80054bc:	460a      	mov	r2, r1
 80054be:	2100      	movs	r1, #0
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f7fe fd69 	bl	8003f98 <lfs_bd_read>
 80054c6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 80054ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <lfs_dir_traverse+0x74>
                    return err;
 80054d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054d6:	e3a5      	b.n	8005c24 <lfs_dir_traverse+0x7c0>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 80054d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fe fd08 	bl	8003ef0 <lfs_frombe32>
 80054e0:	4602      	mov	r2, r0
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	4053      	eors	r3, r2
 80054e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054ea:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3304      	adds	r3, #4
 80054f6:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 80054f8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80054fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 8005500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005502:	603b      	str	r3, [r7, #0]
 8005504:	e01b      	b.n	800553e <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 8005506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800550a:	2b00      	cmp	r3, #0
 800550c:	dd13      	ble.n	8005536 <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 800550e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 8005516:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 8005520:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005524:	3308      	adds	r3, #8
 8005526:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 800552a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800552e:	3b01      	subs	r3, #1
 8005530:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005534:	e003      	b.n	800553e <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 800553c:	e2a1      	b.n	8005a82 <lfs_dir_traverse+0x61e>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800553e:	4b7e      	ldr	r3, [pc, #504]	@ (8005738 <lfs_dir_traverse+0x2d4>)
 8005540:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8005544:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005546:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800554a:	405a      	eors	r2, r3
 800554c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8005550:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005554:	400b      	ands	r3, r1
 8005556:	4013      	ands	r3, r2
 8005558:	2b00      	cmp	r3, #0
 800555a:	f040 8284 	bne.w	8005a66 <lfs_dir_traverse+0x602>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 800555e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8005562:	f7ff f9b1 	bl	80048c8 <lfs_tag_id>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 80ef 	beq.w	800574c <lfs_dir_traverse+0x2e8>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 800556e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005572:	2b02      	cmp	r3, #2
 8005574:	d906      	bls.n	8005584 <lfs_dir_traverse+0x120>
 8005576:	4b71      	ldr	r3, [pc, #452]	@ (800573c <lfs_dir_traverse+0x2d8>)
 8005578:	4a71      	ldr	r2, [pc, #452]	@ (8005740 <lfs_dir_traverse+0x2dc>)
 800557a:	f240 31b6 	movw	r1, #950	@ 0x3b6
 800557e:	4871      	ldr	r0, [pc, #452]	@ (8005744 <lfs_dir_traverse+0x2e0>)
 8005580:	f006 fd14 	bl	800bfac <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8005584:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005586:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800558a:	4613      	mov	r3, r2
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	1a9b      	subs	r3, r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	33f0      	adds	r3, #240	@ 0xf0
 8005594:	443b      	add	r3, r7
 8005596:	3b98      	subs	r3, #152	@ 0x98
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80055a0:	4613      	mov	r3, r2
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	1a9b      	subs	r3, r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	33f0      	adds	r3, #240	@ 0xf0
 80055aa:	443b      	add	r3, r7
 80055ac:	3b94      	subs	r3, #148	@ 0x94
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80055b6:	4613      	mov	r3, r2
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	1a9b      	subs	r3, r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	33f0      	adds	r3, #240	@ 0xf0
 80055c0:	443b      	add	r3, r7
 80055c2:	3b90      	subs	r3, #144	@ 0x90
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80055cc:	4613      	mov	r3, r2
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	1a9b      	subs	r3, r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	33f0      	adds	r3, #240	@ 0xf0
 80055d6:	443b      	add	r3, r7
 80055d8:	3b8c      	subs	r3, #140	@ 0x8c
 80055da:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80055e4:	4613      	mov	r3, r2
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	1a9b      	subs	r3, r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	33f0      	adds	r3, #240	@ 0xf0
 80055ee:	443b      	add	r3, r7
 80055f0:	3b88      	subs	r3, #136	@ 0x88
 80055f2:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80055fc:	4613      	mov	r3, r2
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	1a9b      	subs	r3, r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	33f0      	adds	r3, #240	@ 0xf0
 8005606:	443b      	add	r3, r7
 8005608:	3b84      	subs	r3, #132	@ 0x84
 800560a:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005614:	4613      	mov	r3, r2
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	1a9b      	subs	r3, r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	33f0      	adds	r3, #240	@ 0xf0
 800561e:	443b      	add	r3, r7
 8005620:	3b80      	subs	r3, #128	@ 0x80
 8005622:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800562c:	4613      	mov	r3, r2
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	1a9b      	subs	r3, r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	33f0      	adds	r3, #240	@ 0xf0
 8005636:	443b      	add	r3, r7
 8005638:	3b7c      	subs	r3, #124	@ 0x7c
 800563a:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800563e:	801a      	strh	r2, [r3, #0]
 8005640:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005644:	4613      	mov	r3, r2
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	1a9b      	subs	r3, r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	33f0      	adds	r3, #240	@ 0xf0
 800564e:	443b      	add	r3, r7
 8005650:	3b7a      	subs	r3, #122	@ 0x7a
 8005652:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 8005656:	801a      	strh	r2, [r3, #0]
 8005658:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800565c:	4613      	mov	r3, r2
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	33f0      	adds	r3, #240	@ 0xf0
 8005666:	443b      	add	r3, r7
 8005668:	3b78      	subs	r3, #120	@ 0x78
 800566a:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800566e:	801a      	strh	r2, [r3, #0]
 8005670:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005674:	4613      	mov	r3, r2
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	1a9b      	subs	r3, r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	33f0      	adds	r3, #240	@ 0xf0
 800567e:	443b      	add	r3, r7
 8005680:	3b74      	subs	r3, #116	@ 0x74
 8005682:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800568c:	4613      	mov	r3, r2
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	1a9b      	subs	r3, r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	33f0      	adds	r3, #240	@ 0xf0
 8005696:	443b      	add	r3, r7
 8005698:	3b70      	subs	r3, #112	@ 0x70
 800569a:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80056a4:	4613      	mov	r3, r2
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	1a9b      	subs	r3, r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	33f0      	adds	r3, #240	@ 0xf0
 80056ae:	443b      	add	r3, r7
 80056b0:	3b6c      	subs	r3, #108	@ 0x6c
 80056b2:	6019      	str	r1, [r3, #0]
 80056b4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80056b8:	4613      	mov	r3, r2
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	1a9b      	subs	r3, r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	33f0      	adds	r3, #240	@ 0xf0
 80056c2:	443b      	add	r3, r7
 80056c4:	3b68      	subs	r3, #104	@ 0x68
 80056c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80056d0:	4613      	mov	r3, r2
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	1a9b      	subs	r3, r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	33f0      	adds	r3, #240	@ 0xf0
 80056da:	443b      	add	r3, r7
 80056dc:	3b68      	subs	r3, #104	@ 0x68
 80056de:	3304      	adds	r3, #4
 80056e0:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80056e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056e8:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 80056ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80056f0:	3301      	adds	r3, #1
 80056f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 80056f6:	2300      	movs	r3, #0
 80056f8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 8005708:	2300      	movs	r3, #0
 800570a:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 800570e:	2300      	movs	r3, #0
 8005710:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 8005714:	4b0c      	ldr	r3, [pc, #48]	@ (8005748 <lfs_dir_traverse+0x2e4>)
 8005716:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 800571a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800571e:	1e5a      	subs	r2, r3, #1
 8005720:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8005724:	4613      	mov	r3, r2
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	1a9b      	subs	r3, r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	3328      	adds	r3, #40	@ 0x28
 800572e:	440b      	add	r3, r1
 8005730:	3304      	adds	r3, #4
 8005732:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 8005736:	e19d      	b.n	8005a74 <lfs_dir_traverse+0x610>
 8005738:	7ff00000 	.word	0x7ff00000
 800573c:	0800e14c 	.word	0x0800e14c
 8005740:	0800edec 	.word	0x0800edec
 8005744:	0800e038 	.word	0x0800e038
 8005748:	080053ad 	.word	0x080053ad
            }
        }

popped:
 800574c:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800574e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8005752:	f7ff f8b9 	bl	80048c8 <lfs_tag_id>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d015      	beq.n	8005788 <lfs_dir_traverse+0x324>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800575c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff f8b2 	bl	80048c8 <lfs_tag_id>
 8005764:	4603      	mov	r3, r0
 8005766:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8005768:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 800576c:	4293      	cmp	r3, r2
 800576e:	f200 817c 	bhi.w	8005a6a <lfs_dir_traverse+0x606>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8005772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff f8a7 	bl	80048c8 <lfs_tag_id>
 800577a:	4603      	mov	r3, r0
 800577c:	461a      	mov	r2, r3
 800577e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 8005782:	4293      	cmp	r3, r2
 8005784:	f240 8171 	bls.w	8005a6a <lfs_dir_traverse+0x606>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8005788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff f872 	bl	8004874 <lfs_tag_type3>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	f43f ae75 	beq.w	8005482 <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8005798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff f86a 	bl	8004874 <lfs_tag_type3>
 80057a0:	4603      	mov	r3, r0
 80057a2:	461a      	mov	r2, r3
 80057a4:	f240 1301 	movw	r3, #257	@ 0x101
 80057a8:	429a      	cmp	r2, r3
 80057aa:	f040 80e0 	bne.w	800596e <lfs_dir_traverse+0x50a>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 80057ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057b2:	4ab1      	ldr	r2, [pc, #708]	@ (8005a78 <lfs_dir_traverse+0x614>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	f000 815a 	beq.w	8005a6e <lfs_dir_traverse+0x60a>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 80057ba:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80057be:	4613      	mov	r3, r2
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	1a9b      	subs	r3, r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	33f0      	adds	r3, #240	@ 0xf0
 80057c8:	443b      	add	r3, r7
 80057ca:	3b98      	subs	r3, #152	@ 0x98
 80057cc:	4618      	mov	r0, r3
 80057ce:	233c      	movs	r3, #60	@ 0x3c
 80057d0:	461a      	mov	r2, r3
 80057d2:	2100      	movs	r1, #0
 80057d4:	f006 fe62 	bl	800c49c <memset>
 80057d8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80057dc:	4613      	mov	r3, r2
 80057de:	011b      	lsls	r3, r3, #4
 80057e0:	1a9b      	subs	r3, r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	33f0      	adds	r3, #240	@ 0xf0
 80057e6:	443b      	add	r3, r7
 80057e8:	3b98      	subs	r3, #152	@ 0x98
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80057f2:	4613      	mov	r3, r2
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	1a9b      	subs	r3, r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	33f0      	adds	r3, #240	@ 0xf0
 80057fc:	443b      	add	r3, r7
 80057fe:	3b94      	subs	r3, #148	@ 0x94
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005808:	4613      	mov	r3, r2
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	1a9b      	subs	r3, r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	33f0      	adds	r3, #240	@ 0xf0
 8005812:	443b      	add	r3, r7
 8005814:	3b90      	subs	r3, #144	@ 0x90
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800581e:	4613      	mov	r3, r2
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	33f0      	adds	r3, #240	@ 0xf0
 8005828:	443b      	add	r3, r7
 800582a:	3b8c      	subs	r3, #140	@ 0x8c
 800582c:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005836:	4613      	mov	r3, r2
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	1a9b      	subs	r3, r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	33f0      	adds	r3, #240	@ 0xf0
 8005840:	443b      	add	r3, r7
 8005842:	3b88      	subs	r3, #136	@ 0x88
 8005844:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800584e:	4613      	mov	r3, r2
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	1a9b      	subs	r3, r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	33f0      	adds	r3, #240	@ 0xf0
 8005858:	443b      	add	r3, r7
 800585a:	3b84      	subs	r3, #132	@ 0x84
 800585c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005866:	4613      	mov	r3, r2
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	1a9b      	subs	r3, r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	33f0      	adds	r3, #240	@ 0xf0
 8005870:	443b      	add	r3, r7
 8005872:	3b80      	subs	r3, #128	@ 0x80
 8005874:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800587e:	4613      	mov	r3, r2
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	1a9b      	subs	r3, r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	33f0      	adds	r3, #240	@ 0xf0
 8005888:	443b      	add	r3, r7
 800588a:	3b7c      	subs	r3, #124	@ 0x7c
 800588c:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 8005890:	801a      	strh	r2, [r3, #0]
 8005892:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005896:	4613      	mov	r3, r2
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	1a9b      	subs	r3, r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	33f0      	adds	r3, #240	@ 0xf0
 80058a0:	443b      	add	r3, r7
 80058a2:	3b7a      	subs	r3, #122	@ 0x7a
 80058a4:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 80058a8:	801a      	strh	r2, [r3, #0]
 80058aa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80058ae:	4613      	mov	r3, r2
 80058b0:	011b      	lsls	r3, r3, #4
 80058b2:	1a9b      	subs	r3, r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	33f0      	adds	r3, #240	@ 0xf0
 80058b8:	443b      	add	r3, r7
 80058ba:	3b78      	subs	r3, #120	@ 0x78
 80058bc:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 80058c0:	801a      	strh	r2, [r3, #0]
 80058c2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80058c6:	4613      	mov	r3, r2
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	1a9b      	subs	r3, r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	33f0      	adds	r3, #240	@ 0xf0
 80058d0:	443b      	add	r3, r7
 80058d2:	3b74      	subs	r3, #116	@ 0x74
 80058d4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80058de:	4613      	mov	r3, r2
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	1a9b      	subs	r3, r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	33f0      	adds	r3, #240	@ 0xf0
 80058e8:	443b      	add	r3, r7
 80058ea:	3b70      	subs	r3, #112	@ 0x70
 80058ec:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80058f0:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80058f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80058f6:	3301      	adds	r3, #1
 80058f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 80058fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fe fff2 	bl	80048e8 <lfs_tag_size>
 8005904:	4603      	mov	r3, r0
 8005906:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 800590a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800590c:	4618      	mov	r0, r3
 800590e:	f7fe ffdb 	bl	80048c8 <lfs_tag_id>
 8005912:	4603      	mov	r3, r0
 8005914:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 8005918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800591c:	60bb      	str	r3, [r7, #8]
            off = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8005922:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005926:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8005928:	2300      	movs	r3, #0
 800592a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 800592e:	2300      	movs	r3, #0
 8005930:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8005934:	4b51      	ldr	r3, [pc, #324]	@ (8005a7c <lfs_dir_traverse+0x618>)
 8005936:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 800593a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800593e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 8005942:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8005946:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 800594a:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800594e:	3301      	adds	r3, #1
 8005950:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 8005954:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 8005958:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	b29a      	uxth	r2, r3
 8005960:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8005964:	4413      	add	r3, r2
 8005966:	b29b      	uxth	r3, r3
 8005968:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 800596c:	e589      	b.n	8005482 <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800596e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005970:	4618      	mov	r0, r3
 8005972:	f7fe ff7f 	bl	8004874 <lfs_tag_type3>
 8005976:	4603      	mov	r3, r0
 8005978:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800597c:	d159      	bne.n	8005a32 <lfs_dir_traverse+0x5ce>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800597e:	2300      	movs	r3, #0
 8005980:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005984:	e04b      	b.n	8005a1e <lfs_dir_traverse+0x5ba>
                const struct lfs_attr *a = buffer;
 8005986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800598a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800598e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005992:	4613      	mov	r3, r2
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	461a      	mov	r2, r3
 800599c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059a0:	4413      	add	r3, r2
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80059a8:	051c      	lsls	r4, r3, #20
 80059aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fe ff8b 	bl	80048c8 <lfs_tag_id>
 80059b2:	4603      	mov	r3, r0
 80059b4:	461a      	mov	r2, r3
 80059b6:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 80059ba:	4413      	add	r3, r2
 80059bc:	029b      	lsls	r3, r3, #10
 80059be:	ea44 0103 	orr.w	r1, r4, r3
 80059c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80059c6:	4613      	mov	r3, r2
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	461a      	mov	r2, r3
 80059d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059d4:	4413      	add	r3, r2
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80059da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80059de:	4613      	mov	r3, r2
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	4413      	add	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	461a      	mov	r2, r3
 80059e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059ec:	4413      	add	r3, r2
 80059ee:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80059f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059f4:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80059f8:	4798      	blx	r3
 80059fa:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 80059fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	da02      	bge.n	8005a0c <lfs_dir_traverse+0x5a8>
                    return res;
 8005a06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005a0a:	e10b      	b.n	8005c24 <lfs_dir_traverse+0x7c0>
                }

                if (res) {
 8005a0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d12e      	bne.n	8005a72 <lfs_dir_traverse+0x60e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8005a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a18:	3301      	adds	r3, #1
 8005a1a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fe ff61 	bl	80048e8 <lfs_tag_size>
 8005a26:	4602      	mov	r2, r0
 8005a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d3aa      	bcc.n	8005986 <lfs_dir_traverse+0x522>
 8005a30:	e527      	b.n	8005482 <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8005a32:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 8005a36:	029a      	lsls	r2, r3, #10
 8005a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a3a:	18d1      	adds	r1, r2, r3
 8005a3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a40:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005a44:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8005a48:	4798      	blx	r3
 8005a4a:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 8005a4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	da02      	bge.n	8005a5c <lfs_dir_traverse+0x5f8>
                return res;
 8005a56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005a5a:	e0e3      	b.n	8005c24 <lfs_dir_traverse+0x7c0>
            }

            if (res) {
 8005a5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10d      	bne.n	8005a80 <lfs_dir_traverse+0x61c>
 8005a64:	e50d      	b.n	8005482 <lfs_dir_traverse+0x1e>
                continue;
 8005a66:	bf00      	nop
 8005a68:	e50b      	b.n	8005482 <lfs_dir_traverse+0x1e>
            continue;
 8005a6a:	bf00      	nop
 8005a6c:	e509      	b.n	8005482 <lfs_dir_traverse+0x1e>
                continue;
 8005a6e:	bf00      	nop
 8005a70:	e507      	b.n	8005482 <lfs_dir_traverse+0x1e>
                    break;
 8005a72:	bf00      	nop
        {
 8005a74:	e505      	b.n	8005482 <lfs_dir_traverse+0x1e>
 8005a76:	bf00      	nop
 8005a78:	080053ad 	.word	0x080053ad
 8005a7c:	600ffc00 	.word	0x600ffc00
                break;
 8005a80:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 8005a82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 80ca 	beq.w	8005c20 <lfs_dir_traverse+0x7bc>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8005a8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a90:	1e5a      	subs	r2, r3, #1
 8005a92:	4613      	mov	r3, r2
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	1a9b      	subs	r3, r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	33f0      	adds	r3, #240	@ 0xf0
 8005a9c:	443b      	add	r3, r7
 8005a9e:	3b98      	subs	r3, #152	@ 0x98
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8005aa4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005aa8:	1e5a      	subs	r2, r3, #1
 8005aaa:	4613      	mov	r3, r2
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	1a9b      	subs	r3, r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	33f0      	adds	r3, #240	@ 0xf0
 8005ab4:	443b      	add	r3, r7
 8005ab6:	3b94      	subs	r3, #148	@ 0x94
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8005abc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ac0:	1e5a      	subs	r2, r3, #1
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	1a9b      	subs	r3, r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	33f0      	adds	r3, #240	@ 0xf0
 8005acc:	443b      	add	r3, r7
 8005ace:	3b90      	subs	r3, #144	@ 0x90
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8005ad4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ad8:	1e5a      	subs	r2, r3, #1
 8005ada:	4613      	mov	r3, r2
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	1a9b      	subs	r3, r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	33f0      	adds	r3, #240	@ 0xf0
 8005ae4:	443b      	add	r3, r7
 8005ae6:	3b8c      	subs	r3, #140	@ 0x8c
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 8005aee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005af2:	1e5a      	subs	r2, r3, #1
 8005af4:	4613      	mov	r3, r2
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	33f0      	adds	r3, #240	@ 0xf0
 8005afe:	443b      	add	r3, r7
 8005b00:	3b88      	subs	r3, #136	@ 0x88
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 8005b08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005b0c:	1e5a      	subs	r2, r3, #1
 8005b0e:	4613      	mov	r3, r2
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	1a9b      	subs	r3, r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	33f0      	adds	r3, #240	@ 0xf0
 8005b18:	443b      	add	r3, r7
 8005b1a:	3b84      	subs	r3, #132	@ 0x84
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 8005b22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005b26:	1e5a      	subs	r2, r3, #1
 8005b28:	4613      	mov	r3, r2
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	1a9b      	subs	r3, r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	33f0      	adds	r3, #240	@ 0xf0
 8005b32:	443b      	add	r3, r7
 8005b34:	3b80      	subs	r3, #128	@ 0x80
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 8005b3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005b40:	1e5a      	subs	r2, r3, #1
 8005b42:	4613      	mov	r3, r2
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	1a9b      	subs	r3, r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	33f0      	adds	r3, #240	@ 0xf0
 8005b4c:	443b      	add	r3, r7
 8005b4e:	3b7c      	subs	r3, #124	@ 0x7c
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 8005b56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005b5a:	1e5a      	subs	r2, r3, #1
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	1a9b      	subs	r3, r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	33f0      	adds	r3, #240	@ 0xf0
 8005b66:	443b      	add	r3, r7
 8005b68:	3b7a      	subs	r3, #122	@ 0x7a
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 8005b70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005b74:	1e5a      	subs	r2, r3, #1
 8005b76:	4613      	mov	r3, r2
 8005b78:	011b      	lsls	r3, r3, #4
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	33f0      	adds	r3, #240	@ 0xf0
 8005b80:	443b      	add	r3, r7
 8005b82:	3b78      	subs	r3, #120	@ 0x78
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 8005b8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005b8e:	1e5a      	subs	r2, r3, #1
 8005b90:	4613      	mov	r3, r2
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	1a9b      	subs	r3, r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	33f0      	adds	r3, #240	@ 0xf0
 8005b9a:	443b      	add	r3, r7
 8005b9c:	3b74      	subs	r3, #116	@ 0x74
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 8005ba4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ba8:	1e5a      	subs	r2, r3, #1
 8005baa:	4613      	mov	r3, r2
 8005bac:	011b      	lsls	r3, r3, #4
 8005bae:	1a9b      	subs	r3, r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	33f0      	adds	r3, #240	@ 0xf0
 8005bb4:	443b      	add	r3, r7
 8005bb6:	3b70      	subs	r3, #112	@ 0x70
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 8005bbe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005bc2:	1e5a      	subs	r2, r3, #1
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	1a9b      	subs	r3, r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	33f0      	adds	r3, #240	@ 0xf0
 8005bce:	443b      	add	r3, r7
 8005bd0:	3b6c      	subs	r3, #108	@ 0x6c
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 8005bd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005bda:	1e5a      	subs	r2, r3, #1
 8005bdc:	4613      	mov	r3, r2
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	1a9b      	subs	r3, r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	33f0      	adds	r3, #240	@ 0xf0
 8005be6:	443b      	add	r3, r7
 8005be8:	3b68      	subs	r3, #104	@ 0x68
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 8005bf0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005bf4:	1e5a      	subs	r2, r3, #1
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	011b      	lsls	r3, r3, #4
 8005bfa:	1a9b      	subs	r3, r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	33f0      	adds	r3, #240	@ 0xf0
 8005c00:	443b      	add	r3, r7
 8005c02:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 8005c06:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005c0a:	3204      	adds	r2, #4
 8005c0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c10:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8005c14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 8005c1e:	e596      	b.n	800574e <lfs_dir_traverse+0x2ea>
    } else {
        return res;
 8005c20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	37f4      	adds	r7, #244	@ 0xf4
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd90      	pop	{r4, r7, pc}

08005c2c <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8005c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c2e:	b0a5      	sub	sp, #148	@ 0x94
 8005c30:	af04      	add	r7, sp, #16
 8005c32:	6178      	str	r0, [r7, #20]
 8005c34:	6139      	str	r1, [r7, #16]
 8005c36:	60fa      	str	r2, [r7, #12]
 8005c38:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8005c3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c3e:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00f      	beq.n	8005c68 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d206      	bcs.n	8005c62 <lfs_dir_fetchmatch+0x36>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3304      	adds	r3, #4
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d302      	bcc.n	8005c68 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 8005c62:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8005c66:	e3a4      	b.n	80063b2 <lfs_dir_fetchmatch+0x786>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8005c68:	2300      	movs	r3, #0
 8005c6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
    int r = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 8005c74:	2300      	movs	r3, #0
 8005c76:	677b      	str	r3, [r7, #116]	@ 0x74
 8005c78:	e05a      	b.n	8005d30 <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 8005c7a:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8005c7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8005c84:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8005c86:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8005c8a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005c8c:	0092      	lsls	r2, r2, #2
 8005c8e:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8005c90:	2104      	movs	r1, #4
 8005c92:	9103      	str	r1, [sp, #12]
 8005c94:	9202      	str	r2, [sp, #8]
 8005c96:	2200      	movs	r2, #0
 8005c98:	9201      	str	r2, [sp, #4]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	6978      	ldr	r0, [r7, #20]
 8005ca4:	f7fe f978 	bl	8003f98 <lfs_bd_read>
 8005ca8:	64f8      	str	r0, [r7, #76]	@ 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 8005caa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	3378      	adds	r3, #120	@ 0x78
 8005cb0:	f107 0208 	add.w	r2, r7, #8
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fe f901 	bl	8003ec2 <lfs_fromle32>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	3378      	adds	r3, #120	@ 0x78
 8005cc8:	f107 0108 	add.w	r1, r7, #8
 8005ccc:	440b      	add	r3, r1
 8005cce:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 8005cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d005      	beq.n	8005ce4 <lfs_dir_fetchmatch+0xb8>
 8005cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cda:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005cde:	d001      	beq.n	8005ce4 <lfs_dir_fetchmatch+0xb8>
            return err;
 8005ce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ce2:	e366      	b.n	80063b2 <lfs_dir_fetchmatch+0x786>
        }

        if (err != LFS_ERR_CORRUPT &&
 8005ce4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ce6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005cea:	d01e      	beq.n	8005d2a <lfs_dir_fetchmatch+0xfe>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8005cec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	3378      	adds	r3, #120	@ 0x78
 8005cf2:	f107 0208 	add.w	r2, r7, #8
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8005cfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cfe:	3301      	adds	r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	bfb8      	it	lt
 8005d08:	425b      	neglt	r3, r3
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	3378      	adds	r3, #120	@ 0x78
 8005d0e:	f107 0108 	add.w	r1, r7, #8
 8005d12:	440b      	add	r3, r1
 8005d14:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	f7fe f8c3 	bl	8003ea6 <lfs_scmp>
 8005d20:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	dd01      	ble.n	8005d2a <lfs_dir_fetchmatch+0xfe>
            r = i;
 8005d26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d28:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 8005d2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	dda1      	ble.n	8005c7a <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8005d36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	bfb8      	it	lt
 8005d40:	425b      	neglt	r3, r3
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8005d4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d50:	3301      	adds	r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	bfb8      	it	lt
 8005d5a:	425b      	neglt	r3, r3
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4413      	add	r3, r2
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8005d68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	bfb8      	it	lt
 8005d72:	425b      	neglt	r3, r3
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	3378      	adds	r3, #120	@ 0x78
 8005d78:	f107 0208 	add.w	r2, r7, #8
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d90:	e2fb      	b.n	800638a <lfs_dir_fetchmatch+0x75e>
        lfs_off_t off = 0;
 8005d92:	2300      	movs	r3, #0
 8005d94:	66fb      	str	r3, [r7, #108]	@ 0x6c
        lfs_tag_t ptag = 0xffffffff;
 8005d96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d9a:	66bb      	str	r3, [r7, #104]	@ 0x68

        uint16_t tempcount = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8005da2:	4aa9      	ldr	r2, [pc, #676]	@ (8006048 <lfs_dir_fetchmatch+0x41c>)
 8005da4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005da8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005dac:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8005db0:	2300      	movs	r3, #0
 8005db2:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        lfs_stag_t tempbesttag = besttag;
 8005db6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005db8:	663b      	str	r3, [r7, #96]	@ 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        bool hasfcrc = false;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fe f884 	bl	8003ed8 <lfs_tole32>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	3308      	adds	r3, #8
 8005dda:	2204      	movs	r2, #4
 8005ddc:	4619      	mov	r1, r3
 8005dde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005de2:	f004 fe73 	bl	800aacc <lfs_crc>
 8005de6:	4603      	mov	r3, r0
 8005de8:	633b      	str	r3, [r7, #48]	@ 0x30
        dir->rev = lfs_fromle32(dir->rev);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fe f867 	bl	8003ec2 <lfs_fromle32>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8005dfa:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8005dfc:	f7fe fd81 	bl	8004902 <lfs_tag_dsize>
 8005e00:	4602      	mov	r2, r0
 8005e02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e04:	4413      	add	r3, r2
 8005e06:	66fb      	str	r3, [r7, #108]	@ 0x6c
            int err = lfs_bd_read(lfs,
 8005e08:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e0e:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2204      	movs	r2, #4
 8005e16:	9203      	str	r2, [sp, #12]
 8005e18:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8005e1c:	9202      	str	r2, [sp, #8]
 8005e1e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e20:	9201      	str	r2, [sp, #4]
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	4603      	mov	r3, r0
 8005e26:	460a      	mov	r2, r1
 8005e28:	2100      	movs	r1, #0
 8005e2a:	6978      	ldr	r0, [r7, #20]
 8005e2c:	f7fe f8b4 	bl	8003f98 <lfs_bd_read>
 8005e30:	65b8      	str	r0, [r7, #88]	@ 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8005e32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d006      	beq.n	8005e46 <lfs_dir_fetchmatch+0x21a>
                if (err == LFS_ERR_CORRUPT) {
 8005e38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e3a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005e3e:	f000 81d6 	beq.w	80061ee <lfs_dir_fetchmatch+0x5c2>
                    // can't continue?
                    break;
                }
                return err;
 8005e42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e44:	e2b5      	b.n	80063b2 <lfs_dir_fetchmatch+0x786>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8005e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e48:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8005e4c:	2204      	movs	r2, #4
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f004 fe3c 	bl	800aacc <lfs_crc>
 8005e54:	4603      	mov	r3, r0
 8005e56:	633b      	str	r3, [r7, #48]	@ 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 8005e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fe f848 	bl	8003ef0 <lfs_frombe32>
 8005e60:	4602      	mov	r2, r0
 8005e62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e64:	4053      	eors	r3, r2
 8005e66:	62fb      	str	r3, [r7, #44]	@ 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 8005e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fe fcc1 	bl	80047f2 <lfs_tag_isvalid>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f083 0301 	eor.w	r3, r3, #1
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00b      	beq.n	8005e94 <lfs_dir_fetchmatch+0x268>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 8005e7c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8005e7e:	f7fe fce9 	bl	8004854 <lfs_tag_type2>
 8005e82:	4603      	mov	r3, r0
 8005e84:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005e88:	bf0c      	ite	eq
 8005e8a:	2301      	moveq	r3, #1
 8005e8c:	2300      	movne	r3, #0
 8005e8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                break;
 8005e92:	e1bb      	b.n	800620c <lfs_dir_fetchmatch+0x5e0>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8005e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fe fd33 	bl	8004902 <lfs_tag_dsize>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ea0:	441a      	add	r2, r3
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	f200 81a2 	bhi.w	80061f2 <lfs_dir_fetchmatch+0x5c6>
                break;
            }

            ptag = tag;
 8005eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb0:	66bb      	str	r3, [r7, #104]	@ 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 8005eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fe fccd 	bl	8004854 <lfs_tag_type2>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005ec0:	d15e      	bne.n	8005f80 <lfs_dir_fetchmatch+0x354>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8005ec2:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ec8:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ed0:	3204      	adds	r2, #4
 8005ed2:	2104      	movs	r1, #4
 8005ed4:	9103      	str	r1, [sp, #12]
 8005ed6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8005eda:	9102      	str	r1, [sp, #8]
 8005edc:	9201      	str	r2, [sp, #4]
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	4623      	mov	r3, r4
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	6978      	ldr	r0, [r7, #20]
 8005ee8:	f7fe f856 	bl	8003f98 <lfs_bd_read>
 8005eec:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8005eee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d006      	beq.n	8005f02 <lfs_dir_fetchmatch+0x2d6>
                    if (err == LFS_ERR_CORRUPT) {
 8005ef4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ef6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005efa:	f000 817c 	beq.w	80061f6 <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 8005efe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                return err;
 8005f00:	e257      	b.n	80063b2 <lfs_dir_fetchmatch+0x786>
                }
                dcrc = lfs_fromle32(dcrc);
 8005f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7fd ffdc 	bl	8003ec2 <lfs_fromle32>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	62bb      	str	r3, [r7, #40]	@ 0x28

                if (crc != dcrc) {
 8005f0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f12:	429a      	cmp	r2, r3
 8005f14:	f040 8171 	bne.w	80061fa <lfs_dir_fetchmatch+0x5ce>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8005f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fe fcba 	bl	8004894 <lfs_tag_chunk>
 8005f20:	4603      	mov	r3, r0
 8005f22:	07db      	lsls	r3, r3, #31
 8005f24:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005f26:	4053      	eors	r3, r2
 8005f28:	66bb      	str	r3, [r7, #104]	@ 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8005f32:	2204      	movs	r2, #4
 8005f34:	4618      	mov	r0, r3
 8005f36:	f004 fdc9 	bl	800aacc <lfs_crc>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8005f40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f42:	67fb      	str	r3, [r7, #124]	@ 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 8005f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fe fcdb 	bl	8004902 <lfs_tag_dsize>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f50:	441a      	add	r2, r3
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005f5a:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8005f62:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8005f64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8005f6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 8005f76:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8005f78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f7e:	e73c      	b.n	8005dfa <lfs_dir_fetchmatch+0x1ce>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 8005f80:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	681c      	ldr	r4, [r3, #0]
 8005f8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f90:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 8005f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fe fcb4 	bl	8004902 <lfs_tag_dsize>
 8005f9a:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 8005f9c:	3b04      	subs	r3, #4
 8005f9e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8005fa2:	9203      	str	r2, [sp, #12]
 8005fa4:	9302      	str	r3, [sp, #8]
 8005fa6:	9501      	str	r5, [sp, #4]
 8005fa8:	9400      	str	r4, [sp, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4632      	mov	r2, r6
 8005fae:	2100      	movs	r1, #0
 8005fb0:	6978      	ldr	r0, [r7, #20]
 8005fb2:	f7fe f98e 	bl	80042d2 <lfs_bd_crc>
 8005fb6:	65b8      	str	r0, [r7, #88]	@ 0x58
            if (err) {
 8005fb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d006      	beq.n	8005fcc <lfs_dir_fetchmatch+0x3a0>
                if (err == LFS_ERR_CORRUPT) {
 8005fbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fc0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005fc4:	f000 811b 	beq.w	80061fe <lfs_dir_fetchmatch+0x5d2>
                    break;
                }
                return err;
 8005fc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fca:	e1f2      	b.n	80063b2 <lfs_dir_fetchmatch+0x786>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8005fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fe fc30 	bl	8004834 <lfs_tag_type1>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d113      	bne.n	8006002 <lfs_dir_fetchmatch+0x3d6>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8005fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fe fc73 	bl	80048c8 <lfs_tag_id>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005fea:	4293      	cmp	r3, r2
 8005fec:	f200 80b6 	bhi.w	800615c <lfs_dir_fetchmatch+0x530>
                    tempcount = lfs_tag_id(tag) + 1;
 8005ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fe fc68 	bl	80048c8 <lfs_tag_id>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006000:	e0ac      	b.n	800615c <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8006002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006004:	4618      	mov	r0, r3
 8006006:	f7fe fc15 	bl	8004834 <lfs_tag_type1>
 800600a:	4603      	mov	r3, r0
 800600c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006010:	d13a      	bne.n	8006088 <lfs_dir_fetchmatch+0x45c>
                tempcount += lfs_tag_splice(tag);
 8006012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006014:	4618      	mov	r0, r3
 8006016:	f7fe fc4a 	bl	80048ae <lfs_tag_splice>
 800601a:	4603      	mov	r3, r0
 800601c:	b29a      	uxth	r2, r3
 800601e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006022:	4413      	add	r3, r2
 8006024:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8006028:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800602a:	4b08      	ldr	r3, [pc, #32]	@ (800604c <lfs_dir_fetchmatch+0x420>)
 800602c:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800602e:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8006032:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8006036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006038:	4293      	cmp	r3, r2
 800603a:	d109      	bne.n	8006050 <lfs_dir_fetchmatch+0x424>
                    tempbesttag |= 0x80000000;
 800603c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800603e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006042:	663b      	str	r3, [r7, #96]	@ 0x60
 8006044:	e08a      	b.n	800615c <lfs_dir_fetchmatch+0x530>
 8006046:	bf00      	nop
 8006048:	0800e18c 	.word	0x0800e18c
 800604c:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 8006050:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006052:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006056:	f000 8081 	beq.w	800615c <lfs_dir_fetchmatch+0x530>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800605a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605c:	4618      	mov	r0, r3
 800605e:	f7fe fc33 	bl	80048c8 <lfs_tag_id>
 8006062:	4603      	mov	r3, r0
 8006064:	461c      	mov	r4, r3
 8006066:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006068:	4618      	mov	r0, r3
 800606a:	f7fe fc2d 	bl	80048c8 <lfs_tag_id>
 800606e:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8006070:	429c      	cmp	r4, r3
 8006072:	d873      	bhi.n	800615c <lfs_dir_fetchmatch+0x530>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8006074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006076:	4618      	mov	r0, r3
 8006078:	f7fe fc19 	bl	80048ae <lfs_tag_splice>
 800607c:	4603      	mov	r3, r0
 800607e:	029a      	lsls	r2, r3, #10
 8006080:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006082:	4413      	add	r3, r2
 8006084:	663b      	str	r3, [r7, #96]	@ 0x60
 8006086:	e069      	b.n	800615c <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8006088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800608a:	4618      	mov	r0, r3
 800608c:	f7fe fbd2 	bl	8004834 <lfs_tag_type1>
 8006090:	4603      	mov	r3, r0
 8006092:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006096:	d132      	bne.n	80060fe <lfs_dir_fetchmatch+0x4d2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8006098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609a:	4618      	mov	r0, r3
 800609c:	f7fe fbfa 	bl	8004894 <lfs_tag_chunk>
 80060a0:	4603      	mov	r3, r0
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	bf14      	ite	ne
 80060aa:	2301      	movne	r3, #1
 80060ac:	2300      	moveq	r3, #0
 80060ae:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

                err = lfs_bd_read(lfs,
 80060b2:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060b8:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80060c0:	3204      	adds	r2, #4
 80060c2:	2108      	movs	r1, #8
 80060c4:	9103      	str	r1, [sp, #12]
 80060c6:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80060ca:	9102      	str	r1, [sp, #8]
 80060cc:	9201      	str	r2, [sp, #4]
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	4623      	mov	r3, r4
 80060d2:	4602      	mov	r2, r0
 80060d4:	2100      	movs	r1, #0
 80060d6:	6978      	ldr	r0, [r7, #20]
 80060d8:	f7fd ff5e 	bl	8003f98 <lfs_bd_read>
 80060dc:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 80060de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d006      	beq.n	80060f2 <lfs_dir_fetchmatch+0x4c6>
                    if (err == LFS_ERR_CORRUPT) {
 80060e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060e6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80060ea:	f000 808a 	beq.w	8006202 <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                    return err;
 80060ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060f0:	e15f      	b.n	80063b2 <lfs_dir_fetchmatch+0x786>
                }
                lfs_pair_fromle32(temptail);
 80060f2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fe fb47 	bl	800478a <lfs_pair_fromle32>
 80060fc:	e02e      	b.n	800615c <lfs_dir_fetchmatch+0x530>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 80060fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006100:	4618      	mov	r0, r3
 8006102:	f7fe fbb7 	bl	8004874 <lfs_tag_type3>
 8006106:	4603      	mov	r3, r0
 8006108:	461a      	mov	r2, r3
 800610a:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 800610e:	429a      	cmp	r2, r3
 8006110:	d124      	bne.n	800615c <lfs_dir_fetchmatch+0x530>
                err = lfs_bd_read(lfs,
 8006112:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006118:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006120:	3204      	adds	r2, #4
 8006122:	2108      	movs	r1, #8
 8006124:	9103      	str	r1, [sp, #12]
 8006126:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800612a:	9102      	str	r1, [sp, #8]
 800612c:	9201      	str	r2, [sp, #4]
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	4623      	mov	r3, r4
 8006132:	4602      	mov	r2, r0
 8006134:	2100      	movs	r1, #0
 8006136:	6978      	ldr	r0, [r7, #20]
 8006138:	f7fd ff2e 	bl	8003f98 <lfs_bd_read>
 800613c:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 800613e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006140:	2b00      	cmp	r3, #0
 8006142:	d003      	beq.n	800614c <lfs_dir_fetchmatch+0x520>
                    if (err == LFS_ERR_CORRUPT) {
 8006144:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006146:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800614a:	d05c      	beq.n	8006206 <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 800614c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006150:	4618      	mov	r0, r3
 8006152:	f7fe fcd5 	bl	8004b00 <lfs_fcrc_fromle32>
                hasfcrc = true;
 8006156:	2301      	movs	r3, #1
 8006158:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 800615c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800615e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006162:	405a      	eors	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	4013      	ands	r3, r2
 8006168:	2b00      	cmp	r3, #0
 800616a:	f47f ae46 	bne.w	8005dfa <lfs_dir_fetchmatch+0x1ce>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800616e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
                        dir->pair[0], off+sizeof(tag)});
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8006174:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8006176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006178:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800617a:	627b      	str	r3, [r7, #36]	@ 0x24
 800617c:	f107 0220 	add.w	r2, r7, #32
 8006180:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006184:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8006188:	4798      	blx	r3
 800618a:	6578      	str	r0, [r7, #84]	@ 0x54
                if (res < 0) {
 800618c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800618e:	2b00      	cmp	r3, #0
 8006190:	da05      	bge.n	800619e <lfs_dir_fetchmatch+0x572>
                    if (res == LFS_ERR_CORRUPT) {
 8006192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006194:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006198:	d037      	beq.n	800620a <lfs_dir_fetchmatch+0x5de>
                        break;
                    }
                    return res;
 800619a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                return err;
 800619c:	e109      	b.n	80063b2 <lfs_dir_fetchmatch+0x786>
                }

                if (res == LFS_CMP_EQ) {
 800619e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d102      	bne.n	80061aa <lfs_dir_fetchmatch+0x57e>
                    // found a match
                    tempbesttag = tag;
 80061a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80061a8:	e627      	b.n	8005dfa <lfs_dir_fetchmatch+0x1ce>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 80061aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061ae:	405a      	eors	r2, r3
 80061b0:	4b82      	ldr	r3, [pc, #520]	@ (80063bc <lfs_dir_fetchmatch+0x790>)
 80061b2:	4013      	ands	r3, r2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d103      	bne.n	80061c0 <lfs_dir_fetchmatch+0x594>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 80061b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80061bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80061be:	e61c      	b.n	8005dfa <lfs_dir_fetchmatch+0x1ce>
                } else if (res == LFS_CMP_GT &&
 80061c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	f47f ae19 	bne.w	8005dfa <lfs_dir_fetchmatch+0x1ce>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 80061c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe fb7c 	bl	80048c8 <lfs_tag_id>
 80061d0:	4603      	mov	r3, r0
 80061d2:	461c      	mov	r4, r3
 80061d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7fe fb76 	bl	80048c8 <lfs_tag_id>
 80061dc:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 80061de:	429c      	cmp	r4, r3
 80061e0:	f63f ae0b 	bhi.w	8005dfa <lfs_dir_fetchmatch+0x1ce>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 80061e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80061ec:	e605      	b.n	8005dfa <lfs_dir_fetchmatch+0x1ce>
                    break;
 80061ee:	bf00      	nop
 80061f0:	e00c      	b.n	800620c <lfs_dir_fetchmatch+0x5e0>
                break;
 80061f2:	bf00      	nop
 80061f4:	e00a      	b.n	800620c <lfs_dir_fetchmatch+0x5e0>
                        break;
 80061f6:	bf00      	nop
 80061f8:	e008      	b.n	800620c <lfs_dir_fetchmatch+0x5e0>
                    break;
 80061fa:	bf00      	nop
 80061fc:	e006      	b.n	800620c <lfs_dir_fetchmatch+0x5e0>
                    break;
 80061fe:	bf00      	nop
 8006200:	e004      	b.n	800620c <lfs_dir_fetchmatch+0x5e0>
                        break;
 8006202:	bf00      	nop
 8006204:	e002      	b.n	800620c <lfs_dir_fetchmatch+0x5e0>
                        break;
 8006206:	bf00      	nop
 8006208:	e000      	b.n	800620c <lfs_dir_fetchmatch+0x5e0>
                        break;
 800620a:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d000      	beq.n	8006216 <lfs_dir_fetchmatch+0x5ea>
 8006214:	e017      	b.n	8006246 <lfs_dir_fetchmatch+0x61a>
            // try the other block?
            lfs_pair_swap(dir->pair);
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	4618      	mov	r0, r3
 800621a:	f7fe fa2f 	bl	800467c <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 800621e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006220:	3301      	adds	r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	bfb8      	it	lt
 800622a:	425b      	neglt	r3, r3
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	3378      	adds	r3, #120	@ 0x78
 8006230:	f107 0208 	add.w	r2, r7, #8
 8006234:	4413      	add	r3, r2
 8006236:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800623e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006240:	3301      	adds	r3, #1
 8006242:	673b      	str	r3, [r7, #112]	@ 0x70
 8006244:	e0a1      	b.n	800638a <lfs_dir_fetchmatch+0x75e>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	2200      	movs	r2, #0
 800624a:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 800624c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006250:	2b00      	cmp	r3, #0
 8006252:	d03a      	beq.n	80062ca <lfs_dir_fetchmatch+0x69e>
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800625c:	6992      	ldr	r2, [r2, #24]
 800625e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006262:	fb01 f202 	mul.w	r2, r1, r2
 8006266:	1a9b      	subs	r3, r3, r2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d12e      	bne.n	80062ca <lfs_dir_fetchmatch+0x69e>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 800626c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8006270:	2b00      	cmp	r3, #0
 8006272:	d02a      	beq.n	80062ca <lfs_dir_fetchmatch+0x69e>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 8006274:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006278:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 800627a:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006280:	69dd      	ldr	r5, [r3, #28]
                int err = lfs_bd_crc(lfs,
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	68d2      	ldr	r2, [r2, #12]
 800628a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800628c:	f107 001c 	add.w	r0, r7, #28
 8006290:	9003      	str	r0, [sp, #12]
 8006292:	9102      	str	r1, [sp, #8]
 8006294:	9201      	str	r2, [sp, #4]
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	462b      	mov	r3, r5
 800629a:	4622      	mov	r2, r4
 800629c:	2100      	movs	r1, #0
 800629e:	6978      	ldr	r0, [r7, #20]
 80062a0:	f7fe f817 	bl	80042d2 <lfs_bd_crc>
 80062a4:	6538      	str	r0, [r7, #80]	@ 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 80062a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <lfs_dir_fetchmatch+0x68c>
 80062ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062ae:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80062b2:	d001      	beq.n	80062b8 <lfs_dir_fetchmatch+0x68c>
                    return err;
 80062b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062b6:	e07c      	b.n	80063b2 <lfs_dir_fetchmatch+0x786>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 80062b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	429a      	cmp	r2, r3
 80062be:	bf0c      	ite	eq
 80062c0:	2301      	moveq	r3, #1
 80062c2:	2300      	movne	r3, #0
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	333c      	adds	r3, #60	@ 0x3c
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4611      	mov	r1, r2
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fe fbb4 	bl	8004a40 <lfs_gstate_hasmovehere>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d028      	beq.n	8006330 <lfs_dir_fetchmatch+0x704>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fe faf0 	bl	80048c8 <lfs_tag_id>
 80062e8:	4603      	mov	r3, r0
 80062ea:	461c      	mov	r4, r3
 80062ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fe faea 	bl	80048c8 <lfs_tag_id>
 80062f4:	4603      	mov	r3, r0
 80062f6:	429c      	cmp	r4, r3
 80062f8:	d104      	bne.n	8006304 <lfs_dir_fetchmatch+0x6d8>
                besttag |= 0x80000000;
 80062fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006300:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006302:	e015      	b.n	8006330 <lfs_dir_fetchmatch+0x704>
            } else if (besttag != -1 &&
 8006304:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006306:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800630a:	d011      	beq.n	8006330 <lfs_dir_fetchmatch+0x704>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006310:	4618      	mov	r0, r3
 8006312:	f7fe fad9 	bl	80048c8 <lfs_tag_id>
 8006316:	4603      	mov	r3, r0
 8006318:	461c      	mov	r4, r3
 800631a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800631c:	4618      	mov	r0, r3
 800631e:	f7fe fad3 	bl	80048c8 <lfs_tag_id>
 8006322:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 8006324:	429c      	cmp	r4, r3
 8006326:	d203      	bcs.n	8006330 <lfs_dir_fetchmatch+0x704>
                besttag -= LFS_MKTAG(0, 1, 0);
 8006328:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800632a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800632e:	67fb      	str	r3, [r7, #124]	@ 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8006330:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006334:	2b00      	cmp	r3, #0
 8006336:	d010      	beq.n	800635a <lfs_dir_fetchmatch+0x72e>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8006338:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800633a:	4618      	mov	r0, r3
 800633c:	f7fe fac4 	bl	80048c8 <lfs_tag_id>
 8006340:	4603      	mov	r3, r0
 8006342:	461a      	mov	r2, r3
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	8a9b      	ldrh	r3, [r3, #20]
 8006348:	4619      	mov	r1, r3
 800634a:	4610      	mov	r0, r2
 800634c:	f7fd fd49 	bl	8003de2 <lfs_min>
 8006350:	4603      	mov	r3, r0
 8006352:	b29a      	uxth	r2, r3
 8006354:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006358:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 800635a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800635c:	4618      	mov	r0, r3
 800635e:	f7fe fa48 	bl	80047f2 <lfs_tag_isvalid>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <lfs_dir_fetchmatch+0x740>
            return besttag;
 8006368:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800636a:	e022      	b.n	80063b2 <lfs_dir_fetchmatch+0x786>
        } else if (lfs_tag_id(besttag) < dir->count) {
 800636c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800636e:	4618      	mov	r0, r3
 8006370:	f7fe faaa 	bl	80048c8 <lfs_tag_id>
 8006374:	4603      	mov	r3, r0
 8006376:	461a      	mov	r2, r3
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	8a9b      	ldrh	r3, [r3, #20]
 800637c:	429a      	cmp	r2, r3
 800637e:	d202      	bcs.n	8006386 <lfs_dir_fetchmatch+0x75a>
            return LFS_ERR_NOENT;
 8006380:	f06f 0301 	mvn.w	r3, #1
 8006384:	e015      	b.n	80063b2 <lfs_dir_fetchmatch+0x786>
        } else {
            return 0;
 8006386:	2300      	movs	r3, #0
 8006388:	e013      	b.n	80063b2 <lfs_dir_fetchmatch+0x786>
    for (int i = 0; i < 2; i++) {
 800638a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800638c:	2b01      	cmp	r3, #1
 800638e:	f77f ad00 	ble.w	8005d92 <lfs_dir_fetchmatch+0x166>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	4909      	ldr	r1, [pc, #36]	@ (80063c0 <lfs_dir_fetchmatch+0x794>)
 800639c:	9101      	str	r1, [sp, #4]
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	4613      	mov	r3, r2
 80063a2:	f240 5259 	movw	r2, #1369	@ 0x559
 80063a6:	4907      	ldr	r1, [pc, #28]	@ (80063c4 <lfs_dir_fetchmatch+0x798>)
 80063a8:	4807      	ldr	r0, [pc, #28]	@ (80063c8 <lfs_dir_fetchmatch+0x79c>)
 80063aa:	f006 f855 	bl	800c458 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 80063ae:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3784      	adds	r7, #132	@ 0x84
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ba:	bf00      	nop
 80063bc:	7ffffc00 	.word	0x7ffffc00
 80063c0:	0800e148 	.word	0x0800e148
 80063c4:	0800e038 	.word	0x0800e038
 80063c8:	0800e154 	.word	0x0800e154

080063cc <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af04      	add	r7, sp, #16
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 80063d8:	2300      	movs	r3, #0
 80063da:	9303      	str	r3, [sp, #12]
 80063dc:	2300      	movs	r3, #0
 80063de:	9302      	str	r3, [sp, #8]
 80063e0:	2300      	movs	r3, #0
 80063e2:	9301      	str	r3, [sp, #4]
 80063e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f7ff fc1a 	bl	8005c2c <lfs_dir_fetchmatch>
 80063f8:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8006404:	b580      	push	{r7, lr}
 8006406:	b08a      	sub	sp, #40	@ 0x28
 8006408:	af02      	add	r7, sp, #8
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8006410:	f107 0310 	add.w	r3, r7, #16
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	4b12      	ldr	r3, [pc, #72]	@ (8006460 <lfs_dir_getgstate+0x5c>)
 8006418:	4a12      	ldr	r2, [pc, #72]	@ (8006464 <lfs_dir_getgstate+0x60>)
 800641a:	68b9      	ldr	r1, [r7, #8]
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f7fe fecf 	bl	80051c0 <lfs_dir_get>
 8006422:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	2b00      	cmp	r3, #0
 8006428:	da05      	bge.n	8006436 <lfs_dir_getgstate+0x32>
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	f113 0f02 	cmn.w	r3, #2
 8006430:	d001      	beq.n	8006436 <lfs_dir_getgstate+0x32>
        return res;
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	e00f      	b.n	8006456 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	f113 0f02 	cmn.w	r3, #2
 800643c:	d00a      	beq.n	8006454 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800643e:	f107 0310 	add.w	r3, r7, #16
 8006442:	4618      	mov	r0, r3
 8006444:	f7fe fb1c 	bl	8004a80 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8006448:	f107 0310 	add.w	r3, r7, #16
 800644c:	4619      	mov	r1, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7fe fa6b 	bl	800492a <lfs_gstate_xor>
    }

    return 0;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3720      	adds	r7, #32
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	7ff0000c 	.word	0x7ff0000c
 8006464:	7ff00000 	.word	0x7ff00000

08006468 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8006468:	b590      	push	{r4, r7, lr}
 800646a:	b08f      	sub	sp, #60	@ 0x3c
 800646c:	af04      	add	r7, sp, #16
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 8006478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8006482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006484:	689c      	ldr	r4, [r3, #8]
 8006486:	68b8      	ldr	r0, [r7, #8]
 8006488:	f7fe fa2e 	bl	80048e8 <lfs_tag_size>
 800648c:	4603      	mov	r3, r0
 800648e:	4619      	mov	r1, r3
 8006490:	4620      	mov	r0, r4
 8006492:	f7fd fca6 	bl	8003de2 <lfs_min>
 8006496:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8006498:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69fa      	ldr	r2, [r7, #28]
 80064a0:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 80064a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064a4:	6849      	ldr	r1, [r1, #4]
 80064a6:	69b8      	ldr	r0, [r7, #24]
 80064a8:	9003      	str	r0, [sp, #12]
 80064aa:	9102      	str	r1, [sp, #8]
 80064ac:	9201      	str	r2, [sp, #4]
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	4622      	mov	r2, r4
 80064b4:	2100      	movs	r1, #0
 80064b6:	6a38      	ldr	r0, [r7, #32]
 80064b8:	f7fd feba 	bl	8004230 <lfs_bd_cmp>
 80064bc:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <lfs_dir_find_match+0x60>
        return res;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	e014      	b.n	80064f2 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 80064c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ca:	689c      	ldr	r4, [r3, #8]
 80064cc:	68b8      	ldr	r0, [r7, #8]
 80064ce:	f7fe fa0b 	bl	80048e8 <lfs_tag_size>
 80064d2:	4603      	mov	r3, r0
 80064d4:	429c      	cmp	r4, r3
 80064d6:	d00b      	beq.n	80064f0 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 80064d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064da:	689c      	ldr	r4, [r3, #8]
 80064dc:	68b8      	ldr	r0, [r7, #8]
 80064de:	f7fe fa03 	bl	80048e8 <lfs_tag_size>
 80064e2:	4603      	mov	r3, r0
 80064e4:	429c      	cmp	r4, r3
 80064e6:	d201      	bcs.n	80064ec <lfs_dir_find_match+0x84>
 80064e8:	2301      	movs	r3, #1
 80064ea:	e002      	b.n	80064f2 <lfs_dir_find_match+0x8a>
 80064ec:	2302      	movs	r3, #2
 80064ee:	e000      	b.n	80064f2 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	372c      	adds	r7, #44	@ 0x2c
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd90      	pop	{r4, r7, pc}
	...

080064fc <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 80064fc:	b590      	push	{r4, r7, lr}
 80064fe:	b093      	sub	sp, #76	@ 0x4c
 8006500:	af04      	add	r7, sp, #16
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
 8006508:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (id) {
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <lfs_dir_find+0x22>
        *id = 0x3ff;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800651c:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800651e:	4b6e      	ldr	r3, [pc, #440]	@ (80066d8 <lfs_dir_find+0x1dc>)
 8006520:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6a1a      	ldr	r2, [r3, #32]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8006532:	496a      	ldr	r1, [pc, #424]	@ (80066dc <lfs_dir_find+0x1e0>)
 8006534:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006536:	f005 ffe9 	bl	800c50c <strspn>
 800653a:	4602      	mov	r2, r0
 800653c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800653e:	4413      	add	r3, r2
 8006540:	637b      	str	r3, [r7, #52]	@ 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8006542:	4966      	ldr	r1, [pc, #408]	@ (80066dc <lfs_dir_find+0x1e0>)
 8006544:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006546:	f005 ffbe 	bl	800c4c6 <strcspn>
 800654a:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800654c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654e:	2b01      	cmp	r3, #1
 8006550:	d105      	bne.n	800655e <lfs_dir_find+0x62>
 8006552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006554:	781a      	ldrb	r2, [r3, #0]
 8006556:	4b62      	ldr	r3, [pc, #392]	@ (80066e0 <lfs_dir_find+0x1e4>)
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d00a      	beq.n	8006574 <lfs_dir_find+0x78>
 800655e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006560:	2b02      	cmp	r3, #2
 8006562:	d10c      	bne.n	800657e <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8006564:	2202      	movs	r2, #2
 8006566:	495f      	ldr	r1, [pc, #380]	@ (80066e4 <lfs_dir_find+0x1e8>)
 8006568:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800656a:	f005 ff87 	bl	800c47c <memcmp>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d104      	bne.n	800657e <lfs_dir_find+0x82>
            name += namelen;
 8006574:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006578:	4413      	add	r3, r2
 800657a:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 800657c:	e7d9      	b.n	8006532 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800657e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	4413      	add	r3, r2
 8006584:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8006586:	2301      	movs	r3, #1
 8006588:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800658a:	4954      	ldr	r1, [pc, #336]	@ (80066dc <lfs_dir_find+0x1e0>)
 800658c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800658e:	f005 ffbd 	bl	800c50c <strspn>
 8006592:	4602      	mov	r2, r0
 8006594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006596:	4413      	add	r3, r2
 8006598:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 800659a:	4950      	ldr	r1, [pc, #320]	@ (80066dc <lfs_dir_find+0x1e0>)
 800659c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800659e:	f005 ff92 	bl	800c4c6 <strcspn>
 80065a2:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d01d      	beq.n	80065e6 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d112      	bne.n	80065d6 <lfs_dir_find+0xda>
 80065b0:	2202      	movs	r2, #2
 80065b2:	494c      	ldr	r1, [pc, #304]	@ (80066e4 <lfs_dir_find+0x1e8>)
 80065b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80065b6:	f005 ff61 	bl	800c47c <memcmp>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10a      	bne.n	80065d6 <lfs_dir_find+0xda>
                depth -= 1;
 80065c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c2:	3b01      	subs	r3, #1
 80065c4:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 80065c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d107      	bne.n	80065dc <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 80065cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	4413      	add	r3, r2
 80065d2:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 80065d4:	e7ad      	b.n	8006532 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 80065d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d8:	3301      	adds	r3, #1
 80065da:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 80065dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	4413      	add	r3, r2
 80065e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 80065e4:	e7d1      	b.n	800658a <lfs_dir_find+0x8e>
                break;
 80065e6:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 80065e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <lfs_dir_find+0xf8>
            return tag;
 80065f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f2:	e06c      	b.n	80066ce <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065f8:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80065fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fe f939 	bl	8004874 <lfs_tag_type3>
 8006602:	4603      	mov	r3, r0
 8006604:	2b02      	cmp	r3, #2
 8006606:	d002      	beq.n	800660e <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8006608:	f06f 0313 	mvn.w	r3, #19
 800660c:	e05f      	b.n	80066ce <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800660e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006610:	4618      	mov	r0, r3
 8006612:	f7fe f959 	bl	80048c8 <lfs_tag_id>
 8006616:	4603      	mov	r3, r0
 8006618:	461a      	mov	r2, r3
 800661a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800661e:	429a      	cmp	r2, r3
 8006620:	d01c      	beq.n	800665c <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8006622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006624:	4618      	mov	r0, r3
 8006626:	f7fe f94f 	bl	80048c8 <lfs_tag_id>
 800662a:	4603      	mov	r3, r0
 800662c:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800662e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006632:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800663a:	9200      	str	r2, [sp, #0]
 800663c:	4a2a      	ldr	r2, [pc, #168]	@ (80066e8 <lfs_dir_find+0x1ec>)
 800663e:	68b9      	ldr	r1, [r7, #8]
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f7fe fdbd 	bl	80051c0 <lfs_dir_get>
 8006646:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	2b00      	cmp	r3, #0
 800664c:	da01      	bge.n	8006652 <lfs_dir_find+0x156>
                return res;
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	e03d      	b.n	80066ce <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	3318      	adds	r3, #24
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe f897 	bl	800478a <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8006662:	212f      	movs	r1, #47	@ 0x2f
 8006664:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006666:	f005 ff21 	bl	800c4ac <strchr>
 800666a:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <lfs_dir_find+0x178>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	e000      	b.n	8006676 <lfs_dir_find+0x17a>
 8006674:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	613a      	str	r2, [r7, #16]
 800667a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800667c:	617a      	str	r2, [r7, #20]
 800667e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006680:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8006682:	f107 0210 	add.w	r2, r7, #16
 8006686:	9203      	str	r2, [sp, #12]
 8006688:	4a18      	ldr	r2, [pc, #96]	@ (80066ec <lfs_dir_find+0x1f0>)
 800668a:	9202      	str	r2, [sp, #8]
 800668c:	9301      	str	r3, [sp, #4]
 800668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 8006696:	4622      	mov	r2, r4
 8006698:	68b9      	ldr	r1, [r7, #8]
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f7ff fac6 	bl	8005c2c <lfs_dir_fetchmatch>
 80066a0:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 80066a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	da01      	bge.n	80066ac <lfs_dir_find+0x1b0>
                return tag;
 80066a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066aa:	e010      	b.n	80066ce <lfs_dir_find+0x1d2>
            }

            if (tag) {
 80066ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d004      	beq.n	80066bc <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 80066b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b6:	4413      	add	r3, r2
 80066b8:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 80066ba:	e73a      	b.n	8006532 <lfs_dir_find+0x36>
            if (!dir->split) {
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	7ddb      	ldrb	r3, [r3, #23]
 80066c0:	f083 0301 	eor.w	r3, r3, #1
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0c8      	beq.n	800665c <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 80066ca:	f06f 0301 	mvn.w	r3, #1
    }
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	373c      	adds	r7, #60	@ 0x3c
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd90      	pop	{r4, r7, pc}
 80066d6:	bf00      	nop
 80066d8:	002ffc00 	.word	0x002ffc00
 80066dc:	0800e194 	.word	0x0800e194
 80066e0:	0800e198 	.word	0x0800e198
 80066e4:	0800e19c 	.word	0x0800e19c
 80066e8:	700ffc00 	.word	0x700ffc00
 80066ec:	08006469 	.word	0x08006469

080066f0 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 80066f0:	b590      	push	{r4, r7, lr}
 80066f2:	b08b      	sub	sp, #44	@ 0x2c
 80066f4:	af04      	add	r7, sp, #16
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
 80066fc:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f103 0010 	add.w	r0, r3, #16
 8006704:	68fc      	ldr	r4, [r7, #12]
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	6852      	ldr	r2, [r2, #4]
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	9103      	str	r1, [sp, #12]
 8006712:	6879      	ldr	r1, [r7, #4]
 8006714:	9102      	str	r1, [sp, #8]
 8006716:	9201      	str	r2, [sp, #4]
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	2300      	movs	r3, #0
 800671c:	4622      	mov	r2, r4
 800671e:	4601      	mov	r1, r0
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f7fd fecb 	bl	80044bc <lfs_bd_prog>
 8006726:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <lfs_dir_commitprog+0x42>
        return err;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	e010      	b.n	8006754 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	6879      	ldr	r1, [r7, #4]
 800673a:	4618      	mov	r0, r3
 800673c:	f004 f9c6 	bl	800aacc <lfs_crc>
 8006740:	4602      	mov	r2, r0
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	441a      	add	r2, r3
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	605a      	str	r2, [r3, #4]
    return 0;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	bd90      	pop	{r4, r7, pc}

0800675c <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800675c:	b590      	push	{r4, r7, lr}
 800675e:	b08f      	sub	sp, #60	@ 0x3c
 8006760:	af04      	add	r7, sp, #16
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7fe f8c9 	bl	8004902 <lfs_tag_dsize>
 8006770:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	441a      	add	r2, r3
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	429a      	cmp	r2, r3
 8006780:	d902      	bls.n	8006788 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8006782:	f06f 031b 	mvn.w	r3, #27
 8006786:	e065      	b.n	8006854 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	4053      	eors	r3, r2
 8006794:	4618      	mov	r0, r3
 8006796:	f7fd fbb7 	bl	8003f08 <lfs_tobe32>
 800679a:	4603      	mov	r3, r0
 800679c:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800679e:	f107 0214 	add.w	r2, r7, #20
 80067a2:	2304      	movs	r3, #4
 80067a4:	68b9      	ldr	r1, [r7, #8]
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f7ff ffa2 	bl	80066f0 <lfs_dir_commitprog>
 80067ac:	61f8      	str	r0, [r7, #28]
    if (err) {
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <lfs_dir_commitattr+0x5c>
        return err;
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	e04d      	b.n	8006854 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	db0c      	blt.n	80067d8 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 80067be:	6a3b      	ldr	r3, [r7, #32]
 80067c0:	3b04      	subs	r3, #4
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	68b9      	ldr	r1, [r7, #8]
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f7ff ff92 	bl	80066f0 <lfs_dir_commitprog>
 80067cc:	61f8      	str	r0, [r7, #28]
        if (err) {
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d039      	beq.n	8006848 <lfs_dir_commitattr+0xec>
            return err;
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	e03d      	b.n	8006854 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80067dc:	2300      	movs	r3, #0
 80067de:	627b      	str	r3, [r7, #36]	@ 0x24
 80067e0:	e02d      	b.n	800683e <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 80067e2:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 80067e4:	6a3a      	ldr	r2, [r7, #32]
 80067e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e8:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80067ea:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 80067f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067f6:	440a      	add	r2, r1
 80067f8:	2101      	movs	r1, #1
 80067fa:	9103      	str	r1, [sp, #12]
 80067fc:	f107 0113 	add.w	r1, r7, #19
 8006800:	9102      	str	r1, [sp, #8]
 8006802:	9201      	str	r2, [sp, #4]
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	4623      	mov	r3, r4
 8006808:	4602      	mov	r2, r0
 800680a:	2100      	movs	r1, #0
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f7fd fbc3 	bl	8003f98 <lfs_bd_read>
 8006812:	61f8      	str	r0, [r7, #28]
            if (err) {
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <lfs_dir_commitattr+0xc2>
                return err;
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	e01a      	b.n	8006854 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800681e:	f107 0213 	add.w	r2, r7, #19
 8006822:	2301      	movs	r3, #1
 8006824:	68b9      	ldr	r1, [r7, #8]
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f7ff ff62 	bl	80066f0 <lfs_dir_commitprog>
 800682c:	61f8      	str	r0, [r7, #28]
            if (err) {
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <lfs_dir_commitattr+0xdc>
                return err;
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	e00d      	b.n	8006854 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8006838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683a:	3301      	adds	r3, #1
 800683c:	627b      	str	r3, [r7, #36]	@ 0x24
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	3b04      	subs	r3, #4
 8006842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006844:	429a      	cmp	r2, r3
 8006846:	d3cc      	bcc.n	80067e2 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	609a      	str	r2, [r3, #8]
    return 0;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	372c      	adds	r7, #44	@ 0x2c
 8006858:	46bd      	mov	sp, r7
 800685a:	bd90      	pop	{r4, r7, pc}

0800685c <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800685c:	b590      	push	{r4, r7, lr}
 800685e:	b097      	sub	sp, #92	@ 0x5c
 8006860:	af04      	add	r7, sp, #16
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 800686a:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006872:	69db      	ldr	r3, [r3, #28]
    const lfs_off_t end = lfs_alignup(
 8006874:	4619      	mov	r1, r3
 8006876:	4610      	mov	r0, r2
 8006878:	f7fd fab3 	bl	8003de2 <lfs_min>
 800687c:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006882:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(
 8006884:	4619      	mov	r1, r3
 8006886:	4610      	mov	r0, r2
 8006888:	f7fd fad0 	bl	8003e2c <lfs_alignup>
 800688c:	63b8      	str	r0, [r7, #56]	@ 0x38

    lfs_off_t off1 = 0;
 800688e:	2300      	movs	r3, #0
 8006890:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8006896:	e0fe      	b.n	8006a96 <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	3b04      	subs	r3, #4
 80068a2:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7fd fa9b 	bl	8003de2 <lfs_min>
 80068ac:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	4413      	add	r3, r2
        lfs_off_t noff = (
 80068b4:	3304      	adds	r3, #4
 80068b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 80068b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80068ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068bc:	429a      	cmp	r2, r3
 80068be:	d206      	bcs.n	80068ce <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 80068c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c2:	3b14      	subs	r3, #20
 80068c4:	4619      	mov	r1, r3
 80068c6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80068c8:	f7fd fa8b 	bl	8003de2 <lfs_min>
 80068cc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 80068ce:	23ff      	movs	r3, #255	@ 0xff
 80068d0:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 80068d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80068d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d35f      	bcc.n	800699a <lfs_dir_commitcrc+0x13e>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068de:	69da      	ldr	r2, [r3, #28]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d855      	bhi.n	800699a <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 80068ee:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068f4:	6998      	ldr	r0, [r3, #24]
            int err = lfs_bd_read(lfs,
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2201      	movs	r2, #1
 80068fc:	9203      	str	r2, [sp, #12]
 80068fe:	f107 021b 	add.w	r2, r7, #27
 8006902:	9202      	str	r2, [sp, #8]
 8006904:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006906:	9201      	str	r2, [sp, #4]
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	4603      	mov	r3, r0
 800690c:	460a      	mov	r2, r1
 800690e:	2100      	movs	r1, #0
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7fd fb41 	bl	8003f98 <lfs_bd_read>
 8006916:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 8006918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <lfs_dir_commitcrc+0xce>
 800691e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006920:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006924:	d001      	beq.n	800692a <lfs_dir_commitcrc+0xce>
                return err;
 8006926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006928:	e101      	b.n	8006b2e <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800692e:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 8006930:	60bb      	str	r3, [r7, #8]
 8006932:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006936:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8006938:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800693e:	699c      	ldr	r4, [r3, #24]
                err = lfs_bd_crc(lfs,
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	f107 0108 	add.w	r1, r7, #8
 800694a:	3104      	adds	r1, #4
 800694c:	9103      	str	r1, [sp, #12]
 800694e:	9202      	str	r2, [sp, #8]
 8006950:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006952:	9201      	str	r2, [sp, #4]
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	4623      	mov	r3, r4
 8006958:	4602      	mov	r2, r0
 800695a:	2100      	movs	r1, #0
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7fd fcb8 	bl	80042d2 <lfs_bd_crc>
 8006962:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 8006964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006966:	2b00      	cmp	r3, #0
 8006968:	d005      	beq.n	8006976 <lfs_dir_commitcrc+0x11a>
 800696a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800696c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006970:	d001      	beq.n	8006976 <lfs_dir_commitcrc+0x11a>
                    return err;
 8006972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006974:	e010      	b.n	8006998 <lfs_dir_commitcrc+0x13c>
                }

                lfs_fcrc_tole32(&fcrc);
 8006976:	f107 0308 	add.w	r3, r7, #8
 800697a:	4618      	mov	r0, r3
 800697c:	f7fe f8d8 	bl	8004b30 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 8006980:	f107 0308 	add.w	r3, r7, #8
 8006984:	4a6c      	ldr	r2, [pc, #432]	@ (8006b38 <lfs_dir_commitcrc+0x2dc>)
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7ff fee7 	bl	800675c <lfs_dir_commitattr>
 800698e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 8006990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <lfs_dir_commitcrc+0x13e>
                    return err;
 8006996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 8006998:	e0c9      	b.n	8006b2e <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 800699a:	7efb      	ldrb	r3, [r7, #27]
 800699c:	43db      	mvns	r3, r3
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	09db      	lsrs	r3, r3, #7
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069a8:	051a      	lsls	r2, r3, #20
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069b0:	1acb      	subs	r3, r1, r3
 80069b2:	3b04      	subs	r3, #4
 80069b4:	4313      	orrs	r3, r2
 80069b6:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 80069ba:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80069be:	62bb      	str	r3, [r7, #40]	@ 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	689a      	ldr	r2, [r3, #8]
 80069c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c6:	4053      	eors	r3, r2
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fd fa9d 	bl	8003f08 <lfs_tobe32>
 80069ce:	4603      	mov	r3, r0
 80069d0:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f107 0110 	add.w	r1, r7, #16
 80069da:	2204      	movs	r2, #4
 80069dc:	4618      	mov	r0, r3
 80069de:	f004 f875 	bl	800aacc <lfs_crc>
 80069e2:	4602      	mov	r2, r0
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7fd fa73 	bl	8003ed8 <lfs_tole32>
 80069f2:	4603      	mov	r3, r0
 80069f4:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f103 0010 	add.w	r0, r3, #16
 80069fc:	687c      	ldr	r4, [r7, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	6852      	ldr	r2, [r2, #4]
 8006a06:	2108      	movs	r1, #8
 8006a08:	9103      	str	r1, [sp, #12]
 8006a0a:	f107 0110 	add.w	r1, r7, #16
 8006a0e:	9102      	str	r1, [sp, #8]
 8006a10:	9201      	str	r2, [sp, #4]
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	2300      	movs	r3, #0
 8006a16:	4622      	mov	r2, r4
 8006a18:	4601      	mov	r1, r0
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7fd fd4e 	bl	80044bc <lfs_bd_prog>
 8006a20:	6278      	str	r0, [r7, #36]	@ 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 8006a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <lfs_dir_commitcrc+0x1d0>
            return err;
 8006a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2a:	e080      	b.n	8006b2e <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8006a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d106      	bne.n	8006a40 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	3304      	adds	r3, #4
 8006a38:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off = noff;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a44:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 8006a46:	7efb      	ldrb	r3, [r7, #27]
 8006a48:	43db      	mvns	r3, r3
 8006a4a:	061b      	lsls	r3, r3, #24
 8006a4c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8006a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a52:	405a      	eors	r2, r3
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a5e:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 8006a60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d208      	bcs.n	8006a7a <lfs_dir_commitcrc+0x21e>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	695a      	ldr	r2, [r3, #20]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a72:	4413      	add	r3, r2
 8006a74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d30d      	bcc.n	8006a96 <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f103 0110 	add.w	r1, r3, #16
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	2300      	movs	r3, #0
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7fd fce5 	bl	8004454 <lfs_bd_sync>
 8006a8a:	6238      	str	r0, [r7, #32]
            if (err) {
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <lfs_dir_commitcrc+0x23a>
                return err;
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	e04b      	b.n	8006b2e <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	f63f aefb 	bhi.w	8006898 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t crc = 0xffffffff;
 8006aa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006aac:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ab2:	1d1c      	adds	r4, r3, #4
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006aba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006abc:	1a8a      	subs	r2, r1, r2
 8006abe:	f107 011c 	add.w	r1, r7, #28
 8006ac2:	9103      	str	r1, [sp, #12]
 8006ac4:	9202      	str	r2, [sp, #8]
 8006ac6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ac8:	9201      	str	r2, [sp, #4]
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	4623      	mov	r3, r4
 8006ace:	4602      	mov	r2, r0
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7fd fbfd 	bl	80042d2 <lfs_bd_crc>
 8006ad8:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 8006ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d001      	beq.n	8006ae4 <lfs_dir_commitcrc+0x288>
        return err;
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae2:	e024      	b.n	8006b2e <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d002      	beq.n	8006af2 <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 8006aec:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8006af0:	e01d      	b.n	8006b2e <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f107 021c 	add.w	r2, r7, #28
 8006afc:	9203      	str	r2, [sp, #12]
 8006afe:	2204      	movs	r2, #4
 8006b00:	9202      	str	r2, [sp, #8]
 8006b02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b04:	9201      	str	r2, [sp, #4]
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	2304      	movs	r3, #4
 8006b0a:	460a      	mov	r2, r1
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7fd fbdf 	bl	80042d2 <lfs_bd_crc>
 8006b14:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 8006b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <lfs_dir_commitcrc+0x2c4>
        return err;
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1e:	e006      	b.n	8006b2e <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d002      	beq.n	8006b2c <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 8006b26:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8006b2a:	e000      	b.n	8006b2e <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	374c      	adds	r7, #76	@ 0x4c
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd90      	pop	{r4, r7, pc}
 8006b36:	bf00      	nop
 8006b38:	5ffffc08 	.word	0x5ffffc08

08006b3c <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08a      	sub	sp, #40	@ 0x28
 8006b40:	af04      	add	r7, sp, #16
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8006b46:	2300      	movs	r3, #0
 8006b48:	617b      	str	r3, [r7, #20]
 8006b4a:	e016      	b.n	8006b7a <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	bfb8      	it	lt
 8006b58:	425b      	neglt	r3, r3
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	4413      	add	r3, r2
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fe f9ae 	bl	8004ec4 <lfs_alloc>
 8006b68:	60f8      	str	r0, [r7, #12]
        if (err) {
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <lfs_dir_alloc+0x38>
            return err;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	e058      	b.n	8006c26 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	3301      	adds	r3, #1
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	dde5      	ble.n	8006b4c <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2200      	movs	r2, #0
 8006b84:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8006b86:	6879      	ldr	r1, [r7, #4]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8006b90:	2004      	movs	r0, #4
 8006b92:	9003      	str	r0, [sp, #12]
 8006b94:	9202      	str	r2, [sp, #8]
 8006b96:	2200      	movs	r2, #0
 8006b98:	9201      	str	r2, [sp, #4]
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	2304      	movs	r3, #4
 8006b9e:	460a      	mov	r2, r1
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7fd f9f8 	bl	8003f98 <lfs_bd_read>
 8006ba8:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fd f987 	bl	8003ec2 <lfs_fromle32>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d005      	beq.n	8006bcc <lfs_dir_alloc+0x90>
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006bc6:	d001      	beq.n	8006bcc <lfs_dir_alloc+0x90>
        return err;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	e02c      	b.n	8006c26 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	dd0e      	ble.n	8006bf4 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	689a      	ldr	r2, [r3, #8]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be0:	3301      	adds	r3, #1
 8006be2:	f043 0301 	orr.w	r3, r3, #1
 8006be6:	4619      	mov	r1, r3
 8006be8:	4610      	mov	r0, r2
 8006bea:	f7fd f91f 	bl	8003e2c <lfs_alignup>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2204      	movs	r2, #4
 8006bf8:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c00:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	2200      	movs	r2, #0
 8006c06:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c0e:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c16:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2200      	movs	r2, #0
 8006c22:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b092      	sub	sp, #72	@ 0x48
 8006c32:	af04      	add	r7, sp, #16
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	607a      	str	r2, [r7, #4]
 8006c3a:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8006c3c:	f107 0310 	add.w	r3, r7, #16
 8006c40:	4619      	mov	r1, r3
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f7ff ff7a 	bl	8006b3c <lfs_dir_alloc>
 8006c48:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 8006c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <lfs_dir_split+0x26>
        return err;
 8006c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c52:	e03c      	b.n	8006cce <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	7ddb      	ldrb	r3, [r3, #23]
 8006c58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8006c68:	f107 0110 	add.w	r1, r7, #16
 8006c6c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006c70:	9302      	str	r3, [sp, #8]
 8006c72:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 f879 	bl	8006d78 <lfs_dir_compact>
 8006c86:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 8006c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	da01      	bge.n	8006c92 <lfs_dir_split+0x64>
        return res;
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c90:	e01d      	b.n	8006cce <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	3320      	adds	r3, #32
 8006caa:	4619      	mov	r1, r3
 8006cac:	4610      	mov	r0, r2
 8006cae:	f7fd fd15 	bl	80046dc <lfs_pair_cmp>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d109      	bne.n	8006ccc <lfs_dir_split+0x9e>
 8006cb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d105      	bne.n	8006ccc <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3738      	adds	r7, #56	@ 0x38
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b086      	sub	sp, #24
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8006ce6:	68b8      	ldr	r0, [r7, #8]
 8006ce8:	f7fd fe0b 	bl	8004902 <lfs_tag_dsize>
 8006cec:	4602      	mov	r2, r0
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	441a      	add	r2, r3
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	601a      	str	r2, [r3, #0]
    return 0;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b086      	sub	sp, #24
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	60f8      	str	r0, [r7, #12]
 8006d0a:	60b9      	str	r1, [r7, #8]
 8006d0c:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	6859      	ldr	r1, [r3, #4]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	f7ff fd1d 	bl	800675c <lfs_dir_commitattr>
 8006d22:	4603      	mov	r3, r0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3718      	adds	r7, #24
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	dd11      	ble.n	8006d64 <lfs_dir_needsrelocation+0x38>
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	3301      	adds	r3, #1
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006d4a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d4c:	3201      	adds	r2, #1
 8006d4e:	f042 0201 	orr.w	r2, r2, #1
 8006d52:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d56:	fb01 f202 	mul.w	r2, r1, r2
 8006d5a:	1a9b      	subs	r3, r3, r2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <lfs_dir_needsrelocation+0x38>
 8006d60:	2301      	movs	r3, #1
 8006d62:	e000      	b.n	8006d66 <lfs_dir_needsrelocation+0x3a>
 8006d64:	2300      	movs	r3, #0
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	b2db      	uxtb	r3, r3
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b0a4      	sub	sp, #144	@ 0x90
 8006d7c:	af0a      	add	r7, sp, #40	@ 0x28
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
 8006d84:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8006d86:	2300      	movs	r3, #0
 8006d88:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f7ff ffcc 	bl	8006d2c <lfs_dir_needsrelocation>
 8006d94:	4603      	mov	r3, r0
 8006d96:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	1c5a      	adds	r2, r3, #1
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8006da4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00e      	beq.n	8006dca <lfs_dir_compact+0x52>
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2200      	movs	r2, #0
 8006db0:	657a      	str	r2, [r7, #84]	@ 0x54
 8006db2:	2201      	movs	r2, #1
 8006db4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006db6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8006dba:	4611      	mov	r1, r2
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7fd fc8d 	bl	80046dc <lfs_pair_cmp>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f040 8155 	bne.w	8007074 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8006dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006dde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006de0:	2300      	movs	r3, #0
 8006de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d004      	beq.n	8006df8 <lfs_dir_compact+0x80>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006df4:	3b08      	subs	r3, #8
 8006df6:	e003      	b.n	8006e00 <lfs_dir_compact+0x88>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8006e00:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	4619      	mov	r1, r3
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f7fd fc05 	bl	8004618 <lfs_bd_erase>
 8006e0e:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8006e10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d006      	beq.n	8006e24 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8006e16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e18:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006e1c:	f000 812c 	beq.w	8007078 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8006e20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e22:	e188      	b.n	8007136 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fd f855 	bl	8003ed8 <lfs_tole32>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8006e3a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8006e3e:	2304      	movs	r3, #4
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f7ff fc55 	bl	80066f0 <lfs_dir_commitprog>
 8006e46:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fd f838 	bl	8003ec2 <lfs_fromle32>
 8006e52:	4602      	mov	r2, r0
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	609a      	str	r2, [r3, #8]
            if (err) {
 8006e58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d006      	beq.n	8006e6c <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8006e5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e60:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006e64:	f000 810a 	beq.w	800707c <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8006e68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e6a:	e164      	b.n	8007136 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8006e6c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8006e70:	425b      	negs	r3, r3
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	637a      	str	r2, [r7, #52]	@ 0x34
 8006e7a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8006e7e:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 8006e80:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8006e84:	9208      	str	r2, [sp, #32]
 8006e86:	4aae      	ldr	r2, [pc, #696]	@ (8007140 <lfs_dir_compact+0x3c8>)
 8006e88:	9207      	str	r2, [sp, #28]
 8006e8a:	9306      	str	r3, [sp, #24]
 8006e8c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8006e90:	9305      	str	r3, [sp, #20]
 8006e92:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8006e96:	9304      	str	r3, [sp, #16]
 8006e98:	2300      	movs	r3, #0
 8006e9a:	9303      	str	r3, [sp, #12]
 8006e9c:	4ba9      	ldr	r3, [pc, #676]	@ (8007144 <lfs_dir_compact+0x3cc>)
 8006e9e:	9302      	str	r3, [sp, #8]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	9301      	str	r3, [sp, #4]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006eac:	2200      	movs	r2, #0
 8006eae:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f7fe fad7 	bl	8005464 <lfs_dir_traverse>
 8006eb6:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 8006eb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d006      	beq.n	8006ecc <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8006ebe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ec0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006ec4:	f000 80dc 	beq.w	8007080 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8006ec8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006eca:	e134      	b.n	8007136 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	3318      	adds	r3, #24
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fd fbe8 	bl	80046a6 <lfs_pair_isnull>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	f083 0301 	eor.w	r3, r3, #1
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d022      	beq.n	8006f28 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	3318      	adds	r3, #24
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fd fc69 	bl	80047be <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	7ddb      	ldrb	r3, [r3, #23]
 8006ef0:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8006ef4:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8006ef6:	4a94      	ldr	r2, [pc, #592]	@ (8007148 <lfs_dir_compact+0x3d0>)
 8006ef8:	431a      	orrs	r2, r3
                        dir->tail);
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8006efe:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f7ff fc2a 	bl	800675c <lfs_dir_commitattr>
 8006f08:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	3318      	adds	r3, #24
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fd fc3b 	bl	800478a <lfs_pair_fromle32>
                if (err) {
 8006f14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d006      	beq.n	8006f28 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8006f1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f1c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006f20:	f000 80b0 	beq.w	8007084 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8006f24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f26:	e106      	b.n	8007136 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8006f28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	605a      	str	r2, [r3, #4]
 8006f32:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8006f34:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006f38:	f083 0301 	eor.w	r3, r3, #1
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d011      	beq.n	8006f66 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8006f48:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fd fceb 	bl	800492a <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006f5e:	4611      	mov	r1, r2
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fd fce2 	bl	800492a <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8006f6c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006f70:	4611      	mov	r1, r2
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fd fcd9 	bl	800492a <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8006f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006f7e:	f023 0303 	bic.w	r3, r3, #3
 8006f82:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8006f84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006f88:	461a      	mov	r2, r3
 8006f8a:	68b9      	ldr	r1, [r7, #8]
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f7ff fa39 	bl	8006404 <lfs_dir_getgstate>
 8006f92:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8006f94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <lfs_dir_compact+0x226>
                return err;
 8006f9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f9c:	e0cb      	b.n	8007136 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8006f9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fd fce6 	bl	8004974 <lfs_gstate_iszero>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	f083 0301 	eor.w	r3, r3, #1
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d016      	beq.n	8006fe2 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8006fb4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fd fd81 	bl	8004ac0 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8006fbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006fc2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8006fc6:	4a61      	ldr	r2, [pc, #388]	@ (800714c <lfs_dir_compact+0x3d4>)
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f7ff fbc7 	bl	800675c <lfs_dir_commitattr>
 8006fce:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8006fd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d005      	beq.n	8006fe2 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8006fd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fd8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006fdc:	d054      	beq.n	8007088 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8006fde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fe0:	e0a9      	b.n	8007136 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8006fe2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f7ff fc37 	bl	800685c <lfs_dir_commitcrc>
 8006fee:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8006ff0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d005      	beq.n	8007002 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8006ff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ff8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006ffc:	d046      	beq.n	800708c <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8006ffe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007000:	e099      	b.n	8007136 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8007002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007008:	6992      	ldr	r2, [r2, #24]
 800700a:	fbb3 f1f2 	udiv	r1, r3, r2
 800700e:	fb01 f202 	mul.w	r2, r1, r2
 8007012:	1a9b      	subs	r3, r3, r2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d006      	beq.n	8007026 <lfs_dir_compact+0x2ae>
 8007018:	4b4d      	ldr	r3, [pc, #308]	@ (8007150 <lfs_dir_compact+0x3d8>)
 800701a:	4a4e      	ldr	r2, [pc, #312]	@ (8007154 <lfs_dir_compact+0x3dc>)
 800701c:	f640 0106 	movw	r1, #2054	@ 0x806
 8007020:	484d      	ldr	r0, [pc, #308]	@ (8007158 <lfs_dir_compact+0x3e0>)
 8007022:	f004 ffc3 	bl	800bfac <__assert_func>
            lfs_pair_swap(dir->pair);
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	4618      	mov	r0, r3
 800702a:	f7fd fb27 	bl	800467c <lfs_pair_swap>
            dir->count = end - begin;
 800702e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8007032:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	b29a      	uxth	r2, r3
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 800703e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8007044:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	3348      	adds	r3, #72	@ 0x48
 800704e:	2200      	movs	r2, #0
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	605a      	str	r2, [r3, #4]
 8007054:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8007056:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800705a:	f083 0301 	eor.w	r3, r3, #1
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d065      	beq.n	8007130 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	333c      	adds	r3, #60	@ 0x3c
 800706a:	3230      	adds	r2, #48	@ 0x30
 800706c:	ca07      	ldmia	r2, {r0, r1, r2}
 800706e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8007072:	e05d      	b.n	8007130 <lfs_dir_compact+0x3b8>
        goto relocate;
 8007074:	bf00      	nop
 8007076:	e00a      	b.n	800708e <lfs_dir_compact+0x316>
                    goto relocate;
 8007078:	bf00      	nop
 800707a:	e008      	b.n	800708e <lfs_dir_compact+0x316>
                    goto relocate;
 800707c:	bf00      	nop
 800707e:	e006      	b.n	800708e <lfs_dir_compact+0x316>
                    goto relocate;
 8007080:	bf00      	nop
 8007082:	e004      	b.n	800708e <lfs_dir_compact+0x316>
                        goto relocate;
 8007084:	bf00      	nop
 8007086:	e002      	b.n	800708e <lfs_dir_compact+0x316>
                        goto relocate;
 8007088:	bf00      	nop
 800708a:	e000      	b.n	800708e <lfs_dir_compact+0x316>
                    goto relocate;
 800708c:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 800708e:	2301      	movs	r3, #1
 8007090:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	3310      	adds	r3, #16
 8007098:	4619      	mov	r1, r3
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f7fc ff57 	bl	8003f4e <lfs_cache_drop>
        if (!tired) {
 80070a0:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80070a4:	f083 0301 	eor.w	r3, r3, #1
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d009      	beq.n	80070c2 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	4a2a      	ldr	r2, [pc, #168]	@ (800715c <lfs_dir_compact+0x3e4>)
 80070b4:	9200      	str	r2, [sp, #0]
 80070b6:	f640 0218 	movw	r2, #2072	@ 0x818
 80070ba:	4927      	ldr	r1, [pc, #156]	@ (8007158 <lfs_dir_compact+0x3e0>)
 80070bc:	4828      	ldr	r0, [pc, #160]	@ (8007160 <lfs_dir_compact+0x3e8>)
 80070be:	f005 f9cb 	bl	800c458 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2200      	movs	r2, #0
 80070c6:	617a      	str	r2, [r7, #20]
 80070c8:	2201      	movs	r2, #1
 80070ca:	61ba      	str	r2, [r7, #24]
 80070cc:	f107 0214 	add.w	r2, r7, #20
 80070d0:	4611      	mov	r1, r2
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fd fb02 	bl	80046dc <lfs_pair_cmp>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10c      	bne.n	80070f8 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	4a1e      	ldr	r2, [pc, #120]	@ (800715c <lfs_dir_compact+0x3e4>)
 80070e4:	9200      	str	r2, [sp, #0]
 80070e6:	f640 021d 	movw	r2, #2077	@ 0x81d
 80070ea:	491b      	ldr	r1, [pc, #108]	@ (8007158 <lfs_dir_compact+0x3e0>)
 80070ec:	481d      	ldr	r0, [pc, #116]	@ (8007164 <lfs_dir_compact+0x3ec>)
 80070ee:	f005 f9b3 	bl	800c458 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 80070f2:	f06f 031b 	mvn.w	r3, #27
 80070f6:	e01e      	b.n	8007136 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	3304      	adds	r3, #4
 80070fc:	4619      	mov	r1, r3
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f7fd fee0 	bl	8004ec4 <lfs_alloc>
 8007104:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8007106:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00c      	beq.n	8007126 <lfs_dir_compact+0x3ae>
 800710c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800710e:	f113 0f1c 	cmn.w	r3, #28
 8007112:	d106      	bne.n	8007122 <lfs_dir_compact+0x3aa>
 8007114:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8007118:	f083 0301 	eor.w	r3, r3, #1
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <lfs_dir_compact+0x3ae>
            return err;
 8007122:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007124:	e007      	b.n	8007136 <lfs_dir_compact+0x3be>
        }

        tired = false;
 8007126:	2300      	movs	r3, #0
 8007128:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 800712c:	bf00      	nop
    while (true) {
 800712e:	e64c      	b.n	8006dca <lfs_dir_compact+0x52>
        break;
 8007130:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8007132:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007136:	4618      	mov	r0, r3
 8007138:	3768      	adds	r7, #104	@ 0x68
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	08006d03 	.word	0x08006d03
 8007144:	400ffc00 	.word	0x400ffc00
 8007148:	000ffc08 	.word	0x000ffc08
 800714c:	7ffffc0c 	.word	0x7ffffc0c
 8007150:	0800e1a0 	.word	0x0800e1a0
 8007154:	0800ee00 	.word	0x0800ee00
 8007158:	0800e038 	.word	0x0800e038
 800715c:	0800e148 	.word	0x0800e148
 8007160:	0800e1c8 	.word	0x0800e1c8
 8007164:	0800e1ec 	.word	0x0800e1ec

08007168 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8007168:	b590      	push	{r4, r7, lr}
 800716a:	b097      	sub	sp, #92	@ 0x5c
 800716c:	af0a      	add	r7, sp, #40	@ 0x28
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8007176:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800717a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 800717c:	e058      	b.n	8007230 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 800717e:	2300      	movs	r3, #0
 8007180:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8007182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007184:	b29b      	uxth	r3, r3
 8007186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007188:	b292      	uxth	r2, r2
 800718a:	4252      	negs	r2, r2
 800718c:	b292      	uxth	r2, r2
 800718e:	b212      	sxth	r2, r2
 8007190:	f107 0118 	add.w	r1, r7, #24
 8007194:	9108      	str	r1, [sp, #32]
 8007196:	4979      	ldr	r1, [pc, #484]	@ (800737c <lfs_dir_splittingcompact+0x214>)
 8007198:	9107      	str	r1, [sp, #28]
 800719a:	9206      	str	r2, [sp, #24]
 800719c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80071a0:	9205      	str	r2, [sp, #20]
 80071a2:	9304      	str	r3, [sp, #16]
 80071a4:	2300      	movs	r3, #0
 80071a6:	9303      	str	r3, [sp, #12]
 80071a8:	4b75      	ldr	r3, [pc, #468]	@ (8007380 <lfs_dir_splittingcompact+0x218>)
 80071aa:	9302      	str	r3, [sp, #8]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	9301      	str	r3, [sp, #4]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071b8:	2200      	movs	r2, #0
 80071ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f7fe f951 	bl	8005464 <lfs_dir_traverse>
 80071c2:	62b8      	str	r0, [r7, #40]	@ 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 80071c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <lfs_dir_splittingcompact+0x66>
                return err;
 80071ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071cc:	e0d2      	b.n	8007374 <lfs_dir_splittingcompact+0x20c>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 80071ce:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80071d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	2bfe      	cmp	r3, #254	@ 0xfe
 80071d8:	d822      	bhi.n	8007220 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071de:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 80071e0:	f1a3 0428 	sub.w	r4, r3, #40	@ 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    && size <= lfs_min(
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d004      	beq.n	80071f8 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    && size <= lfs_min(
 80071f4:	085b      	lsrs	r3, r3, #1
 80071f6:	e003      	b.n	8007200 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071fc:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 80071fe:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007204:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(
 8007206:	4611      	mov	r1, r2
 8007208:	4618      	mov	r0, r3
 800720a:	f7fc fe0f 	bl	8003e2c <lfs_alignup>
 800720e:	4603      	mov	r3, r0
 8007210:	4619      	mov	r1, r3
 8007212:	4620      	mov	r0, r4
 8007214:	f7fc fde5 	bl	8003de2 <lfs_min>
 8007218:	4602      	mov	r2, r0
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	429a      	cmp	r2, r3
 800721e:	d20e      	bcs.n	800723e <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8007220:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8007224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	085b      	lsrs	r3, r3, #1
 800722a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800722c:	4413      	add	r3, r2
 800722e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 8007230:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8007234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	2b01      	cmp	r3, #1
 800723a:	d8a0      	bhi.n	800717e <lfs_dir_splittingcompact+0x16>
 800723c:	e000      	b.n	8007240 <lfs_dir_splittingcompact+0xd8>
                break;
 800723e:	bf00      	nop
        }

        if (split == begin) {
 8007240:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007244:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007246:	429a      	cmp	r2, r3
 8007248:	d02d      	beq.n	80072a6 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800724a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724c:	b29b      	uxth	r3, r3
 800724e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8007252:	9202      	str	r2, [sp, #8]
 8007254:	9301      	str	r3, [sp, #4]
 8007256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	68b9      	ldr	r1, [r7, #8]
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f7ff fce4 	bl	8006c2e <lfs_dir_split>
 8007266:	6278      	str	r0, [r7, #36]	@ 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8007268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726a:	2b00      	cmp	r3, #0
 800726c:	d005      	beq.n	800727a <lfs_dir_splittingcompact+0x112>
 800726e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007270:	f113 0f1c 	cmn.w	r3, #28
 8007274:	d001      	beq.n	800727a <lfs_dir_splittingcompact+0x112>
            return err;
 8007276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007278:	e07c      	b.n	8007374 <lfs_dir_splittingcompact+0x20c>
        }

        if (err) {
 800727a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00e      	beq.n	800729e <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	493e      	ldr	r1, [pc, #248]	@ (8007384 <lfs_dir_splittingcompact+0x21c>)
 800728a:	9101      	str	r1, [sp, #4]
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	4613      	mov	r3, r2
 8007290:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 8007294:	493c      	ldr	r1, [pc, #240]	@ (8007388 <lfs_dir_splittingcompact+0x220>)
 8007296:	483d      	ldr	r0, [pc, #244]	@ (800738c <lfs_dir_splittingcompact+0x224>)
 8007298:	f005 f8de 	bl	800c458 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 800729c:	e004      	b.n	80072a8 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 800729e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    while (true) {
 80072a4:	e767      	b.n	8007176 <lfs_dir_splittingcompact+0xe>
            break;
 80072a6:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 80072a8:	68b9      	ldr	r1, [r7, #8]
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f7ff fd3e 	bl	8006d2c <lfs_dir_needsrelocation>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d04f      	beq.n	8007356 <lfs_dir_splittingcompact+0x1ee>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2200      	movs	r2, #0
 80072ba:	613a      	str	r2, [r7, #16]
 80072bc:	2201      	movs	r2, #1
 80072be:	617a      	str	r2, [r7, #20]
 80072c0:	f107 0210 	add.w	r2, r7, #16
 80072c4:	4611      	mov	r1, r2
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fd fa08 	bl	80046dc <lfs_pair_cmp>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d141      	bne.n	8007356 <lfs_dir_splittingcompact+0x1ee>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f003 fae0 	bl	800a898 <lfs_fs_size_>
 80072d8:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	da01      	bge.n	80072e4 <lfs_dir_splittingcompact+0x17c>
            return size;
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	e047      	b.n	8007374 <lfs_dir_splittingcompact+0x20c>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	1ad2      	subs	r2, r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072f0:	08db      	lsrs	r3, r3, #3
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d92f      	bls.n	8007356 <lfs_dir_splittingcompact+0x1ee>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	4a22      	ldr	r2, [pc, #136]	@ (8007384 <lfs_dir_splittingcompact+0x21c>)
 80072fc:	9200      	str	r2, [sp, #0]
 80072fe:	f640 0286 	movw	r2, #2182	@ 0x886
 8007302:	4921      	ldr	r1, [pc, #132]	@ (8007388 <lfs_dir_splittingcompact+0x220>)
 8007304:	4822      	ldr	r0, [pc, #136]	@ (8007390 <lfs_dir_splittingcompact+0x228>)
 8007306:	f005 f8a7 	bl	800c458 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800730a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800730e:	9302      	str	r3, [sp, #8]
 8007310:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007314:	9301      	str	r3, [sp, #4]
 8007316:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	68b9      	ldr	r1, [r7, #8]
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f7ff fc84 	bl	8006c2e <lfs_dir_split>
 8007326:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d005      	beq.n	800733a <lfs_dir_splittingcompact+0x1d2>
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	f113 0f1c 	cmn.w	r3, #28
 8007334:	d001      	beq.n	800733a <lfs_dir_splittingcompact+0x1d2>
                return err;
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	e01c      	b.n	8007374 <lfs_dir_splittingcompact+0x20c>
            }

            if (err) {
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d007      	beq.n	8007350 <lfs_dir_splittingcompact+0x1e8>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8007340:	4b10      	ldr	r3, [pc, #64]	@ (8007384 <lfs_dir_splittingcompact+0x21c>)
 8007342:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 8007346:	4910      	ldr	r1, [pc, #64]	@ (8007388 <lfs_dir_splittingcompact+0x220>)
 8007348:	4812      	ldr	r0, [pc, #72]	@ (8007394 <lfs_dir_splittingcompact+0x22c>)
 800734a:	f005 f885 	bl	800c458 <iprintf>
 800734e:	e002      	b.n	8007356 <lfs_dir_splittingcompact+0x1ee>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 8007350:	2301      	movs	r3, #1
 8007352:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8007356:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800735a:	9302      	str	r3, [sp, #8]
 800735c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007360:	9301      	str	r3, [sp, #4]
 8007362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	68b9      	ldr	r1, [r7, #8]
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f7ff fd03 	bl	8006d78 <lfs_dir_compact>
 8007372:	4603      	mov	r3, r0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3734      	adds	r7, #52	@ 0x34
 8007378:	46bd      	mov	sp, r7
 800737a:	bd90      	pop	{r4, r7, pc}
 800737c:	08006cd7 	.word	0x08006cd7
 8007380:	400ffc00 	.word	0x400ffc00
 8007384:	0800e148 	.word	0x0800e148
 8007388:	0800e038 	.word	0x0800e038
 800738c:	0800e224 	.word	0x0800e224
 8007390:	0800e254 	.word	0x0800e254
 8007394:	0800e284 	.word	0x0800e284

08007398 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8007398:	b5b0      	push	{r4, r5, r7, lr}
 800739a:	b0a6      	sub	sp, #152	@ 0x98
 800739c:	af0a      	add	r7, sp, #40	@ 0x28
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
 80073a4:	603b      	str	r3, [r7, #0]
    int state = 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 80073aa:	2300      	movs	r3, #0
 80073ac:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 80073b0:	2300      	movs	r3, #0
 80073b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80073b4:	e06d      	b.n	8007492 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 80073b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	4413      	add	r3, r2
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fd fa57 	bl	8004874 <lfs_tag_type3>
 80073c6:	4603      	mov	r3, r0
 80073c8:	461a      	mov	r2, r3
 80073ca:	f240 4301 	movw	r3, #1025	@ 0x401
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d106      	bne.n	80073e0 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	8a9b      	ldrh	r3, [r3, #20]
 80073d6:	3301      	adds	r3, #1
 80073d8:	b29a      	uxth	r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	829a      	strh	r2, [r3, #20]
 80073de:	e055      	b.n	800748c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 80073e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	4413      	add	r3, r2
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fd fa42 	bl	8004874 <lfs_tag_type3>
 80073f0:	4603      	mov	r3, r0
 80073f2:	461a      	mov	r2, r3
 80073f4:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d114      	bne.n	8007426 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	8a9b      	ldrh	r3, [r3, #20]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d106      	bne.n	8007412 <lfs_dir_relocatingcommit+0x7a>
 8007404:	4ba4      	ldr	r3, [pc, #656]	@ (8007698 <lfs_dir_relocatingcommit+0x300>)
 8007406:	4aa5      	ldr	r2, [pc, #660]	@ (800769c <lfs_dir_relocatingcommit+0x304>)
 8007408:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 800740c:	48a4      	ldr	r0, [pc, #656]	@ (80076a0 <lfs_dir_relocatingcommit+0x308>)
 800740e:	f004 fdcd 	bl	800bfac <__assert_func>
            dir->count -= 1;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	8a9b      	ldrh	r3, [r3, #20]
 8007416:	3b01      	subs	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 800741e:	2301      	movs	r3, #1
 8007420:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8007424:	e032      	b.n	800748c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8007426:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007428:	00db      	lsls	r3, r3, #3
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	4413      	add	r3, r2
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4618      	mov	r0, r3
 8007432:	f7fd f9ff 	bl	8004834 <lfs_tag_type1>
 8007436:	4603      	mov	r3, r0
 8007438:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800743c:	d126      	bne.n	800748c <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800743e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007440:	00db      	lsls	r3, r3, #3
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	4413      	add	r3, r2
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800744e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007450:	00db      	lsls	r3, r3, #3
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	4413      	add	r3, r2
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800745e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007460:	00db      	lsls	r3, r3, #3
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	4413      	add	r3, r2
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4618      	mov	r0, r3
 800746a:	f7fd fa13 	bl	8004894 <lfs_tag_chunk>
 800746e:	4603      	mov	r3, r0
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	bf14      	ite	ne
 8007478:	2301      	movne	r3, #1
 800747a:	2300      	moveq	r3, #0
 800747c:	b2da      	uxtb	r2, r3
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	3318      	adds	r3, #24
 8007486:	4618      	mov	r0, r3
 8007488:	f7fd f97f 	bl	800478a <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 800748c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800748e:	3301      	adds	r3, #1
 8007490:	667b      	str	r3, [r7, #100]	@ 0x64
 8007492:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007494:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007498:	429a      	cmp	r2, r3
 800749a:	db8c      	blt.n	80073b6 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 800749c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d02b      	beq.n	80074fc <lfs_dir_relocatingcommit+0x164>
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	8a9b      	ldrh	r3, [r3, #20]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d127      	bne.n	80074fc <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 80074ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d106      	bne.n	80074c2 <lfs_dir_relocatingcommit+0x12a>
 80074b4:	4b7b      	ldr	r3, [pc, #492]	@ (80076a4 <lfs_dir_relocatingcommit+0x30c>)
 80074b6:	4a79      	ldr	r2, [pc, #484]	@ (800769c <lfs_dir_relocatingcommit+0x304>)
 80074b8:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 80074bc:	4878      	ldr	r0, [pc, #480]	@ (80076a0 <lfs_dir_relocatingcommit+0x308>)
 80074be:	f004 fd75 	bl	800bfac <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80074c8:	4619      	mov	r1, r3
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f002 fd40 	bl	8009f50 <lfs_fs_pred>
 80074d0:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 80074d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d005      	beq.n	80074e4 <lfs_dir_relocatingcommit+0x14c>
 80074d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074da:	f113 0f02 	cmn.w	r3, #2
 80074de:	d001      	beq.n	80074e4 <lfs_dir_relocatingcommit+0x14c>
            return err;
 80074e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074e2:	e210      	b.n	8007906 <lfs_dir_relocatingcommit+0x56e>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 80074e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074e6:	f113 0f02 	cmn.w	r3, #2
 80074ea:	d007      	beq.n	80074fc <lfs_dir_relocatingcommit+0x164>
 80074ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074f0:	7ddb      	ldrb	r3, [r3, #23]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d002      	beq.n	80074fc <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 80074f6:	2302      	movs	r3, #2
 80074f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 80074fa:	e121      	b.n	8007740 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	7d9b      	ldrb	r3, [r3, #22]
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 80fb 	beq.w	80076fc <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 800750a:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8007510:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8007516:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007518:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800751c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8007522:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800752a:	2b00      	cmp	r3, #0
 800752c:	d004      	beq.n	8007538 <lfs_dir_relocatingcommit+0x1a0>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007534:	3b08      	subs	r3, #8
 8007536:	e003      	b.n	8007540 <lfs_dir_relocatingcommit+0x1a8>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8007540:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	3318      	adds	r3, #24
 8007546:	4618      	mov	r0, r3
 8007548:	f7fd f939 	bl	80047be <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	68da      	ldr	r2, [r3, #12]
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007558:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800755c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 800755e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007562:	9308      	str	r3, [sp, #32]
 8007564:	4b50      	ldr	r3, [pc, #320]	@ (80076a8 <lfs_dir_relocatingcommit+0x310>)
 8007566:	9307      	str	r3, [sp, #28]
 8007568:	2300      	movs	r3, #0
 800756a:	9306      	str	r3, [sp, #24]
 800756c:	2300      	movs	r3, #0
 800756e:	9305      	str	r3, [sp, #20]
 8007570:	2300      	movs	r3, #0
 8007572:	9304      	str	r3, [sp, #16]
 8007574:	2300      	movs	r3, #0
 8007576:	9303      	str	r3, [sp, #12]
 8007578:	2300      	movs	r3, #0
 800757a:	9302      	str	r3, [sp, #8]
 800757c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007580:	9301      	str	r3, [sp, #4]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	460b      	mov	r3, r1
 8007588:	68b9      	ldr	r1, [r7, #8]
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f7fd ff6a 	bl	8005464 <lfs_dir_traverse>
 8007590:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	3318      	adds	r3, #24
 8007596:	4618      	mov	r0, r3
 8007598:	f7fd f8f7 	bl	800478a <lfs_pair_fromle32>
        if (err) {
 800759c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00b      	beq.n	80075ba <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80075a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075a4:	f113 0f1c 	cmn.w	r3, #28
 80075a8:	f000 80aa 	beq.w	8007700 <lfs_dir_relocatingcommit+0x368>
 80075ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075ae:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80075b2:	f000 80a5 	beq.w	8007700 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 80075b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075b8:	e1a5      	b.n	8007906 <lfs_dir_relocatingcommit+0x56e>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 80075ba:	f107 031c 	add.w	r3, r7, #28
 80075be:	2200      	movs	r2, #0
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	605a      	str	r2, [r3, #4]
 80075c4:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80075cc:	f107 031c 	add.w	r3, r7, #28
 80075d0:	4611      	mov	r1, r2
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fd f9a9 	bl	800492a <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80075de:	f107 031c 	add.w	r3, r7, #28
 80075e2:	4611      	mov	r1, r2
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7fd f9a0 	bl	800492a <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80075f0:	f107 031c 	add.w	r3, r7, #28
 80075f4:	4611      	mov	r1, r2
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fd f997 	bl	800492a <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007602:	f023 0303 	bic.w	r3, r3, #3
 8007606:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8007608:	f107 031c 	add.w	r3, r7, #28
 800760c:	4618      	mov	r0, r3
 800760e:	f7fd f9b1 	bl	8004974 <lfs_gstate_iszero>
 8007612:	4603      	mov	r3, r0
 8007614:	f083 0301 	eor.w	r3, r3, #1
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d027      	beq.n	800766e <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800761e:	f107 031c 	add.w	r3, r7, #28
 8007622:	461a      	mov	r2, r3
 8007624:	68b9      	ldr	r1, [r7, #8]
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f7fe feec 	bl	8006404 <lfs_dir_getgstate>
 800762c:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 800762e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8007634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007636:	e166      	b.n	8007906 <lfs_dir_relocatingcommit+0x56e>
            }

            lfs_gstate_tole32(&delta);
 8007638:	f107 031c 	add.w	r3, r7, #28
 800763c:	4618      	mov	r0, r3
 800763e:	f7fd fa3f 	bl	8004ac0 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8007642:	f107 031c 	add.w	r3, r7, #28
 8007646:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800764a:	4a18      	ldr	r2, [pc, #96]	@ (80076ac <lfs_dir_relocatingcommit+0x314>)
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f7ff f885 	bl	800675c <lfs_dir_commitattr>
 8007652:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8007654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007656:	2b00      	cmp	r3, #0
 8007658:	d009      	beq.n	800766e <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800765a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800765c:	f113 0f1c 	cmn.w	r3, #28
 8007660:	d050      	beq.n	8007704 <lfs_dir_relocatingcommit+0x36c>
 8007662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007664:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8007668:	d04c      	beq.n	8007704 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 800766a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800766c:	e14b      	b.n	8007906 <lfs_dir_relocatingcommit+0x56e>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 800766e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007672:	4619      	mov	r1, r3
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff f8f1 	bl	800685c <lfs_dir_commitcrc>
 800767a:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 800767c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800767e:	2b00      	cmp	r3, #0
 8007680:	d016      	beq.n	80076b0 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8007682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007684:	f113 0f1c 	cmn.w	r3, #28
 8007688:	d03e      	beq.n	8007708 <lfs_dir_relocatingcommit+0x370>
 800768a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800768c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8007690:	d03a      	beq.n	8007708 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8007692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007694:	e137      	b.n	8007906 <lfs_dir_relocatingcommit+0x56e>
 8007696:	bf00      	nop
 8007698:	0800e2b0 	.word	0x0800e2b0
 800769c:	0800ee10 	.word	0x0800ee10
 80076a0:	0800e038 	.word	0x0800e038
 80076a4:	0800e2c0 	.word	0x0800e2c0
 80076a8:	08006d03 	.word	0x08006d03
 80076ac:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80076b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80076b6:	6992      	ldr	r2, [r2, #24]
 80076b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80076bc:	fb01 f202 	mul.w	r2, r1, r2
 80076c0:	1a9b      	subs	r3, r3, r2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d006      	beq.n	80076d4 <lfs_dir_relocatingcommit+0x33c>
 80076c6:	4b92      	ldr	r3, [pc, #584]	@ (8007910 <lfs_dir_relocatingcommit+0x578>)
 80076c8:	4a92      	ldr	r2, [pc, #584]	@ (8007914 <lfs_dir_relocatingcommit+0x57c>)
 80076ca:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 80076ce:	4892      	ldr	r0, [pc, #584]	@ (8007918 <lfs_dir_relocatingcommit+0x580>)
 80076d0:	f004 fc6c 	bl	800bfac <__assert_func>
        dir->off = commit.off;
 80076d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 80076da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	333c      	adds	r3, #60	@ 0x3c
 80076e6:	3230      	adds	r2, #48	@ 0x30
 80076e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80076ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	3348      	adds	r3, #72	@ 0x48
 80076f2:	2200      	movs	r2, #0
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	605a      	str	r2, [r3, #4]
 80076f8:	609a      	str	r2, [r3, #8]
 80076fa:	e021      	b.n	8007740 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 80076fc:	bf00      	nop
 80076fe:	e004      	b.n	800770a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8007700:	bf00      	nop
 8007702:	e002      	b.n	800770a <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8007704:	bf00      	nop
 8007706:	e000      	b.n	800770a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8007708:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3310      	adds	r3, #16
 800770e:	4619      	mov	r1, r3
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f7fc fc1c 	bl	8003f4e <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	8a9b      	ldrh	r3, [r3, #20]
 800771a:	9302      	str	r3, [sp, #8]
 800771c:	2300      	movs	r3, #0
 800771e:	9301      	str	r3, [sp, #4]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	68b9      	ldr	r1, [r7, #8]
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f7ff fd1b 	bl	8007168 <lfs_dir_splittingcompact>
 8007732:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8007734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007736:	2b00      	cmp	r3, #0
 8007738:	da01      	bge.n	800773e <lfs_dir_relocatingcommit+0x3a6>
        return state;
 800773a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800773c:	e0e3      	b.n	8007906 <lfs_dir_relocatingcommit+0x56e>
    }

    goto fixmlist;
 800773e:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	3304      	adds	r3, #4
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007752:	663b      	str	r3, [r7, #96]	@ 0x60
 8007754:	e0d2      	b.n	80078fc <lfs_dir_relocatingcommit+0x564>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8007756:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007758:	3308      	adds	r3, #8
 800775a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800775e:	4611      	mov	r1, r2
 8007760:	4618      	mov	r0, r3
 8007762:	f7fc ffbb 	bl	80046dc <lfs_pair_cmp>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	f040 80c4 	bne.w	80078f6 <lfs_dir_relocatingcommit+0x55e>
            d->m = *dir;
 800776e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	f103 0408 	add.w	r4, r3, #8
 8007776:	4615      	mov	r5, r2
 8007778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800777a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800777c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007780:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8007784:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007786:	3308      	adds	r3, #8
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	429a      	cmp	r2, r3
 800778c:	f000 80a9 	beq.w	80078e2 <lfs_dir_relocatingcommit+0x54a>
                for (int i = 0; i < attrcount; i++) {
 8007790:	2300      	movs	r3, #0
 8007792:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007794:	e07b      	b.n	800788e <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8007796:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007798:	00db      	lsls	r3, r3, #3
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	4413      	add	r3, r2
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fd f867 	bl	8004874 <lfs_tag_type3>
 80077a6:	4603      	mov	r3, r0
 80077a8:	461a      	mov	r2, r3
 80077aa:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d115      	bne.n	80077de <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 80077b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077b4:	889c      	ldrh	r4, [r3, #4]
 80077b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077b8:	00db      	lsls	r3, r3, #3
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	4413      	add	r3, r2
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fd f881 	bl	80048c8 <lfs_tag_id>
 80077c6:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80077c8:	429c      	cmp	r4, r3
 80077ca:	d108      	bne.n	80077de <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 80077cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077d2:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80077d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077da:	60da      	str	r2, [r3, #12]
 80077dc:	e054      	b.n	8007888 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80077de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077e0:	00db      	lsls	r3, r3, #3
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	4413      	add	r3, r2
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fd f843 	bl	8004874 <lfs_tag_type3>
 80077ee:	4603      	mov	r3, r0
 80077f0:	461a      	mov	r2, r3
 80077f2:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d11c      	bne.n	8007834 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 80077fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077fc:	889c      	ldrh	r4, [r3, #4]
 80077fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007800:	00db      	lsls	r3, r3, #3
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	4413      	add	r3, r2
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4618      	mov	r0, r3
 800780a:	f7fd f85d 	bl	80048c8 <lfs_tag_id>
 800780e:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8007810:	429c      	cmp	r4, r3
 8007812:	d90f      	bls.n	8007834 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 8007814:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007816:	889b      	ldrh	r3, [r3, #4]
 8007818:	3b01      	subs	r3, #1
 800781a:	b29a      	uxth	r2, r3
 800781c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800781e:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8007820:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007822:	799b      	ldrb	r3, [r3, #6]
 8007824:	2b02      	cmp	r3, #2
 8007826:	d12f      	bne.n	8007888 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8007828:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800782a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800782c:	1e5a      	subs	r2, r3, #1
 800782e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007830:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8007832:	e029      	b.n	8007888 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8007834:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007836:	00db      	lsls	r3, r3, #3
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	4413      	add	r3, r2
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4618      	mov	r0, r3
 8007840:	f7fd f818 	bl	8004874 <lfs_tag_type3>
 8007844:	4603      	mov	r3, r0
 8007846:	461a      	mov	r2, r3
 8007848:	f240 4301 	movw	r3, #1025	@ 0x401
 800784c:	429a      	cmp	r2, r3
 800784e:	d11b      	bne.n	8007888 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8007850:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007852:	889c      	ldrh	r4, [r3, #4]
 8007854:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	4413      	add	r3, r2
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4618      	mov	r0, r3
 8007860:	f7fd f832 	bl	80048c8 <lfs_tag_id>
 8007864:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8007866:	429c      	cmp	r4, r3
 8007868:	d30e      	bcc.n	8007888 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 800786a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800786c:	889b      	ldrh	r3, [r3, #4]
 800786e:	3301      	adds	r3, #1
 8007870:	b29a      	uxth	r2, r3
 8007872:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007874:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8007876:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007878:	799b      	ldrb	r3, [r3, #6]
 800787a:	2b02      	cmp	r3, #2
 800787c:	d104      	bne.n	8007888 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 800787e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007882:	1c5a      	adds	r2, r3, #1
 8007884:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007886:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 8007888:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800788a:	3301      	adds	r3, #1
 800788c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800788e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007890:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007894:	429a      	cmp	r2, r3
 8007896:	f6ff af7e 	blt.w	8007796 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 800789a:	e022      	b.n	80078e2 <lfs_dir_relocatingcommit+0x54a>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 800789c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800789e:	f103 0220 	add.w	r2, r3, #32
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	3320      	adds	r3, #32
 80078a6:	4619      	mov	r1, r3
 80078a8:	4610      	mov	r0, r2
 80078aa:	f7fc ff17 	bl	80046dc <lfs_pair_cmp>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d007      	beq.n	80078c4 <lfs_dir_relocatingcommit+0x52c>
                    d->id -= d->m.count;
 80078b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078b6:	889a      	ldrh	r2, [r3, #4]
 80078b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078ba:	8b9b      	ldrh	r3, [r3, #28]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	b29a      	uxth	r2, r3
 80078c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078c2:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80078c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078c6:	f103 0108 	add.w	r1, r3, #8
 80078ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078cc:	3320      	adds	r3, #32
 80078ce:	461a      	mov	r2, r3
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f7fe fd7b 	bl	80063cc <lfs_dir_fetch>
 80078d6:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 80078d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <lfs_dir_relocatingcommit+0x54a>
                    return err;
 80078de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078e0:	e011      	b.n	8007906 <lfs_dir_relocatingcommit+0x56e>
            while (d->id >= d->m.count && d->m.split) {
 80078e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078e4:	889a      	ldrh	r2, [r3, #4]
 80078e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078e8:	8b9b      	ldrh	r3, [r3, #28]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d303      	bcc.n	80078f6 <lfs_dir_relocatingcommit+0x55e>
 80078ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078f0:	7fdb      	ldrb	r3, [r3, #31]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1d2      	bne.n	800789c <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80078f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80078fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f47f af29 	bne.w	8007756 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 8007904:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8007906:	4618      	mov	r0, r3
 8007908:	3770      	adds	r7, #112	@ 0x70
 800790a:	46bd      	mov	sp, r7
 800790c:	bdb0      	pop	{r4, r5, r7, pc}
 800790e:	bf00      	nop
 8007910:	0800e1a0 	.word	0x0800e1a0
 8007914:	0800ee10 	.word	0x0800ee10
 8007918:	0800e038 	.word	0x0800e038

0800791c <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800791c:	b5b0      	push	{r4, r5, r7, lr}
 800791e:	b0bc      	sub	sp, #240	@ 0xf0
 8007920:	af04      	add	r7, sp, #16
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007932:	e045      	b.n	80079c0 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8007934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007938:	3308      	adds	r3, #8
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	429a      	cmp	r2, r3
 800793e:	d03a      	beq.n	80079b6 <lfs_dir_orphaningcommit+0x9a>
 8007940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007944:	3308      	adds	r3, #8
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	4611      	mov	r1, r2
 800794a:	4618      	mov	r0, r3
 800794c:	f7fc fec6 	bl	80046dc <lfs_pair_cmp>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d12f      	bne.n	80079b6 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8007956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800795a:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800795c:	2b01      	cmp	r3, #1
 800795e:	d12a      	bne.n	80079b6 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8007960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007966:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800796a:	2b00      	cmp	r3, #0
 800796c:	d023      	beq.n	80079b6 <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 800796e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800797a:	429a      	cmp	r2, r3
 800797c:	d91b      	bls.n	80079b6 <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 800797e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 fff2 	bl	800896c <lfs_file_outline>
 8007988:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 800798c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <lfs_dir_orphaningcommit+0x7e>
                return err;
 8007994:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007998:	e2ad      	b.n	8007ef6 <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 800799a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f001 f806 	bl	80089b0 <lfs_file_flush>
 80079a4:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 80079a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d002      	beq.n	80079b6 <lfs_dir_orphaningcommit+0x9a>
                return err;
 80079b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80079b4:	e29f      	b.n	8007ef6 <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80079b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80079c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1b5      	bne.n	8007934 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80079de:	461d      	mov	r5, r3
 80079e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80079e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 80079f2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f7ff fcca 	bl	8007398 <lfs_dir_relocatingcommit>
 8007a04:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8007a08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	da02      	bge.n	8007a16 <lfs_dir_orphaningcommit+0xfa>
        return state;
 8007a10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a14:	e26f      	b.n	8007ef6 <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fc fe5c 	bl	80046dc <lfs_pair_cmp>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d109      	bne.n	8007a3e <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	461d      	mov	r5, r3
 8007a2e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8007a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007a3a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8007a3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d14a      	bne.n	8007adc <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	3348      	adds	r3, #72	@ 0x48
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	68b9      	ldr	r1, [r7, #8]
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f7fe fcd8 	bl	8006404 <lfs_dir_getgstate>
 8007a54:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 8007a58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <lfs_dir_orphaningcommit+0x14a>
            return err;
 8007a60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a64:	e247      	b.n	8007ef6 <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8007a66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 8007a6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	3318      	adds	r3, #24
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fc fea1 	bl	80047be <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	7ddb      	ldrb	r3, [r3, #23]
 8007a80:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8007a84:	051a      	lsls	r2, r3, #20
 8007a86:	4bc2      	ldr	r3, [pc, #776]	@ (8007d90 <lfs_dir_orphaningcommit+0x474>)
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	3318      	adds	r3, #24
 8007a90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a92:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007a96:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8007a9a:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	9001      	str	r0, [sp, #4]
 8007aa2:	2001      	movs	r0, #1
 8007aa4:	9000      	str	r0, [sp, #0]
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f7ff fc76 	bl	8007398 <lfs_dir_relocatingcommit>
 8007aac:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	3318      	adds	r3, #24
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7fc fe68 	bl	800478a <lfs_pair_fromle32>
        if (state < 0) {
 8007aba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	da02      	bge.n	8007ac8 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8007ac2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ac6:	e216      	b.n	8007ef6 <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8007ac8:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8007acc:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8007ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ad4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007ad8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8007adc:	2300      	movs	r3, #0
 8007ade:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 8007ae2:	e1fc      	b.n	8007ede <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8007ae4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8007ae8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007aec:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8007af0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007af4:	4ca7      	ldr	r4, [pc, #668]	@ (8007d94 <lfs_dir_orphaningcommit+0x478>)
 8007af6:	9403      	str	r4, [sp, #12]
 8007af8:	9102      	str	r1, [sp, #8]
 8007afa:	9201      	str	r2, [sp, #4]
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	4603      	mov	r3, r0
 8007b00:	f640 128c 	movw	r2, #2444	@ 0x98c
 8007b04:	49a4      	ldr	r1, [pc, #656]	@ (8007d98 <lfs_dir_orphaningcommit+0x47c>)
 8007b06:	48a5      	ldr	r0, [pc, #660]	@ (8007d9c <lfs_dir_orphaningcommit+0x480>)
 8007b08:	f004 fca6 	bl	800c458 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f103 0220 	add.w	r2, r3, #32
 8007b18:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fc fddc 	bl	80046dc <lfs_pair_cmp>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d107      	bne.n	8007b3a <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8007b2a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8007b32:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b3e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b42:	e037      	b.n	8007bb4 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8007b44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007b48:	f103 0208 	add.w	r2, r3, #8
 8007b4c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007b50:	4611      	mov	r1, r2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fc fdc2 	bl	80046dc <lfs_pair_cmp>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d109      	bne.n	8007b72 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8007b5e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8007b62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007b66:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8007b68:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007b6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007b70:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8007b72:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007b76:	799b      	ldrb	r3, [r3, #6]
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d116      	bne.n	8007baa <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8007b7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007b80:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8007b84:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007b88:	4611      	mov	r1, r2
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fc fda6 	bl	80046dc <lfs_pair_cmp>
 8007b90:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d109      	bne.n	8007baa <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8007b96:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8007b9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8007ba0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007ba4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007ba8:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8007baa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007bb4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1c3      	bne.n	8007b44 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8007bbc:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8007bc0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f002 fa74 	bl	800a0b4 <lfs_fs_parent>
 8007bcc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8007bd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	da07      	bge.n	8007be8 <lfs_dir_orphaningcommit+0x2cc>
 8007bd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bdc:	f113 0f02 	cmn.w	r3, #2
 8007be0:	d002      	beq.n	8007be8 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8007be2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007be6:	e186      	b.n	8007ef6 <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8007be8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bec:	f113 0f02 	cmn.w	r3, #2
 8007bf0:	bf14      	ite	ne
 8007bf2:	2301      	movne	r3, #1
 8007bf4:	2300      	moveq	r3, #0
 8007bf6:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 8007bfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bfe:	f113 0f02 	cmn.w	r3, #2
 8007c02:	f000 809e 	beq.w	8007d42 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8007c06:	2101      	movs	r1, #1
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f002 faeb 	bl	800a1e4 <lfs_fs_preporphans>
 8007c0e:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 8007c12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <lfs_dir_orphaningcommit+0x304>
                return err;
 8007c1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007c1e:	e16a      	b.n	8007ef6 <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8007c20:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8007c24:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	3330      	adds	r3, #48	@ 0x30
 8007c2c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8007c30:	4611      	mov	r1, r2
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fc ff04 	bl	8004a40 <lfs_gstate_hasmovehere>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d02d      	beq.n	8007c9a <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fc fe40 	bl	80048c8 <lfs_tag_id>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 8007c4e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007c50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c52:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 8007c56:	484f      	ldr	r0, [pc, #316]	@ (8007d94 <lfs_dir_orphaningcommit+0x478>)
 8007c58:	9002      	str	r0, [sp, #8]
 8007c5a:	9201      	str	r2, [sp, #4]
 8007c5c:	9300      	str	r3, [sp, #0]
 8007c5e:	460b      	mov	r3, r1
 8007c60:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 8007c64:	494c      	ldr	r1, [pc, #304]	@ (8007d98 <lfs_dir_orphaningcommit+0x47c>)
 8007c66:	484e      	ldr	r0, [pc, #312]	@ (8007da0 <lfs_dir_orphaningcommit+0x484>)
 8007c68:	f004 fbf6 	bl	800c458 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f002 fb06 	bl	800a284 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8007c78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fc fe23 	bl	80048c8 <lfs_tag_id>
 8007c82:	4603      	mov	r3, r0
 8007c84:	461a      	mov	r2, r3
 8007c86:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d205      	bcs.n	8007c9a <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8007c8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c92:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8007c96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8007c9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ca0:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 8007ca2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fc fd89 	bl	80047be <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8007cac:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8007cb0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d007      	beq.n	8007cc8 <lfs_dir_orphaningcommit+0x3ac>
 8007cb8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8007cbc:	029b      	lsls	r3, r3, #10
 8007cbe:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8007cc2:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8007cc6:	e000      	b.n	8007cca <lfs_dir_orphaningcommit+0x3ae>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ccc:	2300      	movs	r3, #0
 8007cce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cd6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007cda:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cdc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007ce0:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8007ce4:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8007ce8:	2000      	movs	r0, #0
 8007cea:	9001      	str	r0, [sp, #4]
 8007cec:	2002      	movs	r0, #2
 8007cee:	9000      	str	r0, [sp, #0]
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f7ff fb51 	bl	8007398 <lfs_dir_relocatingcommit>
 8007cf6:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8007cfa:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fc fd43 	bl	800478a <lfs_pair_fromle32>
            if (state < 0) {
 8007d04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	da02      	bge.n	8007d12 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8007d0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d10:	e0f1      	b.n	8007ef6 <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8007d12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d113      	bne.n	8007d42 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8007d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 8007d20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 8007d26:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8007d2a:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8007d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007d36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8007d40:	e0cd      	b.n	8007ede <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8007d42:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8007d46:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f002 f8ff 	bl	8009f50 <lfs_fs_pred>
 8007d52:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8007d56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d007      	beq.n	8007d6e <lfs_dir_orphaningcommit+0x452>
 8007d5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d62:	f113 0f02 	cmn.w	r3, #2
 8007d66:	d002      	beq.n	8007d6e <lfs_dir_orphaningcommit+0x452>
            return err;
 8007d68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d6c:	e0c3      	b.n	8007ef6 <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8007d6e:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d01a      	beq.n	8007dac <lfs_dir_orphaningcommit+0x490>
 8007d76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d7a:	f113 0f02 	cmn.w	r3, #2
 8007d7e:	d115      	bne.n	8007dac <lfs_dir_orphaningcommit+0x490>
 8007d80:	4b08      	ldr	r3, [pc, #32]	@ (8007da4 <lfs_dir_orphaningcommit+0x488>)
 8007d82:	4a09      	ldr	r2, [pc, #36]	@ (8007da8 <lfs_dir_orphaningcommit+0x48c>)
 8007d84:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 8007d88:	4803      	ldr	r0, [pc, #12]	@ (8007d98 <lfs_dir_orphaningcommit+0x47c>)
 8007d8a:	f004 f90f 	bl	800bfac <__assert_func>
 8007d8e:	bf00      	nop
 8007d90:	000ffc08 	.word	0x000ffc08
 8007d94:	0800e148 	.word	0x0800e148
 8007d98:	0800e038 	.word	0x0800e038
 8007d9c:	0800e2c8 	.word	0x0800e2c8
 8007da0:	0800e304 	.word	0x0800e304
 8007da4:	0800e348 	.word	0x0800e348
 8007da8:	0800ee2c 	.word	0x0800ee2c

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8007dac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007db0:	f113 0f02 	cmn.w	r3, #2
 8007db4:	f000 8093 	beq.w	8007ede <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	3330      	adds	r3, #48	@ 0x30
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fc fdf6 	bl	80049ae <lfs_gstate_hasorphans>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d011      	beq.n	8007dec <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8007dc8:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8007dcc:	425b      	negs	r3, r3
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	b25b      	sxtb	r3, r3
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f002 fa05 	bl	800a1e4 <lfs_fs_preporphans>
 8007dda:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 8007dde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 8007de6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dea:	e084      	b.n	8007ef6 <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8007dec:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8007df0:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	3330      	adds	r3, #48	@ 0x30
 8007df8:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fc fe1e 	bl	8004a40 <lfs_gstate_hasmovehere>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d01c      	beq.n	8007e44 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fc fd5a 	bl	80048c8 <lfs_tag_id>
 8007e14:	4603      	mov	r3, r0
 8007e16:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8007e1a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007e1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e1e:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 8007e22:	4837      	ldr	r0, [pc, #220]	@ (8007f00 <lfs_dir_orphaningcommit+0x5e4>)
 8007e24:	9002      	str	r0, [sp, #8]
 8007e26:	9201      	str	r2, [sp, #4]
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 8007e30:	4934      	ldr	r1, [pc, #208]	@ (8007f04 <lfs_dir_orphaningcommit+0x5e8>)
 8007e32:	4835      	ldr	r0, [pc, #212]	@ (8007f08 <lfs_dir_orphaningcommit+0x5ec>)
 8007e34:	f004 fb10 	bl	800c458 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f002 fa20 	bl	800a284 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8007e44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 8007e4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 8007e50:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fc fcb2 	bl	80047be <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8007e5a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8007e5e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d007      	beq.n	8007e76 <lfs_dir_orphaningcommit+0x55a>
 8007e66:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8007e6a:	029b      	lsls	r3, r3, #10
 8007e6c:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8007e70:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8007e74:	e000      	b.n	8007e78 <lfs_dir_orphaningcommit+0x55c>
 8007e76:	2300      	movs	r3, #0
 8007e78:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e7e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8007e82:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8007e86:	051a      	lsls	r2, r3, #20
 8007e88:	4b20      	ldr	r3, [pc, #128]	@ (8007f0c <lfs_dir_orphaningcommit+0x5f0>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e8e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007e92:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e98:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8007e9c:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	9001      	str	r0, [sp, #4]
 8007ea4:	2002      	movs	r0, #2
 8007ea6:	9000      	str	r0, [sp, #0]
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f7ff fa75 	bl	8007398 <lfs_dir_relocatingcommit>
 8007eae:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8007eb2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fc fc67 	bl	800478a <lfs_pair_fromle32>
            if (state < 0) {
 8007ebc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	da02      	bge.n	8007eca <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8007ec4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ec8:	e015      	b.n	8007ef6 <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8007eca:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8007ece:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8007ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ed6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007eda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8007ede:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	f43f adfe 	beq.w	8007ae4 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8007ee8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <lfs_dir_orphaningcommit+0x5d8>
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e000      	b.n	8007ef6 <lfs_dir_orphaningcommit+0x5da>
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	37e0      	adds	r7, #224	@ 0xe0
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bdb0      	pop	{r4, r5, r7, pc}
 8007efe:	bf00      	nop
 8007f00:	0800e148 	.word	0x0800e148
 8007f04:	0800e038 	.word	0x0800e038
 8007f08:	0800e304 	.word	0x0800e304
 8007f0c:	000ffc08 	.word	0x000ffc08

08007f10 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
 8007f1c:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	68b9      	ldr	r1, [r7, #8]
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f7ff fcf9 	bl	800791c <lfs_dir_orphaningcommit>
 8007f2a:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	da01      	bge.n	8007f36 <lfs_dir_commit+0x26>
        return orphans;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	e00d      	b.n	8007f52 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d009      	beq.n	8007f50 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f002 fac2 	bl	800a4c8 <lfs_fs_deorphan>
 8007f44:	6138      	str	r0, [r7, #16]
        if (err) {
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <lfs_dir_commit+0x40>
            return err;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	e000      	b.n	8007f52 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8007f5a:	b590      	push	{r4, r7, lr}
 8007f5c:	b087      	sub	sp, #28
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f6e:	69db      	ldr	r3, [r3, #28]
 8007f70:	3b08      	subs	r3, #8
 8007f72:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f7c:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <lfs_ctz_index+0x2e>
        return 0;
 8007f84:	2300      	movs	r3, #0
 8007f86:	e01c      	b.n	8007fc2 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fb ff7e 	bl	8003e8e <lfs_popc>
 8007f92:	4603      	mov	r3, r0
 8007f94:	3302      	adds	r3, #2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	1ad2      	subs	r2, r2, r3
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa2:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	fb02 f303 	mul.w	r3, r2, r3
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	1ad4      	subs	r4, r2, r3
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f7fb ff6c 	bl	8003e8e <lfs_popc>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	1ae2      	subs	r2, r4, r3
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	601a      	str	r2, [r3, #0]
    return i;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	371c      	adds	r7, #28
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd90      	pop	{r4, r7, pc}

08007fca <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8007fca:	b590      	push	{r4, r7, lr}
 8007fcc:	b08f      	sub	sp, #60	@ 0x3c
 8007fce:	af04      	add	r7, sp, #16
 8007fd0:	60f8      	str	r0, [r7, #12]
 8007fd2:	60b9      	str	r1, [r7, #8]
 8007fd4:	607a      	str	r2, [r7, #4]
 8007fd6:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d108      	bne.n	8007ff0 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8007fde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fe0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007fe4:	601a      	str	r2, [r3, #0]
        *off = 0;
 8007fe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fe8:	2200      	movs	r2, #0
 8007fea:	601a      	str	r2, [r3, #0]
        return 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	e053      	b.n	8008098 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	617b      	str	r3, [r7, #20]
 8007ff6:	f107 0314 	add.w	r3, r7, #20
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f7ff ffac 	bl	8007f5a <lfs_ctz_index>
 8008002:	4603      	mov	r3, r0
 8008004:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8008006:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800800a:	4619      	mov	r1, r3
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f7ff ffa4 	bl	8007f5a <lfs_ctz_index>
 8008012:	4603      	mov	r3, r0
 8008014:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8008016:	e034      	b.n	8008082 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8008018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800801a:	6a3b      	ldr	r3, [r7, #32]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	3301      	adds	r3, #1
 8008020:	4618      	mov	r0, r3
 8008022:	f7fb ff15 	bl	8003e50 <lfs_npw2>
 8008026:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8008028:	1e5c      	subs	r4, r3, #1
 800802a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800802c:	f7fb ff20 	bl	8003e70 <lfs_ctz>
 8008030:	4603      	mov	r3, r0
 8008032:	4619      	mov	r1, r3
 8008034:	4620      	mov	r0, r4
 8008036:	f7fb fed4 	bl	8003de2 <lfs_min>
 800803a:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	69fa      	ldr	r2, [r7, #28]
 8008040:	0092      	lsls	r2, r2, #2
 8008042:	2104      	movs	r1, #4
 8008044:	9103      	str	r1, [sp, #12]
 8008046:	4639      	mov	r1, r7
 8008048:	9102      	str	r1, [sp, #8]
 800804a:	9201      	str	r2, [sp, #4]
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	2304      	movs	r3, #4
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	68b9      	ldr	r1, [r7, #8]
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f7fb ff9f 	bl	8003f98 <lfs_bd_read>
 800805a:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	4618      	mov	r0, r3
 8008060:	f7fb ff2f 	bl	8003ec2 <lfs_fromle32>
 8008064:	4603      	mov	r3, r0
 8008066:	603b      	str	r3, [r7, #0]
        if (err) {
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <lfs_ctz_find+0xa8>
            return err;
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	e012      	b.n	8008098 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8008072:	2201      	movs	r2, #1
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	fa02 f303 	lsl.w	r3, r2, r3
 800807a:	461a      	mov	r2, r3
 800807c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807e:	1a9b      	subs	r3, r3, r2
 8008080:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 8008082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	429a      	cmp	r2, r3
 8008088:	d8c6      	bhi.n	8008018 <lfs_ctz_find+0x4e>
    }

    *block = head;
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800808e:	601a      	str	r2, [r3, #0]
    *off = pos;
 8008090:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008092:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008094:	601a      	str	r2, [r3, #0]
    return 0;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	372c      	adds	r7, #44	@ 0x2c
 800809c:	46bd      	mov	sp, r7
 800809e:	bd90      	pop	{r4, r7, pc}

080080a0 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b092      	sub	sp, #72	@ 0x48
 80080a4:	af04      	add	r7, sp, #16
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	607a      	str	r2, [r7, #4]
 80080ac:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80080ae:	f107 0320 	add.w	r3, r7, #32
 80080b2:	4619      	mov	r1, r3
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f7fc ff05 	bl	8004ec4 <lfs_alloc>
 80080ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 80080bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <lfs_ctz_extend+0x26>
            return err;
 80080c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c4:	e0eb      	b.n	800829e <lfs_ctz_extend+0x1fe>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	4619      	mov	r1, r3
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f7fc faa4 	bl	8004618 <lfs_bd_erase>
 80080d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 80080d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d006      	beq.n	80080e6 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 80080d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080da:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80080de:	f000 80cd 	beq.w	800827c <lfs_ctz_extend+0x1dc>
                    goto relocate;
                }
                return err;
 80080e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e4:	e0db      	b.n	800829e <lfs_ctz_extend+0x1fe>
            }

            if (size == 0) {
 80080e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d107      	bne.n	80080fc <lfs_ctz_extend+0x5c>
                *block = nblock;
 80080ec:	6a3a      	ldr	r2, [r7, #32]
 80080ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080f0:	601a      	str	r2, [r3, #0]
                *off = 0;
 80080f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080f4:	2200      	movs	r2, #0
 80080f6:	601a      	str	r2, [r3, #0]
                return 0;
 80080f8:	2300      	movs	r3, #0
 80080fa:	e0d0      	b.n	800829e <lfs_ctz_extend+0x1fe>
            }

            lfs_size_t noff = size - 1;
 80080fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080fe:	3b01      	subs	r3, #1
 8008100:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8008102:	f107 031c 	add.w	r3, r7, #28
 8008106:	4619      	mov	r1, r3
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f7ff ff26 	bl	8007f5a <lfs_ctz_index>
 800810e:	4603      	mov	r3, r0
 8008110:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	3301      	adds	r3, #1
 8008116:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800811c:	69da      	ldr	r2, [r3, #28]
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	429a      	cmp	r2, r3
 8008122:	d046      	beq.n	80081b2 <lfs_ctz_extend+0x112>
                for (lfs_off_t i = 0; i < noff; i++) {
 8008124:	2300      	movs	r3, #0
 8008126:	637b      	str	r3, [r7, #52]	@ 0x34
 8008128:	e037      	b.n	800819a <lfs_ctz_extend+0xfa>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 800812a:	69fa      	ldr	r2, [r7, #28]
 800812c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800812e:	1ad2      	subs	r2, r2, r3
 8008130:	2301      	movs	r3, #1
 8008132:	9303      	str	r3, [sp, #12]
 8008134:	f107 0317 	add.w	r3, r7, #23
 8008138:	9302      	str	r3, [sp, #8]
 800813a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	4613      	mov	r3, r2
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	2100      	movs	r1, #0
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f7fb ff25 	bl	8003f98 <lfs_bd_read>
 800814e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8008150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <lfs_ctz_extend+0xba>
                        return err;
 8008156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008158:	e01e      	b.n	8008198 <lfs_ctz_extend+0xf8>
                    }

                    err = lfs_bd_prog(lfs,
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	2201      	movs	r2, #1
 800815e:	9203      	str	r2, [sp, #12]
 8008160:	f107 0217 	add.w	r2, r7, #23
 8008164:	9202      	str	r2, [sp, #8]
 8008166:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008168:	9201      	str	r2, [sp, #4]
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	2301      	movs	r3, #1
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	68b9      	ldr	r1, [r7, #8]
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f7fc f9a2 	bl	80044bc <lfs_bd_prog>
 8008178:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 800817a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800817c:	2b00      	cmp	r3, #0
 800817e:	d007      	beq.n	8008190 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8008180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008182:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8008186:	d101      	bne.n	800818c <lfs_ctz_extend+0xec>
                            goto relocate;
 8008188:	bf00      	nop
                    goto relocate;
 800818a:	e07a      	b.n	8008282 <lfs_ctz_extend+0x1e2>
                        }
                        return err;
 800818c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800818e:	e003      	b.n	8008198 <lfs_ctz_extend+0xf8>
                for (lfs_off_t i = 0; i < noff; i++) {
 8008190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008192:	3301      	adds	r3, #1
 8008194:	637b      	str	r3, [r7, #52]	@ 0x34
 8008196:	e000      	b.n	800819a <lfs_ctz_extend+0xfa>
                return err;
 8008198:	e081      	b.n	800829e <lfs_ctz_extend+0x1fe>
                for (lfs_off_t i = 0; i < noff; i++) {
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800819e:	429a      	cmp	r2, r3
 80081a0:	d3c3      	bcc.n	800812a <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 80081a2:	6a3a      	ldr	r2, [r7, #32]
 80081a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081a6:	601a      	str	r2, [r3, #0]
                *off = noff;
 80081a8:	69fa      	ldr	r2, [r7, #28]
 80081aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081ac:	601a      	str	r2, [r3, #0]
                return 0;
 80081ae:	2300      	movs	r3, #0
 80081b0:	e075      	b.n	800829e <lfs_ctz_extend+0x1fe>
            }

            // append block
            index += 1;
 80081b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b4:	3301      	adds	r3, #1
 80081b6:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 80081b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081ba:	f7fb fe59 	bl	8003e70 <lfs_ctz>
 80081be:	4603      	mov	r3, r0
 80081c0:	3301      	adds	r3, #1
 80081c2:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 80081c8:	2300      	movs	r3, #0
 80081ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80081cc:	e049      	b.n	8008262 <lfs_ctz_extend+0x1c2>
                nhead = lfs_tole32(nhead);
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fb fe81 	bl	8003ed8 <lfs_tole32>
 80081d6:	4603      	mov	r3, r0
 80081d8:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 80081da:	6a3b      	ldr	r3, [r7, #32]
 80081dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081de:	0092      	lsls	r2, r2, #2
 80081e0:	2104      	movs	r1, #4
 80081e2:	9103      	str	r1, [sp, #12]
 80081e4:	f107 0118 	add.w	r1, r7, #24
 80081e8:	9102      	str	r1, [sp, #8]
 80081ea:	9201      	str	r2, [sp, #4]
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	2301      	movs	r3, #1
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	68b9      	ldr	r1, [r7, #8]
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f7fc f961 	bl	80044bc <lfs_bd_prog>
 80081fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fb fe5f 	bl	8003ec2 <lfs_fromle32>
 8008204:	4603      	mov	r3, r0
 8008206:	61bb      	str	r3, [r7, #24]
                if (err) {
 8008208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800820a:	2b00      	cmp	r3, #0
 800820c:	d005      	beq.n	800821a <lfs_ctz_extend+0x17a>
                    if (err == LFS_ERR_CORRUPT) {
 800820e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008210:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8008214:	d034      	beq.n	8008280 <lfs_ctz_extend+0x1e0>
                        goto relocate;
                    }
                    return err;
 8008216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008218:	e041      	b.n	800829e <lfs_ctz_extend+0x1fe>
                }

                if (i != skips-1) {
 800821a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821c:	3b01      	subs	r3, #1
 800821e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008220:	429a      	cmp	r2, r3
 8008222:	d01b      	beq.n	800825c <lfs_ctz_extend+0x1bc>
                    err = lfs_bd_read(lfs,
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008228:	0092      	lsls	r2, r2, #2
 800822a:	2104      	movs	r1, #4
 800822c:	9103      	str	r1, [sp, #12]
 800822e:	f107 0118 	add.w	r1, r7, #24
 8008232:	9102      	str	r1, [sp, #8]
 8008234:	9201      	str	r2, [sp, #4]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	2304      	movs	r3, #4
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	2100      	movs	r1, #0
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f7fb feaa 	bl	8003f98 <lfs_bd_read>
 8008244:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	4618      	mov	r0, r3
 800824a:	f7fb fe3a 	bl	8003ec2 <lfs_fromle32>
 800824e:	4603      	mov	r3, r0
 8008250:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8008252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <lfs_ctz_extend+0x1bc>
                        return err;
 8008258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800825a:	e020      	b.n	800829e <lfs_ctz_extend+0x1fe>
            for (lfs_off_t i = 0; i < skips; i++) {
 800825c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825e:	3301      	adds	r3, #1
 8008260:	633b      	str	r3, [r7, #48]	@ 0x30
 8008262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008266:	429a      	cmp	r2, r3
 8008268:	d3b1      	bcc.n	80081ce <lfs_ctz_extend+0x12e>
                    }
                }
            }

            *block = nblock;
 800826a:	6a3a      	ldr	r2, [r7, #32]
 800826c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800826e:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8008270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008272:	009a      	lsls	r2, r3, #2
 8008274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008276:	601a      	str	r2, [r3, #0]
            return 0;
 8008278:	2300      	movs	r3, #0
 800827a:	e010      	b.n	800829e <lfs_ctz_extend+0x1fe>
                    goto relocate;
 800827c:	bf00      	nop
 800827e:	e000      	b.n	8008282 <lfs_ctz_extend+0x1e2>
                        goto relocate;
 8008280:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8008282:	6a3b      	ldr	r3, [r7, #32]
 8008284:	4a08      	ldr	r2, [pc, #32]	@ (80082a8 <lfs_ctz_extend+0x208>)
 8008286:	9200      	str	r2, [sp, #0]
 8008288:	f640 32a6 	movw	r2, #2982	@ 0xba6
 800828c:	4907      	ldr	r1, [pc, #28]	@ (80082ac <lfs_ctz_extend+0x20c>)
 800828e:	4808      	ldr	r0, [pc, #32]	@ (80082b0 <lfs_ctz_extend+0x210>)
 8008290:	f004 f8e2 	bl	800c458 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8008294:	68b9      	ldr	r1, [r7, #8]
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f7fb fe59 	bl	8003f4e <lfs_cache_drop>
    while (true) {
 800829c:	e707      	b.n	80080ae <lfs_ctz_extend+0xe>
    }
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3738      	adds	r7, #56	@ 0x38
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	0800e148 	.word	0x0800e148
 80082ac:	0800e038 	.word	0x0800e038
 80082b0:	0800e1c8 	.word	0x0800e1c8

080082b4 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b090      	sub	sp, #64	@ 0x40
 80082b8:	af04      	add	r7, sp, #16
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
 80082c0:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 80082c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d101      	bne.n	80082cc <lfs_ctz_traverse+0x18>
        return 0;
 80082c8:	2300      	movs	r3, #0
 80082ca:	e06b      	b.n	80083a4 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80082cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ce:	3b01      	subs	r3, #1
 80082d0:	61fb      	str	r3, [r7, #28]
 80082d2:	f107 031c 	add.w	r3, r7, #28
 80082d6:	4619      	mov	r1, r3
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f7ff fe3e 	bl	8007f5a <lfs_ctz_index>
 80082de:	4603      	mov	r3, r0
 80082e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 80082e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082e4:	6839      	ldr	r1, [r7, #0]
 80082e6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80082e8:	4798      	blx	r3
 80082ea:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 80082ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d001      	beq.n	80082f6 <lfs_ctz_traverse+0x42>
            return err;
 80082f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f4:	e056      	b.n	80083a4 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 80082f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d101      	bne.n	8008300 <lfs_ctz_traverse+0x4c>
            return 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	e051      	b.n	80083a4 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8008300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	f1c3 0302 	rsb	r3, r3, #2
 800830a:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 800830c:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 800830e:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8008310:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8008312:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8008314:	9303      	str	r3, [sp, #12]
 8008316:	f107 0314 	add.w	r3, r7, #20
 800831a:	9302      	str	r3, [sp, #8]
 800831c:	2300      	movs	r3, #0
 800831e:	9301      	str	r3, [sp, #4]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	4613      	mov	r3, r2
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	68b9      	ldr	r1, [r7, #8]
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f7fb fe34 	bl	8003f98 <lfs_bd_read>
 8008330:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	4618      	mov	r0, r3
 8008336:	f7fb fdc4 	bl	8003ec2 <lfs_fromle32>
 800833a:	4603      	mov	r3, r0
 800833c:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	4618      	mov	r0, r3
 8008342:	f7fb fdbe 	bl	8003ec2 <lfs_fromle32>
 8008346:	4603      	mov	r3, r0
 8008348:	61bb      	str	r3, [r7, #24]
        if (err) {
 800834a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <lfs_ctz_traverse+0xa0>
            return err;
 8008350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008352:	e027      	b.n	80083a4 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8008354:	2300      	movs	r3, #0
 8008356:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008358:	e012      	b.n	8008380 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 800835a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	3330      	adds	r3, #48	@ 0x30
 8008360:	443b      	add	r3, r7
 8008362:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8008366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008368:	4611      	mov	r1, r2
 800836a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800836c:	4798      	blx	r3
 800836e:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 8008370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <lfs_ctz_traverse+0xc6>
                return err;
 8008376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008378:	e014      	b.n	80083a4 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 800837a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837c:	3301      	adds	r3, #1
 800837e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	3b01      	subs	r3, #1
 8008384:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008386:	429a      	cmp	r2, r3
 8008388:	dbe7      	blt.n	800835a <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	3b01      	subs	r3, #1
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	3330      	adds	r3, #48	@ 0x30
 8008392:	443b      	add	r3, r7
 8008394:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8008398:	603b      	str	r3, [r7, #0]
        index -= count;
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 80083a2:	e79e      	b.n	80082e2 <lfs_ctz_traverse+0x2e>
    }
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3730      	adds	r7, #48	@ 0x30
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 80083ac:	b5b0      	push	{r4, r5, r7, lr}
 80083ae:	b09a      	sub	sp, #104	@ 0x68
 80083b0:	af02      	add	r7, sp, #8
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
 80083b8:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	f003 0302 	and.w	r3, r3, #2
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d008      	beq.n	80083d6 <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f002 fa2f 	bl	800a828 <lfs_fs_forceconsistency>
 80083ca:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 80083cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <lfs_file_opencfg_+0x2a>
            return err;
 80083d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083d4:	e1b0      	b.n	8008738 <lfs_file_opencfg_+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80083da:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	2200      	movs	r2, #0
 80083e6:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2200      	movs	r2, #0
 80083ec:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2200      	movs	r2, #0
 80083f2:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	f103 0108 	add.w	r1, r3, #8
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	3304      	adds	r3, #4
 80083fe:	1d3a      	adds	r2, r7, #4
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f7fe f87b 	bl	80064fc <lfs_dir_find>
 8008406:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8008408:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800840a:	2b00      	cmp	r3, #0
 800840c:	da0c      	bge.n	8008428 <lfs_file_opencfg_+0x7c>
 800840e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008410:	f113 0f02 	cmn.w	r3, #2
 8008414:	d105      	bne.n	8008422 <lfs_file_opencfg_+0x76>
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	889b      	ldrh	r3, [r3, #4]
 800841a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800841e:	4293      	cmp	r3, r2
 8008420:	d102      	bne.n	8008428 <lfs_file_opencfg_+0x7c>
        err = tag;
 8008422:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008424:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8008426:	e17c      	b.n	8008722 <lfs_file_opencfg_+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2201      	movs	r2, #1
 800842c:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 800842e:	68b9      	ldr	r1, [r7, #8]
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f7fc fc74 	bl	8004d1e <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8008436:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008438:	f113 0f02 	cmn.w	r3, #2
 800843c:	d14e      	bne.n	80084dc <lfs_file_opencfg_+0x130>
        if (!(flags & LFS_O_CREAT)) {
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008444:	2b00      	cmp	r3, #0
 8008446:	d103      	bne.n	8008450 <lfs_file_opencfg_+0xa4>
            err = LFS_ERR_NOENT;
 8008448:	f06f 0301 	mvn.w	r3, #1
 800844c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800844e:	e168      	b.n	8008722 <lfs_file_opencfg_+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4618      	mov	r0, r3
 8008454:	f7f7 fe9c 	bl	8000190 <strlen>
 8008458:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800845e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008460:	429a      	cmp	r2, r3
 8008462:	d903      	bls.n	800846c <lfs_file_opencfg_+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8008464:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8008468:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800846a:	e15a      	b.n	8008722 <lfs_file_opencfg_+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f103 0108 	add.w	r1, r3, #8
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	889b      	ldrh	r3, [r3, #4]
 8008476:	029b      	lsls	r3, r3, #10
 8008478:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800847c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008482:	2300      	movs	r3, #0
 8008484:	633b      	str	r3, [r7, #48]	@ 0x30
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	889b      	ldrh	r3, [r3, #4]
 800848a:	029a      	lsls	r2, r3, #10
 800848c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800848e:	4313      	orrs	r3, r2
 8008490:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008494:	637b      	str	r3, [r7, #52]	@ 0x34
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	63bb      	str	r3, [r7, #56]	@ 0x38
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	889b      	ldrh	r3, [r3, #4]
 800849e:	029b      	lsls	r3, r3, #10
 80084a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084aa:	2300      	movs	r3, #0
 80084ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80084ae:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80084b2:	2303      	movs	r3, #3
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f7ff fd2b 	bl	8007f10 <lfs_dir_commit>
 80084ba:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 80084bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084be:	f113 0f1c 	cmn.w	r3, #28
 80084c2:	d001      	beq.n	80084c8 <lfs_file_opencfg_+0x11c>
 80084c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084c6:	e001      	b.n	80084cc <lfs_file_opencfg_+0x120>
 80084c8:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 80084cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 80084ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f040 8125 	bne.w	8008720 <lfs_file_opencfg_+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 80084d6:	4b9a      	ldr	r3, [pc, #616]	@ (8008740 <lfs_file_opencfg_+0x394>)
 80084d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084da:	e044      	b.n	8008566 <lfs_file_opencfg_+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d003      	beq.n	80084ee <lfs_file_opencfg_+0x142>
        err = LFS_ERR_EXIST;
 80084e6:	f06f 0310 	mvn.w	r3, #16
 80084ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 80084ec:	e119      	b.n	8008722 <lfs_file_opencfg_+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 80084ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7fc f9bf 	bl	8004874 <lfs_tag_type3>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d003      	beq.n	8008504 <lfs_file_opencfg_+0x158>
        err = LFS_ERR_ISDIR;
 80084fc:	f06f 0314 	mvn.w	r3, #20
 8008500:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8008502:	e10e      	b.n	8008722 <lfs_file_opencfg_+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00e      	beq.n	800852c <lfs_file_opencfg_+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	889b      	ldrh	r3, [r3, #4]
 8008512:	029b      	lsls	r3, r3, #10
 8008514:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008518:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800851c:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008522:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	631a      	str	r2, [r3, #48]	@ 0x30
 800852a:	e01c      	b.n	8008566 <lfs_file_opencfg_+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	889b      	ldrh	r3, [r3, #4]
 8008536:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8008538:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800853c:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8008544:	9200      	str	r2, [sp, #0]
 8008546:	4a7f      	ldr	r2, [pc, #508]	@ (8008744 <lfs_file_opencfg_+0x398>)
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f7fc fe39 	bl	80051c0 <lfs_dir_get>
 800854e:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 8008550:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008552:	2b00      	cmp	r3, #0
 8008554:	da02      	bge.n	800855c <lfs_file_opencfg_+0x1b0>
            err = tag;
 8008556:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008558:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800855a:	e0e2      	b.n	8008722 <lfs_file_opencfg_+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	3328      	adds	r3, #40	@ 0x28
 8008560:	4618      	mov	r0, r3
 8008562:	f7fc fafd 	bl	8004b60 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8008566:	2300      	movs	r3, #0
 8008568:	657b      	str	r3, [r7, #84]	@ 0x54
 800856a:	e063      	b.n	8008634 <lfs_file_opencfg_+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008570:	f003 0301 	and.w	r3, r3, #1
 8008574:	2b00      	cmp	r3, #0
 8008576:	d03c      	beq.n	80085f2 <lfs_file_opencfg_+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008582:	6859      	ldr	r1, [r3, #4]
 8008584:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008586:	4613      	mov	r3, r2
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	4413      	add	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	440b      	add	r3, r1
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8008596:	051a      	lsls	r2, r3, #20
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	889b      	ldrh	r3, [r3, #4]
 800859c:	029b      	lsls	r3, r3, #10
 800859e:	ea42 0103 	orr.w	r1, r2, r3
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085a6:	6858      	ldr	r0, [r3, #4]
 80085a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80085aa:	4613      	mov	r3, r2
 80085ac:	005b      	lsls	r3, r3, #1
 80085ae:	4413      	add	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4403      	add	r3, r0
 80085b4:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80085b6:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085be:	6859      	ldr	r1, [r3, #4]
 80085c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80085c2:	4613      	mov	r3, r2
 80085c4:	005b      	lsls	r3, r3, #1
 80085c6:	4413      	add	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	4603      	mov	r3, r0
 80085d2:	4a5d      	ldr	r2, [pc, #372]	@ (8008748 <lfs_file_opencfg_+0x39c>)
 80085d4:	4621      	mov	r1, r4
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f7fc fdf2 	bl	80051c0 <lfs_dir_get>
 80085dc:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 80085de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	da06      	bge.n	80085f2 <lfs_file_opencfg_+0x246>
 80085e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085e6:	f113 0f02 	cmn.w	r3, #2
 80085ea:	d002      	beq.n	80085f2 <lfs_file_opencfg_+0x246>
                err = res;
 80085ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 80085f0:	e097      	b.n	8008722 <lfs_file_opencfg_+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f6:	f003 0302 	and.w	r3, r3, #2
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d017      	beq.n	800862e <lfs_file_opencfg_+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008602:	6859      	ldr	r1, [r3, #4]
 8008604:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008606:	4613      	mov	r3, r2
 8008608:	005b      	lsls	r3, r3, #1
 800860a:	4413      	add	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	440b      	add	r3, r1
 8008610:	689a      	ldr	r2, [r3, #8]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008616:	429a      	cmp	r2, r3
 8008618:	d903      	bls.n	8008622 <lfs_file_opencfg_+0x276>
                err = LFS_ERR_NOSPC;
 800861a:	f06f 031b 	mvn.w	r3, #27
 800861e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8008620:	e07f      	b.n	8008722 <lfs_file_opencfg_+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008626:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800862e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008630:	3301      	adds	r3, #1
 8008632:	657b      	str	r3, [r7, #84]	@ 0x54
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800863c:	429a      	cmp	r2, r3
 800863e:	d395      	bcc.n	800856c <lfs_file_opencfg_+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d005      	beq.n	8008656 <lfs_file_opencfg_+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008654:	e010      	b.n	8008678 <lfs_file_opencfg_+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800865a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800865c:	4618      	mov	r0, r3
 800865e:	f7fb fc5f 	bl	8003f20 <lfs_malloc>
 8008662:	4602      	mov	r2, r0
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800866c:	2b00      	cmp	r3, #0
 800866e:	d103      	bne.n	8008678 <lfs_file_opencfg_+0x2cc>
            err = LFS_ERR_NOMEM;
 8008670:	f06f 030b 	mvn.w	r3, #11
 8008674:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8008676:	e054      	b.n	8008722 <lfs_file_opencfg_+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	3340      	adds	r3, #64	@ 0x40
 800867c:	4619      	mov	r1, r3
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f7fb fc74 	bl	8003f6c <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8008684:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008686:	4618      	mov	r0, r3
 8008688:	f7fc f8f4 	bl	8004874 <lfs_tag_type3>
 800868c:	4603      	mov	r3, r0
 800868e:	461a      	mov	r2, r3
 8008690:	f240 2301 	movw	r3, #513	@ 0x201
 8008694:	429a      	cmp	r2, r3
 8008696:	d141      	bne.n	800871c <lfs_file_opencfg_+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	f06f 0201 	mvn.w	r2, #1
 800869e:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 80086a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fc f920 	bl	80048e8 <lfs_tag_size>
 80086a8:	4602      	mov	r2, r0
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2200      	movs	r2, #0
 80086c6:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d020      	beq.n	800871c <lfs_file_opencfg_+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	889b      	ldrh	r3, [r3, #4]
 80086e4:	029c      	lsls	r4, r3, #10
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086ea:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fb fb77 	bl	8003de2 <lfs_min>
 80086f4:	4603      	mov	r3, r0
 80086f6:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80086f8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	4613      	mov	r3, r2
 8008704:	4a0f      	ldr	r2, [pc, #60]	@ (8008744 <lfs_file_opencfg_+0x398>)
 8008706:	4629      	mov	r1, r5
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f7fc fd59 	bl	80051c0 <lfs_dir_get>
 800870e:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 8008710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008712:	2b00      	cmp	r3, #0
 8008714:	da02      	bge.n	800871c <lfs_file_opencfg_+0x370>
                err = res;
 8008716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008718:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 800871a:	e002      	b.n	8008722 <lfs_file_opencfg_+0x376>
            }
        }
    }

    return 0;
 800871c:	2300      	movs	r3, #0
 800871e:	e00b      	b.n	8008738 <lfs_file_opencfg_+0x38c>
            goto cleanup;
 8008720:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008726:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_close_(lfs, file);
 800872e:	68b9      	ldr	r1, [r7, #8]
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f000 f823 	bl	800877c <lfs_file_close_>
    return err;
 8008736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8008738:	4618      	mov	r0, r3
 800873a:	3760      	adds	r7, #96	@ 0x60
 800873c:	46bd      	mov	sp, r7
 800873e:	bdb0      	pop	{r4, r5, r7, pc}
 8008740:	20100000 	.word	0x20100000
 8008744:	700ffc00 	.word	0x700ffc00
 8008748:	7ffffc00 	.word	0x7ffffc00

0800874c <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 800874c:	b580      	push	{r7, lr}
 800874e:	b088      	sub	sp, #32
 8008750:	af02      	add	r7, sp, #8
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
 8008758:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 800875a:	4b07      	ldr	r3, [pc, #28]	@ (8008778 <lfs_file_open_+0x2c>)
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	68b9      	ldr	r1, [r7, #8]
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f7ff fe21 	bl	80083ac <lfs_file_opencfg_>
 800876a:	6178      	str	r0, [r7, #20]
    return err;
 800876c:	697b      	ldr	r3, [r7, #20]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	0800ee44 	.word	0x0800ee44

0800877c <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 8008786:	6839      	ldr	r1, [r7, #0]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f9e5 	bl	8008b58 <lfs_file_sync_>
 800878e:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7fc faa1 	bl	8004cda <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d104      	bne.n	80087ac <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fb fbc6 	bl	8003f38 <lfs_free>
    }

    return err;
 80087ac:	68fb      	ldr	r3, [r7, #12]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 80087b8:	b590      	push	{r4, r7, lr}
 80087ba:	b08d      	sub	sp, #52	@ 0x34
 80087bc:	af06      	add	r7, sp, #24
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80087c2:	f107 030c 	add.w	r3, r7, #12
 80087c6:	4619      	mov	r1, r3
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7fc fb7b 	bl	8004ec4 <lfs_alloc>
 80087ce:	6138      	str	r0, [r7, #16]
        if (err) {
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d001      	beq.n	80087da <lfs_file_relocate+0x22>
            return err;
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	e0bb      	b.n	8008952 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f7fb ff1a 	bl	8004618 <lfs_bd_erase>
 80087e4:	6138      	str	r0, [r7, #16]
        if (err) {
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d006      	beq.n	80087fa <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80087f2:	f000 809b 	beq.w	800892c <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	e0ab      	b.n	8008952 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 80087fa:	2300      	movs	r3, #0
 80087fc:	617b      	str	r3, [r7, #20]
 80087fe:	e069      	b.n	80088d4 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008804:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d027      	beq.n	800885c <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	f103 0008 	add.w	r0, r3, #8
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	889b      	ldrh	r3, [r3, #4]
 8008824:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8008826:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800882a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800882e:	2101      	movs	r1, #1
 8008830:	9105      	str	r1, [sp, #20]
 8008832:	f107 010b 	add.w	r1, r7, #11
 8008836:	9104      	str	r1, [sp, #16]
 8008838:	6979      	ldr	r1, [r7, #20]
 800883a:	9103      	str	r1, [sp, #12]
 800883c:	9302      	str	r3, [sp, #8]
 800883e:	4b47      	ldr	r3, [pc, #284]	@ (800895c <lfs_file_relocate+0x1a4>)
 8008840:	9301      	str	r3, [sp, #4]
 8008842:	9200      	str	r2, [sp, #0]
 8008844:	4623      	mov	r3, r4
 8008846:	2200      	movs	r2, #0
 8008848:	4601      	mov	r1, r0
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7fc fcd3 	bl	80051f6 <lfs_dir_getread>
 8008850:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d01e      	beq.n	8008896 <lfs_file_relocate+0xde>
                    return err;
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	e07a      	b.n	8008952 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 8008862:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	1ad4      	subs	r4, r2, r3
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008870:	2201      	movs	r2, #1
 8008872:	9203      	str	r2, [sp, #12]
 8008874:	f107 020b 	add.w	r2, r7, #11
 8008878:	9202      	str	r2, [sp, #8]
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	9201      	str	r2, [sp, #4]
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	4623      	mov	r3, r4
 8008882:	4602      	mov	r2, r0
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7fb fb87 	bl	8003f98 <lfs_bd_read>
 800888a:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <lfs_file_relocate+0xde>
                    return err;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	e05d      	b.n	8008952 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f103 0110 	add.w	r1, r3, #16
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2201      	movs	r2, #1
 80088a2:	9203      	str	r2, [sp, #12]
 80088a4:	f107 020b 	add.w	r2, r7, #11
 80088a8:	9202      	str	r2, [sp, #8]
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	9201      	str	r2, [sp, #4]
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	2301      	movs	r3, #1
 80088b2:	4602      	mov	r2, r0
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7fb fe01 	bl	80044bc <lfs_bd_prog>
 80088ba:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d005      	beq.n	80088ce <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80088c8:	d032      	beq.n	8008930 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	e041      	b.n	8008952 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	3301      	adds	r3, #1
 80088d2:	617b      	str	r3, [r7, #20]
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d390      	bcc.n	8008800 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	69d9      	ldr	r1, [r3, #28]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ec:	461a      	mov	r2, r3
 80088ee:	f003 fea1 	bl	800c634 <memcpy>
        file->cache.block = lfs->pcache.block;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	691a      	ldr	r2, [r3, #16]
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	695a      	ldr	r2, [r3, #20]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	699a      	ldr	r2, [r3, #24]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	3310      	adds	r3, #16
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7fb fb2b 	bl	8003f6c <lfs_cache_zero>

        file->block = nblock;
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008920:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 8008928:	2300      	movs	r3, #0
 800892a:	e012      	b.n	8008952 <lfs_file_relocate+0x19a>
                goto relocate;
 800892c:	bf00      	nop
 800892e:	e000      	b.n	8008932 <lfs_file_relocate+0x17a>
                    goto relocate;
 8008930:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	4a0a      	ldr	r2, [pc, #40]	@ (8008960 <lfs_file_relocate+0x1a8>)
 8008936:	9200      	str	r2, [sp, #0]
 8008938:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 800893c:	4909      	ldr	r1, [pc, #36]	@ (8008964 <lfs_file_relocate+0x1ac>)
 800893e:	480a      	ldr	r0, [pc, #40]	@ (8008968 <lfs_file_relocate+0x1b0>)
 8008940:	f003 fd8a 	bl	800c458 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	3310      	adds	r3, #16
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7fb faff 	bl	8003f4e <lfs_cache_drop>
    while (true) {
 8008950:	e737      	b.n	80087c2 <lfs_file_relocate+0xa>
    }
}
 8008952:	4618      	mov	r0, r3
 8008954:	371c      	adds	r7, #28
 8008956:	46bd      	mov	sp, r7
 8008958:	bd90      	pop	{r4, r7, pc}
 800895a:	bf00      	nop
 800895c:	fff7fc00 	.word	0xfff7fc00
 8008960:	0800e148 	.word	0x0800e148
 8008964:	0800e038 	.word	0x0800e038
 8008968:	0800e1c8 	.word	0x0800e1c8

0800896c <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7fc fa09 	bl	8004d96 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7ff ff16 	bl	80087b8 <lfs_file_relocate>
 800898c:	60f8      	str	r0, [r7, #12]
    if (err) {
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <lfs_file_outline+0x2c>
        return err;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	e006      	b.n	80089a6 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800899c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
	...

080089b0 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80089b0:	b590      	push	{r4, r7, lr}
 80089b2:	b09f      	sub	sp, #124	@ 0x7c
 80089b4:	af02      	add	r7, sp, #8
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d011      	beq.n	80089ea <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d105      	bne.n	80089de <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	3340      	adds	r3, #64	@ 0x40
 80089d6:	4619      	mov	r1, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7fb fab8 	bl	8003f4e <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089e2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f000 80a4 	beq.w	8008b40 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089fc:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d176      	bne.n	8008af8 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8008a0a:	f107 030c 	add.w	r3, r7, #12
 8008a0e:	2254      	movs	r2, #84	@ 0x54
 8008a10:	2100      	movs	r1, #0
 8008a12:	4618      	mov	r0, r3
 8008a14:	f003 fd42 	bl	800c49c <memset>
                .ctz.head = file->ctz.head,
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 8008a1c:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 8008a22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a24:	2301      	movs	r3, #1
 8008a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 8008a2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8008a34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008a36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f7fb fa85 	bl	8003f4e <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8008a44:	e02b      	b.n	8008a9e <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8008a46:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8008a4a:	f107 010c 	add.w	r1, r7, #12
 8008a4e:	2301      	movs	r3, #1
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f921 	bl	8008c98 <lfs_file_flushedread>
 8008a56:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8008a58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	da01      	bge.n	8008a62 <lfs_file_flush+0xb2>
                    return res;
 8008a5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a60:	e06f      	b.n	8008b42 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8008a62:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8008a66:	2301      	movs	r3, #1
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fa1c 	bl	8008ea8 <lfs_file_flushedwrite>
 8008a70:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8008a72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	da01      	bge.n	8008a7c <lfs_file_flush+0xcc>
                    return res;
 8008a78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a7a:	e062      	b.n	8008b42 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a84:	d00b      	beq.n	8008a9e <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8008a86:	f107 030c 	add.w	r3, r7, #12
 8008a8a:	3340      	adds	r3, #64	@ 0x40
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7fb fa5d 	bl	8003f4e <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f7fb fa58 	bl	8003f4e <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d3cd      	bcc.n	8008a46 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7fb fc53 	bl	8004360 <lfs_bd_flush>
 8008aba:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8008abc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d026      	beq.n	8008b10 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8008ac2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ac4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8008ac8:	d001      	beq.n	8008ace <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8008aca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008acc:	e039      	b.n	8008b42 <lfs_file_flush+0x192>
                        goto relocate;
 8008ace:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b4c <lfs_file_flush+0x19c>)
 8008ad6:	9200      	str	r2, [sp, #0]
 8008ad8:	f640 522b 	movw	r2, #3371	@ 0xd2b
 8008adc:	491c      	ldr	r1, [pc, #112]	@ (8008b50 <lfs_file_flush+0x1a0>)
 8008ade:	481d      	ldr	r0, [pc, #116]	@ (8008b54 <lfs_file_flush+0x1a4>)
 8008ae0:	f003 fcba 	bl	800c458 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7ff fe66 	bl	80087b8 <lfs_file_relocate>
 8008aec:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8008aee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d0da      	beq.n	8008aaa <lfs_file_flush+0xfa>
                    return err;
 8008af4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008af6:	e024      	b.n	8008b42 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b00:	4619      	mov	r1, r3
 8008b02:	4610      	mov	r0, r2
 8008b04:	f7fb f95d 	bl	8003dc2 <lfs_max>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8008b0e:	e000      	b.n	8008b12 <lfs_file_flush+0x162>
                break;
 8008b10:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b32:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b3e:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3774      	adds	r7, #116	@ 0x74
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd90      	pop	{r4, r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	0800e148 	.word	0x0800e148
 8008b50:	0800e038 	.word	0x0800e038
 8008b54:	0800e1c8 	.word	0x0800e1c8

08008b58 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b090      	sub	sp, #64	@ 0x40
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	e08e      	b.n	8008c90 <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f7ff ff1b 	bl	80089b0 <lfs_file_flush>
 8008b7a:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 8008b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d007      	beq.n	8008b92 <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b86:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b90:	e07e      	b.n	8008c90 <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d077      	beq.n	8008c8e <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	3308      	adds	r3, #8
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7fb fd7f 	bl	80046a6 <lfs_pair_isnull>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	f083 0301 	eor.w	r3, r3, #1
 8008bae:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d06c      	beq.n	8008c8e <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10d      	bne.n	8008bdc <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f103 0110 	add.w	r1, r3, #16
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	2300      	movs	r3, #0
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7fb fc42 	bl	8004454 <lfs_bd_sync>
 8008bd0:	6338      	str	r0, [r7, #48]	@ 0x30
            if (err) {
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <lfs_file_sync_+0x84>
                return err;
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bda:	e059      	b.n	8008c90 <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008be0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d009      	beq.n	8008bfc <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8008be8:	f240 2301 	movw	r3, #513	@ 0x201
 8008bec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bfa:	e014      	b.n	8008c26 <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8008bfc:	f240 2302 	movw	r3, #514	@ 0x202
 8008c00:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008c08:	3228      	adds	r2, #40	@ 0x28
 8008c0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c0e:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8008c12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7fb ffba 	bl	8004b90 <lfs_ctz_tole32>
            buffer = &ctz;
 8008c1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008c20:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 8008c22:	2308      	movs	r3, #8
 8008c24:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	f103 0108 	add.w	r1, r3, #8
 8008c2c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008c2e:	051a      	lsls	r2, r3, #20
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	889b      	ldrh	r3, [r3, #4]
 8008c34:	029b      	lsls	r3, r3, #10
 8008c36:	431a      	orrs	r2, r3
 8008c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	61bb      	str	r3, [r7, #24]
 8008c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c40:	61fb      	str	r3, [r7, #28]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	889b      	ldrh	r3, [r3, #4]
 8008c46:	029a      	lsls	r2, r3, #10
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 8008c54:	623b      	str	r3, [r7, #32]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c5e:	f107 0218 	add.w	r2, r7, #24
 8008c62:	2302      	movs	r3, #2
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f7ff f953 	bl	8007f10 <lfs_dir_commit>
 8008c6a:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d007      	beq.n	8008c82 <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c76:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c80:	e006      	b.n	8008c90 <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3740      	adds	r7, #64	@ 0x40
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8008c98:	b5b0      	push	{r4, r5, r7, lr}
 8008c9a:	b090      	sub	sp, #64	@ 0x40
 8008c9c:	af06      	add	r7, sp, #24
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
 8008ca4:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d301      	bcc.n	8008cbe <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	e0b7      	b.n	8008e2e <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6838      	ldr	r0, [r7, #0]
 8008ccc:	f7fb f889 	bl	8003de2 <lfs_min>
 8008cd0:	6038      	str	r0, [r7, #0]
    nsize = size;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8008cd6:	e0a5      	b.n	8008e24 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d006      	beq.n	8008cf2 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008cec:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d130      	bne.n	8008d54 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d11c      	bne.n	8008d38 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008d10:	68b9      	ldr	r1, [r7, #8]
 8008d12:	3138      	adds	r1, #56	@ 0x38
 8008d14:	68b8      	ldr	r0, [r7, #8]
 8008d16:	303c      	adds	r0, #60	@ 0x3c
 8008d18:	9003      	str	r0, [sp, #12]
 8008d1a:	9102      	str	r1, [sp, #8]
 8008d1c:	9201      	str	r2, [sp, #4]
 8008d1e:	9300      	str	r3, [sp, #0]
 8008d20:	462b      	mov	r3, r5
 8008d22:	4622      	mov	r2, r4
 8008d24:	2100      	movs	r1, #0
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f7ff f94f 	bl	8007fca <lfs_ctz_find>
 8008d2c:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d009      	beq.n	8008d48 <lfs_file_flushedread+0xb0>
                    return err;
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	e07a      	b.n	8008e2e <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	f06f 0201 	mvn.w	r2, #1
 8008d3e:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d4c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d58:	69da      	ldr	r2, [r3, #28]
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	4619      	mov	r1, r3
 8008d62:	6a38      	ldr	r0, [r7, #32]
 8008d64:	f7fb f83d 	bl	8003de2 <lfs_min>
 8008d68:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d026      	beq.n	8008dc4 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	f103 0408 	add.w	r4, r3, #8
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d86:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	889b      	ldrh	r3, [r3, #4]
 8008d8c:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8008d8e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008d92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d96:	68b9      	ldr	r1, [r7, #8]
 8008d98:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8008d9a:	69b8      	ldr	r0, [r7, #24]
 8008d9c:	9005      	str	r0, [sp, #20]
 8008d9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008da0:	9004      	str	r0, [sp, #16]
 8008da2:	9103      	str	r1, [sp, #12]
 8008da4:	9302      	str	r3, [sp, #8]
 8008da6:	4b24      	ldr	r3, [pc, #144]	@ (8008e38 <lfs_file_flushedread+0x1a0>)
 8008da8:	9301      	str	r3, [sp, #4]
 8008daa:	9200      	str	r2, [sp, #0]
 8008dac:	462b      	mov	r3, r5
 8008dae:	2200      	movs	r2, #0
 8008db0:	4621      	mov	r1, r4
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f7fc fa1f 	bl	80051f6 <lfs_dir_getread>
 8008db8:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d01d      	beq.n	8008dfc <lfs_file_flushedread+0x164>
                return err;
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	e034      	b.n	8008e2e <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dce:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008dd8:	69b9      	ldr	r1, [r7, #24]
 8008dda:	9103      	str	r1, [sp, #12]
 8008ddc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008dde:	9102      	str	r1, [sp, #8]
 8008de0:	9201      	str	r2, [sp, #4]
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	4623      	mov	r3, r4
 8008de6:	4602      	mov	r2, r0
 8008de8:	2100      	movs	r1, #0
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f7fb f8d4 	bl	8003f98 <lfs_bd_read>
 8008df0:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d001      	beq.n	8008dfc <lfs_file_flushedread+0x164>
                return err;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	e018      	b.n	8008e2e <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	441a      	add	r2, r3
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	441a      	add	r2, r3
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8008e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	4413      	add	r3, r2
 8008e1a:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 8008e1c:	6a3a      	ldr	r2, [r7, #32]
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f47f af56 	bne.w	8008cd8 <lfs_file_flushedread+0x40>
    }

    return size;
 8008e2c:	683b      	ldr	r3, [r7, #0]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3728      	adds	r7, #40	@ 0x28
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bdb0      	pop	{r4, r5, r7, pc}
 8008e36:	bf00      	nop
 8008e38:	fff7fc00 	.word	0xfff7fc00

08008e3c <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b086      	sub	sp, #24
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
 8008e48:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d106      	bne.n	8008e64 <lfs_file_read_+0x28>
 8008e56:	4b11      	ldr	r3, [pc, #68]	@ (8008e9c <lfs_file_read_+0x60>)
 8008e58:	4a11      	ldr	r2, [pc, #68]	@ (8008ea0 <lfs_file_read_+0x64>)
 8008e5a:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 8008e5e:	4811      	ldr	r0, [pc, #68]	@ (8008ea4 <lfs_file_read_+0x68>)
 8008e60:	f003 f8a4 	bl	800bfac <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d009      	beq.n	8008e84 <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8008e70:	68b9      	ldr	r1, [r7, #8]
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f7ff fd9c 	bl	80089b0 <lfs_file_flush>
 8008e78:	6178      	str	r0, [r7, #20]
        if (err) {
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <lfs_file_read_+0x48>
            return err;
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	e006      	b.n	8008e92 <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	68b9      	ldr	r1, [r7, #8]
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f7ff ff04 	bl	8008c98 <lfs_file_flushedread>
 8008e90:	4603      	mov	r3, r0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3718      	adds	r7, #24
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	0800e370 	.word	0x0800e370
 8008ea0:	0800ee50 	.word	0x0800ee50
 8008ea4:	0800e038 	.word	0x0800e038

08008ea8 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8008ea8:	b5b0      	push	{r4, r5, r7, lr}
 8008eaa:	b090      	sub	sp, #64	@ 0x40
 8008eac:	af04      	add	r7, sp, #16
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
 8008eb4:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ec2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f000 80f4 	beq.w	80090b4 <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed2:	441a      	add	r2, r3
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed8:	4619      	mov	r1, r3
 8008eda:	4610      	mov	r0, r2
 8008edc:	f7fa ff71 	bl	8003dc2 <lfs_max>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	f240 80e4 	bls.w	80090b4 <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8008eec:	68b9      	ldr	r1, [r7, #8]
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f7ff fd3c 	bl	800896c <lfs_file_outline>
 8008ef4:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f000 80db 	beq.w	80090b4 <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f02:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0c:	e0d7      	b.n	80090be <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d006      	beq.n	8008f28 <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f22:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d16d      	bne.n	8009004 <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d159      	bne.n	8008fe8 <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d12f      	bne.n	8008fa0 <lfs_file_flushedwrite+0xf8>
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d02b      	beq.n	8008fa0 <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008f5a:	3a01      	subs	r2, #1
 8008f5c:	68b9      	ldr	r1, [r7, #8]
 8008f5e:	3138      	adds	r1, #56	@ 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8008f60:	2000      	movs	r0, #0
 8008f62:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008f64:	f107 0010 	add.w	r0, r7, #16
 8008f68:	9003      	str	r0, [sp, #12]
 8008f6a:	9102      	str	r1, [sp, #8]
 8008f6c:	9201      	str	r2, [sp, #4]
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	462b      	mov	r3, r5
 8008f72:	4622      	mov	r2, r4
 8008f74:	2100      	movs	r1, #0
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f7ff f827 	bl	8007fca <lfs_ctz_find>
 8008f7c:	6238      	str	r0, [r7, #32]
                    if (err) {
 8008f7e:	6a3b      	ldr	r3, [r7, #32]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d007      	beq.n	8008f94 <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f88:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 8008f90:	6a3b      	ldr	r3, [r7, #32]
 8008f92:	e094      	b.n	80090be <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	3340      	adds	r3, #64	@ 0x40
 8008f98:	4619      	mov	r1, r3
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7fa ffe6 	bl	8003f6c <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f7fb fef8 	bl	8004d96 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8008fac:	68fc      	ldr	r4, [r7, #12]
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	3238      	adds	r2, #56	@ 0x38
 8008fba:	68b9      	ldr	r1, [r7, #8]
 8008fbc:	313c      	adds	r1, #60	@ 0x3c
 8008fbe:	9102      	str	r1, [sp, #8]
 8008fc0:	9201      	str	r2, [sp, #4]
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	462b      	mov	r3, r5
 8008fc6:	4622      	mov	r2, r4
 8008fc8:	4601      	mov	r1, r0
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f7ff f868 	bl	80080a0 <lfs_ctz_extend>
 8008fd0:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00f      	beq.n	8008ff8 <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fdc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	e06a      	b.n	80090be <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	f06f 0201 	mvn.w	r2, #1
 8008fee:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ffc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009008:	69da      	ldr	r2, [r3, #28]
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	4619      	mov	r1, r3
 8009012:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009014:	f7fa fee5 	bl	8003de2 <lfs_min>
 8009018:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8009020:	68fc      	ldr	r4, [r7, #12]
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800902a:	69b9      	ldr	r1, [r7, #24]
 800902c:	9103      	str	r1, [sp, #12]
 800902e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009030:	9102      	str	r1, [sp, #8]
 8009032:	9201      	str	r2, [sp, #4]
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	2301      	movs	r3, #1
 8009038:	4622      	mov	r2, r4
 800903a:	4601      	mov	r1, r0
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f7fb fa3d 	bl	80044bc <lfs_bd_prog>
 8009042:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d01c      	beq.n	8009084 <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8009050:	d007      	beq.n	8009062 <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009056:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	e02d      	b.n	80090be <lfs_file_flushedwrite+0x216>
                    goto relocate;
 8009062:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8009064:	68b9      	ldr	r1, [r7, #8]
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f7ff fba6 	bl	80087b8 <lfs_file_relocate>
 800906c:	6178      	str	r0, [r7, #20]
            if (err) {
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d0d2      	beq.n	800901a <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009078:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	e01c      	b.n	80090be <lfs_file_flushedwrite+0x216>
            break;
 8009084:	bf00      	nop
            }
        }

        file->pos += diff;
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	441a      	add	r2, r3
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	441a      	add	r2, r3
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 800909e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	4413      	add	r3, r2
 80090a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 80090a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ckpoint(lfs);
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f7fb fe71 	bl	8004d96 <lfs_alloc_ckpoint>
    while (nsize > 0) {
 80090b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f47f af29 	bne.w	8008f0e <lfs_file_flushedwrite+0x66>
    }

    return size;
 80090bc:	683b      	ldr	r3, [r7, #0]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3730      	adds	r7, #48	@ 0x30
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080090c8 <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b08a      	sub	sp, #40	@ 0x28
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
 80090d4:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090da:	f003 0302 	and.w	r3, r3, #2
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d106      	bne.n	80090f0 <lfs_file_write_+0x28>
 80090e2:	4b38      	ldr	r3, [pc, #224]	@ (80091c4 <lfs_file_write_+0xfc>)
 80090e4:	4a38      	ldr	r2, [pc, #224]	@ (80091c8 <lfs_file_write_+0x100>)
 80090e6:	f640 6126 	movw	r1, #3622	@ 0xe26
 80090ea:	4838      	ldr	r0, [pc, #224]	@ (80091cc <lfs_file_write_+0x104>)
 80090ec:	f002 ff5e 	bl	800bfac <__assert_func>

    if (file->flags & LFS_F_READING) {
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d009      	beq.n	8009110 <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 80090fc:	68b9      	ldr	r1, [r7, #8]
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f7ff fc56 	bl	80089b0 <lfs_file_flush>
 8009104:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8009106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <lfs_file_write_+0x48>
            return err;
 800910c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800910e:	e055      	b.n	80091bc <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009118:	2b00      	cmp	r3, #0
 800911a:	d009      	beq.n	8009130 <lfs_file_write_+0x68>
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009124:	429a      	cmp	r2, r3
 8009126:	d203      	bcs.n	8009130 <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	441a      	add	r2, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800913c:	429a      	cmp	r2, r3
 800913e:	d902      	bls.n	8009146 <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8009140:	f06f 031a 	mvn.w	r3, #26
 8009144:	e03a      	b.n	80091bc <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800914a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800914e:	2b00      	cmp	r3, #0
 8009150:	d121      	bne.n	8009196 <lfs_file_write_+0xce>
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800915a:	429a      	cmp	r2, r3
 800915c:	d91b      	bls.n	8009196 <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009162:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	635a      	str	r2, [r3, #52]	@ 0x34

        while (file->pos < pos) {
 800916c:	e00e      	b.n	800918c <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 800916e:	2300      	movs	r3, #0
 8009170:	75fb      	strb	r3, [r7, #23]
 8009172:	f107 0217 	add.w	r2, r7, #23
 8009176:	2301      	movs	r3, #1
 8009178:	68b9      	ldr	r1, [r7, #8]
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f7ff fe94 	bl	8008ea8 <lfs_file_flushedwrite>
 8009180:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	2b00      	cmp	r3, #0
 8009186:	da01      	bge.n	800918c <lfs_file_write_+0xc4>
                return res;
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	e017      	b.n	80091bc <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009190:	6a3a      	ldr	r2, [r7, #32]
 8009192:	429a      	cmp	r2, r3
 8009194:	d8eb      	bhi.n	800916e <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	68b9      	ldr	r1, [r7, #8]
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f7ff fe83 	bl	8008ea8 <lfs_file_flushedwrite>
 80091a2:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	da01      	bge.n	80091ae <lfs_file_write_+0xe6>
        return nsize;
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	e006      	b.n	80091bc <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091b2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	631a      	str	r2, [r3, #48]	@ 0x30
    return nsize;
 80091ba:	69bb      	ldr	r3, [r7, #24]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3728      	adds	r7, #40	@ 0x28
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	0800e3a0 	.word	0x0800e3a0
 80091c8:	0800ee60 	.word	0x0800ee60
 80091cc:	0800e038 	.word	0x0800e038

080091d0 <lfs_file_seek_>:
#endif

static lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b08c      	sub	sp, #48	@ 0x30
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
 80091dc:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (whence == LFS_SEEK_SET) {
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d102      	bne.n	80091f0 <lfs_file_seek_+0x20>
        npos = off;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091ee:	e025      	b.n	800923c <lfs_file_seek_+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d10f      	bne.n	8009216 <lfs_file_seek_+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091fa:	461a      	mov	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4413      	add	r3, r2
 8009200:	2b00      	cmp	r3, #0
 8009202:	da02      	bge.n	800920a <lfs_file_seek_+0x3a>
            return LFS_ERR_INVAL;
 8009204:	f06f 0315 	mvn.w	r3, #21
 8009208:	e067      	b.n	80092da <lfs_file_seek_+0x10a>
        } else {
            npos = file->pos + off;
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4413      	add	r3, r2
 8009212:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009214:	e012      	b.n	800923c <lfs_file_seek_+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	2b02      	cmp	r3, #2
 800921a:	d10f      	bne.n	800923c <lfs_file_seek_+0x6c>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 800921c:	68b9      	ldr	r1, [r7, #8]
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 f875 	bl	800930e <lfs_file_size_>
 8009224:	4602      	mov	r2, r0
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4413      	add	r3, r2
 800922a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (res < 0) {
 800922c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922e:	2b00      	cmp	r3, #0
 8009230:	da02      	bge.n	8009238 <lfs_file_seek_+0x68>
            return LFS_ERR_INVAL;
 8009232:	f06f 0315 	mvn.w	r3, #21
 8009236:	e050      	b.n	80092da <lfs_file_seek_+0x10a>
        } else {
            npos = res;
 8009238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if (npos > lfs->file_max) {
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009240:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009242:	429a      	cmp	r2, r3
 8009244:	d902      	bls.n	800924c <lfs_file_seek_+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8009246:	f06f 0315 	mvn.w	r3, #21
 800924a:	e046      	b.n	80092da <lfs_file_seek_+0x10a>
    }

    if (file->pos == npos) {
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009250:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009252:	429a      	cmp	r2, r3
 8009254:	d101      	bne.n	800925a <lfs_file_seek_+0x8a>
        // noop - position has not changed
        return npos;
 8009256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009258:	e03f      	b.n	80092da <lfs_file_seek_+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800925e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
    if (
 8009262:	2b00      	cmp	r3, #0
 8009264:	d12b      	bne.n	80092be <lfs_file_seek_+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800926a:	61bb      	str	r3, [r7, #24]
 800926c:	f107 0318 	add.w	r3, r7, #24
 8009270:	4619      	mov	r1, r3
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f7fe fe71 	bl	8007f5a <lfs_ctz_index>
 8009278:	6278      	str	r0, [r7, #36]	@ 0x24
        lfs_off_t noff = npos;
 800927a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800927c:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 800927e:	f107 0314 	add.w	r3, r7, #20
 8009282:	4619      	mov	r1, r3
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f7fe fe68 	bl	8007f5a <lfs_ctz_index>
 800928a:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 800928c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800928e:	6a3b      	ldr	r3, [r7, #32]
 8009290:	429a      	cmp	r2, r3
 8009292:	d114      	bne.n	80092be <lfs_file_seek_+0xee>
                && noff >= file->cache.off
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	429a      	cmp	r2, r3
 800929c:	d80f      	bhi.n	80092be <lfs_file_seek_+0xee>
                && noff < file->cache.off + file->cache.size) {
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092a6:	441a      	add	r2, r3
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d907      	bls.n	80092be <lfs_file_seek_+0xee>
            file->pos = npos;
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092b2:	635a      	str	r2, [r3, #52]	@ 0x34
            file->off = noff;
 80092b4:	697a      	ldr	r2, [r7, #20]
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	63da      	str	r2, [r3, #60]	@ 0x3c
            return npos;
 80092ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092bc:	e00d      	b.n	80092da <lfs_file_seek_+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 80092be:	68b9      	ldr	r1, [r7, #8]
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f7ff fb75 	bl	80089b0 <lfs_file_flush>
 80092c6:	61f8      	str	r0, [r7, #28]
    if (err) {
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <lfs_file_seek_+0x102>
        return err;
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	e003      	b.n	80092da <lfs_file_seek_+0x10a>
    }

    // update pos
    file->pos = npos;
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092d6:	635a      	str	r2, [r3, #52]	@ 0x34
    return npos;
 80092d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3730      	adds	r7, #48	@ 0x30
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <lfs_file_rewind_>:
static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}

static int lfs_file_rewind_(lfs_t *lfs, lfs_file_t *file) {
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b084      	sub	sp, #16
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	6039      	str	r1, [r7, #0]
    lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);
 80092ec:	2300      	movs	r3, #0
 80092ee:	2200      	movs	r2, #0
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7ff ff6c 	bl	80091d0 <lfs_file_seek_>
 80092f8:	60f8      	str	r0, [r7, #12]
    if (res < 0) {
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	da01      	bge.n	8009304 <lfs_file_rewind_+0x22>
        return (int)res;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	e000      	b.n	8009306 <lfs_file_rewind_+0x24>
    }

    return 0;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <lfs_file_size_>:

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
 800930e:	b580      	push	{r7, lr}
 8009310:	b082      	sub	sp, #8
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800931c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009320:	2b00      	cmp	r3, #0
 8009322:	d009      	beq.n	8009338 <lfs_file_size_+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800932c:	4619      	mov	r1, r3
 800932e:	4610      	mov	r0, r2
 8009330:	f7fa fd47 	bl	8003dc2 <lfs_max>
 8009334:	4603      	mov	r3, r0
 8009336:	e001      	b.n	800933c <lfs_file_size_+0x2e>
    }
#endif

    return file->ctz.size;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 800933c:	4618      	mov	r0, r3
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8009344:	b590      	push	{r4, r7, lr}
 8009346:	b08d      	sub	sp, #52	@ 0x34
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	669a      	str	r2, [r3, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	6a1a      	ldr	r2, [r3, #32]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	66da      	str	r2, [r3, #108]	@ 0x6c
    int err = 0;
 800935c:	2300      	movs	r3, #0
 800935e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009364:	695b      	ldr	r3, [r3, #20]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d106      	bne.n	8009378 <lfs_init+0x34>
 800936a:	4b96      	ldr	r3, [pc, #600]	@ (80095c4 <lfs_init+0x280>)
 800936c:	4a96      	ldr	r2, [pc, #600]	@ (80095c8 <lfs_init+0x284>)
 800936e:	f241 0152 	movw	r1, #4178	@ 0x1052
 8009372:	4896      	ldr	r0, [pc, #600]	@ (80095cc <lfs_init+0x288>)
 8009374:	f002 fe1a 	bl	800bfac <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d106      	bne.n	8009390 <lfs_init+0x4c>
 8009382:	4b93      	ldr	r3, [pc, #588]	@ (80095d0 <lfs_init+0x28c>)
 8009384:	4a90      	ldr	r2, [pc, #576]	@ (80095c8 <lfs_init+0x284>)
 8009386:	f241 0153 	movw	r1, #4179	@ 0x1053
 800938a:	4890      	ldr	r0, [pc, #576]	@ (80095cc <lfs_init+0x288>)
 800938c:	f002 fe0e 	bl	800bfac <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009396:	2b00      	cmp	r3, #0
 8009398:	d106      	bne.n	80093a8 <lfs_init+0x64>
 800939a:	4b8e      	ldr	r3, [pc, #568]	@ (80095d4 <lfs_init+0x290>)
 800939c:	4a8a      	ldr	r2, [pc, #552]	@ (80095c8 <lfs_init+0x284>)
 800939e:	f241 0154 	movw	r1, #4180	@ 0x1054
 80093a2:	488a      	ldr	r0, [pc, #552]	@ (80095cc <lfs_init+0x288>)
 80093a4:	f002 fe02 	bl	800bfac <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80093b2:	6952      	ldr	r2, [r2, #20]
 80093b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80093b8:	fb01 f202 	mul.w	r2, r1, r2
 80093bc:	1a9b      	subs	r3, r3, r2
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d006      	beq.n	80093d0 <lfs_init+0x8c>
 80093c2:	4b85      	ldr	r3, [pc, #532]	@ (80095d8 <lfs_init+0x294>)
 80093c4:	4a80      	ldr	r2, [pc, #512]	@ (80095c8 <lfs_init+0x284>)
 80093c6:	f241 0158 	movw	r1, #4184	@ 0x1058
 80093ca:	4880      	ldr	r0, [pc, #512]	@ (80095cc <lfs_init+0x288>)
 80093cc:	f002 fdee 	bl	800bfac <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80093da:	6992      	ldr	r2, [r2, #24]
 80093dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80093e0:	fb01 f202 	mul.w	r2, r1, r2
 80093e4:	1a9b      	subs	r3, r3, r2
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d006      	beq.n	80093f8 <lfs_init+0xb4>
 80093ea:	4b7c      	ldr	r3, [pc, #496]	@ (80095dc <lfs_init+0x298>)
 80093ec:	4a76      	ldr	r2, [pc, #472]	@ (80095c8 <lfs_init+0x284>)
 80093ee:	f241 0159 	movw	r1, #4185	@ 0x1059
 80093f2:	4876      	ldr	r0, [pc, #472]	@ (80095cc <lfs_init+0x288>)
 80093f4:	f002 fdda 	bl	800bfac <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093fc:	69db      	ldr	r3, [r3, #28]
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009402:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009404:	fbb3 f1f2 	udiv	r1, r3, r2
 8009408:	fb01 f202 	mul.w	r2, r1, r2
 800940c:	1a9b      	subs	r3, r3, r2
 800940e:	2b00      	cmp	r3, #0
 8009410:	d006      	beq.n	8009420 <lfs_init+0xdc>
 8009412:	4b73      	ldr	r3, [pc, #460]	@ (80095e0 <lfs_init+0x29c>)
 8009414:	4a6c      	ldr	r2, [pc, #432]	@ (80095c8 <lfs_init+0x284>)
 8009416:	f241 015a 	movw	r1, #4186	@ 0x105a
 800941a:	486c      	ldr	r0, [pc, #432]	@ (80095cc <lfs_init+0x288>)
 800941c:	f002 fdc6 	bl	800bfac <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009424:	69db      	ldr	r3, [r3, #28]
 8009426:	2b7f      	cmp	r3, #127	@ 0x7f
 8009428:	d806      	bhi.n	8009438 <lfs_init+0xf4>
 800942a:	4b6e      	ldr	r3, [pc, #440]	@ (80095e4 <lfs_init+0x2a0>)
 800942c:	4a66      	ldr	r2, [pc, #408]	@ (80095c8 <lfs_init+0x284>)
 800942e:	f241 015d 	movw	r1, #4189	@ 0x105d
 8009432:	4866      	ldr	r0, [pc, #408]	@ (80095cc <lfs_init+0x288>)
 8009434:	f002 fdba 	bl	800bfac <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	3b08      	subs	r3, #8
 8009440:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009444:	fbb2 f3f3 	udiv	r3, r2, r3
 8009448:	4618      	mov	r0, r3
 800944a:	f7fa fd01 	bl	8003e50 <lfs_npw2>
 800944e:	4603      	mov	r3, r0
 8009450:	009a      	lsls	r2, r3, #2
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009456:	69db      	ldr	r3, [r3, #28]
 8009458:	429a      	cmp	r2, r3
 800945a:	d906      	bls.n	800946a <lfs_init+0x126>
 800945c:	4b62      	ldr	r3, [pc, #392]	@ (80095e8 <lfs_init+0x2a4>)
 800945e:	4a5a      	ldr	r2, [pc, #360]	@ (80095c8 <lfs_init+0x284>)
 8009460:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8009464:	4859      	ldr	r0, [pc, #356]	@ (80095cc <lfs_init+0x288>)
 8009466:	f002 fda1 	bl	800bfac <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800946e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009470:	2b00      	cmp	r3, #0
 8009472:	d106      	bne.n	8009482 <lfs_init+0x13e>
 8009474:	4b5d      	ldr	r3, [pc, #372]	@ (80095ec <lfs_init+0x2a8>)
 8009476:	4a54      	ldr	r2, [pc, #336]	@ (80095c8 <lfs_init+0x284>)
 8009478:	f241 0169 	movw	r1, #4201	@ 0x1069
 800947c:	4853      	ldr	r0, [pc, #332]	@ (80095cc <lfs_init+0x288>)
 800947e:	f002 fd95 	bl	800bfac <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00f      	beq.n	80094ac <lfs_init+0x168>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009496:	69db      	ldr	r3, [r3, #28]
 8009498:	085b      	lsrs	r3, r3, #1
 800949a:	429a      	cmp	r2, r3
 800949c:	d206      	bcs.n	80094ac <lfs_init+0x168>
 800949e:	4b54      	ldr	r3, [pc, #336]	@ (80095f0 <lfs_init+0x2ac>)
 80094a0:	4a49      	ldr	r2, [pc, #292]	@ (80095c8 <lfs_init+0x284>)
 80094a2:	f241 016f 	movw	r1, #4207	@ 0x106f
 80094a6:	4849      	ldr	r0, [pc, #292]	@ (80095cc <lfs_init+0x288>)
 80094a8:	f002 fd80 	bl	800bfac <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094b6:	d00e      	beq.n	80094d6 <lfs_init+0x192>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094c2:	69db      	ldr	r3, [r3, #28]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d906      	bls.n	80094d6 <lfs_init+0x192>
 80094c8:	4b4a      	ldr	r3, [pc, #296]	@ (80095f4 <lfs_init+0x2b0>)
 80094ca:	4a3f      	ldr	r2, [pc, #252]	@ (80095c8 <lfs_init+0x284>)
 80094cc:	f241 0171 	movw	r1, #4209	@ 0x1071
 80094d0:	483e      	ldr	r0, [pc, #248]	@ (80095cc <lfs_init+0x288>)
 80094d2:	f002 fd6b 	bl	800bfac <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d005      	beq.n	80094ec <lfs_init+0x1a8>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	60da      	str	r2, [r3, #12]
 80094ea:	e010      	b.n	800950e <lfs_init+0x1ca>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fa fd14 	bl	8003f20 <lfs_malloc>
 80094f8:	4602      	mov	r2, r0
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d103      	bne.n	800950e <lfs_init+0x1ca>
            err = LFS_ERR_NOMEM;
 8009506:	f06f 030b 	mvn.w	r3, #11
 800950a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 800950c:	e163      	b.n	80097d6 <lfs_init+0x492>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009514:	2b00      	cmp	r3, #0
 8009516:	d005      	beq.n	8009524 <lfs_init+0x1e0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800951c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	61da      	str	r2, [r3, #28]
 8009522:	e010      	b.n	8009546 <lfs_init+0x202>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800952a:	4618      	mov	r0, r3
 800952c:	f7fa fcf8 	bl	8003f20 <lfs_malloc>
 8009530:	4602      	mov	r2, r0
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	69db      	ldr	r3, [r3, #28]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d103      	bne.n	8009546 <lfs_init+0x202>
            err = LFS_ERR_NOMEM;
 800953e:	f06f 030b 	mvn.w	r3, #11
 8009542:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8009544:	e147      	b.n	80097d6 <lfs_init+0x492>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4619      	mov	r1, r3
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7fa fd0e 	bl	8003f6c <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	3310      	adds	r3, #16
 8009554:	4619      	mov	r1, r3
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f7fa fd08 	bl	8003f6c <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009562:	2b00      	cmp	r3, #0
 8009564:	d106      	bne.n	8009574 <lfs_init+0x230>
 8009566:	4b24      	ldr	r3, [pc, #144]	@ (80095f8 <lfs_init+0x2b4>)
 8009568:	4a17      	ldr	r2, [pc, #92]	@ (80095c8 <lfs_init+0x284>)
 800956a:	f241 0190 	movw	r1, #4240	@ 0x1090
 800956e:	4817      	ldr	r0, [pc, #92]	@ (80095cc <lfs_init+0x288>)
 8009570:	f002 fd1c 	bl	800bfac <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800957a:	2b00      	cmp	r3, #0
 800957c:	d005      	beq.n	800958a <lfs_init+0x246>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009582:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	665a      	str	r2, [r3, #100]	@ 0x64
 8009588:	e010      	b.n	80095ac <lfs_init+0x268>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800958e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009590:	4618      	mov	r0, r3
 8009592:	f7fa fcc5 	bl	8003f20 <lfs_malloc>
 8009596:	4602      	mov	r2, r0
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d103      	bne.n	80095ac <lfs_init+0x268>
            err = LFS_ERR_NOMEM;
 80095a4:	f06f 030b 	mvn.w	r3, #11
 80095a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 80095aa:	e114      	b.n	80097d6 <lfs_init+0x492>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80095b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095b2:	2bff      	cmp	r3, #255	@ 0xff
 80095b4:	d924      	bls.n	8009600 <lfs_init+0x2bc>
 80095b6:	4b11      	ldr	r3, [pc, #68]	@ (80095fc <lfs_init+0x2b8>)
 80095b8:	4a03      	ldr	r2, [pc, #12]	@ (80095c8 <lfs_init+0x284>)
 80095ba:	f241 019c 	movw	r1, #4252	@ 0x109c
 80095be:	4803      	ldr	r0, [pc, #12]	@ (80095cc <lfs_init+0x288>)
 80095c0:	f002 fcf4 	bl	800bfac <__assert_func>
 80095c4:	0800e3d0 	.word	0x0800e3d0
 80095c8:	0800ee70 	.word	0x0800ee70
 80095cc:	0800e038 	.word	0x0800e038
 80095d0:	0800e3ec 	.word	0x0800e3ec
 80095d4:	0800e408 	.word	0x0800e408
 80095d8:	0800e424 	.word	0x0800e424
 80095dc:	0800e454 	.word	0x0800e454
 80095e0:	0800e484 	.word	0x0800e484
 80095e4:	0800e4b8 	.word	0x0800e4b8
 80095e8:	0800e4d4 	.word	0x0800e4d4
 80095ec:	0800e520 	.word	0x0800e520
 80095f0:	0800e53c 	.word	0x0800e53c
 80095f4:	0800e590 	.word	0x0800e590
 80095f8:	0800e5f0 	.word	0x0800e5f0
 80095fc:	0800e610 	.word	0x0800e610
    lfs->name_max = lfs->cfg->name_max;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009604:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->name_max) {
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800960e:	2b00      	cmp	r3, #0
 8009610:	d102      	bne.n	8009618 <lfs_init+0x2d4>
        lfs->name_max = LFS_NAME_MAX;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	22ff      	movs	r2, #255	@ 0xff
 8009616:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800961c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800961e:	2b00      	cmp	r3, #0
 8009620:	da06      	bge.n	8009630 <lfs_init+0x2ec>
 8009622:	4b71      	ldr	r3, [pc, #452]	@ (80097e8 <lfs_init+0x4a4>)
 8009624:	4a71      	ldr	r2, [pc, #452]	@ (80097ec <lfs_init+0x4a8>)
 8009626:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 800962a:	4871      	ldr	r0, [pc, #452]	@ (80097f0 <lfs_init+0x4ac>)
 800962c:	f002 fcbe 	bl	800bfac <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009634:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->file_max) {
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800963e:	2b00      	cmp	r3, #0
 8009640:	d103      	bne.n	800964a <lfs_init+0x306>
        lfs->file_max = LFS_FILE_MAX;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8009648:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800964e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009650:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8009654:	4293      	cmp	r3, r2
 8009656:	d906      	bls.n	8009666 <lfs_init+0x322>
 8009658:	4b66      	ldr	r3, [pc, #408]	@ (80097f4 <lfs_init+0x4b0>)
 800965a:	4a64      	ldr	r2, [pc, #400]	@ (80097ec <lfs_init+0x4a8>)
 800965c:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 8009660:	4863      	ldr	r0, [pc, #396]	@ (80097f0 <lfs_init+0x4ac>)
 8009662:	f002 fca3 	bl	800bfac <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800966a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	679a      	str	r2, [r3, #120]	@ 0x78
    if (!lfs->attr_max) {
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009674:	2b00      	cmp	r3, #0
 8009676:	d103      	bne.n	8009680 <lfs_init+0x33c>
        lfs->attr_max = LFS_ATTR_MAX;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800967e:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009684:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800968a:	69db      	ldr	r3, [r3, #28]
 800968c:	429a      	cmp	r2, r3
 800968e:	d906      	bls.n	800969e <lfs_init+0x35a>
 8009690:	4b59      	ldr	r3, [pc, #356]	@ (80097f8 <lfs_init+0x4b4>)
 8009692:	4a56      	ldr	r2, [pc, #344]	@ (80097ec <lfs_init+0x4a8>)
 8009694:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 8009698:	4855      	ldr	r0, [pc, #340]	@ (80097f0 <lfs_init+0x4ac>)
 800969a:	f002 fc87 	bl	800bfac <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096a8:	d00e      	beq.n	80096c8 <lfs_init+0x384>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d906      	bls.n	80096c8 <lfs_init+0x384>
 80096ba:	4b50      	ldr	r3, [pc, #320]	@ (80097fc <lfs_init+0x4b8>)
 80096bc:	4a4b      	ldr	r2, [pc, #300]	@ (80097ec <lfs_init+0x4a8>)
 80096be:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 80096c2:	484b      	ldr	r0, [pc, #300]	@ (80097f0 <lfs_init+0x4ac>)
 80096c4:	f002 fc72 	bl	800bfac <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096d2:	d00d      	beq.n	80096f0 <lfs_init+0x3ac>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096de:	429a      	cmp	r2, r3
 80096e0:	d906      	bls.n	80096f0 <lfs_init+0x3ac>
 80096e2:	4b47      	ldr	r3, [pc, #284]	@ (8009800 <lfs_init+0x4bc>)
 80096e4:	4a41      	ldr	r2, [pc, #260]	@ (80097ec <lfs_init+0x4a8>)
 80096e6:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 80096ea:	4841      	ldr	r0, [pc, #260]	@ (80097f0 <lfs_init+0x4ac>)
 80096ec:	f002 fc5e 	bl	800bfac <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096fa:	d019      	beq.n	8009730 <lfs_init+0x3ec>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009700:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009708:	2b00      	cmp	r3, #0
 800970a:	d004      	beq.n	8009716 <lfs_init+0x3d2>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009712:	08db      	lsrs	r3, r3, #3
 8009714:	e003      	b.n	800971e <lfs_init+0x3da>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	08db      	lsrs	r3, r3, #3
 800971e:	4293      	cmp	r3, r2
 8009720:	d206      	bcs.n	8009730 <lfs_init+0x3ec>
 8009722:	4b38      	ldr	r3, [pc, #224]	@ (8009804 <lfs_init+0x4c0>)
 8009724:	4a31      	ldr	r2, [pc, #196]	@ (80097ec <lfs_init+0x4a8>)
 8009726:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 800972a:	4831      	ldr	r0, [pc, #196]	@ (80097f0 <lfs_init+0x4ac>)
 800972c:	f002 fc3e 	bl	800bfac <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009734:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800973e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009742:	d103      	bne.n	800974c <lfs_init+0x408>
        lfs->inline_max = 0;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	67da      	str	r2, [r3, #124]	@ 0x7c
 800974a:	e022      	b.n	8009792 <lfs_init+0x44e>
    } else if (lfs->inline_max == 0) {
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009750:	2b00      	cmp	r3, #0
 8009752:	d11e      	bne.n	8009792 <lfs_init+0x44e>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009758:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
        lfs->inline_max = lfs_min(
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 8009764:	2b00      	cmp	r3, #0
 8009766:	d004      	beq.n	8009772 <lfs_init+0x42e>
                        ? lfs->cfg->metadata_max
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800976c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 800976e:	08db      	lsrs	r3, r3, #3
 8009770:	e003      	b.n	800977a <lfs_init+0x436>
                        : lfs->cfg->block_size)/8));
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009776:	69db      	ldr	r3, [r3, #28]
        lfs->inline_max = lfs_min(
 8009778:	08db      	lsrs	r3, r3, #3
 800977a:	4619      	mov	r1, r3
 800977c:	4610      	mov	r0, r2
 800977e:	f7fa fb30 	bl	8003de2 <lfs_min>
 8009782:	4603      	mov	r3, r0
 8009784:	4619      	mov	r1, r3
 8009786:	4620      	mov	r0, r4
 8009788:	f7fa fb2b 	bl	8003de2 <lfs_min>
 800978c:	4602      	mov	r2, r0
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009798:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097a0:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	333c      	adds	r3, #60	@ 0x3c
 80097b2:	2200      	movs	r2, #0
 80097b4:	601a      	str	r2, [r3, #0]
 80097b6:	605a      	str	r2, [r3, #4]
 80097b8:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	3330      	adds	r3, #48	@ 0x30
 80097be:	2200      	movs	r2, #0
 80097c0:	601a      	str	r2, [r3, #0]
 80097c2:	605a      	str	r2, [r3, #4]
 80097c4:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	3348      	adds	r3, #72	@ 0x48
 80097ca:	2200      	movs	r2, #0
 80097cc:	601a      	str	r2, [r3, #0]
 80097ce:	605a      	str	r2, [r3, #4]
 80097d0:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 80097d2:	2300      	movs	r3, #0
 80097d4:	e003      	b.n	80097de <lfs_init+0x49a>

cleanup:
    lfs_deinit(lfs);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f816 	bl	8009808 <lfs_deinit>
    return err;
 80097dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3734      	adds	r7, #52	@ 0x34
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd90      	pop	{r4, r7, pc}
 80097e6:	bf00      	nop
 80097e8:	0800e62c 	.word	0x0800e62c
 80097ec:	0800ee70 	.word	0x0800ee70
 80097f0:	0800e038 	.word	0x0800e038
 80097f4:	0800e650 	.word	0x0800e650
 80097f8:	0800e66c 	.word	0x0800e66c
 80097fc:	0800e69c 	.word	0x0800e69c
 8009800:	0800e6f4 	.word	0x0800e6f4
 8009804:	0800e744 	.word	0x0800e744

08009808 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009816:	2b00      	cmp	r3, #0
 8009818:	d104      	bne.n	8009824 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	4618      	mov	r0, r3
 8009820:	f7fa fb8a 	bl	8003f38 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800982a:	2b00      	cmp	r3, #0
 800982c:	d104      	bne.n	8009838 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	69db      	ldr	r3, [r3, #28]
 8009832:	4618      	mov	r0, r3
 8009834:	f7fa fb80 	bl	8003f38 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800983c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800983e:	2b00      	cmp	r3, #0
 8009840:	d104      	bne.n	800984c <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009846:	4618      	mov	r0, r3
 8009848:	f7fa fb76 	bl	8003f38 <lfs_free>
    }

    return 0;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
	...

08009858 <lfs_mount_>:
    return err;

}
#endif

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 8009858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800985a:	b0a1      	sub	sp, #132	@ 0x84
 800985c:	af04      	add	r7, sp, #16
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8009862:	6839      	ldr	r1, [r7, #0]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f7ff fd6d 	bl	8009344 <lfs_init>
 800986a:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (err) {
 800986c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800986e:	2b00      	cmp	r3, #0
 8009870:	d001      	beq.n	8009876 <lfs_mount_+0x1e>
        return err;
 8009872:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009874:	e202      	b.n	8009c7c <lfs_mount_+0x424>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8009876:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800987a:	2220      	movs	r2, #32
 800987c:	2100      	movs	r1, #0
 800987e:	4618      	mov	r0, r3
 8009880:	f002 fe0c 	bl	800c49c <memset>
 8009884:	2301      	movs	r3, #1
 8009886:	657b      	str	r3, [r7, #84]	@ 0x54
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009888:	4a9a      	ldr	r2, [pc, #616]	@ (8009af4 <lfs_mount_+0x29c>)
 800988a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800988e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009892:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8009896:	2301      	movs	r3, #1
 8009898:	66bb      	str	r3, [r7, #104]	@ 0x68
    lfs_size_t tortoise_period = 1;
 800989a:	2301      	movs	r3, #1
 800989c:	667b      	str	r3, [r7, #100]	@ 0x64
    while (!lfs_pair_isnull(dir.tail)) {
 800989e:	e199      	b.n	8009bd4 <lfs_mount_+0x37c>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 80098a0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80098a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80098a8:	3318      	adds	r3, #24
 80098aa:	4611      	mov	r1, r2
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fa ff3f 	bl	8004730 <lfs_pair_issync>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00a      	beq.n	80098ce <lfs_mount_+0x76>
            LFS_WARN("Cycle detected in tail list");
 80098b8:	4b8f      	ldr	r3, [pc, #572]	@ (8009af8 <lfs_mount_+0x2a0>)
 80098ba:	f241 123d 	movw	r2, #4413	@ 0x113d
 80098be:	498f      	ldr	r1, [pc, #572]	@ (8009afc <lfs_mount_+0x2a4>)
 80098c0:	488f      	ldr	r0, [pc, #572]	@ (8009b00 <lfs_mount_+0x2a8>)
 80098c2:	f002 fdc9 	bl	800c458 <iprintf>
            err = LFS_ERR_CORRUPT;
 80098c6:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80098ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 80098cc:	e1d2      	b.n	8009c74 <lfs_mount_+0x41c>
        }
        if (tortoise_i == tortoise_period) {
 80098ce:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80098d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d108      	bne.n	80098e8 <lfs_mount_+0x90>
            tortoise[0] = dir.tail[0];
 80098d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098d8:	633b      	str	r3, [r7, #48]	@ 0x30
            tortoise[1] = dir.tail[1];
 80098da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098dc:	637b      	str	r3, [r7, #52]	@ 0x34
            tortoise_i = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	66bb      	str	r3, [r7, #104]	@ 0x68
            tortoise_period *= 2;
 80098e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098e4:	005b      	lsls	r3, r3, #1
 80098e6:	667b      	str	r3, [r7, #100]	@ 0x64
        }
        tortoise_i += 1;
 80098e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80098ea:	3301      	adds	r3, #1
 80098ec:	66bb      	str	r3, [r7, #104]	@ 0x68
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80098f2:	4b84      	ldr	r3, [pc, #528]	@ (8009b04 <lfs_mount_+0x2ac>)
 80098f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098f6:	2308      	movs	r3, #8
 80098f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 80098fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80098fe:	f103 0218 	add.w	r2, r3, #24
 8009902:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8009906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800990a:	9303      	str	r3, [sp, #12]
 800990c:	4b7e      	ldr	r3, [pc, #504]	@ (8009b08 <lfs_mount_+0x2b0>)
 800990e:	9302      	str	r3, [sp, #8]
 8009910:	2300      	movs	r3, #0
 8009912:	9301      	str	r3, [sp, #4]
 8009914:	4b7d      	ldr	r3, [pc, #500]	@ (8009b0c <lfs_mount_+0x2b4>)
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	4b7d      	ldr	r3, [pc, #500]	@ (8009b10 <lfs_mount_+0x2b8>)
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7fc f986 	bl	8005c2c <lfs_dir_fetchmatch>
 8009920:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8009922:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009924:	2b00      	cmp	r3, #0
 8009926:	da02      	bge.n	800992e <lfs_mount_+0xd6>
            err = tag;
 8009928:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800992a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 800992c:	e1a2      	b.n	8009c74 <lfs_mount_+0x41c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 800992e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009930:	2b00      	cmp	r3, #0
 8009932:	f000 8142 	beq.w	8009bba <lfs_mount_+0x362>
 8009936:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009938:	4618      	mov	r0, r3
 800993a:	f7fa ff68 	bl	800480e <lfs_tag_isdelete>
 800993e:	4603      	mov	r3, r0
 8009940:	f083 0301 	eor.w	r3, r3, #1
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b00      	cmp	r3, #0
 8009948:	f000 8137 	beq.w	8009bba <lfs_mount_+0x362>
            // update root
            lfs->root[0] = dir.pair[0];
 800994c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8009952:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8009958:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800995c:	f107 030c 	add.w	r3, r7, #12
 8009960:	9300      	str	r3, [sp, #0]
 8009962:	4b6c      	ldr	r3, [pc, #432]	@ (8009b14 <lfs_mount_+0x2bc>)
 8009964:	4a6a      	ldr	r2, [pc, #424]	@ (8009b10 <lfs_mount_+0x2b8>)
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7fb fc2a 	bl	80051c0 <lfs_dir_get>
 800996c:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 800996e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009970:	2b00      	cmp	r3, #0
 8009972:	da02      	bge.n	800997a <lfs_mount_+0x122>
                err = tag;
 8009974:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009976:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8009978:	e11e      	b.n	8009bb8 <lfs_mount_+0x360>
            }
            lfs_superblock_fromle32(&superblock);
 800997a:	f107 030c 	add.w	r3, r7, #12
 800997e:	4618      	mov	r0, r3
 8009980:	f7fb f91e 	bl	8004bc0 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	0c1b      	lsrs	r3, r3, #16
 8009988:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
            if (major_version != lfs_fs_disk_version_major(lfs)
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7fb f9e4 	bl	8004d60 <lfs_fs_disk_version_major>
 8009998:	4603      	mov	r3, r0
 800999a:	461a      	mov	r2, r3
 800999c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d108      	bne.n	80099b6 <lfs_mount_+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7fb f9e9 	bl	8004d7c <lfs_fs_disk_version_minor>
 80099aa:	4603      	mov	r3, r0
 80099ac:	461a      	mov	r2, r3
 80099ae:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d91d      	bls.n	80099f2 <lfs_mount_+0x19a>
                LFS_ERROR("Invalid version "
 80099b6:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 80099ba:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f7fb f9ce 	bl	8004d60 <lfs_fs_disk_version_major>
 80099c4:	4603      	mov	r3, r0
 80099c6:	461e      	mov	r6, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7fb f9d7 	bl	8004d7c <lfs_fs_disk_version_minor>
 80099ce:	4603      	mov	r3, r0
 80099d0:	461a      	mov	r2, r3
 80099d2:	4b49      	ldr	r3, [pc, #292]	@ (8009af8 <lfs_mount_+0x2a0>)
 80099d4:	9303      	str	r3, [sp, #12]
 80099d6:	9202      	str	r2, [sp, #8]
 80099d8:	9601      	str	r6, [sp, #4]
 80099da:	9400      	str	r4, [sp, #0]
 80099dc:	462b      	mov	r3, r5
 80099de:	f241 126b 	movw	r2, #4459	@ 0x116b
 80099e2:	4946      	ldr	r1, [pc, #280]	@ (8009afc <lfs_mount_+0x2a4>)
 80099e4:	484c      	ldr	r0, [pc, #304]	@ (8009b18 <lfs_mount_+0x2c0>)
 80099e6:	f002 fd37 	bl	800c458 <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 80099ea:	f06f 0315 	mvn.w	r3, #21
 80099ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 80099f0:	e0e2      	b.n	8009bb8 <lfs_mount_+0x360>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 80099f2:	2300      	movs	r3, #0
 80099f4:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f7fb f9bf 	bl	8004d7c <lfs_fs_disk_version_minor>
 80099fe:	4603      	mov	r3, r0
 8009a00:	461a      	mov	r2, r3
 8009a02:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d21c      	bcs.n	8009a44 <lfs_mount_+0x1ec>
                LFS_DEBUG("Found older minor version "
 8009a0a:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 8009a0e:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f7fb f9a4 	bl	8004d60 <lfs_fs_disk_version_major>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	461e      	mov	r6, r3
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f7fb f9ad 	bl	8004d7c <lfs_fs_disk_version_minor>
 8009a22:	4603      	mov	r3, r0
 8009a24:	461a      	mov	r2, r3
 8009a26:	4b34      	ldr	r3, [pc, #208]	@ (8009af8 <lfs_mount_+0x2a0>)
 8009a28:	9303      	str	r3, [sp, #12]
 8009a2a:	9202      	str	r2, [sp, #8]
 8009a2c:	9601      	str	r6, [sp, #4]
 8009a2e:	9400      	str	r4, [sp, #0]
 8009a30:	462b      	mov	r3, r5
 8009a32:	f241 127a 	movw	r2, #4474	@ 0x117a
 8009a36:	4931      	ldr	r1, [pc, #196]	@ (8009afc <lfs_mount_+0x2a4>)
 8009a38:	4838      	ldr	r0, [pc, #224]	@ (8009b1c <lfs_mount_+0x2c4>)
 8009a3a:	f002 fd0d 	bl	800c458 <iprintf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 8009a44:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8009a48:	4619      	mov	r1, r3
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fbb4 	bl	800a1b8 <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d018      	beq.n	8009a88 <lfs_mount_+0x230>
                if (superblock.name_max > lfs->name_max) {
 8009a56:	69ba      	ldr	r2, [r7, #24]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d910      	bls.n	8009a82 <lfs_mount_+0x22a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8009a60:	69ba      	ldr	r2, [r7, #24]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a66:	4924      	ldr	r1, [pc, #144]	@ (8009af8 <lfs_mount_+0x2a0>)
 8009a68:	9101      	str	r1, [sp, #4]
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	f241 1289 	movw	r2, #4489	@ 0x1189
 8009a72:	4922      	ldr	r1, [pc, #136]	@ (8009afc <lfs_mount_+0x2a4>)
 8009a74:	482a      	ldr	r0, [pc, #168]	@ (8009b20 <lfs_mount_+0x2c8>)
 8009a76:	f002 fcef 	bl	800c458 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8009a7a:	f06f 0315 	mvn.w	r3, #21
 8009a7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8009a80:	e09a      	b.n	8009bb8 <lfs_mount_+0x360>
                }

                lfs->name_max = superblock.name_max;
 8009a82:	69ba      	ldr	r2, [r7, #24]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.file_max) {
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d018      	beq.n	8009ac0 <lfs_mount_+0x268>
                if (superblock.file_max > lfs->file_max) {
 8009a8e:	69fa      	ldr	r2, [r7, #28]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d910      	bls.n	8009aba <lfs_mount_+0x262>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8009a98:	69fa      	ldr	r2, [r7, #28]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a9e:	4916      	ldr	r1, [pc, #88]	@ (8009af8 <lfs_mount_+0x2a0>)
 8009aa0:	9101      	str	r1, [sp, #4]
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	f241 1294 	movw	r2, #4500	@ 0x1194
 8009aaa:	4914      	ldr	r1, [pc, #80]	@ (8009afc <lfs_mount_+0x2a4>)
 8009aac:	481d      	ldr	r0, [pc, #116]	@ (8009b24 <lfs_mount_+0x2cc>)
 8009aae:	f002 fcd3 	bl	800c458 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8009ab2:	f06f 0315 	mvn.w	r3, #21
 8009ab6:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8009ab8:	e07e      	b.n	8009bb8 <lfs_mount_+0x360>
                }

                lfs->file_max = superblock.file_max;
 8009aba:	69fa      	ldr	r2, [r7, #28]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.attr_max) {
 8009ac0:	6a3b      	ldr	r3, [r7, #32]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d040      	beq.n	8009b48 <lfs_mount_+0x2f0>
                if (superblock.attr_max > lfs->attr_max) {
 8009ac6:	6a3a      	ldr	r2, [r7, #32]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d92d      	bls.n	8009b2c <lfs_mount_+0x2d4>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8009ad0:	6a3a      	ldr	r2, [r7, #32]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ad6:	4908      	ldr	r1, [pc, #32]	@ (8009af8 <lfs_mount_+0x2a0>)
 8009ad8:	9101      	str	r1, [sp, #4]
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	4613      	mov	r3, r2
 8009ade:	f241 129f 	movw	r2, #4511	@ 0x119f
 8009ae2:	4906      	ldr	r1, [pc, #24]	@ (8009afc <lfs_mount_+0x2a4>)
 8009ae4:	4810      	ldr	r0, [pc, #64]	@ (8009b28 <lfs_mount_+0x2d0>)
 8009ae6:	f002 fcb7 	bl	800c458 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8009aea:	f06f 0315 	mvn.w	r3, #21
 8009aee:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8009af0:	e062      	b.n	8009bb8 <lfs_mount_+0x360>
 8009af2:	bf00      	nop
 8009af4:	0800e18c 	.word	0x0800e18c
 8009af8:	0800e148 	.word	0x0800e148
 8009afc:	0800e038 	.word	0x0800e038
 8009b00:	0800e7f8 	.word	0x0800e7f8
 8009b04:	0800e7ec 	.word	0x0800e7ec
 8009b08:	08006469 	.word	0x08006469
 8009b0c:	0ff00008 	.word	0x0ff00008
 8009b10:	7ffffc00 	.word	0x7ffffc00
 8009b14:	20100018 	.word	0x20100018
 8009b18:	0800e824 	.word	0x0800e824
 8009b1c:	0800e85c 	.word	0x0800e85c
 8009b20:	0800e89c 	.word	0x0800e89c
 8009b24:	0800e8d0 	.word	0x0800e8d0
 8009b28:	0800e904 	.word	0x0800e904
                }

                lfs->attr_max = superblock.attr_max;
 8009b2c:	6a3a      	ldr	r2, [r7, #32]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	679a      	str	r2, [r3, #120]	@ 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	4610      	mov	r0, r2
 8009b3e:	f7fa f950 	bl	8003de2 <lfs_min>
 8009b42:	4602      	mov	r2, r0
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d017      	beq.n	8009b82 <lfs_mount_+0x32a>
                    && superblock.block_count != lfs->cfg->block_count) {
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d011      	beq.n	8009b82 <lfs_mount_+0x32a>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8009b5e:	697a      	ldr	r2, [r7, #20]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b64:	6a1b      	ldr	r3, [r3, #32]
 8009b66:	4947      	ldr	r1, [pc, #284]	@ (8009c84 <lfs_mount_+0x42c>)
 8009b68:	9101      	str	r1, [sp, #4]
 8009b6a:	9300      	str	r3, [sp, #0]
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 8009b72:	4945      	ldr	r1, [pc, #276]	@ (8009c88 <lfs_mount_+0x430>)
 8009b74:	4845      	ldr	r0, [pc, #276]	@ (8009c8c <lfs_mount_+0x434>)
 8009b76:	f002 fc6f 	bl	800c458 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8009b7a:	f06f 0315 	mvn.w	r3, #21
 8009b7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8009b80:	e01a      	b.n	8009bb8 <lfs_mount_+0x360>
            }

            lfs->block_count = superblock.block_count;
 8009b82:	697a      	ldr	r2, [r7, #20]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	66da      	str	r2, [r3, #108]	@ 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 8009b88:	693a      	ldr	r2, [r7, #16]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b8e:	69db      	ldr	r3, [r3, #28]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d012      	beq.n	8009bba <lfs_mount_+0x362>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8009b94:	693a      	ldr	r2, [r7, #16]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b9a:	69db      	ldr	r3, [r3, #28]
 8009b9c:	4939      	ldr	r1, [pc, #228]	@ (8009c84 <lfs_mount_+0x42c>)
 8009b9e:	9101      	str	r1, [sp, #4]
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 8009ba8:	4937      	ldr	r1, [pc, #220]	@ (8009c88 <lfs_mount_+0x430>)
 8009baa:	4839      	ldr	r0, [pc, #228]	@ (8009c90 <lfs_mount_+0x438>)
 8009bac:	f002 fc54 	bl	800c458 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8009bb0:	f06f 0315 	mvn.w	r3, #21
 8009bb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8009bb6:	bf00      	nop
            goto cleanup;
 8009bb8:	e05c      	b.n	8009c74 <lfs_mount_+0x41c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009bc0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7fc fc1c 	bl	8006404 <lfs_dir_getgstate>
 8009bcc:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err) {
 8009bce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d14e      	bne.n	8009c72 <lfs_mount_+0x41a>
    while (!lfs_pair_isnull(dir.tail)) {
 8009bd4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009bd8:	3318      	adds	r3, #24
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fa fd63 	bl	80046a6 <lfs_pair_isnull>
 8009be0:	4603      	mov	r3, r0
 8009be2:	f083 0301 	eor.w	r3, r3, #1
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f47f ae59 	bne.w	80098a0 <lfs_mount_+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	3330      	adds	r3, #48	@ 0x30
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fa febe 	bl	8004974 <lfs_gstate_iszero>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	f083 0301 	eor.w	r3, r3, #1
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d010      	beq.n	8009c26 <lfs_mount_+0x3ce>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009c10:	481c      	ldr	r0, [pc, #112]	@ (8009c84 <lfs_mount_+0x42c>)
 8009c12:	9002      	str	r0, [sp, #8]
 8009c14:	9201      	str	r2, [sp, #4]
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 8009c1e:	491a      	ldr	r1, [pc, #104]	@ (8009c88 <lfs_mount_+0x430>)
 8009c20:	481c      	ldr	r0, [pc, #112]	@ (8009c94 <lfs_mount_+0x43c>)
 8009c22:	f002 fc19 	bl	800c458 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7fa fde1 	bl	80047f2 <lfs_tag_isvalid>
 8009c30:	4603      	mov	r3, r0
 8009c32:	f083 0301 	eor.w	r3, r3, #1
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	461a      	mov	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c3e:	441a      	add	r2, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	333c      	adds	r3, #60	@ 0x3c
 8009c4a:	3230      	adds	r2, #48	@ 0x30
 8009c4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009c5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c5e:	fb01 f202 	mul.w	r2, r1, r2
 8009c62:	1a9a      	subs	r2, r3, r2
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7fb f8a2 	bl	8004db2 <lfs_alloc_drop>

    return 0;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	e004      	b.n	8009c7c <lfs_mount_+0x424>
            goto cleanup;
 8009c72:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 f80f 	bl	8009c98 <lfs_unmount_>
    return err;
 8009c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3774      	adds	r7, #116	@ 0x74
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c84:	0800e148 	.word	0x0800e148
 8009c88:	0800e038 	.word	0x0800e038
 8009c8c:	0800e938 	.word	0x0800e938
 8009c90:	0800e96c 	.word	0x0800e96c
 8009c94:	0800e99c 	.word	0x0800e99c

08009c98 <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7ff fdb1 	bl	8009808 <lfs_deinit>
 8009ca6:	4603      	mov	r3, r0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8009cb0:	b590      	push	{r4, r7, lr}
 8009cb2:	b0a1      	sub	sp, #132	@ 0x84
 8009cb4:	af04      	add	r7, sp, #16
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
 8009cbc:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8009cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009cc2:	2220      	movs	r2, #32
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f002 fbe8 	bl	800c49c <memset>
 8009ccc:	2301      	movs	r3, #1
 8009cce:	643b      	str	r3, [r7, #64]	@ 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009cd0:	4a9a      	ldr	r2, [pc, #616]	@ (8009f3c <lfs_fs_traverse_+0x28c>)
 8009cd2:	f107 031c 	add.w	r3, r7, #28
 8009cd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009cda:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    lfs_size_t tortoise_period = 1;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	66bb      	str	r3, [r7, #104]	@ 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 8009ce6:	e0c0      	b.n	8009e6a <lfs_fs_traverse_+0x1ba>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8009ce8:	f107 021c 	add.w	r2, r7, #28
 8009cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009cf0:	3318      	adds	r3, #24
 8009cf2:	4611      	mov	r1, r2
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7fa fd1b 	bl	8004730 <lfs_pair_issync>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d009      	beq.n	8009d14 <lfs_fs_traverse_+0x64>
            LFS_WARN("Cycle detected in tail list");
 8009d00:	4b8f      	ldr	r3, [pc, #572]	@ (8009f40 <lfs_fs_traverse_+0x290>)
 8009d02:	f241 2222 	movw	r2, #4642	@ 0x1222
 8009d06:	498f      	ldr	r1, [pc, #572]	@ (8009f44 <lfs_fs_traverse_+0x294>)
 8009d08:	488f      	ldr	r0, [pc, #572]	@ (8009f48 <lfs_fs_traverse_+0x298>)
 8009d0a:	f002 fba5 	bl	800c458 <iprintf>
            return LFS_ERR_CORRUPT;
 8009d0e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8009d12:	e10f      	b.n	8009f34 <lfs_fs_traverse_+0x284>
        }
        if (tortoise_i == tortoise_period) {
 8009d14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d108      	bne.n	8009d2e <lfs_fs_traverse_+0x7e>
            tortoise[0] = dir.tail[0];
 8009d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d1e:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 8009d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d22:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8009d24:	2300      	movs	r3, #0
 8009d26:	66fb      	str	r3, [r7, #108]	@ 0x6c
            tortoise_period *= 2;
 8009d28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d2a:	005b      	lsls	r3, r3, #1
 8009d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
        }
        tortoise_i += 1;
 8009d2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d30:	3301      	adds	r3, #1
 8009d32:	66fb      	str	r3, [r7, #108]	@ 0x6c

        for (int i = 0; i < 2; i++) {
 8009d34:	2300      	movs	r3, #0
 8009d36:	667b      	str	r3, [r7, #100]	@ 0x64
 8009d38:	e013      	b.n	8009d62 <lfs_fs_traverse_+0xb2>
            int err = cb(data, dir.tail[i]);
 8009d3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d3c:	3306      	adds	r3, #6
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	3370      	adds	r3, #112	@ 0x70
 8009d42:	443b      	add	r3, r7
 8009d44:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	4611      	mov	r1, r2
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	4798      	blx	r3
 8009d50:	6478      	str	r0, [r7, #68]	@ 0x44
            if (err) {
 8009d52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d001      	beq.n	8009d5c <lfs_fs_traverse_+0xac>
                return err;
 8009d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d5a:	e0eb      	b.n	8009f34 <lfs_fs_traverse_+0x284>
        for (int i = 0; i < 2; i++) {
 8009d5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d5e:	3301      	adds	r3, #1
 8009d60:	667b      	str	r3, [r7, #100]	@ 0x64
 8009d62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	dde8      	ble.n	8009d3a <lfs_fs_traverse_+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8009d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d6c:	f103 0218 	add.w	r2, r3, #24
 8009d70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d74:	4619      	mov	r1, r3
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f7fc fb28 	bl	80063cc <lfs_dir_fetch>
 8009d7c:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (err) {
 8009d7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d001      	beq.n	8009d88 <lfs_fs_traverse_+0xd8>
            return err;
 8009d84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d86:	e0d5      	b.n	8009f34 <lfs_fs_traverse_+0x284>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009d8e:	e067      	b.n	8009e60 <lfs_fs_traverse_+0x1b0>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8009d90:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009d94:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8009d96:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009d9a:	f043 0308 	orr.w	r3, r3, #8
 8009d9e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8009da2:	f107 0214 	add.w	r2, r7, #20
 8009da6:	9200      	str	r2, [sp, #0]
 8009da8:	4a68      	ldr	r2, [pc, #416]	@ (8009f4c <lfs_fs_traverse_+0x29c>)
 8009daa:	68f8      	ldr	r0, [r7, #12]
 8009dac:	f7fb fa08 	bl	80051c0 <lfs_dir_get>
 8009db0:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (tag < 0) {
 8009db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	da05      	bge.n	8009dc4 <lfs_fs_traverse_+0x114>
                if (tag == LFS_ERR_NOENT) {
 8009db8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dba:	f113 0f02 	cmn.w	r3, #2
 8009dbe:	d049      	beq.n	8009e54 <lfs_fs_traverse_+0x1a4>
                    continue;
                }
                return tag;
 8009dc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dc2:	e0b7      	b.n	8009f34 <lfs_fs_traverse_+0x284>
            }
            lfs_ctz_fromle32(&ctz);
 8009dc4:	f107 0314 	add.w	r3, r7, #20
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7fa fec9 	bl	8004b60 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8009dce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7fa fd4f 	bl	8004874 <lfs_tag_type3>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	461a      	mov	r2, r3
 8009dda:	f240 2302 	movw	r3, #514	@ 0x202
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d113      	bne.n	8009e0a <lfs_fs_traverse_+0x15a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8009de2:	68f9      	ldr	r1, [r7, #12]
 8009de4:	6978      	ldr	r0, [r7, #20]
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	9202      	str	r2, [sp, #8]
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	9201      	str	r2, [sp, #4]
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	4603      	mov	r3, r0
 8009df4:	460a      	mov	r2, r1
 8009df6:	2100      	movs	r1, #0
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f7fe fa5b 	bl	80082b4 <lfs_ctz_traverse>
 8009dfe:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8009e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d027      	beq.n	8009e56 <lfs_fs_traverse_+0x1a6>
                    return err;
 8009e06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e08:	e094      	b.n	8009f34 <lfs_fs_traverse_+0x284>
                }
            } else if (includeorphans &&
 8009e0a:	78fb      	ldrb	r3, [r7, #3]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d022      	beq.n	8009e56 <lfs_fs_traverse_+0x1a6>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8009e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fa fd2e 	bl	8004874 <lfs_tag_type3>
 8009e18:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8009e1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e1e:	d11a      	bne.n	8009e56 <lfs_fs_traverse_+0x1a6>
                for (int i = 0; i < 2; i++) {
 8009e20:	2300      	movs	r3, #0
 8009e22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e24:	e012      	b.n	8009e4c <lfs_fs_traverse_+0x19c>
                    err = cb(data, (&ctz.head)[i]);
 8009e26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	f107 0214 	add.w	r2, r7, #20
 8009e2e:	4413      	add	r3, r2
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	4611      	mov	r1, r2
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	4798      	blx	r3
 8009e3a:	64f8      	str	r0, [r7, #76]	@ 0x4c
                    if (err) {
 8009e3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d001      	beq.n	8009e46 <lfs_fs_traverse_+0x196>
                        return err;
 8009e42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e44:	e076      	b.n	8009f34 <lfs_fs_traverse_+0x284>
                for (int i = 0; i < 2; i++) {
 8009e46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e48:	3301      	adds	r3, #1
 8009e4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	dde9      	ble.n	8009e26 <lfs_fs_traverse_+0x176>
 8009e52:	e000      	b.n	8009e56 <lfs_fs_traverse_+0x1a6>
                    continue;
 8009e54:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8009e56:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009e60:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009e62:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d392      	bcc.n	8009d90 <lfs_fs_traverse_+0xe0>
    while (!lfs_pair_isnull(dir.tail)) {
 8009e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e6e:	3318      	adds	r3, #24
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7fa fc18 	bl	80046a6 <lfs_pair_isnull>
 8009e76:	4603      	mov	r3, r0
 8009e78:	f083 0301 	eor.w	r3, r3, #1
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	f47f af32 	bne.w	8009ce8 <lfs_fs_traverse_+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e8a:	e04f      	b.n	8009f2c <lfs_fs_traverse_+0x27c>
        if (f->type != LFS_TYPE_REG) {
 8009e8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e8e:	799b      	ldrb	r3, [r3, #6]
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d147      	bne.n	8009f24 <lfs_fs_traverse_+0x274>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8009e94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d01d      	beq.n	8009edc <lfs_fs_traverse_+0x22c>
 8009ea0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ea4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d117      	bne.n	8009edc <lfs_fs_traverse_+0x22c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8009eac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009eae:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009eb6:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8009eb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	9202      	str	r2, [sp, #8]
 8009ec0:	68ba      	ldr	r2, [r7, #8]
 8009ec2:	9201      	str	r2, [sp, #4]
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	4623      	mov	r3, r4
 8009ec8:	4602      	mov	r2, r0
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f7fe f9f2 	bl	80082b4 <lfs_ctz_traverse>
 8009ed0:	6578      	str	r0, [r7, #84]	@ 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8009ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d001      	beq.n	8009edc <lfs_fs_traverse_+0x22c>
                return err;
 8009ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009eda:	e02b      	b.n	8009f34 <lfs_fs_traverse_+0x284>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8009edc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d01e      	beq.n	8009f26 <lfs_fs_traverse_+0x276>
 8009ee8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d118      	bne.n	8009f26 <lfs_fs_traverse_+0x276>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8009ef4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ef6:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009efe:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8009f00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	9202      	str	r2, [sp, #8]
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	9201      	str	r2, [sp, #4]
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	4623      	mov	r3, r4
 8009f10:	4602      	mov	r2, r0
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f7fe f9ce 	bl	80082b4 <lfs_ctz_traverse>
 8009f18:	6538      	str	r0, [r7, #80]	@ 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 8009f1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d002      	beq.n	8009f26 <lfs_fs_traverse_+0x276>
                return err;
 8009f20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f22:	e007      	b.n	8009f34 <lfs_fs_traverse_+0x284>
            continue;
 8009f24:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8009f26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d1ac      	bne.n	8009e8c <lfs_fs_traverse_+0x1dc>
            }
        }
    }
#endif

    return 0;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3774      	adds	r7, #116	@ 0x74
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd90      	pop	{r4, r7, pc}
 8009f3c:	0800e18c 	.word	0x0800e18c
 8009f40:	0800e148 	.word	0x0800e148
 8009f44:	0800e038 	.word	0x0800e038
 8009f48:	0800e7f8 	.word	0x0800e7f8
 8009f4c:	700ffc00 	.word	0x700ffc00

08009f50 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b08a      	sub	sp, #40	@ 0x28
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009f68:	4a2d      	ldr	r2, [pc, #180]	@ (800a020 <lfs_fs_pred+0xd0>)
 8009f6a:	f107 0314 	add.w	r3, r7, #20
 8009f6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f72:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8009f76:	2301      	movs	r3, #1
 8009f78:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t tortoise_period = 1;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8009f7e:	e03e      	b.n	8009ffe <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	3318      	adds	r3, #24
 8009f84:	f107 0214 	add.w	r2, r7, #20
 8009f88:	4611      	mov	r1, r2
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fa fbd0 	bl	8004730 <lfs_pair_issync>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d009      	beq.n	8009faa <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8009f96:	4b23      	ldr	r3, [pc, #140]	@ (800a024 <lfs_fs_pred+0xd4>)
 8009f98:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 8009f9c:	4922      	ldr	r1, [pc, #136]	@ (800a028 <lfs_fs_pred+0xd8>)
 8009f9e:	4823      	ldr	r0, [pc, #140]	@ (800a02c <lfs_fs_pred+0xdc>)
 8009fa0:	f002 fa5a 	bl	800c458 <iprintf>
            return LFS_ERR_CORRUPT;
 8009fa4:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8009fa8:	e036      	b.n	800a018 <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 8009faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d10a      	bne.n	8009fc8 <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	699b      	ldr	r3, [r3, #24]
 8009fb6:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	69db      	ldr	r3, [r3, #28]
 8009fbc:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	627b      	str	r3, [r7, #36]	@ 0x24
            tortoise_period *= 2;
 8009fc2:	6a3b      	ldr	r3, [r7, #32]
 8009fc4:	005b      	lsls	r3, r3, #1
 8009fc6:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fca:	3301      	adds	r3, #1
 8009fcc:	627b      	str	r3, [r7, #36]	@ 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	3318      	adds	r3, #24
 8009fd2:	68b9      	ldr	r1, [r7, #8]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7fa fb81 	bl	80046dc <lfs_pair_cmp>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d101      	bne.n	8009fe4 <lfs_fs_pred+0x94>
            return 0;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	e019      	b.n	800a018 <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	3318      	adds	r3, #24
 8009fe8:	461a      	mov	r2, r3
 8009fea:	6879      	ldr	r1, [r7, #4]
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f7fc f9ed 	bl	80063cc <lfs_dir_fetch>
 8009ff2:	61f8      	str	r0, [r7, #28]
        if (err) {
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d001      	beq.n	8009ffe <lfs_fs_pred+0xae>
            return err;
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	e00c      	b.n	800a018 <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	3318      	adds	r3, #24
 800a002:	4618      	mov	r0, r3
 800a004:	f7fa fb4f 	bl	80046a6 <lfs_pair_isnull>
 800a008:	4603      	mov	r3, r0
 800a00a:	f083 0301 	eor.w	r3, r3, #1
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1b5      	bne.n	8009f80 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 800a014:	f06f 0301 	mvn.w	r3, #1
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3728      	adds	r7, #40	@ 0x28
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	0800e18c 	.word	0x0800e18c
 800a024:	0800e148 	.word	0x0800e148
 800a028:	0800e038 	.word	0x0800e038
 800a02c:	0800e7f8 	.word	0x0800e7f8

0800a030 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800a030:	b5b0      	push	{r4, r5, r7, lr}
 800a032:	b08e      	sub	sp, #56	@ 0x38
 800a034:	af04      	add	r7, sp, #16
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 800a040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800a04a:	6a3b      	ldr	r3, [r7, #32]
 800a04c:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 800a050:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800a052:	6a3b      	ldr	r3, [r7, #32]
 800a054:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a056:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	69fa      	ldr	r2, [r7, #28]
 800a05e:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 800a060:	2108      	movs	r1, #8
 800a062:	9103      	str	r1, [sp, #12]
 800a064:	f107 0110 	add.w	r1, r7, #16
 800a068:	9102      	str	r1, [sp, #8]
 800a06a:	9201      	str	r2, [sp, #4]
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	462b      	mov	r3, r5
 800a070:	4622      	mov	r2, r4
 800a072:	4601      	mov	r1, r0
 800a074:	6a38      	ldr	r0, [r7, #32]
 800a076:	f7f9 ff8f 	bl	8003f98 <lfs_bd_read>
 800a07a:	61b8      	str	r0, [r7, #24]
    if (err) {
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d001      	beq.n	800a086 <lfs_fs_parent_match+0x56>
        return err;
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	e012      	b.n	800a0ac <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800a086:	f107 0310 	add.w	r3, r7, #16
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fa fb7d 	bl	800478a <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 800a090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a092:	1d1a      	adds	r2, r3, #4
 800a094:	f107 0310 	add.w	r3, r7, #16
 800a098:	4611      	mov	r1, r2
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fa fb1e 	bl	80046dc <lfs_pair_cmp>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	bf14      	ite	ne
 800a0a6:	2301      	movne	r3, #1
 800a0a8:	2300      	moveq	r3, #0
 800a0aa:	b2db      	uxtb	r3, r3
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3728      	adds	r7, #40	@ 0x28
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bdb0      	pop	{r4, r5, r7, pc}

0800a0b4 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b090      	sub	sp, #64	@ 0x40
 800a0b8:	af04      	add	r7, sp, #16
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800a0cc:	4a33      	ldr	r2, [pc, #204]	@ (800a19c <lfs_fs_parent+0xe8>)
 800a0ce:	f107 031c 	add.w	r3, r7, #28
 800a0d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a0d6:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t tortoise_period = 1;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 800a0e2:	e04a      	b.n	800a17a <lfs_fs_parent+0xc6>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	3318      	adds	r3, #24
 800a0e8:	f107 021c 	add.w	r2, r7, #28
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7fa fb1e 	bl	8004730 <lfs_pair_issync>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d009      	beq.n	800a10e <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 800a0fa:	4b29      	ldr	r3, [pc, #164]	@ (800a1a0 <lfs_fs_parent+0xec>)
 800a0fc:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 800a100:	4928      	ldr	r1, [pc, #160]	@ (800a1a4 <lfs_fs_parent+0xf0>)
 800a102:	4829      	ldr	r0, [pc, #164]	@ (800a1a8 <lfs_fs_parent+0xf4>)
 800a104:	f002 f9a8 	bl	800c458 <iprintf>
            return LFS_ERR_CORRUPT;
 800a108:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800a10c:	e042      	b.n	800a194 <lfs_fs_parent+0xe0>
        }
        if (tortoise_i == tortoise_period) {
 800a10e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a112:	429a      	cmp	r2, r3
 800a114:	d10a      	bne.n	800a12c <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	699b      	ldr	r3, [r3, #24]
 800a11a:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	69db      	ldr	r3, [r3, #28]
 800a120:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 800a122:	2300      	movs	r3, #0
 800a124:	62fb      	str	r3, [r7, #44]	@ 0x2c
            tortoise_period *= 2;
 800a126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a128:	005b      	lsls	r3, r3, #1
 800a12a:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        tortoise_i += 1;
 800a12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a12e:	3301      	adds	r3, #1
 800a130:	62fb      	str	r3, [r7, #44]	@ 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800a140:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	3304      	adds	r3, #4
 800a146:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800a148:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800a14a:	f107 0310 	add.w	r3, r7, #16
 800a14e:	9303      	str	r3, [sp, #12]
 800a150:	4b16      	ldr	r3, [pc, #88]	@ (800a1ac <lfs_fs_parent+0xf8>)
 800a152:	9302      	str	r3, [sp, #8]
 800a154:	2300      	movs	r3, #0
 800a156:	9301      	str	r3, [sp, #4]
 800a158:	4b15      	ldr	r3, [pc, #84]	@ (800a1b0 <lfs_fs_parent+0xfc>)
 800a15a:	9300      	str	r3, [sp, #0]
 800a15c:	4b15      	ldr	r3, [pc, #84]	@ (800a1b4 <lfs_fs_parent+0x100>)
 800a15e:	6879      	ldr	r1, [r7, #4]
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f7fb fd63 	bl	8005c2c <lfs_dir_fetchmatch>
 800a166:	6278      	str	r0, [r7, #36]	@ 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 800a168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d005      	beq.n	800a17a <lfs_fs_parent+0xc6>
 800a16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a170:	f113 0f02 	cmn.w	r3, #2
 800a174:	d001      	beq.n	800a17a <lfs_fs_parent+0xc6>
            return tag;
 800a176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a178:	e00c      	b.n	800a194 <lfs_fs_parent+0xe0>
    while (!lfs_pair_isnull(parent->tail)) {
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	3318      	adds	r3, #24
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fa fa91 	bl	80046a6 <lfs_pair_isnull>
 800a184:	4603      	mov	r3, r0
 800a186:	f083 0301 	eor.w	r3, r3, #1
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1a9      	bne.n	800a0e4 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 800a190:	f06f 0301 	mvn.w	r3, #1
}
 800a194:	4618      	mov	r0, r3
 800a196:	3730      	adds	r7, #48	@ 0x30
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	0800e18c 	.word	0x0800e18c
 800a1a0:	0800e148 	.word	0x0800e148
 800a1a4:	0800e038 	.word	0x0800e038
 800a1a8:	0800e7f8 	.word	0x0800e7f8
 800a1ac:	0800a031 	.word	0x0800a031
 800a1b0:	20000008 	.word	0x20000008
 800a1b4:	7ff003ff 	.word	0x7ff003ff

0800a1b8 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1c8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 800a1cc:	78fb      	ldrb	r3, [r7, #3]
 800a1ce:	025b      	lsls	r3, r3, #9
 800a1d0:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a1d6:	bf00      	nop
 800a1d8:	370c      	adds	r7, #12
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
	...

0800a1e4 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 800a1e4:	b590      	push	{r4, r7, lr}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7fa fb77 	bl	80048e8 <lfs_tag_size>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10a      	bne.n	800a216 <lfs_fs_preporphans+0x32>
 800a200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a204:	2b00      	cmp	r3, #0
 800a206:	da06      	bge.n	800a216 <lfs_fs_preporphans+0x32>
 800a208:	4b1a      	ldr	r3, [pc, #104]	@ (800a274 <lfs_fs_preporphans+0x90>)
 800a20a:	4a1b      	ldr	r2, [pc, #108]	@ (800a278 <lfs_fs_preporphans+0x94>)
 800a20c:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 800a210:	481a      	ldr	r0, [pc, #104]	@ (800a27c <lfs_fs_preporphans+0x98>)
 800a212:	f001 fecb 	bl	800bfac <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7fa fb64 	bl	80048e8 <lfs_tag_size>
 800a220:	4603      	mov	r3, r0
 800a222:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 800a226:	d90a      	bls.n	800a23e <lfs_fs_preporphans+0x5a>
 800a228:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	dd06      	ble.n	800a23e <lfs_fs_preporphans+0x5a>
 800a230:	4b13      	ldr	r3, [pc, #76]	@ (800a280 <lfs_fs_preporphans+0x9c>)
 800a232:	4a11      	ldr	r2, [pc, #68]	@ (800a278 <lfs_fs_preporphans+0x94>)
 800a234:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 800a238:	4810      	ldr	r0, [pc, #64]	@ (800a27c <lfs_fs_preporphans+0x98>)
 800a23a:	f001 feb7 	bl	800bfac <__assert_func>
    lfs->gstate.tag += orphans;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a246:	441a      	add	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a250:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	3330      	adds	r3, #48	@ 0x30
 800a258:	4618      	mov	r0, r3
 800a25a:	f7fa fba8 	bl	80049ae <lfs_gstate_hasorphans>
 800a25e:	4603      	mov	r3, r0
 800a260:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800a262:	ea44 0203 	orr.w	r2, r4, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	bd90      	pop	{r4, r7, pc}
 800a274:	0800e9d4 	.word	0x0800e9d4
 800a278:	0800ee7c 	.word	0x0800ee7c
 800a27c:	0800e038 	.word	0x0800e038
 800a280:	0800ea0c 	.word	0x0800ea0c

0800a284 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	460b      	mov	r3, r1
 800a28e:	607a      	str	r2, [r7, #4]
 800a290:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a296:	4a17      	ldr	r2, [pc, #92]	@ (800a2f4 <lfs_fs_prepmove+0x70>)
 800a298:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 800a29a:	897b      	ldrh	r3, [r7, #10]
 800a29c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800a2a0:	428b      	cmp	r3, r1
 800a2a2:	d006      	beq.n	800a2b2 <lfs_fs_prepmove+0x2e>
 800a2a4:	897b      	ldrh	r3, [r7, #10]
 800a2a6:	029b      	lsls	r3, r3, #10
 800a2a8:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800a2ac:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800a2b0:	e000      	b.n	800a2b4 <lfs_fs_prepmove+0x30>
 800a2b2:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800a2b4:	431a      	orrs	r2, r3
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 800a2ba:	897b      	ldrh	r3, [r7, #10]
 800a2bc:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d002      	beq.n	800a2ca <lfs_fs_prepmove+0x46>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	e000      	b.n	800a2cc <lfs_fs_prepmove+0x48>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 800a2d0:	897b      	ldrh	r3, [r7, #10]
 800a2d2:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d003      	beq.n	800a2e2 <lfs_fs_prepmove+0x5e>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	3304      	adds	r3, #4
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	e000      	b.n	800a2e4 <lfs_fs_prepmove+0x60>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800a2e8:	bf00      	nop
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr
 800a2f4:	800003ff 	.word	0x800003ff

0800a2f8 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b098      	sub	sp, #96	@ 0x60
 800a2fc:	af02      	add	r7, sp, #8
 800a2fe:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	3330      	adds	r3, #48	@ 0x30
 800a304:	4618      	mov	r0, r3
 800a306:	f7fa fb87 	bl	8004a18 <lfs_gstate_needssuperblock>
 800a30a:	4603      	mov	r3, r0
 800a30c:	f083 0301 	eor.w	r3, r3, #1
 800a310:	b2db      	uxtb	r3, r3
 800a312:	2b00      	cmp	r3, #0
 800a314:	d001      	beq.n	800a31a <lfs_fs_desuperblock+0x22>
        return 0;
 800a316:	2300      	movs	r3, #0
 800a318:	e04e      	b.n	800a3b8 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a1a      	ldr	r2, [r3, #32]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a322:	4927      	ldr	r1, [pc, #156]	@ (800a3c0 <lfs_fs_desuperblock+0xc8>)
 800a324:	9101      	str	r1, [sp, #4]
 800a326:	9300      	str	r3, [sp, #0]
 800a328:	4613      	mov	r3, r2
 800a32a:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 800a32e:	4925      	ldr	r1, [pc, #148]	@ (800a3c4 <lfs_fs_desuperblock+0xcc>)
 800a330:	4825      	ldr	r0, [pc, #148]	@ (800a3c8 <lfs_fs_desuperblock+0xd0>)
 800a332:	f002 f891 	bl	800c458 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f103 0220 	add.w	r2, r3, #32
 800a33c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800a340:	4619      	mov	r1, r3
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f7fc f842 	bl	80063cc <lfs_dir_fetch>
 800a348:	6578      	str	r0, [r7, #84]	@ 0x54
    if (err) {
 800a34a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d001      	beq.n	800a354 <lfs_fs_desuperblock+0x5c>
        return err;
 800a350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a352:	e031      	b.n	800a3b8 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f7fa fcf5 	bl	8004d44 <lfs_fs_disk_version>
 800a35a:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 800a35c:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a362:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 800a364:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 800a36a:	627b      	str	r3, [r7, #36]	@ 0x24
        .name_max    = lfs->name_max,
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    lfs_superblock_t superblock = {
 800a370:	62bb      	str	r3, [r7, #40]	@ 0x28
        .file_max    = lfs->file_max,
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    lfs_superblock_t superblock = {
 800a376:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .attr_max    = lfs->attr_max,
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    lfs_superblock_t superblock = {
 800a37c:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    lfs_superblock_tole32(&superblock);
 800a37e:	f107 031c 	add.w	r3, r7, #28
 800a382:	4618      	mov	r0, r3
 800a384:	f7fa fc54 	bl	8004c30 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800a388:	4b10      	ldr	r3, [pc, #64]	@ (800a3cc <lfs_fs_desuperblock+0xd4>)
 800a38a:	617b      	str	r3, [r7, #20]
 800a38c:	f107 031c 	add.w	r3, r7, #28
 800a390:	61bb      	str	r3, [r7, #24]
 800a392:	f107 0214 	add.w	r2, r7, #20
 800a396:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800a39a:	2301      	movs	r3, #1
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f7fd fdb7 	bl	8007f10 <lfs_dir_commit>
 800a3a2:	6578      	str	r0, [r7, #84]	@ 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 800a3a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d001      	beq.n	800a3ae <lfs_fs_desuperblock+0xb6>
        return err;
 800a3aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3ac:	e004      	b.n	800a3b8 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f7ff ff01 	bl	800a1b8 <lfs_fs_prepsuperblock>
    return 0;
 800a3b6:	2300      	movs	r3, #0
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3758      	adds	r7, #88	@ 0x58
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	0800e148 	.word	0x0800e148
 800a3c4:	0800e038 	.word	0x0800e038
 800a3c8:	0800ea44 	.word	0x0800ea44
 800a3cc:	20100018 	.word	0x20100018

0800a3d0 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 800a3d0:	b5b0      	push	{r4, r5, r7, lr}
 800a3d2:	b094      	sub	sp, #80	@ 0x50
 800a3d4:	af04      	add	r7, sp, #16
 800a3d6:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	333c      	adds	r3, #60	@ 0x3c
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7fa fb08 	bl	80049f2 <lfs_gstate_hasmove>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	f083 0301 	eor.w	r3, r3, #1
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d001      	beq.n	800a3f2 <lfs_fs_demove+0x22>
        return 0;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	e05b      	b.n	800a4aa <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fa fa62 	bl	80048c8 <lfs_tag_id>
 800a404:	4603      	mov	r3, r0
 800a406:	461a      	mov	r2, r3
 800a408:	4b2a      	ldr	r3, [pc, #168]	@ (800a4b4 <lfs_fs_demove+0xe4>)
 800a40a:	9302      	str	r3, [sp, #8]
 800a40c:	9201      	str	r2, [sp, #4]
 800a40e:	9400      	str	r4, [sp, #0]
 800a410:	462b      	mov	r3, r5
 800a412:	f241 3224 	movw	r2, #4900	@ 0x1324
 800a416:	4928      	ldr	r1, [pc, #160]	@ (800a4b8 <lfs_fs_demove+0xe8>)
 800a418:	4828      	ldr	r0, [pc, #160]	@ (800a4bc <lfs_fs_demove+0xec>)
 800a41a:	f002 f81d 	bl	800c458 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a422:	4618      	mov	r0, r3
 800a424:	f7fa fa26 	bl	8004874 <lfs_tag_type3>
 800a428:	4603      	mov	r3, r0
 800a42a:	461a      	mov	r2, r3
 800a42c:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 800a430:	429a      	cmp	r2, r3
 800a432:	d006      	beq.n	800a442 <lfs_fs_demove+0x72>
 800a434:	4b22      	ldr	r3, [pc, #136]	@ (800a4c0 <lfs_fs_demove+0xf0>)
 800a436:	4a23      	ldr	r2, [pc, #140]	@ (800a4c4 <lfs_fs_demove+0xf4>)
 800a438:	f241 312b 	movw	r1, #4907	@ 0x132b
 800a43c:	481e      	ldr	r0, [pc, #120]	@ (800a4b8 <lfs_fs_demove+0xe8>)
 800a43e:	f001 fdb5 	bl	800bfac <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800a448:	f107 0318 	add.w	r3, r7, #24
 800a44c:	4619      	mov	r1, r3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7fb ffbc 	bl	80063cc <lfs_dir_fetch>
 800a454:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 800a456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d001      	beq.n	800a460 <lfs_fs_demove+0x90>
        return err;
 800a45c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a45e:	e024      	b.n	800a4aa <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a464:	4618      	mov	r0, r3
 800a466:	f7fa fa2f 	bl	80048c8 <lfs_tag_id>
 800a46a:	4603      	mov	r3, r0
 800a46c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800a46e:	2200      	movs	r2, #0
 800a470:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f7ff ff05 	bl	800a284 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 800a47a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a47c:	029b      	lsls	r3, r3, #10
 800a47e:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800a482:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800a486:	613b      	str	r3, [r7, #16]
 800a488:	2300      	movs	r3, #0
 800a48a:	617b      	str	r3, [r7, #20]
 800a48c:	f107 0210 	add.w	r2, r7, #16
 800a490:	f107 0118 	add.w	r1, r7, #24
 800a494:	2301      	movs	r3, #1
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7fd fd3a 	bl	8007f10 <lfs_dir_commit>
 800a49c:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800a49e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d001      	beq.n	800a4a8 <lfs_fs_demove+0xd8>
        return err;
 800a4a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4a6:	e000      	b.n	800a4aa <lfs_fs_demove+0xda>
    }

    return 0;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3740      	adds	r7, #64	@ 0x40
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bdb0      	pop	{r4, r5, r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	0800e148 	.word	0x0800e148
 800a4b8:	0800e038 	.word	0x0800e038
 800a4bc:	0800ea78 	.word	0x0800ea78
 800a4c0:	0800eaac 	.word	0x0800eaac
 800a4c4:	0800ee90 	.word	0x0800ee90

0800a4c8 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 800a4c8:	b5b0      	push	{r4, r5, r7, lr}
 800a4ca:	b0b2      	sub	sp, #200	@ 0xc8
 800a4cc:	af04      	add	r7, sp, #16
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	3330      	adds	r3, #48	@ 0x30
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7fa fa68 	bl	80049ae <lfs_gstate_hasorphans>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	f083 0301 	eor.w	r3, r3, #1
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d001      	beq.n	800a4ee <lfs_fs_deorphan+0x26>
        return 0;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	e188      	b.n	800a800 <lfs_fs_deorphan+0x338>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 800a4f4:	e171      	b.n	800a7da <lfs_fs_deorphan+0x312>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 800a4f6:	f107 0308 	add.w	r3, r7, #8
 800a4fa:	2220      	movs	r2, #32
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	4618      	mov	r0, r3
 800a500:	f001 ffcc 	bl	800c49c <memset>
 800a504:	2301      	movs	r3, #1
 800a506:	77fb      	strb	r3, [r7, #31]
 800a508:	2301      	movs	r3, #1
 800a50a:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 800a50c:	2300      	movs	r3, #0
 800a50e:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 800a512:	e14a      	b.n	800a7aa <lfs_fs_deorphan+0x2e2>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 800a514:	f107 0308 	add.w	r3, r7, #8
 800a518:	f103 0218 	add.w	r2, r3, #24
 800a51c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a520:	4619      	mov	r1, r3
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f7fb ff52 	bl	80063cc <lfs_dir_fetch>
 800a528:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
            if (err) {
 800a52c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a530:	2b00      	cmp	r3, #0
 800a532:	d002      	beq.n	800a53a <lfs_fs_deorphan+0x72>
                return err;
 800a534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a538:	e162      	b.n	800a800 <lfs_fs_deorphan+0x338>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 800a53a:	7ffb      	ldrb	r3, [r7, #31]
 800a53c:	f083 0301 	eor.w	r3, r3, #1
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b00      	cmp	r3, #0
 800a544:	f000 8125 	beq.w	800a792 <lfs_fs_deorphan+0x2ca>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800a548:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a54c:	f107 0308 	add.w	r3, r7, #8
 800a550:	3318      	adds	r3, #24
 800a552:	4619      	mov	r1, r3
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f7ff fdad 	bl	800a0b4 <lfs_fs_parent>
 800a55a:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 800a55e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a562:	2b00      	cmp	r3, #0
 800a564:	da07      	bge.n	800a576 <lfs_fs_deorphan+0xae>
 800a566:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a56a:	f113 0f02 	cmn.w	r3, #2
 800a56e:	d002      	beq.n	800a576 <lfs_fs_deorphan+0xae>
                    return tag;
 800a570:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a574:	e10c      	b.n	800a790 <lfs_fs_deorphan+0x2c8>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 800a576:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f040 80ac 	bne.w	800a6d8 <lfs_fs_deorphan+0x210>
 800a580:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a584:	f113 0f02 	cmn.w	r3, #2
 800a588:	f000 80a6 	beq.w	800a6d8 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 800a58c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a590:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800a594:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	4613      	mov	r3, r2
 800a59c:	4a9a      	ldr	r2, [pc, #616]	@ (800a808 <lfs_fs_deorphan+0x340>)
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7fa fe0e 	bl	80051c0 <lfs_dir_get>
 800a5a4:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 800a5a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	da02      	bge.n	800a5b6 <lfs_fs_deorphan+0xee>
                        return state;
 800a5b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                    return tag;
 800a5b4:	e124      	b.n	800a800 <lfs_fs_deorphan+0x338>
                    }
                    lfs_pair_fromle32(pair);
 800a5b6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fa f8e5 	bl	800478a <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 800a5c0:	f107 0308 	add.w	r3, r7, #8
 800a5c4:	f103 0218 	add.w	r2, r3, #24
 800a5c8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7fa f8ae 	bl	8004730 <lfs_pair_issync>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	f083 0301 	eor.w	r3, r3, #1
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d07b      	beq.n	800a6d8 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 800a5e0:	6a38      	ldr	r0, [r7, #32]
 800a5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a5e8:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800a5ec:	4c87      	ldr	r4, [pc, #540]	@ (800a80c <lfs_fs_deorphan+0x344>)
 800a5ee:	9403      	str	r4, [sp, #12]
 800a5f0:	9102      	str	r1, [sp, #8]
 800a5f2:	9201      	str	r2, [sp, #4]
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	f241 3271 	movw	r2, #4977	@ 0x1371
 800a5fc:	4984      	ldr	r1, [pc, #528]	@ (800a810 <lfs_fs_deorphan+0x348>)
 800a5fe:	4885      	ldr	r0, [pc, #532]	@ (800a814 <lfs_fs_deorphan+0x34c>)
 800a600:	f001 ff2a 	bl	800c458 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 800a604:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800a608:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	3330      	adds	r3, #48	@ 0x30
 800a610:	f107 0208 	add.w	r2, r7, #8
 800a614:	4611      	mov	r1, r2
 800a616:	4618      	mov	r0, r3
 800a618:	f7fa fa12 	bl	8004a40 <lfs_gstate_hasmovehere>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d01c      	beq.n	800a65c <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a626:	4618      	mov	r0, r3
 800a628:	f7fa f94e 	bl	80048c8 <lfs_tag_id>
 800a62c:	4603      	mov	r3, r0
 800a62e:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 800a632:	68b9      	ldr	r1, [r7, #8]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 800a63a:	4874      	ldr	r0, [pc, #464]	@ (800a80c <lfs_fs_deorphan+0x344>)
 800a63c:	9002      	str	r0, [sp, #8]
 800a63e:	9201      	str	r2, [sp, #4]
 800a640:	9300      	str	r3, [sp, #0]
 800a642:	460b      	mov	r3, r1
 800a644:	f241 327c 	movw	r2, #4988	@ 0x137c
 800a648:	4971      	ldr	r1, [pc, #452]	@ (800a810 <lfs_fs_deorphan+0x348>)
 800a64a:	4873      	ldr	r0, [pc, #460]	@ (800a818 <lfs_fs_deorphan+0x350>)
 800a64c:	f001 ff04 	bl	800c458 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800a650:	2200      	movs	r2, #0
 800a652:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f7ff fe14 	bl	800a284 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 800a65c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800a660:	4618      	mov	r0, r3
 800a662:	f7fa f8ac 	bl	80047be <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800a666:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 800a66a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800a66e:	4293      	cmp	r3, r2
 800a670:	d007      	beq.n	800a682 <lfs_fs_deorphan+0x1ba>
 800a672:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 800a676:	029b      	lsls	r3, r3, #10
 800a678:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800a67c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800a680:	e000      	b.n	800a684 <lfs_fs_deorphan+0x1bc>
 800a682:	2300      	movs	r3, #0
 800a684:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a688:	2300      	movs	r3, #0
 800a68a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a68e:	4b63      	ldr	r3, [pc, #396]	@ (800a81c <lfs_fs_deorphan+0x354>)
 800a690:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a694:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800a698:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a69c:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 800a6a0:	f107 0108 	add.w	r1, r7, #8
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f7fd f938 	bl	800791c <lfs_dir_orphaningcommit>
 800a6ac:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 800a6b0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7fa f868 	bl	800478a <lfs_pair_fromle32>
                        if (state < 0) {
 800a6ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	da02      	bge.n	800a6c8 <lfs_fs_deorphan+0x200>
                            return state;
 800a6c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 800a6c6:	e063      	b.n	800a790 <lfs_fs_deorphan+0x2c8>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 800a6c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a6cc:	2b03      	cmp	r3, #3
 800a6ce:	d16c      	bne.n	800a7aa <lfs_fs_deorphan+0x2e2>
                            moreorphans = true;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 800a6d6:	e068      	b.n	800a7aa <lfs_fs_deorphan+0x2e2>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 800a6d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d158      	bne.n	800a792 <lfs_fs_deorphan+0x2ca>
 800a6e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a6e4:	f113 0f02 	cmn.w	r3, #2
 800a6e8:	d153      	bne.n	800a792 <lfs_fs_deorphan+0x2ca>
 800a6ea:	78fb      	ldrb	r3, [r7, #3]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d050      	beq.n	800a792 <lfs_fs_deorphan+0x2ca>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 800a6f0:	6a3a      	ldr	r2, [r7, #32]
 800a6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f4:	4945      	ldr	r1, [pc, #276]	@ (800a80c <lfs_fs_deorphan+0x344>)
 800a6f6:	9101      	str	r1, [sp, #4]
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	f241 329c 	movw	r2, #5020	@ 0x139c
 800a700:	4943      	ldr	r1, [pc, #268]	@ (800a810 <lfs_fs_deorphan+0x348>)
 800a702:	4847      	ldr	r0, [pc, #284]	@ (800a820 <lfs_fs_deorphan+0x358>)
 800a704:	f001 fea8 	bl	800c458 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800a70e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a712:	4619      	mov	r1, r3
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f7fb fe75 	bl	8006404 <lfs_dir_getgstate>
 800a71a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                    if (err) {
 800a71e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a722:	2b00      	cmp	r3, #0
 800a724:	d002      	beq.n	800a72c <lfs_fs_deorphan+0x264>
                        return err;
 800a726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a72a:	e030      	b.n	800a78e <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 800a72c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a730:	3318      	adds	r3, #24
 800a732:	4618      	mov	r0, r3
 800a734:	f7fa f843 	bl	80047be <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800a738:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a73c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800a740:	051a      	lsls	r2, r3, #20
 800a742:	4b38      	ldr	r3, [pc, #224]	@ (800a824 <lfs_fs_deorphan+0x35c>)
 800a744:	4313      	orrs	r3, r2
 800a746:	673b      	str	r3, [r7, #112]	@ 0x70
 800a748:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a74c:	3318      	adds	r3, #24
 800a74e:	677b      	str	r3, [r7, #116]	@ 0x74
 800a750:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800a754:	f107 0108 	add.w	r1, r7, #8
 800a758:	2301      	movs	r3, #1
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7fd f8de 	bl	800791c <lfs_dir_orphaningcommit>
 800a760:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 800a764:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a768:	3318      	adds	r3, #24
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fa f80d 	bl	800478a <lfs_pair_fromle32>
                    if (state < 0) {
 800a770:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a774:	2b00      	cmp	r3, #0
 800a776:	da02      	bge.n	800a77e <lfs_fs_deorphan+0x2b6>
                        return state;
 800a778:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a77c:	e007      	b.n	800a78e <lfs_fs_deorphan+0x2c6>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 800a77e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a782:	2b03      	cmp	r3, #3
 800a784:	d110      	bne.n	800a7a8 <lfs_fs_deorphan+0x2e0>
                        moreorphans = true;
 800a786:	2301      	movs	r3, #1
 800a788:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 800a78c:	e00d      	b.n	800a7aa <lfs_fs_deorphan+0x2e2>
                    return tag;
 800a78e:	e037      	b.n	800a800 <lfs_fs_deorphan+0x338>
                return err;
 800a790:	e036      	b.n	800a800 <lfs_fs_deorphan+0x338>
                    // refetch tail
                    continue;
                }
            }

            pdir = dir;
 800a792:	f107 0408 	add.w	r4, r7, #8
 800a796:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 800a79a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a79c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a79e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a7a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a7a6:	e000      	b.n	800a7aa <lfs_fs_deorphan+0x2e2>
                    continue;
 800a7a8:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 800a7aa:	f107 0308 	add.w	r3, r7, #8
 800a7ae:	3318      	adds	r3, #24
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7f9 ff78 	bl	80046a6 <lfs_pair_isnull>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	f083 0301 	eor.w	r3, r3, #1
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f47f aea8 	bne.w	800a514 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 800a7c4:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d001      	beq.n	800a7d0 <lfs_fs_deorphan+0x308>
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	e002      	b.n	800a7d6 <lfs_fs_deorphan+0x30e>
 800a7d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 800a7da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	f77f ae89 	ble.w	800a4f6 <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	3330      	adds	r3, #48	@ 0x30
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7fa f8f3 	bl	80049d4 <lfs_gstate_getorphans>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	425b      	negs	r3, r3
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	b25b      	sxtb	r3, r3
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f7ff fcf3 	bl	800a1e4 <lfs_fs_preporphans>
 800a7fe:	4603      	mov	r3, r0
}
 800a800:	4618      	mov	r0, r3
 800a802:	37b8      	adds	r7, #184	@ 0xb8
 800a804:	46bd      	mov	sp, r7
 800a806:	bdb0      	pop	{r4, r5, r7, pc}
 800a808:	7ffffc00 	.word	0x7ffffc00
 800a80c:	0800e148 	.word	0x0800e148
 800a810:	0800e038 	.word	0x0800e038
 800a814:	0800eae0 	.word	0x0800eae0
 800a818:	0800eb24 	.word	0x0800eb24
 800a81c:	600ffc08 	.word	0x600ffc08
 800a820:	0800eb6c 	.word	0x0800eb6c
 800a824:	000ffc08 	.word	0x000ffc08

0800a828 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f7ff fd61 	bl	800a2f8 <lfs_fs_desuperblock>
 800a836:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d001      	beq.n	800a842 <lfs_fs_forceconsistency+0x1a>
        return err;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	e013      	b.n	800a86a <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f7ff fdc4 	bl	800a3d0 <lfs_fs_demove>
 800a848:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d001      	beq.n	800a854 <lfs_fs_forceconsistency+0x2c>
        return err;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	e00a      	b.n	800a86a <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 800a854:	2101      	movs	r1, #1
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f7ff fe36 	bl	800a4c8 <lfs_fs_deorphan>
 800a85c:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d001      	beq.n	800a868 <lfs_fs_forceconsistency+0x40>
        return err;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	e000      	b.n	800a86a <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 800a872:	b480      	push	{r7}
 800a874:	b085      	sub	sp, #20
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
 800a87a:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	1c5a      	adds	r2, r3, #1
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	601a      	str	r2, [r3, #0]
    return 0;
 800a88a:	2300      	movs	r3, #0
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3714      	adds	r7, #20
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 800a8a4:	f107 0208 	add.w	r2, r7, #8
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	4907      	ldr	r1, [pc, #28]	@ (800a8c8 <lfs_fs_size_+0x30>)
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f7ff f9ff 	bl	8009cb0 <lfs_fs_traverse_>
 800a8b2:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d001      	beq.n	800a8be <lfs_fs_size_+0x26>
        return err;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	e000      	b.n	800a8c0 <lfs_fs_size_+0x28>
    }

    return size;
 800a8be:	68bb      	ldr	r3, [r7, #8]
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3710      	adds	r7, #16
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	0800a873 	.word	0x0800a873

0800a8cc <lfs_mount>:
    LFS_UNLOCK(cfg);
    return err;
}
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d001      	beq.n	800a8e4 <lfs_mount+0x18>
        return err;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	e005      	b.n	800a8f0 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 800a8e4:	6839      	ldr	r1, [r7, #0]
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f7fe ffb6 	bl	8009858 <lfs_mount_>
 800a8ec:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3710      	adds	r7, #16
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <lfs_unmount>:

int lfs_unmount(lfs_t *lfs) {
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 800a900:	2300      	movs	r3, #0
 800a902:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d001      	beq.n	800a90e <lfs_unmount+0x16>
        return err;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	e004      	b.n	800a918 <lfs_unmount+0x20>
    }
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);

    err = lfs_unmount_(lfs);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f7ff f9c2 	bl	8009c98 <lfs_unmount_>
 800a914:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_unmount -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a916:	68fb      	ldr	r3, [r7, #12]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 800a920:	b580      	push	{r7, lr}
 800a922:	b086      	sub	sp, #24
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]
 800a92c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a92e:	2300      	movs	r3, #0
 800a930:	617b      	str	r3, [r7, #20]
    if (err) {
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d001      	beq.n	800a93c <lfs_file_open+0x1c>
        return err;
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	e01a      	b.n	800a972 <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a940:	68b9      	ldr	r1, [r7, #8]
 800a942:	4618      	mov	r0, r3
 800a944:	f7fa f9ac 	bl	8004ca0 <lfs_mlist_isopen>
 800a948:	4603      	mov	r3, r0
 800a94a:	f083 0301 	eor.w	r3, r3, #1
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	2b00      	cmp	r3, #0
 800a952:	d106      	bne.n	800a962 <lfs_file_open+0x42>
 800a954:	4b09      	ldr	r3, [pc, #36]	@ (800a97c <lfs_file_open+0x5c>)
 800a956:	4a0a      	ldr	r2, [pc, #40]	@ (800a980 <lfs_file_open+0x60>)
 800a958:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 800a95c:	4809      	ldr	r0, [pc, #36]	@ (800a984 <lfs_file_open+0x64>)
 800a95e:	f001 fb25 	bl	800bfac <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	68b9      	ldr	r1, [r7, #8]
 800a968:	68f8      	ldr	r0, [r7, #12]
 800a96a:	f7fd feef 	bl	800874c <lfs_file_open_>
 800a96e:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a970:	697b      	ldr	r3, [r7, #20]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3718      	adds	r7, #24
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	0800ebbc 	.word	0x0800ebbc
 800a980:	0800eea0 	.word	0x0800eea0
 800a984:	0800e038 	.word	0x0800e038

0800a988 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a992:	2300      	movs	r3, #0
 800a994:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d001      	beq.n	800a9a0 <lfs_file_close+0x18>
        return err;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	e015      	b.n	800a9cc <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a4:	6839      	ldr	r1, [r7, #0]
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fa f97a 	bl	8004ca0 <lfs_mlist_isopen>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d106      	bne.n	800a9c0 <lfs_file_close+0x38>
 800a9b2:	4b08      	ldr	r3, [pc, #32]	@ (800a9d4 <lfs_file_close+0x4c>)
 800a9b4:	4a08      	ldr	r2, [pc, #32]	@ (800a9d8 <lfs_file_close+0x50>)
 800a9b6:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 800a9ba:	4808      	ldr	r0, [pc, #32]	@ (800a9dc <lfs_file_close+0x54>)
 800a9bc:	f001 faf6 	bl	800bfac <__assert_func>

    err = lfs_file_close_(lfs, file);
 800a9c0:	6839      	ldr	r1, [r7, #0]
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7fd feda 	bl	800877c <lfs_file_close_>
 800a9c8:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	0800ebf4 	.word	0x0800ebf4
 800a9d8:	0800eeb0 	.word	0x0800eeb0
 800a9dc:	0800e038 	.word	0x0800e038

0800a9e0 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b086      	sub	sp, #24
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
 800a9ec:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	617b      	str	r3, [r7, #20]
    if (err) {
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <lfs_file_read+0x1c>
        return err;
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	e017      	b.n	800aa2c <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa00:	68b9      	ldr	r1, [r7, #8]
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7fa f94c 	bl	8004ca0 <lfs_mlist_isopen>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d106      	bne.n	800aa1c <lfs_file_read+0x3c>
 800aa0e:	4b09      	ldr	r3, [pc, #36]	@ (800aa34 <lfs_file_read+0x54>)
 800aa10:	4a09      	ldr	r2, [pc, #36]	@ (800aa38 <lfs_file_read+0x58>)
 800aa12:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 800aa16:	4809      	ldr	r0, [pc, #36]	@ (800aa3c <lfs_file_read+0x5c>)
 800aa18:	f001 fac8 	bl	800bfac <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	68b9      	ldr	r1, [r7, #8]
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f7fe fa0a 	bl	8008e3c <lfs_file_read_>
 800aa28:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800aa2a:	693b      	ldr	r3, [r7, #16]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3718      	adds	r7, #24
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	0800ebf4 	.word	0x0800ebf4
 800aa38:	0800eec0 	.word	0x0800eec0
 800aa3c:	0800e038 	.word	0x0800e038

0800aa40 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
 800aa4c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800aa4e:	2300      	movs	r3, #0
 800aa50:	617b      	str	r3, [r7, #20]
    if (err) {
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d001      	beq.n	800aa5c <lfs_file_write+0x1c>
        return err;
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	e017      	b.n	800aa8c <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa60:	68b9      	ldr	r1, [r7, #8]
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fa f91c 	bl	8004ca0 <lfs_mlist_isopen>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d106      	bne.n	800aa7c <lfs_file_write+0x3c>
 800aa6e:	4b09      	ldr	r3, [pc, #36]	@ (800aa94 <lfs_file_write+0x54>)
 800aa70:	4a09      	ldr	r2, [pc, #36]	@ (800aa98 <lfs_file_write+0x58>)
 800aa72:	f641 0105 	movw	r1, #6149	@ 0x1805
 800aa76:	4809      	ldr	r0, [pc, #36]	@ (800aa9c <lfs_file_write+0x5c>)
 800aa78:	f001 fa98 	bl	800bfac <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	68b9      	ldr	r1, [r7, #8]
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f7fe fb20 	bl	80090c8 <lfs_file_write_>
 800aa88:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800aa8a:	693b      	ldr	r3, [r7, #16]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3718      	adds	r7, #24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	0800ebf4 	.word	0x0800ebf4
 800aa98:	0800eed0 	.word	0x0800eed0
 800aa9c:	0800e038 	.word	0x0800e038

0800aaa0 <lfs_file_rewind>:
    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}

int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800aaaa:	2300      	movs	r3, #0
 800aaac:	60fb      	str	r3, [r7, #12]
    if (err) {
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d001      	beq.n	800aab8 <lfs_file_rewind+0x18>
        return err;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	e005      	b.n	800aac4 <lfs_file_rewind+0x24>
    }
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);

    err = lfs_file_rewind_(lfs, file);
 800aab8:	6839      	ldr	r1, [r7, #0]
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7fe fc11 	bl	80092e2 <lfs_file_rewind_>
 800aac0:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800aac2:	68fb      	ldr	r3, [r7, #12]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 800aacc:	b480      	push	{r7}
 800aace:	b087      	sub	sp, #28
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 800aadc:	2300      	movs	r3, #0
 800aade:	617b      	str	r3, [r7, #20]
 800aae0:	e024      	b.n	800ab2c <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	091a      	lsrs	r2, r3, #4
 800aae6:	6939      	ldr	r1, [r7, #16]
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	440b      	add	r3, r1
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	404b      	eors	r3, r1
 800aaf4:	f003 030f 	and.w	r3, r3, #15
 800aaf8:	4912      	ldr	r1, [pc, #72]	@ (800ab44 <lfs_crc+0x78>)
 800aafa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aafe:	4053      	eors	r3, r2
 800ab00:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	091a      	lsrs	r2, r3, #4
 800ab06:	6939      	ldr	r1, [r7, #16]
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	440b      	add	r3, r1
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	091b      	lsrs	r3, r3, #4
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	4619      	mov	r1, r3
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	404b      	eors	r3, r1
 800ab18:	f003 030f 	and.w	r3, r3, #15
 800ab1c:	4909      	ldr	r1, [pc, #36]	@ (800ab44 <lfs_crc+0x78>)
 800ab1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ab22:	4053      	eors	r3, r2
 800ab24:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	617b      	str	r3, [r7, #20]
 800ab2c:	697a      	ldr	r2, [r7, #20]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d3d6      	bcc.n	800aae2 <lfs_crc+0x16>
    }

    return crc;
 800ab34:	68fb      	ldr	r3, [r7, #12]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	371c      	adds	r7, #28
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	0800eee0 	.word	0x0800eee0

0800ab48 <LL_I2C_IsActiveFlag_TXE>:
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	699b      	ldr	r3, [r3, #24]
 800ab54:	f003 0301 	and.w	r3, r3, #1
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d101      	bne.n	800ab60 <LL_I2C_IsActiveFlag_TXE+0x18>
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e000      	b.n	800ab62 <LL_I2C_IsActiveFlag_TXE+0x1a>
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	370c      	adds	r7, #12
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr

0800ab6e <LL_I2C_IsActiveFlag_RXNE>:
{
 800ab6e:	b480      	push	{r7}
 800ab70:	b083      	sub	sp, #12
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	699b      	ldr	r3, [r3, #24]
 800ab7a:	f003 0304 	and.w	r3, r3, #4
 800ab7e:	2b04      	cmp	r3, #4
 800ab80:	d101      	bne.n	800ab86 <LL_I2C_IsActiveFlag_RXNE+0x18>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e000      	b.n	800ab88 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b087      	sub	sp, #28
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
 800aba0:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800abae:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	041b      	lsls	r3, r3, #16
 800abb4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 800abb8:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800abba:	6a3b      	ldr	r3, [r7, #32]
 800abbc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800abbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc0:	4313      	orrs	r3, r2
 800abc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800abc6:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	685a      	ldr	r2, [r3, #4]
 800abcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abce:	0d5b      	lsrs	r3, r3, #21
 800abd0:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800abd4:	4b06      	ldr	r3, [pc, #24]	@ (800abf0 <LL_I2C_HandleTransfer+0x5c>)
 800abd6:	430b      	orrs	r3, r1
 800abd8:	43db      	mvns	r3, r3
 800abda:	401a      	ands	r2, r3
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	431a      	orrs	r2, r3
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 800abe4:	bf00      	nop
 800abe6:	371c      	adds	r7, #28
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr
 800abf0:	03ff7bff 	.word	0x03ff7bff

0800abf4 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac00:	b2db      	uxtb	r3, r3
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	370c      	adds	r7, #12
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b083      	sub	sp, #12
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
 800ac16:	460b      	mov	r3, r1
 800ac18:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800ac1a:	78fa      	ldrb	r2, [r7, #3]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <i2c_read_blocking>:
#define DELAY 10

// these two I2C functions are not good, the args are mostly unused but writing
// the signature like this made copying RP2040 code faster
static int i2c_read_blocking(I2C_TypeDef *i2cx, uint8_t addr, uint8_t *buf,
                             uint32_t bytes, uint32_t temp) {
 800ac2c:	b590      	push	{r4, r7, lr}
 800ac2e:	b089      	sub	sp, #36	@ 0x24
 800ac30:	af02      	add	r7, sp, #8
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	607a      	str	r2, [r7, #4]
 800ac36:	603b      	str	r3, [r7, #0]
 800ac38:	460b      	mov	r3, r1
 800ac3a:	72fb      	strb	r3, [r7, #11]
  int timeout = 0; // I2C software timeout counter
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	617b      	str	r3, [r7, #20]

  LL_I2C_HandleTransfer(I2C1, (addr << 1), LL_I2C_ADDRSLAVE_7BIT, bytes,
 800ac40:	7afb      	ldrb	r3, [r7, #11]
 800ac42:	0059      	lsls	r1, r3, #1
 800ac44:	4b18      	ldr	r3, [pc, #96]	@ (800aca8 <i2c_read_blocking+0x7c>)
 800ac46:	9301      	str	r3, [sp, #4]
 800ac48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	2200      	movs	r2, #0
 800ac52:	4816      	ldr	r0, [pc, #88]	@ (800acac <i2c_read_blocking+0x80>)
 800ac54:	f7ff ff9e 	bl	800ab94 <LL_I2C_HandleTransfer>
                        LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);

  for (int i = 0; i < bytes; i++) {
 800ac58:	2300      	movs	r3, #0
 800ac5a:	613b      	str	r3, [r7, #16]
 800ac5c:	e01a      	b.n	800ac94 <i2c_read_blocking+0x68>

    while (LL_I2C_IsActiveFlag_RXNE(I2C1) == 0) { // wait for response
      if (timeout >= 2000000) {
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	4a13      	ldr	r2, [pc, #76]	@ (800acb0 <i2c_read_blocking+0x84>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	dd02      	ble.n	800ac6c <i2c_read_blocking+0x40>
        return -1;
 800ac66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ac6a:	e018      	b.n	800ac9e <i2c_read_blocking+0x72>
      }
      timeout++;
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	617b      	str	r3, [r7, #20]
    while (LL_I2C_IsActiveFlag_RXNE(I2C1) == 0) { // wait for response
 800ac72:	480e      	ldr	r0, [pc, #56]	@ (800acac <i2c_read_blocking+0x80>)
 800ac74:	f7ff ff7b 	bl	800ab6e <LL_I2C_IsActiveFlag_RXNE>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d0ef      	beq.n	800ac5e <i2c_read_blocking+0x32>
    }

    buf[i] = LL_I2C_ReceiveData8(I2C1);
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	18d4      	adds	r4, r2, r3
 800ac84:	4809      	ldr	r0, [pc, #36]	@ (800acac <i2c_read_blocking+0x80>)
 800ac86:	f7ff ffb5 	bl	800abf4 <LL_I2C_ReceiveData8>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	7023      	strb	r3, [r4, #0]
  for (int i = 0; i < bytes; i++) {
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	3301      	adds	r3, #1
 800ac92:	613b      	str	r3, [r7, #16]
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d8ea      	bhi.n	800ac72 <i2c_read_blocking+0x46>
  }
  return 0;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	371c      	adds	r7, #28
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd90      	pop	{r4, r7, pc}
 800aca6:	bf00      	nop
 800aca8:	80002400 	.word	0x80002400
 800acac:	40005400 	.word	0x40005400
 800acb0:	001e847f 	.word	0x001e847f

0800acb4 <i2c_write_blocking>:

static int i2c_write_blocking(I2C_TypeDef *i2cx, uint8_t addr, uint8_t *buf,
                              uint32_t bytes, uint32_t temp) {
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b088      	sub	sp, #32
 800acb8:	af02      	add	r7, sp, #8
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	607a      	str	r2, [r7, #4]
 800acbe:	603b      	str	r3, [r7, #0]
 800acc0:	460b      	mov	r3, r1
 800acc2:	72fb      	strb	r3, [r7, #11]
  int timeout = 0; // I2C software timeout counter
 800acc4:	2300      	movs	r3, #0
 800acc6:	617b      	str	r3, [r7, #20]

  LL_I2C_HandleTransfer(I2C1, (addr << 1), LL_I2C_ADDRSLAVE_7BIT, bytes,
 800acc8:	7afb      	ldrb	r3, [r7, #11]
 800acca:	0059      	lsls	r1, r3, #1
 800accc:	4b18      	ldr	r3, [pc, #96]	@ (800ad30 <i2c_write_blocking+0x7c>)
 800acce:	9301      	str	r3, [sp, #4]
 800acd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800acd4:	9300      	str	r3, [sp, #0]
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	2200      	movs	r2, #0
 800acda:	4816      	ldr	r0, [pc, #88]	@ (800ad34 <i2c_write_blocking+0x80>)
 800acdc:	f7ff ff5a 	bl	800ab94 <LL_I2C_HandleTransfer>
                        LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);

  for (int i = 0; i < bytes; i++) {
 800ace0:	2300      	movs	r3, #0
 800ace2:	613b      	str	r3, [r7, #16]
 800ace4:	e01a      	b.n	800ad1c <i2c_write_blocking+0x68>

    while (LL_I2C_IsActiveFlag_TXE(I2C1) == 0) {
      if (timeout >= 2000000) {
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	4a13      	ldr	r2, [pc, #76]	@ (800ad38 <i2c_write_blocking+0x84>)
 800acea:	4293      	cmp	r3, r2
 800acec:	dd02      	ble.n	800acf4 <i2c_write_blocking+0x40>
        return -1;
 800acee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800acf2:	e018      	b.n	800ad26 <i2c_write_blocking+0x72>
      }
      timeout++;
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	3301      	adds	r3, #1
 800acf8:	617b      	str	r3, [r7, #20]
    while (LL_I2C_IsActiveFlag_TXE(I2C1) == 0) {
 800acfa:	480e      	ldr	r0, [pc, #56]	@ (800ad34 <i2c_write_blocking+0x80>)
 800acfc:	f7ff ff24 	bl	800ab48 <LL_I2C_IsActiveFlag_TXE>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d0ef      	beq.n	800ace6 <i2c_write_blocking+0x32>
    }

    LL_I2C_TransmitData8(I2C1, buf[i]);
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	4619      	mov	r1, r3
 800ad10:	4808      	ldr	r0, [pc, #32]	@ (800ad34 <i2c_write_blocking+0x80>)
 800ad12:	f7ff ff7c 	bl	800ac0e <LL_I2C_TransmitData8>
  for (int i = 0; i < bytes; i++) {
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	613b      	str	r3, [r7, #16]
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	683a      	ldr	r2, [r7, #0]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d8ea      	bhi.n	800acfa <i2c_write_blocking+0x46>
  }
  return 0;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3718      	adds	r7, #24
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	80002000 	.word	0x80002000
 800ad34:	40005400 	.word	0x40005400
 800ad38:	001e847f 	.word	0x001e847f

0800ad3c <ms5607_init>:

int ms5607_init(I2C_TypeDef *i2cx) {
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  if (read_prom() == -1)
 800ad44:	f000 fa6e 	bl	800b224 <read_prom>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad4e:	d102      	bne.n	800ad56 <ms5607_init+0x1a>
    return -1;
 800ad50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ad54:	e000      	b.n	800ad58 <ms5607_init+0x1c>
  else
    return 0;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <ms5607_get_press_temp>:
  else
    read_prom();
  return 0;
}

int ms5607_get_press_temp(uint32_t *pressure, int32_t *temperature) {
 800ad60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad64:	b0c0      	sub	sp, #256	@ 0x100
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
 800ad6c:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8

  int32_t press = 0;
 800ad70:	2300      	movs	r3, #0
 800ad72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  int32_t temp = 0;
 800ad76:	2300      	movs	r3, #0
 800ad78:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  int32_t t2 = 0;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  int64_t off2 = 0;
 800ad82:	f04f 0200 	mov.w	r2, #0
 800ad86:	f04f 0300 	mov.w	r3, #0
 800ad8a:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
  int64_t sens2 = 0;
 800ad8e:	f04f 0200 	mov.w	r2, #0
 800ad92:	f04f 0300 	mov.w	r3, #0
 800ad96:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8

  // Step 1: Read calibration data from PROM
  // Already did this in the init()

  // Step 2: Read pressure and temperature from the MS5607
  if (conversion() == -1)
 800ad9a:	f000 fb7b 	bl	800b494 <conversion>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ada4:	d102      	bne.n	800adac <ms5607_get_press_temp+0x4c>
    return -1;
 800ada6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800adaa:	e22d      	b.n	800b208 <ms5607_get_press_temp+0x4a8>

  // The rest of this function mostly looks like random math, it is actually
  // the compensation calculations outline in the datasheet for the device!

  // Step 3: Calculate temperature
  dT = d2 - ((int64_t)c5 << 8);
 800adac:	4bda      	ldr	r3, [pc, #872]	@ (800b118 <ms5607_get_press_temp+0x3b8>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2200      	movs	r2, #0
 800adb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800adb6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800adba:	4bd8      	ldr	r3, [pc, #864]	@ (800b11c <ms5607_get_press_temp+0x3bc>)
 800adbc:	881b      	ldrh	r3, [r3, #0]
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	2200      	movs	r2, #0
 800adc2:	4698      	mov	r8, r3
 800adc4:	4691      	mov	r9, r2
 800adc6:	f04f 0200 	mov.w	r2, #0
 800adca:	f04f 0300 	mov.w	r3, #0
 800adce:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800add2:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 800add6:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800adda:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	@ 0xb0
 800adde:	4641      	mov	r1, r8
 800ade0:	1a89      	subs	r1, r1, r2
 800ade2:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800ade6:	4649      	mov	r1, r9
 800ade8:	eb61 0303 	sbc.w	r3, r1, r3
 800adec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800adf0:	4bcb      	ldr	r3, [pc, #812]	@ (800b120 <ms5607_get_press_temp+0x3c0>)
 800adf2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800adf6:	e9c3 1200 	strd	r1, r2, [r3]

  // temp is e.g. 2000 = 20.00 deg C
  temp = (int64_t)2000 + ((dT * (int64_t)c6) >> 23);
 800adfa:	4bca      	ldr	r3, [pc, #808]	@ (800b124 <ms5607_get_press_temp+0x3c4>)
 800adfc:	881b      	ldrh	r3, [r3, #0]
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	2200      	movs	r2, #0
 800ae02:	469a      	mov	sl, r3
 800ae04:	4693      	mov	fp, r2
 800ae06:	4bc6      	ldr	r3, [pc, #792]	@ (800b120 <ms5607_get_press_temp+0x3c0>)
 800ae08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0c:	fb02 f00b 	mul.w	r0, r2, fp
 800ae10:	fb0a f103 	mul.w	r1, sl, r3
 800ae14:	4401      	add	r1, r0
 800ae16:	fbaa 4502 	umull	r4, r5, sl, r2
 800ae1a:	194b      	adds	r3, r1, r5
 800ae1c:	461d      	mov	r5, r3
 800ae1e:	f04f 0200 	mov.w	r2, #0
 800ae22:	f04f 0300 	mov.w	r3, #0
 800ae26:	0de2      	lsrs	r2, r4, #23
 800ae28:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 800ae2c:	15eb      	asrs	r3, r5, #23
 800ae2e:	4613      	mov	r3, r2
 800ae30:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800ae34:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

  // Step 4: Calculate temperature compensated pressure
  off = ((int64_t)c2 * (int64_t)131072) + (((int64_t)c4 * dT) / (int64_t)64);
 800ae38:	4bbb      	ldr	r3, [pc, #748]	@ (800b128 <ms5607_get_press_temp+0x3c8>)
 800ae3a:	881b      	ldrh	r3, [r3, #0]
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ae44:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ae48:	f04f 0400 	mov.w	r4, #0
 800ae4c:	f04f 0500 	mov.w	r5, #0
 800ae50:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ae54:	4613      	mov	r3, r2
 800ae56:	045d      	lsls	r5, r3, #17
 800ae58:	460b      	mov	r3, r1
 800ae5a:	ea45 35d3 	orr.w	r5, r5, r3, lsr #15
 800ae5e:	460b      	mov	r3, r1
 800ae60:	045c      	lsls	r4, r3, #17
 800ae62:	4bb2      	ldr	r3, [pc, #712]	@ (800b12c <ms5607_get_press_temp+0x3cc>)
 800ae64:	881b      	ldrh	r3, [r3, #0]
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ae6e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800ae72:	4bab      	ldr	r3, [pc, #684]	@ (800b120 <ms5607_get_press_temp+0x3c0>)
 800ae74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae78:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800ae7c:	4649      	mov	r1, r9
 800ae7e:	fb02 f001 	mul.w	r0, r2, r1
 800ae82:	4641      	mov	r1, r8
 800ae84:	fb01 f103 	mul.w	r1, r1, r3
 800ae88:	4401      	add	r1, r0
 800ae8a:	4640      	mov	r0, r8
 800ae8c:	fba0 2302 	umull	r2, r3, r0, r2
 800ae90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ae94:	4613      	mov	r3, r2
 800ae96:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ae9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ae9e:	18cb      	adds	r3, r1, r3
 800aea0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800aea4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	da07      	bge.n	800aebc <ms5607_get_press_temp+0x15c>
 800aeac:	f112 013f 	adds.w	r1, r2, #63	@ 0x3f
 800aeb0:	6439      	str	r1, [r7, #64]	@ 0x40
 800aeb2:	f143 0300 	adc.w	r3, r3, #0
 800aeb6:	647b      	str	r3, [r7, #68]	@ 0x44
 800aeb8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800aebc:	f04f 0000 	mov.w	r0, #0
 800aec0:	f04f 0100 	mov.w	r1, #0
 800aec4:	0990      	lsrs	r0, r2, #6
 800aec6:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 800aeca:	1199      	asrs	r1, r3, #6
 800aecc:	4602      	mov	r2, r0
 800aece:	460b      	mov	r3, r1
 800aed0:	18a1      	adds	r1, r4, r2
 800aed2:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800aed6:	eb45 0303 	adc.w	r3, r5, r3
 800aeda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aede:	4b94      	ldr	r3, [pc, #592]	@ (800b130 <ms5607_get_press_temp+0x3d0>)
 800aee0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800aee4:	e9c3 1200 	strd	r1, r2, [r3]
  sens = ((int64_t)c1 * (int64_t)65536) + (((int64_t)c3 * dT) / (int64_t)128);
 800aee8:	4b92      	ldr	r3, [pc, #584]	@ (800b134 <ms5607_get_press_temp+0x3d4>)
 800aeea:	881b      	ldrh	r3, [r3, #0]
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	2200      	movs	r2, #0
 800aef0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aef4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800aef8:	f04f 0400 	mov.w	r4, #0
 800aefc:	f04f 0500 	mov.w	r5, #0
 800af00:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800af04:	4613      	mov	r3, r2
 800af06:	041d      	lsls	r5, r3, #16
 800af08:	460b      	mov	r3, r1
 800af0a:	ea45 4513 	orr.w	r5, r5, r3, lsr #16
 800af0e:	460b      	mov	r3, r1
 800af10:	041c      	lsls	r4, r3, #16
 800af12:	4b89      	ldr	r3, [pc, #548]	@ (800b138 <ms5607_get_press_temp+0x3d8>)
 800af14:	881b      	ldrh	r3, [r3, #0]
 800af16:	b29b      	uxth	r3, r3
 800af18:	2200      	movs	r2, #0
 800af1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800af1e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800af22:	4b7f      	ldr	r3, [pc, #508]	@ (800b120 <ms5607_get_press_temp+0x3c0>)
 800af24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af28:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800af2c:	4649      	mov	r1, r9
 800af2e:	fb02 f001 	mul.w	r0, r2, r1
 800af32:	4641      	mov	r1, r8
 800af34:	fb01 f103 	mul.w	r1, r1, r3
 800af38:	4401      	add	r1, r0
 800af3a:	4640      	mov	r0, r8
 800af3c:	fba0 2302 	umull	r2, r3, r0, r2
 800af40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800af44:	4613      	mov	r3, r2
 800af46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800af4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800af4e:	18cb      	adds	r3, r1, r3
 800af50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800af54:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800af58:	2b00      	cmp	r3, #0
 800af5a:	da07      	bge.n	800af6c <ms5607_get_press_temp+0x20c>
 800af5c:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 800af60:	63b9      	str	r1, [r7, #56]	@ 0x38
 800af62:	f143 0300 	adc.w	r3, r3, #0
 800af66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800af6c:	f04f 0000 	mov.w	r0, #0
 800af70:	f04f 0100 	mov.w	r1, #0
 800af74:	09d0      	lsrs	r0, r2, #7
 800af76:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800af7a:	11d9      	asrs	r1, r3, #7
 800af7c:	4602      	mov	r2, r0
 800af7e:	460b      	mov	r3, r1
 800af80:	18a1      	adds	r1, r4, r2
 800af82:	67b9      	str	r1, [r7, #120]	@ 0x78
 800af84:	eb45 0303 	adc.w	r3, r5, r3
 800af88:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800af8a:	4b6c      	ldr	r3, [pc, #432]	@ (800b13c <ms5607_get_press_temp+0x3dc>)
 800af8c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800af90:	e9c3 1200 	strd	r1, r2, [r3]

  // Second order compensation
  if (temp < (int)2000) {
 800af94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af98:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800af9c:	f280 80d5 	bge.w	800b14a <ms5607_get_press_temp+0x3ea>

    t2 = ((dT * dT) / ((int64_t)2147483648));
 800afa0:	4b5f      	ldr	r3, [pc, #380]	@ (800b120 <ms5607_get_press_temp+0x3c0>)
 800afa2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800afa6:	4b5e      	ldr	r3, [pc, #376]	@ (800b120 <ms5607_get_press_temp+0x3c0>)
 800afa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afac:	fb02 f501 	mul.w	r5, r2, r1
 800afb0:	fb00 f403 	mul.w	r4, r0, r3
 800afb4:	442c      	add	r4, r5
 800afb6:	fba0 2302 	umull	r2, r3, r0, r2
 800afba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800afbe:	4613      	mov	r3, r2
 800afc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800afc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800afc8:	18e3      	adds	r3, r4, r3
 800afca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800afce:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	da08      	bge.n	800afe8 <ms5607_get_press_temp+0x288>
 800afd6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800afda:	1851      	adds	r1, r2, r1
 800afdc:	6339      	str	r1, [r7, #48]	@ 0x30
 800afde:	f143 0300 	adc.w	r3, r3, #0
 800afe2:	637b      	str	r3, [r7, #52]	@ 0x34
 800afe4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800afe8:	f04f 0000 	mov.w	r0, #0
 800afec:	f04f 0100 	mov.w	r1, #0
 800aff0:	0fd0      	lsrs	r0, r2, #31
 800aff2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800aff6:	17d9      	asrs	r1, r3, #31
 800aff8:	4602      	mov	r2, r0
 800affa:	460b      	mov	r3, r1
 800affc:	4613      	mov	r3, r2
 800affe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    off2 = (61 * ((temp - 2000) * (temp - 2000)) / 16);
 800b002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b006:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 800b00a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b00e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800b012:	fb03 f202 	mul.w	r2, r3, r2
 800b016:	4613      	mov	r3, r2
 800b018:	011b      	lsls	r3, r3, #4
 800b01a:	1a9b      	subs	r3, r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4413      	add	r3, r2
 800b020:	2b00      	cmp	r3, #0
 800b022:	da00      	bge.n	800b026 <ms5607_get_press_temp+0x2c6>
 800b024:	330f      	adds	r3, #15
 800b026:	111b      	asrs	r3, r3, #4
 800b028:	17da      	asrs	r2, r3, #31
 800b02a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b02c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b02e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800b032:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0
    sens2 = (2 * ((temp - 2000) ^ 2));
 800b036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b03a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800b03e:	f083 0302 	eor.w	r3, r3, #2
 800b042:	005b      	lsls	r3, r3, #1
 800b044:	17da      	asrs	r2, r3, #31
 800b046:	623b      	str	r3, [r7, #32]
 800b048:	627a      	str	r2, [r7, #36]	@ 0x24
 800b04a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800b04e:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8

    if (temp < -15) {
 800b052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b056:	f113 0f0f 	cmn.w	r3, #15
 800b05a:	da3b      	bge.n	800b0d4 <ms5607_get_press_temp+0x374>

      off2 = (off2 + (15 * ((temp + 1500) * (temp + 1500))));
 800b05c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b060:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 800b064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b068:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800b06c:	fb03 f202 	mul.w	r2, r3, r2
 800b070:	4613      	mov	r3, r2
 800b072:	011b      	lsls	r3, r3, #4
 800b074:	1a9b      	subs	r3, r3, r2
 800b076:	17da      	asrs	r2, r3, #31
 800b078:	673b      	str	r3, [r7, #112]	@ 0x70
 800b07a:	677a      	str	r2, [r7, #116]	@ 0x74
 800b07c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 800b080:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800b084:	4621      	mov	r1, r4
 800b086:	1851      	adds	r1, r2, r1
 800b088:	61b9      	str	r1, [r7, #24]
 800b08a:	4629      	mov	r1, r5
 800b08c:	eb43 0101 	adc.w	r1, r3, r1
 800b090:	61f9      	str	r1, [r7, #28]
 800b092:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b096:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0
      sens2 = (sens2 + (8 * ((temp + 1500) * (temp + 1500))));
 800b09a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b09e:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 800b0a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b0a6:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800b0aa:	fb02 f303 	mul.w	r3, r2, r3
 800b0ae:	00db      	lsls	r3, r3, #3
 800b0b0:	17da      	asrs	r2, r3, #31
 800b0b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b0b4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b0b6:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 800b0ba:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800b0be:	4621      	mov	r1, r4
 800b0c0:	1851      	adds	r1, r2, r1
 800b0c2:	6139      	str	r1, [r7, #16]
 800b0c4:	4629      	mov	r1, r5
 800b0c6:	eb43 0101 	adc.w	r1, r3, r1
 800b0ca:	6179      	str	r1, [r7, #20]
 800b0cc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b0d0:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8
    }

    temp = temp - t2;
 800b0d4:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800b0d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0dc:	1ad3      	subs	r3, r2, r3
 800b0de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    off = off - off2;
 800b0e2:	4b13      	ldr	r3, [pc, #76]	@ (800b130 <ms5607_get_press_temp+0x3d0>)
 800b0e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b0e8:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 800b0ec:	1a84      	subs	r4, r0, r2
 800b0ee:	663c      	str	r4, [r7, #96]	@ 0x60
 800b0f0:	eb61 0303 	sbc.w	r3, r1, r3
 800b0f4:	667b      	str	r3, [r7, #100]	@ 0x64
 800b0f6:	4b0e      	ldr	r3, [pc, #56]	@ (800b130 <ms5607_get_press_temp+0x3d0>)
 800b0f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b0fc:	e9c3 1200 	strd	r1, r2, [r3]
    sens = sens - sens2;
 800b100:	4b0e      	ldr	r3, [pc, #56]	@ (800b13c <ms5607_get_press_temp+0x3dc>)
 800b102:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b106:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 800b10a:	1a84      	subs	r4, r0, r2
 800b10c:	65bc      	str	r4, [r7, #88]	@ 0x58
 800b10e:	eb61 0303 	sbc.w	r3, r1, r3
 800b112:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b114:	e014      	b.n	800b140 <ms5607_get_press_temp+0x3e0>
 800b116:	bf00      	nop
 800b118:	20000334 	.word	0x20000334
 800b11c:	2000032c 	.word	0x2000032c
 800b120:	20000338 	.word	0x20000338
 800b124:	2000032e 	.word	0x2000032e
 800b128:	20000326 	.word	0x20000326
 800b12c:	2000032a 	.word	0x2000032a
 800b130:	20000340 	.word	0x20000340
 800b134:	20000324 	.word	0x20000324
 800b138:	20000328 	.word	0x20000328
 800b13c:	20000348 	.word	0x20000348
 800b140:	4b34      	ldr	r3, [pc, #208]	@ (800b214 <ms5607_get_press_temp+0x4b4>)
 800b142:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b146:	e9c3 1200 	strd	r1, r2, [r3]
  }

  press = (((d1 * sens) / (2097152)) - off) / (32768);
 800b14a:	4b33      	ldr	r3, [pc, #204]	@ (800b218 <ms5607_get_press_temp+0x4b8>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2200      	movs	r2, #0
 800b150:	653b      	str	r3, [r7, #80]	@ 0x50
 800b152:	657a      	str	r2, [r7, #84]	@ 0x54
 800b154:	4b2f      	ldr	r3, [pc, #188]	@ (800b214 <ms5607_get_press_temp+0x4b4>)
 800b156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800b15e:	4629      	mov	r1, r5
 800b160:	fb02 f001 	mul.w	r0, r2, r1
 800b164:	4621      	mov	r1, r4
 800b166:	fb01 f103 	mul.w	r1, r1, r3
 800b16a:	4401      	add	r1, r0
 800b16c:	4620      	mov	r0, r4
 800b16e:	fba0 2302 	umull	r2, r3, r0, r2
 800b172:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b176:	4613      	mov	r3, r2
 800b178:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b17c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b180:	18cb      	adds	r3, r1, r3
 800b182:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b186:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	da07      	bge.n	800b19e <ms5607_get_press_temp+0x43e>
 800b18e:	4923      	ldr	r1, [pc, #140]	@ (800b21c <ms5607_get_press_temp+0x4bc>)
 800b190:	1851      	adds	r1, r2, r1
 800b192:	60b9      	str	r1, [r7, #8]
 800b194:	f143 0300 	adc.w	r3, r3, #0
 800b198:	60fb      	str	r3, [r7, #12]
 800b19a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b19e:	f04f 0000 	mov.w	r0, #0
 800b1a2:	f04f 0100 	mov.w	r1, #0
 800b1a6:	0d50      	lsrs	r0, r2, #21
 800b1a8:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800b1ac:	1559      	asrs	r1, r3, #21
 800b1ae:	4b1c      	ldr	r3, [pc, #112]	@ (800b220 <ms5607_get_press_temp+0x4c0>)
 800b1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b4:	1a84      	subs	r4, r0, r2
 800b1b6:	64bc      	str	r4, [r7, #72]	@ 0x48
 800b1b8:	eb61 0303 	sbc.w	r3, r1, r3
 800b1bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	da08      	bge.n	800b1d8 <ms5607_get_press_temp+0x478>
 800b1c6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800b1ca:	1851      	adds	r1, r2, r1
 800b1cc:	6039      	str	r1, [r7, #0]
 800b1ce:	f143 0300 	adc.w	r3, r3, #0
 800b1d2:	607b      	str	r3, [r7, #4]
 800b1d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1d8:	f04f 0000 	mov.w	r0, #0
 800b1dc:	f04f 0100 	mov.w	r1, #0
 800b1e0:	0bd0      	lsrs	r0, r2, #15
 800b1e2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 800b1e6:	13d9      	asrs	r1, r3, #15
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

  // in "centi-celsius" e.g. 2000 = 20.00 deg C
  *temperature = temp;
 800b1f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b1f6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800b1fa:	601a      	str	r2, [r3, #0]

  // in "centi-millibar" e.g. 110002 = 1100.02 mbar
  *pressure = press;
 800b1fc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b204:	601a      	str	r2, [r3, #0]

  return 0;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b20e:	46bd      	mov	sp, r7
 800b210:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b214:	20000348 	.word	0x20000348
 800b218:	20000330 	.word	0x20000330
 800b21c:	001fffff 	.word	0x001fffff
 800b220:	20000340 	.word	0x20000340

0800b224 <read_prom>:

static int read_prom() {
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af02      	add	r7, sp, #8
  uint8_t buf[2] = {0, 0};
 800b22a:	2300      	movs	r3, #0
 800b22c:	80bb      	strh	r3, [r7, #4]

  uint8_t cmd = MS5607_READ_C1_CMD;
 800b22e:	23a2      	movs	r3, #162	@ 0xa2
 800b230:	70fb      	strb	r3, [r7, #3]
  if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, 0) == -1)
 800b232:	4b91      	ldr	r3, [pc, #580]	@ (800b478 <read_prom+0x254>)
 800b234:	6818      	ldr	r0, [r3, #0]
 800b236:	1cfa      	adds	r2, r7, #3
 800b238:	2300      	movs	r3, #0
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	2301      	movs	r3, #1
 800b23e:	2177      	movs	r1, #119	@ 0x77
 800b240:	f7ff fd38 	bl	800acb4 <i2c_write_blocking>
 800b244:	4603      	mov	r3, r0
 800b246:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b24a:	d102      	bne.n	800b252 <read_prom+0x2e>
    return -1;
 800b24c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b250:	e10e      	b.n	800b470 <read_prom+0x24c>
  LL_mDelay(DELAY);
 800b252:	200a      	movs	r0, #10
 800b254:	f7f8 fb34 	bl	80038c0 <LL_mDelay>
  if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 2, 0) == -1)
 800b258:	4b87      	ldr	r3, [pc, #540]	@ (800b478 <read_prom+0x254>)
 800b25a:	6818      	ldr	r0, [r3, #0]
 800b25c:	1d3a      	adds	r2, r7, #4
 800b25e:	2300      	movs	r3, #0
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	2302      	movs	r3, #2
 800b264:	2177      	movs	r1, #119	@ 0x77
 800b266:	f7ff fce1 	bl	800ac2c <i2c_read_blocking>
 800b26a:	4603      	mov	r3, r0
 800b26c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b270:	d102      	bne.n	800b278 <read_prom+0x54>
    return -1;
 800b272:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b276:	e0fb      	b.n	800b470 <read_prom+0x24c>
  c1 = ((uint16_t)buf[0] << 8) | buf[1];
 800b278:	793b      	ldrb	r3, [r7, #4]
 800b27a:	b21b      	sxth	r3, r3
 800b27c:	021b      	lsls	r3, r3, #8
 800b27e:	b21a      	sxth	r2, r3
 800b280:	797b      	ldrb	r3, [r7, #5]
 800b282:	b21b      	sxth	r3, r3
 800b284:	4313      	orrs	r3, r2
 800b286:	b21b      	sxth	r3, r3
 800b288:	b29a      	uxth	r2, r3
 800b28a:	4b7c      	ldr	r3, [pc, #496]	@ (800b47c <read_prom+0x258>)
 800b28c:	801a      	strh	r2, [r3, #0]

  cmd = MS5607_READ_C2_CMD;
 800b28e:	23a4      	movs	r3, #164	@ 0xa4
 800b290:	70fb      	strb	r3, [r7, #3]
  if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, 0) == -1)
 800b292:	4b79      	ldr	r3, [pc, #484]	@ (800b478 <read_prom+0x254>)
 800b294:	6818      	ldr	r0, [r3, #0]
 800b296:	1cfa      	adds	r2, r7, #3
 800b298:	2300      	movs	r3, #0
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	2301      	movs	r3, #1
 800b29e:	2177      	movs	r1, #119	@ 0x77
 800b2a0:	f7ff fd08 	bl	800acb4 <i2c_write_blocking>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b2aa:	d102      	bne.n	800b2b2 <read_prom+0x8e>
    return -1;
 800b2ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b2b0:	e0de      	b.n	800b470 <read_prom+0x24c>
  LL_mDelay(DELAY);
 800b2b2:	200a      	movs	r0, #10
 800b2b4:	f7f8 fb04 	bl	80038c0 <LL_mDelay>
  if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 2, 0) == -1)
 800b2b8:	4b6f      	ldr	r3, [pc, #444]	@ (800b478 <read_prom+0x254>)
 800b2ba:	6818      	ldr	r0, [r3, #0]
 800b2bc:	1d3a      	adds	r2, r7, #4
 800b2be:	2300      	movs	r3, #0
 800b2c0:	9300      	str	r3, [sp, #0]
 800b2c2:	2302      	movs	r3, #2
 800b2c4:	2177      	movs	r1, #119	@ 0x77
 800b2c6:	f7ff fcb1 	bl	800ac2c <i2c_read_blocking>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b2d0:	d102      	bne.n	800b2d8 <read_prom+0xb4>
    return -1;
 800b2d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b2d6:	e0cb      	b.n	800b470 <read_prom+0x24c>
  c2 = ((uint16_t)buf[0] << 8) | buf[1];
 800b2d8:	793b      	ldrb	r3, [r7, #4]
 800b2da:	b21b      	sxth	r3, r3
 800b2dc:	021b      	lsls	r3, r3, #8
 800b2de:	b21a      	sxth	r2, r3
 800b2e0:	797b      	ldrb	r3, [r7, #5]
 800b2e2:	b21b      	sxth	r3, r3
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	b21b      	sxth	r3, r3
 800b2e8:	b29a      	uxth	r2, r3
 800b2ea:	4b65      	ldr	r3, [pc, #404]	@ (800b480 <read_prom+0x25c>)
 800b2ec:	801a      	strh	r2, [r3, #0]

  cmd = MS5607_READ_C3_CMD;
 800b2ee:	23a6      	movs	r3, #166	@ 0xa6
 800b2f0:	70fb      	strb	r3, [r7, #3]
  if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, 0) == -1)
 800b2f2:	4b61      	ldr	r3, [pc, #388]	@ (800b478 <read_prom+0x254>)
 800b2f4:	6818      	ldr	r0, [r3, #0]
 800b2f6:	1cfa      	adds	r2, r7, #3
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	9300      	str	r3, [sp, #0]
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	2177      	movs	r1, #119	@ 0x77
 800b300:	f7ff fcd8 	bl	800acb4 <i2c_write_blocking>
 800b304:	4603      	mov	r3, r0
 800b306:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b30a:	d102      	bne.n	800b312 <read_prom+0xee>
    return -1;
 800b30c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b310:	e0ae      	b.n	800b470 <read_prom+0x24c>
  LL_mDelay(DELAY);
 800b312:	200a      	movs	r0, #10
 800b314:	f7f8 fad4 	bl	80038c0 <LL_mDelay>
  if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 2, 0) == -1)
 800b318:	4b57      	ldr	r3, [pc, #348]	@ (800b478 <read_prom+0x254>)
 800b31a:	6818      	ldr	r0, [r3, #0]
 800b31c:	1d3a      	adds	r2, r7, #4
 800b31e:	2300      	movs	r3, #0
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	2302      	movs	r3, #2
 800b324:	2177      	movs	r1, #119	@ 0x77
 800b326:	f7ff fc81 	bl	800ac2c <i2c_read_blocking>
 800b32a:	4603      	mov	r3, r0
 800b32c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b330:	d102      	bne.n	800b338 <read_prom+0x114>
    return -1;
 800b332:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b336:	e09b      	b.n	800b470 <read_prom+0x24c>
  c3 = ((uint16_t)buf[0] << 8) | buf[1];
 800b338:	793b      	ldrb	r3, [r7, #4]
 800b33a:	b21b      	sxth	r3, r3
 800b33c:	021b      	lsls	r3, r3, #8
 800b33e:	b21a      	sxth	r2, r3
 800b340:	797b      	ldrb	r3, [r7, #5]
 800b342:	b21b      	sxth	r3, r3
 800b344:	4313      	orrs	r3, r2
 800b346:	b21b      	sxth	r3, r3
 800b348:	b29a      	uxth	r2, r3
 800b34a:	4b4e      	ldr	r3, [pc, #312]	@ (800b484 <read_prom+0x260>)
 800b34c:	801a      	strh	r2, [r3, #0]

  cmd = MS5607_READ_C4_CMD;
 800b34e:	23a8      	movs	r3, #168	@ 0xa8
 800b350:	70fb      	strb	r3, [r7, #3]
  if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, 0) == -1)
 800b352:	4b49      	ldr	r3, [pc, #292]	@ (800b478 <read_prom+0x254>)
 800b354:	6818      	ldr	r0, [r3, #0]
 800b356:	1cfa      	adds	r2, r7, #3
 800b358:	2300      	movs	r3, #0
 800b35a:	9300      	str	r3, [sp, #0]
 800b35c:	2301      	movs	r3, #1
 800b35e:	2177      	movs	r1, #119	@ 0x77
 800b360:	f7ff fca8 	bl	800acb4 <i2c_write_blocking>
 800b364:	4603      	mov	r3, r0
 800b366:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b36a:	d102      	bne.n	800b372 <read_prom+0x14e>
    return -1;
 800b36c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b370:	e07e      	b.n	800b470 <read_prom+0x24c>
  LL_mDelay(DELAY);
 800b372:	200a      	movs	r0, #10
 800b374:	f7f8 faa4 	bl	80038c0 <LL_mDelay>
  if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 2, 0) == -1)
 800b378:	4b3f      	ldr	r3, [pc, #252]	@ (800b478 <read_prom+0x254>)
 800b37a:	6818      	ldr	r0, [r3, #0]
 800b37c:	1d3a      	adds	r2, r7, #4
 800b37e:	2300      	movs	r3, #0
 800b380:	9300      	str	r3, [sp, #0]
 800b382:	2302      	movs	r3, #2
 800b384:	2177      	movs	r1, #119	@ 0x77
 800b386:	f7ff fc51 	bl	800ac2c <i2c_read_blocking>
 800b38a:	4603      	mov	r3, r0
 800b38c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b390:	d102      	bne.n	800b398 <read_prom+0x174>
    return -1;
 800b392:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b396:	e06b      	b.n	800b470 <read_prom+0x24c>
  c4 = ((uint16_t)buf[0] << 8) | buf[1];
 800b398:	793b      	ldrb	r3, [r7, #4]
 800b39a:	b21b      	sxth	r3, r3
 800b39c:	021b      	lsls	r3, r3, #8
 800b39e:	b21a      	sxth	r2, r3
 800b3a0:	797b      	ldrb	r3, [r7, #5]
 800b3a2:	b21b      	sxth	r3, r3
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	b21b      	sxth	r3, r3
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	4b37      	ldr	r3, [pc, #220]	@ (800b488 <read_prom+0x264>)
 800b3ac:	801a      	strh	r2, [r3, #0]

  cmd = MS5607_READ_C5_CMD;
 800b3ae:	23aa      	movs	r3, #170	@ 0xaa
 800b3b0:	70fb      	strb	r3, [r7, #3]
  if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, 0) == -1)
 800b3b2:	4b31      	ldr	r3, [pc, #196]	@ (800b478 <read_prom+0x254>)
 800b3b4:	6818      	ldr	r0, [r3, #0]
 800b3b6:	1cfa      	adds	r2, r7, #3
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	9300      	str	r3, [sp, #0]
 800b3bc:	2301      	movs	r3, #1
 800b3be:	2177      	movs	r1, #119	@ 0x77
 800b3c0:	f7ff fc78 	bl	800acb4 <i2c_write_blocking>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3ca:	d102      	bne.n	800b3d2 <read_prom+0x1ae>
    return -1;
 800b3cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b3d0:	e04e      	b.n	800b470 <read_prom+0x24c>
  LL_mDelay(DELAY);
 800b3d2:	200a      	movs	r0, #10
 800b3d4:	f7f8 fa74 	bl	80038c0 <LL_mDelay>
  if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 2, 0) == -1)
 800b3d8:	4b27      	ldr	r3, [pc, #156]	@ (800b478 <read_prom+0x254>)
 800b3da:	6818      	ldr	r0, [r3, #0]
 800b3dc:	1d3a      	adds	r2, r7, #4
 800b3de:	2300      	movs	r3, #0
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	2302      	movs	r3, #2
 800b3e4:	2177      	movs	r1, #119	@ 0x77
 800b3e6:	f7ff fc21 	bl	800ac2c <i2c_read_blocking>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3f0:	d102      	bne.n	800b3f8 <read_prom+0x1d4>
    return -1;
 800b3f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b3f6:	e03b      	b.n	800b470 <read_prom+0x24c>
  c5 = ((uint16_t)buf[0] << 8) | buf[1];
 800b3f8:	793b      	ldrb	r3, [r7, #4]
 800b3fa:	b21b      	sxth	r3, r3
 800b3fc:	021b      	lsls	r3, r3, #8
 800b3fe:	b21a      	sxth	r2, r3
 800b400:	797b      	ldrb	r3, [r7, #5]
 800b402:	b21b      	sxth	r3, r3
 800b404:	4313      	orrs	r3, r2
 800b406:	b21b      	sxth	r3, r3
 800b408:	b29a      	uxth	r2, r3
 800b40a:	4b20      	ldr	r3, [pc, #128]	@ (800b48c <read_prom+0x268>)
 800b40c:	801a      	strh	r2, [r3, #0]

  cmd = MS5607_READ_C6_CMD;
 800b40e:	23ac      	movs	r3, #172	@ 0xac
 800b410:	70fb      	strb	r3, [r7, #3]
  if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, 0) == -1)
 800b412:	4b19      	ldr	r3, [pc, #100]	@ (800b478 <read_prom+0x254>)
 800b414:	6818      	ldr	r0, [r3, #0]
 800b416:	1cfa      	adds	r2, r7, #3
 800b418:	2300      	movs	r3, #0
 800b41a:	9300      	str	r3, [sp, #0]
 800b41c:	2301      	movs	r3, #1
 800b41e:	2177      	movs	r1, #119	@ 0x77
 800b420:	f7ff fc48 	bl	800acb4 <i2c_write_blocking>
 800b424:	4603      	mov	r3, r0
 800b426:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b42a:	d102      	bne.n	800b432 <read_prom+0x20e>
    return -1;
 800b42c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b430:	e01e      	b.n	800b470 <read_prom+0x24c>
  LL_mDelay(DELAY);
 800b432:	200a      	movs	r0, #10
 800b434:	f7f8 fa44 	bl	80038c0 <LL_mDelay>
  if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 2, 0) == -1)
 800b438:	4b0f      	ldr	r3, [pc, #60]	@ (800b478 <read_prom+0x254>)
 800b43a:	6818      	ldr	r0, [r3, #0]
 800b43c:	1d3a      	adds	r2, r7, #4
 800b43e:	2300      	movs	r3, #0
 800b440:	9300      	str	r3, [sp, #0]
 800b442:	2302      	movs	r3, #2
 800b444:	2177      	movs	r1, #119	@ 0x77
 800b446:	f7ff fbf1 	bl	800ac2c <i2c_read_blocking>
 800b44a:	4603      	mov	r3, r0
 800b44c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b450:	d102      	bne.n	800b458 <read_prom+0x234>
    return -1;
 800b452:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b456:	e00b      	b.n	800b470 <read_prom+0x24c>
  c6 = ((uint16_t)buf[0] << 8) | buf[1];
 800b458:	793b      	ldrb	r3, [r7, #4]
 800b45a:	b21b      	sxth	r3, r3
 800b45c:	021b      	lsls	r3, r3, #8
 800b45e:	b21a      	sxth	r2, r3
 800b460:	797b      	ldrb	r3, [r7, #5]
 800b462:	b21b      	sxth	r3, r3
 800b464:	4313      	orrs	r3, r2
 800b466:	b21b      	sxth	r3, r3
 800b468:	b29a      	uxth	r2, r3
 800b46a:	4b09      	ldr	r3, [pc, #36]	@ (800b490 <read_prom+0x26c>)
 800b46c:	801a      	strh	r2, [r3, #0]

  return 0;
 800b46e:	2300      	movs	r3, #0
}
 800b470:	4618      	mov	r0, r3
 800b472:	3708      	adds	r7, #8
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}
 800b478:	20000350 	.word	0x20000350
 800b47c:	20000324 	.word	0x20000324
 800b480:	20000326 	.word	0x20000326
 800b484:	20000328 	.word	0x20000328
 800b488:	2000032a 	.word	0x2000032a
 800b48c:	2000032c 	.word	0x2000032c
 800b490:	2000032e 	.word	0x2000032e

0800b494 <conversion>:

static int conversion() {
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af02      	add	r7, sp, #8
  uint8_t buf[3] = {0, 0, 0};
 800b49a:	1d3b      	adds	r3, r7, #4
 800b49c:	2100      	movs	r1, #0
 800b49e:	460a      	mov	r2, r1
 800b4a0:	801a      	strh	r2, [r3, #0]
 800b4a2:	460a      	mov	r2, r1
 800b4a4:	709a      	strb	r2, [r3, #2]

  uint8_t cmd = MS5607_PRESS_CONV_CMD;
 800b4a6:	2348      	movs	r3, #72	@ 0x48
 800b4a8:	70fb      	strb	r3, [r7, #3]
  if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, 0) == -1)
 800b4aa:	4b47      	ldr	r3, [pc, #284]	@ (800b5c8 <conversion+0x134>)
 800b4ac:	6818      	ldr	r0, [r3, #0]
 800b4ae:	1cfa      	adds	r2, r7, #3
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	2177      	movs	r1, #119	@ 0x77
 800b4b8:	f7ff fbfc 	bl	800acb4 <i2c_write_blocking>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4c2:	d102      	bne.n	800b4ca <conversion+0x36>
    return -1;
 800b4c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b4c8:	e07a      	b.n	800b5c0 <conversion+0x12c>
  LL_mDelay(DELAY);
 800b4ca:	200a      	movs	r0, #10
 800b4cc:	f7f8 f9f8 	bl	80038c0 <LL_mDelay>

  cmd = MS5607_READ_CMD;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	70fb      	strb	r3, [r7, #3]
  if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, 0) == -1)
 800b4d4:	4b3c      	ldr	r3, [pc, #240]	@ (800b5c8 <conversion+0x134>)
 800b4d6:	6818      	ldr	r0, [r3, #0]
 800b4d8:	1cfa      	adds	r2, r7, #3
 800b4da:	2300      	movs	r3, #0
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	2301      	movs	r3, #1
 800b4e0:	2177      	movs	r1, #119	@ 0x77
 800b4e2:	f7ff fbe7 	bl	800acb4 <i2c_write_blocking>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4ec:	d102      	bne.n	800b4f4 <conversion+0x60>
    return -1;
 800b4ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b4f2:	e065      	b.n	800b5c0 <conversion+0x12c>
  LL_mDelay(DELAY);
 800b4f4:	200a      	movs	r0, #10
 800b4f6:	f7f8 f9e3 	bl	80038c0 <LL_mDelay>

  if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 3, 0) == -1)
 800b4fa:	4b33      	ldr	r3, [pc, #204]	@ (800b5c8 <conversion+0x134>)
 800b4fc:	6818      	ldr	r0, [r3, #0]
 800b4fe:	1d3a      	adds	r2, r7, #4
 800b500:	2300      	movs	r3, #0
 800b502:	9300      	str	r3, [sp, #0]
 800b504:	2303      	movs	r3, #3
 800b506:	2177      	movs	r1, #119	@ 0x77
 800b508:	f7ff fb90 	bl	800ac2c <i2c_read_blocking>
 800b50c:	4603      	mov	r3, r0
 800b50e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b512:	d102      	bne.n	800b51a <conversion+0x86>
    return -1;
 800b514:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b518:	e052      	b.n	800b5c0 <conversion+0x12c>

  d1 = ((uint32_t)buf[0] << 16) | ((uint32_t)buf[1] << 8) | buf[2];
 800b51a:	793b      	ldrb	r3, [r7, #4]
 800b51c:	041a      	lsls	r2, r3, #16
 800b51e:	797b      	ldrb	r3, [r7, #5]
 800b520:	021b      	lsls	r3, r3, #8
 800b522:	4313      	orrs	r3, r2
 800b524:	79ba      	ldrb	r2, [r7, #6]
 800b526:	4313      	orrs	r3, r2
 800b528:	4a28      	ldr	r2, [pc, #160]	@ (800b5cc <conversion+0x138>)
 800b52a:	6013      	str	r3, [r2, #0]

  buf[0] = 0;
 800b52c:	2300      	movs	r3, #0
 800b52e:	713b      	strb	r3, [r7, #4]
  buf[1] = 0;
 800b530:	2300      	movs	r3, #0
 800b532:	717b      	strb	r3, [r7, #5]
  buf[2] = 0;
 800b534:	2300      	movs	r3, #0
 800b536:	71bb      	strb	r3, [r7, #6]

  cmd = MS5607_TEMP_CONV_CMD;
 800b538:	2358      	movs	r3, #88	@ 0x58
 800b53a:	70fb      	strb	r3, [r7, #3]
  if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, 0) == -1)
 800b53c:	4b22      	ldr	r3, [pc, #136]	@ (800b5c8 <conversion+0x134>)
 800b53e:	6818      	ldr	r0, [r3, #0]
 800b540:	1cfa      	adds	r2, r7, #3
 800b542:	2300      	movs	r3, #0
 800b544:	9300      	str	r3, [sp, #0]
 800b546:	2301      	movs	r3, #1
 800b548:	2177      	movs	r1, #119	@ 0x77
 800b54a:	f7ff fbb3 	bl	800acb4 <i2c_write_blocking>
 800b54e:	4603      	mov	r3, r0
 800b550:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b554:	d102      	bne.n	800b55c <conversion+0xc8>
    return -1;
 800b556:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b55a:	e031      	b.n	800b5c0 <conversion+0x12c>
  LL_mDelay(DELAY);
 800b55c:	200a      	movs	r0, #10
 800b55e:	f7f8 f9af 	bl	80038c0 <LL_mDelay>

  cmd = MS5607_READ_CMD;
 800b562:	2300      	movs	r3, #0
 800b564:	70fb      	strb	r3, [r7, #3]
  if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, 0) == -1)
 800b566:	4b18      	ldr	r3, [pc, #96]	@ (800b5c8 <conversion+0x134>)
 800b568:	6818      	ldr	r0, [r3, #0]
 800b56a:	1cfa      	adds	r2, r7, #3
 800b56c:	2300      	movs	r3, #0
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	2301      	movs	r3, #1
 800b572:	2177      	movs	r1, #119	@ 0x77
 800b574:	f7ff fb9e 	bl	800acb4 <i2c_write_blocking>
 800b578:	4603      	mov	r3, r0
 800b57a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b57e:	d102      	bne.n	800b586 <conversion+0xf2>
    return -1;
 800b580:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b584:	e01c      	b.n	800b5c0 <conversion+0x12c>
  LL_mDelay(DELAY);
 800b586:	200a      	movs	r0, #10
 800b588:	f7f8 f99a 	bl	80038c0 <LL_mDelay>

  if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 3, 0) == -1)
 800b58c:	4b0e      	ldr	r3, [pc, #56]	@ (800b5c8 <conversion+0x134>)
 800b58e:	6818      	ldr	r0, [r3, #0]
 800b590:	1d3a      	adds	r2, r7, #4
 800b592:	2300      	movs	r3, #0
 800b594:	9300      	str	r3, [sp, #0]
 800b596:	2303      	movs	r3, #3
 800b598:	2177      	movs	r1, #119	@ 0x77
 800b59a:	f7ff fb47 	bl	800ac2c <i2c_read_blocking>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b5a4:	d102      	bne.n	800b5ac <conversion+0x118>
    return -1;
 800b5a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b5aa:	e009      	b.n	800b5c0 <conversion+0x12c>

  d2 = ((uint32_t)buf[0] << 16) | ((uint32_t)buf[1] << 8) | buf[2];
 800b5ac:	793b      	ldrb	r3, [r7, #4]
 800b5ae:	041a      	lsls	r2, r3, #16
 800b5b0:	797b      	ldrb	r3, [r7, #5]
 800b5b2:	021b      	lsls	r3, r3, #8
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	79ba      	ldrb	r2, [r7, #6]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	4a05      	ldr	r2, [pc, #20]	@ (800b5d0 <conversion+0x13c>)
 800b5bc:	6013      	str	r3, [r2, #0]

  return 0;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3708      	adds	r7, #8
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	20000350 	.word	0x20000350
 800b5cc:	20000330 	.word	0x20000330
 800b5d0:	20000334 	.word	0x20000334

0800b5d4 <PIDController_Init>:
#include "PID.h"

#include <stdint.h>

void PIDController_Init(PIDController *pid) {
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]

  /* Clear controller variables */
  pid->integrator = 0;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	625a      	str	r2, [r3, #36]	@ 0x24
  pid->prevError = 0;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	629a      	str	r2, [r3, #40]	@ 0x28

  pid->differentiator = 0;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid->prevMeasurement = 0;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	631a      	str	r2, [r3, #48]	@ 0x30

  pid->out = 0;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800b5fa:	bf00      	nop
 800b5fc:	370c      	adds	r7, #12
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
	...

0800b608 <PIDController_Update>:

static int32_t error = 0;

int32_t PIDController_Update(PIDController *pid, int32_t setpoint,
                             int32_t measurement) {
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]

  error = setpoint - measurement;
 800b614:	68ba      	ldr	r2, [r7, #8]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	1ad3      	subs	r3, r2, r3
 800b61a:	4a2c      	ldr	r2, [pc, #176]	@ (800b6cc <PIDController_Update+0xc4>)
 800b61c:	6013      	str	r3, [r2, #0]

  pid->integrator = pid->integrator + ((error + pid->prevError) / (int32_t)100);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800b626:	4b29      	ldr	r3, [pc, #164]	@ (800b6cc <PIDController_Update+0xc4>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	440b      	add	r3, r1
 800b62c:	4928      	ldr	r1, [pc, #160]	@ (800b6d0 <PIDController_Update+0xc8>)
 800b62e:	fb81 0103 	smull	r0, r1, r1, r3
 800b632:	1149      	asrs	r1, r1, #5
 800b634:	17db      	asrs	r3, r3, #31
 800b636:	1acb      	subs	r3, r1, r3
 800b638:	441a      	add	r2, r3
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	625a      	str	r2, [r3, #36]	@ 0x24

  // Anti-wind-up via integrator clamping
  if (pid->integrator > pid->limMaxInt) {
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	69db      	ldr	r3, [r3, #28]
 800b646:	429a      	cmp	r2, r3
 800b648:	dd04      	ble.n	800b654 <PIDController_Update+0x4c>

    pid->integrator = pid->limMaxInt;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	69da      	ldr	r2, [r3, #28]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	625a      	str	r2, [r3, #36]	@ 0x24
 800b652:	e009      	b.n	800b668 <PIDController_Update+0x60>

  } else if (pid->integrator < pid->limMinInt) {
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	699b      	ldr	r3, [r3, #24]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	da03      	bge.n	800b668 <PIDController_Update+0x60>

    pid->integrator = pid->limMinInt;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	699a      	ldr	r2, [r3, #24]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  // Compute output and apply limits
  pid->out = (error / 30) + (pid->integrator);
 800b668:	4b18      	ldr	r3, [pc, #96]	@ (800b6cc <PIDController_Update+0xc4>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a19      	ldr	r2, [pc, #100]	@ (800b6d4 <PIDController_Update+0xcc>)
 800b66e:	fb82 1203 	smull	r1, r2, r2, r3
 800b672:	441a      	add	r2, r3
 800b674:	1112      	asrs	r2, r2, #4
 800b676:	17db      	asrs	r3, r3, #31
 800b678:	1ad2      	subs	r2, r2, r3
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b67e:	441a      	add	r2, r3
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	635a      	str	r2, [r3, #52]	@ 0x34

  if (pid->out > pid->limMax) {
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	695b      	ldr	r3, [r3, #20]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	dd04      	ble.n	800b69a <PIDController_Update+0x92>

    pid->out = pid->limMax;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	695a      	ldr	r2, [r3, #20]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	635a      	str	r2, [r3, #52]	@ 0x34
 800b698:	e009      	b.n	800b6ae <PIDController_Update+0xa6>

  } else if (pid->out < pid->limMin) {
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	da03      	bge.n	800b6ae <PIDController_Update+0xa6>

    pid->out = pid->limMin;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	691a      	ldr	r2, [r3, #16]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Store error and measurement for later use */
  pid->prevError = error;
 800b6ae:	4b07      	ldr	r3, [pc, #28]	@ (800b6cc <PIDController_Update+0xc4>)
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	629a      	str	r2, [r3, #40]	@ 0x28
  pid->prevMeasurement = measurement;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Return controller output */
  return pid->out;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3714      	adds	r7, #20
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr
 800b6cc:	20000354 	.word	0x20000354
 800b6d0:	51eb851f 	.word	0x51eb851f
 800b6d4:	88888889 	.word	0x88888889

0800b6d8 <LL_ADC_Enable>:
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	689b      	ldr	r3, [r3, #8]
 800b6e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b6e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b6ec:	f043 0201 	orr.w	r2, r3, #1
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	609a      	str	r2, [r3, #8]
}
 800b6f4:	bf00      	nop
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr

0800b700 <LL_ADC_Disable>:
{
 800b700:	b480      	push	{r7}
 800b702:	b083      	sub	sp, #12
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b710:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b714:	f043 0202 	orr.w	r2, r3, #2
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	609a      	str	r2, [r3, #8]
}
 800b71c:	bf00      	nop
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <LL_ADC_REG_StartConversion>:
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	689b      	ldr	r3, [r3, #8]
 800b734:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b738:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b73c:	f043 0204 	orr.w	r2, r3, #4
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	609a      	str	r2, [r3, #8]
}
 800b744:	bf00      	nop
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <LL_ADC_REG_ReadConversionData12>:
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b75c:	b29b      	uxth	r3, r3
}
 800b75e:	4618      	mov	r0, r3
 800b760:	370c      	adds	r7, #12
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr

0800b76a <LL_ADC_IsActiveFlag_EOC>:
{
 800b76a:	b480      	push	{r7}
 800b76c:	b083      	sub	sp, #12
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f003 0304 	and.w	r3, r3, #4
 800b77a:	2b04      	cmp	r3, #4
 800b77c:	d101      	bne.n	800b782 <LL_ADC_IsActiveFlag_EOC+0x18>
 800b77e:	2301      	movs	r3, #1
 800b780:	e000      	b.n	800b784 <LL_ADC_IsActiveFlag_EOC+0x1a>
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <LL_ADC_ClearFlag_EOC>:
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2204      	movs	r2, #4
 800b79c:	601a      	str	r2, [r3, #0]
}
 800b79e:	bf00      	nop
 800b7a0:	370c      	adds	r7, #12
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr

0800b7aa <LL_I2C_IsActiveFlag_RXNE>:
{
 800b7aa:	b480      	push	{r7}
 800b7ac:	b083      	sub	sp, #12
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	699b      	ldr	r3, [r3, #24]
 800b7b6:	f003 0304 	and.w	r3, r3, #4
 800b7ba:	2b04      	cmp	r3, #4
 800b7bc:	d101      	bne.n	800b7c2 <LL_I2C_IsActiveFlag_RXNE+0x18>
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e000      	b.n	800b7c4 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800b7c2:	2300      	movs	r3, #0
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <LL_I2C_HandleTransfer>:
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b087      	sub	sp, #28
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
 800b7dc:	603b      	str	r3, [r7, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800b7ea:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	041b      	lsls	r3, r3, #16
 800b7f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 800b7f4:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b7f6:	6a3b      	ldr	r3, [r7, #32]
 800b7f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b802:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	685a      	ldr	r2, [r3, #4]
 800b808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b80a:	0d5b      	lsrs	r3, r3, #21
 800b80c:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800b810:	4b06      	ldr	r3, [pc, #24]	@ (800b82c <LL_I2C_HandleTransfer+0x5c>)
 800b812:	430b      	orrs	r3, r1
 800b814:	43db      	mvns	r3, r3
 800b816:	401a      	ands	r2, r3
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	431a      	orrs	r2, r3
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	605a      	str	r2, [r3, #4]
}
 800b820:	bf00      	nop
 800b822:	371c      	adds	r7, #28
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr
 800b82c:	03ff7bff 	.word	0x03ff7bff

0800b830 <LL_I2C_ReceiveData8>:
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b83c:	b2db      	uxtb	r3, r3
}
 800b83e:	4618      	mov	r0, r3
 800b840:	370c      	adds	r7, #12
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr

0800b84a <LL_TIM_EnableCounter>:
{
 800b84a:	b480      	push	{r7}
 800b84c:	b083      	sub	sp, #12
 800b84e:	af00      	add	r7, sp, #0
 800b850:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f043 0201 	orr.w	r2, r3, #1
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	601a      	str	r2, [r3, #0]
}
 800b85e:	bf00      	nop
 800b860:	370c      	adds	r7, #12
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <LL_TIM_CC_EnableChannel>:
{
 800b86a:	b480      	push	{r7}
 800b86c:	b083      	sub	sp, #12
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6a1a      	ldr	r2, [r3, #32]
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	431a      	orrs	r2, r3
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	621a      	str	r2, [r3, #32]
}
 800b880:	bf00      	nop
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <LL_TIM_OC_SetCompareCH3>:
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	683a      	ldr	r2, [r7, #0]
 800b89a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800b89c:	bf00      	nop
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr

0800b8a8 <LL_TIM_EnableAllOutputs>:
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8b4:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	645a      	str	r2, [r3, #68]	@ 0x44
}
 800b8bc:	bf00      	nop
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <LL_GPIO_ResetOutputPin>:
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	683a      	ldr	r2, [r7, #0]
 800b8d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	695b      	ldr	r3, [r3, #20]
 800b8f2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	4013      	ands	r3, r2
 800b8fa:	041a      	lsls	r2, r3, #16
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	43d9      	mvns	r1, r3
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	400b      	ands	r3, r1
 800b904:	431a      	orrs	r2, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	619a      	str	r2, [r3, #24]
}
 800b90a:	bf00      	nop
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <LL_USART_EnableDirectionRx>:
  * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
{
 800b916:	b480      	push	{r7}
 800b918:	b089      	sub	sp, #36	@ 0x24
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	e853 3f00 	ldrex	r3, [r3]
 800b928:	60bb      	str	r3, [r7, #8]
   return(result);
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	f043 0304 	orr.w	r3, r3, #4
 800b930:	61fb      	str	r3, [r7, #28]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	69fa      	ldr	r2, [r7, #28]
 800b936:	61ba      	str	r2, [r7, #24]
 800b938:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b93a:	6979      	ldr	r1, [r7, #20]
 800b93c:	69ba      	ldr	r2, [r7, #24]
 800b93e:	e841 2300 	strex	r3, r2, [r1]
 800b942:	613b      	str	r3, [r7, #16]
   return(result);
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d1e9      	bne.n	800b91e <LL_USART_EnableDirectionRx+0x8>
}
 800b94a:	bf00      	nop
 800b94c:	bf00      	nop
 800b94e:	3724      	adds	r7, #36	@ 0x24
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <LL_USART_DisableDirectionRx>:
  * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
{
 800b958:	b480      	push	{r7}
 800b95a:	b089      	sub	sp, #36	@ 0x24
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	e853 3f00 	ldrex	r3, [r3]
 800b96a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	f023 0304 	bic.w	r3, r3, #4
 800b972:	61fb      	str	r3, [r7, #28]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	69fa      	ldr	r2, [r7, #28]
 800b978:	61ba      	str	r2, [r7, #24]
 800b97a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b97c:	6979      	ldr	r1, [r7, #20]
 800b97e:	69ba      	ldr	r2, [r7, #24]
 800b980:	e841 2300 	strex	r3, r2, [r1]
 800b984:	613b      	str	r3, [r7, #16]
   return(result);
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d1e9      	bne.n	800b960 <LL_USART_DisableDirectionRx+0x8>
}
 800b98c:	bf00      	nop
 800b98e:	bf00      	nop
 800b990:	3724      	adds	r7, #36	@ 0x24
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr

0800b99a <LL_USART_EnableDirectionTx>:
  * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
{
 800b99a:	b480      	push	{r7}
 800b99c:	b089      	sub	sp, #36	@ 0x24
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TE);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	e853 3f00 	ldrex	r3, [r3]
 800b9ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	f043 0308 	orr.w	r3, r3, #8
 800b9b4:	61fb      	str	r3, [r7, #28]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	69fa      	ldr	r2, [r7, #28]
 800b9ba:	61ba      	str	r2, [r7, #24]
 800b9bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9be:	6979      	ldr	r1, [r7, #20]
 800b9c0:	69ba      	ldr	r2, [r7, #24]
 800b9c2:	e841 2300 	strex	r3, r2, [r1]
 800b9c6:	613b      	str	r3, [r7, #16]
   return(result);
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d1e9      	bne.n	800b9a2 <LL_USART_EnableDirectionTx+0x8>
}
 800b9ce:	bf00      	nop
 800b9d0:	bf00      	nop
 800b9d2:	3724      	adds	r7, #36	@ 0x24
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <LL_USART_DisableOverrunDetect>:
  * @rmtoll CR3          OVRDIS        LL_USART_DisableOverrunDetect
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	689b      	ldr	r3, [r3, #8]
 800b9e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	609a      	str	r2, [r3, #8]
}
 800b9f0:	bf00      	nop
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2208      	movs	r2, #8
 800ba08:	621a      	str	r2, [r3, #32]
}
 800ba0a:	bf00      	nop
 800ba0c:	370c      	adds	r7, #12
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <LL_IWDG_ReloadCounter>:
{
 800ba16:	b480      	push	{r7}
 800ba18:	b083      	sub	sp, #12
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800ba24:	601a      	str	r2, [r3, #0]
}
 800ba26:	bf00      	nop
 800ba28:	370c      	adds	r7, #12
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr
	...

0800ba34 <geofence_init>:

  uint32_t altitude;

} geo_fence;

void geofence_init() {
 800ba34:	b4b0      	push	{r4, r5, r7}
 800ba36:	af00      	add	r7, sp, #0
  // set geofence parameters
  geo_fence.top_left = empty_vertex;
 800ba38:	4a18      	ldr	r2, [pc, #96]	@ (800ba9c <geofence_init+0x68>)
 800ba3a:	4b19      	ldr	r3, [pc, #100]	@ (800baa0 <geofence_init+0x6c>)
 800ba3c:	4614      	mov	r4, r2
 800ba3e:	461d      	mov	r5, r3
 800ba40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba44:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ba48:	e884 0003 	stmia.w	r4, {r0, r1}
  geo_fence.bot_left = empty_vertex;
 800ba4c:	4b13      	ldr	r3, [pc, #76]	@ (800ba9c <geofence_init+0x68>)
 800ba4e:	4a14      	ldr	r2, [pc, #80]	@ (800baa0 <geofence_init+0x6c>)
 800ba50:	f103 0418 	add.w	r4, r3, #24
 800ba54:	4615      	mov	r5, r2
 800ba56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ba5e:	e884 0003 	stmia.w	r4, {r0, r1}
  geo_fence.top_right = empty_vertex;
 800ba62:	4b0e      	ldr	r3, [pc, #56]	@ (800ba9c <geofence_init+0x68>)
 800ba64:	4a0e      	ldr	r2, [pc, #56]	@ (800baa0 <geofence_init+0x6c>)
 800ba66:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 800ba6a:	4615      	mov	r5, r2
 800ba6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba70:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ba74:	e884 0003 	stmia.w	r4, {r0, r1}
  geo_fence.bot_right = empty_vertex;
 800ba78:	4b08      	ldr	r3, [pc, #32]	@ (800ba9c <geofence_init+0x68>)
 800ba7a:	4a09      	ldr	r2, [pc, #36]	@ (800baa0 <geofence_init+0x6c>)
 800ba7c:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 800ba80:	4615      	mov	r5, r2
 800ba82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba86:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ba8a:	e884 0003 	stmia.w	r4, {r0, r1}
  geo_fence.altitude = 0;
 800ba8e:	4b03      	ldr	r3, [pc, #12]	@ (800ba9c <geofence_init+0x68>)
 800ba90:	2200      	movs	r2, #0
 800ba92:	661a      	str	r2, [r3, #96]	@ 0x60
}
 800ba94:	bf00      	nop
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bcb0      	pop	{r4, r5, r7}
 800ba9a:	4770      	bx	lr
 800ba9c:	20000358 	.word	0x20000358
 800baa0:	20000044 	.word	0x20000044

0800baa4 <pid_blocking>:
      timeout++;
    }
  }
}

void pid_blocking(void) {
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
  uint16_t adc_value = 0;
 800baaa:	2300      	movs	r3, #0
 800baac:	80fb      	strh	r3, [r7, #6]
  uint32_t isns_value = 0;
 800baae:	2300      	movs	r3, #0
 800bab0:	60fb      	str	r3, [r7, #12]
  uint32_t batt_value = 0;
 800bab2:	2300      	movs	r3, #0
 800bab4:	60bb      	str	r3, [r7, #8]

  // Enable PWM channel outputs
  LL_TIM_EnableCounter(TIM1);
 800bab6:	4853      	ldr	r0, [pc, #332]	@ (800bc04 <pid_blocking+0x160>)
 800bab8:	f7ff fec7 	bl	800b84a <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH3N);
 800babc:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 800bac0:	4850      	ldr	r0, [pc, #320]	@ (800bc04 <pid_blocking+0x160>)
 800bac2:	f7ff fed2 	bl	800b86a <LL_TIM_CC_EnableChannel>
  LL_TIM_OC_SetCompareCH3(TIM1, 0);
 800bac6:	2100      	movs	r1, #0
 800bac8:	484e      	ldr	r0, [pc, #312]	@ (800bc04 <pid_blocking+0x160>)
 800baca:	f7ff fedf 	bl	800b88c <LL_TIM_OC_SetCompareCH3>
  LL_TIM_EnableAllOutputs(TIM1);
 800bace:	484d      	ldr	r0, [pc, #308]	@ (800bc04 <pid_blocking+0x160>)
 800bad0:	f7ff feea 	bl	800b8a8 <LL_TIM_EnableAllOutputs>

  LL_ADC_Disable(ADC1);
 800bad4:	484c      	ldr	r0, [pc, #304]	@ (800bc08 <pid_blocking+0x164>)
 800bad6:	f7ff fe13 	bl	800b700 <LL_ADC_Disable>
  MX_ADC1_Init();
 800bada:	f7f6 fba7 	bl	800222c <MX_ADC1_Init>
  LL_ADC_Enable(ADC1);
 800bade:	484a      	ldr	r0, [pc, #296]	@ (800bc08 <pid_blocking+0x164>)
 800bae0:	f7ff fdfa 	bl	800b6d8 <LL_ADC_Enable>

  PA8_LOW
 800bae4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bae8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800baec:	f7ff feec 	bl	800b8c8 <LL_GPIO_ResetOutputPin>

  while (1) {

    PA8_TOGGLE
 800baf0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800baf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800baf8:	f7ff fef4 	bl	800b8e4 <LL_GPIO_TogglePin>

    LL_IWDG_ReloadCounter(IWDG);
 800bafc:	4843      	ldr	r0, [pc, #268]	@ (800bc0c <pid_blocking+0x168>)
 800bafe:	f7ff ff8a 	bl	800ba16 <LL_IWDG_ReloadCounter>

    // -- Read ADC --
    LL_ADC_REG_StartConversion(ADC1);
 800bb02:	4841      	ldr	r0, [pc, #260]	@ (800bc08 <pid_blocking+0x164>)
 800bb04:	f7ff fe10 	bl	800b728 <LL_ADC_REG_StartConversion>

    // wait end of conversion flag
    while (!LL_ADC_IsActiveFlag_EOC(ADC1))
 800bb08:	bf00      	nop
 800bb0a:	483f      	ldr	r0, [pc, #252]	@ (800bc08 <pid_blocking+0x164>)
 800bb0c:	f7ff fe2d 	bl	800b76a <LL_ADC_IsActiveFlag_EOC>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d0f9      	beq.n	800bb0a <pid_blocking+0x66>
      ;

    // read channel1 data in mV
    adc_value = LL_ADC_REG_ReadConversionData12(ADC1);
 800bb16:	483c      	ldr	r0, [pc, #240]	@ (800bc08 <pid_blocking+0x164>)
 800bb18:	f7ff fe1a 	bl	800b750 <LL_ADC_REG_ReadConversionData12>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	80fb      	strh	r3, [r7, #6]

    // clear flag
    LL_ADC_ClearFlag_EOC(ADC1);
 800bb20:	4839      	ldr	r0, [pc, #228]	@ (800bc08 <pid_blocking+0x164>)
 800bb22:	f7ff fe35 	bl	800b790 <LL_ADC_ClearFlag_EOC>

    LL_ADC_REG_StartConversion(ADC1);
 800bb26:	4838      	ldr	r0, [pc, #224]	@ (800bc08 <pid_blocking+0x164>)
 800bb28:	f7ff fdfe 	bl	800b728 <LL_ADC_REG_StartConversion>

    if (log_item.pressure <
 800bb2c:	4b38      	ldr	r3, [pc, #224]	@ (800bc10 <pid_blocking+0x16c>)
 800bb2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb30:	4a38      	ldr	r2, [pc, #224]	@ (800bc14 <pid_blocking+0x170>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d80e      	bhi.n	800bb54 <pid_blocking+0xb0>
        100000) // total kludge since it's difficult to figure out if on
                // battery or USB power right now, if pressure is less than
                // 1000 mbar it's pretty likely that system is airborne
      batt_value =
          __LL_ADC_CALC_DATA_TO_VOLTAGE(3000, adc_value, LL_ADC_RESOLUTION_12B);
 800bb36:	88fb      	ldrh	r3, [r7, #6]
 800bb38:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800bb3c:	fb02 f303 	mul.w	r3, r2, r3
 800bb40:	461a      	mov	r2, r3
      batt_value =
 800bb42:	4b35      	ldr	r3, [pc, #212]	@ (800bc18 <pid_blocking+0x174>)
 800bb44:	fba3 1302 	umull	r1, r3, r3, r2
 800bb48:	1ad2      	subs	r2, r2, r3
 800bb4a:	0852      	lsrs	r2, r2, #1
 800bb4c:	4413      	add	r3, r2
 800bb4e:	0adb      	lsrs	r3, r3, #11
 800bb50:	60bb      	str	r3, [r7, #8]
 800bb52:	e00d      	b.n	800bb70 <pid_blocking+0xcc>
    else
      batt_value =
          __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, adc_value, LL_ADC_RESOLUTION_12B);
 800bb54:	88fb      	ldrh	r3, [r7, #6]
 800bb56:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800bb5a:	fb02 f303 	mul.w	r3, r2, r3
 800bb5e:	461a      	mov	r2, r3
      batt_value =
 800bb60:	4b2d      	ldr	r3, [pc, #180]	@ (800bc18 <pid_blocking+0x174>)
 800bb62:	fba3 1302 	umull	r1, r3, r3, r2
 800bb66:	1ad2      	subs	r2, r2, r3
 800bb68:	0852      	lsrs	r2, r2, #1
 800bb6a:	4413      	add	r3, r2
 800bb6c:	0adb      	lsrs	r3, r3, #11
 800bb6e:	60bb      	str	r3, [r7, #8]

    batt_value = (batt_value * 24) / 10;
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	4613      	mov	r3, r2
 800bb74:	005b      	lsls	r3, r3, #1
 800bb76:	4413      	add	r3, r2
 800bb78:	00db      	lsls	r3, r3, #3
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	4b27      	ldr	r3, [pc, #156]	@ (800bc1c <pid_blocking+0x178>)
 800bb7e:	fba3 2302 	umull	r2, r3, r3, r2
 800bb82:	08db      	lsrs	r3, r3, #3
 800bb84:	60bb      	str	r3, [r7, #8]

    // wait end of conversion flag
    while (!LL_ADC_IsActiveFlag_EOC(ADC1))
 800bb86:	bf00      	nop
 800bb88:	481f      	ldr	r0, [pc, #124]	@ (800bc08 <pid_blocking+0x164>)
 800bb8a:	f7ff fdee 	bl	800b76a <LL_ADC_IsActiveFlag_EOC>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d0f9      	beq.n	800bb88 <pid_blocking+0xe4>
      ;

    // read channel1 data in mV
    adc_value = LL_ADC_REG_ReadConversionData12(ADC1);
 800bb94:	481c      	ldr	r0, [pc, #112]	@ (800bc08 <pid_blocking+0x164>)
 800bb96:	f7ff fddb 	bl	800b750 <LL_ADC_REG_ReadConversionData12>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	80fb      	strh	r3, [r7, #6]

    // clear flag
    LL_ADC_ClearFlag_EOC(ADC1);
 800bb9e:	481a      	ldr	r0, [pc, #104]	@ (800bc08 <pid_blocking+0x164>)
 800bba0:	f7ff fdf6 	bl	800b790 <LL_ADC_ClearFlag_EOC>

    if (log_item.pressure <
 800bba4:	4b1a      	ldr	r3, [pc, #104]	@ (800bc10 <pid_blocking+0x16c>)
 800bba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba8:	4a1a      	ldr	r2, [pc, #104]	@ (800bc14 <pid_blocking+0x170>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d80e      	bhi.n	800bbcc <pid_blocking+0x128>
        100000) // total kludge since it's difficult to figure out if on
                // battery or USB power right now, if pressure is less than
                // 1000 mbar it's pretty likely that system is airborne
      isns_value =
          __LL_ADC_CALC_DATA_TO_VOLTAGE(3000, adc_value, LL_ADC_RESOLUTION_12B);
 800bbae:	88fb      	ldrh	r3, [r7, #6]
 800bbb0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800bbb4:	fb02 f303 	mul.w	r3, r2, r3
 800bbb8:	461a      	mov	r2, r3
      isns_value =
 800bbba:	4b17      	ldr	r3, [pc, #92]	@ (800bc18 <pid_blocking+0x174>)
 800bbbc:	fba3 1302 	umull	r1, r3, r3, r2
 800bbc0:	1ad2      	subs	r2, r2, r3
 800bbc2:	0852      	lsrs	r2, r2, #1
 800bbc4:	4413      	add	r3, r2
 800bbc6:	0adb      	lsrs	r3, r3, #11
 800bbc8:	60fb      	str	r3, [r7, #12]
 800bbca:	e00d      	b.n	800bbe8 <pid_blocking+0x144>
    else
      isns_value =
          __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, adc_value, LL_ADC_RESOLUTION_12B);
 800bbcc:	88fb      	ldrh	r3, [r7, #6]
 800bbce:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800bbd2:	fb02 f303 	mul.w	r3, r2, r3
 800bbd6:	461a      	mov	r2, r3
      isns_value =
 800bbd8:	4b0f      	ldr	r3, [pc, #60]	@ (800bc18 <pid_blocking+0x174>)
 800bbda:	fba3 1302 	umull	r1, r3, r3, r2
 800bbde:	1ad2      	subs	r2, r2, r3
 800bbe0:	0852      	lsrs	r2, r2, #1
 800bbe2:	4413      	add	r3, r2
 800bbe4:	0adb      	lsrs	r3, r3, #11
 800bbe6:	60fb      	str	r3, [r7, #12]
    // end ADC read

    PIDController_Update(
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	461a      	mov	r2, r3
 800bbec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bbf0:	480b      	ldr	r0, [pc, #44]	@ (800bc20 <pid_blocking+0x17c>)
 800bbf2:	f7ff fd09 	bl	800b608 <PIDController_Update>
        &pid, 435,
        isns_value); // update PID controller with set point 1000mV
    LL_TIM_OC_SetCompareCH3(TIM1, pid.out); // pid.out
 800bbf6:	4b0a      	ldr	r3, [pc, #40]	@ (800bc20 <pid_blocking+0x17c>)
 800bbf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	4801      	ldr	r0, [pc, #4]	@ (800bc04 <pid_blocking+0x160>)
 800bbfe:	f7ff fe45 	bl	800b88c <LL_TIM_OC_SetCompareCH3>
    PA8_TOGGLE
 800bc02:	e775      	b.n	800baf0 <pid_blocking+0x4c>
 800bc04:	40012c00 	.word	0x40012c00
 800bc08:	50040000 	.word	0x50040000
 800bc0c:	40003000 	.word	0x40003000
 800bc10:	200000f8 	.word	0x200000f8
 800bc14:	0001869f 	.word	0x0001869f
 800bc18:	00100101 	.word	0x00100101
 800bc1c:	cccccccd 	.word	0xcccccccd
 800bc20:	20000008 	.word	0x20000008

0800bc24 <update_int_count>:
  }
}

void update_int_count(uint32_t count) {
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  lfs_file_open(&lfs, &int_count_save, "int_count_30",
 800bc2c:	f240 1303 	movw	r3, #259	@ 0x103
 800bc30:	4a0c      	ldr	r2, [pc, #48]	@ (800bc64 <update_int_count+0x40>)
 800bc32:	490d      	ldr	r1, [pc, #52]	@ (800bc68 <update_int_count+0x44>)
 800bc34:	480d      	ldr	r0, [pc, #52]	@ (800bc6c <update_int_count+0x48>)
 800bc36:	f7fe fe73 	bl	800a920 <lfs_file_open>
                LFS_O_RDWR | LFS_O_CREAT);
  lfs_file_rewind(&lfs, &int_count_save);
 800bc3a:	490b      	ldr	r1, [pc, #44]	@ (800bc68 <update_int_count+0x44>)
 800bc3c:	480b      	ldr	r0, [pc, #44]	@ (800bc6c <update_int_count+0x48>)
 800bc3e:	f7fe ff2f 	bl	800aaa0 <lfs_file_rewind>
  lfs_file_write(&lfs, &int_count_save, &count, sizeof(count));
 800bc42:	1d3a      	adds	r2, r7, #4
 800bc44:	2304      	movs	r3, #4
 800bc46:	4908      	ldr	r1, [pc, #32]	@ (800bc68 <update_int_count+0x44>)
 800bc48:	4808      	ldr	r0, [pc, #32]	@ (800bc6c <update_int_count+0x48>)
 800bc4a:	f7fe fef9 	bl	800aa40 <lfs_file_write>
  lfs_file_close(&lfs, &int_count_save);
 800bc4e:	4906      	ldr	r1, [pc, #24]	@ (800bc68 <update_int_count+0x44>)
 800bc50:	4806      	ldr	r0, [pc, #24]	@ (800bc6c <update_int_count+0x48>)
 800bc52:	f7fe fe99 	bl	800a988 <lfs_file_close>
  lfs_unmount(&lfs);
 800bc56:	4805      	ldr	r0, [pc, #20]	@ (800bc6c <update_int_count+0x48>)
 800bc58:	f7fe fe4e 	bl	800a8f8 <lfs_unmount>
}
 800bc5c:	bf00      	nop
 800bc5e:	3708      	adds	r7, #8
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	0800ec64 	.word	0x0800ec64
 800bc68:	200002cc 	.word	0x200002cc
 800bc6c:	200001a4 	.word	0x200001a4

0800bc70 <count_revifs>:

int check_geo_fence() { return 0; }

// counts number of digits in uint32_t, returns anywhere from 1-7
int count_revifs(uint32_t n) {
 800bc70:	b480      	push	{r7}
 800bc72:	b083      	sub	sp, #12
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  if (n > 999999)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4a14      	ldr	r2, [pc, #80]	@ (800bccc <count_revifs+0x5c>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d901      	bls.n	800bc84 <count_revifs+0x14>
    return 7;
 800bc80:	2307      	movs	r3, #7
 800bc82:	e01d      	b.n	800bcc0 <count_revifs+0x50>
  if (n > 99999)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4a12      	ldr	r2, [pc, #72]	@ (800bcd0 <count_revifs+0x60>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d901      	bls.n	800bc90 <count_revifs+0x20>
    return 6;
 800bc8c:	2306      	movs	r3, #6
 800bc8e:	e017      	b.n	800bcc0 <count_revifs+0x50>
  if (n > 9999)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f242 720f 	movw	r2, #9999	@ 0x270f
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d901      	bls.n	800bc9e <count_revifs+0x2e>
    return 5;
 800bc9a:	2305      	movs	r3, #5
 800bc9c:	e010      	b.n	800bcc0 <count_revifs+0x50>
  if (n > 999)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bca4:	d301      	bcc.n	800bcaa <count_revifs+0x3a>
    return 4;
 800bca6:	2304      	movs	r3, #4
 800bca8:	e00a      	b.n	800bcc0 <count_revifs+0x50>
  if (n > 99)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2b63      	cmp	r3, #99	@ 0x63
 800bcae:	d901      	bls.n	800bcb4 <count_revifs+0x44>
    return 3;
 800bcb0:	2303      	movs	r3, #3
 800bcb2:	e005      	b.n	800bcc0 <count_revifs+0x50>
  if (n > 9)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2b09      	cmp	r3, #9
 800bcb8:	d901      	bls.n	800bcbe <count_revifs+0x4e>
    return 2;
 800bcba:	2302      	movs	r3, #2
 800bcbc:	e000      	b.n	800bcc0 <count_revifs+0x50>
  return 1;
 800bcbe:	2301      	movs	r3, #1
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr
 800bccc:	000f423f 	.word	0x000f423f
 800bcd0:	0001869f 	.word	0x0001869f

0800bcd4 <get_gps_data>:
  lfs_unmount(&lfs);
}

// this function waits for NMEA messages and parses it into the log item
// struct above
int get_gps_data() {
 800bcd4:	b590      	push	{r4, r7, lr}
 800bcd6:	b089      	sub	sp, #36	@ 0x24
 800bcd8:	af06      	add	r7, sp, #24
  static uint32_t len = 100;
  static uint32_t i = 0;

  // MX_USART2_UART_Init();

  LL_USART_DisableOverrunDetect(USART2);
 800bcda:	489b      	ldr	r0, [pc, #620]	@ (800bf48 <get_gps_data+0x274>)
 800bcdc:	f7ff fe7e 	bl	800b9dc <LL_USART_DisableOverrunDetect>
  LL_USART_ClearFlag_ORE(USART2);
 800bce0:	4899      	ldr	r0, [pc, #612]	@ (800bf48 <get_gps_data+0x274>)
 800bce2:	f7ff fe8b 	bl	800b9fc <LL_USART_ClearFlag_ORE>

  LL_USART_DisableDirectionRx(USART2);
 800bce6:	4898      	ldr	r0, [pc, #608]	@ (800bf48 <get_gps_data+0x274>)
 800bce8:	f7ff fe36 	bl	800b958 <LL_USART_DisableDirectionRx>
  LL_USART_EnableDirectionRx(USART2);
 800bcec:	4896      	ldr	r0, [pc, #600]	@ (800bf48 <get_gps_data+0x274>)
 800bcee:	f7ff fe12 	bl	800b916 <LL_USART_EnableDirectionRx>
  LL_USART_EnableDirectionTx(USART2);
 800bcf2:	4895      	ldr	r0, [pc, #596]	@ (800bf48 <get_gps_data+0x274>)
 800bcf4:	f7ff fe51 	bl	800b99a <LL_USART_EnableDirectionTx>

  while (1) { // poll I2C bus until end of line is received

    int timeout = 0; // I2C software timeout counter
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	607b      	str	r3, [r7, #4]

    // I2C RX
    LL_I2C_HandleTransfer(
 800bcfc:	4b93      	ldr	r3, [pc, #588]	@ (800bf4c <get_gps_data+0x278>)
 800bcfe:	9301      	str	r3, [sp, #4]
 800bd00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bd04:	9300      	str	r3, [sp, #0]
 800bd06:	2301      	movs	r3, #1
 800bd08:	2200      	movs	r2, #0
 800bd0a:	2184      	movs	r1, #132	@ 0x84
 800bd0c:	4890      	ldr	r0, [pc, #576]	@ (800bf50 <get_gps_data+0x27c>)
 800bd0e:	f7ff fd5f 	bl	800b7d0 <LL_I2C_HandleTransfer>
        I2C1, (0x42 << 1), LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND,
        LL_I2C_GENERATE_START_READ); // request 1 byte from GPS

    while (LL_I2C_IsActiveFlag_RXNE(I2C1) == 0) { // wait for response
 800bd12:	e00a      	b.n	800bd2a <get_gps_data+0x56>
      if (timeout >= 20000) {
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	dd02      	ble.n	800bd24 <get_gps_data+0x50>
        return -1;
 800bd1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bd22:	e10d      	b.n	800bf40 <get_gps_data+0x26c>
      }
      timeout++;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	3301      	adds	r3, #1
 800bd28:	607b      	str	r3, [r7, #4]
    while (LL_I2C_IsActiveFlag_RXNE(I2C1) == 0) { // wait for response
 800bd2a:	4889      	ldr	r0, [pc, #548]	@ (800bf50 <get_gps_data+0x27c>)
 800bd2c:	f7ff fd3d 	bl	800b7aa <LL_I2C_IsActiveFlag_RXNE>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d0ee      	beq.n	800bd14 <get_gps_data+0x40>
    }

    buf[i] = (char)LL_I2C_ReceiveData8(I2C1);
 800bd36:	4b87      	ldr	r3, [pc, #540]	@ (800bf54 <get_gps_data+0x280>)
 800bd38:	681c      	ldr	r4, [r3, #0]
 800bd3a:	4885      	ldr	r0, [pc, #532]	@ (800bf50 <get_gps_data+0x27c>)
 800bd3c:	f7ff fd78 	bl	800b830 <LL_I2C_ReceiveData8>
 800bd40:	4603      	mov	r3, r0
 800bd42:	461a      	mov	r2, r3
 800bd44:	4b84      	ldr	r3, [pc, #528]	@ (800bf58 <get_gps_data+0x284>)
 800bd46:	551a      	strb	r2, [r3, r4]
break;
timeout++;
}
    */

    if (buf[i] == '$') {
 800bd48:	4b82      	ldr	r3, [pc, #520]	@ (800bf54 <get_gps_data+0x280>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a82      	ldr	r2, [pc, #520]	@ (800bf58 <get_gps_data+0x284>)
 800bd4e:	5cd3      	ldrb	r3, [r2, r3]
 800bd50:	2b24      	cmp	r3, #36	@ 0x24
 800bd52:	d107      	bne.n	800bd64 <get_gps_data+0x90>
      i = 0;
 800bd54:	4b7f      	ldr	r3, [pc, #508]	@ (800bf54 <get_gps_data+0x280>)
 800bd56:	2200      	movs	r2, #0
 800bd58:	601a      	str	r2, [r3, #0]
      buf[i] = '$';
 800bd5a:	4b7e      	ldr	r3, [pc, #504]	@ (800bf54 <get_gps_data+0x280>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a7e      	ldr	r2, [pc, #504]	@ (800bf58 <get_gps_data+0x284>)
 800bd60:	2124      	movs	r1, #36	@ 0x24
 800bd62:	54d1      	strb	r1, [r2, r3]
    }

    if (i >= (len - 1) || buf[i] == 10) {
 800bd64:	4b7d      	ldr	r3, [pc, #500]	@ (800bf5c <get_gps_data+0x288>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	1e5a      	subs	r2, r3, #1
 800bd6a:	4b7a      	ldr	r3, [pc, #488]	@ (800bf54 <get_gps_data+0x280>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d906      	bls.n	800bd80 <get_gps_data+0xac>
 800bd72:	4b78      	ldr	r3, [pc, #480]	@ (800bf54 <get_gps_data+0x280>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a78      	ldr	r2, [pc, #480]	@ (800bf58 <get_gps_data+0x284>)
 800bd78:	5cd3      	ldrb	r3, [r2, r3]
 800bd7a:	2b0a      	cmp	r3, #10
 800bd7c:	f040 80d1 	bne.w	800bf22 <get_gps_data+0x24e>
      buf[len - 1] = 0x00;
 800bd80:	4b76      	ldr	r3, [pc, #472]	@ (800bf5c <get_gps_data+0x288>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	3b01      	subs	r3, #1
 800bd86:	4a74      	ldr	r2, [pc, #464]	@ (800bf58 <get_gps_data+0x284>)
 800bd88:	2100      	movs	r1, #0
 800bd8a:	54d1      	strb	r1, [r2, r3]
      i = 0;
 800bd8c:	4b71      	ldr	r3, [pc, #452]	@ (800bf54 <get_gps_data+0x280>)
 800bd8e:	2200      	movs	r2, #0
 800bd90:	601a      	str	r2, [r3, #0]

      if ((i + 1) < len - 1)
 800bd92:	4b70      	ldr	r3, [pc, #448]	@ (800bf54 <get_gps_data+0x280>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	1c5a      	adds	r2, r3, #1
 800bd98:	4b70      	ldr	r3, [pc, #448]	@ (800bf5c <get_gps_data+0x288>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d205      	bcs.n	800bdae <get_gps_data+0xda>
        buf[i + 1] = '\0';
 800bda2:	4b6c      	ldr	r3, [pc, #432]	@ (800bf54 <get_gps_data+0x280>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	3301      	adds	r3, #1
 800bda8:	4a6b      	ldr	r2, [pc, #428]	@ (800bf58 <get_gps_data+0x284>)
 800bdaa:	2100      	movs	r1, #0
 800bdac:	54d1      	strb	r1, [r2, r3]

      if (strncmp((buf + 3), "GGA", 3) == 0) { // parse GGA message
 800bdae:	4b6c      	ldr	r3, [pc, #432]	@ (800bf60 <get_gps_data+0x28c>)
 800bdb0:	2203      	movs	r2, #3
 800bdb2:	496c      	ldr	r1, [pc, #432]	@ (800bf64 <get_gps_data+0x290>)
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f000 fb97 	bl	800c4e8 <strncmp>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f040 8088 	bne.w	800bed2 <get_gps_data+0x1fe>
          if (buf[i] == '\n')
            break;
        }
                                */

        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", buf, strlen(buf));
 800bdc2:	4865      	ldr	r0, [pc, #404]	@ (800bf58 <get_gps_data+0x284>)
 800bdc4:	f7f4 f9e4 	bl	8000190 <strlen>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	9301      	str	r3, [sp, #4]
 800bdcc:	4b62      	ldr	r3, [pc, #392]	@ (800bf58 <get_gps_data+0x284>)
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	4b65      	ldr	r3, [pc, #404]	@ (800bf68 <get_gps_data+0x294>)
 800bdd2:	4a66      	ldr	r2, [pc, #408]	@ (800bf6c <get_gps_data+0x298>)
 800bdd4:	4966      	ldr	r1, [pc, #408]	@ (800bf70 <get_gps_data+0x29c>)
 800bdd6:	4867      	ldr	r0, [pc, #412]	@ (800bf74 <get_gps_data+0x2a0>)
 800bdd8:	f7f7 fecc 	bl	8003b74 <write_buf_to_fs>

        sscanf(buf, "%*[^,],%lu.%*lu,%ld.%lu,%c,%lu.%lu,%c,%*d,%*d,%*d,%lu",
 800bddc:	4b66      	ldr	r3, [pc, #408]	@ (800bf78 <get_gps_data+0x2a4>)
 800bdde:	9305      	str	r3, [sp, #20]
 800bde0:	4b66      	ldr	r3, [pc, #408]	@ (800bf7c <get_gps_data+0x2a8>)
 800bde2:	9304      	str	r3, [sp, #16]
 800bde4:	4b66      	ldr	r3, [pc, #408]	@ (800bf80 <get_gps_data+0x2ac>)
 800bde6:	9303      	str	r3, [sp, #12]
 800bde8:	4b66      	ldr	r3, [pc, #408]	@ (800bf84 <get_gps_data+0x2b0>)
 800bdea:	9302      	str	r3, [sp, #8]
 800bdec:	4b66      	ldr	r3, [pc, #408]	@ (800bf88 <get_gps_data+0x2b4>)
 800bdee:	9301      	str	r3, [sp, #4]
 800bdf0:	4b66      	ldr	r3, [pc, #408]	@ (800bf8c <get_gps_data+0x2b8>)
 800bdf2:	9300      	str	r3, [sp, #0]
 800bdf4:	4b66      	ldr	r3, [pc, #408]	@ (800bf90 <get_gps_data+0x2bc>)
 800bdf6:	4a67      	ldr	r2, [pc, #412]	@ (800bf94 <get_gps_data+0x2c0>)
 800bdf8:	4967      	ldr	r1, [pc, #412]	@ (800bf98 <get_gps_data+0x2c4>)
 800bdfa:	4857      	ldr	r0, [pc, #348]	@ (800bf58 <get_gps_data+0x284>)
 800bdfc:	f000 f9e6 	bl	800c1cc <siscanf>
               &(log_item.lat_dir), &(log_item.lon_int), &(log_item.lon_frac),
               &(log_item.lon_dir), &(log_item.altitude));

        // move the decimal point left 2 for coords
        log_item.lat_frac =
            ((log_item.lat_int % 100) * count_revifs(log_item.lat_frac)) +
 800be00:	4b64      	ldr	r3, [pc, #400]	@ (800bf94 <get_gps_data+0x2c0>)
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	4a65      	ldr	r2, [pc, #404]	@ (800bf9c <get_gps_data+0x2c8>)
 800be06:	fb82 1203 	smull	r1, r2, r2, r3
 800be0a:	1151      	asrs	r1, r2, #5
 800be0c:	17da      	asrs	r2, r3, #31
 800be0e:	1a8c      	subs	r4, r1, r2
 800be10:	2264      	movs	r2, #100	@ 0x64
 800be12:	fb04 f202 	mul.w	r2, r4, r2
 800be16:	1a9c      	subs	r4, r3, r2
 800be18:	4b5e      	ldr	r3, [pc, #376]	@ (800bf94 <get_gps_data+0x2c0>)
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7ff ff27 	bl	800bc70 <count_revifs>
 800be22:	4603      	mov	r3, r0
 800be24:	fb04 f303 	mul.w	r3, r4, r3
 800be28:	461a      	mov	r2, r3
            log_item.lat_frac;
 800be2a:	4b5a      	ldr	r3, [pc, #360]	@ (800bf94 <get_gps_data+0x2c0>)
 800be2c:	689b      	ldr	r3, [r3, #8]
            ((log_item.lat_int % 100) * count_revifs(log_item.lat_frac)) +
 800be2e:	4413      	add	r3, r2
        log_item.lat_frac =
 800be30:	4a58      	ldr	r2, [pc, #352]	@ (800bf94 <get_gps_data+0x2c0>)
 800be32:	6093      	str	r3, [r2, #8]
        log_item.lat_int = log_item.lat_int - (log_item.lat_int % 100);
 800be34:	4b57      	ldr	r3, [pc, #348]	@ (800bf94 <get_gps_data+0x2c0>)
 800be36:	6859      	ldr	r1, [r3, #4]
 800be38:	4b56      	ldr	r3, [pc, #344]	@ (800bf94 <get_gps_data+0x2c0>)
 800be3a:	685a      	ldr	r2, [r3, #4]
 800be3c:	4b57      	ldr	r3, [pc, #348]	@ (800bf9c <get_gps_data+0x2c8>)
 800be3e:	fb83 0302 	smull	r0, r3, r3, r2
 800be42:	1158      	asrs	r0, r3, #5
 800be44:	17d3      	asrs	r3, r2, #31
 800be46:	1ac3      	subs	r3, r0, r3
 800be48:	2064      	movs	r0, #100	@ 0x64
 800be4a:	fb00 f303 	mul.w	r3, r0, r3
 800be4e:	1ad3      	subs	r3, r2, r3
 800be50:	1acb      	subs	r3, r1, r3
 800be52:	4a50      	ldr	r2, [pc, #320]	@ (800bf94 <get_gps_data+0x2c0>)
 800be54:	6053      	str	r3, [r2, #4]

        log_item.lon_frac =
            ((log_item.lon_int % 100) * count_revifs(log_item.lon_frac)) +
 800be56:	4b4f      	ldr	r3, [pc, #316]	@ (800bf94 <get_gps_data+0x2c0>)
 800be58:	691b      	ldr	r3, [r3, #16]
 800be5a:	4a50      	ldr	r2, [pc, #320]	@ (800bf9c <get_gps_data+0x2c8>)
 800be5c:	fb82 1203 	smull	r1, r2, r2, r3
 800be60:	1151      	asrs	r1, r2, #5
 800be62:	17da      	asrs	r2, r3, #31
 800be64:	1a8c      	subs	r4, r1, r2
 800be66:	2264      	movs	r2, #100	@ 0x64
 800be68:	fb04 f202 	mul.w	r2, r4, r2
 800be6c:	1a9c      	subs	r4, r3, r2
 800be6e:	4b49      	ldr	r3, [pc, #292]	@ (800bf94 <get_gps_data+0x2c0>)
 800be70:	695b      	ldr	r3, [r3, #20]
 800be72:	4618      	mov	r0, r3
 800be74:	f7ff fefc 	bl	800bc70 <count_revifs>
 800be78:	4603      	mov	r3, r0
 800be7a:	fb04 f303 	mul.w	r3, r4, r3
 800be7e:	461a      	mov	r2, r3
            log_item.lon_frac;
 800be80:	4b44      	ldr	r3, [pc, #272]	@ (800bf94 <get_gps_data+0x2c0>)
 800be82:	695b      	ldr	r3, [r3, #20]
            ((log_item.lon_int % 100) * count_revifs(log_item.lon_frac)) +
 800be84:	4413      	add	r3, r2
        log_item.lon_frac =
 800be86:	4a43      	ldr	r2, [pc, #268]	@ (800bf94 <get_gps_data+0x2c0>)
 800be88:	6153      	str	r3, [r2, #20]
        log_item.lon_int = log_item.lon_int - (log_item.lon_int % 100);
 800be8a:	4b42      	ldr	r3, [pc, #264]	@ (800bf94 <get_gps_data+0x2c0>)
 800be8c:	6919      	ldr	r1, [r3, #16]
 800be8e:	4b41      	ldr	r3, [pc, #260]	@ (800bf94 <get_gps_data+0x2c0>)
 800be90:	691a      	ldr	r2, [r3, #16]
 800be92:	4b42      	ldr	r3, [pc, #264]	@ (800bf9c <get_gps_data+0x2c8>)
 800be94:	fb83 0302 	smull	r0, r3, r3, r2
 800be98:	1158      	asrs	r0, r3, #5
 800be9a:	17d3      	asrs	r3, r2, #31
 800be9c:	1ac3      	subs	r3, r0, r3
 800be9e:	2064      	movs	r0, #100	@ 0x64
 800bea0:	fb00 f303 	mul.w	r3, r0, r3
 800bea4:	1ad3      	subs	r3, r2, r3
 800bea6:	1acb      	subs	r3, r1, r3
 800bea8:	4a3a      	ldr	r2, [pc, #232]	@ (800bf94 <get_gps_data+0x2c0>)
 800beaa:	6113      	str	r3, [r2, #16]

        if (log_item.lat_dir == 'W')
 800beac:	4b39      	ldr	r3, [pc, #228]	@ (800bf94 <get_gps_data+0x2c0>)
 800beae:	7b1b      	ldrb	r3, [r3, #12]
 800beb0:	2b57      	cmp	r3, #87	@ 0x57
 800beb2:	d104      	bne.n	800bebe <get_gps_data+0x1ea>
          log_item.lat_int = log_item.lat_int * -1;
 800beb4:	4b37      	ldr	r3, [pc, #220]	@ (800bf94 <get_gps_data+0x2c0>)
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	425b      	negs	r3, r3
 800beba:	4a36      	ldr	r2, [pc, #216]	@ (800bf94 <get_gps_data+0x2c0>)
 800bebc:	6053      	str	r3, [r2, #4]

        if (log_item.lon_dir == 'S')
 800bebe:	4b35      	ldr	r3, [pc, #212]	@ (800bf94 <get_gps_data+0x2c0>)
 800bec0:	7e1b      	ldrb	r3, [r3, #24]
 800bec2:	2b53      	cmp	r3, #83	@ 0x53
 800bec4:	d13a      	bne.n	800bf3c <get_gps_data+0x268>
          log_item.lon_int = log_item.lon_int * -1;
 800bec6:	4b33      	ldr	r3, [pc, #204]	@ (800bf94 <get_gps_data+0x2c0>)
 800bec8:	691b      	ldr	r3, [r3, #16]
 800beca:	425b      	negs	r3, r3
 800becc:	4a31      	ldr	r2, [pc, #196]	@ (800bf94 <get_gps_data+0x2c0>)
 800bece:	6113      	str	r3, [r2, #16]

        break;
 800bed0:	e034      	b.n	800bf3c <get_gps_data+0x268>
      }

      if (strncmp((buf + 3), "RMC", 3) == 0) { // parse RMC message
 800bed2:	4b23      	ldr	r3, [pc, #140]	@ (800bf60 <get_gps_data+0x28c>)
 800bed4:	2203      	movs	r2, #3
 800bed6:	4932      	ldr	r1, [pc, #200]	@ (800bfa0 <get_gps_data+0x2cc>)
 800bed8:	4618      	mov	r0, r3
 800beda:	f000 fb05 	bl	800c4e8 <strncmp>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d11e      	bne.n	800bf22 <get_gps_data+0x24e>

        write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", buf, strlen(buf));
 800bee4:	481c      	ldr	r0, [pc, #112]	@ (800bf58 <get_gps_data+0x284>)
 800bee6:	f7f4 f953 	bl	8000190 <strlen>
 800beea:	4603      	mov	r3, r0
 800beec:	9301      	str	r3, [sp, #4]
 800beee:	4b1a      	ldr	r3, [pc, #104]	@ (800bf58 <get_gps_data+0x284>)
 800bef0:	9300      	str	r3, [sp, #0]
 800bef2:	4b1d      	ldr	r3, [pc, #116]	@ (800bf68 <get_gps_data+0x294>)
 800bef4:	4a1d      	ldr	r2, [pc, #116]	@ (800bf6c <get_gps_data+0x298>)
 800bef6:	491e      	ldr	r1, [pc, #120]	@ (800bf70 <get_gps_data+0x29c>)
 800bef8:	481e      	ldr	r0, [pc, #120]	@ (800bf74 <get_gps_data+0x2a0>)
 800befa:	f7f7 fe3b 	bl	8003b74 <write_buf_to_fs>

        sscanf(buf,
 800befe:	4b29      	ldr	r3, [pc, #164]	@ (800bfa4 <get_gps_data+0x2d0>)
 800bf00:	9305      	str	r3, [sp, #20]
 800bf02:	4b1e      	ldr	r3, [pc, #120]	@ (800bf7c <get_gps_data+0x2a8>)
 800bf04:	9304      	str	r3, [sp, #16]
 800bf06:	4b1e      	ldr	r3, [pc, #120]	@ (800bf80 <get_gps_data+0x2ac>)
 800bf08:	9303      	str	r3, [sp, #12]
 800bf0a:	4b1e      	ldr	r3, [pc, #120]	@ (800bf84 <get_gps_data+0x2b0>)
 800bf0c:	9302      	str	r3, [sp, #8]
 800bf0e:	4b1e      	ldr	r3, [pc, #120]	@ (800bf88 <get_gps_data+0x2b4>)
 800bf10:	9301      	str	r3, [sp, #4]
 800bf12:	4b1e      	ldr	r3, [pc, #120]	@ (800bf8c <get_gps_data+0x2b8>)
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	4b1e      	ldr	r3, [pc, #120]	@ (800bf90 <get_gps_data+0x2bc>)
 800bf18:	4a1e      	ldr	r2, [pc, #120]	@ (800bf94 <get_gps_data+0x2c0>)
 800bf1a:	4923      	ldr	r1, [pc, #140]	@ (800bfa8 <get_gps_data+0x2d4>)
 800bf1c:	480e      	ldr	r0, [pc, #56]	@ (800bf58 <get_gps_data+0x284>)
 800bf1e:	f000 f955 	bl	800c1cc <siscanf>
               &(log_item.lat_dir), &(log_item.lon_int), &(log_item.lon_frac),
               &(log_item.lon_dir), &(log_item.date));
      }
    }

    if (buf[i] != 0xFF)
 800bf22:	4b0c      	ldr	r3, [pc, #48]	@ (800bf54 <get_gps_data+0x280>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a0c      	ldr	r2, [pc, #48]	@ (800bf58 <get_gps_data+0x284>)
 800bf28:	5cd3      	ldrb	r3, [r2, r3]
 800bf2a:	2bff      	cmp	r3, #255	@ 0xff
 800bf2c:	f43f aee4 	beq.w	800bcf8 <get_gps_data+0x24>
      i++;
 800bf30:	4b08      	ldr	r3, [pc, #32]	@ (800bf54 <get_gps_data+0x280>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	3301      	adds	r3, #1
 800bf36:	4a07      	ldr	r2, [pc, #28]	@ (800bf54 <get_gps_data+0x280>)
 800bf38:	6013      	str	r3, [r2, #0]
  while (1) { // poll I2C bus until end of line is received
 800bf3a:	e6dd      	b.n	800bcf8 <get_gps_data+0x24>
        break;
 800bf3c:	bf00      	nop
  }

  return 0;
 800bf3e:	2300      	movs	r3, #0
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd90      	pop	{r4, r7, pc}
 800bf48:	40004400 	.word	0x40004400
 800bf4c:	80002400 	.word	0x80002400
 800bf50:	40005400 	.word	0x40005400
 800bf54:	200003bc 	.word	0x200003bc
 800bf58:	200003c0 	.word	0x200003c0
 800bf5c:	2000005c 	.word	0x2000005c
 800bf60:	200003c3 	.word	0x200003c3
 800bf64:	0800ec80 	.word	0x0800ec80
 800bf68:	0800ec74 	.word	0x0800ec74
 800bf6c:	20000278 	.word	0x20000278
 800bf70:	0800ed0c 	.word	0x0800ed0c
 800bf74:	200001a4 	.word	0x200001a4
 800bf78:	20000118 	.word	0x20000118
 800bf7c:	20000110 	.word	0x20000110
 800bf80:	2000010c 	.word	0x2000010c
 800bf84:	20000108 	.word	0x20000108
 800bf88:	20000104 	.word	0x20000104
 800bf8c:	20000100 	.word	0x20000100
 800bf90:	200000fc 	.word	0x200000fc
 800bf94:	200000f8 	.word	0x200000f8
 800bf98:	0800ec84 	.word	0x0800ec84
 800bf9c:	51eb851f 	.word	0x51eb851f
 800bfa0:	0800ecbc 	.word	0x0800ecbc
 800bfa4:	2000011c 	.word	0x2000011c
 800bfa8:	0800ecc0 	.word	0x0800ecc0

0800bfac <__assert_func>:
 800bfac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfae:	4614      	mov	r4, r2
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	4b09      	ldr	r3, [pc, #36]	@ (800bfd8 <__assert_func+0x2c>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4605      	mov	r5, r0
 800bfb8:	68d8      	ldr	r0, [r3, #12]
 800bfba:	b14c      	cbz	r4, 800bfd0 <__assert_func+0x24>
 800bfbc:	4b07      	ldr	r3, [pc, #28]	@ (800bfdc <__assert_func+0x30>)
 800bfbe:	9100      	str	r1, [sp, #0]
 800bfc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bfc4:	4906      	ldr	r1, [pc, #24]	@ (800bfe0 <__assert_func+0x34>)
 800bfc6:	462b      	mov	r3, r5
 800bfc8:	f000 fa16 	bl	800c3f8 <fiprintf>
 800bfcc:	f000 fb40 	bl	800c650 <abort>
 800bfd0:	4b04      	ldr	r3, [pc, #16]	@ (800bfe4 <__assert_func+0x38>)
 800bfd2:	461c      	mov	r4, r3
 800bfd4:	e7f3      	b.n	800bfbe <__assert_func+0x12>
 800bfd6:	bf00      	nop
 800bfd8:	2000006c 	.word	0x2000006c
 800bfdc:	0800ef20 	.word	0x0800ef20
 800bfe0:	0800ef2d 	.word	0x0800ef2d
 800bfe4:	0800ef5b 	.word	0x0800ef5b

0800bfe8 <exit>:
 800bfe8:	b508      	push	{r3, lr}
 800bfea:	4b06      	ldr	r3, [pc, #24]	@ (800c004 <exit+0x1c>)
 800bfec:	4604      	mov	r4, r0
 800bfee:	b113      	cbz	r3, 800bff6 <exit+0xe>
 800bff0:	2100      	movs	r1, #0
 800bff2:	f3af 8000 	nop.w
 800bff6:	4b04      	ldr	r3, [pc, #16]	@ (800c008 <exit+0x20>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	b103      	cbz	r3, 800bffe <exit+0x16>
 800bffc:	4798      	blx	r3
 800bffe:	4620      	mov	r0, r4
 800c000:	f7f5 f90f 	bl	8001222 <_exit>
 800c004:	00000000 	.word	0x00000000
 800c008:	20000564 	.word	0x20000564

0800c00c <malloc>:
 800c00c:	4b02      	ldr	r3, [pc, #8]	@ (800c018 <malloc+0xc>)
 800c00e:	4601      	mov	r1, r0
 800c010:	6818      	ldr	r0, [r3, #0]
 800c012:	f000 b82d 	b.w	800c070 <_malloc_r>
 800c016:	bf00      	nop
 800c018:	2000006c 	.word	0x2000006c

0800c01c <free>:
 800c01c:	4b02      	ldr	r3, [pc, #8]	@ (800c028 <free+0xc>)
 800c01e:	4601      	mov	r1, r0
 800c020:	6818      	ldr	r0, [r3, #0]
 800c022:	f000 bb1d 	b.w	800c660 <_free_r>
 800c026:	bf00      	nop
 800c028:	2000006c 	.word	0x2000006c

0800c02c <sbrk_aligned>:
 800c02c:	b570      	push	{r4, r5, r6, lr}
 800c02e:	4e0f      	ldr	r6, [pc, #60]	@ (800c06c <sbrk_aligned+0x40>)
 800c030:	460c      	mov	r4, r1
 800c032:	6831      	ldr	r1, [r6, #0]
 800c034:	4605      	mov	r5, r0
 800c036:	b911      	cbnz	r1, 800c03e <sbrk_aligned+0x12>
 800c038:	f000 fa9c 	bl	800c574 <_sbrk_r>
 800c03c:	6030      	str	r0, [r6, #0]
 800c03e:	4621      	mov	r1, r4
 800c040:	4628      	mov	r0, r5
 800c042:	f000 fa97 	bl	800c574 <_sbrk_r>
 800c046:	1c43      	adds	r3, r0, #1
 800c048:	d103      	bne.n	800c052 <sbrk_aligned+0x26>
 800c04a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c04e:	4620      	mov	r0, r4
 800c050:	bd70      	pop	{r4, r5, r6, pc}
 800c052:	1cc4      	adds	r4, r0, #3
 800c054:	f024 0403 	bic.w	r4, r4, #3
 800c058:	42a0      	cmp	r0, r4
 800c05a:	d0f8      	beq.n	800c04e <sbrk_aligned+0x22>
 800c05c:	1a21      	subs	r1, r4, r0
 800c05e:	4628      	mov	r0, r5
 800c060:	f000 fa88 	bl	800c574 <_sbrk_r>
 800c064:	3001      	adds	r0, #1
 800c066:	d1f2      	bne.n	800c04e <sbrk_aligned+0x22>
 800c068:	e7ef      	b.n	800c04a <sbrk_aligned+0x1e>
 800c06a:	bf00      	nop
 800c06c:	20000424 	.word	0x20000424

0800c070 <_malloc_r>:
 800c070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c074:	1ccd      	adds	r5, r1, #3
 800c076:	f025 0503 	bic.w	r5, r5, #3
 800c07a:	3508      	adds	r5, #8
 800c07c:	2d0c      	cmp	r5, #12
 800c07e:	bf38      	it	cc
 800c080:	250c      	movcc	r5, #12
 800c082:	2d00      	cmp	r5, #0
 800c084:	4606      	mov	r6, r0
 800c086:	db01      	blt.n	800c08c <_malloc_r+0x1c>
 800c088:	42a9      	cmp	r1, r5
 800c08a:	d904      	bls.n	800c096 <_malloc_r+0x26>
 800c08c:	230c      	movs	r3, #12
 800c08e:	6033      	str	r3, [r6, #0]
 800c090:	2000      	movs	r0, #0
 800c092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c096:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c16c <_malloc_r+0xfc>
 800c09a:	f000 f869 	bl	800c170 <__malloc_lock>
 800c09e:	f8d8 3000 	ldr.w	r3, [r8]
 800c0a2:	461c      	mov	r4, r3
 800c0a4:	bb44      	cbnz	r4, 800c0f8 <_malloc_r+0x88>
 800c0a6:	4629      	mov	r1, r5
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	f7ff ffbf 	bl	800c02c <sbrk_aligned>
 800c0ae:	1c43      	adds	r3, r0, #1
 800c0b0:	4604      	mov	r4, r0
 800c0b2:	d158      	bne.n	800c166 <_malloc_r+0xf6>
 800c0b4:	f8d8 4000 	ldr.w	r4, [r8]
 800c0b8:	4627      	mov	r7, r4
 800c0ba:	2f00      	cmp	r7, #0
 800c0bc:	d143      	bne.n	800c146 <_malloc_r+0xd6>
 800c0be:	2c00      	cmp	r4, #0
 800c0c0:	d04b      	beq.n	800c15a <_malloc_r+0xea>
 800c0c2:	6823      	ldr	r3, [r4, #0]
 800c0c4:	4639      	mov	r1, r7
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	eb04 0903 	add.w	r9, r4, r3
 800c0cc:	f000 fa52 	bl	800c574 <_sbrk_r>
 800c0d0:	4581      	cmp	r9, r0
 800c0d2:	d142      	bne.n	800c15a <_malloc_r+0xea>
 800c0d4:	6821      	ldr	r1, [r4, #0]
 800c0d6:	1a6d      	subs	r5, r5, r1
 800c0d8:	4629      	mov	r1, r5
 800c0da:	4630      	mov	r0, r6
 800c0dc:	f7ff ffa6 	bl	800c02c <sbrk_aligned>
 800c0e0:	3001      	adds	r0, #1
 800c0e2:	d03a      	beq.n	800c15a <_malloc_r+0xea>
 800c0e4:	6823      	ldr	r3, [r4, #0]
 800c0e6:	442b      	add	r3, r5
 800c0e8:	6023      	str	r3, [r4, #0]
 800c0ea:	f8d8 3000 	ldr.w	r3, [r8]
 800c0ee:	685a      	ldr	r2, [r3, #4]
 800c0f0:	bb62      	cbnz	r2, 800c14c <_malloc_r+0xdc>
 800c0f2:	f8c8 7000 	str.w	r7, [r8]
 800c0f6:	e00f      	b.n	800c118 <_malloc_r+0xa8>
 800c0f8:	6822      	ldr	r2, [r4, #0]
 800c0fa:	1b52      	subs	r2, r2, r5
 800c0fc:	d420      	bmi.n	800c140 <_malloc_r+0xd0>
 800c0fe:	2a0b      	cmp	r2, #11
 800c100:	d917      	bls.n	800c132 <_malloc_r+0xc2>
 800c102:	1961      	adds	r1, r4, r5
 800c104:	42a3      	cmp	r3, r4
 800c106:	6025      	str	r5, [r4, #0]
 800c108:	bf18      	it	ne
 800c10a:	6059      	strne	r1, [r3, #4]
 800c10c:	6863      	ldr	r3, [r4, #4]
 800c10e:	bf08      	it	eq
 800c110:	f8c8 1000 	streq.w	r1, [r8]
 800c114:	5162      	str	r2, [r4, r5]
 800c116:	604b      	str	r3, [r1, #4]
 800c118:	4630      	mov	r0, r6
 800c11a:	f000 f82f 	bl	800c17c <__malloc_unlock>
 800c11e:	f104 000b 	add.w	r0, r4, #11
 800c122:	1d23      	adds	r3, r4, #4
 800c124:	f020 0007 	bic.w	r0, r0, #7
 800c128:	1ac2      	subs	r2, r0, r3
 800c12a:	bf1c      	itt	ne
 800c12c:	1a1b      	subne	r3, r3, r0
 800c12e:	50a3      	strne	r3, [r4, r2]
 800c130:	e7af      	b.n	800c092 <_malloc_r+0x22>
 800c132:	6862      	ldr	r2, [r4, #4]
 800c134:	42a3      	cmp	r3, r4
 800c136:	bf0c      	ite	eq
 800c138:	f8c8 2000 	streq.w	r2, [r8]
 800c13c:	605a      	strne	r2, [r3, #4]
 800c13e:	e7eb      	b.n	800c118 <_malloc_r+0xa8>
 800c140:	4623      	mov	r3, r4
 800c142:	6864      	ldr	r4, [r4, #4]
 800c144:	e7ae      	b.n	800c0a4 <_malloc_r+0x34>
 800c146:	463c      	mov	r4, r7
 800c148:	687f      	ldr	r7, [r7, #4]
 800c14a:	e7b6      	b.n	800c0ba <_malloc_r+0x4a>
 800c14c:	461a      	mov	r2, r3
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	42a3      	cmp	r3, r4
 800c152:	d1fb      	bne.n	800c14c <_malloc_r+0xdc>
 800c154:	2300      	movs	r3, #0
 800c156:	6053      	str	r3, [r2, #4]
 800c158:	e7de      	b.n	800c118 <_malloc_r+0xa8>
 800c15a:	230c      	movs	r3, #12
 800c15c:	6033      	str	r3, [r6, #0]
 800c15e:	4630      	mov	r0, r6
 800c160:	f000 f80c 	bl	800c17c <__malloc_unlock>
 800c164:	e794      	b.n	800c090 <_malloc_r+0x20>
 800c166:	6005      	str	r5, [r0, #0]
 800c168:	e7d6      	b.n	800c118 <_malloc_r+0xa8>
 800c16a:	bf00      	nop
 800c16c:	20000428 	.word	0x20000428

0800c170 <__malloc_lock>:
 800c170:	4801      	ldr	r0, [pc, #4]	@ (800c178 <__malloc_lock+0x8>)
 800c172:	f000 ba4c 	b.w	800c60e <__retarget_lock_acquire_recursive>
 800c176:	bf00      	nop
 800c178:	20000568 	.word	0x20000568

0800c17c <__malloc_unlock>:
 800c17c:	4801      	ldr	r0, [pc, #4]	@ (800c184 <__malloc_unlock+0x8>)
 800c17e:	f000 ba47 	b.w	800c610 <__retarget_lock_release_recursive>
 800c182:	bf00      	nop
 800c184:	20000568 	.word	0x20000568

0800c188 <siprintf>:
 800c188:	b40e      	push	{r1, r2, r3}
 800c18a:	b510      	push	{r4, lr}
 800c18c:	b09d      	sub	sp, #116	@ 0x74
 800c18e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c190:	9002      	str	r0, [sp, #8]
 800c192:	9006      	str	r0, [sp, #24]
 800c194:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c198:	480a      	ldr	r0, [pc, #40]	@ (800c1c4 <siprintf+0x3c>)
 800c19a:	9107      	str	r1, [sp, #28]
 800c19c:	9104      	str	r1, [sp, #16]
 800c19e:	490a      	ldr	r1, [pc, #40]	@ (800c1c8 <siprintf+0x40>)
 800c1a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1a4:	9105      	str	r1, [sp, #20]
 800c1a6:	2400      	movs	r4, #0
 800c1a8:	a902      	add	r1, sp, #8
 800c1aa:	6800      	ldr	r0, [r0, #0]
 800c1ac:	9301      	str	r3, [sp, #4]
 800c1ae:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c1b0:	f000 fafc 	bl	800c7ac <_svfiprintf_r>
 800c1b4:	9b02      	ldr	r3, [sp, #8]
 800c1b6:	701c      	strb	r4, [r3, #0]
 800c1b8:	b01d      	add	sp, #116	@ 0x74
 800c1ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1be:	b003      	add	sp, #12
 800c1c0:	4770      	bx	lr
 800c1c2:	bf00      	nop
 800c1c4:	2000006c 	.word	0x2000006c
 800c1c8:	ffff0208 	.word	0xffff0208

0800c1cc <siscanf>:
 800c1cc:	b40e      	push	{r1, r2, r3}
 800c1ce:	b570      	push	{r4, r5, r6, lr}
 800c1d0:	b09d      	sub	sp, #116	@ 0x74
 800c1d2:	ac21      	add	r4, sp, #132	@ 0x84
 800c1d4:	2500      	movs	r5, #0
 800c1d6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800c1da:	f854 6b04 	ldr.w	r6, [r4], #4
 800c1de:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c1e2:	951b      	str	r5, [sp, #108]	@ 0x6c
 800c1e4:	9002      	str	r0, [sp, #8]
 800c1e6:	9006      	str	r0, [sp, #24]
 800c1e8:	f7f3 ffd2 	bl	8000190 <strlen>
 800c1ec:	4b0b      	ldr	r3, [pc, #44]	@ (800c21c <siscanf+0x50>)
 800c1ee:	9003      	str	r0, [sp, #12]
 800c1f0:	9007      	str	r0, [sp, #28]
 800c1f2:	480b      	ldr	r0, [pc, #44]	@ (800c220 <siscanf+0x54>)
 800c1f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c1fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c1fe:	4632      	mov	r2, r6
 800c200:	4623      	mov	r3, r4
 800c202:	a902      	add	r1, sp, #8
 800c204:	6800      	ldr	r0, [r0, #0]
 800c206:	950f      	str	r5, [sp, #60]	@ 0x3c
 800c208:	9514      	str	r5, [sp, #80]	@ 0x50
 800c20a:	9401      	str	r4, [sp, #4]
 800c20c:	f000 fc24 	bl	800ca58 <__ssvfiscanf_r>
 800c210:	b01d      	add	sp, #116	@ 0x74
 800c212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c216:	b003      	add	sp, #12
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	0800c247 	.word	0x0800c247
 800c220:	2000006c 	.word	0x2000006c

0800c224 <__sread>:
 800c224:	b510      	push	{r4, lr}
 800c226:	460c      	mov	r4, r1
 800c228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c22c:	f000 f990 	bl	800c550 <_read_r>
 800c230:	2800      	cmp	r0, #0
 800c232:	bfab      	itete	ge
 800c234:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c236:	89a3      	ldrhlt	r3, [r4, #12]
 800c238:	181b      	addge	r3, r3, r0
 800c23a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c23e:	bfac      	ite	ge
 800c240:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c242:	81a3      	strhlt	r3, [r4, #12]
 800c244:	bd10      	pop	{r4, pc}

0800c246 <__seofread>:
 800c246:	2000      	movs	r0, #0
 800c248:	4770      	bx	lr

0800c24a <__swrite>:
 800c24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c24e:	461f      	mov	r7, r3
 800c250:	898b      	ldrh	r3, [r1, #12]
 800c252:	05db      	lsls	r3, r3, #23
 800c254:	4605      	mov	r5, r0
 800c256:	460c      	mov	r4, r1
 800c258:	4616      	mov	r6, r2
 800c25a:	d505      	bpl.n	800c268 <__swrite+0x1e>
 800c25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c260:	2302      	movs	r3, #2
 800c262:	2200      	movs	r2, #0
 800c264:	f000 f962 	bl	800c52c <_lseek_r>
 800c268:	89a3      	ldrh	r3, [r4, #12]
 800c26a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c26e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c272:	81a3      	strh	r3, [r4, #12]
 800c274:	4632      	mov	r2, r6
 800c276:	463b      	mov	r3, r7
 800c278:	4628      	mov	r0, r5
 800c27a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c27e:	f000 b989 	b.w	800c594 <_write_r>

0800c282 <__sseek>:
 800c282:	b510      	push	{r4, lr}
 800c284:	460c      	mov	r4, r1
 800c286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c28a:	f000 f94f 	bl	800c52c <_lseek_r>
 800c28e:	1c43      	adds	r3, r0, #1
 800c290:	89a3      	ldrh	r3, [r4, #12]
 800c292:	bf15      	itete	ne
 800c294:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c296:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c29a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c29e:	81a3      	strheq	r3, [r4, #12]
 800c2a0:	bf18      	it	ne
 800c2a2:	81a3      	strhne	r3, [r4, #12]
 800c2a4:	bd10      	pop	{r4, pc}

0800c2a6 <__sclose>:
 800c2a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2aa:	f000 b9b3 	b.w	800c614 <_close_r>
	...

0800c2b0 <std>:
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	b510      	push	{r4, lr}
 800c2b4:	4604      	mov	r4, r0
 800c2b6:	e9c0 3300 	strd	r3, r3, [r0]
 800c2ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2be:	6083      	str	r3, [r0, #8]
 800c2c0:	8181      	strh	r1, [r0, #12]
 800c2c2:	6643      	str	r3, [r0, #100]	@ 0x64
 800c2c4:	81c2      	strh	r2, [r0, #14]
 800c2c6:	6183      	str	r3, [r0, #24]
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	2208      	movs	r2, #8
 800c2cc:	305c      	adds	r0, #92	@ 0x5c
 800c2ce:	f000 f8e5 	bl	800c49c <memset>
 800c2d2:	4b0d      	ldr	r3, [pc, #52]	@ (800c308 <std+0x58>)
 800c2d4:	6263      	str	r3, [r4, #36]	@ 0x24
 800c2d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c30c <std+0x5c>)
 800c2d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c2da:	4b0d      	ldr	r3, [pc, #52]	@ (800c310 <std+0x60>)
 800c2dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c2de:	4b0d      	ldr	r3, [pc, #52]	@ (800c314 <std+0x64>)
 800c2e0:	6323      	str	r3, [r4, #48]	@ 0x30
 800c2e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c318 <std+0x68>)
 800c2e4:	6224      	str	r4, [r4, #32]
 800c2e6:	429c      	cmp	r4, r3
 800c2e8:	d006      	beq.n	800c2f8 <std+0x48>
 800c2ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c2ee:	4294      	cmp	r4, r2
 800c2f0:	d002      	beq.n	800c2f8 <std+0x48>
 800c2f2:	33d0      	adds	r3, #208	@ 0xd0
 800c2f4:	429c      	cmp	r4, r3
 800c2f6:	d105      	bne.n	800c304 <std+0x54>
 800c2f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c300:	f000 b984 	b.w	800c60c <__retarget_lock_init_recursive>
 800c304:	bd10      	pop	{r4, pc}
 800c306:	bf00      	nop
 800c308:	0800c225 	.word	0x0800c225
 800c30c:	0800c24b 	.word	0x0800c24b
 800c310:	0800c283 	.word	0x0800c283
 800c314:	0800c2a7 	.word	0x0800c2a7
 800c318:	2000042c 	.word	0x2000042c

0800c31c <stdio_exit_handler>:
 800c31c:	4a02      	ldr	r2, [pc, #8]	@ (800c328 <stdio_exit_handler+0xc>)
 800c31e:	4903      	ldr	r1, [pc, #12]	@ (800c32c <stdio_exit_handler+0x10>)
 800c320:	4803      	ldr	r0, [pc, #12]	@ (800c330 <stdio_exit_handler+0x14>)
 800c322:	f000 b87b 	b.w	800c41c <_fwalk_sglue>
 800c326:	bf00      	nop
 800c328:	20000060 	.word	0x20000060
 800c32c:	0800d6f9 	.word	0x0800d6f9
 800c330:	20000070 	.word	0x20000070

0800c334 <cleanup_stdio>:
 800c334:	6841      	ldr	r1, [r0, #4]
 800c336:	4b0c      	ldr	r3, [pc, #48]	@ (800c368 <cleanup_stdio+0x34>)
 800c338:	4299      	cmp	r1, r3
 800c33a:	b510      	push	{r4, lr}
 800c33c:	4604      	mov	r4, r0
 800c33e:	d001      	beq.n	800c344 <cleanup_stdio+0x10>
 800c340:	f001 f9da 	bl	800d6f8 <_fflush_r>
 800c344:	68a1      	ldr	r1, [r4, #8]
 800c346:	4b09      	ldr	r3, [pc, #36]	@ (800c36c <cleanup_stdio+0x38>)
 800c348:	4299      	cmp	r1, r3
 800c34a:	d002      	beq.n	800c352 <cleanup_stdio+0x1e>
 800c34c:	4620      	mov	r0, r4
 800c34e:	f001 f9d3 	bl	800d6f8 <_fflush_r>
 800c352:	68e1      	ldr	r1, [r4, #12]
 800c354:	4b06      	ldr	r3, [pc, #24]	@ (800c370 <cleanup_stdio+0x3c>)
 800c356:	4299      	cmp	r1, r3
 800c358:	d004      	beq.n	800c364 <cleanup_stdio+0x30>
 800c35a:	4620      	mov	r0, r4
 800c35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c360:	f001 b9ca 	b.w	800d6f8 <_fflush_r>
 800c364:	bd10      	pop	{r4, pc}
 800c366:	bf00      	nop
 800c368:	2000042c 	.word	0x2000042c
 800c36c:	20000494 	.word	0x20000494
 800c370:	200004fc 	.word	0x200004fc

0800c374 <global_stdio_init.part.0>:
 800c374:	b510      	push	{r4, lr}
 800c376:	4b0b      	ldr	r3, [pc, #44]	@ (800c3a4 <global_stdio_init.part.0+0x30>)
 800c378:	4c0b      	ldr	r4, [pc, #44]	@ (800c3a8 <global_stdio_init.part.0+0x34>)
 800c37a:	4a0c      	ldr	r2, [pc, #48]	@ (800c3ac <global_stdio_init.part.0+0x38>)
 800c37c:	601a      	str	r2, [r3, #0]
 800c37e:	4620      	mov	r0, r4
 800c380:	2200      	movs	r2, #0
 800c382:	2104      	movs	r1, #4
 800c384:	f7ff ff94 	bl	800c2b0 <std>
 800c388:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c38c:	2201      	movs	r2, #1
 800c38e:	2109      	movs	r1, #9
 800c390:	f7ff ff8e 	bl	800c2b0 <std>
 800c394:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c398:	2202      	movs	r2, #2
 800c39a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c39e:	2112      	movs	r1, #18
 800c3a0:	f7ff bf86 	b.w	800c2b0 <std>
 800c3a4:	20000564 	.word	0x20000564
 800c3a8:	2000042c 	.word	0x2000042c
 800c3ac:	0800c31d 	.word	0x0800c31d

0800c3b0 <__sfp_lock_acquire>:
 800c3b0:	4801      	ldr	r0, [pc, #4]	@ (800c3b8 <__sfp_lock_acquire+0x8>)
 800c3b2:	f000 b92c 	b.w	800c60e <__retarget_lock_acquire_recursive>
 800c3b6:	bf00      	nop
 800c3b8:	20000569 	.word	0x20000569

0800c3bc <__sfp_lock_release>:
 800c3bc:	4801      	ldr	r0, [pc, #4]	@ (800c3c4 <__sfp_lock_release+0x8>)
 800c3be:	f000 b927 	b.w	800c610 <__retarget_lock_release_recursive>
 800c3c2:	bf00      	nop
 800c3c4:	20000569 	.word	0x20000569

0800c3c8 <__sinit>:
 800c3c8:	b510      	push	{r4, lr}
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	f7ff fff0 	bl	800c3b0 <__sfp_lock_acquire>
 800c3d0:	6a23      	ldr	r3, [r4, #32]
 800c3d2:	b11b      	cbz	r3, 800c3dc <__sinit+0x14>
 800c3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3d8:	f7ff bff0 	b.w	800c3bc <__sfp_lock_release>
 800c3dc:	4b04      	ldr	r3, [pc, #16]	@ (800c3f0 <__sinit+0x28>)
 800c3de:	6223      	str	r3, [r4, #32]
 800c3e0:	4b04      	ldr	r3, [pc, #16]	@ (800c3f4 <__sinit+0x2c>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d1f5      	bne.n	800c3d4 <__sinit+0xc>
 800c3e8:	f7ff ffc4 	bl	800c374 <global_stdio_init.part.0>
 800c3ec:	e7f2      	b.n	800c3d4 <__sinit+0xc>
 800c3ee:	bf00      	nop
 800c3f0:	0800c335 	.word	0x0800c335
 800c3f4:	20000564 	.word	0x20000564

0800c3f8 <fiprintf>:
 800c3f8:	b40e      	push	{r1, r2, r3}
 800c3fa:	b503      	push	{r0, r1, lr}
 800c3fc:	4601      	mov	r1, r0
 800c3fe:	ab03      	add	r3, sp, #12
 800c400:	4805      	ldr	r0, [pc, #20]	@ (800c418 <fiprintf+0x20>)
 800c402:	f853 2b04 	ldr.w	r2, [r3], #4
 800c406:	6800      	ldr	r0, [r0, #0]
 800c408:	9301      	str	r3, [sp, #4]
 800c40a:	f000 fcc5 	bl	800cd98 <_vfiprintf_r>
 800c40e:	b002      	add	sp, #8
 800c410:	f85d eb04 	ldr.w	lr, [sp], #4
 800c414:	b003      	add	sp, #12
 800c416:	4770      	bx	lr
 800c418:	2000006c 	.word	0x2000006c

0800c41c <_fwalk_sglue>:
 800c41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c420:	4607      	mov	r7, r0
 800c422:	4688      	mov	r8, r1
 800c424:	4614      	mov	r4, r2
 800c426:	2600      	movs	r6, #0
 800c428:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c42c:	f1b9 0901 	subs.w	r9, r9, #1
 800c430:	d505      	bpl.n	800c43e <_fwalk_sglue+0x22>
 800c432:	6824      	ldr	r4, [r4, #0]
 800c434:	2c00      	cmp	r4, #0
 800c436:	d1f7      	bne.n	800c428 <_fwalk_sglue+0xc>
 800c438:	4630      	mov	r0, r6
 800c43a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c43e:	89ab      	ldrh	r3, [r5, #12]
 800c440:	2b01      	cmp	r3, #1
 800c442:	d907      	bls.n	800c454 <_fwalk_sglue+0x38>
 800c444:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c448:	3301      	adds	r3, #1
 800c44a:	d003      	beq.n	800c454 <_fwalk_sglue+0x38>
 800c44c:	4629      	mov	r1, r5
 800c44e:	4638      	mov	r0, r7
 800c450:	47c0      	blx	r8
 800c452:	4306      	orrs	r6, r0
 800c454:	3568      	adds	r5, #104	@ 0x68
 800c456:	e7e9      	b.n	800c42c <_fwalk_sglue+0x10>

0800c458 <iprintf>:
 800c458:	b40f      	push	{r0, r1, r2, r3}
 800c45a:	b507      	push	{r0, r1, r2, lr}
 800c45c:	4906      	ldr	r1, [pc, #24]	@ (800c478 <iprintf+0x20>)
 800c45e:	ab04      	add	r3, sp, #16
 800c460:	6808      	ldr	r0, [r1, #0]
 800c462:	f853 2b04 	ldr.w	r2, [r3], #4
 800c466:	6881      	ldr	r1, [r0, #8]
 800c468:	9301      	str	r3, [sp, #4]
 800c46a:	f000 fc95 	bl	800cd98 <_vfiprintf_r>
 800c46e:	b003      	add	sp, #12
 800c470:	f85d eb04 	ldr.w	lr, [sp], #4
 800c474:	b004      	add	sp, #16
 800c476:	4770      	bx	lr
 800c478:	2000006c 	.word	0x2000006c

0800c47c <memcmp>:
 800c47c:	b510      	push	{r4, lr}
 800c47e:	3901      	subs	r1, #1
 800c480:	4402      	add	r2, r0
 800c482:	4290      	cmp	r0, r2
 800c484:	d101      	bne.n	800c48a <memcmp+0xe>
 800c486:	2000      	movs	r0, #0
 800c488:	e005      	b.n	800c496 <memcmp+0x1a>
 800c48a:	7803      	ldrb	r3, [r0, #0]
 800c48c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c490:	42a3      	cmp	r3, r4
 800c492:	d001      	beq.n	800c498 <memcmp+0x1c>
 800c494:	1b18      	subs	r0, r3, r4
 800c496:	bd10      	pop	{r4, pc}
 800c498:	3001      	adds	r0, #1
 800c49a:	e7f2      	b.n	800c482 <memcmp+0x6>

0800c49c <memset>:
 800c49c:	4402      	add	r2, r0
 800c49e:	4603      	mov	r3, r0
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d100      	bne.n	800c4a6 <memset+0xa>
 800c4a4:	4770      	bx	lr
 800c4a6:	f803 1b01 	strb.w	r1, [r3], #1
 800c4aa:	e7f9      	b.n	800c4a0 <memset+0x4>

0800c4ac <strchr>:
 800c4ac:	b2c9      	uxtb	r1, r1
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4b6:	b112      	cbz	r2, 800c4be <strchr+0x12>
 800c4b8:	428a      	cmp	r2, r1
 800c4ba:	d1f9      	bne.n	800c4b0 <strchr+0x4>
 800c4bc:	4770      	bx	lr
 800c4be:	2900      	cmp	r1, #0
 800c4c0:	bf18      	it	ne
 800c4c2:	2000      	movne	r0, #0
 800c4c4:	4770      	bx	lr

0800c4c6 <strcspn>:
 800c4c6:	b570      	push	{r4, r5, r6, lr}
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	461e      	mov	r6, r3
 800c4cc:	f813 4b01 	ldrb.w	r4, [r3], #1
 800c4d0:	b144      	cbz	r4, 800c4e4 <strcspn+0x1e>
 800c4d2:	1e4a      	subs	r2, r1, #1
 800c4d4:	e001      	b.n	800c4da <strcspn+0x14>
 800c4d6:	42a5      	cmp	r5, r4
 800c4d8:	d004      	beq.n	800c4e4 <strcspn+0x1e>
 800c4da:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800c4de:	2d00      	cmp	r5, #0
 800c4e0:	d1f9      	bne.n	800c4d6 <strcspn+0x10>
 800c4e2:	e7f2      	b.n	800c4ca <strcspn+0x4>
 800c4e4:	1a30      	subs	r0, r6, r0
 800c4e6:	bd70      	pop	{r4, r5, r6, pc}

0800c4e8 <strncmp>:
 800c4e8:	b510      	push	{r4, lr}
 800c4ea:	b16a      	cbz	r2, 800c508 <strncmp+0x20>
 800c4ec:	3901      	subs	r1, #1
 800c4ee:	1884      	adds	r4, r0, r2
 800c4f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d103      	bne.n	800c504 <strncmp+0x1c>
 800c4fc:	42a0      	cmp	r0, r4
 800c4fe:	d001      	beq.n	800c504 <strncmp+0x1c>
 800c500:	2a00      	cmp	r2, #0
 800c502:	d1f5      	bne.n	800c4f0 <strncmp+0x8>
 800c504:	1ad0      	subs	r0, r2, r3
 800c506:	bd10      	pop	{r4, pc}
 800c508:	4610      	mov	r0, r2
 800c50a:	e7fc      	b.n	800c506 <strncmp+0x1e>

0800c50c <strspn>:
 800c50c:	b570      	push	{r4, r5, r6, lr}
 800c50e:	4603      	mov	r3, r0
 800c510:	461e      	mov	r6, r3
 800c512:	f813 4b01 	ldrb.w	r4, [r3], #1
 800c516:	b13c      	cbz	r4, 800c528 <strspn+0x1c>
 800c518:	1e4a      	subs	r2, r1, #1
 800c51a:	e001      	b.n	800c520 <strspn+0x14>
 800c51c:	42a5      	cmp	r5, r4
 800c51e:	d0f7      	beq.n	800c510 <strspn+0x4>
 800c520:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800c524:	2d00      	cmp	r5, #0
 800c526:	d1f9      	bne.n	800c51c <strspn+0x10>
 800c528:	1a30      	subs	r0, r6, r0
 800c52a:	bd70      	pop	{r4, r5, r6, pc}

0800c52c <_lseek_r>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4d07      	ldr	r5, [pc, #28]	@ (800c54c <_lseek_r+0x20>)
 800c530:	4604      	mov	r4, r0
 800c532:	4608      	mov	r0, r1
 800c534:	4611      	mov	r1, r2
 800c536:	2200      	movs	r2, #0
 800c538:	602a      	str	r2, [r5, #0]
 800c53a:	461a      	mov	r2, r3
 800c53c:	f7f4 fedc 	bl	80012f8 <_lseek>
 800c540:	1c43      	adds	r3, r0, #1
 800c542:	d102      	bne.n	800c54a <_lseek_r+0x1e>
 800c544:	682b      	ldr	r3, [r5, #0]
 800c546:	b103      	cbz	r3, 800c54a <_lseek_r+0x1e>
 800c548:	6023      	str	r3, [r4, #0]
 800c54a:	bd38      	pop	{r3, r4, r5, pc}
 800c54c:	2000056c 	.word	0x2000056c

0800c550 <_read_r>:
 800c550:	b538      	push	{r3, r4, r5, lr}
 800c552:	4d07      	ldr	r5, [pc, #28]	@ (800c570 <_read_r+0x20>)
 800c554:	4604      	mov	r4, r0
 800c556:	4608      	mov	r0, r1
 800c558:	4611      	mov	r1, r2
 800c55a:	2200      	movs	r2, #0
 800c55c:	602a      	str	r2, [r5, #0]
 800c55e:	461a      	mov	r2, r3
 800c560:	f7f4 fe6a 	bl	8001238 <_read>
 800c564:	1c43      	adds	r3, r0, #1
 800c566:	d102      	bne.n	800c56e <_read_r+0x1e>
 800c568:	682b      	ldr	r3, [r5, #0]
 800c56a:	b103      	cbz	r3, 800c56e <_read_r+0x1e>
 800c56c:	6023      	str	r3, [r4, #0]
 800c56e:	bd38      	pop	{r3, r4, r5, pc}
 800c570:	2000056c 	.word	0x2000056c

0800c574 <_sbrk_r>:
 800c574:	b538      	push	{r3, r4, r5, lr}
 800c576:	4d06      	ldr	r5, [pc, #24]	@ (800c590 <_sbrk_r+0x1c>)
 800c578:	2300      	movs	r3, #0
 800c57a:	4604      	mov	r4, r0
 800c57c:	4608      	mov	r0, r1
 800c57e:	602b      	str	r3, [r5, #0]
 800c580:	f7f4 fec8 	bl	8001314 <_sbrk>
 800c584:	1c43      	adds	r3, r0, #1
 800c586:	d102      	bne.n	800c58e <_sbrk_r+0x1a>
 800c588:	682b      	ldr	r3, [r5, #0]
 800c58a:	b103      	cbz	r3, 800c58e <_sbrk_r+0x1a>
 800c58c:	6023      	str	r3, [r4, #0]
 800c58e:	bd38      	pop	{r3, r4, r5, pc}
 800c590:	2000056c 	.word	0x2000056c

0800c594 <_write_r>:
 800c594:	b538      	push	{r3, r4, r5, lr}
 800c596:	4d07      	ldr	r5, [pc, #28]	@ (800c5b4 <_write_r+0x20>)
 800c598:	4604      	mov	r4, r0
 800c59a:	4608      	mov	r0, r1
 800c59c:	4611      	mov	r1, r2
 800c59e:	2200      	movs	r2, #0
 800c5a0:	602a      	str	r2, [r5, #0]
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	f7f4 fe65 	bl	8001272 <_write>
 800c5a8:	1c43      	adds	r3, r0, #1
 800c5aa:	d102      	bne.n	800c5b2 <_write_r+0x1e>
 800c5ac:	682b      	ldr	r3, [r5, #0]
 800c5ae:	b103      	cbz	r3, 800c5b2 <_write_r+0x1e>
 800c5b0:	6023      	str	r3, [r4, #0]
 800c5b2:	bd38      	pop	{r3, r4, r5, pc}
 800c5b4:	2000056c 	.word	0x2000056c

0800c5b8 <__errno>:
 800c5b8:	4b01      	ldr	r3, [pc, #4]	@ (800c5c0 <__errno+0x8>)
 800c5ba:	6818      	ldr	r0, [r3, #0]
 800c5bc:	4770      	bx	lr
 800c5be:	bf00      	nop
 800c5c0:	2000006c 	.word	0x2000006c

0800c5c4 <__libc_init_array>:
 800c5c4:	b570      	push	{r4, r5, r6, lr}
 800c5c6:	4d0d      	ldr	r5, [pc, #52]	@ (800c5fc <__libc_init_array+0x38>)
 800c5c8:	4c0d      	ldr	r4, [pc, #52]	@ (800c600 <__libc_init_array+0x3c>)
 800c5ca:	1b64      	subs	r4, r4, r5
 800c5cc:	10a4      	asrs	r4, r4, #2
 800c5ce:	2600      	movs	r6, #0
 800c5d0:	42a6      	cmp	r6, r4
 800c5d2:	d109      	bne.n	800c5e8 <__libc_init_array+0x24>
 800c5d4:	4d0b      	ldr	r5, [pc, #44]	@ (800c604 <__libc_init_array+0x40>)
 800c5d6:	4c0c      	ldr	r4, [pc, #48]	@ (800c608 <__libc_init_array+0x44>)
 800c5d8:	f001 fb9c 	bl	800dd14 <_init>
 800c5dc:	1b64      	subs	r4, r4, r5
 800c5de:	10a4      	asrs	r4, r4, #2
 800c5e0:	2600      	movs	r6, #0
 800c5e2:	42a6      	cmp	r6, r4
 800c5e4:	d105      	bne.n	800c5f2 <__libc_init_array+0x2e>
 800c5e6:	bd70      	pop	{r4, r5, r6, pc}
 800c5e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5ec:	4798      	blx	r3
 800c5ee:	3601      	adds	r6, #1
 800c5f0:	e7ee      	b.n	800c5d0 <__libc_init_array+0xc>
 800c5f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5f6:	4798      	blx	r3
 800c5f8:	3601      	adds	r6, #1
 800c5fa:	e7f2      	b.n	800c5e2 <__libc_init_array+0x1e>
 800c5fc:	0800f0b4 	.word	0x0800f0b4
 800c600:	0800f0b4 	.word	0x0800f0b4
 800c604:	0800f0b4 	.word	0x0800f0b4
 800c608:	0800f0b8 	.word	0x0800f0b8

0800c60c <__retarget_lock_init_recursive>:
 800c60c:	4770      	bx	lr

0800c60e <__retarget_lock_acquire_recursive>:
 800c60e:	4770      	bx	lr

0800c610 <__retarget_lock_release_recursive>:
 800c610:	4770      	bx	lr
	...

0800c614 <_close_r>:
 800c614:	b538      	push	{r3, r4, r5, lr}
 800c616:	4d06      	ldr	r5, [pc, #24]	@ (800c630 <_close_r+0x1c>)
 800c618:	2300      	movs	r3, #0
 800c61a:	4604      	mov	r4, r0
 800c61c:	4608      	mov	r0, r1
 800c61e:	602b      	str	r3, [r5, #0]
 800c620:	f7f4 fe43 	bl	80012aa <_close>
 800c624:	1c43      	adds	r3, r0, #1
 800c626:	d102      	bne.n	800c62e <_close_r+0x1a>
 800c628:	682b      	ldr	r3, [r5, #0]
 800c62a:	b103      	cbz	r3, 800c62e <_close_r+0x1a>
 800c62c:	6023      	str	r3, [r4, #0]
 800c62e:	bd38      	pop	{r3, r4, r5, pc}
 800c630:	2000056c 	.word	0x2000056c

0800c634 <memcpy>:
 800c634:	440a      	add	r2, r1
 800c636:	4291      	cmp	r1, r2
 800c638:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c63c:	d100      	bne.n	800c640 <memcpy+0xc>
 800c63e:	4770      	bx	lr
 800c640:	b510      	push	{r4, lr}
 800c642:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c64a:	4291      	cmp	r1, r2
 800c64c:	d1f9      	bne.n	800c642 <memcpy+0xe>
 800c64e:	bd10      	pop	{r4, pc}

0800c650 <abort>:
 800c650:	b508      	push	{r3, lr}
 800c652:	2006      	movs	r0, #6
 800c654:	f001 fb04 	bl	800dc60 <raise>
 800c658:	2001      	movs	r0, #1
 800c65a:	f7f4 fde2 	bl	8001222 <_exit>
	...

0800c660 <_free_r>:
 800c660:	b538      	push	{r3, r4, r5, lr}
 800c662:	4605      	mov	r5, r0
 800c664:	2900      	cmp	r1, #0
 800c666:	d041      	beq.n	800c6ec <_free_r+0x8c>
 800c668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c66c:	1f0c      	subs	r4, r1, #4
 800c66e:	2b00      	cmp	r3, #0
 800c670:	bfb8      	it	lt
 800c672:	18e4      	addlt	r4, r4, r3
 800c674:	f7ff fd7c 	bl	800c170 <__malloc_lock>
 800c678:	4a1d      	ldr	r2, [pc, #116]	@ (800c6f0 <_free_r+0x90>)
 800c67a:	6813      	ldr	r3, [r2, #0]
 800c67c:	b933      	cbnz	r3, 800c68c <_free_r+0x2c>
 800c67e:	6063      	str	r3, [r4, #4]
 800c680:	6014      	str	r4, [r2, #0]
 800c682:	4628      	mov	r0, r5
 800c684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c688:	f7ff bd78 	b.w	800c17c <__malloc_unlock>
 800c68c:	42a3      	cmp	r3, r4
 800c68e:	d908      	bls.n	800c6a2 <_free_r+0x42>
 800c690:	6820      	ldr	r0, [r4, #0]
 800c692:	1821      	adds	r1, r4, r0
 800c694:	428b      	cmp	r3, r1
 800c696:	bf01      	itttt	eq
 800c698:	6819      	ldreq	r1, [r3, #0]
 800c69a:	685b      	ldreq	r3, [r3, #4]
 800c69c:	1809      	addeq	r1, r1, r0
 800c69e:	6021      	streq	r1, [r4, #0]
 800c6a0:	e7ed      	b.n	800c67e <_free_r+0x1e>
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	b10b      	cbz	r3, 800c6ac <_free_r+0x4c>
 800c6a8:	42a3      	cmp	r3, r4
 800c6aa:	d9fa      	bls.n	800c6a2 <_free_r+0x42>
 800c6ac:	6811      	ldr	r1, [r2, #0]
 800c6ae:	1850      	adds	r0, r2, r1
 800c6b0:	42a0      	cmp	r0, r4
 800c6b2:	d10b      	bne.n	800c6cc <_free_r+0x6c>
 800c6b4:	6820      	ldr	r0, [r4, #0]
 800c6b6:	4401      	add	r1, r0
 800c6b8:	1850      	adds	r0, r2, r1
 800c6ba:	4283      	cmp	r3, r0
 800c6bc:	6011      	str	r1, [r2, #0]
 800c6be:	d1e0      	bne.n	800c682 <_free_r+0x22>
 800c6c0:	6818      	ldr	r0, [r3, #0]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	6053      	str	r3, [r2, #4]
 800c6c6:	4408      	add	r0, r1
 800c6c8:	6010      	str	r0, [r2, #0]
 800c6ca:	e7da      	b.n	800c682 <_free_r+0x22>
 800c6cc:	d902      	bls.n	800c6d4 <_free_r+0x74>
 800c6ce:	230c      	movs	r3, #12
 800c6d0:	602b      	str	r3, [r5, #0]
 800c6d2:	e7d6      	b.n	800c682 <_free_r+0x22>
 800c6d4:	6820      	ldr	r0, [r4, #0]
 800c6d6:	1821      	adds	r1, r4, r0
 800c6d8:	428b      	cmp	r3, r1
 800c6da:	bf04      	itt	eq
 800c6dc:	6819      	ldreq	r1, [r3, #0]
 800c6de:	685b      	ldreq	r3, [r3, #4]
 800c6e0:	6063      	str	r3, [r4, #4]
 800c6e2:	bf04      	itt	eq
 800c6e4:	1809      	addeq	r1, r1, r0
 800c6e6:	6021      	streq	r1, [r4, #0]
 800c6e8:	6054      	str	r4, [r2, #4]
 800c6ea:	e7ca      	b.n	800c682 <_free_r+0x22>
 800c6ec:	bd38      	pop	{r3, r4, r5, pc}
 800c6ee:	bf00      	nop
 800c6f0:	20000428 	.word	0x20000428

0800c6f4 <__ssputs_r>:
 800c6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6f8:	688e      	ldr	r6, [r1, #8]
 800c6fa:	461f      	mov	r7, r3
 800c6fc:	42be      	cmp	r6, r7
 800c6fe:	680b      	ldr	r3, [r1, #0]
 800c700:	4682      	mov	sl, r0
 800c702:	460c      	mov	r4, r1
 800c704:	4690      	mov	r8, r2
 800c706:	d82d      	bhi.n	800c764 <__ssputs_r+0x70>
 800c708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c70c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c710:	d026      	beq.n	800c760 <__ssputs_r+0x6c>
 800c712:	6965      	ldr	r5, [r4, #20]
 800c714:	6909      	ldr	r1, [r1, #16]
 800c716:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c71a:	eba3 0901 	sub.w	r9, r3, r1
 800c71e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c722:	1c7b      	adds	r3, r7, #1
 800c724:	444b      	add	r3, r9
 800c726:	106d      	asrs	r5, r5, #1
 800c728:	429d      	cmp	r5, r3
 800c72a:	bf38      	it	cc
 800c72c:	461d      	movcc	r5, r3
 800c72e:	0553      	lsls	r3, r2, #21
 800c730:	d527      	bpl.n	800c782 <__ssputs_r+0x8e>
 800c732:	4629      	mov	r1, r5
 800c734:	f7ff fc9c 	bl	800c070 <_malloc_r>
 800c738:	4606      	mov	r6, r0
 800c73a:	b360      	cbz	r0, 800c796 <__ssputs_r+0xa2>
 800c73c:	6921      	ldr	r1, [r4, #16]
 800c73e:	464a      	mov	r2, r9
 800c740:	f7ff ff78 	bl	800c634 <memcpy>
 800c744:	89a3      	ldrh	r3, [r4, #12]
 800c746:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c74a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c74e:	81a3      	strh	r3, [r4, #12]
 800c750:	6126      	str	r6, [r4, #16]
 800c752:	6165      	str	r5, [r4, #20]
 800c754:	444e      	add	r6, r9
 800c756:	eba5 0509 	sub.w	r5, r5, r9
 800c75a:	6026      	str	r6, [r4, #0]
 800c75c:	60a5      	str	r5, [r4, #8]
 800c75e:	463e      	mov	r6, r7
 800c760:	42be      	cmp	r6, r7
 800c762:	d900      	bls.n	800c766 <__ssputs_r+0x72>
 800c764:	463e      	mov	r6, r7
 800c766:	6820      	ldr	r0, [r4, #0]
 800c768:	4632      	mov	r2, r6
 800c76a:	4641      	mov	r1, r8
 800c76c:	f001 fa36 	bl	800dbdc <memmove>
 800c770:	68a3      	ldr	r3, [r4, #8]
 800c772:	1b9b      	subs	r3, r3, r6
 800c774:	60a3      	str	r3, [r4, #8]
 800c776:	6823      	ldr	r3, [r4, #0]
 800c778:	4433      	add	r3, r6
 800c77a:	6023      	str	r3, [r4, #0]
 800c77c:	2000      	movs	r0, #0
 800c77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c782:	462a      	mov	r2, r5
 800c784:	f001 f81a 	bl	800d7bc <_realloc_r>
 800c788:	4606      	mov	r6, r0
 800c78a:	2800      	cmp	r0, #0
 800c78c:	d1e0      	bne.n	800c750 <__ssputs_r+0x5c>
 800c78e:	6921      	ldr	r1, [r4, #16]
 800c790:	4650      	mov	r0, sl
 800c792:	f7ff ff65 	bl	800c660 <_free_r>
 800c796:	230c      	movs	r3, #12
 800c798:	f8ca 3000 	str.w	r3, [sl]
 800c79c:	89a3      	ldrh	r3, [r4, #12]
 800c79e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7a2:	81a3      	strh	r3, [r4, #12]
 800c7a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7a8:	e7e9      	b.n	800c77e <__ssputs_r+0x8a>
	...

0800c7ac <_svfiprintf_r>:
 800c7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b0:	4698      	mov	r8, r3
 800c7b2:	898b      	ldrh	r3, [r1, #12]
 800c7b4:	061b      	lsls	r3, r3, #24
 800c7b6:	b09d      	sub	sp, #116	@ 0x74
 800c7b8:	4607      	mov	r7, r0
 800c7ba:	460d      	mov	r5, r1
 800c7bc:	4614      	mov	r4, r2
 800c7be:	d510      	bpl.n	800c7e2 <_svfiprintf_r+0x36>
 800c7c0:	690b      	ldr	r3, [r1, #16]
 800c7c2:	b973      	cbnz	r3, 800c7e2 <_svfiprintf_r+0x36>
 800c7c4:	2140      	movs	r1, #64	@ 0x40
 800c7c6:	f7ff fc53 	bl	800c070 <_malloc_r>
 800c7ca:	6028      	str	r0, [r5, #0]
 800c7cc:	6128      	str	r0, [r5, #16]
 800c7ce:	b930      	cbnz	r0, 800c7de <_svfiprintf_r+0x32>
 800c7d0:	230c      	movs	r3, #12
 800c7d2:	603b      	str	r3, [r7, #0]
 800c7d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7d8:	b01d      	add	sp, #116	@ 0x74
 800c7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7de:	2340      	movs	r3, #64	@ 0x40
 800c7e0:	616b      	str	r3, [r5, #20]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7e6:	2320      	movs	r3, #32
 800c7e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c7ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7f0:	2330      	movs	r3, #48	@ 0x30
 800c7f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c990 <_svfiprintf_r+0x1e4>
 800c7f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c7fa:	f04f 0901 	mov.w	r9, #1
 800c7fe:	4623      	mov	r3, r4
 800c800:	469a      	mov	sl, r3
 800c802:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c806:	b10a      	cbz	r2, 800c80c <_svfiprintf_r+0x60>
 800c808:	2a25      	cmp	r2, #37	@ 0x25
 800c80a:	d1f9      	bne.n	800c800 <_svfiprintf_r+0x54>
 800c80c:	ebba 0b04 	subs.w	fp, sl, r4
 800c810:	d00b      	beq.n	800c82a <_svfiprintf_r+0x7e>
 800c812:	465b      	mov	r3, fp
 800c814:	4622      	mov	r2, r4
 800c816:	4629      	mov	r1, r5
 800c818:	4638      	mov	r0, r7
 800c81a:	f7ff ff6b 	bl	800c6f4 <__ssputs_r>
 800c81e:	3001      	adds	r0, #1
 800c820:	f000 80a7 	beq.w	800c972 <_svfiprintf_r+0x1c6>
 800c824:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c826:	445a      	add	r2, fp
 800c828:	9209      	str	r2, [sp, #36]	@ 0x24
 800c82a:	f89a 3000 	ldrb.w	r3, [sl]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f000 809f 	beq.w	800c972 <_svfiprintf_r+0x1c6>
 800c834:	2300      	movs	r3, #0
 800c836:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c83a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c83e:	f10a 0a01 	add.w	sl, sl, #1
 800c842:	9304      	str	r3, [sp, #16]
 800c844:	9307      	str	r3, [sp, #28]
 800c846:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c84a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c84c:	4654      	mov	r4, sl
 800c84e:	2205      	movs	r2, #5
 800c850:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c854:	484e      	ldr	r0, [pc, #312]	@ (800c990 <_svfiprintf_r+0x1e4>)
 800c856:	f7f3 fca3 	bl	80001a0 <memchr>
 800c85a:	9a04      	ldr	r2, [sp, #16]
 800c85c:	b9d8      	cbnz	r0, 800c896 <_svfiprintf_r+0xea>
 800c85e:	06d0      	lsls	r0, r2, #27
 800c860:	bf44      	itt	mi
 800c862:	2320      	movmi	r3, #32
 800c864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c868:	0711      	lsls	r1, r2, #28
 800c86a:	bf44      	itt	mi
 800c86c:	232b      	movmi	r3, #43	@ 0x2b
 800c86e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c872:	f89a 3000 	ldrb.w	r3, [sl]
 800c876:	2b2a      	cmp	r3, #42	@ 0x2a
 800c878:	d015      	beq.n	800c8a6 <_svfiprintf_r+0xfa>
 800c87a:	9a07      	ldr	r2, [sp, #28]
 800c87c:	4654      	mov	r4, sl
 800c87e:	2000      	movs	r0, #0
 800c880:	f04f 0c0a 	mov.w	ip, #10
 800c884:	4621      	mov	r1, r4
 800c886:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c88a:	3b30      	subs	r3, #48	@ 0x30
 800c88c:	2b09      	cmp	r3, #9
 800c88e:	d94b      	bls.n	800c928 <_svfiprintf_r+0x17c>
 800c890:	b1b0      	cbz	r0, 800c8c0 <_svfiprintf_r+0x114>
 800c892:	9207      	str	r2, [sp, #28]
 800c894:	e014      	b.n	800c8c0 <_svfiprintf_r+0x114>
 800c896:	eba0 0308 	sub.w	r3, r0, r8
 800c89a:	fa09 f303 	lsl.w	r3, r9, r3
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	9304      	str	r3, [sp, #16]
 800c8a2:	46a2      	mov	sl, r4
 800c8a4:	e7d2      	b.n	800c84c <_svfiprintf_r+0xa0>
 800c8a6:	9b03      	ldr	r3, [sp, #12]
 800c8a8:	1d19      	adds	r1, r3, #4
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	9103      	str	r1, [sp, #12]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	bfbb      	ittet	lt
 800c8b2:	425b      	neglt	r3, r3
 800c8b4:	f042 0202 	orrlt.w	r2, r2, #2
 800c8b8:	9307      	strge	r3, [sp, #28]
 800c8ba:	9307      	strlt	r3, [sp, #28]
 800c8bc:	bfb8      	it	lt
 800c8be:	9204      	strlt	r2, [sp, #16]
 800c8c0:	7823      	ldrb	r3, [r4, #0]
 800c8c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c8c4:	d10a      	bne.n	800c8dc <_svfiprintf_r+0x130>
 800c8c6:	7863      	ldrb	r3, [r4, #1]
 800c8c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8ca:	d132      	bne.n	800c932 <_svfiprintf_r+0x186>
 800c8cc:	9b03      	ldr	r3, [sp, #12]
 800c8ce:	1d1a      	adds	r2, r3, #4
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	9203      	str	r2, [sp, #12]
 800c8d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c8d8:	3402      	adds	r4, #2
 800c8da:	9305      	str	r3, [sp, #20]
 800c8dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c9a0 <_svfiprintf_r+0x1f4>
 800c8e0:	7821      	ldrb	r1, [r4, #0]
 800c8e2:	2203      	movs	r2, #3
 800c8e4:	4650      	mov	r0, sl
 800c8e6:	f7f3 fc5b 	bl	80001a0 <memchr>
 800c8ea:	b138      	cbz	r0, 800c8fc <_svfiprintf_r+0x150>
 800c8ec:	9b04      	ldr	r3, [sp, #16]
 800c8ee:	eba0 000a 	sub.w	r0, r0, sl
 800c8f2:	2240      	movs	r2, #64	@ 0x40
 800c8f4:	4082      	lsls	r2, r0
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	3401      	adds	r4, #1
 800c8fa:	9304      	str	r3, [sp, #16]
 800c8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c900:	4824      	ldr	r0, [pc, #144]	@ (800c994 <_svfiprintf_r+0x1e8>)
 800c902:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c906:	2206      	movs	r2, #6
 800c908:	f7f3 fc4a 	bl	80001a0 <memchr>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	d036      	beq.n	800c97e <_svfiprintf_r+0x1d2>
 800c910:	4b21      	ldr	r3, [pc, #132]	@ (800c998 <_svfiprintf_r+0x1ec>)
 800c912:	bb1b      	cbnz	r3, 800c95c <_svfiprintf_r+0x1b0>
 800c914:	9b03      	ldr	r3, [sp, #12]
 800c916:	3307      	adds	r3, #7
 800c918:	f023 0307 	bic.w	r3, r3, #7
 800c91c:	3308      	adds	r3, #8
 800c91e:	9303      	str	r3, [sp, #12]
 800c920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c922:	4433      	add	r3, r6
 800c924:	9309      	str	r3, [sp, #36]	@ 0x24
 800c926:	e76a      	b.n	800c7fe <_svfiprintf_r+0x52>
 800c928:	fb0c 3202 	mla	r2, ip, r2, r3
 800c92c:	460c      	mov	r4, r1
 800c92e:	2001      	movs	r0, #1
 800c930:	e7a8      	b.n	800c884 <_svfiprintf_r+0xd8>
 800c932:	2300      	movs	r3, #0
 800c934:	3401      	adds	r4, #1
 800c936:	9305      	str	r3, [sp, #20]
 800c938:	4619      	mov	r1, r3
 800c93a:	f04f 0c0a 	mov.w	ip, #10
 800c93e:	4620      	mov	r0, r4
 800c940:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c944:	3a30      	subs	r2, #48	@ 0x30
 800c946:	2a09      	cmp	r2, #9
 800c948:	d903      	bls.n	800c952 <_svfiprintf_r+0x1a6>
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d0c6      	beq.n	800c8dc <_svfiprintf_r+0x130>
 800c94e:	9105      	str	r1, [sp, #20]
 800c950:	e7c4      	b.n	800c8dc <_svfiprintf_r+0x130>
 800c952:	fb0c 2101 	mla	r1, ip, r1, r2
 800c956:	4604      	mov	r4, r0
 800c958:	2301      	movs	r3, #1
 800c95a:	e7f0      	b.n	800c93e <_svfiprintf_r+0x192>
 800c95c:	ab03      	add	r3, sp, #12
 800c95e:	9300      	str	r3, [sp, #0]
 800c960:	462a      	mov	r2, r5
 800c962:	4b0e      	ldr	r3, [pc, #56]	@ (800c99c <_svfiprintf_r+0x1f0>)
 800c964:	a904      	add	r1, sp, #16
 800c966:	4638      	mov	r0, r7
 800c968:	f3af 8000 	nop.w
 800c96c:	1c42      	adds	r2, r0, #1
 800c96e:	4606      	mov	r6, r0
 800c970:	d1d6      	bne.n	800c920 <_svfiprintf_r+0x174>
 800c972:	89ab      	ldrh	r3, [r5, #12]
 800c974:	065b      	lsls	r3, r3, #25
 800c976:	f53f af2d 	bmi.w	800c7d4 <_svfiprintf_r+0x28>
 800c97a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c97c:	e72c      	b.n	800c7d8 <_svfiprintf_r+0x2c>
 800c97e:	ab03      	add	r3, sp, #12
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	462a      	mov	r2, r5
 800c984:	4b05      	ldr	r3, [pc, #20]	@ (800c99c <_svfiprintf_r+0x1f0>)
 800c986:	a904      	add	r1, sp, #16
 800c988:	4638      	mov	r0, r7
 800c98a:	f000 fb8b 	bl	800d0a4 <_printf_i>
 800c98e:	e7ed      	b.n	800c96c <_svfiprintf_r+0x1c0>
 800c990:	0800ef5c 	.word	0x0800ef5c
 800c994:	0800ef66 	.word	0x0800ef66
 800c998:	00000000 	.word	0x00000000
 800c99c:	0800c6f5 	.word	0x0800c6f5
 800c9a0:	0800ef62 	.word	0x0800ef62

0800c9a4 <_sungetc_r>:
 800c9a4:	b538      	push	{r3, r4, r5, lr}
 800c9a6:	1c4b      	adds	r3, r1, #1
 800c9a8:	4614      	mov	r4, r2
 800c9aa:	d103      	bne.n	800c9b4 <_sungetc_r+0x10>
 800c9ac:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	bd38      	pop	{r3, r4, r5, pc}
 800c9b4:	8993      	ldrh	r3, [r2, #12]
 800c9b6:	f023 0320 	bic.w	r3, r3, #32
 800c9ba:	8193      	strh	r3, [r2, #12]
 800c9bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c9be:	6852      	ldr	r2, [r2, #4]
 800c9c0:	b2cd      	uxtb	r5, r1
 800c9c2:	b18b      	cbz	r3, 800c9e8 <_sungetc_r+0x44>
 800c9c4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	dd08      	ble.n	800c9dc <_sungetc_r+0x38>
 800c9ca:	6823      	ldr	r3, [r4, #0]
 800c9cc:	1e5a      	subs	r2, r3, #1
 800c9ce:	6022      	str	r2, [r4, #0]
 800c9d0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c9d4:	6863      	ldr	r3, [r4, #4]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	6063      	str	r3, [r4, #4]
 800c9da:	e7e9      	b.n	800c9b0 <_sungetc_r+0xc>
 800c9dc:	4621      	mov	r1, r4
 800c9de:	f000 feb3 	bl	800d748 <__submore>
 800c9e2:	2800      	cmp	r0, #0
 800c9e4:	d0f1      	beq.n	800c9ca <_sungetc_r+0x26>
 800c9e6:	e7e1      	b.n	800c9ac <_sungetc_r+0x8>
 800c9e8:	6921      	ldr	r1, [r4, #16]
 800c9ea:	6823      	ldr	r3, [r4, #0]
 800c9ec:	b151      	cbz	r1, 800ca04 <_sungetc_r+0x60>
 800c9ee:	4299      	cmp	r1, r3
 800c9f0:	d208      	bcs.n	800ca04 <_sungetc_r+0x60>
 800c9f2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c9f6:	42a9      	cmp	r1, r5
 800c9f8:	d104      	bne.n	800ca04 <_sungetc_r+0x60>
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	3201      	adds	r2, #1
 800c9fe:	6023      	str	r3, [r4, #0]
 800ca00:	6062      	str	r2, [r4, #4]
 800ca02:	e7d5      	b.n	800c9b0 <_sungetc_r+0xc>
 800ca04:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800ca08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca0c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca0e:	2303      	movs	r3, #3
 800ca10:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ca12:	4623      	mov	r3, r4
 800ca14:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ca18:	6023      	str	r3, [r4, #0]
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	e7dc      	b.n	800c9d8 <_sungetc_r+0x34>

0800ca1e <__ssrefill_r>:
 800ca1e:	b510      	push	{r4, lr}
 800ca20:	460c      	mov	r4, r1
 800ca22:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ca24:	b169      	cbz	r1, 800ca42 <__ssrefill_r+0x24>
 800ca26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca2a:	4299      	cmp	r1, r3
 800ca2c:	d001      	beq.n	800ca32 <__ssrefill_r+0x14>
 800ca2e:	f7ff fe17 	bl	800c660 <_free_r>
 800ca32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca34:	6063      	str	r3, [r4, #4]
 800ca36:	2000      	movs	r0, #0
 800ca38:	6360      	str	r0, [r4, #52]	@ 0x34
 800ca3a:	b113      	cbz	r3, 800ca42 <__ssrefill_r+0x24>
 800ca3c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ca3e:	6023      	str	r3, [r4, #0]
 800ca40:	bd10      	pop	{r4, pc}
 800ca42:	6923      	ldr	r3, [r4, #16]
 800ca44:	6023      	str	r3, [r4, #0]
 800ca46:	2300      	movs	r3, #0
 800ca48:	6063      	str	r3, [r4, #4]
 800ca4a:	89a3      	ldrh	r3, [r4, #12]
 800ca4c:	f043 0320 	orr.w	r3, r3, #32
 800ca50:	81a3      	strh	r3, [r4, #12]
 800ca52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca56:	e7f3      	b.n	800ca40 <__ssrefill_r+0x22>

0800ca58 <__ssvfiscanf_r>:
 800ca58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca5c:	460c      	mov	r4, r1
 800ca5e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800ca62:	2100      	movs	r1, #0
 800ca64:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800ca68:	49a6      	ldr	r1, [pc, #664]	@ (800cd04 <__ssvfiscanf_r+0x2ac>)
 800ca6a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800ca6c:	f10d 0804 	add.w	r8, sp, #4
 800ca70:	49a5      	ldr	r1, [pc, #660]	@ (800cd08 <__ssvfiscanf_r+0x2b0>)
 800ca72:	4fa6      	ldr	r7, [pc, #664]	@ (800cd0c <__ssvfiscanf_r+0x2b4>)
 800ca74:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800ca78:	4606      	mov	r6, r0
 800ca7a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800ca7c:	9300      	str	r3, [sp, #0]
 800ca7e:	f892 9000 	ldrb.w	r9, [r2]
 800ca82:	f1b9 0f00 	cmp.w	r9, #0
 800ca86:	f000 8158 	beq.w	800cd3a <__ssvfiscanf_r+0x2e2>
 800ca8a:	f817 3009 	ldrb.w	r3, [r7, r9]
 800ca8e:	f013 0308 	ands.w	r3, r3, #8
 800ca92:	f102 0501 	add.w	r5, r2, #1
 800ca96:	d019      	beq.n	800cacc <__ssvfiscanf_r+0x74>
 800ca98:	6863      	ldr	r3, [r4, #4]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	dd0f      	ble.n	800cabe <__ssvfiscanf_r+0x66>
 800ca9e:	6823      	ldr	r3, [r4, #0]
 800caa0:	781a      	ldrb	r2, [r3, #0]
 800caa2:	5cba      	ldrb	r2, [r7, r2]
 800caa4:	0712      	lsls	r2, r2, #28
 800caa6:	d401      	bmi.n	800caac <__ssvfiscanf_r+0x54>
 800caa8:	462a      	mov	r2, r5
 800caaa:	e7e8      	b.n	800ca7e <__ssvfiscanf_r+0x26>
 800caac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800caae:	3201      	adds	r2, #1
 800cab0:	9245      	str	r2, [sp, #276]	@ 0x114
 800cab2:	6862      	ldr	r2, [r4, #4]
 800cab4:	3301      	adds	r3, #1
 800cab6:	3a01      	subs	r2, #1
 800cab8:	6062      	str	r2, [r4, #4]
 800caba:	6023      	str	r3, [r4, #0]
 800cabc:	e7ec      	b.n	800ca98 <__ssvfiscanf_r+0x40>
 800cabe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800cac0:	4621      	mov	r1, r4
 800cac2:	4630      	mov	r0, r6
 800cac4:	4798      	blx	r3
 800cac6:	2800      	cmp	r0, #0
 800cac8:	d0e9      	beq.n	800ca9e <__ssvfiscanf_r+0x46>
 800caca:	e7ed      	b.n	800caa8 <__ssvfiscanf_r+0x50>
 800cacc:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800cad0:	f040 8085 	bne.w	800cbde <__ssvfiscanf_r+0x186>
 800cad4:	9341      	str	r3, [sp, #260]	@ 0x104
 800cad6:	9343      	str	r3, [sp, #268]	@ 0x10c
 800cad8:	7853      	ldrb	r3, [r2, #1]
 800cada:	2b2a      	cmp	r3, #42	@ 0x2a
 800cadc:	bf02      	ittt	eq
 800cade:	2310      	moveq	r3, #16
 800cae0:	1c95      	addeq	r5, r2, #2
 800cae2:	9341      	streq	r3, [sp, #260]	@ 0x104
 800cae4:	220a      	movs	r2, #10
 800cae6:	46aa      	mov	sl, r5
 800cae8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800caec:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800caf0:	2b09      	cmp	r3, #9
 800caf2:	d91e      	bls.n	800cb32 <__ssvfiscanf_r+0xda>
 800caf4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800cd10 <__ssvfiscanf_r+0x2b8>
 800caf8:	2203      	movs	r2, #3
 800cafa:	4658      	mov	r0, fp
 800cafc:	f7f3 fb50 	bl	80001a0 <memchr>
 800cb00:	b138      	cbz	r0, 800cb12 <__ssvfiscanf_r+0xba>
 800cb02:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800cb04:	eba0 000b 	sub.w	r0, r0, fp
 800cb08:	2301      	movs	r3, #1
 800cb0a:	4083      	lsls	r3, r0
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	9341      	str	r3, [sp, #260]	@ 0x104
 800cb10:	4655      	mov	r5, sl
 800cb12:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cb16:	2b78      	cmp	r3, #120	@ 0x78
 800cb18:	d806      	bhi.n	800cb28 <__ssvfiscanf_r+0xd0>
 800cb1a:	2b57      	cmp	r3, #87	@ 0x57
 800cb1c:	d810      	bhi.n	800cb40 <__ssvfiscanf_r+0xe8>
 800cb1e:	2b25      	cmp	r3, #37	@ 0x25
 800cb20:	d05d      	beq.n	800cbde <__ssvfiscanf_r+0x186>
 800cb22:	d857      	bhi.n	800cbd4 <__ssvfiscanf_r+0x17c>
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d075      	beq.n	800cc14 <__ssvfiscanf_r+0x1bc>
 800cb28:	2303      	movs	r3, #3
 800cb2a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800cb2c:	230a      	movs	r3, #10
 800cb2e:	9342      	str	r3, [sp, #264]	@ 0x108
 800cb30:	e088      	b.n	800cc44 <__ssvfiscanf_r+0x1ec>
 800cb32:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800cb34:	fb02 1103 	mla	r1, r2, r3, r1
 800cb38:	3930      	subs	r1, #48	@ 0x30
 800cb3a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800cb3c:	4655      	mov	r5, sl
 800cb3e:	e7d2      	b.n	800cae6 <__ssvfiscanf_r+0x8e>
 800cb40:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800cb44:	2a20      	cmp	r2, #32
 800cb46:	d8ef      	bhi.n	800cb28 <__ssvfiscanf_r+0xd0>
 800cb48:	a101      	add	r1, pc, #4	@ (adr r1, 800cb50 <__ssvfiscanf_r+0xf8>)
 800cb4a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cb4e:	bf00      	nop
 800cb50:	0800cc23 	.word	0x0800cc23
 800cb54:	0800cb29 	.word	0x0800cb29
 800cb58:	0800cb29 	.word	0x0800cb29
 800cb5c:	0800cc7d 	.word	0x0800cc7d
 800cb60:	0800cb29 	.word	0x0800cb29
 800cb64:	0800cb29 	.word	0x0800cb29
 800cb68:	0800cb29 	.word	0x0800cb29
 800cb6c:	0800cb29 	.word	0x0800cb29
 800cb70:	0800cb29 	.word	0x0800cb29
 800cb74:	0800cb29 	.word	0x0800cb29
 800cb78:	0800cb29 	.word	0x0800cb29
 800cb7c:	0800cc93 	.word	0x0800cc93
 800cb80:	0800cc79 	.word	0x0800cc79
 800cb84:	0800cbdb 	.word	0x0800cbdb
 800cb88:	0800cbdb 	.word	0x0800cbdb
 800cb8c:	0800cbdb 	.word	0x0800cbdb
 800cb90:	0800cb29 	.word	0x0800cb29
 800cb94:	0800cc35 	.word	0x0800cc35
 800cb98:	0800cb29 	.word	0x0800cb29
 800cb9c:	0800cb29 	.word	0x0800cb29
 800cba0:	0800cb29 	.word	0x0800cb29
 800cba4:	0800cb29 	.word	0x0800cb29
 800cba8:	0800cca3 	.word	0x0800cca3
 800cbac:	0800cc3d 	.word	0x0800cc3d
 800cbb0:	0800cc1b 	.word	0x0800cc1b
 800cbb4:	0800cb29 	.word	0x0800cb29
 800cbb8:	0800cb29 	.word	0x0800cb29
 800cbbc:	0800cc9f 	.word	0x0800cc9f
 800cbc0:	0800cb29 	.word	0x0800cb29
 800cbc4:	0800cc79 	.word	0x0800cc79
 800cbc8:	0800cb29 	.word	0x0800cb29
 800cbcc:	0800cb29 	.word	0x0800cb29
 800cbd0:	0800cc23 	.word	0x0800cc23
 800cbd4:	3b45      	subs	r3, #69	@ 0x45
 800cbd6:	2b02      	cmp	r3, #2
 800cbd8:	d8a6      	bhi.n	800cb28 <__ssvfiscanf_r+0xd0>
 800cbda:	2305      	movs	r3, #5
 800cbdc:	e031      	b.n	800cc42 <__ssvfiscanf_r+0x1ea>
 800cbde:	6863      	ldr	r3, [r4, #4]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	dd0d      	ble.n	800cc00 <__ssvfiscanf_r+0x1a8>
 800cbe4:	6823      	ldr	r3, [r4, #0]
 800cbe6:	781a      	ldrb	r2, [r3, #0]
 800cbe8:	454a      	cmp	r2, r9
 800cbea:	f040 80a6 	bne.w	800cd3a <__ssvfiscanf_r+0x2e2>
 800cbee:	3301      	adds	r3, #1
 800cbf0:	6862      	ldr	r2, [r4, #4]
 800cbf2:	6023      	str	r3, [r4, #0]
 800cbf4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800cbf6:	3a01      	subs	r2, #1
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	6062      	str	r2, [r4, #4]
 800cbfc:	9345      	str	r3, [sp, #276]	@ 0x114
 800cbfe:	e753      	b.n	800caa8 <__ssvfiscanf_r+0x50>
 800cc00:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800cc02:	4621      	mov	r1, r4
 800cc04:	4630      	mov	r0, r6
 800cc06:	4798      	blx	r3
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	d0eb      	beq.n	800cbe4 <__ssvfiscanf_r+0x18c>
 800cc0c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800cc0e:	2800      	cmp	r0, #0
 800cc10:	f040 808b 	bne.w	800cd2a <__ssvfiscanf_r+0x2d2>
 800cc14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc18:	e08b      	b.n	800cd32 <__ssvfiscanf_r+0x2da>
 800cc1a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800cc1c:	f042 0220 	orr.w	r2, r2, #32
 800cc20:	9241      	str	r2, [sp, #260]	@ 0x104
 800cc22:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800cc24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cc28:	9241      	str	r2, [sp, #260]	@ 0x104
 800cc2a:	2210      	movs	r2, #16
 800cc2c:	2b6e      	cmp	r3, #110	@ 0x6e
 800cc2e:	9242      	str	r2, [sp, #264]	@ 0x108
 800cc30:	d902      	bls.n	800cc38 <__ssvfiscanf_r+0x1e0>
 800cc32:	e005      	b.n	800cc40 <__ssvfiscanf_r+0x1e8>
 800cc34:	2300      	movs	r3, #0
 800cc36:	9342      	str	r3, [sp, #264]	@ 0x108
 800cc38:	2303      	movs	r3, #3
 800cc3a:	e002      	b.n	800cc42 <__ssvfiscanf_r+0x1ea>
 800cc3c:	2308      	movs	r3, #8
 800cc3e:	9342      	str	r3, [sp, #264]	@ 0x108
 800cc40:	2304      	movs	r3, #4
 800cc42:	9347      	str	r3, [sp, #284]	@ 0x11c
 800cc44:	6863      	ldr	r3, [r4, #4]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	dd39      	ble.n	800ccbe <__ssvfiscanf_r+0x266>
 800cc4a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800cc4c:	0659      	lsls	r1, r3, #25
 800cc4e:	d404      	bmi.n	800cc5a <__ssvfiscanf_r+0x202>
 800cc50:	6823      	ldr	r3, [r4, #0]
 800cc52:	781a      	ldrb	r2, [r3, #0]
 800cc54:	5cba      	ldrb	r2, [r7, r2]
 800cc56:	0712      	lsls	r2, r2, #28
 800cc58:	d438      	bmi.n	800cccc <__ssvfiscanf_r+0x274>
 800cc5a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	dc47      	bgt.n	800ccf0 <__ssvfiscanf_r+0x298>
 800cc60:	466b      	mov	r3, sp
 800cc62:	4622      	mov	r2, r4
 800cc64:	a941      	add	r1, sp, #260	@ 0x104
 800cc66:	4630      	mov	r0, r6
 800cc68:	f000 fb3a 	bl	800d2e0 <_scanf_chars>
 800cc6c:	2801      	cmp	r0, #1
 800cc6e:	d064      	beq.n	800cd3a <__ssvfiscanf_r+0x2e2>
 800cc70:	2802      	cmp	r0, #2
 800cc72:	f47f af19 	bne.w	800caa8 <__ssvfiscanf_r+0x50>
 800cc76:	e7c9      	b.n	800cc0c <__ssvfiscanf_r+0x1b4>
 800cc78:	220a      	movs	r2, #10
 800cc7a:	e7d7      	b.n	800cc2c <__ssvfiscanf_r+0x1d4>
 800cc7c:	4629      	mov	r1, r5
 800cc7e:	4640      	mov	r0, r8
 800cc80:	f000 fc7c 	bl	800d57c <__sccl>
 800cc84:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800cc86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc8a:	9341      	str	r3, [sp, #260]	@ 0x104
 800cc8c:	4605      	mov	r5, r0
 800cc8e:	2301      	movs	r3, #1
 800cc90:	e7d7      	b.n	800cc42 <__ssvfiscanf_r+0x1ea>
 800cc92:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800cc94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc98:	9341      	str	r3, [sp, #260]	@ 0x104
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	e7d1      	b.n	800cc42 <__ssvfiscanf_r+0x1ea>
 800cc9e:	2302      	movs	r3, #2
 800cca0:	e7cf      	b.n	800cc42 <__ssvfiscanf_r+0x1ea>
 800cca2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800cca4:	06c3      	lsls	r3, r0, #27
 800cca6:	f53f aeff 	bmi.w	800caa8 <__ssvfiscanf_r+0x50>
 800ccaa:	9b00      	ldr	r3, [sp, #0]
 800ccac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ccae:	1d19      	adds	r1, r3, #4
 800ccb0:	9100      	str	r1, [sp, #0]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	07c0      	lsls	r0, r0, #31
 800ccb6:	bf4c      	ite	mi
 800ccb8:	801a      	strhmi	r2, [r3, #0]
 800ccba:	601a      	strpl	r2, [r3, #0]
 800ccbc:	e6f4      	b.n	800caa8 <__ssvfiscanf_r+0x50>
 800ccbe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ccc0:	4621      	mov	r1, r4
 800ccc2:	4630      	mov	r0, r6
 800ccc4:	4798      	blx	r3
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	d0bf      	beq.n	800cc4a <__ssvfiscanf_r+0x1f2>
 800ccca:	e79f      	b.n	800cc0c <__ssvfiscanf_r+0x1b4>
 800cccc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ccce:	3201      	adds	r2, #1
 800ccd0:	9245      	str	r2, [sp, #276]	@ 0x114
 800ccd2:	6862      	ldr	r2, [r4, #4]
 800ccd4:	3a01      	subs	r2, #1
 800ccd6:	2a00      	cmp	r2, #0
 800ccd8:	6062      	str	r2, [r4, #4]
 800ccda:	dd02      	ble.n	800cce2 <__ssvfiscanf_r+0x28a>
 800ccdc:	3301      	adds	r3, #1
 800ccde:	6023      	str	r3, [r4, #0]
 800cce0:	e7b6      	b.n	800cc50 <__ssvfiscanf_r+0x1f8>
 800cce2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800cce4:	4621      	mov	r1, r4
 800cce6:	4630      	mov	r0, r6
 800cce8:	4798      	blx	r3
 800ccea:	2800      	cmp	r0, #0
 800ccec:	d0b0      	beq.n	800cc50 <__ssvfiscanf_r+0x1f8>
 800ccee:	e78d      	b.n	800cc0c <__ssvfiscanf_r+0x1b4>
 800ccf0:	2b04      	cmp	r3, #4
 800ccf2:	dc0f      	bgt.n	800cd14 <__ssvfiscanf_r+0x2bc>
 800ccf4:	466b      	mov	r3, sp
 800ccf6:	4622      	mov	r2, r4
 800ccf8:	a941      	add	r1, sp, #260	@ 0x104
 800ccfa:	4630      	mov	r0, r6
 800ccfc:	f000 fb4a 	bl	800d394 <_scanf_i>
 800cd00:	e7b4      	b.n	800cc6c <__ssvfiscanf_r+0x214>
 800cd02:	bf00      	nop
 800cd04:	0800c9a5 	.word	0x0800c9a5
 800cd08:	0800ca1f 	.word	0x0800ca1f
 800cd0c:	0800efab 	.word	0x0800efab
 800cd10:	0800ef62 	.word	0x0800ef62
 800cd14:	4b0a      	ldr	r3, [pc, #40]	@ (800cd40 <__ssvfiscanf_r+0x2e8>)
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	f43f aec6 	beq.w	800caa8 <__ssvfiscanf_r+0x50>
 800cd1c:	466b      	mov	r3, sp
 800cd1e:	4622      	mov	r2, r4
 800cd20:	a941      	add	r1, sp, #260	@ 0x104
 800cd22:	4630      	mov	r0, r6
 800cd24:	f3af 8000 	nop.w
 800cd28:	e7a0      	b.n	800cc6c <__ssvfiscanf_r+0x214>
 800cd2a:	89a3      	ldrh	r3, [r4, #12]
 800cd2c:	065b      	lsls	r3, r3, #25
 800cd2e:	f53f af71 	bmi.w	800cc14 <__ssvfiscanf_r+0x1bc>
 800cd32:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800cd36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd3a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800cd3c:	e7f9      	b.n	800cd32 <__ssvfiscanf_r+0x2da>
 800cd3e:	bf00      	nop
 800cd40:	00000000 	.word	0x00000000

0800cd44 <__sfputc_r>:
 800cd44:	6893      	ldr	r3, [r2, #8]
 800cd46:	3b01      	subs	r3, #1
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	b410      	push	{r4}
 800cd4c:	6093      	str	r3, [r2, #8]
 800cd4e:	da08      	bge.n	800cd62 <__sfputc_r+0x1e>
 800cd50:	6994      	ldr	r4, [r2, #24]
 800cd52:	42a3      	cmp	r3, r4
 800cd54:	db01      	blt.n	800cd5a <__sfputc_r+0x16>
 800cd56:	290a      	cmp	r1, #10
 800cd58:	d103      	bne.n	800cd62 <__sfputc_r+0x1e>
 800cd5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd5e:	f000 bd5b 	b.w	800d818 <__swbuf_r>
 800cd62:	6813      	ldr	r3, [r2, #0]
 800cd64:	1c58      	adds	r0, r3, #1
 800cd66:	6010      	str	r0, [r2, #0]
 800cd68:	7019      	strb	r1, [r3, #0]
 800cd6a:	4608      	mov	r0, r1
 800cd6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd70:	4770      	bx	lr

0800cd72 <__sfputs_r>:
 800cd72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd74:	4606      	mov	r6, r0
 800cd76:	460f      	mov	r7, r1
 800cd78:	4614      	mov	r4, r2
 800cd7a:	18d5      	adds	r5, r2, r3
 800cd7c:	42ac      	cmp	r4, r5
 800cd7e:	d101      	bne.n	800cd84 <__sfputs_r+0x12>
 800cd80:	2000      	movs	r0, #0
 800cd82:	e007      	b.n	800cd94 <__sfputs_r+0x22>
 800cd84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd88:	463a      	mov	r2, r7
 800cd8a:	4630      	mov	r0, r6
 800cd8c:	f7ff ffda 	bl	800cd44 <__sfputc_r>
 800cd90:	1c43      	adds	r3, r0, #1
 800cd92:	d1f3      	bne.n	800cd7c <__sfputs_r+0xa>
 800cd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cd98 <_vfiprintf_r>:
 800cd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd9c:	460d      	mov	r5, r1
 800cd9e:	b09d      	sub	sp, #116	@ 0x74
 800cda0:	4614      	mov	r4, r2
 800cda2:	4698      	mov	r8, r3
 800cda4:	4606      	mov	r6, r0
 800cda6:	b118      	cbz	r0, 800cdb0 <_vfiprintf_r+0x18>
 800cda8:	6a03      	ldr	r3, [r0, #32]
 800cdaa:	b90b      	cbnz	r3, 800cdb0 <_vfiprintf_r+0x18>
 800cdac:	f7ff fb0c 	bl	800c3c8 <__sinit>
 800cdb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdb2:	07d9      	lsls	r1, r3, #31
 800cdb4:	d405      	bmi.n	800cdc2 <_vfiprintf_r+0x2a>
 800cdb6:	89ab      	ldrh	r3, [r5, #12]
 800cdb8:	059a      	lsls	r2, r3, #22
 800cdba:	d402      	bmi.n	800cdc2 <_vfiprintf_r+0x2a>
 800cdbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdbe:	f7ff fc26 	bl	800c60e <__retarget_lock_acquire_recursive>
 800cdc2:	89ab      	ldrh	r3, [r5, #12]
 800cdc4:	071b      	lsls	r3, r3, #28
 800cdc6:	d501      	bpl.n	800cdcc <_vfiprintf_r+0x34>
 800cdc8:	692b      	ldr	r3, [r5, #16]
 800cdca:	b99b      	cbnz	r3, 800cdf4 <_vfiprintf_r+0x5c>
 800cdcc:	4629      	mov	r1, r5
 800cdce:	4630      	mov	r0, r6
 800cdd0:	f000 fe4c 	bl	800da6c <__swsetup_r>
 800cdd4:	b170      	cbz	r0, 800cdf4 <_vfiprintf_r+0x5c>
 800cdd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdd8:	07dc      	lsls	r4, r3, #31
 800cdda:	d504      	bpl.n	800cde6 <_vfiprintf_r+0x4e>
 800cddc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cde0:	b01d      	add	sp, #116	@ 0x74
 800cde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde6:	89ab      	ldrh	r3, [r5, #12]
 800cde8:	0598      	lsls	r0, r3, #22
 800cdea:	d4f7      	bmi.n	800cddc <_vfiprintf_r+0x44>
 800cdec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdee:	f7ff fc0f 	bl	800c610 <__retarget_lock_release_recursive>
 800cdf2:	e7f3      	b.n	800cddc <_vfiprintf_r+0x44>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdf8:	2320      	movs	r3, #32
 800cdfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cdfe:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce02:	2330      	movs	r3, #48	@ 0x30
 800ce04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cfb4 <_vfiprintf_r+0x21c>
 800ce08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce0c:	f04f 0901 	mov.w	r9, #1
 800ce10:	4623      	mov	r3, r4
 800ce12:	469a      	mov	sl, r3
 800ce14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce18:	b10a      	cbz	r2, 800ce1e <_vfiprintf_r+0x86>
 800ce1a:	2a25      	cmp	r2, #37	@ 0x25
 800ce1c:	d1f9      	bne.n	800ce12 <_vfiprintf_r+0x7a>
 800ce1e:	ebba 0b04 	subs.w	fp, sl, r4
 800ce22:	d00b      	beq.n	800ce3c <_vfiprintf_r+0xa4>
 800ce24:	465b      	mov	r3, fp
 800ce26:	4622      	mov	r2, r4
 800ce28:	4629      	mov	r1, r5
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	f7ff ffa1 	bl	800cd72 <__sfputs_r>
 800ce30:	3001      	adds	r0, #1
 800ce32:	f000 80a7 	beq.w	800cf84 <_vfiprintf_r+0x1ec>
 800ce36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce38:	445a      	add	r2, fp
 800ce3a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	f000 809f 	beq.w	800cf84 <_vfiprintf_r+0x1ec>
 800ce46:	2300      	movs	r3, #0
 800ce48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce50:	f10a 0a01 	add.w	sl, sl, #1
 800ce54:	9304      	str	r3, [sp, #16]
 800ce56:	9307      	str	r3, [sp, #28]
 800ce58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce5c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce5e:	4654      	mov	r4, sl
 800ce60:	2205      	movs	r2, #5
 800ce62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce66:	4853      	ldr	r0, [pc, #332]	@ (800cfb4 <_vfiprintf_r+0x21c>)
 800ce68:	f7f3 f99a 	bl	80001a0 <memchr>
 800ce6c:	9a04      	ldr	r2, [sp, #16]
 800ce6e:	b9d8      	cbnz	r0, 800cea8 <_vfiprintf_r+0x110>
 800ce70:	06d1      	lsls	r1, r2, #27
 800ce72:	bf44      	itt	mi
 800ce74:	2320      	movmi	r3, #32
 800ce76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce7a:	0713      	lsls	r3, r2, #28
 800ce7c:	bf44      	itt	mi
 800ce7e:	232b      	movmi	r3, #43	@ 0x2b
 800ce80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce84:	f89a 3000 	ldrb.w	r3, [sl]
 800ce88:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce8a:	d015      	beq.n	800ceb8 <_vfiprintf_r+0x120>
 800ce8c:	9a07      	ldr	r2, [sp, #28]
 800ce8e:	4654      	mov	r4, sl
 800ce90:	2000      	movs	r0, #0
 800ce92:	f04f 0c0a 	mov.w	ip, #10
 800ce96:	4621      	mov	r1, r4
 800ce98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce9c:	3b30      	subs	r3, #48	@ 0x30
 800ce9e:	2b09      	cmp	r3, #9
 800cea0:	d94b      	bls.n	800cf3a <_vfiprintf_r+0x1a2>
 800cea2:	b1b0      	cbz	r0, 800ced2 <_vfiprintf_r+0x13a>
 800cea4:	9207      	str	r2, [sp, #28]
 800cea6:	e014      	b.n	800ced2 <_vfiprintf_r+0x13a>
 800cea8:	eba0 0308 	sub.w	r3, r0, r8
 800ceac:	fa09 f303 	lsl.w	r3, r9, r3
 800ceb0:	4313      	orrs	r3, r2
 800ceb2:	9304      	str	r3, [sp, #16]
 800ceb4:	46a2      	mov	sl, r4
 800ceb6:	e7d2      	b.n	800ce5e <_vfiprintf_r+0xc6>
 800ceb8:	9b03      	ldr	r3, [sp, #12]
 800ceba:	1d19      	adds	r1, r3, #4
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	9103      	str	r1, [sp, #12]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	bfbb      	ittet	lt
 800cec4:	425b      	neglt	r3, r3
 800cec6:	f042 0202 	orrlt.w	r2, r2, #2
 800ceca:	9307      	strge	r3, [sp, #28]
 800cecc:	9307      	strlt	r3, [sp, #28]
 800cece:	bfb8      	it	lt
 800ced0:	9204      	strlt	r2, [sp, #16]
 800ced2:	7823      	ldrb	r3, [r4, #0]
 800ced4:	2b2e      	cmp	r3, #46	@ 0x2e
 800ced6:	d10a      	bne.n	800ceee <_vfiprintf_r+0x156>
 800ced8:	7863      	ldrb	r3, [r4, #1]
 800ceda:	2b2a      	cmp	r3, #42	@ 0x2a
 800cedc:	d132      	bne.n	800cf44 <_vfiprintf_r+0x1ac>
 800cede:	9b03      	ldr	r3, [sp, #12]
 800cee0:	1d1a      	adds	r2, r3, #4
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	9203      	str	r2, [sp, #12]
 800cee6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ceea:	3402      	adds	r4, #2
 800ceec:	9305      	str	r3, [sp, #20]
 800ceee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cfc4 <_vfiprintf_r+0x22c>
 800cef2:	7821      	ldrb	r1, [r4, #0]
 800cef4:	2203      	movs	r2, #3
 800cef6:	4650      	mov	r0, sl
 800cef8:	f7f3 f952 	bl	80001a0 <memchr>
 800cefc:	b138      	cbz	r0, 800cf0e <_vfiprintf_r+0x176>
 800cefe:	9b04      	ldr	r3, [sp, #16]
 800cf00:	eba0 000a 	sub.w	r0, r0, sl
 800cf04:	2240      	movs	r2, #64	@ 0x40
 800cf06:	4082      	lsls	r2, r0
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	3401      	adds	r4, #1
 800cf0c:	9304      	str	r3, [sp, #16]
 800cf0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf12:	4829      	ldr	r0, [pc, #164]	@ (800cfb8 <_vfiprintf_r+0x220>)
 800cf14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf18:	2206      	movs	r2, #6
 800cf1a:	f7f3 f941 	bl	80001a0 <memchr>
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	d03f      	beq.n	800cfa2 <_vfiprintf_r+0x20a>
 800cf22:	4b26      	ldr	r3, [pc, #152]	@ (800cfbc <_vfiprintf_r+0x224>)
 800cf24:	bb1b      	cbnz	r3, 800cf6e <_vfiprintf_r+0x1d6>
 800cf26:	9b03      	ldr	r3, [sp, #12]
 800cf28:	3307      	adds	r3, #7
 800cf2a:	f023 0307 	bic.w	r3, r3, #7
 800cf2e:	3308      	adds	r3, #8
 800cf30:	9303      	str	r3, [sp, #12]
 800cf32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf34:	443b      	add	r3, r7
 800cf36:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf38:	e76a      	b.n	800ce10 <_vfiprintf_r+0x78>
 800cf3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf3e:	460c      	mov	r4, r1
 800cf40:	2001      	movs	r0, #1
 800cf42:	e7a8      	b.n	800ce96 <_vfiprintf_r+0xfe>
 800cf44:	2300      	movs	r3, #0
 800cf46:	3401      	adds	r4, #1
 800cf48:	9305      	str	r3, [sp, #20]
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	f04f 0c0a 	mov.w	ip, #10
 800cf50:	4620      	mov	r0, r4
 800cf52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf56:	3a30      	subs	r2, #48	@ 0x30
 800cf58:	2a09      	cmp	r2, #9
 800cf5a:	d903      	bls.n	800cf64 <_vfiprintf_r+0x1cc>
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d0c6      	beq.n	800ceee <_vfiprintf_r+0x156>
 800cf60:	9105      	str	r1, [sp, #20]
 800cf62:	e7c4      	b.n	800ceee <_vfiprintf_r+0x156>
 800cf64:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf68:	4604      	mov	r4, r0
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	e7f0      	b.n	800cf50 <_vfiprintf_r+0x1b8>
 800cf6e:	ab03      	add	r3, sp, #12
 800cf70:	9300      	str	r3, [sp, #0]
 800cf72:	462a      	mov	r2, r5
 800cf74:	4b12      	ldr	r3, [pc, #72]	@ (800cfc0 <_vfiprintf_r+0x228>)
 800cf76:	a904      	add	r1, sp, #16
 800cf78:	4630      	mov	r0, r6
 800cf7a:	f3af 8000 	nop.w
 800cf7e:	4607      	mov	r7, r0
 800cf80:	1c78      	adds	r0, r7, #1
 800cf82:	d1d6      	bne.n	800cf32 <_vfiprintf_r+0x19a>
 800cf84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf86:	07d9      	lsls	r1, r3, #31
 800cf88:	d405      	bmi.n	800cf96 <_vfiprintf_r+0x1fe>
 800cf8a:	89ab      	ldrh	r3, [r5, #12]
 800cf8c:	059a      	lsls	r2, r3, #22
 800cf8e:	d402      	bmi.n	800cf96 <_vfiprintf_r+0x1fe>
 800cf90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf92:	f7ff fb3d 	bl	800c610 <__retarget_lock_release_recursive>
 800cf96:	89ab      	ldrh	r3, [r5, #12]
 800cf98:	065b      	lsls	r3, r3, #25
 800cf9a:	f53f af1f 	bmi.w	800cddc <_vfiprintf_r+0x44>
 800cf9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cfa0:	e71e      	b.n	800cde0 <_vfiprintf_r+0x48>
 800cfa2:	ab03      	add	r3, sp, #12
 800cfa4:	9300      	str	r3, [sp, #0]
 800cfa6:	462a      	mov	r2, r5
 800cfa8:	4b05      	ldr	r3, [pc, #20]	@ (800cfc0 <_vfiprintf_r+0x228>)
 800cfaa:	a904      	add	r1, sp, #16
 800cfac:	4630      	mov	r0, r6
 800cfae:	f000 f879 	bl	800d0a4 <_printf_i>
 800cfb2:	e7e4      	b.n	800cf7e <_vfiprintf_r+0x1e6>
 800cfb4:	0800ef5c 	.word	0x0800ef5c
 800cfb8:	0800ef66 	.word	0x0800ef66
 800cfbc:	00000000 	.word	0x00000000
 800cfc0:	0800cd73 	.word	0x0800cd73
 800cfc4:	0800ef62 	.word	0x0800ef62

0800cfc8 <_printf_common>:
 800cfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfcc:	4616      	mov	r6, r2
 800cfce:	4698      	mov	r8, r3
 800cfd0:	688a      	ldr	r2, [r1, #8]
 800cfd2:	690b      	ldr	r3, [r1, #16]
 800cfd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	bfb8      	it	lt
 800cfdc:	4613      	movlt	r3, r2
 800cfde:	6033      	str	r3, [r6, #0]
 800cfe0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cfe4:	4607      	mov	r7, r0
 800cfe6:	460c      	mov	r4, r1
 800cfe8:	b10a      	cbz	r2, 800cfee <_printf_common+0x26>
 800cfea:	3301      	adds	r3, #1
 800cfec:	6033      	str	r3, [r6, #0]
 800cfee:	6823      	ldr	r3, [r4, #0]
 800cff0:	0699      	lsls	r1, r3, #26
 800cff2:	bf42      	ittt	mi
 800cff4:	6833      	ldrmi	r3, [r6, #0]
 800cff6:	3302      	addmi	r3, #2
 800cff8:	6033      	strmi	r3, [r6, #0]
 800cffa:	6825      	ldr	r5, [r4, #0]
 800cffc:	f015 0506 	ands.w	r5, r5, #6
 800d000:	d106      	bne.n	800d010 <_printf_common+0x48>
 800d002:	f104 0a19 	add.w	sl, r4, #25
 800d006:	68e3      	ldr	r3, [r4, #12]
 800d008:	6832      	ldr	r2, [r6, #0]
 800d00a:	1a9b      	subs	r3, r3, r2
 800d00c:	42ab      	cmp	r3, r5
 800d00e:	dc26      	bgt.n	800d05e <_printf_common+0x96>
 800d010:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d014:	6822      	ldr	r2, [r4, #0]
 800d016:	3b00      	subs	r3, #0
 800d018:	bf18      	it	ne
 800d01a:	2301      	movne	r3, #1
 800d01c:	0692      	lsls	r2, r2, #26
 800d01e:	d42b      	bmi.n	800d078 <_printf_common+0xb0>
 800d020:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d024:	4641      	mov	r1, r8
 800d026:	4638      	mov	r0, r7
 800d028:	47c8      	blx	r9
 800d02a:	3001      	adds	r0, #1
 800d02c:	d01e      	beq.n	800d06c <_printf_common+0xa4>
 800d02e:	6823      	ldr	r3, [r4, #0]
 800d030:	6922      	ldr	r2, [r4, #16]
 800d032:	f003 0306 	and.w	r3, r3, #6
 800d036:	2b04      	cmp	r3, #4
 800d038:	bf02      	ittt	eq
 800d03a:	68e5      	ldreq	r5, [r4, #12]
 800d03c:	6833      	ldreq	r3, [r6, #0]
 800d03e:	1aed      	subeq	r5, r5, r3
 800d040:	68a3      	ldr	r3, [r4, #8]
 800d042:	bf0c      	ite	eq
 800d044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d048:	2500      	movne	r5, #0
 800d04a:	4293      	cmp	r3, r2
 800d04c:	bfc4      	itt	gt
 800d04e:	1a9b      	subgt	r3, r3, r2
 800d050:	18ed      	addgt	r5, r5, r3
 800d052:	2600      	movs	r6, #0
 800d054:	341a      	adds	r4, #26
 800d056:	42b5      	cmp	r5, r6
 800d058:	d11a      	bne.n	800d090 <_printf_common+0xc8>
 800d05a:	2000      	movs	r0, #0
 800d05c:	e008      	b.n	800d070 <_printf_common+0xa8>
 800d05e:	2301      	movs	r3, #1
 800d060:	4652      	mov	r2, sl
 800d062:	4641      	mov	r1, r8
 800d064:	4638      	mov	r0, r7
 800d066:	47c8      	blx	r9
 800d068:	3001      	adds	r0, #1
 800d06a:	d103      	bne.n	800d074 <_printf_common+0xac>
 800d06c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d074:	3501      	adds	r5, #1
 800d076:	e7c6      	b.n	800d006 <_printf_common+0x3e>
 800d078:	18e1      	adds	r1, r4, r3
 800d07a:	1c5a      	adds	r2, r3, #1
 800d07c:	2030      	movs	r0, #48	@ 0x30
 800d07e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d082:	4422      	add	r2, r4
 800d084:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d088:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d08c:	3302      	adds	r3, #2
 800d08e:	e7c7      	b.n	800d020 <_printf_common+0x58>
 800d090:	2301      	movs	r3, #1
 800d092:	4622      	mov	r2, r4
 800d094:	4641      	mov	r1, r8
 800d096:	4638      	mov	r0, r7
 800d098:	47c8      	blx	r9
 800d09a:	3001      	adds	r0, #1
 800d09c:	d0e6      	beq.n	800d06c <_printf_common+0xa4>
 800d09e:	3601      	adds	r6, #1
 800d0a0:	e7d9      	b.n	800d056 <_printf_common+0x8e>
	...

0800d0a4 <_printf_i>:
 800d0a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0a8:	7e0f      	ldrb	r7, [r1, #24]
 800d0aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d0ac:	2f78      	cmp	r7, #120	@ 0x78
 800d0ae:	4691      	mov	r9, r2
 800d0b0:	4680      	mov	r8, r0
 800d0b2:	460c      	mov	r4, r1
 800d0b4:	469a      	mov	sl, r3
 800d0b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d0ba:	d807      	bhi.n	800d0cc <_printf_i+0x28>
 800d0bc:	2f62      	cmp	r7, #98	@ 0x62
 800d0be:	d80a      	bhi.n	800d0d6 <_printf_i+0x32>
 800d0c0:	2f00      	cmp	r7, #0
 800d0c2:	f000 80d1 	beq.w	800d268 <_printf_i+0x1c4>
 800d0c6:	2f58      	cmp	r7, #88	@ 0x58
 800d0c8:	f000 80b8 	beq.w	800d23c <_printf_i+0x198>
 800d0cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d0d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d0d4:	e03a      	b.n	800d14c <_printf_i+0xa8>
 800d0d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d0da:	2b15      	cmp	r3, #21
 800d0dc:	d8f6      	bhi.n	800d0cc <_printf_i+0x28>
 800d0de:	a101      	add	r1, pc, #4	@ (adr r1, 800d0e4 <_printf_i+0x40>)
 800d0e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d0e4:	0800d13d 	.word	0x0800d13d
 800d0e8:	0800d151 	.word	0x0800d151
 800d0ec:	0800d0cd 	.word	0x0800d0cd
 800d0f0:	0800d0cd 	.word	0x0800d0cd
 800d0f4:	0800d0cd 	.word	0x0800d0cd
 800d0f8:	0800d0cd 	.word	0x0800d0cd
 800d0fc:	0800d151 	.word	0x0800d151
 800d100:	0800d0cd 	.word	0x0800d0cd
 800d104:	0800d0cd 	.word	0x0800d0cd
 800d108:	0800d0cd 	.word	0x0800d0cd
 800d10c:	0800d0cd 	.word	0x0800d0cd
 800d110:	0800d24f 	.word	0x0800d24f
 800d114:	0800d17b 	.word	0x0800d17b
 800d118:	0800d209 	.word	0x0800d209
 800d11c:	0800d0cd 	.word	0x0800d0cd
 800d120:	0800d0cd 	.word	0x0800d0cd
 800d124:	0800d271 	.word	0x0800d271
 800d128:	0800d0cd 	.word	0x0800d0cd
 800d12c:	0800d17b 	.word	0x0800d17b
 800d130:	0800d0cd 	.word	0x0800d0cd
 800d134:	0800d0cd 	.word	0x0800d0cd
 800d138:	0800d211 	.word	0x0800d211
 800d13c:	6833      	ldr	r3, [r6, #0]
 800d13e:	1d1a      	adds	r2, r3, #4
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	6032      	str	r2, [r6, #0]
 800d144:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d148:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d14c:	2301      	movs	r3, #1
 800d14e:	e09c      	b.n	800d28a <_printf_i+0x1e6>
 800d150:	6833      	ldr	r3, [r6, #0]
 800d152:	6820      	ldr	r0, [r4, #0]
 800d154:	1d19      	adds	r1, r3, #4
 800d156:	6031      	str	r1, [r6, #0]
 800d158:	0606      	lsls	r6, r0, #24
 800d15a:	d501      	bpl.n	800d160 <_printf_i+0xbc>
 800d15c:	681d      	ldr	r5, [r3, #0]
 800d15e:	e003      	b.n	800d168 <_printf_i+0xc4>
 800d160:	0645      	lsls	r5, r0, #25
 800d162:	d5fb      	bpl.n	800d15c <_printf_i+0xb8>
 800d164:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d168:	2d00      	cmp	r5, #0
 800d16a:	da03      	bge.n	800d174 <_printf_i+0xd0>
 800d16c:	232d      	movs	r3, #45	@ 0x2d
 800d16e:	426d      	negs	r5, r5
 800d170:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d174:	4858      	ldr	r0, [pc, #352]	@ (800d2d8 <_printf_i+0x234>)
 800d176:	230a      	movs	r3, #10
 800d178:	e011      	b.n	800d19e <_printf_i+0xfa>
 800d17a:	6821      	ldr	r1, [r4, #0]
 800d17c:	6833      	ldr	r3, [r6, #0]
 800d17e:	0608      	lsls	r0, r1, #24
 800d180:	f853 5b04 	ldr.w	r5, [r3], #4
 800d184:	d402      	bmi.n	800d18c <_printf_i+0xe8>
 800d186:	0649      	lsls	r1, r1, #25
 800d188:	bf48      	it	mi
 800d18a:	b2ad      	uxthmi	r5, r5
 800d18c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d18e:	4852      	ldr	r0, [pc, #328]	@ (800d2d8 <_printf_i+0x234>)
 800d190:	6033      	str	r3, [r6, #0]
 800d192:	bf14      	ite	ne
 800d194:	230a      	movne	r3, #10
 800d196:	2308      	moveq	r3, #8
 800d198:	2100      	movs	r1, #0
 800d19a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d19e:	6866      	ldr	r6, [r4, #4]
 800d1a0:	60a6      	str	r6, [r4, #8]
 800d1a2:	2e00      	cmp	r6, #0
 800d1a4:	db05      	blt.n	800d1b2 <_printf_i+0x10e>
 800d1a6:	6821      	ldr	r1, [r4, #0]
 800d1a8:	432e      	orrs	r6, r5
 800d1aa:	f021 0104 	bic.w	r1, r1, #4
 800d1ae:	6021      	str	r1, [r4, #0]
 800d1b0:	d04b      	beq.n	800d24a <_printf_i+0x1a6>
 800d1b2:	4616      	mov	r6, r2
 800d1b4:	fbb5 f1f3 	udiv	r1, r5, r3
 800d1b8:	fb03 5711 	mls	r7, r3, r1, r5
 800d1bc:	5dc7      	ldrb	r7, [r0, r7]
 800d1be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d1c2:	462f      	mov	r7, r5
 800d1c4:	42bb      	cmp	r3, r7
 800d1c6:	460d      	mov	r5, r1
 800d1c8:	d9f4      	bls.n	800d1b4 <_printf_i+0x110>
 800d1ca:	2b08      	cmp	r3, #8
 800d1cc:	d10b      	bne.n	800d1e6 <_printf_i+0x142>
 800d1ce:	6823      	ldr	r3, [r4, #0]
 800d1d0:	07df      	lsls	r7, r3, #31
 800d1d2:	d508      	bpl.n	800d1e6 <_printf_i+0x142>
 800d1d4:	6923      	ldr	r3, [r4, #16]
 800d1d6:	6861      	ldr	r1, [r4, #4]
 800d1d8:	4299      	cmp	r1, r3
 800d1da:	bfde      	ittt	le
 800d1dc:	2330      	movle	r3, #48	@ 0x30
 800d1de:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d1e2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d1e6:	1b92      	subs	r2, r2, r6
 800d1e8:	6122      	str	r2, [r4, #16]
 800d1ea:	f8cd a000 	str.w	sl, [sp]
 800d1ee:	464b      	mov	r3, r9
 800d1f0:	aa03      	add	r2, sp, #12
 800d1f2:	4621      	mov	r1, r4
 800d1f4:	4640      	mov	r0, r8
 800d1f6:	f7ff fee7 	bl	800cfc8 <_printf_common>
 800d1fa:	3001      	adds	r0, #1
 800d1fc:	d14a      	bne.n	800d294 <_printf_i+0x1f0>
 800d1fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d202:	b004      	add	sp, #16
 800d204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d208:	6823      	ldr	r3, [r4, #0]
 800d20a:	f043 0320 	orr.w	r3, r3, #32
 800d20e:	6023      	str	r3, [r4, #0]
 800d210:	4832      	ldr	r0, [pc, #200]	@ (800d2dc <_printf_i+0x238>)
 800d212:	2778      	movs	r7, #120	@ 0x78
 800d214:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d218:	6823      	ldr	r3, [r4, #0]
 800d21a:	6831      	ldr	r1, [r6, #0]
 800d21c:	061f      	lsls	r7, r3, #24
 800d21e:	f851 5b04 	ldr.w	r5, [r1], #4
 800d222:	d402      	bmi.n	800d22a <_printf_i+0x186>
 800d224:	065f      	lsls	r7, r3, #25
 800d226:	bf48      	it	mi
 800d228:	b2ad      	uxthmi	r5, r5
 800d22a:	6031      	str	r1, [r6, #0]
 800d22c:	07d9      	lsls	r1, r3, #31
 800d22e:	bf44      	itt	mi
 800d230:	f043 0320 	orrmi.w	r3, r3, #32
 800d234:	6023      	strmi	r3, [r4, #0]
 800d236:	b11d      	cbz	r5, 800d240 <_printf_i+0x19c>
 800d238:	2310      	movs	r3, #16
 800d23a:	e7ad      	b.n	800d198 <_printf_i+0xf4>
 800d23c:	4826      	ldr	r0, [pc, #152]	@ (800d2d8 <_printf_i+0x234>)
 800d23e:	e7e9      	b.n	800d214 <_printf_i+0x170>
 800d240:	6823      	ldr	r3, [r4, #0]
 800d242:	f023 0320 	bic.w	r3, r3, #32
 800d246:	6023      	str	r3, [r4, #0]
 800d248:	e7f6      	b.n	800d238 <_printf_i+0x194>
 800d24a:	4616      	mov	r6, r2
 800d24c:	e7bd      	b.n	800d1ca <_printf_i+0x126>
 800d24e:	6833      	ldr	r3, [r6, #0]
 800d250:	6825      	ldr	r5, [r4, #0]
 800d252:	6961      	ldr	r1, [r4, #20]
 800d254:	1d18      	adds	r0, r3, #4
 800d256:	6030      	str	r0, [r6, #0]
 800d258:	062e      	lsls	r6, r5, #24
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	d501      	bpl.n	800d262 <_printf_i+0x1be>
 800d25e:	6019      	str	r1, [r3, #0]
 800d260:	e002      	b.n	800d268 <_printf_i+0x1c4>
 800d262:	0668      	lsls	r0, r5, #25
 800d264:	d5fb      	bpl.n	800d25e <_printf_i+0x1ba>
 800d266:	8019      	strh	r1, [r3, #0]
 800d268:	2300      	movs	r3, #0
 800d26a:	6123      	str	r3, [r4, #16]
 800d26c:	4616      	mov	r6, r2
 800d26e:	e7bc      	b.n	800d1ea <_printf_i+0x146>
 800d270:	6833      	ldr	r3, [r6, #0]
 800d272:	1d1a      	adds	r2, r3, #4
 800d274:	6032      	str	r2, [r6, #0]
 800d276:	681e      	ldr	r6, [r3, #0]
 800d278:	6862      	ldr	r2, [r4, #4]
 800d27a:	2100      	movs	r1, #0
 800d27c:	4630      	mov	r0, r6
 800d27e:	f7f2 ff8f 	bl	80001a0 <memchr>
 800d282:	b108      	cbz	r0, 800d288 <_printf_i+0x1e4>
 800d284:	1b80      	subs	r0, r0, r6
 800d286:	6060      	str	r0, [r4, #4]
 800d288:	6863      	ldr	r3, [r4, #4]
 800d28a:	6123      	str	r3, [r4, #16]
 800d28c:	2300      	movs	r3, #0
 800d28e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d292:	e7aa      	b.n	800d1ea <_printf_i+0x146>
 800d294:	6923      	ldr	r3, [r4, #16]
 800d296:	4632      	mov	r2, r6
 800d298:	4649      	mov	r1, r9
 800d29a:	4640      	mov	r0, r8
 800d29c:	47d0      	blx	sl
 800d29e:	3001      	adds	r0, #1
 800d2a0:	d0ad      	beq.n	800d1fe <_printf_i+0x15a>
 800d2a2:	6823      	ldr	r3, [r4, #0]
 800d2a4:	079b      	lsls	r3, r3, #30
 800d2a6:	d413      	bmi.n	800d2d0 <_printf_i+0x22c>
 800d2a8:	68e0      	ldr	r0, [r4, #12]
 800d2aa:	9b03      	ldr	r3, [sp, #12]
 800d2ac:	4298      	cmp	r0, r3
 800d2ae:	bfb8      	it	lt
 800d2b0:	4618      	movlt	r0, r3
 800d2b2:	e7a6      	b.n	800d202 <_printf_i+0x15e>
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	4632      	mov	r2, r6
 800d2b8:	4649      	mov	r1, r9
 800d2ba:	4640      	mov	r0, r8
 800d2bc:	47d0      	blx	sl
 800d2be:	3001      	adds	r0, #1
 800d2c0:	d09d      	beq.n	800d1fe <_printf_i+0x15a>
 800d2c2:	3501      	adds	r5, #1
 800d2c4:	68e3      	ldr	r3, [r4, #12]
 800d2c6:	9903      	ldr	r1, [sp, #12]
 800d2c8:	1a5b      	subs	r3, r3, r1
 800d2ca:	42ab      	cmp	r3, r5
 800d2cc:	dcf2      	bgt.n	800d2b4 <_printf_i+0x210>
 800d2ce:	e7eb      	b.n	800d2a8 <_printf_i+0x204>
 800d2d0:	2500      	movs	r5, #0
 800d2d2:	f104 0619 	add.w	r6, r4, #25
 800d2d6:	e7f5      	b.n	800d2c4 <_printf_i+0x220>
 800d2d8:	0800ef6d 	.word	0x0800ef6d
 800d2dc:	0800ef7e 	.word	0x0800ef7e

0800d2e0 <_scanf_chars>:
 800d2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2e4:	4615      	mov	r5, r2
 800d2e6:	688a      	ldr	r2, [r1, #8]
 800d2e8:	4680      	mov	r8, r0
 800d2ea:	460c      	mov	r4, r1
 800d2ec:	b932      	cbnz	r2, 800d2fc <_scanf_chars+0x1c>
 800d2ee:	698a      	ldr	r2, [r1, #24]
 800d2f0:	2a00      	cmp	r2, #0
 800d2f2:	bf14      	ite	ne
 800d2f4:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800d2f8:	2201      	moveq	r2, #1
 800d2fa:	608a      	str	r2, [r1, #8]
 800d2fc:	6822      	ldr	r2, [r4, #0]
 800d2fe:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800d390 <_scanf_chars+0xb0>
 800d302:	06d1      	lsls	r1, r2, #27
 800d304:	bf5f      	itttt	pl
 800d306:	681a      	ldrpl	r2, [r3, #0]
 800d308:	1d11      	addpl	r1, r2, #4
 800d30a:	6019      	strpl	r1, [r3, #0]
 800d30c:	6816      	ldrpl	r6, [r2, #0]
 800d30e:	2700      	movs	r7, #0
 800d310:	69a0      	ldr	r0, [r4, #24]
 800d312:	b188      	cbz	r0, 800d338 <_scanf_chars+0x58>
 800d314:	2801      	cmp	r0, #1
 800d316:	d107      	bne.n	800d328 <_scanf_chars+0x48>
 800d318:	682b      	ldr	r3, [r5, #0]
 800d31a:	781a      	ldrb	r2, [r3, #0]
 800d31c:	6963      	ldr	r3, [r4, #20]
 800d31e:	5c9b      	ldrb	r3, [r3, r2]
 800d320:	b953      	cbnz	r3, 800d338 <_scanf_chars+0x58>
 800d322:	2f00      	cmp	r7, #0
 800d324:	d031      	beq.n	800d38a <_scanf_chars+0xaa>
 800d326:	e022      	b.n	800d36e <_scanf_chars+0x8e>
 800d328:	2802      	cmp	r0, #2
 800d32a:	d120      	bne.n	800d36e <_scanf_chars+0x8e>
 800d32c:	682b      	ldr	r3, [r5, #0]
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d334:	071b      	lsls	r3, r3, #28
 800d336:	d41a      	bmi.n	800d36e <_scanf_chars+0x8e>
 800d338:	6823      	ldr	r3, [r4, #0]
 800d33a:	06da      	lsls	r2, r3, #27
 800d33c:	bf5e      	ittt	pl
 800d33e:	682b      	ldrpl	r3, [r5, #0]
 800d340:	781b      	ldrbpl	r3, [r3, #0]
 800d342:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d346:	682a      	ldr	r2, [r5, #0]
 800d348:	686b      	ldr	r3, [r5, #4]
 800d34a:	3201      	adds	r2, #1
 800d34c:	602a      	str	r2, [r5, #0]
 800d34e:	68a2      	ldr	r2, [r4, #8]
 800d350:	3b01      	subs	r3, #1
 800d352:	3a01      	subs	r2, #1
 800d354:	606b      	str	r3, [r5, #4]
 800d356:	3701      	adds	r7, #1
 800d358:	60a2      	str	r2, [r4, #8]
 800d35a:	b142      	cbz	r2, 800d36e <_scanf_chars+0x8e>
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	dcd7      	bgt.n	800d310 <_scanf_chars+0x30>
 800d360:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d364:	4629      	mov	r1, r5
 800d366:	4640      	mov	r0, r8
 800d368:	4798      	blx	r3
 800d36a:	2800      	cmp	r0, #0
 800d36c:	d0d0      	beq.n	800d310 <_scanf_chars+0x30>
 800d36e:	6823      	ldr	r3, [r4, #0]
 800d370:	f013 0310 	ands.w	r3, r3, #16
 800d374:	d105      	bne.n	800d382 <_scanf_chars+0xa2>
 800d376:	68e2      	ldr	r2, [r4, #12]
 800d378:	3201      	adds	r2, #1
 800d37a:	60e2      	str	r2, [r4, #12]
 800d37c:	69a2      	ldr	r2, [r4, #24]
 800d37e:	b102      	cbz	r2, 800d382 <_scanf_chars+0xa2>
 800d380:	7033      	strb	r3, [r6, #0]
 800d382:	6923      	ldr	r3, [r4, #16]
 800d384:	443b      	add	r3, r7
 800d386:	6123      	str	r3, [r4, #16]
 800d388:	2000      	movs	r0, #0
 800d38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d38e:	bf00      	nop
 800d390:	0800efab 	.word	0x0800efab

0800d394 <_scanf_i>:
 800d394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d398:	4698      	mov	r8, r3
 800d39a:	4b74      	ldr	r3, [pc, #464]	@ (800d56c <_scanf_i+0x1d8>)
 800d39c:	460c      	mov	r4, r1
 800d39e:	4682      	mov	sl, r0
 800d3a0:	4616      	mov	r6, r2
 800d3a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d3a6:	b087      	sub	sp, #28
 800d3a8:	ab03      	add	r3, sp, #12
 800d3aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d3ae:	4b70      	ldr	r3, [pc, #448]	@ (800d570 <_scanf_i+0x1dc>)
 800d3b0:	69a1      	ldr	r1, [r4, #24]
 800d3b2:	4a70      	ldr	r2, [pc, #448]	@ (800d574 <_scanf_i+0x1e0>)
 800d3b4:	2903      	cmp	r1, #3
 800d3b6:	bf08      	it	eq
 800d3b8:	461a      	moveq	r2, r3
 800d3ba:	68a3      	ldr	r3, [r4, #8]
 800d3bc:	9201      	str	r2, [sp, #4]
 800d3be:	1e5a      	subs	r2, r3, #1
 800d3c0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d3c4:	bf88      	it	hi
 800d3c6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d3ca:	4627      	mov	r7, r4
 800d3cc:	bf82      	ittt	hi
 800d3ce:	eb03 0905 	addhi.w	r9, r3, r5
 800d3d2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d3d6:	60a3      	strhi	r3, [r4, #8]
 800d3d8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d3dc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800d3e0:	bf98      	it	ls
 800d3e2:	f04f 0900 	movls.w	r9, #0
 800d3e6:	6023      	str	r3, [r4, #0]
 800d3e8:	463d      	mov	r5, r7
 800d3ea:	f04f 0b00 	mov.w	fp, #0
 800d3ee:	6831      	ldr	r1, [r6, #0]
 800d3f0:	ab03      	add	r3, sp, #12
 800d3f2:	7809      	ldrb	r1, [r1, #0]
 800d3f4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d3f8:	2202      	movs	r2, #2
 800d3fa:	f7f2 fed1 	bl	80001a0 <memchr>
 800d3fe:	b328      	cbz	r0, 800d44c <_scanf_i+0xb8>
 800d400:	f1bb 0f01 	cmp.w	fp, #1
 800d404:	d159      	bne.n	800d4ba <_scanf_i+0x126>
 800d406:	6862      	ldr	r2, [r4, #4]
 800d408:	b92a      	cbnz	r2, 800d416 <_scanf_i+0x82>
 800d40a:	6822      	ldr	r2, [r4, #0]
 800d40c:	2108      	movs	r1, #8
 800d40e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d412:	6061      	str	r1, [r4, #4]
 800d414:	6022      	str	r2, [r4, #0]
 800d416:	6822      	ldr	r2, [r4, #0]
 800d418:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800d41c:	6022      	str	r2, [r4, #0]
 800d41e:	68a2      	ldr	r2, [r4, #8]
 800d420:	1e51      	subs	r1, r2, #1
 800d422:	60a1      	str	r1, [r4, #8]
 800d424:	b192      	cbz	r2, 800d44c <_scanf_i+0xb8>
 800d426:	6832      	ldr	r2, [r6, #0]
 800d428:	1c51      	adds	r1, r2, #1
 800d42a:	6031      	str	r1, [r6, #0]
 800d42c:	7812      	ldrb	r2, [r2, #0]
 800d42e:	f805 2b01 	strb.w	r2, [r5], #1
 800d432:	6872      	ldr	r2, [r6, #4]
 800d434:	3a01      	subs	r2, #1
 800d436:	2a00      	cmp	r2, #0
 800d438:	6072      	str	r2, [r6, #4]
 800d43a:	dc07      	bgt.n	800d44c <_scanf_i+0xb8>
 800d43c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800d440:	4631      	mov	r1, r6
 800d442:	4650      	mov	r0, sl
 800d444:	4790      	blx	r2
 800d446:	2800      	cmp	r0, #0
 800d448:	f040 8085 	bne.w	800d556 <_scanf_i+0x1c2>
 800d44c:	f10b 0b01 	add.w	fp, fp, #1
 800d450:	f1bb 0f03 	cmp.w	fp, #3
 800d454:	d1cb      	bne.n	800d3ee <_scanf_i+0x5a>
 800d456:	6863      	ldr	r3, [r4, #4]
 800d458:	b90b      	cbnz	r3, 800d45e <_scanf_i+0xca>
 800d45a:	230a      	movs	r3, #10
 800d45c:	6063      	str	r3, [r4, #4]
 800d45e:	6863      	ldr	r3, [r4, #4]
 800d460:	4945      	ldr	r1, [pc, #276]	@ (800d578 <_scanf_i+0x1e4>)
 800d462:	6960      	ldr	r0, [r4, #20]
 800d464:	1ac9      	subs	r1, r1, r3
 800d466:	f000 f889 	bl	800d57c <__sccl>
 800d46a:	f04f 0b00 	mov.w	fp, #0
 800d46e:	68a3      	ldr	r3, [r4, #8]
 800d470:	6822      	ldr	r2, [r4, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d03d      	beq.n	800d4f2 <_scanf_i+0x15e>
 800d476:	6831      	ldr	r1, [r6, #0]
 800d478:	6960      	ldr	r0, [r4, #20]
 800d47a:	f891 c000 	ldrb.w	ip, [r1]
 800d47e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d482:	2800      	cmp	r0, #0
 800d484:	d035      	beq.n	800d4f2 <_scanf_i+0x15e>
 800d486:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800d48a:	d124      	bne.n	800d4d6 <_scanf_i+0x142>
 800d48c:	0510      	lsls	r0, r2, #20
 800d48e:	d522      	bpl.n	800d4d6 <_scanf_i+0x142>
 800d490:	f10b 0b01 	add.w	fp, fp, #1
 800d494:	f1b9 0f00 	cmp.w	r9, #0
 800d498:	d003      	beq.n	800d4a2 <_scanf_i+0x10e>
 800d49a:	3301      	adds	r3, #1
 800d49c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800d4a0:	60a3      	str	r3, [r4, #8]
 800d4a2:	6873      	ldr	r3, [r6, #4]
 800d4a4:	3b01      	subs	r3, #1
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	6073      	str	r3, [r6, #4]
 800d4aa:	dd1b      	ble.n	800d4e4 <_scanf_i+0x150>
 800d4ac:	6833      	ldr	r3, [r6, #0]
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	6033      	str	r3, [r6, #0]
 800d4b2:	68a3      	ldr	r3, [r4, #8]
 800d4b4:	3b01      	subs	r3, #1
 800d4b6:	60a3      	str	r3, [r4, #8]
 800d4b8:	e7d9      	b.n	800d46e <_scanf_i+0xda>
 800d4ba:	f1bb 0f02 	cmp.w	fp, #2
 800d4be:	d1ae      	bne.n	800d41e <_scanf_i+0x8a>
 800d4c0:	6822      	ldr	r2, [r4, #0]
 800d4c2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800d4c6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800d4ca:	d1bf      	bne.n	800d44c <_scanf_i+0xb8>
 800d4cc:	2110      	movs	r1, #16
 800d4ce:	6061      	str	r1, [r4, #4]
 800d4d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d4d4:	e7a2      	b.n	800d41c <_scanf_i+0x88>
 800d4d6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800d4da:	6022      	str	r2, [r4, #0]
 800d4dc:	780b      	ldrb	r3, [r1, #0]
 800d4de:	f805 3b01 	strb.w	r3, [r5], #1
 800d4e2:	e7de      	b.n	800d4a2 <_scanf_i+0x10e>
 800d4e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d4e8:	4631      	mov	r1, r6
 800d4ea:	4650      	mov	r0, sl
 800d4ec:	4798      	blx	r3
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	d0df      	beq.n	800d4b2 <_scanf_i+0x11e>
 800d4f2:	6823      	ldr	r3, [r4, #0]
 800d4f4:	05d9      	lsls	r1, r3, #23
 800d4f6:	d50d      	bpl.n	800d514 <_scanf_i+0x180>
 800d4f8:	42bd      	cmp	r5, r7
 800d4fa:	d909      	bls.n	800d510 <_scanf_i+0x17c>
 800d4fc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d500:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d504:	4632      	mov	r2, r6
 800d506:	4650      	mov	r0, sl
 800d508:	4798      	blx	r3
 800d50a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800d50e:	464d      	mov	r5, r9
 800d510:	42bd      	cmp	r5, r7
 800d512:	d028      	beq.n	800d566 <_scanf_i+0x1d2>
 800d514:	6822      	ldr	r2, [r4, #0]
 800d516:	f012 0210 	ands.w	r2, r2, #16
 800d51a:	d113      	bne.n	800d544 <_scanf_i+0x1b0>
 800d51c:	702a      	strb	r2, [r5, #0]
 800d51e:	6863      	ldr	r3, [r4, #4]
 800d520:	9e01      	ldr	r6, [sp, #4]
 800d522:	4639      	mov	r1, r7
 800d524:	4650      	mov	r0, sl
 800d526:	47b0      	blx	r6
 800d528:	f8d8 3000 	ldr.w	r3, [r8]
 800d52c:	6821      	ldr	r1, [r4, #0]
 800d52e:	1d1a      	adds	r2, r3, #4
 800d530:	f8c8 2000 	str.w	r2, [r8]
 800d534:	f011 0f20 	tst.w	r1, #32
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	d00f      	beq.n	800d55c <_scanf_i+0x1c8>
 800d53c:	6018      	str	r0, [r3, #0]
 800d53e:	68e3      	ldr	r3, [r4, #12]
 800d540:	3301      	adds	r3, #1
 800d542:	60e3      	str	r3, [r4, #12]
 800d544:	6923      	ldr	r3, [r4, #16]
 800d546:	1bed      	subs	r5, r5, r7
 800d548:	445d      	add	r5, fp
 800d54a:	442b      	add	r3, r5
 800d54c:	6123      	str	r3, [r4, #16]
 800d54e:	2000      	movs	r0, #0
 800d550:	b007      	add	sp, #28
 800d552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d556:	f04f 0b00 	mov.w	fp, #0
 800d55a:	e7ca      	b.n	800d4f2 <_scanf_i+0x15e>
 800d55c:	07ca      	lsls	r2, r1, #31
 800d55e:	bf4c      	ite	mi
 800d560:	8018      	strhmi	r0, [r3, #0]
 800d562:	6018      	strpl	r0, [r3, #0]
 800d564:	e7eb      	b.n	800d53e <_scanf_i+0x1aa>
 800d566:	2001      	movs	r0, #1
 800d568:	e7f2      	b.n	800d550 <_scanf_i+0x1bc>
 800d56a:	bf00      	nop
 800d56c:	0800ed00 	.word	0x0800ed00
 800d570:	0800d989 	.word	0x0800d989
 800d574:	0800da69 	.word	0x0800da69
 800d578:	0800ef9f 	.word	0x0800ef9f

0800d57c <__sccl>:
 800d57c:	b570      	push	{r4, r5, r6, lr}
 800d57e:	780b      	ldrb	r3, [r1, #0]
 800d580:	4604      	mov	r4, r0
 800d582:	2b5e      	cmp	r3, #94	@ 0x5e
 800d584:	bf0b      	itete	eq
 800d586:	784b      	ldrbeq	r3, [r1, #1]
 800d588:	1c4a      	addne	r2, r1, #1
 800d58a:	1c8a      	addeq	r2, r1, #2
 800d58c:	2100      	movne	r1, #0
 800d58e:	bf08      	it	eq
 800d590:	2101      	moveq	r1, #1
 800d592:	3801      	subs	r0, #1
 800d594:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800d598:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d59c:	42a8      	cmp	r0, r5
 800d59e:	d1fb      	bne.n	800d598 <__sccl+0x1c>
 800d5a0:	b90b      	cbnz	r3, 800d5a6 <__sccl+0x2a>
 800d5a2:	1e50      	subs	r0, r2, #1
 800d5a4:	bd70      	pop	{r4, r5, r6, pc}
 800d5a6:	f081 0101 	eor.w	r1, r1, #1
 800d5aa:	54e1      	strb	r1, [r4, r3]
 800d5ac:	4610      	mov	r0, r2
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d5b4:	2d2d      	cmp	r5, #45	@ 0x2d
 800d5b6:	d005      	beq.n	800d5c4 <__sccl+0x48>
 800d5b8:	2d5d      	cmp	r5, #93	@ 0x5d
 800d5ba:	d016      	beq.n	800d5ea <__sccl+0x6e>
 800d5bc:	2d00      	cmp	r5, #0
 800d5be:	d0f1      	beq.n	800d5a4 <__sccl+0x28>
 800d5c0:	462b      	mov	r3, r5
 800d5c2:	e7f2      	b.n	800d5aa <__sccl+0x2e>
 800d5c4:	7846      	ldrb	r6, [r0, #1]
 800d5c6:	2e5d      	cmp	r6, #93	@ 0x5d
 800d5c8:	d0fa      	beq.n	800d5c0 <__sccl+0x44>
 800d5ca:	42b3      	cmp	r3, r6
 800d5cc:	dcf8      	bgt.n	800d5c0 <__sccl+0x44>
 800d5ce:	3002      	adds	r0, #2
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	3201      	adds	r2, #1
 800d5d4:	4296      	cmp	r6, r2
 800d5d6:	54a1      	strb	r1, [r4, r2]
 800d5d8:	dcfb      	bgt.n	800d5d2 <__sccl+0x56>
 800d5da:	1af2      	subs	r2, r6, r3
 800d5dc:	3a01      	subs	r2, #1
 800d5de:	1c5d      	adds	r5, r3, #1
 800d5e0:	42b3      	cmp	r3, r6
 800d5e2:	bfa8      	it	ge
 800d5e4:	2200      	movge	r2, #0
 800d5e6:	18ab      	adds	r3, r5, r2
 800d5e8:	e7e1      	b.n	800d5ae <__sccl+0x32>
 800d5ea:	4610      	mov	r0, r2
 800d5ec:	e7da      	b.n	800d5a4 <__sccl+0x28>
	...

0800d5f0 <__sflush_r>:
 800d5f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5f8:	0716      	lsls	r6, r2, #28
 800d5fa:	4605      	mov	r5, r0
 800d5fc:	460c      	mov	r4, r1
 800d5fe:	d454      	bmi.n	800d6aa <__sflush_r+0xba>
 800d600:	684b      	ldr	r3, [r1, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	dc02      	bgt.n	800d60c <__sflush_r+0x1c>
 800d606:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d608:	2b00      	cmp	r3, #0
 800d60a:	dd48      	ble.n	800d69e <__sflush_r+0xae>
 800d60c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d60e:	2e00      	cmp	r6, #0
 800d610:	d045      	beq.n	800d69e <__sflush_r+0xae>
 800d612:	2300      	movs	r3, #0
 800d614:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d618:	682f      	ldr	r7, [r5, #0]
 800d61a:	6a21      	ldr	r1, [r4, #32]
 800d61c:	602b      	str	r3, [r5, #0]
 800d61e:	d030      	beq.n	800d682 <__sflush_r+0x92>
 800d620:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d622:	89a3      	ldrh	r3, [r4, #12]
 800d624:	0759      	lsls	r1, r3, #29
 800d626:	d505      	bpl.n	800d634 <__sflush_r+0x44>
 800d628:	6863      	ldr	r3, [r4, #4]
 800d62a:	1ad2      	subs	r2, r2, r3
 800d62c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d62e:	b10b      	cbz	r3, 800d634 <__sflush_r+0x44>
 800d630:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d632:	1ad2      	subs	r2, r2, r3
 800d634:	2300      	movs	r3, #0
 800d636:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d638:	6a21      	ldr	r1, [r4, #32]
 800d63a:	4628      	mov	r0, r5
 800d63c:	47b0      	blx	r6
 800d63e:	1c43      	adds	r3, r0, #1
 800d640:	89a3      	ldrh	r3, [r4, #12]
 800d642:	d106      	bne.n	800d652 <__sflush_r+0x62>
 800d644:	6829      	ldr	r1, [r5, #0]
 800d646:	291d      	cmp	r1, #29
 800d648:	d82b      	bhi.n	800d6a2 <__sflush_r+0xb2>
 800d64a:	4a2a      	ldr	r2, [pc, #168]	@ (800d6f4 <__sflush_r+0x104>)
 800d64c:	40ca      	lsrs	r2, r1
 800d64e:	07d6      	lsls	r6, r2, #31
 800d650:	d527      	bpl.n	800d6a2 <__sflush_r+0xb2>
 800d652:	2200      	movs	r2, #0
 800d654:	6062      	str	r2, [r4, #4]
 800d656:	04d9      	lsls	r1, r3, #19
 800d658:	6922      	ldr	r2, [r4, #16]
 800d65a:	6022      	str	r2, [r4, #0]
 800d65c:	d504      	bpl.n	800d668 <__sflush_r+0x78>
 800d65e:	1c42      	adds	r2, r0, #1
 800d660:	d101      	bne.n	800d666 <__sflush_r+0x76>
 800d662:	682b      	ldr	r3, [r5, #0]
 800d664:	b903      	cbnz	r3, 800d668 <__sflush_r+0x78>
 800d666:	6560      	str	r0, [r4, #84]	@ 0x54
 800d668:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d66a:	602f      	str	r7, [r5, #0]
 800d66c:	b1b9      	cbz	r1, 800d69e <__sflush_r+0xae>
 800d66e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d672:	4299      	cmp	r1, r3
 800d674:	d002      	beq.n	800d67c <__sflush_r+0x8c>
 800d676:	4628      	mov	r0, r5
 800d678:	f7fe fff2 	bl	800c660 <_free_r>
 800d67c:	2300      	movs	r3, #0
 800d67e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d680:	e00d      	b.n	800d69e <__sflush_r+0xae>
 800d682:	2301      	movs	r3, #1
 800d684:	4628      	mov	r0, r5
 800d686:	47b0      	blx	r6
 800d688:	4602      	mov	r2, r0
 800d68a:	1c50      	adds	r0, r2, #1
 800d68c:	d1c9      	bne.n	800d622 <__sflush_r+0x32>
 800d68e:	682b      	ldr	r3, [r5, #0]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d0c6      	beq.n	800d622 <__sflush_r+0x32>
 800d694:	2b1d      	cmp	r3, #29
 800d696:	d001      	beq.n	800d69c <__sflush_r+0xac>
 800d698:	2b16      	cmp	r3, #22
 800d69a:	d11e      	bne.n	800d6da <__sflush_r+0xea>
 800d69c:	602f      	str	r7, [r5, #0]
 800d69e:	2000      	movs	r0, #0
 800d6a0:	e022      	b.n	800d6e8 <__sflush_r+0xf8>
 800d6a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6a6:	b21b      	sxth	r3, r3
 800d6a8:	e01b      	b.n	800d6e2 <__sflush_r+0xf2>
 800d6aa:	690f      	ldr	r7, [r1, #16]
 800d6ac:	2f00      	cmp	r7, #0
 800d6ae:	d0f6      	beq.n	800d69e <__sflush_r+0xae>
 800d6b0:	0793      	lsls	r3, r2, #30
 800d6b2:	680e      	ldr	r6, [r1, #0]
 800d6b4:	bf08      	it	eq
 800d6b6:	694b      	ldreq	r3, [r1, #20]
 800d6b8:	600f      	str	r7, [r1, #0]
 800d6ba:	bf18      	it	ne
 800d6bc:	2300      	movne	r3, #0
 800d6be:	eba6 0807 	sub.w	r8, r6, r7
 800d6c2:	608b      	str	r3, [r1, #8]
 800d6c4:	f1b8 0f00 	cmp.w	r8, #0
 800d6c8:	dde9      	ble.n	800d69e <__sflush_r+0xae>
 800d6ca:	6a21      	ldr	r1, [r4, #32]
 800d6cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d6ce:	4643      	mov	r3, r8
 800d6d0:	463a      	mov	r2, r7
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	47b0      	blx	r6
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	dc08      	bgt.n	800d6ec <__sflush_r+0xfc>
 800d6da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6e2:	81a3      	strh	r3, [r4, #12]
 800d6e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6ec:	4407      	add	r7, r0
 800d6ee:	eba8 0800 	sub.w	r8, r8, r0
 800d6f2:	e7e7      	b.n	800d6c4 <__sflush_r+0xd4>
 800d6f4:	20400001 	.word	0x20400001

0800d6f8 <_fflush_r>:
 800d6f8:	b538      	push	{r3, r4, r5, lr}
 800d6fa:	690b      	ldr	r3, [r1, #16]
 800d6fc:	4605      	mov	r5, r0
 800d6fe:	460c      	mov	r4, r1
 800d700:	b913      	cbnz	r3, 800d708 <_fflush_r+0x10>
 800d702:	2500      	movs	r5, #0
 800d704:	4628      	mov	r0, r5
 800d706:	bd38      	pop	{r3, r4, r5, pc}
 800d708:	b118      	cbz	r0, 800d712 <_fflush_r+0x1a>
 800d70a:	6a03      	ldr	r3, [r0, #32]
 800d70c:	b90b      	cbnz	r3, 800d712 <_fflush_r+0x1a>
 800d70e:	f7fe fe5b 	bl	800c3c8 <__sinit>
 800d712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d0f3      	beq.n	800d702 <_fflush_r+0xa>
 800d71a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d71c:	07d0      	lsls	r0, r2, #31
 800d71e:	d404      	bmi.n	800d72a <_fflush_r+0x32>
 800d720:	0599      	lsls	r1, r3, #22
 800d722:	d402      	bmi.n	800d72a <_fflush_r+0x32>
 800d724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d726:	f7fe ff72 	bl	800c60e <__retarget_lock_acquire_recursive>
 800d72a:	4628      	mov	r0, r5
 800d72c:	4621      	mov	r1, r4
 800d72e:	f7ff ff5f 	bl	800d5f0 <__sflush_r>
 800d732:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d734:	07da      	lsls	r2, r3, #31
 800d736:	4605      	mov	r5, r0
 800d738:	d4e4      	bmi.n	800d704 <_fflush_r+0xc>
 800d73a:	89a3      	ldrh	r3, [r4, #12]
 800d73c:	059b      	lsls	r3, r3, #22
 800d73e:	d4e1      	bmi.n	800d704 <_fflush_r+0xc>
 800d740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d742:	f7fe ff65 	bl	800c610 <__retarget_lock_release_recursive>
 800d746:	e7dd      	b.n	800d704 <_fflush_r+0xc>

0800d748 <__submore>:
 800d748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d74c:	460c      	mov	r4, r1
 800d74e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d750:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d754:	4299      	cmp	r1, r3
 800d756:	d11d      	bne.n	800d794 <__submore+0x4c>
 800d758:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d75c:	f7fe fc88 	bl	800c070 <_malloc_r>
 800d760:	b918      	cbnz	r0, 800d76a <__submore+0x22>
 800d762:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d76a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d76e:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d770:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800d774:	6360      	str	r0, [r4, #52]	@ 0x34
 800d776:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800d77a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d77e:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800d782:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d786:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800d78a:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800d78e:	6020      	str	r0, [r4, #0]
 800d790:	2000      	movs	r0, #0
 800d792:	e7e8      	b.n	800d766 <__submore+0x1e>
 800d794:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800d796:	0077      	lsls	r7, r6, #1
 800d798:	463a      	mov	r2, r7
 800d79a:	f000 f80f 	bl	800d7bc <_realloc_r>
 800d79e:	4605      	mov	r5, r0
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d0de      	beq.n	800d762 <__submore+0x1a>
 800d7a4:	eb00 0806 	add.w	r8, r0, r6
 800d7a8:	4601      	mov	r1, r0
 800d7aa:	4632      	mov	r2, r6
 800d7ac:	4640      	mov	r0, r8
 800d7ae:	f7fe ff41 	bl	800c634 <memcpy>
 800d7b2:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800d7b6:	f8c4 8000 	str.w	r8, [r4]
 800d7ba:	e7e9      	b.n	800d790 <__submore+0x48>

0800d7bc <_realloc_r>:
 800d7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c0:	4607      	mov	r7, r0
 800d7c2:	4614      	mov	r4, r2
 800d7c4:	460d      	mov	r5, r1
 800d7c6:	b921      	cbnz	r1, 800d7d2 <_realloc_r+0x16>
 800d7c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7cc:	4611      	mov	r1, r2
 800d7ce:	f7fe bc4f 	b.w	800c070 <_malloc_r>
 800d7d2:	b92a      	cbnz	r2, 800d7e0 <_realloc_r+0x24>
 800d7d4:	f7fe ff44 	bl	800c660 <_free_r>
 800d7d8:	4625      	mov	r5, r4
 800d7da:	4628      	mov	r0, r5
 800d7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7e0:	f000 fa7c 	bl	800dcdc <_malloc_usable_size_r>
 800d7e4:	4284      	cmp	r4, r0
 800d7e6:	4606      	mov	r6, r0
 800d7e8:	d802      	bhi.n	800d7f0 <_realloc_r+0x34>
 800d7ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d7ee:	d8f4      	bhi.n	800d7da <_realloc_r+0x1e>
 800d7f0:	4621      	mov	r1, r4
 800d7f2:	4638      	mov	r0, r7
 800d7f4:	f7fe fc3c 	bl	800c070 <_malloc_r>
 800d7f8:	4680      	mov	r8, r0
 800d7fa:	b908      	cbnz	r0, 800d800 <_realloc_r+0x44>
 800d7fc:	4645      	mov	r5, r8
 800d7fe:	e7ec      	b.n	800d7da <_realloc_r+0x1e>
 800d800:	42b4      	cmp	r4, r6
 800d802:	4622      	mov	r2, r4
 800d804:	4629      	mov	r1, r5
 800d806:	bf28      	it	cs
 800d808:	4632      	movcs	r2, r6
 800d80a:	f7fe ff13 	bl	800c634 <memcpy>
 800d80e:	4629      	mov	r1, r5
 800d810:	4638      	mov	r0, r7
 800d812:	f7fe ff25 	bl	800c660 <_free_r>
 800d816:	e7f1      	b.n	800d7fc <_realloc_r+0x40>

0800d818 <__swbuf_r>:
 800d818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d81a:	460e      	mov	r6, r1
 800d81c:	4614      	mov	r4, r2
 800d81e:	4605      	mov	r5, r0
 800d820:	b118      	cbz	r0, 800d82a <__swbuf_r+0x12>
 800d822:	6a03      	ldr	r3, [r0, #32]
 800d824:	b90b      	cbnz	r3, 800d82a <__swbuf_r+0x12>
 800d826:	f7fe fdcf 	bl	800c3c8 <__sinit>
 800d82a:	69a3      	ldr	r3, [r4, #24]
 800d82c:	60a3      	str	r3, [r4, #8]
 800d82e:	89a3      	ldrh	r3, [r4, #12]
 800d830:	071a      	lsls	r2, r3, #28
 800d832:	d501      	bpl.n	800d838 <__swbuf_r+0x20>
 800d834:	6923      	ldr	r3, [r4, #16]
 800d836:	b943      	cbnz	r3, 800d84a <__swbuf_r+0x32>
 800d838:	4621      	mov	r1, r4
 800d83a:	4628      	mov	r0, r5
 800d83c:	f000 f916 	bl	800da6c <__swsetup_r>
 800d840:	b118      	cbz	r0, 800d84a <__swbuf_r+0x32>
 800d842:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d846:	4638      	mov	r0, r7
 800d848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d84a:	6823      	ldr	r3, [r4, #0]
 800d84c:	6922      	ldr	r2, [r4, #16]
 800d84e:	1a98      	subs	r0, r3, r2
 800d850:	6963      	ldr	r3, [r4, #20]
 800d852:	b2f6      	uxtb	r6, r6
 800d854:	4283      	cmp	r3, r0
 800d856:	4637      	mov	r7, r6
 800d858:	dc05      	bgt.n	800d866 <__swbuf_r+0x4e>
 800d85a:	4621      	mov	r1, r4
 800d85c:	4628      	mov	r0, r5
 800d85e:	f7ff ff4b 	bl	800d6f8 <_fflush_r>
 800d862:	2800      	cmp	r0, #0
 800d864:	d1ed      	bne.n	800d842 <__swbuf_r+0x2a>
 800d866:	68a3      	ldr	r3, [r4, #8]
 800d868:	3b01      	subs	r3, #1
 800d86a:	60a3      	str	r3, [r4, #8]
 800d86c:	6823      	ldr	r3, [r4, #0]
 800d86e:	1c5a      	adds	r2, r3, #1
 800d870:	6022      	str	r2, [r4, #0]
 800d872:	701e      	strb	r6, [r3, #0]
 800d874:	6962      	ldr	r2, [r4, #20]
 800d876:	1c43      	adds	r3, r0, #1
 800d878:	429a      	cmp	r2, r3
 800d87a:	d004      	beq.n	800d886 <__swbuf_r+0x6e>
 800d87c:	89a3      	ldrh	r3, [r4, #12]
 800d87e:	07db      	lsls	r3, r3, #31
 800d880:	d5e1      	bpl.n	800d846 <__swbuf_r+0x2e>
 800d882:	2e0a      	cmp	r6, #10
 800d884:	d1df      	bne.n	800d846 <__swbuf_r+0x2e>
 800d886:	4621      	mov	r1, r4
 800d888:	4628      	mov	r0, r5
 800d88a:	f7ff ff35 	bl	800d6f8 <_fflush_r>
 800d88e:	2800      	cmp	r0, #0
 800d890:	d0d9      	beq.n	800d846 <__swbuf_r+0x2e>
 800d892:	e7d6      	b.n	800d842 <__swbuf_r+0x2a>

0800d894 <_strtol_l.isra.0>:
 800d894:	2b24      	cmp	r3, #36	@ 0x24
 800d896:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d89a:	4686      	mov	lr, r0
 800d89c:	4690      	mov	r8, r2
 800d89e:	d801      	bhi.n	800d8a4 <_strtol_l.isra.0+0x10>
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	d106      	bne.n	800d8b2 <_strtol_l.isra.0+0x1e>
 800d8a4:	f7fe fe88 	bl	800c5b8 <__errno>
 800d8a8:	2316      	movs	r3, #22
 800d8aa:	6003      	str	r3, [r0, #0]
 800d8ac:	2000      	movs	r0, #0
 800d8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8b2:	4834      	ldr	r0, [pc, #208]	@ (800d984 <_strtol_l.isra.0+0xf0>)
 800d8b4:	460d      	mov	r5, r1
 800d8b6:	462a      	mov	r2, r5
 800d8b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8bc:	5d06      	ldrb	r6, [r0, r4]
 800d8be:	f016 0608 	ands.w	r6, r6, #8
 800d8c2:	d1f8      	bne.n	800d8b6 <_strtol_l.isra.0+0x22>
 800d8c4:	2c2d      	cmp	r4, #45	@ 0x2d
 800d8c6:	d110      	bne.n	800d8ea <_strtol_l.isra.0+0x56>
 800d8c8:	782c      	ldrb	r4, [r5, #0]
 800d8ca:	2601      	movs	r6, #1
 800d8cc:	1c95      	adds	r5, r2, #2
 800d8ce:	f033 0210 	bics.w	r2, r3, #16
 800d8d2:	d115      	bne.n	800d900 <_strtol_l.isra.0+0x6c>
 800d8d4:	2c30      	cmp	r4, #48	@ 0x30
 800d8d6:	d10d      	bne.n	800d8f4 <_strtol_l.isra.0+0x60>
 800d8d8:	782a      	ldrb	r2, [r5, #0]
 800d8da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d8de:	2a58      	cmp	r2, #88	@ 0x58
 800d8e0:	d108      	bne.n	800d8f4 <_strtol_l.isra.0+0x60>
 800d8e2:	786c      	ldrb	r4, [r5, #1]
 800d8e4:	3502      	adds	r5, #2
 800d8e6:	2310      	movs	r3, #16
 800d8e8:	e00a      	b.n	800d900 <_strtol_l.isra.0+0x6c>
 800d8ea:	2c2b      	cmp	r4, #43	@ 0x2b
 800d8ec:	bf04      	itt	eq
 800d8ee:	782c      	ldrbeq	r4, [r5, #0]
 800d8f0:	1c95      	addeq	r5, r2, #2
 800d8f2:	e7ec      	b.n	800d8ce <_strtol_l.isra.0+0x3a>
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d1f6      	bne.n	800d8e6 <_strtol_l.isra.0+0x52>
 800d8f8:	2c30      	cmp	r4, #48	@ 0x30
 800d8fa:	bf14      	ite	ne
 800d8fc:	230a      	movne	r3, #10
 800d8fe:	2308      	moveq	r3, #8
 800d900:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d904:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800d908:	2200      	movs	r2, #0
 800d90a:	fbbc f9f3 	udiv	r9, ip, r3
 800d90e:	4610      	mov	r0, r2
 800d910:	fb03 ca19 	mls	sl, r3, r9, ip
 800d914:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d918:	2f09      	cmp	r7, #9
 800d91a:	d80f      	bhi.n	800d93c <_strtol_l.isra.0+0xa8>
 800d91c:	463c      	mov	r4, r7
 800d91e:	42a3      	cmp	r3, r4
 800d920:	dd1b      	ble.n	800d95a <_strtol_l.isra.0+0xc6>
 800d922:	1c57      	adds	r7, r2, #1
 800d924:	d007      	beq.n	800d936 <_strtol_l.isra.0+0xa2>
 800d926:	4581      	cmp	r9, r0
 800d928:	d314      	bcc.n	800d954 <_strtol_l.isra.0+0xc0>
 800d92a:	d101      	bne.n	800d930 <_strtol_l.isra.0+0x9c>
 800d92c:	45a2      	cmp	sl, r4
 800d92e:	db11      	blt.n	800d954 <_strtol_l.isra.0+0xc0>
 800d930:	fb00 4003 	mla	r0, r0, r3, r4
 800d934:	2201      	movs	r2, #1
 800d936:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d93a:	e7eb      	b.n	800d914 <_strtol_l.isra.0+0x80>
 800d93c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d940:	2f19      	cmp	r7, #25
 800d942:	d801      	bhi.n	800d948 <_strtol_l.isra.0+0xb4>
 800d944:	3c37      	subs	r4, #55	@ 0x37
 800d946:	e7ea      	b.n	800d91e <_strtol_l.isra.0+0x8a>
 800d948:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d94c:	2f19      	cmp	r7, #25
 800d94e:	d804      	bhi.n	800d95a <_strtol_l.isra.0+0xc6>
 800d950:	3c57      	subs	r4, #87	@ 0x57
 800d952:	e7e4      	b.n	800d91e <_strtol_l.isra.0+0x8a>
 800d954:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d958:	e7ed      	b.n	800d936 <_strtol_l.isra.0+0xa2>
 800d95a:	1c53      	adds	r3, r2, #1
 800d95c:	d108      	bne.n	800d970 <_strtol_l.isra.0+0xdc>
 800d95e:	2322      	movs	r3, #34	@ 0x22
 800d960:	f8ce 3000 	str.w	r3, [lr]
 800d964:	4660      	mov	r0, ip
 800d966:	f1b8 0f00 	cmp.w	r8, #0
 800d96a:	d0a0      	beq.n	800d8ae <_strtol_l.isra.0+0x1a>
 800d96c:	1e69      	subs	r1, r5, #1
 800d96e:	e006      	b.n	800d97e <_strtol_l.isra.0+0xea>
 800d970:	b106      	cbz	r6, 800d974 <_strtol_l.isra.0+0xe0>
 800d972:	4240      	negs	r0, r0
 800d974:	f1b8 0f00 	cmp.w	r8, #0
 800d978:	d099      	beq.n	800d8ae <_strtol_l.isra.0+0x1a>
 800d97a:	2a00      	cmp	r2, #0
 800d97c:	d1f6      	bne.n	800d96c <_strtol_l.isra.0+0xd8>
 800d97e:	f8c8 1000 	str.w	r1, [r8]
 800d982:	e794      	b.n	800d8ae <_strtol_l.isra.0+0x1a>
 800d984:	0800efab 	.word	0x0800efab

0800d988 <_strtol_r>:
 800d988:	f7ff bf84 	b.w	800d894 <_strtol_l.isra.0>

0800d98c <_strtoul_l.isra.0>:
 800d98c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d990:	4e34      	ldr	r6, [pc, #208]	@ (800da64 <_strtoul_l.isra.0+0xd8>)
 800d992:	4686      	mov	lr, r0
 800d994:	460d      	mov	r5, r1
 800d996:	4628      	mov	r0, r5
 800d998:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d99c:	5d37      	ldrb	r7, [r6, r4]
 800d99e:	f017 0708 	ands.w	r7, r7, #8
 800d9a2:	d1f8      	bne.n	800d996 <_strtoul_l.isra.0+0xa>
 800d9a4:	2c2d      	cmp	r4, #45	@ 0x2d
 800d9a6:	d110      	bne.n	800d9ca <_strtoul_l.isra.0+0x3e>
 800d9a8:	782c      	ldrb	r4, [r5, #0]
 800d9aa:	2701      	movs	r7, #1
 800d9ac:	1c85      	adds	r5, r0, #2
 800d9ae:	f033 0010 	bics.w	r0, r3, #16
 800d9b2:	d115      	bne.n	800d9e0 <_strtoul_l.isra.0+0x54>
 800d9b4:	2c30      	cmp	r4, #48	@ 0x30
 800d9b6:	d10d      	bne.n	800d9d4 <_strtoul_l.isra.0+0x48>
 800d9b8:	7828      	ldrb	r0, [r5, #0]
 800d9ba:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d9be:	2858      	cmp	r0, #88	@ 0x58
 800d9c0:	d108      	bne.n	800d9d4 <_strtoul_l.isra.0+0x48>
 800d9c2:	786c      	ldrb	r4, [r5, #1]
 800d9c4:	3502      	adds	r5, #2
 800d9c6:	2310      	movs	r3, #16
 800d9c8:	e00a      	b.n	800d9e0 <_strtoul_l.isra.0+0x54>
 800d9ca:	2c2b      	cmp	r4, #43	@ 0x2b
 800d9cc:	bf04      	itt	eq
 800d9ce:	782c      	ldrbeq	r4, [r5, #0]
 800d9d0:	1c85      	addeq	r5, r0, #2
 800d9d2:	e7ec      	b.n	800d9ae <_strtoul_l.isra.0+0x22>
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d1f6      	bne.n	800d9c6 <_strtoul_l.isra.0+0x3a>
 800d9d8:	2c30      	cmp	r4, #48	@ 0x30
 800d9da:	bf14      	ite	ne
 800d9dc:	230a      	movne	r3, #10
 800d9de:	2308      	moveq	r3, #8
 800d9e0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800d9e4:	2600      	movs	r6, #0
 800d9e6:	fbb8 f8f3 	udiv	r8, r8, r3
 800d9ea:	fb03 f908 	mul.w	r9, r3, r8
 800d9ee:	ea6f 0909 	mvn.w	r9, r9
 800d9f2:	4630      	mov	r0, r6
 800d9f4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d9f8:	f1bc 0f09 	cmp.w	ip, #9
 800d9fc:	d810      	bhi.n	800da20 <_strtoul_l.isra.0+0x94>
 800d9fe:	4664      	mov	r4, ip
 800da00:	42a3      	cmp	r3, r4
 800da02:	dd1e      	ble.n	800da42 <_strtoul_l.isra.0+0xb6>
 800da04:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800da08:	d007      	beq.n	800da1a <_strtoul_l.isra.0+0x8e>
 800da0a:	4580      	cmp	r8, r0
 800da0c:	d316      	bcc.n	800da3c <_strtoul_l.isra.0+0xb0>
 800da0e:	d101      	bne.n	800da14 <_strtoul_l.isra.0+0x88>
 800da10:	45a1      	cmp	r9, r4
 800da12:	db13      	blt.n	800da3c <_strtoul_l.isra.0+0xb0>
 800da14:	fb00 4003 	mla	r0, r0, r3, r4
 800da18:	2601      	movs	r6, #1
 800da1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da1e:	e7e9      	b.n	800d9f4 <_strtoul_l.isra.0+0x68>
 800da20:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800da24:	f1bc 0f19 	cmp.w	ip, #25
 800da28:	d801      	bhi.n	800da2e <_strtoul_l.isra.0+0xa2>
 800da2a:	3c37      	subs	r4, #55	@ 0x37
 800da2c:	e7e8      	b.n	800da00 <_strtoul_l.isra.0+0x74>
 800da2e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800da32:	f1bc 0f19 	cmp.w	ip, #25
 800da36:	d804      	bhi.n	800da42 <_strtoul_l.isra.0+0xb6>
 800da38:	3c57      	subs	r4, #87	@ 0x57
 800da3a:	e7e1      	b.n	800da00 <_strtoul_l.isra.0+0x74>
 800da3c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800da40:	e7eb      	b.n	800da1a <_strtoul_l.isra.0+0x8e>
 800da42:	1c73      	adds	r3, r6, #1
 800da44:	d106      	bne.n	800da54 <_strtoul_l.isra.0+0xc8>
 800da46:	2322      	movs	r3, #34	@ 0x22
 800da48:	f8ce 3000 	str.w	r3, [lr]
 800da4c:	4630      	mov	r0, r6
 800da4e:	b932      	cbnz	r2, 800da5e <_strtoul_l.isra.0+0xd2>
 800da50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da54:	b107      	cbz	r7, 800da58 <_strtoul_l.isra.0+0xcc>
 800da56:	4240      	negs	r0, r0
 800da58:	2a00      	cmp	r2, #0
 800da5a:	d0f9      	beq.n	800da50 <_strtoul_l.isra.0+0xc4>
 800da5c:	b106      	cbz	r6, 800da60 <_strtoul_l.isra.0+0xd4>
 800da5e:	1e69      	subs	r1, r5, #1
 800da60:	6011      	str	r1, [r2, #0]
 800da62:	e7f5      	b.n	800da50 <_strtoul_l.isra.0+0xc4>
 800da64:	0800efab 	.word	0x0800efab

0800da68 <_strtoul_r>:
 800da68:	f7ff bf90 	b.w	800d98c <_strtoul_l.isra.0>

0800da6c <__swsetup_r>:
 800da6c:	b538      	push	{r3, r4, r5, lr}
 800da6e:	4b29      	ldr	r3, [pc, #164]	@ (800db14 <__swsetup_r+0xa8>)
 800da70:	4605      	mov	r5, r0
 800da72:	6818      	ldr	r0, [r3, #0]
 800da74:	460c      	mov	r4, r1
 800da76:	b118      	cbz	r0, 800da80 <__swsetup_r+0x14>
 800da78:	6a03      	ldr	r3, [r0, #32]
 800da7a:	b90b      	cbnz	r3, 800da80 <__swsetup_r+0x14>
 800da7c:	f7fe fca4 	bl	800c3c8 <__sinit>
 800da80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da84:	0719      	lsls	r1, r3, #28
 800da86:	d422      	bmi.n	800dace <__swsetup_r+0x62>
 800da88:	06da      	lsls	r2, r3, #27
 800da8a:	d407      	bmi.n	800da9c <__swsetup_r+0x30>
 800da8c:	2209      	movs	r2, #9
 800da8e:	602a      	str	r2, [r5, #0]
 800da90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da94:	81a3      	strh	r3, [r4, #12]
 800da96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da9a:	e033      	b.n	800db04 <__swsetup_r+0x98>
 800da9c:	0758      	lsls	r0, r3, #29
 800da9e:	d512      	bpl.n	800dac6 <__swsetup_r+0x5a>
 800daa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800daa2:	b141      	cbz	r1, 800dab6 <__swsetup_r+0x4a>
 800daa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800daa8:	4299      	cmp	r1, r3
 800daaa:	d002      	beq.n	800dab2 <__swsetup_r+0x46>
 800daac:	4628      	mov	r0, r5
 800daae:	f7fe fdd7 	bl	800c660 <_free_r>
 800dab2:	2300      	movs	r3, #0
 800dab4:	6363      	str	r3, [r4, #52]	@ 0x34
 800dab6:	89a3      	ldrh	r3, [r4, #12]
 800dab8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dabc:	81a3      	strh	r3, [r4, #12]
 800dabe:	2300      	movs	r3, #0
 800dac0:	6063      	str	r3, [r4, #4]
 800dac2:	6923      	ldr	r3, [r4, #16]
 800dac4:	6023      	str	r3, [r4, #0]
 800dac6:	89a3      	ldrh	r3, [r4, #12]
 800dac8:	f043 0308 	orr.w	r3, r3, #8
 800dacc:	81a3      	strh	r3, [r4, #12]
 800dace:	6923      	ldr	r3, [r4, #16]
 800dad0:	b94b      	cbnz	r3, 800dae6 <__swsetup_r+0x7a>
 800dad2:	89a3      	ldrh	r3, [r4, #12]
 800dad4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dadc:	d003      	beq.n	800dae6 <__swsetup_r+0x7a>
 800dade:	4621      	mov	r1, r4
 800dae0:	4628      	mov	r0, r5
 800dae2:	f000 f83f 	bl	800db64 <__smakebuf_r>
 800dae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daea:	f013 0201 	ands.w	r2, r3, #1
 800daee:	d00a      	beq.n	800db06 <__swsetup_r+0x9a>
 800daf0:	2200      	movs	r2, #0
 800daf2:	60a2      	str	r2, [r4, #8]
 800daf4:	6962      	ldr	r2, [r4, #20]
 800daf6:	4252      	negs	r2, r2
 800daf8:	61a2      	str	r2, [r4, #24]
 800dafa:	6922      	ldr	r2, [r4, #16]
 800dafc:	b942      	cbnz	r2, 800db10 <__swsetup_r+0xa4>
 800dafe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800db02:	d1c5      	bne.n	800da90 <__swsetup_r+0x24>
 800db04:	bd38      	pop	{r3, r4, r5, pc}
 800db06:	0799      	lsls	r1, r3, #30
 800db08:	bf58      	it	pl
 800db0a:	6962      	ldrpl	r2, [r4, #20]
 800db0c:	60a2      	str	r2, [r4, #8]
 800db0e:	e7f4      	b.n	800dafa <__swsetup_r+0x8e>
 800db10:	2000      	movs	r0, #0
 800db12:	e7f7      	b.n	800db04 <__swsetup_r+0x98>
 800db14:	2000006c 	.word	0x2000006c

0800db18 <__swhatbuf_r>:
 800db18:	b570      	push	{r4, r5, r6, lr}
 800db1a:	460c      	mov	r4, r1
 800db1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db20:	2900      	cmp	r1, #0
 800db22:	b096      	sub	sp, #88	@ 0x58
 800db24:	4615      	mov	r5, r2
 800db26:	461e      	mov	r6, r3
 800db28:	da0d      	bge.n	800db46 <__swhatbuf_r+0x2e>
 800db2a:	89a3      	ldrh	r3, [r4, #12]
 800db2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800db30:	f04f 0100 	mov.w	r1, #0
 800db34:	bf14      	ite	ne
 800db36:	2340      	movne	r3, #64	@ 0x40
 800db38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800db3c:	2000      	movs	r0, #0
 800db3e:	6031      	str	r1, [r6, #0]
 800db40:	602b      	str	r3, [r5, #0]
 800db42:	b016      	add	sp, #88	@ 0x58
 800db44:	bd70      	pop	{r4, r5, r6, pc}
 800db46:	466a      	mov	r2, sp
 800db48:	f000 f8b6 	bl	800dcb8 <_fstat_r>
 800db4c:	2800      	cmp	r0, #0
 800db4e:	dbec      	blt.n	800db2a <__swhatbuf_r+0x12>
 800db50:	9901      	ldr	r1, [sp, #4]
 800db52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800db56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800db5a:	4259      	negs	r1, r3
 800db5c:	4159      	adcs	r1, r3
 800db5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db62:	e7eb      	b.n	800db3c <__swhatbuf_r+0x24>

0800db64 <__smakebuf_r>:
 800db64:	898b      	ldrh	r3, [r1, #12]
 800db66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db68:	079d      	lsls	r5, r3, #30
 800db6a:	4606      	mov	r6, r0
 800db6c:	460c      	mov	r4, r1
 800db6e:	d507      	bpl.n	800db80 <__smakebuf_r+0x1c>
 800db70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800db74:	6023      	str	r3, [r4, #0]
 800db76:	6123      	str	r3, [r4, #16]
 800db78:	2301      	movs	r3, #1
 800db7a:	6163      	str	r3, [r4, #20]
 800db7c:	b003      	add	sp, #12
 800db7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db80:	ab01      	add	r3, sp, #4
 800db82:	466a      	mov	r2, sp
 800db84:	f7ff ffc8 	bl	800db18 <__swhatbuf_r>
 800db88:	9f00      	ldr	r7, [sp, #0]
 800db8a:	4605      	mov	r5, r0
 800db8c:	4639      	mov	r1, r7
 800db8e:	4630      	mov	r0, r6
 800db90:	f7fe fa6e 	bl	800c070 <_malloc_r>
 800db94:	b948      	cbnz	r0, 800dbaa <__smakebuf_r+0x46>
 800db96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db9a:	059a      	lsls	r2, r3, #22
 800db9c:	d4ee      	bmi.n	800db7c <__smakebuf_r+0x18>
 800db9e:	f023 0303 	bic.w	r3, r3, #3
 800dba2:	f043 0302 	orr.w	r3, r3, #2
 800dba6:	81a3      	strh	r3, [r4, #12]
 800dba8:	e7e2      	b.n	800db70 <__smakebuf_r+0xc>
 800dbaa:	89a3      	ldrh	r3, [r4, #12]
 800dbac:	6020      	str	r0, [r4, #0]
 800dbae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbb2:	81a3      	strh	r3, [r4, #12]
 800dbb4:	9b01      	ldr	r3, [sp, #4]
 800dbb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dbba:	b15b      	cbz	r3, 800dbd4 <__smakebuf_r+0x70>
 800dbbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbc0:	4630      	mov	r0, r6
 800dbc2:	f000 f855 	bl	800dc70 <_isatty_r>
 800dbc6:	b128      	cbz	r0, 800dbd4 <__smakebuf_r+0x70>
 800dbc8:	89a3      	ldrh	r3, [r4, #12]
 800dbca:	f023 0303 	bic.w	r3, r3, #3
 800dbce:	f043 0301 	orr.w	r3, r3, #1
 800dbd2:	81a3      	strh	r3, [r4, #12]
 800dbd4:	89a3      	ldrh	r3, [r4, #12]
 800dbd6:	431d      	orrs	r5, r3
 800dbd8:	81a5      	strh	r5, [r4, #12]
 800dbda:	e7cf      	b.n	800db7c <__smakebuf_r+0x18>

0800dbdc <memmove>:
 800dbdc:	4288      	cmp	r0, r1
 800dbde:	b510      	push	{r4, lr}
 800dbe0:	eb01 0402 	add.w	r4, r1, r2
 800dbe4:	d902      	bls.n	800dbec <memmove+0x10>
 800dbe6:	4284      	cmp	r4, r0
 800dbe8:	4623      	mov	r3, r4
 800dbea:	d807      	bhi.n	800dbfc <memmove+0x20>
 800dbec:	1e43      	subs	r3, r0, #1
 800dbee:	42a1      	cmp	r1, r4
 800dbf0:	d008      	beq.n	800dc04 <memmove+0x28>
 800dbf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dbf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dbfa:	e7f8      	b.n	800dbee <memmove+0x12>
 800dbfc:	4402      	add	r2, r0
 800dbfe:	4601      	mov	r1, r0
 800dc00:	428a      	cmp	r2, r1
 800dc02:	d100      	bne.n	800dc06 <memmove+0x2a>
 800dc04:	bd10      	pop	{r4, pc}
 800dc06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc0e:	e7f7      	b.n	800dc00 <memmove+0x24>

0800dc10 <_raise_r>:
 800dc10:	291f      	cmp	r1, #31
 800dc12:	b538      	push	{r3, r4, r5, lr}
 800dc14:	4605      	mov	r5, r0
 800dc16:	460c      	mov	r4, r1
 800dc18:	d904      	bls.n	800dc24 <_raise_r+0x14>
 800dc1a:	2316      	movs	r3, #22
 800dc1c:	6003      	str	r3, [r0, #0]
 800dc1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc22:	bd38      	pop	{r3, r4, r5, pc}
 800dc24:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dc26:	b112      	cbz	r2, 800dc2e <_raise_r+0x1e>
 800dc28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc2c:	b94b      	cbnz	r3, 800dc42 <_raise_r+0x32>
 800dc2e:	4628      	mov	r0, r5
 800dc30:	f000 f840 	bl	800dcb4 <_getpid_r>
 800dc34:	4622      	mov	r2, r4
 800dc36:	4601      	mov	r1, r0
 800dc38:	4628      	mov	r0, r5
 800dc3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc3e:	f000 b827 	b.w	800dc90 <_kill_r>
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	d00a      	beq.n	800dc5c <_raise_r+0x4c>
 800dc46:	1c59      	adds	r1, r3, #1
 800dc48:	d103      	bne.n	800dc52 <_raise_r+0x42>
 800dc4a:	2316      	movs	r3, #22
 800dc4c:	6003      	str	r3, [r0, #0]
 800dc4e:	2001      	movs	r0, #1
 800dc50:	e7e7      	b.n	800dc22 <_raise_r+0x12>
 800dc52:	2100      	movs	r1, #0
 800dc54:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dc58:	4620      	mov	r0, r4
 800dc5a:	4798      	blx	r3
 800dc5c:	2000      	movs	r0, #0
 800dc5e:	e7e0      	b.n	800dc22 <_raise_r+0x12>

0800dc60 <raise>:
 800dc60:	4b02      	ldr	r3, [pc, #8]	@ (800dc6c <raise+0xc>)
 800dc62:	4601      	mov	r1, r0
 800dc64:	6818      	ldr	r0, [r3, #0]
 800dc66:	f7ff bfd3 	b.w	800dc10 <_raise_r>
 800dc6a:	bf00      	nop
 800dc6c:	2000006c 	.word	0x2000006c

0800dc70 <_isatty_r>:
 800dc70:	b538      	push	{r3, r4, r5, lr}
 800dc72:	4d06      	ldr	r5, [pc, #24]	@ (800dc8c <_isatty_r+0x1c>)
 800dc74:	2300      	movs	r3, #0
 800dc76:	4604      	mov	r4, r0
 800dc78:	4608      	mov	r0, r1
 800dc7a:	602b      	str	r3, [r5, #0]
 800dc7c:	f7f3 fb31 	bl	80012e2 <_isatty>
 800dc80:	1c43      	adds	r3, r0, #1
 800dc82:	d102      	bne.n	800dc8a <_isatty_r+0x1a>
 800dc84:	682b      	ldr	r3, [r5, #0]
 800dc86:	b103      	cbz	r3, 800dc8a <_isatty_r+0x1a>
 800dc88:	6023      	str	r3, [r4, #0]
 800dc8a:	bd38      	pop	{r3, r4, r5, pc}
 800dc8c:	2000056c 	.word	0x2000056c

0800dc90 <_kill_r>:
 800dc90:	b538      	push	{r3, r4, r5, lr}
 800dc92:	4d07      	ldr	r5, [pc, #28]	@ (800dcb0 <_kill_r+0x20>)
 800dc94:	2300      	movs	r3, #0
 800dc96:	4604      	mov	r4, r0
 800dc98:	4608      	mov	r0, r1
 800dc9a:	4611      	mov	r1, r2
 800dc9c:	602b      	str	r3, [r5, #0]
 800dc9e:	f7f3 fab0 	bl	8001202 <_kill>
 800dca2:	1c43      	adds	r3, r0, #1
 800dca4:	d102      	bne.n	800dcac <_kill_r+0x1c>
 800dca6:	682b      	ldr	r3, [r5, #0]
 800dca8:	b103      	cbz	r3, 800dcac <_kill_r+0x1c>
 800dcaa:	6023      	str	r3, [r4, #0]
 800dcac:	bd38      	pop	{r3, r4, r5, pc}
 800dcae:	bf00      	nop
 800dcb0:	2000056c 	.word	0x2000056c

0800dcb4 <_getpid_r>:
 800dcb4:	f7f3 ba9d 	b.w	80011f2 <_getpid>

0800dcb8 <_fstat_r>:
 800dcb8:	b538      	push	{r3, r4, r5, lr}
 800dcba:	4d07      	ldr	r5, [pc, #28]	@ (800dcd8 <_fstat_r+0x20>)
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	4604      	mov	r4, r0
 800dcc0:	4608      	mov	r0, r1
 800dcc2:	4611      	mov	r1, r2
 800dcc4:	602b      	str	r3, [r5, #0]
 800dcc6:	f7f3 fafc 	bl	80012c2 <_fstat>
 800dcca:	1c43      	adds	r3, r0, #1
 800dccc:	d102      	bne.n	800dcd4 <_fstat_r+0x1c>
 800dcce:	682b      	ldr	r3, [r5, #0]
 800dcd0:	b103      	cbz	r3, 800dcd4 <_fstat_r+0x1c>
 800dcd2:	6023      	str	r3, [r4, #0]
 800dcd4:	bd38      	pop	{r3, r4, r5, pc}
 800dcd6:	bf00      	nop
 800dcd8:	2000056c 	.word	0x2000056c

0800dcdc <_malloc_usable_size_r>:
 800dcdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dce0:	1f18      	subs	r0, r3, #4
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	bfbc      	itt	lt
 800dce6:	580b      	ldrlt	r3, [r1, r0]
 800dce8:	18c0      	addlt	r0, r0, r3
 800dcea:	4770      	bx	lr

0800dcec <__popcountsi2>:
 800dcec:	0843      	lsrs	r3, r0, #1
 800dcee:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 800dcf2:	1ac0      	subs	r0, r0, r3
 800dcf4:	0883      	lsrs	r3, r0, #2
 800dcf6:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 800dcfa:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 800dcfe:	4418      	add	r0, r3
 800dd00:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 800dd04:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 800dd08:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 800dd0c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 800dd10:	0e00      	lsrs	r0, r0, #24
 800dd12:	4770      	bx	lr

0800dd14 <_init>:
 800dd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd16:	bf00      	nop
 800dd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd1a:	bc08      	pop	{r3}
 800dd1c:	469e      	mov	lr, r3
 800dd1e:	4770      	bx	lr

0800dd20 <_fini>:
 800dd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd22:	bf00      	nop
 800dd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd26:	bc08      	pop	{r3}
 800dd28:	469e      	mov	lr, r3
 800dd2a:	4770      	bx	lr
