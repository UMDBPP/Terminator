
digital_cube_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002298  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002424  08002424  00003424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800243c  0800243c  00004004  2**0
                  CONTENTS
  4 .ARM          00000000  0800243c  0800243c  00004004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800243c  0800243c  00004004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800243c  0800243c  0000343c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002440  08002440  00003440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08002444  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08002448  00004004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08002448  00004020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006926  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001113  00000000  00000000  0000a95a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0000ba70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000570  00000000  00000000  0000c1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159ea  00000000  00000000  0000c740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000555a  00000000  00000000  0002212a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ff2f  00000000  00000000  00027684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a75b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e64  00000000  00000000  000a75f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000a945c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000004 	.word	0x20000004
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800240c 	.word	0x0800240c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000008 	.word	0x20000008
 80001c8:	0800240c 	.word	0x0800240c

080001cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	f003 0307 	and.w	r3, r3, #7
 80001da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000210 <__NVIC_SetPriorityGrouping+0x44>)
 80001de:	68db      	ldr	r3, [r3, #12]
 80001e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e2:	68ba      	ldr	r2, [r7, #8]
 80001e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80001e8:	4013      	ands	r3, r2
 80001ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001f0:	68bb      	ldr	r3, [r7, #8]
 80001f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80001f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001fe:	4a04      	ldr	r2, [pc, #16]	@ (8000210 <__NVIC_SetPriorityGrouping+0x44>)
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	60d3      	str	r3, [r2, #12]
}
 8000204:	bf00      	nop
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000218:	4b04      	ldr	r3, [pc, #16]	@ (800022c <__NVIC_GetPriorityGrouping+0x18>)
 800021a:	68db      	ldr	r3, [r3, #12]
 800021c:	0a1b      	lsrs	r3, r3, #8
 800021e:	f003 0307 	and.w	r3, r3, #7
}
 8000222:	4618      	mov	r0, r3
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr
 800022c:	e000ed00 	.word	0xe000ed00

08000230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	6039      	str	r1, [r7, #0]
 800023a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800023c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000240:	2b00      	cmp	r3, #0
 8000242:	db0a      	blt.n	800025a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	b2da      	uxtb	r2, r3
 8000248:	490c      	ldr	r1, [pc, #48]	@ (800027c <__NVIC_SetPriority+0x4c>)
 800024a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024e:	0112      	lsls	r2, r2, #4
 8000250:	b2d2      	uxtb	r2, r2
 8000252:	440b      	add	r3, r1
 8000254:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000258:	e00a      	b.n	8000270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	b2da      	uxtb	r2, r3
 800025e:	4908      	ldr	r1, [pc, #32]	@ (8000280 <__NVIC_SetPriority+0x50>)
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	f003 030f 	and.w	r3, r3, #15
 8000266:	3b04      	subs	r3, #4
 8000268:	0112      	lsls	r2, r2, #4
 800026a:	b2d2      	uxtb	r2, r2
 800026c:	440b      	add	r3, r1
 800026e:	761a      	strb	r2, [r3, #24]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr
 800027c:	e000e100 	.word	0xe000e100
 8000280:	e000ed00 	.word	0xe000ed00

08000284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000284:	b480      	push	{r7}
 8000286:	b089      	sub	sp, #36	@ 0x24
 8000288:	af00      	add	r7, sp, #0
 800028a:	60f8      	str	r0, [r7, #12]
 800028c:	60b9      	str	r1, [r7, #8]
 800028e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	f003 0307 	and.w	r3, r3, #7
 8000296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000298:	69fb      	ldr	r3, [r7, #28]
 800029a:	f1c3 0307 	rsb	r3, r3, #7
 800029e:	2b04      	cmp	r3, #4
 80002a0:	bf28      	it	cs
 80002a2:	2304      	movcs	r3, #4
 80002a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a6:	69fb      	ldr	r3, [r7, #28]
 80002a8:	3304      	adds	r3, #4
 80002aa:	2b06      	cmp	r3, #6
 80002ac:	d902      	bls.n	80002b4 <NVIC_EncodePriority+0x30>
 80002ae:	69fb      	ldr	r3, [r7, #28]
 80002b0:	3b03      	subs	r3, #3
 80002b2:	e000      	b.n	80002b6 <NVIC_EncodePriority+0x32>
 80002b4:	2300      	movs	r3, #0
 80002b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80002bc:	69bb      	ldr	r3, [r7, #24]
 80002be:	fa02 f303 	lsl.w	r3, r2, r3
 80002c2:	43da      	mvns	r2, r3
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	401a      	ands	r2, r3
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
 80002d6:	43d9      	mvns	r1, r3
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002dc:	4313      	orrs	r3, r2
         );
}
 80002de:	4618      	mov	r0, r3
 80002e0:	3724      	adds	r7, #36	@ 0x24
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr

080002ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80002ea:	b480      	push	{r7}
 80002ec:	b083      	sub	sp, #12
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
 80002f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	431a      	orrs	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	609a      	str	r2, [r3, #8]
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000310:	b480      	push	{r7}
 8000312:	b087      	sub	sp, #28
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	3330      	adds	r3, #48	@ 0x30
 8000320:	461a      	mov	r2, r3
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	0a1b      	lsrs	r3, r3, #8
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	f003 030c 	and.w	r3, r3, #12
 800032c:	4413      	add	r3, r2
 800032e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	f003 031f 	and.w	r3, r3, #31
 800033a:	211f      	movs	r1, #31
 800033c:	fa01 f303 	lsl.w	r3, r1, r3
 8000340:	43db      	mvns	r3, r3
 8000342:	401a      	ands	r2, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	0e9b      	lsrs	r3, r3, #26
 8000348:	f003 011f 	and.w	r1, r3, #31
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	f003 031f 	and.w	r3, r3, #31
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	431a      	orrs	r2, r3
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800035c:	bf00      	nop
 800035e:	371c      	adds	r7, #28
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr

08000368 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000368:	b480      	push	{r7}
 800036a:	b087      	sub	sp, #28
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	3314      	adds	r3, #20
 8000378:	461a      	mov	r2, r3
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	0e5b      	lsrs	r3, r3, #25
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	f003 0304 	and.w	r3, r3, #4
 8000384:	4413      	add	r3, r2
 8000386:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	681a      	ldr	r2, [r3, #0]
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	0d1b      	lsrs	r3, r3, #20
 8000390:	f003 031f 	and.w	r3, r3, #31
 8000394:	2107      	movs	r1, #7
 8000396:	fa01 f303 	lsl.w	r3, r1, r3
 800039a:	43db      	mvns	r3, r3
 800039c:	401a      	ands	r2, r3
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	0d1b      	lsrs	r3, r3, #20
 80003a2:	f003 031f 	and.w	r3, r3, #31
 80003a6:	6879      	ldr	r1, [r7, #4]
 80003a8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ac:	431a      	orrs	r2, r3
 80003ae:	697b      	ldr	r3, [r7, #20]
 80003b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80003b2:	bf00      	nop
 80003b4:	371c      	adds	r7, #28
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
	...

080003c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	60b9      	str	r1, [r7, #8]
 80003ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80003d8:	43db      	mvns	r3, r3
 80003da:	401a      	ands	r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	f003 0318 	and.w	r3, r3, #24
 80003e2:	4908      	ldr	r1, [pc, #32]	@ (8000404 <LL_ADC_SetChannelSingleDiff+0x44>)
 80003e4:	40d9      	lsrs	r1, r3
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	400b      	ands	r3, r1
 80003ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80003ee:	431a      	orrs	r2, r3
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80003f6:	bf00      	nop
 80003f8:	3714      	adds	r7, #20
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	0007ffff 	.word	0x0007ffff

08000408 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	691b      	ldr	r3, [r3, #16]
 8000416:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800041a:	f023 0303 	bic.w	r3, r3, #3
 800041e:	683a      	ldr	r2, [r7, #0]
 8000420:	431a      	orrs	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	611a      	str	r2, [r3, #16]
}
 8000426:	bf00      	nop
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr

08000432 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000432:	b480      	push	{r7}
 8000434:	b083      	sub	sp, #12
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000442:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	6093      	str	r3, [r2, #8]
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr

08000456 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000456:	b480      	push	{r7}
 8000458:	b083      	sub	sp, #12
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000466:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800046a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
	...

08000480 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <LL_EXTI_DisableIT_0_31+0x24>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	43db      	mvns	r3, r3
 8000490:	4904      	ldr	r1, [pc, #16]	@ (80004a4 <LL_EXTI_DisableIT_0_31+0x24>)
 8000492:	4013      	ands	r3, r2
 8000494:	600b      	str	r3, [r1, #0]
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40010400 	.word	0x40010400

080004a8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80004b0:	4b06      	ldr	r3, [pc, #24]	@ (80004cc <LL_EXTI_DisableEvent_0_31+0x24>)
 80004b2:	685a      	ldr	r2, [r3, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	43db      	mvns	r3, r3
 80004b8:	4904      	ldr	r1, [pc, #16]	@ (80004cc <LL_EXTI_DisableEvent_0_31+0x24>)
 80004ba:	4013      	ands	r3, r2
 80004bc:	604b      	str	r3, [r1, #4]
}
 80004be:	bf00      	nop
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	40010400 	.word	0x40010400

080004d0 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	601a      	str	r2, [r3, #0]
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	601a      	str	r2, [r3, #0]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000524:	f023 0306 	bic.w	r3, r3, #6
 8000528:	68b9      	ldr	r1, [r7, #8]
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	430a      	orrs	r2, r1
 800052e:	431a      	orrs	r2, r3
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	60da      	str	r2, [r3, #12]
}
 8000534:	bf00      	nop
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	60da      	str	r2, [r3, #12]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	605a      	str	r2, [r3, #4]
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000584:	4b05      	ldr	r3, [pc, #20]	@ (800059c <LL_RCC_HSE_EnableBypass+0x1c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a04      	ldr	r2, [pc, #16]	@ (800059c <LL_RCC_HSE_EnableBypass+0x1c>)
 800058a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40021000 	.word	0x40021000

080005a0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80005a4:	4b05      	ldr	r3, [pc, #20]	@ (80005bc <LL_RCC_HSE_Enable+0x1c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a04      	ldr	r2, [pc, #16]	@ (80005bc <LL_RCC_HSE_Enable+0x1c>)
 80005aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005ae:	6013      	str	r3, [r2, #0]
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 80005c4:	4b07      	ldr	r3, [pc, #28]	@ (80005e4 <LL_RCC_HSE_IsReady+0x24>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80005d0:	d101      	bne.n	80005d6 <LL_RCC_HSE_IsReady+0x16>
 80005d2:	2301      	movs	r3, #1
 80005d4:	e000      	b.n	80005d8 <LL_RCC_HSE_IsReady+0x18>
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <LL_RCC_SetSysClkSource+0x24>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	f023 0203 	bic.w	r2, r3, #3
 80005f8:	4904      	ldr	r1, [pc, #16]	@ (800060c <LL_RCC_SetSysClkSource+0x24>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4313      	orrs	r3, r2
 80005fe:	608b      	str	r3, [r1, #8]
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	40021000 	.word	0x40021000

08000610 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000614:	4b04      	ldr	r3, [pc, #16]	@ (8000628 <LL_RCC_GetSysClkSource+0x18>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	f003 030c 	and.w	r3, r3, #12
}
 800061c:	4618      	mov	r0, r3
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000

0800062c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000634:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <LL_RCC_SetAHBPrescaler+0x24>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800063c:	4904      	ldr	r1, [pc, #16]	@ (8000650 <LL_RCC_SetAHBPrescaler+0x24>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4313      	orrs	r3, r2
 8000642:	608b      	str	r3, [r1, #8]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	40021000 	.word	0x40021000

08000654 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800065c:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <LL_RCC_SetAPB1Prescaler+0x24>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000664:	4904      	ldr	r1, [pc, #16]	@ (8000678 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4313      	orrs	r3, r2
 800066a:	608b      	str	r3, [r1, #8]
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	40021000 	.word	0x40021000

0800067c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800068c:	4904      	ldr	r1, [pc, #16]	@ (80006a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4313      	orrs	r3, r2
 8000692:	608b      	str	r3, [r1, #8]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	40021000 	.word	0x40021000

080006a4 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	0e1a      	lsrs	r2, r3, #24
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <LL_RCC_SetI2CClockSource+0x4c>)
 80006b2:	4413      	add	r3, r2
 80006b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3UL << ((I2CxSource & 0x001F0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x001F0000U) >> 16U)));
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	0c1b      	lsrs	r3, r3, #16
 80006be:	f003 031f 	and.w	r3, r3, #31
 80006c2:	2103      	movs	r1, #3
 80006c4:	fa01 f303 	lsl.w	r3, r1, r3
 80006c8:	43db      	mvns	r3, r3
 80006ca:	401a      	ands	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	b2d9      	uxtb	r1, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	0c1b      	lsrs	r3, r3, #16
 80006d4:	f003 031f 	and.w	r3, r3, #31
 80006d8:	fa01 f303 	lsl.w	r3, r1, r3
 80006dc:	431a      	orrs	r2, r3
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	601a      	str	r2, [r3, #0]
}
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40021088 	.word	0x40021088

080006f4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006fc:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000700:	4907      	ldr	r1, [pc, #28]	@ (8000720 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4313      	orrs	r3, r2
 8000706:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000708:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800070a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4013      	ands	r3, r2
 8000710:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000712:	68fb      	ldr	r3, [r7, #12]
}
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	40021000 	.word	0x40021000

08000724 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800072c:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <LL_APB1_GRP1_EnableClock+0x2c>)
 800072e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000730:	4907      	ldr	r1, [pc, #28]	@ (8000750 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4313      	orrs	r3, r2
 8000736:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000738:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <LL_APB1_GRP1_EnableClock+0x2c>)
 800073a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4013      	ands	r3, r2
 8000740:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000742:	68fb      	ldr	r3, [r7, #12]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	40021000 	.word	0x40021000

08000754 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800075c:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <LL_APB2_GRP1_EnableClock+0x2c>)
 800075e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000760:	4907      	ldr	r1, [pc, #28]	@ (8000780 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4313      	orrs	r3, r2
 8000766:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000768:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <LL_APB2_GRP1_EnableClock+0x2c>)
 800076a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4013      	ands	r3, r2
 8000770:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000772:	68fb      	ldr	r3, [r7, #12]
}
 8000774:	bf00      	nop
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	40021000 	.word	0x40021000

08000784 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <LL_FLASH_SetLatency+0x24>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f023 0207 	bic.w	r2, r3, #7
 8000794:	4904      	ldr	r1, [pc, #16]	@ (80007a8 <LL_FLASH_SetLatency+0x24>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4313      	orrs	r3, r2
 800079a:	600b      	str	r3, [r1, #0]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	40022000 	.word	0x40022000

080007ac <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80007b0:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <LL_FLASH_GetLatency+0x18>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f003 0307 	and.w	r3, r3, #7
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40022000 	.word	0x40022000

080007c8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <LL_PWR_SetRegulVoltageScaling+0x24>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80007d8:	4904      	ldr	r1, [pc, #16]	@ (80007ec <LL_PWR_SetRegulVoltageScaling+0x24>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4313      	orrs	r3, r2
 80007de:	600b      	str	r3, [r1, #0]
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	40007000 	.word	0x40007000

080007f0 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 80007f4:	4b07      	ldr	r3, [pc, #28]	@ (8000814 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80007fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000800:	d101      	bne.n	8000806 <LL_PWR_IsActiveFlag_VOS+0x16>
 8000802:	2301      	movs	r3, #1
 8000804:	e000      	b.n	8000808 <LL_PWR_IsActiveFlag_VOS+0x18>
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40007000 	.word	0x40007000

08000818 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	f023 0210 	bic.w	r2, r3, #16
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	431a      	orrs	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	605a      	str	r2, [r3, #4]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	f043 0208 	orr.w	r2, r3, #8
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	605a      	str	r2, [r3, #4]
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	601a      	str	r2, [r3, #0]
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
	...

08000880 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d028      	beq.n	80008e2 <LL_TIM_OC_DisableFast+0x62>
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	2b04      	cmp	r3, #4
 8000894:	d023      	beq.n	80008de <LL_TIM_OC_DisableFast+0x5e>
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	2b10      	cmp	r3, #16
 800089a:	d01e      	beq.n	80008da <LL_TIM_OC_DisableFast+0x5a>
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	2b40      	cmp	r3, #64	@ 0x40
 80008a0:	d019      	beq.n	80008d6 <LL_TIM_OC_DisableFast+0x56>
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80008a8:	d013      	beq.n	80008d2 <LL_TIM_OC_DisableFast+0x52>
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80008b0:	d00d      	beq.n	80008ce <LL_TIM_OC_DisableFast+0x4e>
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80008b8:	d007      	beq.n	80008ca <LL_TIM_OC_DisableFast+0x4a>
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80008c0:	d101      	bne.n	80008c6 <LL_TIM_OC_DisableFast+0x46>
 80008c2:	2307      	movs	r3, #7
 80008c4:	e00e      	b.n	80008e4 <LL_TIM_OC_DisableFast+0x64>
 80008c6:	2308      	movs	r3, #8
 80008c8:	e00c      	b.n	80008e4 <LL_TIM_OC_DisableFast+0x64>
 80008ca:	2306      	movs	r3, #6
 80008cc:	e00a      	b.n	80008e4 <LL_TIM_OC_DisableFast+0x64>
 80008ce:	2305      	movs	r3, #5
 80008d0:	e008      	b.n	80008e4 <LL_TIM_OC_DisableFast+0x64>
 80008d2:	2304      	movs	r3, #4
 80008d4:	e006      	b.n	80008e4 <LL_TIM_OC_DisableFast+0x64>
 80008d6:	2303      	movs	r3, #3
 80008d8:	e004      	b.n	80008e4 <LL_TIM_OC_DisableFast+0x64>
 80008da:	2302      	movs	r3, #2
 80008dc:	e002      	b.n	80008e4 <LL_TIM_OC_DisableFast+0x64>
 80008de:	2301      	movs	r3, #1
 80008e0:	e000      	b.n	80008e4 <LL_TIM_OC_DisableFast+0x64>
 80008e2:	2300      	movs	r3, #0
 80008e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3318      	adds	r3, #24
 80008ea:	4619      	mov	r1, r3
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	4a0b      	ldr	r2, [pc, #44]	@ (800091c <LL_TIM_OC_DisableFast+0x9c>)
 80008f0:	5cd3      	ldrb	r3, [r2, r3]
 80008f2:	440b      	add	r3, r1
 80008f4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	4908      	ldr	r1, [pc, #32]	@ (8000920 <LL_TIM_OC_DisableFast+0xa0>)
 80008fe:	5ccb      	ldrb	r3, [r1, r3]
 8000900:	4619      	mov	r1, r3
 8000902:	2304      	movs	r3, #4
 8000904:	408b      	lsls	r3, r1
 8000906:	43db      	mvns	r3, r3
 8000908:	401a      	ands	r2, r3
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	601a      	str	r2, [r3, #0]

}
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	08002424 	.word	0x08002424
 8000920:	08002430 	.word	0x08002430

08000924 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d028      	beq.n	8000986 <LL_TIM_OC_EnablePreload+0x62>
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	2b04      	cmp	r3, #4
 8000938:	d023      	beq.n	8000982 <LL_TIM_OC_EnablePreload+0x5e>
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	2b10      	cmp	r3, #16
 800093e:	d01e      	beq.n	800097e <LL_TIM_OC_EnablePreload+0x5a>
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	2b40      	cmp	r3, #64	@ 0x40
 8000944:	d019      	beq.n	800097a <LL_TIM_OC_EnablePreload+0x56>
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800094c:	d013      	beq.n	8000976 <LL_TIM_OC_EnablePreload+0x52>
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000954:	d00d      	beq.n	8000972 <LL_TIM_OC_EnablePreload+0x4e>
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800095c:	d007      	beq.n	800096e <LL_TIM_OC_EnablePreload+0x4a>
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000964:	d101      	bne.n	800096a <LL_TIM_OC_EnablePreload+0x46>
 8000966:	2307      	movs	r3, #7
 8000968:	e00e      	b.n	8000988 <LL_TIM_OC_EnablePreload+0x64>
 800096a:	2308      	movs	r3, #8
 800096c:	e00c      	b.n	8000988 <LL_TIM_OC_EnablePreload+0x64>
 800096e:	2306      	movs	r3, #6
 8000970:	e00a      	b.n	8000988 <LL_TIM_OC_EnablePreload+0x64>
 8000972:	2305      	movs	r3, #5
 8000974:	e008      	b.n	8000988 <LL_TIM_OC_EnablePreload+0x64>
 8000976:	2304      	movs	r3, #4
 8000978:	e006      	b.n	8000988 <LL_TIM_OC_EnablePreload+0x64>
 800097a:	2303      	movs	r3, #3
 800097c:	e004      	b.n	8000988 <LL_TIM_OC_EnablePreload+0x64>
 800097e:	2302      	movs	r3, #2
 8000980:	e002      	b.n	8000988 <LL_TIM_OC_EnablePreload+0x64>
 8000982:	2301      	movs	r3, #1
 8000984:	e000      	b.n	8000988 <LL_TIM_OC_EnablePreload+0x64>
 8000986:	2300      	movs	r3, #0
 8000988:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3318      	adds	r3, #24
 800098e:	4619      	mov	r1, r3
 8000990:	7bfb      	ldrb	r3, [r7, #15]
 8000992:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <LL_TIM_OC_EnablePreload+0x98>)
 8000994:	5cd3      	ldrb	r3, [r2, r3]
 8000996:	440b      	add	r3, r1
 8000998:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	4907      	ldr	r1, [pc, #28]	@ (80009c0 <LL_TIM_OC_EnablePreload+0x9c>)
 80009a2:	5ccb      	ldrb	r3, [r1, r3]
 80009a4:	4619      	mov	r1, r3
 80009a6:	2308      	movs	r3, #8
 80009a8:	408b      	lsls	r3, r1
 80009aa:	431a      	orrs	r2, r3
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	601a      	str	r2, [r3, #0]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	08002424 	.word	0x08002424
 80009c0:	08002430 	.word	0x08002430

080009c4 <LL_TIM_DisableExternalClock>:
  * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	609a      	str	r2, [r3, #8]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80009f6:	f023 0307 	bic.w	r3, r3, #7
 80009fa:	683a      	ldr	r2, [r7, #0]
 80009fc:	431a      	orrs	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	609a      	str	r2, [r3, #8]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	431a      	orrs	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	605a      	str	r2, [r3, #4]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	605a      	str	r2, [r3, #4]
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <LL_TIM_ConfigETR>:
  *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ConfigETR(TIM_TypeDef *TIMx, uint32_t ETRPolarity, uint32_t ETRPrescaler,
                                      uint32_t ETRFilter)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b085      	sub	sp, #20
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
 8000a86:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	f423 423f 	bic.w	r2, r3, #48896	@ 0xbf00
 8000a90:	68b9      	ldr	r1, [r7, #8]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4319      	orrs	r1, r3
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	430b      	orrs	r3, r1
 8000a9a:	431a      	orrs	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	609a      	str	r2, [r3, #8]
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <LL_TIM_SetOCRefClearInputSource>:
  *         @arg @ref LL_TIM_OCREF_CLR_INT_NC
  *         @arg @ref LL_TIM_OCREF_CLR_INT_ETR
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOCRefClearInputSource(TIM_TypeDef *TIMx, uint32_t OCRefClearInputSource)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	f023 0208 	bic.w	r2, r3, #8
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	683a      	ldr	r2, [r7, #0]
 8000ae0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000af2:	2001      	movs	r0, #1
 8000af4:	f7ff fe2e 	bl	8000754 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000af8:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000afc:	f7ff fe12 	bl	8000724 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f7ff fb63 	bl	80001cc <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000b06:	f7ff fb85 	bl	8000214 <__NVIC_GetPriorityGrouping>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	210f      	movs	r1, #15
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fbb7 	bl	8000284 <NVIC_EncodePriority>
 8000b16:	4603      	mov	r3, r0
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b1e:	f7ff fb87 	bl	8000230 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b22:	f000 f80f 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b26:	f000 fae1 	bl	80010ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b2a:	f000 f847 	bl	8000bbc <MX_ADC1_Init>
  MX_COMP1_Init();
 8000b2e:	f000 f8e7 	bl	8000d00 <MX_COMP1_Init>
  MX_I2C1_Init();
 8000b32:	f000 f945 	bl	8000dc0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000b36:	f000 f9a3 	bl	8000e80 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000b3a:	f000 fa0d 	bl	8000f58 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b3e:	bf00      	nop
 8000b40:	e7fd      	b.n	8000b3e <main+0x50>
	...

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f7ff fe1b 	bl	8000784 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8000b4e:	bf00      	nop
 8000b50:	f7ff fe2c 	bl	80007ac <LL_FLASH_GetLatency>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d1fa      	bne.n	8000b50 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000b5a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b5e:	f7ff fe33 	bl	80007c8 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 8000b62:	bf00      	nop
 8000b64:	f7ff fe44 	bl	80007f0 <LL_PWR_IsActiveFlag_VOS>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1fa      	bne.n	8000b64 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_HSE_EnableBypass();
 8000b6e:	f7ff fd07 	bl	8000580 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 8000b72:	f7ff fd15 	bl	80005a0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000b76:	bf00      	nop
 8000b78:	f7ff fd22 	bl	80005c0 <LL_RCC_HSE_IsReady>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d1fa      	bne.n	8000b78 <SystemClock_Config+0x34>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8000b82:	2002      	movs	r0, #2
 8000b84:	f7ff fd30 	bl	80005e8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE)
 8000b88:	bf00      	nop
 8000b8a:	f7ff fd41 	bl	8000610 <LL_RCC_GetSysClkSource>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b08      	cmp	r3, #8
 8000b92:	d1fa      	bne.n	8000b8a <SystemClock_Config+0x46>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff fd49 	bl	800062c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f7ff fd5a 	bl	8000654 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f7ff fd6b 	bl	800067c <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(25000000);
 8000ba6:	4804      	ldr	r0, [pc, #16]	@ (8000bb8 <SystemClock_Config+0x74>)
 8000ba8:	f001 fbe6 	bl	8002378 <LL_Init1msTick>

  LL_SetSystemCoreClock(25000000);
 8000bac:	4802      	ldr	r0, [pc, #8]	@ (8000bb8 <SystemClock_Config+0x74>)
 8000bae:	f001 fbf1 	bl	8002394 <LL_SetSystemCoreClock>
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	017d7840 	.word	0x017d7840

08000bbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b094      	sub	sp, #80	@ 0x50
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000bc2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000bce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
 8000bde:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000be0:	f107 0318 	add.w	r3, r7, #24
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
 8000bfc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000bfe:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c02:	f7ff fd77 	bl	80006f4 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff fd74 	bl	80006f4 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA2   ------> ADC1_IN7
  PA3   ------> ADC1_IN8
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000c0c:	230c      	movs	r3, #12
 8000c0e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c10:	2303      	movs	r3, #3
 8000c12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c14:	2300      	movs	r3, #0
 8000c16:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	463b      	mov	r3, r7
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c20:	f000 fd8f 	bl	8001742 <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000c24:	2300      	movs	r3, #0
 8000c26:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	647b      	str	r3, [r7, #68]	@ 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000c30:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c34:	4619      	mov	r1, r3
 8000c36:	482c      	ldr	r0, [pc, #176]	@ (8000ce8 <MX_ADC1_Init+0x12c>)
 8000c38:	f000 fb84 	bl	8001344 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000c50:	2300      	movs	r3, #0
 8000c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000c54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4823      	ldr	r0, [pc, #140]	@ (8000ce8 <MX_ADC1_Init+0x12c>)
 8000c5c:	f000 fb98 	bl	8001390 <LL_ADC_REG_Init>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8000c60:	2100      	movs	r1, #0
 8000c62:	4821      	ldr	r0, [pc, #132]	@ (8000ce8 <MX_ADC1_Init+0x12c>)
 8000c64:	f7ff fbd0 	bl	8000408 <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000c70:	f107 0318 	add.w	r3, r7, #24
 8000c74:	4619      	mov	r1, r3
 8000c76:	481d      	ldr	r0, [pc, #116]	@ (8000cec <MX_ADC1_Init+0x130>)
 8000c78:	f000 fb24 	bl	80012c4 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_NONE);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	481b      	ldr	r0, [pc, #108]	@ (8000cec <MX_ADC1_Init+0x130>)
 8000c80:	f7ff fb33 	bl	80002ea <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000c84:	4818      	ldr	r0, [pc, #96]	@ (8000ce8 <MX_ADC1_Init+0x12c>)
 8000c86:	f7ff fbd4 	bl	8000432 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000c8a:	4817      	ldr	r0, [pc, #92]	@ (8000ce8 <MX_ADC1_Init+0x12c>)
 8000c8c:	f7ff fbe3 	bl	8000456 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000c90:	4b17      	ldr	r3, [pc, #92]	@ (8000cf0 <MX_ADC1_Init+0x134>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	099b      	lsrs	r3, r3, #6
 8000c96:	4a17      	ldr	r2, [pc, #92]	@ (8000cf4 <MX_ADC1_Init+0x138>)
 8000c98:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9c:	099a      	lsrs	r2, r3, #6
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <MX_ADC1_Init+0x13c>)
 8000caa:	fba3 2302 	umull	r2, r3, r3, r2
 8000cae:	08db      	lsrs	r3, r3, #3
 8000cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while(wait_loop_index != 0)
 8000cb2:	e002      	b.n	8000cba <MX_ADC1_Init+0xfe>
  {
    wait_loop_index--;
 8000cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while(wait_loop_index != 0)
 8000cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1f9      	bne.n	8000cb4 <MX_ADC1_Init+0xf8>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 8000cc0:	4a0e      	ldr	r2, [pc, #56]	@ (8000cfc <MX_ADC1_Init+0x140>)
 8000cc2:	2106      	movs	r1, #6
 8000cc4:	4808      	ldr	r0, [pc, #32]	@ (8000ce8 <MX_ADC1_Init+0x12c>)
 8000cc6:	f7ff fb23 	bl	8000310 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	490b      	ldr	r1, [pc, #44]	@ (8000cfc <MX_ADC1_Init+0x140>)
 8000cce:	4806      	ldr	r0, [pc, #24]	@ (8000ce8 <MX_ADC1_Init+0x12c>)
 8000cd0:	f7ff fb4a 	bl	8000368 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SINGLE_ENDED);
 8000cd4:	227f      	movs	r2, #127	@ 0x7f
 8000cd6:	4909      	ldr	r1, [pc, #36]	@ (8000cfc <MX_ADC1_Init+0x140>)
 8000cd8:	4803      	ldr	r0, [pc, #12]	@ (8000ce8 <MX_ADC1_Init+0x12c>)
 8000cda:	f7ff fb71 	bl	80003c0 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	3750      	adds	r7, #80	@ 0x50
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	50040000 	.word	0x50040000
 8000cec:	50040300 	.word	0x50040300
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	053e2d63 	.word	0x053e2d63
 8000cf8:	cccccccd 	.word	0xcccccccd
 8000cfc:	1d500080 	.word	0x1d500080

08000d00 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08e      	sub	sp, #56	@ 0x38
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN COMP1_Init 0 */

  /* USER CODE END COMP1_Init 0 */

  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 8000d06:	f107 0320 	add.w	r3, r7, #32
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]
 8000d16:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
 8000d28:	615a      	str	r2, [r3, #20]

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff fce2 	bl	80006f4 <LL_AHB2_GRP1_EnableClock>
  /**COMP1 GPIO Configuration
  PA1   ------> COMP1_INP
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000d30:	2302      	movs	r3, #2
 8000d32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d34:	2303      	movs	r3, #3
 8000d36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 0308 	add.w	r3, r7, #8
 8000d40:	4619      	mov	r1, r3
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d46:	f000 fcfc 	bl	8001742 <LL_GPIO_Init>

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  COMP_InitStruct.PowerMode = LL_COMP_POWERMODE_HIGHSPEED;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  COMP_InitStruct.InputPlus = LL_COMP_INPUT_PLUS_IO3;
 8000d4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
  COMP_InitStruct.InputMinus = LL_COMP_INPUT_MINUS_1_2VREFINT;
 8000d54:	4b16      	ldr	r3, [pc, #88]	@ (8000db0 <MX_COMP1_Init+0xb0>)
 8000d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_NONE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  COMP_InitStruct.OutputPolarity = LL_COMP_OUTPUTPOL_NONINVERTED;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	633b      	str	r3, [r7, #48]	@ 0x30
  COMP_InitStruct.OutputBlankingSource = LL_COMP_BLANKINGSRC_NONE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_COMP_Init(COMP1, &COMP_InitStruct);
 8000d64:	f107 0320 	add.w	r3, r7, #32
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4812      	ldr	r0, [pc, #72]	@ (8000db4 <MX_COMP1_Init+0xb4>)
 8000d6c:	f000 fb6e 	bl	800144c <LL_COMP_Init>

  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles */
  __IO uint32_t wait_loop_index = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8000d74:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <MX_COMP1_Init+0xb8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a10      	ldr	r2, [pc, #64]	@ (8000dbc <MX_COMP1_Init+0xbc>)
 8000d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7e:	0cdb      	lsrs	r3, r3, #19
 8000d80:	22c8      	movs	r2, #200	@ 0xc8
 8000d82:	fb02 f303 	mul.w	r3, r2, r3
 8000d86:	607b      	str	r3, [r7, #4]
  while(wait_loop_index != 0)
 8000d88:	e002      	b.n	8000d90 <MX_COMP1_Init+0x90>
  {
    wait_loop_index--;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	607b      	str	r3, [r7, #4]
  while(wait_loop_index != 0)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f9      	bne.n	8000d8a <MX_COMP1_Init+0x8a>
  }
  LL_EXTI_DisableEvent_0_31(LL_EXTI_LINE_21);
 8000d96:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000d9a:	f7ff fb85 	bl	80004a8 <LL_EXTI_DisableEvent_0_31>
  LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_21);
 8000d9e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000da2:	f7ff fb6d 	bl	8000480 <LL_EXTI_DisableIT_0_31>
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	3738      	adds	r7, #56	@ 0x38
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	00c00010 	.word	0x00c00010
 8000db4:	40010200 	.word	0x40010200
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	431bde83 	.word	0x431bde83

08000dc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08e      	sub	sp, #56	@ 0x38
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
 8000dd6:	615a      	str	r2, [r3, #20]
 8000dd8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]

  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 8000dea:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 8000dee:	f7ff fc59 	bl	80006a4 <LL_RCC_SetI2CClockSource>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000df2:	2002      	movs	r0, #2
 8000df4:	f7ff fc7e 	bl	80006f4 <LL_AHB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000df8:	23c0      	movs	r3, #192	@ 0xc0
 8000dfa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000e04:	2301      	movs	r3, #1
 8000e06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	4619      	mov	r1, r3
 8000e14:	4817      	ldr	r0, [pc, #92]	@ (8000e74 <MX_I2C1_Init+0xb4>)
 8000e16:	f000 fc94 	bl	8001742 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000e1a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000e1e:	f7ff fc81 	bl	8000724 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000e22:	4815      	ldr	r0, [pc, #84]	@ (8000e78 <MX_I2C1_Init+0xb8>)
 8000e24:	f7ff fb9c 	bl	8000560 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000e28:	4813      	ldr	r0, [pc, #76]	@ (8000e78 <MX_I2C1_Init+0xb8>)
 8000e2a:	f7ff fb89 	bl	8000540 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000e2e:	4812      	ldr	r0, [pc, #72]	@ (8000e78 <MX_I2C1_Init+0xb8>)
 8000e30:	f7ff fb5e 	bl	80004f0 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000e34:	4810      	ldr	r0, [pc, #64]	@ (8000e78 <MX_I2C1_Init+0xb8>)
 8000e36:	f7ff fb4b 	bl	80004d0 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x0080608D;
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e7c <MX_I2C1_Init+0xbc>)
 8000e40:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000e52:	2300      	movs	r3, #0
 8000e54:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4806      	ldr	r0, [pc, #24]	@ (8000e78 <MX_I2C1_Init+0xb8>)
 8000e5e:	f000 fd81 	bl	8001964 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	4804      	ldr	r0, [pc, #16]	@ (8000e78 <MX_I2C1_Init+0xb8>)
 8000e68:	f7ff fb52 	bl	8000510 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	3738      	adds	r7, #56	@ 0x38
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	48000400 	.word	0x48000400
 8000e78:	40005400 	.word	0x40005400
 8000e7c:	0080608d 	.word	0x0080608d

08000e80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b090      	sub	sp, #64	@ 0x40
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000e86:	f107 0318 	add.w	r3, r7, #24
 8000e8a:	2228      	movs	r2, #40	@ 0x28
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 fa90 	bl	80023b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	463b      	mov	r3, r7
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]
 8000ea2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000ea4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000ea8:	f7ff fc54 	bl	8000754 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f7ff fc21 	bl	80006f4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	f7ff fc1e 	bl	80006f4 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA7   ------> SPI1_MOSI
  PB4 (NJTRST)   ------> SPI1_MISO
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 8000eb8:	23a0      	movs	r3, #160	@ 0xa0
 8000eba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000ecc:	2305      	movs	r3, #5
 8000ece:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed8:	f000 fc33 	bl	8001742 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000edc:	2310      	movs	r3, #16
 8000ede:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000ef0:	2305      	movs	r3, #5
 8000ef2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4815      	ldr	r0, [pc, #84]	@ (8000f50 <MX_SPI1_Init+0xd0>)
 8000efa:	f000 fc22 	bl	8001742 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000f02:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000f06:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_4BIT;
 8000f08:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f0c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000f16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000f20:	2300      	movs	r3, #0
 8000f22:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 8000f28:	2307      	movs	r3, #7
 8000f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	4619      	mov	r1, r3
 8000f32:	4808      	ldr	r0, [pc, #32]	@ (8000f54 <MX_SPI1_Init+0xd4>)
 8000f34:	f000 fd88 	bl	8001a48 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4806      	ldr	r0, [pc, #24]	@ (8000f54 <MX_SPI1_Init+0xd4>)
 8000f3c:	f7ff fc6c 	bl	8000818 <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 8000f40:	4804      	ldr	r0, [pc, #16]	@ (8000f54 <MX_SPI1_Init+0xd4>)
 8000f42:	f7ff fc7c 	bl	800083e <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	3740      	adds	r7, #64	@ 0x40
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	48000400 	.word	0x48000400
 8000f54:	40013000 	.word	0x40013000

08000f58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b09e      	sub	sp, #120	@ 0x78
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000f5e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000f6e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000f72:	2220      	movs	r2, #32
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 fa1c 	bl	80023b4 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	2228      	movs	r2, #40	@ 0x28
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 fa15 	bl	80023b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
 8000f98:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000f9a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000f9e:	f7ff fbd9 	bl	8000754 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	66bb      	str	r3, [r7, #104]	@ 0x68
  TIM_InitStruct.Autoreload = 65535;
 8000fac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	673b      	str	r3, [r7, #112]	@ 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	677b      	str	r3, [r7, #116]	@ 0x74
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000fba:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4848      	ldr	r0, [pc, #288]	@ (80010e4 <MX_TIM1_Init+0x18c>)
 8000fc2:	f000 fe29 	bl	8001c18 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000fc6:	4847      	ldr	r0, [pc, #284]	@ (80010e4 <MX_TIM1_Init+0x18c>)
 8000fc8:	f7ff fc49 	bl	800085e <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4845      	ldr	r0, [pc, #276]	@ (80010e4 <MX_TIM1_Init+0x18c>)
 8000fd0:	f7ff fd08 	bl	80009e4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8000fd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fd8:	4842      	ldr	r0, [pc, #264]	@ (80010e4 <MX_TIM1_Init+0x18c>)
 8000fda:	f7ff fca3 	bl	8000924 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000fde:	2360      	movs	r3, #96	@ 0x60
 8000fe0:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.CompareValue = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	653b      	str	r3, [r7, #80]	@ 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	657b      	str	r3, [r7, #84]	@ 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	663b      	str	r3, [r7, #96]	@ 0x60
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8000ffe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001002:	461a      	mov	r2, r3
 8001004:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001008:	4836      	ldr	r0, [pc, #216]	@ (80010e4 <MX_TIM1_Init+0x18c>)
 800100a:	f000 fe63 	bl	8001cd4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 800100e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001012:	4834      	ldr	r0, [pc, #208]	@ (80010e4 <MX_TIM1_Init+0x18c>)
 8001014:	f7ff fc34 	bl	8000880 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOCRefClearInputSource(TIM1, LL_TIM_OCREF_CLR_INT_NC);
 8001018:	2100      	movs	r1, #0
 800101a:	4832      	ldr	r0, [pc, #200]	@ (80010e4 <MX_TIM1_Init+0x18c>)
 800101c:	f7ff fd46 	bl	8000aac <LL_TIM_SetOCRefClearInputSource>
  LL_TIM_DisableExternalClock(TIM1);
 8001020:	4830      	ldr	r0, [pc, #192]	@ (80010e4 <MX_TIM1_Init+0x18c>)
 8001022:	f7ff fccf 	bl	80009c4 <LL_TIM_DisableExternalClock>
  LL_TIM_ConfigETR(TIM1, LL_TIM_ETR_POLARITY_NONINVERTED, LL_TIM_ETR_PRESCALER_DIV1, LL_TIM_ETR_FILTER_FDIV1);
 8001026:	2300      	movs	r3, #0
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	482d      	ldr	r0, [pc, #180]	@ (80010e4 <MX_TIM1_Init+0x18c>)
 800102e:	f7ff fd24 	bl	8000a7a <LL_TIM_ConfigETR>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001032:	2100      	movs	r1, #0
 8001034:	482b      	ldr	r0, [pc, #172]	@ (80010e4 <MX_TIM1_Init+0x18c>)
 8001036:	f7ff fcea 	bl	8000a0e <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 800103a:	2100      	movs	r1, #0
 800103c:	4829      	ldr	r0, [pc, #164]	@ (80010e4 <MX_TIM1_Init+0x18c>)
 800103e:	f7ff fcf9 	bl	8000a34 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001042:	4828      	ldr	r0, [pc, #160]	@ (80010e4 <MX_TIM1_Init+0x18c>)
 8001044:	f7ff fd09 	bl	8000a5a <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800105e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001062:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	633b      	str	r3, [r7, #48]	@ 0x30
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 800106c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001070:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	643b      	str	r3, [r7, #64]	@ 0x40
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	4818      	ldr	r0, [pc, #96]	@ (80010e4 <MX_TIM1_Init+0x18c>)
 8001082:	f000 fe87 	bl	8001d94 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001086:	2002      	movs	r0, #2
 8001088:	f7ff fb34 	bl	80006f4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff fb31 	bl	80006f4 <LL_AHB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PB1   ------> TIM1_CH3N
  PA10   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001092:	2302      	movs	r3, #2
 8001094:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001096:	2302      	movs	r3, #2
 8001098:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	4619      	mov	r1, r3
 80010ae:	480e      	ldr	r0, [pc, #56]	@ (80010e8 <MX_TIM1_Init+0x190>)
 80010b0:	f000 fb47 	bl	8001742 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80010b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010ba:	2302      	movs	r3, #2
 80010bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4619      	mov	r1, r3
 80010d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d6:	f000 fb34 	bl	8001742 <LL_GPIO_Init>

}
 80010da:	bf00      	nop
 80010dc:	3778      	adds	r7, #120	@ 0x78
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40012c00 	.word	0x40012c00
 80010e8:	48000400 	.word	0x48000400

080010ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	463b      	mov	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
 8001100:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001102:	2004      	movs	r0, #4
 8001104:	f7ff faf6 	bl	80006f4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001108:	2001      	movs	r0, #1
 800110a:	f7ff faf3 	bl	80006f4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800110e:	2002      	movs	r0, #2
 8001110:	f7ff faf0 	bl	80006f4 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8001114:	2110      	movs	r1, #16
 8001116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111a:	f7ff fcda 	bl	8000ad2 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 800111e:	2101      	movs	r1, #1
 8001120:	481e      	ldr	r0, [pc, #120]	@ (800119c <MX_GPIO_Init+0xb0>)
 8001122:	f7ff fcd6 	bl	8000ad2 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001126:	2310      	movs	r3, #16
 8001128:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800112a:	2301      	movs	r3, #1
 800112c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001142:	f000 fafe 	bl	8001742 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001146:	2301      	movs	r3, #1
 8001148:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800114a:	2301      	movs	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	463b      	mov	r3, r7
 800115c:	4619      	mov	r1, r3
 800115e:	480f      	ldr	r0, [pc, #60]	@ (800119c <MX_GPIO_Init+0xb0>)
 8001160:	f000 faef 	bl	8001742 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001164:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001168:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	463b      	mov	r3, r7
 8001174:	4619      	mov	r1, r3
 8001176:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800117a:	f000 fae2 	bl	8001742 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800117e:	2308      	movs	r3, #8
 8001180:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	463b      	mov	r3, r7
 800118c:	4619      	mov	r1, r3
 800118e:	4803      	ldr	r0, [pc, #12]	@ (800119c <MX_GPIO_Init+0xb0>)
 8001190:	f000 fad7 	bl	8001742 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001194:	bf00      	nop
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	48000400 	.word	0x48000400

080011a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <NMI_Handler+0x4>

080011a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <HardFault_Handler+0x4>

080011b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <MemManage_Handler+0x4>

080011b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <BusFault_Handler+0x4>

080011c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <UsageFault_Handler+0x4>

080011c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <SystemInit+0x20>)
 8001206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800120a:	4a05      	ldr	r2, [pc, #20]	@ (8001220 <SystemInit+0x20>)
 800120c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001210:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001224:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800125c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001228:	f7ff ffea 	bl	8001200 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800122c:	480c      	ldr	r0, [pc, #48]	@ (8001260 <LoopForever+0x6>)
  ldr r1, =_edata
 800122e:	490d      	ldr	r1, [pc, #52]	@ (8001264 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001230:	4a0d      	ldr	r2, [pc, #52]	@ (8001268 <LoopForever+0xe>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001234:	e002      	b.n	800123c <LoopCopyDataInit>

08001236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123a:	3304      	adds	r3, #4

0800123c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800123c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001240:	d3f9      	bcc.n	8001236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001242:	4a0a      	ldr	r2, [pc, #40]	@ (800126c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001244:	4c0a      	ldr	r4, [pc, #40]	@ (8001270 <LoopForever+0x16>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001248:	e001      	b.n	800124e <LoopFillZerobss>

0800124a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800124c:	3204      	adds	r2, #4

0800124e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001250:	d3fb      	bcc.n	800124a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001252:	f001 f8b7 	bl	80023c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001256:	f7ff fc4a 	bl	8000aee <main>

0800125a <LoopForever>:

LoopForever:
    b LoopForever
 800125a:	e7fe      	b.n	800125a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800125c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001264:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001268:	08002444 	.word	0x08002444
  ldr r2, =_sbss
 800126c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001270:	20000020 	.word	0x20000020

08001274 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC1_2_IRQHandler>

08001276 <LL_ADC_REG_SetSequencerLength>:
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001284:	f023 020f 	bic.w	r2, r3, #15
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	431a      	orrs	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d101      	bne.n	80012b4 <LL_ADC_IsEnabled+0x18>
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <LL_ADC_IsEnabled+0x1a>
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, const LL_ADC_CommonInitTypeDef *pADC_CommonInitStruct)
{
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 80012d2:	4819      	ldr	r0, [pc, #100]	@ (8001338 <LL_ADC_CommonInit+0x74>)
 80012d4:	f7ff ffe2 	bl	800129c <LL_ADC_IsEnabled>
 80012d8:	4604      	mov	r4, r0
 80012da:	4818      	ldr	r0, [pc, #96]	@ (800133c <LL_ADC_CommonInit+0x78>)
 80012dc:	f7ff ffde 	bl	800129c <LL_ADC_IsEnabled>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4323      	orrs	r3, r4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d120      	bne.n	800132a <LL_ADC_CommonInit+0x66>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (pADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d012      	beq.n	8001316 <LL_ADC_CommonInit+0x52>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <LL_ADC_CommonInit+0x7c>)
 80012f6:	4013      	ands	r3, r2
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	6811      	ldr	r1, [r2, #0]
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	6852      	ldr	r2, [r2, #4]
 8001300:	4311      	orrs	r1, r2
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	6892      	ldr	r2, [r2, #8]
 8001306:	4311      	orrs	r1, r2
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	68d2      	ldr	r2, [r2, #12]
 800130c:	430a      	orrs	r2, r1
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	e00b      	b.n	800132e <LL_ADC_CommonInit+0x6a>
                 | pADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <LL_ADC_CommonInit+0x7c>)
 800131c:	4013      	ands	r3, r2
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	6812      	ldr	r2, [r2, #0]
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	e001      	b.n	800132e <LL_ADC_CommonInit+0x6a>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	bd90      	pop	{r4, r7, pc}
 8001338:	50040000 	.word	0x50040000
 800133c:	50040100 	.word	0x50040100
 8001340:	ffc030e0 	.word	0xffc030e0

08001344 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, const LL_ADC_InitTypeDef *pADC_InitStruct)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(pADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(pADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffa2 	bl	800129c <LL_ADC_IsEnabled>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d111      	bne.n	8001382 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001366:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	6811      	ldr	r1, [r2, #0]
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	6852      	ldr	r2, [r2, #4]
 8001372:	4311      	orrs	r1, r2
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	6892      	ldr	r2, [r2, #8]
 8001378:	430a      	orrs	r2, r1
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	e001      	b.n	8001386 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, const LL_ADC_REG_InitTypeDef *pADC_RegInitStruct)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800139a:	2300      	movs	r3, #0
 800139c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(pADC_RegInitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(pADC_RegInitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ff7c 	bl	800129c <LL_ADC_IsEnabled>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d132      	bne.n	8001410 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (pADC_RegInitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d015      	beq.n	80013de <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <LL_ADC_REG_Init+0x90>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	6811      	ldr	r1, [r2, #0]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	6892      	ldr	r2, [r2, #8]
 80013c2:	4311      	orrs	r1, r2
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	68d2      	ldr	r2, [r2, #12]
 80013c8:	4311      	orrs	r1, r2
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	6912      	ldr	r2, [r2, #16]
 80013ce:	4311      	orrs	r1, r2
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	6952      	ldr	r2, [r2, #20]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	e011      	b.n	8001402 <LL_ADC_REG_Init+0x72>
                 | pADC_RegInitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68da      	ldr	r2, [r3, #12]
 80013e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <LL_ADC_REG_Init+0x90>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	6811      	ldr	r1, [r2, #0]
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	68d2      	ldr	r2, [r2, #12]
 80013ee:	4311      	orrs	r1, r2
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	6912      	ldr	r2, [r2, #16]
 80013f4:	4311      	orrs	r1, r2
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	6952      	ldr	r2, [r2, #20]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	431a      	orrs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	60da      	str	r2, [r3, #12]
                 | pADC_RegInitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, pADC_RegInitStruct->SequencerLength);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4619      	mov	r1, r3
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff34 	bl	8001276 <LL_ADC_REG_SetSequencerLength>
 800140e:	e001      	b.n	8001414 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	fff0c03c 	.word	0xfff0c03c

08001424 <LL_COMP_IsLocked>:
  * @rmtoll CSR      LOCK           LL_COMP_IsLocked
  * @param  COMPx Comparator instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_COMP_IsLocked(const COMP_TypeDef *COMPx)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(COMPx->CSR, COMP_CSR_LOCK) == (COMP_CSR_LOCK)) ? 1UL : 0UL);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001434:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001438:	d101      	bne.n	800143e <LL_COMP_IsLocked+0x1a>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <LL_COMP_IsLocked+0x1c>
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <LL_COMP_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: COMP registers are initialized
  *          - ERROR: COMP registers are not initialized
  */
ErrorStatus LL_COMP_Init(COMP_TypeDef *COMPx, const LL_COMP_InitTypeDef *COMP_InitStruct)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001456:	2300      	movs	r3, #0
 8001458:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_COMP_OUTPUT_POLARITY(COMP_InitStruct->OutputPolarity));
  assert_param(IS_LL_COMP_OUTPUT_BLANKING_SOURCE(COMPx, COMP_InitStruct->OutputBlankingSource));

  /* Note: Hardware constraint (refer to description of this function)        */
  /*       COMP instance must not be locked.                                  */
  if (LL_COMP_IsLocked(COMPx) == 0UL)
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ffe2 	bl	8001424 <LL_COMP_IsLocked>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d118      	bne.n	8001498 <LL_COMP_Init+0x4c>
    /*  - InputMinus                                                          */
    /*  - InputHysteresis                                                     */
    /*  - OutputPolarity                                                      */
    /*  - OutputBlankingSource                                                */
#if defined(COMP_CSR_INMESEL_1)
    MODIFY_REG(COMPx->CSR,
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <LL_COMP_Init+0x5c>)
 800146c:	4013      	ands	r3, r2
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	6811      	ldr	r1, [r2, #0]
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	6852      	ldr	r2, [r2, #4]
 8001476:	4311      	orrs	r1, r2
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	6892      	ldr	r2, [r2, #8]
 800147c:	4311      	orrs	r1, r2
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	68d2      	ldr	r2, [r2, #12]
 8001482:	4311      	orrs	r1, r2
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	6912      	ldr	r2, [r2, #16]
 8001488:	4311      	orrs	r1, r2
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	6952      	ldr	r2, [r2, #20]
 800148e:	430a      	orrs	r2, r1
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e001      	b.n	800149c <LL_COMP_Init+0x50>

  }
  else
  {
    /* Initialization error: COMP instance is locked.                         */
    status = ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800149c:	7bfb      	ldrb	r3, [r7, #15]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	f9207e03 	.word	0xf9207e03

080014ac <LL_GPIO_SetPinMode>:
{
 80014ac:	b480      	push	{r7}
 80014ae:	b08b      	sub	sp, #44	@ 0x2c
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa93 f3a3 	rbit	r3, r3
 80014c6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80014d2:	2320      	movs	r3, #32
 80014d4:	e003      	b.n	80014de <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	fab3 f383 	clz	r3, r3
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	2103      	movs	r1, #3
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	401a      	ands	r2, r3
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	fa93 f3a3 	rbit	r3, r3
 80014f4:	61fb      	str	r3, [r7, #28]
  return result;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80014fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001500:	2320      	movs	r3, #32
 8001502:	e003      	b.n	800150c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001506:	fab3 f383 	clz	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	431a      	orrs	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	601a      	str	r2, [r3, #0]
}
 800151a:	bf00      	nop
 800151c:	372c      	adds	r7, #44	@ 0x2c
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <LL_GPIO_SetPinOutputType>:
{
 8001526:	b480      	push	{r7}
 8001528:	b085      	sub	sp, #20
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	43db      	mvns	r3, r3
 800153a:	401a      	ands	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	fb01 f303 	mul.w	r3, r1, r3
 8001544:	431a      	orrs	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	605a      	str	r2, [r3, #4]
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <LL_GPIO_SetPinSpeed>:
{
 8001556:	b480      	push	{r7}
 8001558:	b08b      	sub	sp, #44	@ 0x2c
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	fa93 f3a3 	rbit	r3, r3
 8001570:	613b      	str	r3, [r7, #16]
  return result;
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800157c:	2320      	movs	r3, #32
 800157e:	e003      	b.n	8001588 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	fab3 f383 	clz	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	2103      	movs	r1, #3
 800158c:	fa01 f303 	lsl.w	r3, r1, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	401a      	ands	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	fa93 f3a3 	rbit	r3, r3
 800159e:	61fb      	str	r3, [r7, #28]
  return result;
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80015a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80015aa:	2320      	movs	r3, #32
 80015ac:	e003      	b.n	80015b6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80015ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b0:	fab3 f383 	clz	r3, r3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	431a      	orrs	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	609a      	str	r2, [r3, #8]
}
 80015c4:	bf00      	nop
 80015c6:	372c      	adds	r7, #44	@ 0x2c
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_GPIO_SetPinPull>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	b08b      	sub	sp, #44	@ 0x2c
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa93 f3a3 	rbit	r3, r3
 80015ea:	613b      	str	r3, [r7, #16]
  return result;
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80015f6:	2320      	movs	r3, #32
 80015f8:	e003      	b.n	8001602 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	fab3 f383 	clz	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2103      	movs	r1, #3
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	401a      	ands	r2, r3
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	fa93 f3a3 	rbit	r3, r3
 8001618:	61fb      	str	r3, [r7, #28]
  return result;
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001624:	2320      	movs	r3, #32
 8001626:	e003      	b.n	8001630 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162a:	fab3 f383 	clz	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	431a      	orrs	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	60da      	str	r2, [r3, #12]
}
 800163e:	bf00      	nop
 8001640:	372c      	adds	r7, #44	@ 0x2c
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <LL_GPIO_SetAFPin_0_7>:
{
 800164a:	b480      	push	{r7}
 800164c:	b08b      	sub	sp, #44	@ 0x2c
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6a1a      	ldr	r2, [r3, #32]
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	fa93 f3a3 	rbit	r3, r3
 8001664:	613b      	str	r3, [r7, #16]
  return result;
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001670:	2320      	movs	r3, #32
 8001672:	e003      	b.n	800167c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fab3 f383 	clz	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	210f      	movs	r1, #15
 8001680:	fa01 f303 	lsl.w	r3, r1, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	401a      	ands	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	fa93 f3a3 	rbit	r3, r3
 8001692:	61fb      	str	r3, [r7, #28]
  return result;
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800169e:	2320      	movs	r3, #32
 80016a0:	e003      	b.n	80016aa <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	fab3 f383 	clz	r3, r3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	431a      	orrs	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	621a      	str	r2, [r3, #32]
}
 80016b8:	bf00      	nop
 80016ba:	372c      	adds	r7, #44	@ 0x2c
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_GPIO_SetAFPin_8_15>:
{
 80016c4:	b480      	push	{r7}
 80016c6:	b08b      	sub	sp, #44	@ 0x2c
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	fa93 f3a3 	rbit	r3, r3
 80016e0:	613b      	str	r3, [r7, #16]
  return result;
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80016ec:	2320      	movs	r3, #32
 80016ee:	e003      	b.n	80016f8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	fab3 f383 	clz	r3, r3
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	210f      	movs	r1, #15
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	401a      	ands	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	fa93 f3a3 	rbit	r3, r3
 8001710:	61fb      	str	r3, [r7, #28]
  return result;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800171c:	2320      	movs	r3, #32
 800171e:	e003      	b.n	8001728 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001722:	fab3 f383 	clz	r3, r3
 8001726:	b2db      	uxtb	r3, r3
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	fa01 f303 	lsl.w	r3, r1, r3
 8001730:	431a      	orrs	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001736:	bf00      	nop
 8001738:	372c      	adds	r7, #44	@ 0x2c
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b088      	sub	sp, #32
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	60fb      	str	r3, [r7, #12]
  return result;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <LL_GPIO_Init+0x26>
    return 32U;
 8001764:	2320      	movs	r3, #32
 8001766:	e003      	b.n	8001770 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fab3 f383 	clz	r3, r3
 800176e:	b2db      	uxtb	r3, r3
 8001770:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001772:	e048      	b.n	8001806 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	2101      	movs	r1, #1
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	fa01 f303 	lsl.w	r3, r1, r3
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d03a      	beq.n	8001800 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d003      	beq.n	800179a <LL_GPIO_Init+0x58>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d10e      	bne.n	80017b8 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	461a      	mov	r2, r3
 80017a0:	69b9      	ldr	r1, [r7, #24]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff fed7 	bl	8001556 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	6819      	ldr	r1, [r3, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	461a      	mov	r2, r3
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff feb7 	bl	8001526 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	461a      	mov	r2, r3
 80017be:	69b9      	ldr	r1, [r7, #24]
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff05 	bl	80015d0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d111      	bne.n	80017f2 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2bff      	cmp	r3, #255	@ 0xff
 80017d2:	d807      	bhi.n	80017e4 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	461a      	mov	r2, r3
 80017da:	69b9      	ldr	r1, [r7, #24]
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff34 	bl	800164a <LL_GPIO_SetAFPin_0_7>
 80017e2:	e006      	b.n	80017f2 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	461a      	mov	r2, r3
 80017ea:	69b9      	ldr	r1, [r7, #24]
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff69 	bl	80016c4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	461a      	mov	r2, r3
 80017f8:	69b9      	ldr	r1, [r7, #24]
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff fe56 	bl	80014ac <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	3301      	adds	r3, #1
 8001804:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	fa22 f303 	lsr.w	r3, r2, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1af      	bne.n	8001774 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3720      	adds	r7, #32
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <LL_I2C_Enable>:
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f043 0201 	orr.w	r2, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	601a      	str	r2, [r3, #0]
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <LL_I2C_Disable>:
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 0201 	bic.w	r2, r3, #1
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	601a      	str	r2, [r3, #0]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <LL_I2C_ConfigFilters>:
{
 800185e:	b480      	push	{r7}
 8001860:	b085      	sub	sp, #20
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	0219      	lsls	r1, r3, #8
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	430b      	orrs	r3, r1
 800187a:	431a      	orrs	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	601a      	str	r2, [r3, #0]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_I2C_SetOwnAddress1>:
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80018a0:	f023 0307 	bic.w	r3, r3, #7
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	431a      	orrs	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	609a      	str	r2, [r3, #8]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_I2C_EnableOwnAddress1>:
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	609a      	str	r2, [r3, #8]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_I2C_DisableOwnAddress1>:
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	609a      	str	r2, [r3, #8]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_I2C_SetTiming>:
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	611a      	str	r2, [r3, #16]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <LL_I2C_SetMode>:
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	601a      	str	r2, [r3, #0]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	605a      	str	r2, [r3, #4]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ff65 	bl	800183e <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	6899      	ldr	r1, [r3, #8]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	461a      	mov	r2, r3
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ff6d 	bl	800185e <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	4619      	mov	r1, r3
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffb6 	bl	80018fc <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff44 	bl	800181e <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffa0 	bl	80018dc <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	6919      	ldr	r1, [r3, #16]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	461a      	mov	r2, r3
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ff70 	bl	800188c <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff81 	bl	80018bc <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4619      	mov	r1, r3
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ffa9 	bl	8001918 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	4619      	mov	r1, r3
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ffb6 	bl	800193e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <LL_SPI_IsEnabled>:
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ec:	2b40      	cmp	r3, #64	@ 0x40
 80019ee:	d101      	bne.n	80019f4 <LL_SPI_IsEnabled+0x18>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <LL_SPI_IsEnabled+0x1a>
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <LL_SPI_SetRxFIFOThreshold>:
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	605a      	str	r2, [r3, #4]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_SPI_SetCRCPolynomial>:
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	461a      	mov	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	611a      	str	r2, [r3, #16]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ffc0 	bl	80019dc <LL_SPI_IsEnabled>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d145      	bne.n	8001aee <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001a6a:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	6811      	ldr	r1, [r2, #0]
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	6852      	ldr	r2, [r2, #4]
 8001a76:	4311      	orrs	r1, r2
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	68d2      	ldr	r2, [r2, #12]
 8001a7c:	4311      	orrs	r1, r2
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	6912      	ldr	r2, [r2, #16]
 8001a82:	4311      	orrs	r1, r2
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	6952      	ldr	r2, [r2, #20]
 8001a88:	4311      	orrs	r1, r2
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	6992      	ldr	r2, [r2, #24]
 8001a8e:	4311      	orrs	r1, r2
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	69d2      	ldr	r2, [r2, #28]
 8001a94:	4311      	orrs	r1, r2
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	6a12      	ldr	r2, [r2, #32]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001aaa:	f023 0304 	bic.w	r3, r3, #4
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	6891      	ldr	r1, [r2, #8]
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	6952      	ldr	r2, [r2, #20]
 8001ab6:	0c12      	lsrs	r2, r2, #16
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ac8:	d204      	bcs.n	8001ad4 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8001aca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ff97 	bl	8001a02 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001adc:	d105      	bne.n	8001aea <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff9f 	bl	8001a28 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8001aea:	2300      	movs	r3, #0
 8001aec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <LL_TIM_SetPrescaler>:
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_TIM_SetAutoReload>:
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_TIM_SetRepetitionCounter>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_TIM_OC_SetCompareCH1>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_TIM_OC_SetCompareCH2>:
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_TIM_OC_SetCompareCH3>:
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_TIM_OC_SetCompareCH4>:
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_TIM_OC_SetCompareCH5>:
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_TIM_OC_SetCompareCH6>:
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	f043 0201 	orr.w	r2, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	615a      	str	r2, [r3, #20]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a27      	ldr	r2, [pc, #156]	@ (8001cc8 <LL_TIM_Init+0xb0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d003      	beq.n	8001c38 <LL_TIM_Init+0x20>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c36:	d106      	bne.n	8001c46 <LL_TIM_Init+0x2e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc8 <LL_TIM_Init+0xb0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00b      	beq.n	8001c66 <LL_TIM_Init+0x4e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c54:	d007      	beq.n	8001c66 <LL_TIM_Init+0x4e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a1c      	ldr	r2, [pc, #112]	@ (8001ccc <LL_TIM_Init+0xb4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d003      	beq.n	8001c66 <LL_TIM_Init+0x4e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd0 <LL_TIM_Init+0xb8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d106      	bne.n	8001c74 <LL_TIM_Init+0x5c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ff47 	bl	8001b14 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff33 	bl	8001af8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <LL_TIM_Init+0xb0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d007      	beq.n	8001caa <LL_TIM_Init+0x92>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ccc <LL_TIM_Init+0xb4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d003      	beq.n	8001caa <LL_TIM_Init+0x92>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <LL_TIM_Init+0xb8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d105      	bne.n	8001cb6 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ff3d 	bl	8001b30 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ff9e 	bl	8001bf8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40012c00 	.word	0x40012c00
 8001ccc:	40014000 	.word	0x40014000
 8001cd0:	40014400 	.word	0x40014400

08001cd4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001cea:	d045      	beq.n	8001d78 <LL_TIM_OC_Init+0xa4>
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001cf2:	d848      	bhi.n	8001d86 <LL_TIM_OC_Init+0xb2>
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cfa:	d036      	beq.n	8001d6a <LL_TIM_OC_Init+0x96>
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d02:	d840      	bhi.n	8001d86 <LL_TIM_OC_Init+0xb2>
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d0a:	d027      	beq.n	8001d5c <LL_TIM_OC_Init+0x88>
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d12:	d838      	bhi.n	8001d86 <LL_TIM_OC_Init+0xb2>
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d1a:	d018      	beq.n	8001d4e <LL_TIM_OC_Init+0x7a>
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d22:	d830      	bhi.n	8001d86 <LL_TIM_OC_Init+0xb2>
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d003      	beq.n	8001d32 <LL_TIM_OC_Init+0x5e>
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b10      	cmp	r3, #16
 8001d2e:	d007      	beq.n	8001d40 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001d30:	e029      	b.n	8001d86 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 f891 	bl	8001e5c <OC1Config>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8001d3e:	e023      	b.n	8001d88 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f8fe 	bl	8001f44 <OC2Config>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8001d4c:	e01c      	b.n	8001d88 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 f96f 	bl	8002034 <OC3Config>
 8001d56:	4603      	mov	r3, r0
 8001d58:	75fb      	strb	r3, [r7, #23]
      break;
 8001d5a:	e015      	b.n	8001d88 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 f9e0 	bl	8002124 <OC4Config>
 8001d64:	4603      	mov	r3, r0
 8001d66:	75fb      	strb	r3, [r7, #23]
      break;
 8001d68:	e00e      	b.n	8001d88 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 fa39 	bl	80021e4 <OC5Config>
 8001d72:	4603      	mov	r3, r0
 8001d74:	75fb      	strb	r3, [r7, #23]
      break;
 8001d76:	e007      	b.n	8001d88 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 fa8a 	bl	8002294 <OC6Config>
 8001d80:	4603      	mov	r3, r0
 8001d82:	75fb      	strb	r3, [r7, #23]
      break;
 8001d84:	e000      	b.n	8001d88 <LL_TIM_OC_Init+0xb4>
      break;
 8001d86:	bf00      	nop
  }

  return result;
 8001d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	7b12      	ldrb	r2, [r2, #12]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	89d2      	ldrh	r2, [r2, #14]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e00:	4313      	orrs	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a10      	ldr	r2, [pc, #64]	@ (8001e58 <LL_TIM_BDTR_Init+0xc4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d114      	bne.n	8001e44 <LL_TIM_BDTR_Init+0xb0>
    assert_param(IS_LL_TIM_BREAK2_STATE(TIM_BDTRInitStruct->Break2State));
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	40012c00 	.word	0x40012c00

08001e5c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	f023 0201 	bic.w	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f023 0303 	bic.w	r3, r3, #3
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f023 0202 	bic.w	r2, r3, #2
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f023 0201 	bic.w	r2, r3, #1
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8001f38 <OC1Config+0xdc>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d007      	beq.n	8001ed2 <OC1Config+0x76>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f3c <OC1Config+0xe0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d003      	beq.n	8001ed2 <OC1Config+0x76>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a1c      	ldr	r2, [pc, #112]	@ (8001f40 <OC1Config+0xe4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d11e      	bne.n	8001f10 <OC1Config+0xb4>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f023 0208 	bic.w	r2, r3, #8
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f023 0204 	bic.w	r2, r3, #4
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4619      	mov	r1, r3
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff fe12 	bl	8001b4c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40012c00 	.word	0x40012c00
 8001f3c:	40014000 	.word	0x40014000
 8001f40:	40014400 	.word	0x40014400

08001f44 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	f023 0210 	bic.w	r2, r3, #16
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	0212      	lsls	r2, r2, #8
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f023 0220 	bic.w	r2, r3, #32
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	4313      	orrs	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f023 0210 	bic.w	r2, r3, #16
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a1f      	ldr	r2, [pc, #124]	@ (8002028 <OC2Config+0xe4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d007      	beq.n	8001fc0 <OC2Config+0x7c>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800202c <OC2Config+0xe8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d003      	beq.n	8001fc0 <OC2Config+0x7c>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a1d      	ldr	r2, [pc, #116]	@ (8002030 <OC2Config+0xec>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d11f      	bne.n	8002000 <OC2Config+0xbc>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	019b      	lsls	r3, r3, #6
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	019b      	lsls	r3, r3, #6
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4619      	mov	r1, r3
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff fda8 	bl	8001b68 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40012c00 	.word	0x40012c00
 800202c:	40014000 	.word	0x40014000
 8002030:	40014400 	.word	0x40014400

08002034 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f023 0303 	bic.w	r3, r3, #3
 8002062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800206a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	4313      	orrs	r3, r2
 8002084:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	4313      	orrs	r3, r2
 8002094:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a1f      	ldr	r2, [pc, #124]	@ (8002118 <OC3Config+0xe4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <OC3Config+0x7a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a1e      	ldr	r2, [pc, #120]	@ (800211c <OC3Config+0xe8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d003      	beq.n	80020ae <OC3Config+0x7a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002120 <OC3Config+0xec>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d11f      	bne.n	80020ee <OC3Config+0xba>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	029b      	lsls	r3, r3, #10
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	029b      	lsls	r3, r3, #10
 80020ca:	4313      	orrs	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	015b      	lsls	r3, r3, #5
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	4619      	mov	r1, r3
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff fd3f 	bl	8001b84 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40012c00 	.word	0x40012c00
 800211c:	40014000 	.word	0x40014000
 8002120:	40014400 	.word	0x40014400

08002124 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800215a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	0212      	lsls	r2, r2, #8
 8002164:	4313      	orrs	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	031b      	lsls	r3, r3, #12
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	031b      	lsls	r3, r3, #12
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a13      	ldr	r2, [pc, #76]	@ (80021d8 <OC4Config+0xb4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d007      	beq.n	80021a0 <OC4Config+0x7c>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a12      	ldr	r2, [pc, #72]	@ (80021dc <OC4Config+0xb8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d003      	beq.n	80021a0 <OC4Config+0x7c>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a11      	ldr	r2, [pc, #68]	@ (80021e0 <OC4Config+0xbc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d107      	bne.n	80021b0 <OC4Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	019b      	lsls	r3, r3, #6
 80021ac:	4313      	orrs	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4619      	mov	r1, r3
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff fcec 	bl	8001ba0 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40012c00 	.word	0x40012c00
 80021dc:	40014000 	.word	0x40014000
 80021e0:	40014400 	.word	0x40014400

080021e4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002204:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800220c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	4313      	orrs	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	041b      	lsls	r3, r3, #16
 8002224:	4313      	orrs	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	041b      	lsls	r3, r3, #16
 8002234:	4313      	orrs	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a13      	ldr	r2, [pc, #76]	@ (8002288 <OC5Config+0xa4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d007      	beq.n	8002250 <OC5Config+0x6c>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a12      	ldr	r2, [pc, #72]	@ (800228c <OC5Config+0xa8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d003      	beq.n	8002250 <OC5Config+0x6c>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a11      	ldr	r2, [pc, #68]	@ (8002290 <OC5Config+0xac>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d109      	bne.n	8002264 <OC5Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	4619      	mov	r1, r3
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff fca3 	bl	8001bbc <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40012c00 	.word	0x40012c00
 800228c:	40014000 	.word	0x40014000
 8002290:	40014400 	.word	0x40014400

08002294 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	0212      	lsls	r2, r2, #8
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	051b      	lsls	r3, r3, #20
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	051b      	lsls	r3, r3, #20
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a12      	ldr	r2, [pc, #72]	@ (8002338 <OC6Config+0xa4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d007      	beq.n	8002302 <OC6Config+0x6e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a11      	ldr	r2, [pc, #68]	@ (800233c <OC6Config+0xa8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d003      	beq.n	8002302 <OC6Config+0x6e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a10      	ldr	r2, [pc, #64]	@ (8002340 <OC6Config+0xac>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d109      	bne.n	8002316 <OC6Config+0x82>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	029b      	lsls	r3, r3, #10
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4619      	mov	r1, r3
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff fc5a 	bl	8001bdc <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40012c00 	.word	0x40012c00
 800233c:	40014000 	.word	0x40014000
 8002340:	40014400 	.word	0x40014400

08002344 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	fbb2 f3f3 	udiv	r3, r2, r3
 8002356:	4a07      	ldr	r2, [pc, #28]	@ (8002374 <LL_InitTick+0x30>)
 8002358:	3b01      	subs	r3, #1
 800235a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800235c:	4b05      	ldr	r3, [pc, #20]	@ (8002374 <LL_InitTick+0x30>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002362:	4b04      	ldr	r3, [pc, #16]	@ (8002374 <LL_InitTick+0x30>)
 8002364:	2205      	movs	r2, #5
 8002366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000e010 	.word	0xe000e010

08002378 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002380:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ffdd 	bl	8002344 <LL_InitTick>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800239c:	4a04      	ldr	r2, [pc, #16]	@ (80023b0 <LL_SetSystemCoreClock+0x1c>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6013      	str	r3, [r2, #0]
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000000 	.word	0x20000000

080023b4 <memset>:
 80023b4:	4402      	add	r2, r0
 80023b6:	4603      	mov	r3, r0
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d100      	bne.n	80023be <memset+0xa>
 80023bc:	4770      	bx	lr
 80023be:	f803 1b01 	strb.w	r1, [r3], #1
 80023c2:	e7f9      	b.n	80023b8 <memset+0x4>

080023c4 <__libc_init_array>:
 80023c4:	b570      	push	{r4, r5, r6, lr}
 80023c6:	4d0d      	ldr	r5, [pc, #52]	@ (80023fc <__libc_init_array+0x38>)
 80023c8:	4c0d      	ldr	r4, [pc, #52]	@ (8002400 <__libc_init_array+0x3c>)
 80023ca:	1b64      	subs	r4, r4, r5
 80023cc:	10a4      	asrs	r4, r4, #2
 80023ce:	2600      	movs	r6, #0
 80023d0:	42a6      	cmp	r6, r4
 80023d2:	d109      	bne.n	80023e8 <__libc_init_array+0x24>
 80023d4:	4d0b      	ldr	r5, [pc, #44]	@ (8002404 <__libc_init_array+0x40>)
 80023d6:	4c0c      	ldr	r4, [pc, #48]	@ (8002408 <__libc_init_array+0x44>)
 80023d8:	f000 f818 	bl	800240c <_init>
 80023dc:	1b64      	subs	r4, r4, r5
 80023de:	10a4      	asrs	r4, r4, #2
 80023e0:	2600      	movs	r6, #0
 80023e2:	42a6      	cmp	r6, r4
 80023e4:	d105      	bne.n	80023f2 <__libc_init_array+0x2e>
 80023e6:	bd70      	pop	{r4, r5, r6, pc}
 80023e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80023ec:	4798      	blx	r3
 80023ee:	3601      	adds	r6, #1
 80023f0:	e7ee      	b.n	80023d0 <__libc_init_array+0xc>
 80023f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80023f6:	4798      	blx	r3
 80023f8:	3601      	adds	r6, #1
 80023fa:	e7f2      	b.n	80023e2 <__libc_init_array+0x1e>
 80023fc:	0800243c 	.word	0x0800243c
 8002400:	0800243c 	.word	0x0800243c
 8002404:	0800243c 	.word	0x0800243c
 8002408:	08002440 	.word	0x08002440

0800240c <_init>:
 800240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240e:	bf00      	nop
 8002410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002412:	bc08      	pop	{r3}
 8002414:	469e      	mov	lr, r3
 8002416:	4770      	bx	lr

08002418 <_fini>:
 8002418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241a:	bf00      	nop
 800241c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800241e:	bc08      	pop	{r3}
 8002420:	469e      	mov	lr, r3
 8002422:	4770      	bx	lr
