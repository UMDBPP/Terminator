
# output binary
BIN := ./build/test.elf

# source files, any .c in the src directory, any .c (exclude files ending with template.c) in the hal directory, and two specific files needed for startup and other functions
SRCS := \
	$(wildcard ./src/*.c) \
	$(wildcard ./vendor/STM32L4_HAL/Src/*[!t][!e][!m][!p][!l][!a][!t][!e].c) \
	./vendor/CMSIS/Device/ST/STM32L4/Source/Templates/gcc/startup_stm32l412xx.s \
	./vendor/CMSIS/Device/ST/STM32L4/Source/Templates/system_stm32l4xx.c

# files included in the tarball generated by 'make dist' (e.g. add LICENSE file)
DISTFILES := $(BIN)

# filename of the tar archive generated by 'make dist'
DISTOUTPUT := $(BIN).tar.gz

# intermediate directory for generated object files
OBJDIR := ./build/.o
# intermediate directory for generated dependency files
DEPDIR := ./build/.d

# object files, auto generated from source files
OBJS := $(patsubst %,$(OBJDIR)/%.o,$(basename $(SRCS)))
# dependency files, auto generated from source files
DEPS := $(patsubst %,$(DEPDIR)/%.d,$(basename $(SRCS)))

# compilers (at least gcc and clang) don't create the subdirectories automatically
$(shell mkdir -p $(dir $(OBJS)) >/dev/null)
$(shell mkdir -p $(dir $(DEPS)) >/dev/null)

# C compiler
CC := arm-none-eabi-gcc
# C++ compiler
CXX := arm-none-eabi-gcc
# linker
LD := arm-none-eabi-gcc
# tar
TAR := tar

# C flags
CFLAGS := -mcpu=cortex-m4 --specs=nosys.specs --specs=nano.specs \
		-Wl,--gc-sections -static \
		-mfpu=fpv4-sp-d16 -mfloat-abi=hard -mthumb -Wl,--start-group -lc -lm -Wl,--end-group

# C++ flags
CXXFLAGS := -mcpu=cortex-m4 --specs=nosys.specs \
		-Wl,--gc-sections -static --specs=nano.specs \
		-mfpu=fpv4-sp-d16 -mfloat-abi=hard -mthumb -Wl,--start-group -lc -lm -Wl,--end-group

# C/C++ flags
CPPFLAGS := -DSTM32L412xx \
	 -I./vendor/CMSIS/Device/ST/STM32L4/Include \
	 -I./vendor/CMSIS/CMSIS/Core/Include \
	 -I./vendor/STM32L4_HAL/Inc \
	 -I./vendor/STM32L4_HAL/Src \
	 -I./src
	
# linker flags
LINKER_FILE=STM32L412RBTXP_FLASH.ld
LDFLAGS=-T $(LINKER_FILE) $(CFLAGS) $(CPPFLAGS)
# linker flags: libraries to link (e.g. -lfoo)
# LDLIBS :=
# flags required for dependency generation; passed to compilers
DEPFLAGS = -MT $@ -MD -MP -MF $(DEPDIR)/$*.Td

# compile C source files
COMPILE.c = $(CC) $(DEPFLAGS) $(CFLAGS) $(CPPFLAGS) -c -o $@
# compile ASM source files
COMPILE.s = $(CC) $(DEPFLAGS) $(CFLAGS) $(CPPFLAGS) -c -o $@
# compile C++ source files
COMPILE.cc = $(CXX) $(DEPFLAGS) $(CXXFLAGS) $(CPPFLAGS) -c -o $@
# link object files to binary
LINK.o = $(LD) $(LDFLAGS) $(LDLIBS) -o $@
# precompile step
PRECOMPILE =
# postcompile step
POSTCOMPILE = mv -f $(DEPDIR)/$*.Td $(DEPDIR)/$*.d

all: $(BIN)

dist: $(DISTFILES)
	$(TAR) -cvzf $(DISTOUTPUT) $^

.PHONY: clean
clean:
	$(RM) -r $(OBJDIR) $(DEPDIR) ./build/*.elf

.PHONY: distclean
distclean: clean
	$(RM) $(BIN) $(DISTOUTPUT)

.PHONY: install
install:
	@echo no install tasks configured

.PHONY: uninstall
uninstall:
	@echo no uninstall tasks configured

.PHONY: check
check:
	@echo no tests configured

.PHONY: help
help:
	@echo available targets: all dist clean distclean install uninstall check

$(BIN): $(OBJS)
	$(LINK.o) $^

$(OBJDIR)/%.o: %.c
$(OBJDIR)/%.o: %.c $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.c) $<
	$(POSTCOMPILE)

$(OBJDIR)/%.o: %.s
$(OBJDIR)/%.o: %.s $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.s) $<

$(OBJDIR)/%.o: %.cpp
$(OBJDIR)/%.o: %.cpp $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.cc) $<
	$(POSTCOMPILE)

$(OBJDIR)/%.o: %.cc
$(OBJDIR)/%.o: %.cc $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.cc) $<
	$(POSTCOMPILE)

$(OBJDIR)/%.o: %.cxx
$(OBJDIR)/%.o: %.cxx $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.cc) $<
	$(POSTCOMPILE)

.PRECIOUS: $(DEPDIR)/%.d
$(DEPDIR)/%.d: ;

-include $(DEPS)