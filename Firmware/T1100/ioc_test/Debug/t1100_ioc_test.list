
t1100_ioc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad18  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800ae58  0800ae58  0000be58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b268  0800b268  0000d0a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b268  0800b268  0000c268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b270  0800b270  0000d0a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b270  0800b270  0000c270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b274  0800b274  0000c274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  0800b278  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000888  200000a8  0800b320  0000d0a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000930  0800b320  0000d930  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000d0a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f7d  00000000  00000000  0000d0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004681  00000000  00000000  0002404f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  000286d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012d3  00000000  00000000  00029ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002237e  00000000  00000000  0002b2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d441  00000000  00000000  0004d649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4605  00000000  00000000  0006aa8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f08f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000707c  00000000  00000000  0011f0d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00126150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000a8 	.word	0x200000a8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ae40 	.word	0x0800ae40

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000ac 	.word	0x200000ac
 800017c:	0800ae40 	.word	0x0800ae40

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2uiz>:
 80009cc:	004a      	lsls	r2, r1, #1
 80009ce:	d211      	bcs.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009d4:	d211      	bcs.n	80009fa <__aeabi_d2uiz+0x2e>
 80009d6:	d50d      	bpl.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d40e      	bmi.n	8000a00 <__aeabi_d2uiz+0x34>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d102      	bne.n	8000a06 <__aeabi_d2uiz+0x3a>
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a04:	4770      	bx	lr
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	4770      	bx	lr

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a20:	f000 b96a 	b.w	8000cf8 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	460c      	mov	r4, r1
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d14e      	bne.n	8000ae6 <__udivmoddi4+0xaa>
 8000a48:	4694      	mov	ip, r2
 8000a4a:	458c      	cmp	ip, r1
 8000a4c:	4686      	mov	lr, r0
 8000a4e:	fab2 f282 	clz	r2, r2
 8000a52:	d962      	bls.n	8000b1a <__udivmoddi4+0xde>
 8000a54:	b14a      	cbz	r2, 8000a6a <__udivmoddi4+0x2e>
 8000a56:	f1c2 0320 	rsb	r3, r2, #32
 8000a5a:	4091      	lsls	r1, r2
 8000a5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a64:	4319      	orrs	r1, r3
 8000a66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a6e:	fa1f f68c 	uxth.w	r6, ip
 8000a72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a82:	fb04 f106 	mul.w	r1, r4, r6
 8000a86:	4299      	cmp	r1, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x64>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a92:	f080 8112 	bcs.w	8000cba <__udivmoddi4+0x27e>
 8000a96:	4299      	cmp	r1, r3
 8000a98:	f240 810f 	bls.w	8000cba <__udivmoddi4+0x27e>
 8000a9c:	3c02      	subs	r4, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1a59      	subs	r1, r3, r1
 8000aa2:	fa1f f38e 	uxth.w	r3, lr
 8000aa6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aaa:	fb07 1110 	mls	r1, r7, r0, r1
 8000aae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab2:	fb00 f606 	mul.w	r6, r0, r6
 8000ab6:	429e      	cmp	r6, r3
 8000ab8:	d90a      	bls.n	8000ad0 <__udivmoddi4+0x94>
 8000aba:	eb1c 0303 	adds.w	r3, ip, r3
 8000abe:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ac2:	f080 80fc 	bcs.w	8000cbe <__udivmoddi4+0x282>
 8000ac6:	429e      	cmp	r6, r3
 8000ac8:	f240 80f9 	bls.w	8000cbe <__udivmoddi4+0x282>
 8000acc:	4463      	add	r3, ip
 8000ace:	3802      	subs	r0, #2
 8000ad0:	1b9b      	subs	r3, r3, r6
 8000ad2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	b11d      	cbz	r5, 8000ae2 <__udivmoddi4+0xa6>
 8000ada:	40d3      	lsrs	r3, r2
 8000adc:	2200      	movs	r2, #0
 8000ade:	e9c5 3200 	strd	r3, r2, [r5]
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d905      	bls.n	8000af6 <__udivmoddi4+0xba>
 8000aea:	b10d      	cbz	r5, 8000af0 <__udivmoddi4+0xb4>
 8000aec:	e9c5 0100 	strd	r0, r1, [r5]
 8000af0:	2100      	movs	r1, #0
 8000af2:	4608      	mov	r0, r1
 8000af4:	e7f5      	b.n	8000ae2 <__udivmoddi4+0xa6>
 8000af6:	fab3 f183 	clz	r1, r3
 8000afa:	2900      	cmp	r1, #0
 8000afc:	d146      	bne.n	8000b8c <__udivmoddi4+0x150>
 8000afe:	42a3      	cmp	r3, r4
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xcc>
 8000b02:	4290      	cmp	r0, r2
 8000b04:	f0c0 80f0 	bcc.w	8000ce8 <__udivmoddi4+0x2ac>
 8000b08:	1a86      	subs	r6, r0, r2
 8000b0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	2d00      	cmp	r5, #0
 8000b12:	d0e6      	beq.n	8000ae2 <__udivmoddi4+0xa6>
 8000b14:	e9c5 6300 	strd	r6, r3, [r5]
 8000b18:	e7e3      	b.n	8000ae2 <__udivmoddi4+0xa6>
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	f040 8090 	bne.w	8000c40 <__udivmoddi4+0x204>
 8000b20:	eba1 040c 	sub.w	r4, r1, ip
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	fa1f f78c 	uxth.w	r7, ip
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b36:	fb08 4416 	mls	r4, r8, r6, r4
 8000b3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b3e:	fb07 f006 	mul.w	r0, r7, r6
 8000b42:	4298      	cmp	r0, r3
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x11c>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x11a>
 8000b50:	4298      	cmp	r0, r3
 8000b52:	f200 80cd 	bhi.w	8000cf0 <__udivmoddi4+0x2b4>
 8000b56:	4626      	mov	r6, r4
 8000b58:	1a1c      	subs	r4, r3, r0
 8000b5a:	fa1f f38e 	uxth.w	r3, lr
 8000b5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b62:	fb08 4410 	mls	r4, r8, r0, r4
 8000b66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b6a:	fb00 f707 	mul.w	r7, r0, r7
 8000b6e:	429f      	cmp	r7, r3
 8000b70:	d908      	bls.n	8000b84 <__udivmoddi4+0x148>
 8000b72:	eb1c 0303 	adds.w	r3, ip, r3
 8000b76:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b7a:	d202      	bcs.n	8000b82 <__udivmoddi4+0x146>
 8000b7c:	429f      	cmp	r7, r3
 8000b7e:	f200 80b0 	bhi.w	8000ce2 <__udivmoddi4+0x2a6>
 8000b82:	4620      	mov	r0, r4
 8000b84:	1bdb      	subs	r3, r3, r7
 8000b86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b8a:	e7a5      	b.n	8000ad8 <__udivmoddi4+0x9c>
 8000b8c:	f1c1 0620 	rsb	r6, r1, #32
 8000b90:	408b      	lsls	r3, r1
 8000b92:	fa22 f706 	lsr.w	r7, r2, r6
 8000b96:	431f      	orrs	r7, r3
 8000b98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000ba0:	ea43 030c 	orr.w	r3, r3, ip
 8000ba4:	40f4      	lsrs	r4, r6
 8000ba6:	fa00 f801 	lsl.w	r8, r0, r1
 8000baa:	0c38      	lsrs	r0, r7, #16
 8000bac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bb0:	fbb4 fef0 	udiv	lr, r4, r0
 8000bb4:	fa1f fc87 	uxth.w	ip, r7
 8000bb8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000bc4:	45a1      	cmp	r9, r4
 8000bc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000bca:	d90a      	bls.n	8000be2 <__udivmoddi4+0x1a6>
 8000bcc:	193c      	adds	r4, r7, r4
 8000bce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bd2:	f080 8084 	bcs.w	8000cde <__udivmoddi4+0x2a2>
 8000bd6:	45a1      	cmp	r9, r4
 8000bd8:	f240 8081 	bls.w	8000cde <__udivmoddi4+0x2a2>
 8000bdc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000be0:	443c      	add	r4, r7
 8000be2:	eba4 0409 	sub.w	r4, r4, r9
 8000be6:	fa1f f983 	uxth.w	r9, r3
 8000bea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bee:	fb00 4413 	mls	r4, r0, r3, r4
 8000bf2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bf6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bfa:	45a4      	cmp	ip, r4
 8000bfc:	d907      	bls.n	8000c0e <__udivmoddi4+0x1d2>
 8000bfe:	193c      	adds	r4, r7, r4
 8000c00:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c04:	d267      	bcs.n	8000cd6 <__udivmoddi4+0x29a>
 8000c06:	45a4      	cmp	ip, r4
 8000c08:	d965      	bls.n	8000cd6 <__udivmoddi4+0x29a>
 8000c0a:	3b02      	subs	r3, #2
 8000c0c:	443c      	add	r4, r7
 8000c0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c12:	fba0 9302 	umull	r9, r3, r0, r2
 8000c16:	eba4 040c 	sub.w	r4, r4, ip
 8000c1a:	429c      	cmp	r4, r3
 8000c1c:	46ce      	mov	lr, r9
 8000c1e:	469c      	mov	ip, r3
 8000c20:	d351      	bcc.n	8000cc6 <__udivmoddi4+0x28a>
 8000c22:	d04e      	beq.n	8000cc2 <__udivmoddi4+0x286>
 8000c24:	b155      	cbz	r5, 8000c3c <__udivmoddi4+0x200>
 8000c26:	ebb8 030e 	subs.w	r3, r8, lr
 8000c2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c32:	40cb      	lsrs	r3, r1
 8000c34:	431e      	orrs	r6, r3
 8000c36:	40cc      	lsrs	r4, r1
 8000c38:	e9c5 6400 	strd	r6, r4, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	e750      	b.n	8000ae2 <__udivmoddi4+0xa6>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f103 	lsr.w	r1, r0, r3
 8000c48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c50:	4094      	lsls	r4, r2
 8000c52:	430c      	orrs	r4, r1
 8000c54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c5c:	fa1f f78c 	uxth.w	r7, ip
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3110 	mls	r1, r8, r0, r3
 8000c68:	0c23      	lsrs	r3, r4, #16
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f107 	mul.w	r1, r0, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x24c>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c7e:	d22c      	bcs.n	8000cda <__udivmoddi4+0x29e>
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d92a      	bls.n	8000cda <__udivmoddi4+0x29e>
 8000c84:	3802      	subs	r0, #2
 8000c86:	4463      	add	r3, ip
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c90:	fb08 3311 	mls	r3, r8, r1, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb01 f307 	mul.w	r3, r1, r7
 8000c9c:	42a3      	cmp	r3, r4
 8000c9e:	d908      	bls.n	8000cb2 <__udivmoddi4+0x276>
 8000ca0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ca8:	d213      	bcs.n	8000cd2 <__udivmoddi4+0x296>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d911      	bls.n	8000cd2 <__udivmoddi4+0x296>
 8000cae:	3902      	subs	r1, #2
 8000cb0:	4464      	add	r4, ip
 8000cb2:	1ae4      	subs	r4, r4, r3
 8000cb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb8:	e739      	b.n	8000b2e <__udivmoddi4+0xf2>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	e6f0      	b.n	8000aa0 <__udivmoddi4+0x64>
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e706      	b.n	8000ad0 <__udivmoddi4+0x94>
 8000cc2:	45c8      	cmp	r8, r9
 8000cc4:	d2ae      	bcs.n	8000c24 <__udivmoddi4+0x1e8>
 8000cc6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cce:	3801      	subs	r0, #1
 8000cd0:	e7a8      	b.n	8000c24 <__udivmoddi4+0x1e8>
 8000cd2:	4631      	mov	r1, r6
 8000cd4:	e7ed      	b.n	8000cb2 <__udivmoddi4+0x276>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	e799      	b.n	8000c0e <__udivmoddi4+0x1d2>
 8000cda:	4630      	mov	r0, r6
 8000cdc:	e7d4      	b.n	8000c88 <__udivmoddi4+0x24c>
 8000cde:	46d6      	mov	lr, sl
 8000ce0:	e77f      	b.n	8000be2 <__udivmoddi4+0x1a6>
 8000ce2:	4463      	add	r3, ip
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	e74d      	b.n	8000b84 <__udivmoddi4+0x148>
 8000ce8:	4606      	mov	r6, r0
 8000cea:	4623      	mov	r3, r4
 8000cec:	4608      	mov	r0, r1
 8000cee:	e70f      	b.n	8000b10 <__udivmoddi4+0xd4>
 8000cf0:	3e02      	subs	r6, #2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	e730      	b.n	8000b58 <__udivmoddi4+0x11c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d08:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d20:	68fb      	ldr	r3, [r7, #12]
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d38:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d48:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d50:	68fb      	ldr	r3, [r7, #12]
}
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <LL_ADC_SetTriggerFrequencyMode>:
  *         @arg @ref LL_ADC_TRIGGER_FREQ_HIGH
  *         @arg @ref LL_ADC_TRIGGER_FREQ_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetTriggerFrequencyMode(ADC_TypeDef *ADCx, uint32_t TriggerFrequencyMode)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LFTRIG, TriggerFrequencyMode);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	691b      	ldr	r3, [r3, #16]
 8000d6a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	431a      	orrs	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	611a      	str	r2, [r3, #16]
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	695a      	ldr	r2, [r3, #20]
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	2107      	movs	r1, #7
 8000d98:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	401a      	ands	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dac:	431a      	orrs	r2, r3
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <LL_ADC_REG_SetSequencerConfigurable>:
  *         @arg @ref LL_ADC_REG_SEQ_FIXED
  *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerConfigurable(ADC_TypeDef *ADCx, uint32_t Configurability)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	60da      	str	r2, [r3, #12]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	f023 0201 	bic.w	r2, r3, #1
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	431a      	orrs	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	611a      	str	r2, [r3, #16]
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000e14:	f023 0317 	bic.w	r3, r3, #23
 8000e18:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <LL_ADC_IsActiveFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_IsActiveFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e3e:	d101      	bne.n	8000e44 <LL_ADC_IsActiveFlag_CCRDY+0x1a>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e000      	b.n	8000e46 <LL_ADC_IsActiveFlag_CCRDY+0x1c>
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <LL_ADC_ClearFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_ClearFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_ADC_ClearFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e5e:	601a      	str	r2, [r3, #0]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr

08000e6a <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f023 0204 	bic.w	r2, r3, #4
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	605a      	str	r2, [r3, #4]
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f023 0208 	bic.w	r2, r3, #8
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	605a      	str	r2, [r3, #4]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
	...

08000ea8 <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b092      	sub	sp, #72	@ 0x48
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000eae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
 8000ecc:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
 8000edc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC);
 8000ede:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ee2:	f7ff ff23 	bl	8000d2c <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f7ff ff08 	bl	8000cfc <LL_AHB2_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PB13   ------> ADC_IN0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000eec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ef0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4835      	ldr	r0, [pc, #212]	@ (8000fd4 <MX_ADC_Init+0x12c>)
 8000f00:	f003 fdd1 	bl	8004aa6 <LL_GPIO_Init>
   #define ADC_CHANNEL_CONF_RDY_TIMEOUT_MS ( 1U)
   #if (USE_TIMEOUT == 1)
   uint32_t Timeout ; /* Variable used for Timeout management */
   #endif /* USE_TIMEOUT */

  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV1;
 8000f04:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000f08:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	643b      	str	r3, [r7, #64]	@ 0x40
  LL_ADC_Init(ADC, &ADC_InitStruct);
 8000f16:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	482e      	ldr	r0, [pc, #184]	@ (8000fd8 <MX_ADC_Init+0x130>)
 8000f1e:	f003 fbf0 	bl	8004702 <LL_ADC_Init>
  LL_ADC_REG_SetSequencerConfigurable(ADC, LL_ADC_REG_SEQ_CONFIGURABLE);
 8000f22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8000f26:	482c      	ldr	r0, [pc, #176]	@ (8000fd8 <MX_ADC_Init+0x130>)
 8000f28:	f7ff ff48 	bl	8000dbc <LL_ADC_REG_SetSequencerConfigurable>

   /* Poll for ADC channel configuration ready */
   #if (USE_TIMEOUT == 1)
   Timeout = ADC_CHANNEL_CONF_RDY_TIMEOUT_MS;
   #endif /* USE_TIMEOUT */
   while (LL_ADC_IsActiveFlag_CCRDY(ADC) == 0)
 8000f2c:	bf00      	nop
 8000f2e:	482a      	ldr	r0, [pc, #168]	@ (8000fd8 <MX_ADC_Init+0x130>)
 8000f30:	f7ff ff7b 	bl	8000e2a <LL_ADC_IsActiveFlag_CCRDY>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d0f9      	beq.n	8000f2e <MX_ADC_Init+0x86>
         }
     }
   #endif /* USE_TIMEOUT */
     }
   /* Clear flag ADC channel configuration ready */
   LL_ADC_ClearFlag_CCRDY(ADC);
 8000f3a:	4827      	ldr	r0, [pc, #156]	@ (8000fd8 <MX_ADC_Init+0x130>)
 8000f3c:	f7ff ff88 	bl	8000e50 <LL_ADC_ClearFlag_CCRDY>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000f44:	23f0      	movs	r3, #240	@ 0xf0
 8000f46:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000f54:	2300      	movs	r3, #0
 8000f56:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_ADC_REG_Init(ADC, &ADC_REG_InitStruct);
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	481e      	ldr	r0, [pc, #120]	@ (8000fd8 <MX_ADC_Init+0x130>)
 8000f60:	f003 fbfe 	bl	8004760 <LL_ADC_REG_Init>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC);
 8000f64:	481c      	ldr	r0, [pc, #112]	@ (8000fd8 <MX_ADC_Init+0x130>)
 8000f66:	f7ff ff4d 	bl	8000e04 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fdc <MX_ADC_Init+0x134>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	099b      	lsrs	r3, r3, #6
 8000f70:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe0 <MX_ADC_Init+0x138>)
 8000f72:	fba2 2303 	umull	r2, r3, r2, r3
 8000f76:	099a      	lsrs	r2, r3, #6
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <MX_ADC_Init+0x13c>)
 8000f84:	fba3 2302 	umull	r2, r3, r3, r2
 8000f88:	08db      	lsrs	r3, r3, #3
 8000f8a:	647b      	str	r3, [r7, #68]	@ 0x44
   while(wait_loop_index != 0)
 8000f8c:	e002      	b.n	8000f94 <MX_ADC_Init+0xec>
     {
   wait_loop_index--;
 8000f8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f90:	3b01      	subs	r3, #1
 8000f92:	647b      	str	r3, [r7, #68]	@ 0x44
   while(wait_loop_index != 0)
 8000f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f9      	bne.n	8000f8e <MX_ADC_Init+0xe6>
     }
  LL_ADC_SetOverSamplingScope(ADC, LL_ADC_OVS_DISABLE);
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	480e      	ldr	r0, [pc, #56]	@ (8000fd8 <MX_ADC_Init+0x130>)
 8000f9e:	f7ff ff1f 	bl	8000de0 <LL_ADC_SetOverSamplingScope>
  LL_ADC_SetSamplingTimeCommonChannels(ADC, LL_ADC_SAMPLINGTIME_COMMON_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	480c      	ldr	r0, [pc, #48]	@ (8000fd8 <MX_ADC_Init+0x130>)
 8000fa8:	f7ff feea 	bl	8000d80 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetSamplingTimeCommonChannels(ADC, LL_ADC_SAMPLINGTIME_COMMON_2, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8000fac:	2200      	movs	r2, #0
 8000fae:	490e      	ldr	r1, [pc, #56]	@ (8000fe8 <MX_ADC_Init+0x140>)
 8000fb0:	4809      	ldr	r0, [pc, #36]	@ (8000fd8 <MX_ADC_Init+0x130>)
 8000fb2:	f7ff fee5 	bl	8000d80 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_DisableIT_EOC(ADC);
 8000fb6:	4808      	ldr	r0, [pc, #32]	@ (8000fd8 <MX_ADC_Init+0x130>)
 8000fb8:	f7ff ff57 	bl	8000e6a <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC);
 8000fbc:	4806      	ldr	r0, [pc, #24]	@ (8000fd8 <MX_ADC_Init+0x130>)
 8000fbe:	f7ff ff63 	bl	8000e88 <LL_ADC_DisableIT_EOS>
  LL_ADC_SetTriggerFrequencyMode(ADC, LL_ADC_TRIGGER_FREQ_HIGH);
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4804      	ldr	r0, [pc, #16]	@ (8000fd8 <MX_ADC_Init+0x130>)
 8000fc6:	f7ff fec9 	bl	8000d5c <LL_ADC_SetTriggerFrequencyMode>
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	3748      	adds	r7, #72	@ 0x48
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	48000400 	.word	0x48000400
 8000fd8:	40012400 	.word	0x40012400
 8000fdc:	20000030 	.word	0x20000030
 8000fe0:	053e2d63 	.word	0x053e2d63
 8000fe4:	cccccccd 	.word	0xcccccccd
 8000fe8:	03ffff04 	.word	0x03ffff04

08000fec <LL_AHB2_GRP1_EnableClock>:
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ff8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ffa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4313      	orrs	r3, r2
 8001002:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001008:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4013      	ands	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001010:	68fb      	ldr	r3, [r7, #12]
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	2002      	movs	r0, #2
 8001032:	f7ff ffdb 	bl	8000fec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	2004      	movs	r0, #4
 8001038:	f7ff ffd8 	bl	8000fec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff ffd5 	bl	8000fec <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001048:	4814      	ldr	r0, [pc, #80]	@ (800109c <MX_GPIO_Init+0x80>)
 800104a:	f001 fdef 	bl	8002c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2130      	movs	r1, #48	@ 0x30
 8001052:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001056:	f001 fde9 	bl	8002c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800105a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800105e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	4619      	mov	r1, r3
 8001070:	480a      	ldr	r0, [pc, #40]	@ (800109c <MX_GPIO_Init+0x80>)
 8001072:	f001 fc7b 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001076:	2330      	movs	r3, #48	@ 0x30
 8001078:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800108e:	f001 fc6d 	bl	800296c <HAL_GPIO_Init>

}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	48000400 	.word	0x48000400

080010a0 <LL_RCC_SetI2CClockSource>:
  *         @arg @ref LL_RCC_I2C3_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_I2C3_CLKSOURCE_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80010a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	091b      	lsrs	r3, r3, #4
 80010b4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80010b8:	43db      	mvns	r3, r3
 80010ba:	401a      	ands	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80010c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010c8:	4313      	orrs	r3, r2
 80010ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <LL_AHB2_GRP1_EnableClock>:
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80010e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4013      	ands	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010fc:	68fb      	ldr	r3, [r7, #12]
}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <LL_APB1_GRP1_EnableClock>:
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001114:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001116:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4313      	orrs	r3, r2
 800111e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001120:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001124:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4013      	ands	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800112c:	68fb      	ldr	r3, [r7, #12]
}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	601a      	str	r2, [r3, #0]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001188:	f023 0306 	bic.w	r3, r3, #6
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	430a      	orrs	r2, r1
 8001192:	431a      	orrs	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	60da      	str	r2, [r3, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60da      	str	r2, [r3, #12]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	605a      	str	r2, [r3, #4]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
	...

080011e0 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08e      	sub	sp, #56	@ 0x38
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
 80011f6:	615a      	str	r2, [r3, #20]
 80011f8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
 8001208:	615a      	str	r2, [r3, #20]

  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 800120a:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800120e:	f7ff ff47 	bl	80010a0 <LL_RCC_SetI2CClockSource>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001212:	2002      	movs	r0, #2
 8001214:	f7ff ff60 	bl	80010d8 <LL_AHB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB7   ------> I2C1_SDA
  PB6   ------> I2C1_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_6;
 8001218:	23c0      	movs	r3, #192	@ 0xc0
 800121a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800121c:	2302      	movs	r3, #2
 800121e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001224:	2301      	movs	r3, #1
 8001226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800122c:	2304      	movs	r3, #4
 800122e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	4619      	mov	r1, r3
 8001234:	4817      	ldr	r0, [pc, #92]	@ (8001294 <MX_I2C1_Init+0xb4>)
 8001236:	f003 fc36 	bl	8004aa6 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800123a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800123e:	f7ff ff63 	bl	8001108 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001242:	4815      	ldr	r0, [pc, #84]	@ (8001298 <MX_I2C1_Init+0xb8>)
 8001244:	f7ff ffbc 	bl	80011c0 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001248:	4813      	ldr	r0, [pc, #76]	@ (8001298 <MX_I2C1_Init+0xb8>)
 800124a:	f7ff ffaa 	bl	80011a2 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800124e:	4812      	ldr	r0, [pc, #72]	@ (8001298 <MX_I2C1_Init+0xb8>)
 8001250:	f7ff ff81 	bl	8001156 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001254:	4810      	ldr	r0, [pc, #64]	@ (8001298 <MX_I2C1_Init+0xb8>)
 8001256:	f7ff ff6f 	bl	8001138 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00B07CB4;
 800125e:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <MX_I2C1_Init+0xbc>)
 8001260:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800126e:	2300      	movs	r3, #0
 8001270:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001272:	2300      	movs	r3, #0
 8001274:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	4619      	mov	r1, r3
 800127c:	4806      	ldr	r0, [pc, #24]	@ (8001298 <MX_I2C1_Init+0xb8>)
 800127e:	f003 fd19 	bl	8004cb4 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	4804      	ldr	r0, [pc, #16]	@ (8001298 <MX_I2C1_Init+0xb8>)
 8001288:	f7ff ff74 	bl	8001174 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	3738      	adds	r7, #56	@ 0x38
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	48000400 	.word	0x48000400
 8001298:	40005400 	.word	0x40005400
 800129c:	00b07cb4 	.word	0x00b07cb4

080012a0 <LL_RCC_SetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM3_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80012a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	0c1b      	lsrs	r3, r3, #16
 80012b4:	041b      	lsls	r3, r3, #16
 80012b6:	43db      	mvns	r3, r3
 80012b8:	401a      	ands	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	041b      	lsls	r3, r3, #16
 80012be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012c2:	4313      	orrs	r3, r2
 80012c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <LL_APB1_GRP1_EnableClock>:
{
 80012d2:	b480      	push	{r7}
 80012d4:	b085      	sub	sp, #20
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80012da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012de:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80012e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80012ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012ee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4013      	ands	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	60da      	str	r2, [r3, #12]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	60da      	str	r2, [r3, #12]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60da      	str	r2, [r3, #12]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr

0800136e <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	60da      	str	r2, [r3, #12]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr

08001392 <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	f023 0203 	bic.w	r2, r3, #3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	621a      	str	r2, [r3, #32]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <LL_LPTIM_SetInput2Src>:
  *         @arg @ref LL_LPTIM_INPUT2_SRC_GPIO
  *         @arg @ref LL_LPTIM_INPUT2_SRC_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput2Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	f023 0203 	bic.w	r2, r3, #3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	621a      	str	r2, [r3, #32]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	60da      	str	r2, [r3, #12]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	f023 0201 	bic.w	r2, r3, #1
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	60da      	str	r2, [r3, #12]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <MX_LPTIM1_Init>:

/* USER CODE END 0 */

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM1_Init 0 */

  /* USER CODE END LPTIM1_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE_PCLK1);
 8001420:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 8001424:	f7ff ff3c 	bl	80012a0 <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_LPTIM1);
 8001428:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800142c:	f7ff ff51 	bl	80012d2 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM1, LL_LPTIM_CLK_SOURCE_INTERNAL);
 8001430:	2100      	movs	r1, #0
 8001432:	4810      	ldr	r0, [pc, #64]	@ (8001474 <MX_LPTIM1_Init+0x58>)
 8001434:	f7ff ffe0 	bl	80013f8 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM1, LL_LPTIM_PRESCALER_DIV1);
 8001438:	2100      	movs	r1, #0
 800143a:	480e      	ldr	r0, [pc, #56]	@ (8001474 <MX_LPTIM1_Init+0x58>)
 800143c:	f7ff ff97 	bl	800136e <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM1, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 8001440:	2100      	movs	r1, #0
 8001442:	480c      	ldr	r0, [pc, #48]	@ (8001474 <MX_LPTIM1_Init+0x58>)
 8001444:	f7ff ff81 	bl	800134a <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM1, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 8001448:	2100      	movs	r1, #0
 800144a:	480a      	ldr	r0, [pc, #40]	@ (8001474 <MX_LPTIM1_Init+0x58>)
 800144c:	f7ff ff59 	bl	8001302 <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM1, LL_LPTIM_COUNTER_MODE_INTERNAL);
 8001450:	2100      	movs	r1, #0
 8001452:	4808      	ldr	r0, [pc, #32]	@ (8001474 <MX_LPTIM1_Init+0x58>)
 8001454:	f7ff ff67 	bl	8001326 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM1);
 8001458:	4806      	ldr	r0, [pc, #24]	@ (8001474 <MX_LPTIM1_Init+0x58>)
 800145a:	f7ff ffbe 	bl	80013da <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM1, LL_LPTIM_INPUT1_SRC_GPIO);
 800145e:	2100      	movs	r1, #0
 8001460:	4804      	ldr	r0, [pc, #16]	@ (8001474 <MX_LPTIM1_Init+0x58>)
 8001462:	f7ff ff96 	bl	8001392 <LL_LPTIM_SetInput1Src>
  LL_LPTIM_SetInput2Src(LPTIM1, LL_LPTIM_INPUT2_SRC_GPIO);
 8001466:	2100      	movs	r1, #0
 8001468:	4802      	ldr	r0, [pc, #8]	@ (8001474 <MX_LPTIM1_Init+0x58>)
 800146a:	f7ff ffa4 	bl	80013b6 <LL_LPTIM_SetInput2Src>
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40007c00 	.word	0x40007c00

08001478 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8001488:	4904      	ldr	r1, [pc, #16]	@ (800149c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4313      	orrs	r3, r2
 800148e:	600b      	str	r3, [r1, #0]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	58000400 	.word	0x58000400

080014a0 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014a4:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <LL_PWR_EnableBkUpAccess+0x18>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a03      	ldr	r2, [pc, #12]	@ (80014b8 <LL_PWR_EnableBkUpAccess+0x18>)
 80014aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	58000400 	.word	0x58000400

080014bc <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d101      	bne.n	80014d0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	58000400 	.word	0x58000400

080014e0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	d101      	bne.n	80014f4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80014f0:	2301      	movs	r3, #1
 80014f2:	e000      	b.n	80014f6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	58000400 	.word	0x58000400

08001504 <LL_RCC_LSE_Enable>:
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001508:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800150c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001510:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <LL_RCC_LSE_SetDriveCapability>:
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800152c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001534:	f023 0218 	bic.w	r2, r3, #24
 8001538:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4313      	orrs	r3, r2
 8001540:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <LL_RCC_LSE_EnablePropagation>:
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001552:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800155a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800155e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001562:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <LL_RCC_LSE_IsReady>:
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b02      	cmp	r3, #2
 8001580:	d101      	bne.n	8001586 <LL_RCC_LSE_IsReady+0x18>
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <LL_RCC_LSE_IsReady+0x1a>
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <LL_RCC_MSI_Enable>:
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6013      	str	r3, [r2, #0]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <LL_RCC_MSI_IsReady>:
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80015b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d101      	bne.n	80015c2 <LL_RCC_MSI_IsReady+0x16>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <LL_RCC_MSI_IsReady+0x18>
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <LL_RCC_MSI_EnablePLLMode>:
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80015d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <LL_RCC_MSI_EnableRangeSelection>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80015ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015f6:	f043 0308 	orr.w	r3, r3, #8
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <LL_RCC_MSI_SetRange>:
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800160c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001616:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4313      	orrs	r3, r2
 800161e:	600b      	str	r3, [r1, #0]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <LL_RCC_MSI_SetCalibTrimming>:
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <LL_RCC_SetSysClkSource>:
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800165a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f023 0203 	bic.w	r2, r3, #3
 8001664:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4313      	orrs	r3, r2
 800166c:	608b      	str	r3, [r1, #8]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <LL_RCC_GetSysClkSource>:
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800167c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr

0800168e <LL_RCC_SetAHBPrescaler>:
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	608b      	str	r3, [r1, #8]
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <LL_RCC_SetAHB3Prescaler>:
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80016bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80016c4:	f023 020f 	bic.w	r2, r3, #15
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016d0:	4313      	orrs	r3, r2
 80016d2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <LL_RCC_SetAPB1Prescaler>:
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	608b      	str	r3, [r1, #8]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr

08001706 <LL_RCC_SetAPB2Prescaler>:
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800170e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001718:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4313      	orrs	r3, r2
 8001720:	608b      	str	r3, [r1, #8]
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <LL_FLASH_SetLatency+0x24>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f023 0207 	bic.w	r2, r3, #7
 800173c:	4904      	ldr	r1, [pc, #16]	@ (8001750 <LL_FLASH_SetLatency+0x24>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4313      	orrs	r3, r2
 8001742:	600b      	str	r3, [r1, #0]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	58004000 	.word	0x58004000

08001754 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001758:	4b03      	ldr	r3, [pc, #12]	@ (8001768 <LL_FLASH_GetLatency+0x14>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	58004000 	.word	0x58004000

0800176c <IIRFirstOrder_Init>:
typedef struct {
	int32_t alpha;
	int32_t out;
} IIRFirstOrder;

void IIRFirstOrder_Init(IIRFirstOrder *filt, int32_t alpha) {
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
	filt->alpha = alpha;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	601a      	str	r2, [r3, #0]
	filt->out = 0;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	605a      	str	r2, [r3, #4]
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <IIRFirstOrder_Update>:

int32_t IIRFirstOrder_Update(IIRFirstOrder *filt, int32_t in) {
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
	filt->out = ((filt->alpha * filt->out) / 1000)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6852      	ldr	r2, [r2, #4]
 800179e:	fb02 f303 	mul.w	r3, r2, r3
 80017a2:	4a0e      	ldr	r2, [pc, #56]	@ (80017dc <IIRFirstOrder_Update+0x50>)
 80017a4:	fb82 1203 	smull	r1, r2, r2, r3
 80017a8:	1192      	asrs	r2, r2, #6
 80017aa:	17db      	asrs	r3, r3, #31
 80017ac:	1ad2      	subs	r2, r2, r3
			+ (((1000 - filt->alpha) * in) / 1000);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 80017b6:	6839      	ldr	r1, [r7, #0]
 80017b8:	fb01 f303 	mul.w	r3, r1, r3
 80017bc:	4907      	ldr	r1, [pc, #28]	@ (80017dc <IIRFirstOrder_Update+0x50>)
 80017be:	fb81 0103 	smull	r0, r1, r1, r3
 80017c2:	1189      	asrs	r1, r1, #6
 80017c4:	17db      	asrs	r3, r3, #31
 80017c6:	1acb      	subs	r3, r1, r3
 80017c8:	441a      	add	r2, r3
	filt->out = ((filt->alpha * filt->out) / 1000)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	605a      	str	r2, [r3, #4]
	return filt->out;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	10624dd3 	.word	0x10624dd3

080017e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80017e4:	f000 ff1c 	bl	8002620 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80017e8:	f000 f872 	bl	80018d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80017ec:	f7ff fc16 	bl	800101c <MX_GPIO_Init>
	MX_SPI1_Init();
 80017f0:	f000 faca 	bl	8001d88 <MX_SPI1_Init>
	MX_FATFS_Init();
 80017f4:	f004 fa4e 	bl	8005c94 <MX_FATFS_Init>
	MX_I2C1_Init();
 80017f8:	f7ff fcf2 	bl	80011e0 <MX_I2C1_Init>
	MX_LPTIM1_Init();
 80017fc:	f7ff fe0e 	bl	800141c <MX_LPTIM1_Init>
	MX_ADC_Init();
 8001800:	f7ff fb52 	bl	8000ea8 <MX_ADC_Init>
	MX_TIM1_Init();
 8001804:	f000 fcf8 	bl	80021f8 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 8001808:	f000 fe7a 	bl	8002500 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */

	setup_radio();
 800180c:	f000 f8b4 	bl	8001978 <setup_radio>

	set_heater_params(T_HIGH, T_LOW);
 8001810:	f06f 010e 	mvn.w	r1, #14
 8001814:	f06f 0009 	mvn.w	r0, #9
 8001818:	f007 ff9c 	bl	8009754 <set_heater_params>

	log_init();
 800181c:	f008 f8aa 	bl	8009974 <log_init>

	ms5607_init(I2C1); // init pressure, temperature, and relative humidity sensor
 8001820:	4824      	ldr	r0, [pc, #144]	@ (80018b4 <main+0xd4>)
 8001822:	f007 f926 	bl	8008a72 <ms5607_init>

	IIRFirstOrder_Init(&iir, 980);
 8001826:	f44f 7175 	mov.w	r1, #980	@ 0x3d4
 800182a:	4823      	ldr	r0, [pc, #140]	@ (80018b8 <main+0xd8>)
 800182c:	f7ff ff9e 	bl	800176c <IIRFirstOrder_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {

		log_item.log_count++;
 8001830:	4b22      	ldr	r3, [pc, #136]	@ (80018bc <main+0xdc>)
 8001832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001834:	3301      	adds	r3, #1
 8001836:	4a21      	ldr	r2, [pc, #132]	@ (80018bc <main+0xdc>)
 8001838:	64d3      	str	r3, [r2, #76]	@ 0x4c

		ms5607_get_press_temp(&log_item.pressure, &log_item.temperature);
 800183a:	4921      	ldr	r1, [pc, #132]	@ (80018c0 <main+0xe0>)
 800183c:	4821      	ldr	r0, [pc, #132]	@ (80018c4 <main+0xe4>)
 800183e:	f007 f92b 	bl	8008a98 <ms5607_get_press_temp>

		log_item.board_temp = read_heater_temp();
 8001842:	f007 ffe1 	bl	8009808 <read_heater_temp>
 8001846:	4603      	mov	r3, r0
 8001848:	4a1c      	ldr	r2, [pc, #112]	@ (80018bc <main+0xdc>)
 800184a:	6493      	str	r3, [r2, #72]	@ 0x48

		if (get_gps_data() == -1)
 800184c:	f007 feb0 	bl	80095b0 <get_gps_data>
 8001850:	4603      	mov	r3, r0
 8001852:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001856:	d101      	bne.n	800185c <main+0x7c>
			log_timeout();
 8001858:	f008 f956 	bl	8009b08 <log_timeout>

		log_system_data();
 800185c:	f008 f8dc 	bl	8009a18 <log_system_data>

		log_item.ascent_rate = log_item.altitude - log_item.prev_altitude;
 8001860:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <main+0xdc>)
 8001862:	6a1a      	ldr	r2, [r3, #32]
 8001864:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <main+0xdc>)
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	4a14      	ldr	r2, [pc, #80]	@ (80018bc <main+0xdc>)
 800186c:	6253      	str	r3, [r2, #36]	@ 0x24
		log_item.prev_altitude = log_item.altitude;
 800186e:	4b13      	ldr	r3, [pc, #76]	@ (80018bc <main+0xdc>)
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	4a12      	ldr	r2, [pc, #72]	@ (80018bc <main+0xdc>)
 8001874:	61d3      	str	r3, [r2, #28]
		log_item.filtered_ascent_rate = IIRFirstOrder_Update(&iir,
 8001876:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <main+0xdc>)
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	4619      	mov	r1, r3
 800187c:	480e      	ldr	r0, [pc, #56]	@ (80018b8 <main+0xd8>)
 800187e:	f7ff ff85 	bl	800178c <IIRFirstOrder_Update>
 8001882:	4603      	mov	r3, r0
 8001884:	4a0d      	ldr	r2, [pc, #52]	@ (80018bc <main+0xdc>)
 8001886:	6293      	str	r3, [r2, #40]	@ 0x28
				log_item.ascent_rate);

		if (log_item.log_count % 30 == 0)
 8001888:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <main+0xdc>)
 800188a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800188c:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <main+0xe8>)
 800188e:	fba3 2301 	umull	r2, r3, r3, r1
 8001892:	091a      	lsrs	r2, r3, #4
 8001894:	4613      	mov	r3, r2
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	1aca      	subs	r2, r1, r3
 800189e:	2a00      	cmp	r2, #0
 80018a0:	d103      	bne.n	80018aa <main+0xca>
			radio_tx(tx_buf, sizeof(tx_buf));
 80018a2:	2112      	movs	r1, #18
 80018a4:	4809      	ldr	r0, [pc, #36]	@ (80018cc <main+0xec>)
 80018a6:	f000 f9e5 	bl	8001c74 <radio_tx>

		HAL_Delay(1000);
 80018aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018ae:	f000 ff2d 	bl	800270c <HAL_Delay>
		log_item.log_count++;
 80018b2:	e7bd      	b.n	8001830 <main+0x50>
 80018b4:	40005400 	.word	0x40005400
 80018b8:	20000128 	.word	0x20000128
 80018bc:	200000d0 	.word	0x200000d0
 80018c0:	20000108 	.word	0x20000108
 80018c4:	20000104 	.word	0x20000104
 80018c8:	88888889 	.word	0x88888889
 80018cc:	2000001c 	.word	0x2000001c

080018d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 80018d4:	2001      	movs	r0, #1
 80018d6:	f7ff ff29 	bl	800172c <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1) {
 80018da:	bf00      	nop
 80018dc:	f7ff ff3a 	bl	8001754 <LL_FLASH_GetLatency>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d1fa      	bne.n	80018dc <SystemClock_Config+0xc>
	}

	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80018e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80018ea:	f7ff fdc5 	bl	8001478 <LL_PWR_SetRegulVoltageScaling>
	LL_RCC_MSI_Enable();
 80018ee:	f7ff fe4f 	bl	8001590 <LL_RCC_MSI_Enable>

	/* Wait till MSI is ready */
	while (LL_RCC_MSI_IsReady() != 1) {
 80018f2:	bf00      	nop
 80018f4:	f7ff fe5a 	bl	80015ac <LL_RCC_MSI_IsReady>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d1fa      	bne.n	80018f4 <SystemClock_Config+0x24>
	}

	LL_RCC_MSI_EnableRangeSelection();
 80018fe:	f7ff fe73 	bl	80015e8 <LL_RCC_MSI_EnableRangeSelection>
	LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_10);
 8001902:	20a0      	movs	r0, #160	@ 0xa0
 8001904:	f7ff fe7e 	bl	8001604 <LL_RCC_MSI_SetRange>
	LL_RCC_MSI_SetCalibTrimming(0);
 8001908:	2000      	movs	r0, #0
 800190a:	f7ff fe8e 	bl	800162a <LL_RCC_MSI_SetCalibTrimming>
	LL_PWR_EnableBkUpAccess();
 800190e:	f7ff fdc7 	bl	80014a0 <LL_PWR_EnableBkUpAccess>
	LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8001912:	2000      	movs	r0, #0
 8001914:	f7ff fe06 	bl	8001524 <LL_RCC_LSE_SetDriveCapability>
	LL_RCC_LSE_EnablePropagation();
 8001918:	f7ff fe19 	bl	800154e <LL_RCC_LSE_EnablePropagation>
	LL_RCC_LSE_Enable();
 800191c:	f7ff fdf2 	bl	8001504 <LL_RCC_LSE_Enable>

	/* Wait till LSE is ready */
	while (LL_RCC_LSE_IsReady() != 1) {
 8001920:	bf00      	nop
 8001922:	f7ff fe24 	bl	800156e <LL_RCC_LSE_IsReady>
 8001926:	4603      	mov	r3, r0
 8001928:	2b01      	cmp	r3, #1
 800192a:	d1fa      	bne.n	8001922 <SystemClock_Config+0x52>
	}

	LL_RCC_MSI_EnablePLLMode();
 800192c:	f7ff fe4e 	bl	80015cc <LL_RCC_MSI_EnablePLLMode>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8001930:	2000      	movs	r0, #0
 8001932:	f7ff fe8e 	bl	8001652 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI) {
 8001936:	bf00      	nop
 8001938:	f7ff fe9e 	bl	8001678 <LL_RCC_GetSysClkSource>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1fa      	bne.n	8001938 <SystemClock_Config+0x68>
	}

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001942:	2000      	movs	r0, #0
 8001944:	f7ff fea3 	bl	800168e <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAHB3Prescaler(LL_RCC_SYSCLK_DIV_1);
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff feb3 	bl	80016b4 <LL_RCC_SetAHB3Prescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800194e:	2000      	movs	r0, #0
 8001950:	f7ff fec6 	bl	80016e0 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001954:	2000      	movs	r0, #0
 8001956:	f7ff fed6 	bl	8001706 <LL_RCC_SetAPB2Prescaler>
	/* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
	LL_SetSystemCoreClock(32000000);
 800195a:	4806      	ldr	r0, [pc, #24]	@ (8001974 <SystemClock_Config+0xa4>)
 800195c:	f004 f98c 	bl	8005c78 <LL_SetSystemCoreClock>

	/* Update the time base */
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK) {
 8001960:	200f      	movs	r0, #15
 8001962:	f000 fe7d 	bl	8002660 <HAL_InitTick>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <SystemClock_Config+0xa0>
		Error_Handler();
 800196c:	f000 f9d6 	bl	8001d1c <Error_Handler>
	}
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	01e84800 	.word	0x01e84800

08001978 <setup_radio>:

/* USER CODE BEGIN 4 */

void setup_radio(void) {
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0

	MX_SUBGHZ_Init();
 800197e:	f000 fac5 	bl	8001f0c <MX_SUBGHZ_Init>

	//set standby

	if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_SLEEP, &RadioParam, 1)
 8001982:	2301      	movs	r3, #1
 8001984:	4aa0      	ldr	r2, [pc, #640]	@ (8001c08 <setup_radio+0x290>)
 8001986:	2184      	movs	r1, #132	@ 0x84
 8001988:	48a0      	ldr	r0, [pc, #640]	@ (8001c0c <setup_radio+0x294>)
 800198a:	f002 fb86 	bl	800409a <HAL_SUBGHZ_ExecSetCmd>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <setup_radio+0x20>
			!= HAL_OK) {
		Error_Handler();
 8001994:	f000 f9c2 	bl	8001d1c <Error_Handler>
	}

	RadioParam = 0x00;
 8001998:	4b9b      	ldr	r3, [pc, #620]	@ (8001c08 <setup_radio+0x290>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
	if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_STANDBY, &RadioParam, 1)
 800199e:	2301      	movs	r3, #1
 80019a0:	4a99      	ldr	r2, [pc, #612]	@ (8001c08 <setup_radio+0x290>)
 80019a2:	2180      	movs	r1, #128	@ 0x80
 80019a4:	4899      	ldr	r0, [pc, #612]	@ (8001c0c <setup_radio+0x294>)
 80019a6:	f002 fb78 	bl	800409a <HAL_SUBGHZ_ExecSetCmd>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <setup_radio+0x3c>
			!= HAL_OK) {
		Error_Handler();
 80019b0:	f000 f9b4 	bl	8001d1c <Error_Handler>
	}
	RadioParam = 0x00;
 80019b4:	4b94      	ldr	r3, [pc, #592]	@ (8001c08 <setup_radio+0x290>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]

	// set tcxo
	if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_TCXOMODE, RadioTCXO, 4)
 80019ba:	2304      	movs	r3, #4
 80019bc:	4a94      	ldr	r2, [pc, #592]	@ (8001c10 <setup_radio+0x298>)
 80019be:	2197      	movs	r1, #151	@ 0x97
 80019c0:	4892      	ldr	r0, [pc, #584]	@ (8001c0c <setup_radio+0x294>)
 80019c2:	f002 fb6a 	bl	800409a <HAL_SUBGHZ_ExecSetCmd>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <setup_radio+0x58>
			!= HAL_OK) {
		Error_Handler();
 80019cc:	f000 f9a6 	bl	8001d1c <Error_Handler>
	}

	RadioParam = 0x01;
 80019d0:	4b8d      	ldr	r3, [pc, #564]	@ (8001c08 <setup_radio+0x290>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	701a      	strb	r2, [r3, #0]
	if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_STANDBY, &RadioParam, 1)
 80019d6:	2301      	movs	r3, #1
 80019d8:	4a8b      	ldr	r2, [pc, #556]	@ (8001c08 <setup_radio+0x290>)
 80019da:	2180      	movs	r1, #128	@ 0x80
 80019dc:	488b      	ldr	r0, [pc, #556]	@ (8001c0c <setup_radio+0x294>)
 80019de:	f002 fb5c 	bl	800409a <HAL_SUBGHZ_ExecSetCmd>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00c      	beq.n	8001a02 <setup_radio+0x8a>
			!= HAL_OK) {
		//Error_Handler();
		hsubghz.ErrorCode = 0;
 80019e8:	4b88      	ldr	r3, [pc, #544]	@ (8001c0c <setup_radio+0x294>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]

		while (LL_PWR_IsActiveFlag_RFBUSYS() & LL_PWR_IsActiveFlag_RFBUSYMS())
 80019ee:	bf00      	nop
 80019f0:	f7ff fd64 	bl	80014bc <LL_PWR_IsActiveFlag_RFBUSYS>
 80019f4:	4604      	mov	r4, r0
 80019f6:	f7ff fd73 	bl	80014e0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4023      	ands	r3, r4
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f6      	bne.n	80019f0 <setup_radio+0x78>
			;
	}
	RadioParam = 0x00;
 8001a02:	4b81      	ldr	r3, [pc, #516]	@ (8001c08 <setup_radio+0x290>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]

	RadioParam = 0x30;
 8001a08:	4b7f      	ldr	r3, [pc, #508]	@ (8001c08 <setup_radio+0x290>)
 8001a0a:	2230      	movs	r2, #48	@ 0x30
 8001a0c:	701a      	strb	r2, [r3, #0]
	if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_TXFALLBACKMODE, &RadioParam,
 8001a0e:	2301      	movs	r3, #1
 8001a10:	4a7d      	ldr	r2, [pc, #500]	@ (8001c08 <setup_radio+0x290>)
 8001a12:	2193      	movs	r1, #147	@ 0x93
 8001a14:	487d      	ldr	r0, [pc, #500]	@ (8001c0c <setup_radio+0x294>)
 8001a16:	f002 fb40 	bl	800409a <HAL_SUBGHZ_ExecSetCmd>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <setup_radio+0xac>
			1) != HAL_OK) {
		Error_Handler();
 8001a20:	f000 f97c 	bl	8001d1c <Error_Handler>
	}
	RadioParam = 0x00;
 8001a24:	4b78      	ldr	r3, [pc, #480]	@ (8001c08 <setup_radio+0x290>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
	 }
	 RadioParam = 0x00;
	 */

	// set packet type
	RadioParam = 0x01;
 8001a2a:	4b77      	ldr	r3, [pc, #476]	@ (8001c08 <setup_radio+0x290>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
	if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_PACKETTYPE, &RadioParam, 1)
 8001a30:	2301      	movs	r3, #1
 8001a32:	4a75      	ldr	r2, [pc, #468]	@ (8001c08 <setup_radio+0x290>)
 8001a34:	218a      	movs	r1, #138	@ 0x8a
 8001a36:	4875      	ldr	r0, [pc, #468]	@ (8001c0c <setup_radio+0x294>)
 8001a38:	f002 fb2f 	bl	800409a <HAL_SUBGHZ_ExecSetCmd>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <setup_radio+0xce>
			!= HAL_OK) {
		Error_Handler();
 8001a42:	f000 f96b 	bl	8001d1c <Error_Handler>
	}
	RadioParam = 0x00;
 8001a46:	4b70      	ldr	r3, [pc, #448]	@ (8001c08 <setup_radio+0x290>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]

	HAL_SUBGHZ_ReadRegister(&hsubghz, 0x916, &RadioParam);
 8001a4c:	4a6e      	ldr	r2, [pc, #440]	@ (8001c08 <setup_radio+0x290>)
 8001a4e:	f640 1116 	movw	r1, #2326	@ 0x916
 8001a52:	486e      	ldr	r0, [pc, #440]	@ (8001c0c <setup_radio+0x294>)
 8001a54:	f002 fb0f 	bl	8004076 <HAL_SUBGHZ_ReadRegister>
	HAL_SUBGHZ_WriteRegister(&hsubghz, 0x916, RadioParam | 0x40);
 8001a58:	4b6b      	ldr	r3, [pc, #428]	@ (8001c08 <setup_radio+0x290>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	461a      	mov	r2, r3
 8001a64:	f640 1116 	movw	r1, #2326	@ 0x916
 8001a68:	4868      	ldr	r0, [pc, #416]	@ (8001c0c <setup_radio+0x294>)
 8001a6a:	f002 faf1 	bl	8004050 <HAL_SUBGHZ_WriteRegister>
	RadioParam = 0x00;
 8001a6e:	4b66      	ldr	r3, [pc, #408]	@ (8001c08 <setup_radio+0x290>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]

	// set rf switch
	set_rf_switch_rx();
 8001a74:	f000 f8de 	bl	8001c34 <set_rf_switch_rx>

	// set reg mode
	RadioParam = 0x01;
 8001a78:	4b63      	ldr	r3, [pc, #396]	@ (8001c08 <setup_radio+0x290>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	701a      	strb	r2, [r3, #0]
	if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_REGULATORMODE, &RadioParam, 1)
 8001a7e:	2301      	movs	r3, #1
 8001a80:	4a61      	ldr	r2, [pc, #388]	@ (8001c08 <setup_radio+0x290>)
 8001a82:	2196      	movs	r1, #150	@ 0x96
 8001a84:	4861      	ldr	r0, [pc, #388]	@ (8001c0c <setup_radio+0x294>)
 8001a86:	f002 fb08 	bl	800409a <HAL_SUBGHZ_ExecSetCmd>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <setup_radio+0x11c>
			!= HAL_OK) {
		Error_Handler();
 8001a90:	f000 f944 	bl	8001d1c <Error_Handler>
	}
	RadioParam = 0x00;
 8001a94:	4b5c      	ldr	r3, [pc, #368]	@ (8001c08 <setup_radio+0x290>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]

	// clear errors
	if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_CLR_ERROR, &RadioParam, 1)
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	4a5a      	ldr	r2, [pc, #360]	@ (8001c08 <setup_radio+0x290>)
 8001a9e:	2107      	movs	r1, #7
 8001aa0:	485a      	ldr	r0, [pc, #360]	@ (8001c0c <setup_radio+0x294>)
 8001aa2:	f002 fafa 	bl	800409a <HAL_SUBGHZ_ExecSetCmd>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <setup_radio+0x138>
			!= HAL_OK) {
		Error_Handler();
 8001aac:	f000 f936 	bl	8001d1c <Error_Handler>
	}

	// get errors
	if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_STATUS, &RadioResult, 1)
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	4a58      	ldr	r2, [pc, #352]	@ (8001c14 <setup_radio+0x29c>)
 8001ab4:	21c0      	movs	r1, #192	@ 0xc0
 8001ab6:	4855      	ldr	r0, [pc, #340]	@ (8001c0c <setup_radio+0x294>)
 8001ab8:	f002 fb4e 	bl	8004158 <HAL_SUBGHZ_ExecGetCmd>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <setup_radio+0x14e>
			!= HAL_OK) {
		Error_Handler();
 8001ac2:	f000 f92b 	bl	8001d1c <Error_Handler>
	}

	if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_ERROR, RadioErr, 3)
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	4a53      	ldr	r2, [pc, #332]	@ (8001c18 <setup_radio+0x2a0>)
 8001aca:	2117      	movs	r1, #23
 8001acc:	484f      	ldr	r0, [pc, #316]	@ (8001c0c <setup_radio+0x294>)
 8001ace:	f002 fb43 	bl	8004158 <HAL_SUBGHZ_ExecGetCmd>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <setup_radio+0x164>
			!= HAL_OK) {
		Error_Handler();
 8001ad8:	f000 f920 	bl	8001d1c <Error_Handler>
	}

	// set rf freq
	const uint32_t frequency = 915000000;
 8001adc:	4b4f      	ldr	r3, [pc, #316]	@ (8001c1c <setup_radio+0x2a4>)
 8001ade:	60fb      	str	r3, [r7, #12]
	uint8_t buf[4];
	uint32_t freq = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]

	freq = (uint32_t) ((double) frequency / (double) FREQ_STEP );
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f7fe fce5 	bl	80004b4 <__aeabi_ui2d>
 8001aea:	a345      	add	r3, pc, #276	@ (adr r3, 8001c00 <setup_radio+0x288>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	f7fe fe84 	bl	80007fc <__aeabi_ddiv>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7fe ff66 	bl	80009cc <__aeabi_d2uiz>
 8001b00:	4603      	mov	r3, r0
 8001b02:	60bb      	str	r3, [r7, #8]
	buf[0] = (uint8_t) ((freq >> 24) & 0xFF);
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	0e1b      	lsrs	r3, r3, #24
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	713b      	strb	r3, [r7, #4]
	buf[1] = (uint8_t) ((freq >> 16) & 0xFF);
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	0c1b      	lsrs	r3, r3, #16
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	717b      	strb	r3, [r7, #5]
	buf[2] = (uint8_t) ((freq >> 8) & 0xFF);
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	71bb      	strb	r3, [r7, #6]
	buf[3] = (uint8_t) (freq & 0xFF);
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	71fb      	strb	r3, [r7, #7]

	if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_RFFREQUENCY, buf, 4)
 8001b22:	1d3a      	adds	r2, r7, #4
 8001b24:	2304      	movs	r3, #4
 8001b26:	2186      	movs	r1, #134	@ 0x86
 8001b28:	4838      	ldr	r0, [pc, #224]	@ (8001c0c <setup_radio+0x294>)
 8001b2a:	f002 fab6 	bl	800409a <HAL_SUBGHZ_ExecSetCmd>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <setup_radio+0x1c0>
			!= HAL_OK) {
		Error_Handler();
 8001b34:	f000 f8f2 	bl	8001d1c <Error_Handler>
	}

	// set pa config
	if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_PACONFIG, RadioPAconfig, 4)
 8001b38:	2304      	movs	r3, #4
 8001b3a:	4a39      	ldr	r2, [pc, #228]	@ (8001c20 <setup_radio+0x2a8>)
 8001b3c:	2195      	movs	r1, #149	@ 0x95
 8001b3e:	4833      	ldr	r0, [pc, #204]	@ (8001c0c <setup_radio+0x294>)
 8001b40:	f002 faab 	bl	800409a <HAL_SUBGHZ_ExecSetCmd>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <setup_radio+0x1d6>
			!= HAL_OK) {
		Error_Handler();
 8001b4a:	f000 f8e7 	bl	8001d1c <Error_Handler>
	}

	// set tx params
	if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_TXPARAMS, RadioTxParams, 2)
 8001b4e:	2302      	movs	r3, #2
 8001b50:	4a34      	ldr	r2, [pc, #208]	@ (8001c24 <setup_radio+0x2ac>)
 8001b52:	218e      	movs	r1, #142	@ 0x8e
 8001b54:	482d      	ldr	r0, [pc, #180]	@ (8001c0c <setup_radio+0x294>)
 8001b56:	f002 faa0 	bl	800409a <HAL_SUBGHZ_ExecSetCmd>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <setup_radio+0x1ec>
			!= HAL_OK) {
		Error_Handler();
 8001b60:	f000 f8dc 	bl	8001d1c <Error_Handler>
	}

	// set buffer base address
	if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_BUFFERBASEADDRESS,
 8001b64:	2302      	movs	r3, #2
 8001b66:	4a30      	ldr	r2, [pc, #192]	@ (8001c28 <setup_radio+0x2b0>)
 8001b68:	218f      	movs	r1, #143	@ 0x8f
 8001b6a:	4828      	ldr	r0, [pc, #160]	@ (8001c0c <setup_radio+0x294>)
 8001b6c:	f002 fa95 	bl	800409a <HAL_SUBGHZ_ExecSetCmd>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <setup_radio+0x202>
			RadioBaseAddr, 2) != HAL_OK) {
		Error_Handler();
 8001b76:	f000 f8d1 	bl	8001d1c <Error_Handler>
	}

	// set modulation params
	if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_MODULATIONPARAMS,
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	4a2b      	ldr	r2, [pc, #172]	@ (8001c2c <setup_radio+0x2b4>)
 8001b7e:	218b      	movs	r1, #139	@ 0x8b
 8001b80:	4822      	ldr	r0, [pc, #136]	@ (8001c0c <setup_radio+0x294>)
 8001b82:	f002 fa8a 	bl	800409a <HAL_SUBGHZ_ExecSetCmd>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <setup_radio+0x218>
			RadioModParams, 4) != HAL_OK) {
		Error_Handler();
 8001b8c:	f000 f8c6 	bl	8001d1c <Error_Handler>
	}

	// set packet params
	if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_PACKETPARAMS,
 8001b90:	2306      	movs	r3, #6
 8001b92:	4a27      	ldr	r2, [pc, #156]	@ (8001c30 <setup_radio+0x2b8>)
 8001b94:	218c      	movs	r1, #140	@ 0x8c
 8001b96:	481d      	ldr	r0, [pc, #116]	@ (8001c0c <setup_radio+0x294>)
 8001b98:	f002 fa7f 	bl	800409a <HAL_SUBGHZ_ExecSetCmd>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <setup_radio+0x22e>
			RadioPacketParams, 6) != HAL_OK) {
		Error_Handler();
 8001ba2:	f000 f8bb 	bl	8001d1c <Error_Handler>
	// set sync word
	//HAL_SUBGHZ_WriteRegister(&hsubghz, 0x0740, 0x34);
	//HAL_SUBGHZ_WriteRegister(&hsubghz, 0x0741, 0x44);

	// set symbol timeout
	RadioParam = 0x00;
 8001ba6:	4b18      	ldr	r3, [pc, #96]	@ (8001c08 <setup_radio+0x290>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
	if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_LORASYMBTIMEOUT, &RadioParam,
 8001bac:	2301      	movs	r3, #1
 8001bae:	4a16      	ldr	r2, [pc, #88]	@ (8001c08 <setup_radio+0x290>)
 8001bb0:	21a0      	movs	r1, #160	@ 0xa0
 8001bb2:	4816      	ldr	r0, [pc, #88]	@ (8001c0c <setup_radio+0x294>)
 8001bb4:	f002 fa71 	bl	800409a <HAL_SUBGHZ_ExecSetCmd>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <setup_radio+0x24a>
			1) != HAL_OK) {
		Error_Handler();
 8001bbe:	f000 f8ad 	bl	8001d1c <Error_Handler>
	}
	RadioParam = 0x00;
 8001bc2:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <setup_radio+0x290>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]

	// get errors
	if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_STATUS, &RadioResult, 1)
 8001bc8:	2301      	movs	r3, #1
 8001bca:	4a12      	ldr	r2, [pc, #72]	@ (8001c14 <setup_radio+0x29c>)
 8001bcc:	21c0      	movs	r1, #192	@ 0xc0
 8001bce:	480f      	ldr	r0, [pc, #60]	@ (8001c0c <setup_radio+0x294>)
 8001bd0:	f002 fac2 	bl	8004158 <HAL_SUBGHZ_ExecGetCmd>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <setup_radio+0x266>
			!= HAL_OK) {
		Error_Handler();
 8001bda:	f000 f89f 	bl	8001d1c <Error_Handler>
	}

	if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_ERROR, RadioErr, 3)
 8001bde:	2303      	movs	r3, #3
 8001be0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c18 <setup_radio+0x2a0>)
 8001be2:	2117      	movs	r1, #23
 8001be4:	4809      	ldr	r0, [pc, #36]	@ (8001c0c <setup_radio+0x294>)
 8001be6:	f002 fab7 	bl	8004158 <HAL_SUBGHZ_ExecGetCmd>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <setup_radio+0x27c>
			!= HAL_OK) {
		Error_Handler();
 8001bf0:	f000 f894 	bl	8001d1c <Error_Handler>
	}
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd90      	pop	{r4, r7, pc}
 8001bfc:	f3af 8000 	nop.w
 8001c00:	00000000 	.word	0x00000000
 8001c04:	3fee8480 	.word	0x3fee8480
 8001c08:	200000cc 	.word	0x200000cc
 8001c0c:	20000194 	.word	0x20000194
 8001c10:	20000000 	.word	0x20000000
 8001c14:	200000cb 	.word	0x200000cb
 8001c18:	200000c8 	.word	0x200000c8
 8001c1c:	3689cac0 	.word	0x3689cac0
 8001c20:	20000008 	.word	0x20000008
 8001c24:	20000004 	.word	0x20000004
 8001c28:	2000000c 	.word	0x2000000c
 8001c2c:	20000010 	.word	0x20000010
 8001c30:	20000014 	.word	0x20000014

08001c34 <set_rf_switch_rx>:

void set_rf_switch_rx(void) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	2110      	movs	r1, #16
 8001c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c40:	f000 fff4 	bl	8002c2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2120      	movs	r1, #32
 8001c48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c4c:	f000 ffee 	bl	8002c2c <HAL_GPIO_WritePin>
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <set_rf_switch_tx>:

void set_rf_switch_tx(void) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2110      	movs	r1, #16
 8001c5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c60:	f000 ffe4 	bl	8002c2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001c64:	2201      	movs	r2, #1
 8001c66:	2120      	movs	r1, #32
 8001c68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c6c:	f000 ffde 	bl	8002c2c <HAL_GPIO_WritePin>
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <radio_tx>:

void radio_tx(uint8_t *buf, uint16_t bytes) {
 8001c74:	b590      	push	{r4, r7, lr}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]

	HAL_SUBGHZ_WriteBuffer(&hsubghz, 0, buf, bytes);
 8001c80:	887b      	ldrh	r3, [r7, #2]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	2100      	movs	r1, #0
 8001c86:	4820      	ldr	r0, [pc, #128]	@ (8001d08 <radio_tx+0x94>)
 8001c88:	f002 faba 	bl	8004200 <HAL_SUBGHZ_WriteBuffer>

	set_rf_switch_tx();
 8001c8c:	f7ff ffe2 	bl	8001c54 <set_rf_switch_tx>

	// clear errors
	if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_CLR_ERROR, &RadioParam, 1)
 8001c90:	2301      	movs	r3, #1
 8001c92:	4a1e      	ldr	r2, [pc, #120]	@ (8001d0c <radio_tx+0x98>)
 8001c94:	2107      	movs	r1, #7
 8001c96:	481c      	ldr	r0, [pc, #112]	@ (8001d08 <radio_tx+0x94>)
 8001c98:	f002 f9ff 	bl	800409a <HAL_SUBGHZ_ExecSetCmd>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <radio_tx+0x32>
			!= HAL_OK) {
		Error_Handler();
 8001ca2:	f000 f83b 	bl	8001d1c <Error_Handler>
	}

	if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_TX, RadioCmd, 3) != HAL_OK) {
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	4a19      	ldr	r2, [pc, #100]	@ (8001d10 <radio_tx+0x9c>)
 8001caa:	2183      	movs	r1, #131	@ 0x83
 8001cac:	4816      	ldr	r0, [pc, #88]	@ (8001d08 <radio_tx+0x94>)
 8001cae:	f002 f9f4 	bl	800409a <HAL_SUBGHZ_ExecSetCmd>
		//Error_Handler();
	}

	hsubghz.ErrorCode = 0;
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <radio_tx+0x94>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]

	while (LL_PWR_IsActiveFlag_RFBUSYS() & LL_PWR_IsActiveFlag_RFBUSYMS())
 8001cb8:	bf00      	nop
 8001cba:	f7ff fbff 	bl	80014bc <LL_PWR_IsActiveFlag_RFBUSYS>
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	f7ff fc0e 	bl	80014e0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4023      	ands	r3, r4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f6      	bne.n	8001cba <radio_tx+0x46>
		;

	/* Reset RadioResult */
	RadioResult = 0x00;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <radio_tx+0xa0>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]

	// get errors
	if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_STATUS, &RadioResult, 1)
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	4a0f      	ldr	r2, [pc, #60]	@ (8001d14 <radio_tx+0xa0>)
 8001cd6:	21c0      	movs	r1, #192	@ 0xc0
 8001cd8:	480b      	ldr	r0, [pc, #44]	@ (8001d08 <radio_tx+0x94>)
 8001cda:	f002 fa3d 	bl	8004158 <HAL_SUBGHZ_ExecGetCmd>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <radio_tx+0x74>
			!= HAL_OK) {
		Error_Handler();
 8001ce4:	f000 f81a 	bl	8001d1c <Error_Handler>
	}

	if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_ERROR, RadioErr, 3)
 8001ce8:	2303      	movs	r3, #3
 8001cea:	4a0b      	ldr	r2, [pc, #44]	@ (8001d18 <radio_tx+0xa4>)
 8001cec:	2117      	movs	r1, #23
 8001cee:	4806      	ldr	r0, [pc, #24]	@ (8001d08 <radio_tx+0x94>)
 8001cf0:	f002 fa32 	bl	8004158 <HAL_SUBGHZ_ExecGetCmd>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <radio_tx+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001cfa:	f000 f80f 	bl	8001d1c <Error_Handler>
	 != HAL_OK) {
	 Error_Handler();
	 }
	 */

}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd90      	pop	{r4, r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000194 	.word	0x20000194
 8001d0c:	200000cc 	.word	0x200000cc
 8001d10:	200000c4 	.word	0x200000c4
 8001d14:	200000cb 	.word	0x200000cb
 8001d18:	200000c8 	.word	0x200000c8

08001d1c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d20:	b672      	cpsid	i
}
 8001d22:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <Error_Handler+0x8>

08001d28 <LL_AHB2_GRP1_EnableClock>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <LL_APB2_GRP1_EnableClock>:
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d64:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d74:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
}
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001e00 <MX_SPI1_Init+0x78>)
 8001d90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001d94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d9a:	4b18      	ldr	r3, [pc, #96]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001da0:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001da2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001da6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001da8:	4b14      	ldr	r3, [pc, #80]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dae:	4b13      	ldr	r3, [pc, #76]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001db4:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001dbe:	2230      	movs	r2, #48	@ 0x30
 8001dc0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dce:	4b0b      	ldr	r3, [pc, #44]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001dd4:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001dd6:	2207      	movs	r2, #7
 8001dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dda:	4b08      	ldr	r3, [pc, #32]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001de0:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001de2:	2208      	movs	r2, #8
 8001de4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001de6:	4805      	ldr	r0, [pc, #20]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001de8:	f001 f866 	bl	8002eb8 <HAL_SPI_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001df2:	f7ff ff93 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000130 	.word	0x20000130
 8001e00:	40013000 	.word	0x40013000

08001e04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0e      	ldr	r2, [pc, #56]	@ (8001e5c <HAL_SPI_MspInit+0x58>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d116      	bne.n	8001e54 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e26:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001e2a:	f7ff ff95 	bl	8001d58 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	2002      	movs	r0, #2
 8001e30:	f7ff ff7a 	bl	8001d28 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e34:	2338      	movs	r3, #56	@ 0x38
 8001e36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e44:	2305      	movs	r3, #5
 8001e46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4804      	ldr	r0, [pc, #16]	@ (8001e60 <HAL_SPI_MspInit+0x5c>)
 8001e50:	f000 fd8c 	bl	800296c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e54:	bf00      	nop
 8001e56:	3720      	adds	r7, #32
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40013000 	.word	0x40013000
 8001e60:	48000400 	.word	0x48000400

08001e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <NMI_Handler+0x4>

08001e78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <HardFault_Handler+0x4>

08001e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e84:	bf00      	nop
 8001e86:	e7fd      	b.n	8001e84 <MemManage_Handler+0x4>

08001e88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <BusFault_Handler+0x4>

08001e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e94:	bf00      	nop
 8001e96:	e7fd      	b.n	8001e94 <UsageFault_Handler+0x4>

08001e98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec0:	f000 fc08 	bl	80026d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001ecc:	4802      	ldr	r0, [pc, #8]	@ (8001ed8 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001ece:	f002 f9ea 	bl	80042a6 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000194 	.word	0x20000194

08001edc <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ee8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001eea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ef8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f00:	68fb      	ldr	r3, [r7, #12]
}
 8001f02:	bf00      	nop
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8001f10:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <MX_SUBGHZ_Init+0x20>)
 8001f12:	2210      	movs	r2, #16
 8001f14:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001f16:	4805      	ldr	r0, [pc, #20]	@ (8001f2c <MX_SUBGHZ_Init+0x20>)
 8001f18:	f001 ff76 	bl	8003e08 <HAL_SUBGHZ_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001f22:	f7ff fefb 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000194 	.word	0x20000194

08001f30 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001f38:	2001      	movs	r0, #1
 8001f3a:	f7ff ffcf 	bl	8001edc <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	2032      	movs	r0, #50	@ 0x32
 8001f44:	f000 fcdd 	bl	8002902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001f48:	2032      	movs	r0, #50	@ 0x32
 8001f4a:	f000 fcf4 	bl	8002936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	@ (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	@ (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d207      	bcs.n	8001f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f88:	f007 fe68 	bl	8009c5c <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	220c      	movs	r2, #12
 8001f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f96:	e009      	b.n	8001fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f98:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a05      	ldr	r2, [pc, #20]	@ (8001fbc <_sbrk+0x64>)
 8001fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20010000 	.word	0x20010000
 8001fb8:	00000400 	.word	0x00000400
 8001fbc:	200001a0 	.word	0x200001a0
 8001fc0:	20000930 	.word	0x20000930

08001fc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <LL_AHB2_GRP1_EnableClock>:
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fdc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001fde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <LL_APB2_GRP1_EnableClock>:
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002008:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800200c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800200e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4313      	orrs	r3, r2
 8002016:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800201c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4013      	ands	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002024:	68fb      	ldr	r3, [r7, #12]
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	601a      	str	r2, [r3, #0]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr
	...

08002050 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d028      	beq.n	80020b2 <LL_TIM_OC_DisableFast+0x62>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2b04      	cmp	r3, #4
 8002064:	d023      	beq.n	80020ae <LL_TIM_OC_DisableFast+0x5e>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b10      	cmp	r3, #16
 800206a:	d01e      	beq.n	80020aa <LL_TIM_OC_DisableFast+0x5a>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	2b40      	cmp	r3, #64	@ 0x40
 8002070:	d019      	beq.n	80020a6 <LL_TIM_OC_DisableFast+0x56>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002078:	d013      	beq.n	80020a2 <LL_TIM_OC_DisableFast+0x52>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002080:	d00d      	beq.n	800209e <LL_TIM_OC_DisableFast+0x4e>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002088:	d007      	beq.n	800209a <LL_TIM_OC_DisableFast+0x4a>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002090:	d101      	bne.n	8002096 <LL_TIM_OC_DisableFast+0x46>
 8002092:	2307      	movs	r3, #7
 8002094:	e00e      	b.n	80020b4 <LL_TIM_OC_DisableFast+0x64>
 8002096:	2308      	movs	r3, #8
 8002098:	e00c      	b.n	80020b4 <LL_TIM_OC_DisableFast+0x64>
 800209a:	2306      	movs	r3, #6
 800209c:	e00a      	b.n	80020b4 <LL_TIM_OC_DisableFast+0x64>
 800209e:	2305      	movs	r3, #5
 80020a0:	e008      	b.n	80020b4 <LL_TIM_OC_DisableFast+0x64>
 80020a2:	2304      	movs	r3, #4
 80020a4:	e006      	b.n	80020b4 <LL_TIM_OC_DisableFast+0x64>
 80020a6:	2303      	movs	r3, #3
 80020a8:	e004      	b.n	80020b4 <LL_TIM_OC_DisableFast+0x64>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e002      	b.n	80020b4 <LL_TIM_OC_DisableFast+0x64>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <LL_TIM_OC_DisableFast+0x64>
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3318      	adds	r3, #24
 80020ba:	4619      	mov	r1, r3
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	4a0a      	ldr	r2, [pc, #40]	@ (80020e8 <LL_TIM_OC_DisableFast+0x98>)
 80020c0:	5cd3      	ldrb	r3, [r2, r3]
 80020c2:	440b      	add	r3, r1
 80020c4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	4907      	ldr	r1, [pc, #28]	@ (80020ec <LL_TIM_OC_DisableFast+0x9c>)
 80020ce:	5ccb      	ldrb	r3, [r1, r3]
 80020d0:	4619      	mov	r1, r3
 80020d2:	2304      	movs	r3, #4
 80020d4:	408b      	lsls	r3, r1
 80020d6:	43db      	mvns	r3, r3
 80020d8:	401a      	ands	r2, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	601a      	str	r2, [r3, #0]

}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	0800b068 	.word	0x0800b068
 80020ec:	0800b074 	.word	0x0800b074

080020f0 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d028      	beq.n	8002152 <LL_TIM_OC_EnablePreload+0x62>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	2b04      	cmp	r3, #4
 8002104:	d023      	beq.n	800214e <LL_TIM_OC_EnablePreload+0x5e>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b10      	cmp	r3, #16
 800210a:	d01e      	beq.n	800214a <LL_TIM_OC_EnablePreload+0x5a>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2b40      	cmp	r3, #64	@ 0x40
 8002110:	d019      	beq.n	8002146 <LL_TIM_OC_EnablePreload+0x56>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002118:	d013      	beq.n	8002142 <LL_TIM_OC_EnablePreload+0x52>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002120:	d00d      	beq.n	800213e <LL_TIM_OC_EnablePreload+0x4e>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002128:	d007      	beq.n	800213a <LL_TIM_OC_EnablePreload+0x4a>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002130:	d101      	bne.n	8002136 <LL_TIM_OC_EnablePreload+0x46>
 8002132:	2307      	movs	r3, #7
 8002134:	e00e      	b.n	8002154 <LL_TIM_OC_EnablePreload+0x64>
 8002136:	2308      	movs	r3, #8
 8002138:	e00c      	b.n	8002154 <LL_TIM_OC_EnablePreload+0x64>
 800213a:	2306      	movs	r3, #6
 800213c:	e00a      	b.n	8002154 <LL_TIM_OC_EnablePreload+0x64>
 800213e:	2305      	movs	r3, #5
 8002140:	e008      	b.n	8002154 <LL_TIM_OC_EnablePreload+0x64>
 8002142:	2304      	movs	r3, #4
 8002144:	e006      	b.n	8002154 <LL_TIM_OC_EnablePreload+0x64>
 8002146:	2303      	movs	r3, #3
 8002148:	e004      	b.n	8002154 <LL_TIM_OC_EnablePreload+0x64>
 800214a:	2302      	movs	r3, #2
 800214c:	e002      	b.n	8002154 <LL_TIM_OC_EnablePreload+0x64>
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <LL_TIM_OC_EnablePreload+0x64>
 8002152:	2300      	movs	r3, #0
 8002154:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3318      	adds	r3, #24
 800215a:	4619      	mov	r1, r3
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	4a0a      	ldr	r2, [pc, #40]	@ (8002188 <LL_TIM_OC_EnablePreload+0x98>)
 8002160:	5cd3      	ldrb	r3, [r2, r3]
 8002162:	440b      	add	r3, r1
 8002164:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	4907      	ldr	r1, [pc, #28]	@ (800218c <LL_TIM_OC_EnablePreload+0x9c>)
 800216e:	5ccb      	ldrb	r3, [r1, r3]
 8002170:	4619      	mov	r1, r3
 8002172:	2308      	movs	r3, #8
 8002174:	408b      	lsls	r3, r1
 8002176:	431a      	orrs	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	601a      	str	r2, [r3, #0]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	0800b068 	.word	0x0800b068
 800218c:	0800b074 	.word	0x0800b074

08002190 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	605a      	str	r2, [r3, #4]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	605a      	str	r2, [r3, #4]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	609a      	str	r2, [r3, #8]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
	...

080021f8 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b0a0      	sub	sp, #128	@ 0x80
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80021fe:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	60da      	str	r2, [r3, #12]
 800220c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800220e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002212:	2220      	movs	r2, #32
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f007 fd18 	bl	8009c4c <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	2230      	movs	r2, #48	@ 0x30
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f007 fd11 	bl	8009c4c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
 8002238:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800223a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800223e:	f7ff fedf 	bl	8002000 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002248:	2300      	movs	r3, #0
 800224a:	673b      	str	r3, [r7, #112]	@ 0x70
  TIM_InitStruct.Autoreload = 65535;
 800224c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002250:	677b      	str	r3, [r7, #116]	@ 0x74
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002252:	2300      	movs	r3, #0
 8002254:	67bb      	str	r3, [r7, #120]	@ 0x78
  TIM_InitStruct.RepetitionCounter = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	67fb      	str	r3, [r7, #124]	@ 0x7c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800225a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800225e:	4619      	mov	r1, r3
 8002260:	4842      	ldr	r0, [pc, #264]	@ (800236c <MX_TIM1_Init+0x174>)
 8002262:	f003 f93f 	bl	80054e4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002266:	4841      	ldr	r0, [pc, #260]	@ (800236c <MX_TIM1_Init+0x174>)
 8002268:	f7ff fee2 	bl	8002030 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 800226c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002270:	483e      	ldr	r0, [pc, #248]	@ (800236c <MX_TIM1_Init+0x174>)
 8002272:	f7ff ff3d 	bl	80020f0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002276:	2360      	movs	r3, #96	@ 0x60
 8002278:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	653b      	str	r3, [r7, #80]	@ 0x50
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	657b      	str	r3, [r7, #84]	@ 0x54
  TIM_OC_InitStruct.CompareValue = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002286:	2300      	movs	r3, #0
 8002288:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800228a:	2300      	movs	r3, #0
 800228c:	663b      	str	r3, [r7, #96]	@ 0x60
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800228e:	2300      	movs	r3, #0
 8002290:	667b      	str	r3, [r7, #100]	@ 0x64
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002292:	2300      	movs	r3, #0
 8002294:	66bb      	str	r3, [r7, #104]	@ 0x68
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002296:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800229a:	461a      	mov	r2, r3
 800229c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022a0:	4832      	ldr	r0, [pc, #200]	@ (800236c <MX_TIM1_Init+0x174>)
 80022a2:	f003 f97d 	bl	80055a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 80022a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022aa:	4830      	ldr	r0, [pc, #192]	@ (800236c <MX_TIM1_Init+0x174>)
 80022ac:	f7ff fed0 	bl	8002050 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 80022b0:	2100      	movs	r1, #0
 80022b2:	482e      	ldr	r0, [pc, #184]	@ (800236c <MX_TIM1_Init+0x174>)
 80022b4:	f7ff ff6c 	bl	8002190 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 80022b8:	2100      	movs	r1, #0
 80022ba:	482c      	ldr	r0, [pc, #176]	@ (800236c <MX_TIM1_Init+0x174>)
 80022bc:	f7ff ff7a 	bl	80021b4 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80022c0:	482a      	ldr	r0, [pc, #168]	@ (800236c <MX_TIM1_Init+0x174>)
 80022c2:	f7ff ff89 	bl	80021d8 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80022d8:	2300      	movs	r3, #0
 80022da:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 80022dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 80022e2:	2300      	movs	r3, #0
 80022e4:	633b      	str	r3, [r7, #48]	@ 0x30
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 80022e6:	2300      	movs	r3, #0
 80022e8:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 80022ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 80022f4:	2300      	movs	r3, #0
 80022f6:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 80022f8:	2300      	movs	r3, #0
 80022fa:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002300:	f107 031c 	add.w	r3, r7, #28
 8002304:	4619      	mov	r1, r3
 8002306:	4819      	ldr	r0, [pc, #100]	@ (800236c <MX_TIM1_Init+0x174>)
 8002308:	f003 f9aa 	bl	8005660 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800230c:	2002      	movs	r0, #2
 800230e:	f7ff fe5f 	bl	8001fd0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002312:	2001      	movs	r0, #1
 8002314:	f7ff fe5c 	bl	8001fd0 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PB9     ------> TIM1_CH3N
    PA10     ------> TIM1_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002318:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800231c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800231e:	2302      	movs	r3, #2
 8002320:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800232e:	2301      	movs	r3, #1
 8002330:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	4619      	mov	r1, r3
 8002336:	480e      	ldr	r0, [pc, #56]	@ (8002370 <MX_TIM1_Init+0x178>)
 8002338:	f002 fbb5 	bl	8004aa6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800233c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002340:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002342:	2302      	movs	r3, #2
 8002344:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002352:	2301      	movs	r3, #1
 8002354:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	4619      	mov	r1, r3
 800235a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800235e:	f002 fba2 	bl	8004aa6 <LL_GPIO_Init>

}
 8002362:	bf00      	nop
 8002364:	3780      	adds	r7, #128	@ 0x80
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40012c00 	.word	0x40012c00
 8002370:	48000400 	.word	0x48000400

08002374 <LL_RCC_SetLPUARTClockSource>:
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800237c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002384:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002388:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <LL_AHB2_GRP1_EnableClock>:
{
 800239e:	b480      	push	{r7}
 80023a0:	b085      	sub	sp, #20
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80023ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4013      	ands	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023c2:	68fb      	ldr	r3, [r7, #12]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <LL_APB1_GRP2_EnableClock>:
{
 80023ce:	b480      	push	{r7}
 80023d0:	b085      	sub	sp, #20
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 80023d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80023e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4013      	ands	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023f2:	68fb      	ldr	r3, [r7, #12]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr

080023fe <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f043 0201 	orr.w	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	601a      	str	r2, [r3, #0]
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	@ 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3308      	adds	r3, #8
 800242a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	e853 3f00 	ldrex	r3, [r3]
 8002432:	60bb      	str	r3, [r7, #8]
   return(result);
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	075b      	lsls	r3, r3, #29
 800243e:	4313      	orrs	r3, r2
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3308      	adds	r3, #8
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	61ba      	str	r2, [r7, #24]
 800244a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800244c:	6979      	ldr	r1, [r7, #20]
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	e841 2300 	strex	r3, r2, [r1]
 8002454:	613b      	str	r3, [r7, #16]
   return(result);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1e4      	bne.n	8002426 <LL_LPUART_SetTXFIFOThreshold+0xa>
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3724      	adds	r7, #36	@ 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8002468:	b480      	push	{r7}
 800246a:	b089      	sub	sp, #36	@ 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3308      	adds	r3, #8
 8002476:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	e853 3f00 	ldrex	r3, [r3]
 800247e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	065b      	lsls	r3, r3, #25
 800248a:	4313      	orrs	r3, r2
 800248c:	61fb      	str	r3, [r7, #28]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3308      	adds	r3, #8
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	61ba      	str	r2, [r7, #24]
 8002496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002498:	6979      	ldr	r1, [r7, #20]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	e841 2300 	strex	r3, r2, [r1]
 80024a0:	613b      	str	r3, [r7, #16]
   return(result);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1e4      	bne.n	8002472 <LL_LPUART_SetRXFIFOThreshold+0xa>
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3724      	adds	r7, #36	@ 0x24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr

080024b4 <LL_LPUART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_LPUART_IsActiveFlag_TEACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TEACK(const USART_TypeDef *LPUARTx)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024c8:	d101      	bne.n	80024ce <LL_LPUART_IsActiveFlag_TEACK+0x1a>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <LL_LPUART_IsActiveFlag_TEACK+0x1c>
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <LL_LPUART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_LPUART_IsActiveFlag_REACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_REACK(const USART_TypeDef *LPUARTx)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024ee:	d101      	bne.n	80024f4 <LL_LPUART_IsActiveFlag_REACK+0x1a>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <LL_LPUART_IsActiveFlag_REACK+0x1c>
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <MX_LPUART1_UART_Init>:
/* USER CODE END 0 */

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08e      	sub	sp, #56	@ 0x38
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8002506:	f107 031c 	add.w	r3, r7, #28
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	60da      	str	r2, [r3, #12]
 8002514:	611a      	str	r2, [r3, #16]
 8002516:	615a      	str	r2, [r3, #20]
 8002518:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251a:	1d3b      	adds	r3, r7, #4
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
 8002528:	615a      	str	r2, [r3, #20]

  LL_RCC_SetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE_PCLK1);
 800252a:	2000      	movs	r0, #0
 800252c:	f7ff ff22 	bl	8002374 <LL_RCC_SetLPUARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPUART1);
 8002530:	2001      	movs	r0, #1
 8002532:	f7ff ff4c 	bl	80023ce <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002536:	2004      	movs	r0, #4
 8002538:	f7ff ff31 	bl	800239e <LL_AHB2_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PC1   ------> LPUART1_TX
  PC0   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_0;
 800253c:	2303      	movs	r3, #3
 800253e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002540:	2302      	movs	r3, #2
 8002542:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002550:	2308      	movs	r3, #8
 8002552:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	4619      	mov	r1, r3
 8002558:	481a      	ldr	r0, [pc, #104]	@ (80025c4 <MX_LPUART1_UART_Init+0xc4>)
 800255a:	f002 faa4 	bl	8004aa6 <LL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV1;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
  LPUART_InitStruct.BaudRate = 115200;
 8002562:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002566:	623b      	str	r3, [r7, #32]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 8002568:	2300      	movs	r3, #0
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 800256c:	2300      	movs	r3, #0
 800256e:	62bb      	str	r3, [r7, #40]	@ 0x28
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 8002570:	2300      	movs	r3, #0
 8002572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 8002574:	230c      	movs	r3, #12
 8002576:	633b      	str	r3, [r7, #48]	@ 0x30
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 8002578:	2300      	movs	r3, #0
 800257a:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 800257c:	f107 031c 	add.w	r3, r7, #28
 8002580:	4619      	mov	r1, r3
 8002582:	4811      	ldr	r0, [pc, #68]	@ (80025c8 <MX_LPUART1_UART_Init+0xc8>)
 8002584:	f002 fc68 	bl	8004e58 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8002588:	2100      	movs	r1, #0
 800258a:	480f      	ldr	r0, [pc, #60]	@ (80025c8 <MX_LPUART1_UART_Init+0xc8>)
 800258c:	f7ff ff46 	bl	800241c <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8002590:	2100      	movs	r1, #0
 8002592:	480d      	ldr	r0, [pc, #52]	@ (80025c8 <MX_LPUART1_UART_Init+0xc8>)
 8002594:	f7ff ff68 	bl	8002468 <LL_LPUART_SetRXFIFOThreshold>

  /* USER CODE BEGIN WKUPType LPUART1 */

  /* USER CODE END WKUPType LPUART1 */

  LL_LPUART_Enable(LPUART1);
 8002598:	480b      	ldr	r0, [pc, #44]	@ (80025c8 <MX_LPUART1_UART_Init+0xc8>)
 800259a:	f7ff ff30 	bl	80023fe <LL_LPUART_Enable>

  /* Polling LPUART1 initialisation */
  while((!(LL_LPUART_IsActiveFlag_TEACK(LPUART1))) || (!(LL_LPUART_IsActiveFlag_REACK(LPUART1))))
 800259e:	bf00      	nop
 80025a0:	4809      	ldr	r0, [pc, #36]	@ (80025c8 <MX_LPUART1_UART_Init+0xc8>)
 80025a2:	f7ff ff87 	bl	80024b4 <LL_LPUART_IsActiveFlag_TEACK>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f9      	beq.n	80025a0 <MX_LPUART1_UART_Init+0xa0>
 80025ac:	4806      	ldr	r0, [pc, #24]	@ (80025c8 <MX_LPUART1_UART_Init+0xc8>)
 80025ae:	f7ff ff94 	bl	80024da <LL_LPUART_IsActiveFlag_REACK>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f3      	beq.n	80025a0 <MX_LPUART1_UART_Init+0xa0>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3738      	adds	r7, #56	@ 0x38
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	48000800 	.word	0x48000800
 80025c8:	40008000 	.word	0x40008000

080025cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025cc:	480d      	ldr	r0, [pc, #52]	@ (8002604 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025d0:	f7ff fcf8 	bl	8001fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025d4:	480c      	ldr	r0, [pc, #48]	@ (8002608 <LoopForever+0x6>)
  ldr r1, =_edata
 80025d6:	490d      	ldr	r1, [pc, #52]	@ (800260c <LoopForever+0xa>)
  ldr r2, =_sidata
 80025d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002610 <LoopForever+0xe>)
  movs r3, #0
 80025da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025dc:	e002      	b.n	80025e4 <LoopCopyDataInit>

080025de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025e2:	3304      	adds	r3, #4

080025e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e8:	d3f9      	bcc.n	80025de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002614 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002618 <LoopForever+0x16>)
  movs r3, #0
 80025ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f0:	e001      	b.n	80025f6 <LoopFillZerobss>

080025f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f4:	3204      	adds	r2, #4

080025f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f8:	d3fb      	bcc.n	80025f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025fa:	f007 fb35 	bl	8009c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025fe:	f7ff f8ef 	bl	80017e0 <main>

08002602 <LoopForever>:

LoopForever:
    b LoopForever
 8002602:	e7fe      	b.n	8002602 <LoopForever>
  ldr   r0, =_estack
 8002604:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800260c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8002610:	0800b278 	.word	0x0800b278
  ldr r2, =_sbss
 8002614:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8002618:	20000930 	.word	0x20000930

0800261c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800261c:	e7fe      	b.n	800261c <ADC_IRQHandler>
	...

08002620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800262a:	2003      	movs	r0, #3
 800262c:	f000 f95e 	bl	80028ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002630:	f000 fc2e 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002634:	4603      	mov	r3, r0
 8002636:	4a09      	ldr	r2, [pc, #36]	@ (800265c <HAL_Init+0x3c>)
 8002638:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800263a:	200f      	movs	r0, #15
 800263c:	f000 f810 	bl	8002660 <HAL_InitTick>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	71fb      	strb	r3, [r7, #7]
 800264a:	e001      	b.n	8002650 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800264c:	f7ff fc0a 	bl	8001e64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002650:	79fb      	ldrb	r3, [r7, #7]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000030 	.word	0x20000030

08002660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800266c:	4b17      	ldr	r3, [pc, #92]	@ (80026cc <HAL_InitTick+0x6c>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d024      	beq.n	80026be <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002674:	f000 fc0c 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002678:	4602      	mov	r2, r0
 800267a:	4b14      	ldr	r3, [pc, #80]	@ (80026cc <HAL_InitTick+0x6c>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	4619      	mov	r1, r3
 8002680:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002684:	fbb3 f3f1 	udiv	r3, r3, r1
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	4618      	mov	r0, r3
 800268e:	f000 f960 	bl	8002952 <HAL_SYSTICK_Config>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10f      	bne.n	80026b8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b0f      	cmp	r3, #15
 800269c:	d809      	bhi.n	80026b2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800269e:	2200      	movs	r2, #0
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026a6:	f000 f92c 	bl	8002902 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026aa:	4a09      	ldr	r2, [pc, #36]	@ (80026d0 <HAL_InitTick+0x70>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	e007      	b.n	80026c2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
 80026b6:	e004      	b.n	80026c2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
 80026bc:	e001      	b.n	80026c2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000038 	.word	0x20000038
 80026d0:	20000034 	.word	0x20000034

080026d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <HAL_IncTick+0x1c>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	4b05      	ldr	r3, [pc, #20]	@ (80026f4 <HAL_IncTick+0x20>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	4a03      	ldr	r2, [pc, #12]	@ (80026f4 <HAL_IncTick+0x20>)
 80026e6:	6013      	str	r3, [r2, #0]
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	20000038 	.word	0x20000038
 80026f4:	200001a4 	.word	0x200001a4

080026f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return uwTick;
 80026fc:	4b02      	ldr	r3, [pc, #8]	@ (8002708 <HAL_GetTick+0x10>)
 80026fe:	681b      	ldr	r3, [r3, #0]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	200001a4 	.word	0x200001a4

0800270c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002714:	f7ff fff0 	bl	80026f8 <HAL_GetTick>
 8002718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002724:	d005      	beq.n	8002732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002726:	4b0a      	ldr	r3, [pc, #40]	@ (8002750 <HAL_Delay+0x44>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4413      	add	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002732:	bf00      	nop
 8002734:	f7ff ffe0 	bl	80026f8 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	429a      	cmp	r2, r3
 8002742:	d8f7      	bhi.n	8002734 <HAL_Delay+0x28>
  {
  }
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000038 	.word	0x20000038

08002754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002764:	4b0c      	ldr	r3, [pc, #48]	@ (8002798 <__NVIC_SetPriorityGrouping+0x44>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002770:	4013      	ands	r3, r2
 8002772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800277c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002786:	4a04      	ldr	r2, [pc, #16]	@ (8002798 <__NVIC_SetPriorityGrouping+0x44>)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	60d3      	str	r3, [r2, #12]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a0:	4b04      	ldr	r3, [pc, #16]	@ (80027b4 <__NVIC_GetPriorityGrouping+0x18>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	0a1b      	lsrs	r3, r3, #8
 80027a6:	f003 0307 	and.w	r3, r3, #7
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	db0b      	blt.n	80027e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	f003 021f 	and.w	r2, r3, #31
 80027d0:	4906      	ldr	r1, [pc, #24]	@ (80027ec <__NVIC_EnableIRQ+0x34>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	2001      	movs	r0, #1
 80027da:	fa00 f202 	lsl.w	r2, r0, r2
 80027de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	e000e100 	.word	0xe000e100

080027f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	2b00      	cmp	r3, #0
 8002802:	db0a      	blt.n	800281a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	b2da      	uxtb	r2, r3
 8002808:	490c      	ldr	r1, [pc, #48]	@ (800283c <__NVIC_SetPriority+0x4c>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	0112      	lsls	r2, r2, #4
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	440b      	add	r3, r1
 8002814:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002818:	e00a      	b.n	8002830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4908      	ldr	r1, [pc, #32]	@ (8002840 <__NVIC_SetPriority+0x50>)
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	3b04      	subs	r3, #4
 8002828:	0112      	lsls	r2, r2, #4
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	440b      	add	r3, r1
 800282e:	761a      	strb	r2, [r3, #24]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000e100 	.word	0xe000e100
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002844:	b480      	push	{r7}
 8002846:	b089      	sub	sp, #36	@ 0x24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f1c3 0307 	rsb	r3, r3, #7
 800285e:	2b04      	cmp	r3, #4
 8002860:	bf28      	it	cs
 8002862:	2304      	movcs	r3, #4
 8002864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3304      	adds	r3, #4
 800286a:	2b06      	cmp	r3, #6
 800286c:	d902      	bls.n	8002874 <NVIC_EncodePriority+0x30>
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3b03      	subs	r3, #3
 8002872:	e000      	b.n	8002876 <NVIC_EncodePriority+0x32>
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43da      	mvns	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	401a      	ands	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800288c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	43d9      	mvns	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800289c:	4313      	orrs	r3, r2
         );
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3724      	adds	r7, #36	@ 0x24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028b8:	d301      	bcc.n	80028be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ba:	2301      	movs	r3, #1
 80028bc:	e00f      	b.n	80028de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028be:	4a0a      	ldr	r2, [pc, #40]	@ (80028e8 <SysTick_Config+0x40>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028c6:	210f      	movs	r1, #15
 80028c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028cc:	f7ff ff90 	bl	80027f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d0:	4b05      	ldr	r3, [pc, #20]	@ (80028e8 <SysTick_Config+0x40>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028d6:	4b04      	ldr	r3, [pc, #16]	@ (80028e8 <SysTick_Config+0x40>)
 80028d8:	2207      	movs	r2, #7
 80028da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	e000e010 	.word	0xe000e010

080028ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ff2d 	bl	8002754 <__NVIC_SetPriorityGrouping>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	4603      	mov	r3, r0
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002910:	f7ff ff44 	bl	800279c <__NVIC_GetPriorityGrouping>
 8002914:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68b9      	ldr	r1, [r7, #8]
 800291a:	6978      	ldr	r0, [r7, #20]
 800291c:	f7ff ff92 	bl	8002844 <NVIC_EncodePriority>
 8002920:	4602      	mov	r2, r0
 8002922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff61 	bl	80027f0 <__NVIC_SetPriority>
}
 800292e:	bf00      	nop
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	4603      	mov	r3, r0
 800293e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff37 	bl	80027b8 <__NVIC_EnableIRQ>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff ffa4 	bl	80028a8 <SysTick_Config>
 8002960:	4603      	mov	r3, r0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800297a:	e140      	b.n	8002bfe <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	2101      	movs	r1, #1
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	fa01 f303 	lsl.w	r3, r1, r3
 8002988:	4013      	ands	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 8132 	beq.w	8002bf8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d005      	beq.n	80029ac <HAL_GPIO_Init+0x40>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d130      	bne.n	8002a0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2203      	movs	r2, #3
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029e2:	2201      	movs	r2, #1
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	f003 0201 	and.w	r2, r3, #1
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d017      	beq.n	8002a4a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	2203      	movs	r2, #3
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d123      	bne.n	8002a9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	08da      	lsrs	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3208      	adds	r2, #8
 8002a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	220f      	movs	r2, #15
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	08da      	lsrs	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3208      	adds	r2, #8
 8002a98:	6939      	ldr	r1, [r7, #16]
 8002a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0203 	and.w	r2, r3, #3
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 808c 	beq.w	8002bf8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002ae0:	4a4e      	ldr	r2, [pc, #312]	@ (8002c1c <HAL_GPIO_Init+0x2b0>)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	2207      	movs	r2, #7
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4013      	ands	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b0a:	d00d      	beq.n	8002b28 <HAL_GPIO_Init+0x1bc>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a44      	ldr	r2, [pc, #272]	@ (8002c20 <HAL_GPIO_Init+0x2b4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d007      	beq.n	8002b24 <HAL_GPIO_Init+0x1b8>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a43      	ldr	r2, [pc, #268]	@ (8002c24 <HAL_GPIO_Init+0x2b8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d101      	bne.n	8002b20 <HAL_GPIO_Init+0x1b4>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e004      	b.n	8002b2a <HAL_GPIO_Init+0x1be>
 8002b20:	2307      	movs	r3, #7
 8002b22:	e002      	b.n	8002b2a <HAL_GPIO_Init+0x1be>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_GPIO_Init+0x1be>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	f002 0203 	and.w	r2, r2, #3
 8002b30:	0092      	lsls	r2, r2, #2
 8002b32:	4093      	lsls	r3, r2
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b3a:	4938      	ldr	r1, [pc, #224]	@ (8002c1c <HAL_GPIO_Init+0x2b0>)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	3302      	adds	r3, #2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b48:	4b37      	ldr	r3, [pc, #220]	@ (8002c28 <HAL_GPIO_Init+0x2bc>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b6c:	4a2e      	ldr	r2, [pc, #184]	@ (8002c28 <HAL_GPIO_Init+0x2bc>)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b72:	4b2d      	ldr	r3, [pc, #180]	@ (8002c28 <HAL_GPIO_Init+0x2bc>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b96:	4a24      	ldr	r2, [pc, #144]	@ (8002c28 <HAL_GPIO_Init+0x2bc>)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002b9c:	4b22      	ldr	r3, [pc, #136]	@ (8002c28 <HAL_GPIO_Init+0x2bc>)
 8002b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ba2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002bc2:	4a19      	ldr	r2, [pc, #100]	@ (8002c28 <HAL_GPIO_Init+0x2bc>)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002bca:	4b17      	ldr	r3, [pc, #92]	@ (8002c28 <HAL_GPIO_Init+0x2bc>)
 8002bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bd0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8002c28 <HAL_GPIO_Init+0x2bc>)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f47f aeb7 	bne.w	800297c <HAL_GPIO_Init+0x10>
  }
}
 8002c0e:	bf00      	nop
 8002c10:	bf00      	nop
 8002c12:	371c      	adds	r7, #28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40010000 	.word	0x40010000
 8002c20:	48000400 	.word	0x48000400
 8002c24:	48000800 	.word	0x48000800
 8002c28:	58000800 	.word	0x58000800

08002c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	807b      	strh	r3, [r7, #2]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c3c:	787b      	ldrb	r3, [r7, #1]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c42:	887a      	ldrh	r2, [r7, #2]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c48:	e002      	b.n	8002c50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c4a:	887a      	ldrh	r2, [r7, #2]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002c5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c6c:	d101      	bne.n	8002c72 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002c80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d101      	bne.n	8002c92 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <LL_RCC_MSI_GetRange>:
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cbe:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr

08002cca <LL_RCC_GetSysClkSource>:
{
 8002cca:	b480      	push	{r7}
 8002ccc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002cce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <LL_RCC_GetAHBPrescaler>:
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	0a1b      	lsrs	r3, r3, #8
 8002d02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0303 	and.w	r3, r3, #3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d5e:	f7ff ffb4 	bl	8002cca <LL_RCC_GetSysClkSource>
 8002d62:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d64:	f7ff ffe9 	bl	8002d3a <LL_RCC_PLL_GetMainSource>
 8002d68:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0x2c>
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b0c      	cmp	r3, #12
 8002d74:	d139      	bne.n	8002dea <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d136      	bne.n	8002dea <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002d7c:	f7ff ff7e 	bl	8002c7c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d115      	bne.n	8002db2 <HAL_RCC_GetSysClockFreq+0x62>
 8002d86:	f7ff ff79 	bl	8002c7c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d106      	bne.n	8002d9e <HAL_RCC_GetSysClockFreq+0x4e>
 8002d90:	f7ff ff84 	bl	8002c9c <LL_RCC_MSI_GetRange>
 8002d94:	4603      	mov	r3, r0
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	e005      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x5a>
 8002d9e:	f7ff ff88 	bl	8002cb2 <LL_RCC_MSI_GetRangeAfterStandby>
 8002da2:	4603      	mov	r3, r0
 8002da4:	0a1b      	lsrs	r3, r3, #8
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	4a36      	ldr	r2, [pc, #216]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x134>)
 8002dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db0:	e014      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x8c>
 8002db2:	f7ff ff63 	bl	8002c7c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d106      	bne.n	8002dca <HAL_RCC_GetSysClockFreq+0x7a>
 8002dbc:	f7ff ff6e 	bl	8002c9c <LL_RCC_MSI_GetRange>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	091b      	lsrs	r3, r3, #4
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	e005      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x86>
 8002dca:	f7ff ff72 	bl	8002cb2 <LL_RCC_MSI_GetRangeAfterStandby>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	4a2b      	ldr	r2, [pc, #172]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x134>)
 8002dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ddc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d115      	bne.n	8002e10 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002de8:	e012      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d102      	bne.n	8002df6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002df0:	4b25      	ldr	r3, [pc, #148]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x138>)
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	e00c      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d109      	bne.n	8002e10 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002dfc:	f7ff ff2d 	bl	8002c5a <LL_RCC_HSE_IsEnabledDiv2>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d102      	bne.n	8002e0c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002e06:	4b20      	ldr	r3, [pc, #128]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	e001      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002e0e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e10:	f7ff ff5b 	bl	8002cca <LL_RCC_GetSysClkSource>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b0c      	cmp	r3, #12
 8002e18:	d12f      	bne.n	8002e7a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002e1a:	f7ff ff8e 	bl	8002d3a <LL_RCC_PLL_GetMainSource>
 8002e1e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d003      	beq.n	8002e2e <HAL_RCC_GetSysClockFreq+0xde>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d003      	beq.n	8002e34 <HAL_RCC_GetSysClockFreq+0xe4>
 8002e2c:	e00d      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002e2e:	4b16      	ldr	r3, [pc, #88]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e30:	60fb      	str	r3, [r7, #12]
        break;
 8002e32:	e00d      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002e34:	f7ff ff11 	bl	8002c5a <LL_RCC_HSE_IsEnabledDiv2>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d102      	bne.n	8002e44 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002e3e:	4b12      	ldr	r3, [pc, #72]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e40:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002e42:	e005      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002e44:	4b11      	ldr	r3, [pc, #68]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002e46:	60fb      	str	r3, [r7, #12]
        break;
 8002e48:	e002      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	60fb      	str	r3, [r7, #12]
        break;
 8002e4e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002e50:	f7ff ff51 	bl	8002cf6 <LL_RCC_PLL_GetN>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	fb03 f402 	mul.w	r4, r3, r2
 8002e5c:	f7ff ff62 	bl	8002d24 <LL_RCC_PLL_GetDivider>
 8002e60:	4603      	mov	r3, r0
 8002e62:	091b      	lsrs	r3, r3, #4
 8002e64:	3301      	adds	r3, #1
 8002e66:	fbb4 f4f3 	udiv	r4, r4, r3
 8002e6a:	f7ff ff50 	bl	8002d0e <LL_RCC_PLL_GetR>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	0f5b      	lsrs	r3, r3, #29
 8002e72:	3301      	adds	r3, #1
 8002e74:	fbb4 f3f3 	udiv	r3, r4, r3
 8002e78:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002e7a:	697b      	ldr	r3, [r7, #20]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd90      	pop	{r4, r7, pc}
 8002e84:	0800b028 	.word	0x0800b028
 8002e88:	00f42400 	.word	0x00f42400
 8002e8c:	01e84800 	.word	0x01e84800

08002e90 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e90:	b598      	push	{r3, r4, r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002e94:	f7ff ff5c 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8002e98:	4604      	mov	r4, r0
 8002e9a:	f7ff ff21 	bl	8002ce0 <LL_RCC_GetAHBPrescaler>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	4a03      	ldr	r2, [pc, #12]	@ (8002eb4 <HAL_RCC_GetHCLKFreq+0x24>)
 8002ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	bd98      	pop	{r3, r4, r7, pc}
 8002eb4:	0800afc8 	.word	0x0800afc8

08002eb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e0c6      	b.n	8003058 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d108      	bne.n	8002ee4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eda:	d009      	beq.n	8002ef0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	61da      	str	r2, [r3, #28]
 8002ee2:	e005      	b.n	8002ef0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d106      	bne.n	8002f0a <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7fe ff7d 	bl	8001e04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f20:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f2a:	d902      	bls.n	8002f32 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	e002      	b.n	8002f38 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f36:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002f40:	d007      	beq.n	8002f52 <HAL_SPI_Init+0x9a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f4a:	d002      	beq.n	8002f52 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f94:	ea42 0103 	orr.w	r1, r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fb0:	d11b      	bne.n	8002fea <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10b      	bne.n	8002fd2 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fc2:	d903      	bls.n	8002fcc <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fca:	e002      	b.n	8002fd2 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d107      	bne.n	8002fea <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fe8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	0c1b      	lsrs	r3, r3, #16
 8002ff0:	f003 0204 	and.w	r2, r3, #4
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003010:	ea42 0103 	orr.w	r1, r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800302a:	d105      	bne.n	8003038 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	b292      	uxth	r2, r2
 8003036:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003046:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	4613      	mov	r3, r2
 800306e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_SPI_Transmit+0x22>
 800307e:	2302      	movs	r3, #2
 8003080:	e181      	b.n	8003386 <HAL_SPI_Transmit+0x326>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800308a:	f7ff fb35 	bl	80026f8 <HAL_GetTick>
 800308e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d002      	beq.n	80030a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80030a0:	2302      	movs	r3, #2
 80030a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030a4:	e16a      	b.n	800337c <HAL_SPI_Transmit+0x31c>
  }

  if ((pData == NULL) || (Size == 0U))
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <HAL_SPI_Transmit+0x52>
 80030ac:	88fb      	ldrh	r3, [r7, #6]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d102      	bne.n	80030b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030b6:	e161      	b.n	800337c <HAL_SPI_Transmit+0x31c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2203      	movs	r2, #3
 80030bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	88fa      	ldrh	r2, [r7, #6]
 80030d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	88fa      	ldrh	r2, [r7, #6]
 80030d6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003102:	d10f      	bne.n	8003124 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003112:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003122:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003128:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800312c:	d10f      	bne.n	800314e <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800314c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003158:	2b40      	cmp	r3, #64	@ 0x40
 800315a:	d007      	beq.n	800316c <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800316a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003174:	d94f      	bls.n	8003216 <HAL_SPI_Transmit+0x1b6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HAL_SPI_Transmit+0x124>
 800317e:	8afb      	ldrh	r3, [r7, #22]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d142      	bne.n	800320a <HAL_SPI_Transmit+0x1aa>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003188:	881a      	ldrh	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003194:	1c9a      	adds	r2, r3, #2
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031a8:	e02f      	b.n	800320a <HAL_SPI_Transmit+0x1aa>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d112      	bne.n	80031de <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031bc:	881a      	ldrh	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c8:	1c9a      	adds	r2, r3, #2
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031dc:	e015      	b.n	800320a <HAL_SPI_Transmit+0x1aa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031de:	f7ff fa8b 	bl	80026f8 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d803      	bhi.n	80031f6 <HAL_SPI_Transmit+0x196>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031f4:	d102      	bne.n	80031fc <HAL_SPI_Transmit+0x19c>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d106      	bne.n	800320a <HAL_SPI_Transmit+0x1aa>
        {
          errorcode = HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003208:	e0b8      	b.n	800337c <HAL_SPI_Transmit+0x31c>
    while (hspi->TxXferCount > 0U)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1ca      	bne.n	80031aa <HAL_SPI_Transmit+0x14a>
 8003214:	e080      	b.n	8003318 <HAL_SPI_Transmit+0x2b8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_SPI_Transmit+0x1c4>
 800321e:	8afb      	ldrh	r3, [r7, #22]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d174      	bne.n	800330e <HAL_SPI_Transmit+0x2ae>
    {
      if (hspi->TxXferCount > 1U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	d912      	bls.n	8003254 <HAL_SPI_Transmit+0x1f4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003232:	881a      	ldrh	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323e:	1c9a      	adds	r2, r3, #2
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b02      	subs	r3, #2
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003252:	e05c      	b.n	800330e <HAL_SPI_Transmit+0x2ae>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	330c      	adds	r3, #12
 800325e:	7812      	ldrb	r2, [r2, #0]
 8003260:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800327a:	e048      	b.n	800330e <HAL_SPI_Transmit+0x2ae>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b02      	cmp	r3, #2
 8003288:	d12b      	bne.n	80032e2 <HAL_SPI_Transmit+0x282>
      {
        if (hspi->TxXferCount > 1U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d912      	bls.n	80032ba <HAL_SPI_Transmit+0x25a>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003298:	881a      	ldrh	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a4:	1c9a      	adds	r2, r3, #2
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b02      	subs	r3, #2
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032b8:	e029      	b.n	800330e <HAL_SPI_Transmit+0x2ae>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	330c      	adds	r3, #12
 80032c4:	7812      	ldrb	r2, [r2, #0]
 80032c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032e0:	e015      	b.n	800330e <HAL_SPI_Transmit+0x2ae>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032e2:	f7ff fa09 	bl	80026f8 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d803      	bhi.n	80032fa <HAL_SPI_Transmit+0x29a>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032f8:	d102      	bne.n	8003300 <HAL_SPI_Transmit+0x2a0>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d106      	bne.n	800330e <HAL_SPI_Transmit+0x2ae>
        {
          errorcode = HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800330c:	e036      	b.n	800337c <HAL_SPI_Transmit+0x31c>
    while (hspi->TxXferCount > 0U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1b1      	bne.n	800327c <HAL_SPI_Transmit+0x21c>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003320:	d107      	bne.n	8003332 <HAL_SPI_Transmit+0x2d2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003330:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	6839      	ldr	r1, [r7, #0]
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 fc86 	bl	8003c48 <SPI_EndRxTxTransaction>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <HAL_SPI_Transmit+0x2e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2220      	movs	r2, #32
 8003346:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10a      	bne.n	8003366 <HAL_SPI_Transmit+0x306>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003350:	2300      	movs	r3, #0
 8003352:	613b      	str	r3, [r7, #16]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_SPI_Transmit+0x314>
  {
    errorcode = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	77fb      	strb	r3, [r7, #31]
 8003372:	e003      	b.n	800337c <HAL_SPI_Transmit+0x31c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003384:	7ffb      	ldrb	r3, [r7, #31]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3720      	adds	r7, #32
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b092      	sub	sp, #72	@ 0x48
 8003392:	af02      	add	r7, sp, #8
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	607a      	str	r2, [r7, #4]
 800339a:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033a4:	2301      	movs	r3, #1
 80033a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_SPI_TransmitReceive+0x2e>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e322      	b.n	8003a02 <HAL_SPI_TransmitReceive+0x674>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033c4:	f7ff f998 	bl	80026f8 <HAL_GetTick>
 80033c8:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  tmp_mode            = hspi->Init.Mode;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  initial_TxXferCount = Size;
 80033da:	887b      	ldrh	r3, [r7, #2]
 80033dc:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80033de:	887b      	ldrh	r3, [r7, #2]
 80033e0:	853b      	strh	r3, [r7, #40]	@ 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	627b      	str	r3, [r7, #36]	@ 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d00f      	beq.n	800341a <HAL_SPI_TransmitReceive+0x8c>
 80033fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003400:	d107      	bne.n	8003412 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d103      	bne.n	8003412 <HAL_SPI_TransmitReceive+0x84>
 800340a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800340e:	2b04      	cmp	r3, #4
 8003410:	d003      	beq.n	800341a <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8003412:	2302      	movs	r3, #2
 8003414:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    goto error;
 8003418:	e2ed      	b.n	80039f6 <HAL_SPI_TransmitReceive+0x668>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_SPI_TransmitReceive+0x9e>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <HAL_SPI_TransmitReceive+0x9e>
 8003426:	887b      	ldrh	r3, [r7, #2]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d103      	bne.n	8003434 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    goto error;
 8003432:	e2e0      	b.n	80039f6 <HAL_SPI_TransmitReceive+0x668>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b04      	cmp	r3, #4
 800343e:	d003      	beq.n	8003448 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2205      	movs	r2, #5
 8003444:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	887a      	ldrh	r2, [r7, #2]
 8003460:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	887a      	ldrh	r2, [r7, #2]
 800346e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	887a      	ldrh	r2, [r7, #2]
 8003474:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800348a:	d10f      	bne.n	80034ac <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034aa:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034b4:	d802      	bhi.n	80034bc <HAL_SPI_TransmitReceive+0x12e>
 80034b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d908      	bls.n	80034ce <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034ca:	605a      	str	r2, [r3, #4]
 80034cc:	e007      	b.n	80034de <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80034dc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e8:	2b40      	cmp	r3, #64	@ 0x40
 80034ea:	d007      	beq.n	80034fc <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003504:	f240 80ce 	bls.w	80036a4 <HAL_SPI_TransmitReceive+0x316>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_SPI_TransmitReceive+0x18a>
 8003510:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003512:	2b01      	cmp	r3, #1
 8003514:	f040 80b8 	bne.w	8003688 <HAL_SPI_TransmitReceive+0x2fa>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351c:	881a      	ldrh	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003528:	1c9a      	adds	r2, r3, #2
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	f040 80a0 	bne.w	8003688 <HAL_SPI_TransmitReceive+0x2fa>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003550:	f040 809a 	bne.w	8003688 <HAL_SPI_TransmitReceive+0x2fa>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10c      	bne.n	8003578 <HAL_SPI_TransmitReceive+0x1ea>
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d007      	beq.n	8003578 <HAL_SPI_TransmitReceive+0x1ea>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003576:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003586:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003588:	e07e      	b.n	8003688 <HAL_SPI_TransmitReceive+0x2fa>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b02      	cmp	r3, #2
 8003596:	d13f      	bne.n	8003618 <HAL_SPI_TransmitReceive+0x28a>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d03a      	beq.n	8003618 <HAL_SPI_TransmitReceive+0x28a>
 80035a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d137      	bne.n	8003618 <HAL_SPI_TransmitReceive+0x28a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ac:	881a      	ldrh	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b8:	1c9a      	adds	r2, r3, #2
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d11e      	bne.n	8003618 <HAL_SPI_TransmitReceive+0x28a>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035e2:	d119      	bne.n	8003618 <HAL_SPI_TransmitReceive+0x28a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80035e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10c      	bne.n	8003608 <HAL_SPI_TransmitReceive+0x27a>
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d007      	beq.n	8003608 <HAL_SPI_TransmitReceive+0x27a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003606:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003616:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b01      	cmp	r3, #1
 8003624:	d11c      	bne.n	8003660 <HAL_SPI_TransmitReceive+0x2d2>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d016      	beq.n	8003660 <HAL_SPI_TransmitReceive+0x2d2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363c:	b292      	uxth	r2, r2
 800363e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003644:	1c9a      	adds	r2, r3, #2
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800365c:	2301      	movs	r3, #1
 800365e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003660:	f7ff f84a 	bl	80026f8 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800366c:	429a      	cmp	r2, r3
 800366e:	d80b      	bhi.n	8003688 <HAL_SPI_TransmitReceive+0x2fa>
 8003670:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003676:	d007      	beq.n	8003688 <HAL_SPI_TransmitReceive+0x2fa>
      {
        errorcode = HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003686:	e1b6      	b.n	80039f6 <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	f47f af7b 	bne.w	800358a <HAL_SPI_TransmitReceive+0x1fc>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	f47f af74 	bne.w	800358a <HAL_SPI_TransmitReceive+0x1fc>
 80036a2:	e12d      	b.n	8003900 <HAL_SPI_TransmitReceive+0x572>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_SPI_TransmitReceive+0x326>
 80036ac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	f040 8119 	bne.w	80038e6 <HAL_SPI_TransmitReceive+0x558>
    {
      if (hspi->TxXferCount > 1U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d912      	bls.n	80036e4 <HAL_SPI_TransmitReceive+0x356>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c2:	881a      	ldrh	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ce:	1c9a      	adds	r2, r3, #2
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b02      	subs	r3, #2
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036e2:	e100      	b.n	80038e6 <HAL_SPI_TransmitReceive+0x558>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	330c      	adds	r3, #12
 80036ee:	7812      	ldrb	r2, [r2, #0]
 80036f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	f040 80e8 	bne.w	80038e6 <HAL_SPI_TransmitReceive+0x558>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800371e:	f040 80e2 	bne.w	80038e6 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8003722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10c      	bne.n	8003746 <HAL_SPI_TransmitReceive+0x3b8>
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <HAL_SPI_TransmitReceive+0x3b8>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003744:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003754:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003756:	e0c6      	b.n	80038e6 <HAL_SPI_TransmitReceive+0x558>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b02      	cmp	r3, #2
 8003764:	d158      	bne.n	8003818 <HAL_SPI_TransmitReceive+0x48a>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d053      	beq.n	8003818 <HAL_SPI_TransmitReceive+0x48a>
 8003770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003772:	2b01      	cmp	r3, #1
 8003774:	d150      	bne.n	8003818 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->TxXferCount > 1U)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b01      	cmp	r3, #1
 800377e:	d912      	bls.n	80037a6 <HAL_SPI_TransmitReceive+0x418>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003784:	881a      	ldrh	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003790:	1c9a      	adds	r2, r3, #2
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b02      	subs	r3, #2
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037a4:	e012      	b.n	80037cc <HAL_SPI_TransmitReceive+0x43e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	330c      	adds	r3, #12
 80037b0:	7812      	ldrb	r2, [r2, #0]
 80037b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d11e      	bne.n	8003818 <HAL_SPI_TransmitReceive+0x48a>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037e2:	d119      	bne.n	8003818 <HAL_SPI_TransmitReceive+0x48a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80037e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10c      	bne.n	8003808 <HAL_SPI_TransmitReceive+0x47a>
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d007      	beq.n	8003808 <HAL_SPI_TransmitReceive+0x47a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003806:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003816:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b01      	cmp	r3, #1
 8003824:	d148      	bne.n	80038b8 <HAL_SPI_TransmitReceive+0x52a>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d042      	beq.n	80038b8 <HAL_SPI_TransmitReceive+0x52a>
      {
        if (hspi->RxXferCount > 1U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b01      	cmp	r3, #1
 800383c:	d923      	bls.n	8003886 <HAL_SPI_TransmitReceive+0x4f8>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003848:	b292      	uxth	r2, r2
 800384a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003850:	1c9a      	adds	r2, r3, #2
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800385c:	b29b      	uxth	r3, r3
 800385e:	3b02      	subs	r3, #2
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	d81f      	bhi.n	80038b4 <HAL_SPI_TransmitReceive+0x526>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003882:	605a      	str	r2, [r3, #4]
 8003884:	e016      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x526>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f103 020c 	add.w	r2, r3, #12
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	7812      	ldrb	r2, [r2, #0]
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038b4:	2301      	movs	r3, #1
 80038b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038b8:	f7fe ff1e 	bl	80026f8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d803      	bhi.n	80038d0 <HAL_SPI_TransmitReceive+0x542>
 80038c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038ce:	d102      	bne.n	80038d6 <HAL_SPI_TransmitReceive+0x548>
 80038d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d107      	bne.n	80038e6 <HAL_SPI_TransmitReceive+0x558>
      {
        errorcode = HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80038e4:	e087      	b.n	80039f6 <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f47f af33 	bne.w	8003758 <HAL_SPI_TransmitReceive+0x3ca>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f47f af2c 	bne.w	8003758 <HAL_SPI_TransmitReceive+0x3ca>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003908:	d146      	bne.n	8003998 <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800390a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003910:	2201      	movs	r2, #1
 8003912:	2101      	movs	r1, #1
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 f879 	bl	8003a0c <SPI_WaitFlagStateUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d009      	beq.n	8003934 <HAL_SPI_TransmitReceive+0x5a6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003924:	f043 0202 	orr.w	r2, r3, #2
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      goto error;
 8003932:	e060      	b.n	80039f6 <HAL_SPI_TransmitReceive+0x668>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800393c:	d105      	bne.n	800394a <HAL_SPI_TransmitReceive+0x5bc>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	e026      	b.n	8003998 <HAL_SPI_TransmitReceive+0x60a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	330c      	adds	r3, #12
 8003950:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800395a:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003960:	2b02      	cmp	r3, #2
 8003962:	d119      	bne.n	8003998 <HAL_SPI_TransmitReceive+0x60a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800396a:	2201      	movs	r2, #1
 800396c:	2101      	movs	r1, #1
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f84c 	bl	8003a0c <SPI_WaitFlagStateUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_SPI_TransmitReceive+0x600>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800397e:	f043 0202 	orr.w	r2, r3, #2
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	661a      	str	r2, [r3, #96]	@ 0x60
          errorcode = HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          goto error;
 800398c:	e033      	b.n	80039f6 <HAL_SPI_TransmitReceive+0x668>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8003996:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b10      	cmp	r3, #16
 80039a4:	d10d      	bne.n	80039c2 <HAL_SPI_TransmitReceive+0x634>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039aa:	f043 0202 	orr.w	r2, r3, #2
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80039ba:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039c4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f93e 	bl	8003c48 <SPI_EndRxTxTransaction>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_SPI_TransmitReceive+0x650>
  {
    errorcode = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_SPI_TransmitReceive+0x660>
  {
    errorcode = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80039ec:	e003      	b.n	80039f6 <HAL_SPI_TransmitReceive+0x668>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80039fe:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3740      	adds	r7, #64	@ 0x40
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a1c:	f7fe fe6c 	bl	80026f8 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	4413      	add	r3, r2
 8003a2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a2c:	f7fe fe64 	bl	80026f8 <HAL_GetTick>
 8003a30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a32:	4b39      	ldr	r3, [pc, #228]	@ (8003b18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	015b      	lsls	r3, r3, #5
 8003a38:	0d1b      	lsrs	r3, r3, #20
 8003a3a:	69fa      	ldr	r2, [r7, #28]
 8003a3c:	fb02 f303 	mul.w	r3, r2, r3
 8003a40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a42:	e054      	b.n	8003aee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a4a:	d050      	beq.n	8003aee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a4c:	f7fe fe54 	bl	80026f8 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d902      	bls.n	8003a62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d13d      	bne.n	8003ade <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a7a:	d111      	bne.n	8003aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a84:	d004      	beq.n	8003a90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a8e:	d107      	bne.n	8003aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aa8:	d10f      	bne.n	8003aca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ac8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e017      	b.n	8003b0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4013      	ands	r3, r2
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	bf0c      	ite	eq
 8003afe:	2301      	moveq	r3, #1
 8003b00:	2300      	movne	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d19b      	bne.n	8003a44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3720      	adds	r7, #32
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20000030 	.word	0x20000030

08003b1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08a      	sub	sp, #40	@ 0x28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b2e:	f7fe fde3 	bl	80026f8 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003b3e:	f7fe fddb 	bl	80026f8 <HAL_GetTick>
 8003b42:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	330c      	adds	r3, #12
 8003b4a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b4c:	4b3d      	ldr	r3, [pc, #244]	@ (8003c44 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	00da      	lsls	r2, r3, #3
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	0d1b      	lsrs	r3, r3, #20
 8003b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b64:	e060      	b.n	8003c28 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003b6c:	d107      	bne.n	8003b7e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d104      	bne.n	8003b7e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b7c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b84:	d050      	beq.n	8003c28 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b86:	f7fe fdb7 	bl	80026f8 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d902      	bls.n	8003b9c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d13d      	bne.n	8003c18 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003baa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bb4:	d111      	bne.n	8003bda <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bbe:	d004      	beq.n	8003bca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bc8:	d107      	bne.n	8003bda <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bd8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003be2:	d10f      	bne.n	8003c04 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e010      	b.n	8003c3a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	3b01      	subs	r3, #1
 8003c26:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4013      	ands	r3, r2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d196      	bne.n	8003b66 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3728      	adds	r7, #40	@ 0x28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000030 	.word	0x20000030

08003c48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f7ff ff5b 	bl	8003b1c <SPI_WaitFifoStateUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d007      	beq.n	8003c7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c70:	f043 0220 	orr.w	r2, r3, #32
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e027      	b.n	8003ccc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2200      	movs	r2, #0
 8003c84:	2180      	movs	r1, #128	@ 0x80
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f7ff fec0 	bl	8003a0c <SPI_WaitFlagStateUntilTimeout>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c96:	f043 0220 	orr.w	r2, r3, #32
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e014      	b.n	8003ccc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f7ff ff34 	bl	8003b1c <SPI_WaitFifoStateUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d007      	beq.n	8003cca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cbe:	f043 0220 	orr.w	r2, r3, #32
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e000      	b.n	8003ccc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <LL_PWR_SetRadioBusyTrigger>:
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003cdc:	4b06      	ldr	r3, [pc, #24]	@ (8003cf8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003ce4:	4904      	ldr	r1, [pc, #16]	@ (8003cf8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	608b      	str	r3, [r1, #8]
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	58000400 	.word	0x58000400

08003cfc <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003d00:	4b05      	ldr	r3, [pc, #20]	@ (8003d18 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d06:	4a04      	ldr	r2, [pc, #16]	@ (8003d18 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr
 8003d18:	58000400 	.word	0x58000400

08003d1c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003d20:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d26:	4a04      	ldr	r2, [pc, #16]	@ (8003d38 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003d28:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr
 8003d38:	58000400 	.word	0x58000400

08003d3c <LL_PWR_ClearFlag_RFBUSY>:
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003d40:	4b03      	ldr	r3, [pc, #12]	@ (8003d50 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003d42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d46:	619a      	str	r2, [r3, #24]
}
 8003d48:	bf00      	nop
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr
 8003d50:	58000400 	.word	0x58000400

08003d54 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003d58:	4b06      	ldr	r3, [pc, #24]	@ (8003d74 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d101      	bne.n	8003d68 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	58000400 	.word	0x58000400

08003d78 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003d7c:	4b06      	ldr	r3, [pc, #24]	@ (8003d98 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d101      	bne.n	8003d8c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	58000400 	.word	0x58000400

08003d9c <LL_RCC_RF_DisableReset>:
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003da8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003dac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003db0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003db4:	bf00      	nop
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <LL_RCC_IsRFUnderReset>:
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003dc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dd0:	d101      	bne.n	8003dd6 <LL_RCC_IsRFUnderReset+0x1a>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <LL_RCC_IsRFUnderReset+0x1c>
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr

08003de0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003de8:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <LL_EXTI_EnableIT_32_63+0x24>)
 8003dea:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003dee:	4905      	ldr	r1, [pc, #20]	@ (8003e04 <LL_EXTI_EnableIT_32_63+0x24>)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	58000800 	.word	0x58000800

08003e08 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d103      	bne.n	8003e1e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	73fb      	strb	r3, [r7, #15]
    return status;
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	e052      	b.n	8003ec4 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	799b      	ldrb	r3, [r3, #6]
 8003e26:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8003e28:	7bbb      	ldrb	r3, [r7, #14]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_SUBGHZ_Init+0x2c>
 8003e2e:	7bbb      	ldrb	r3, [r7, #14]
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d109      	bne.n	8003e48 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fe f878 	bl	8001f30 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003e40:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003e44:	f7ff ffcc 	bl	8003de0 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003e48:	7bbb      	ldrb	r3, [r7, #14]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d126      	bne.n	8003e9c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8003e54:	f7ff ffa2 	bl	8003d9c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003e58:	4b1c      	ldr	r3, [pc, #112]	@ (8003ecc <HAL_SUBGHZ_Init+0xc4>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	0cdb      	lsrs	r3, r3, #19
 8003e66:	2264      	movs	r2, #100	@ 0x64
 8003e68:	fb02 f303 	mul.w	r3, r2, r3
 8003e6c:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d105      	bne.n	8003e80 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	609a      	str	r2, [r3, #8]
        break;
 8003e7e:	e007      	b.n	8003e90 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003e86:	f7ff ff99 	bl	8003dbc <LL_RCC_IsRFUnderReset>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1ee      	bne.n	8003e6e <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003e90:	f7ff ff34 	bl	8003cfc <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003e94:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003e98:	f7ff ff1c 	bl	8003cd4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003e9c:	f7ff ff4e 	bl	8003d3c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10a      	bne.n	8003ebc <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fada 	bl	8004464 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	719a      	strb	r2, [r3, #6]

  return status;
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20000030 	.word	0x20000030

08003ed0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	461a      	mov	r2, r3
 8003edc:	460b      	mov	r3, r1
 8003ede:	817b      	strh	r3, [r7, #10]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	799b      	ldrb	r3, [r3, #6]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d14a      	bne.n	8003f84 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	795b      	ldrb	r3, [r3, #5]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e045      	b.n	8003f86 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2202      	movs	r2, #2
 8003f04:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 fb7a 	bl	8004600 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003f0c:	f7ff ff06 	bl	8003d1c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003f10:	210d      	movs	r1, #13
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fac6 	bl	80044a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003f18:	897b      	ldrh	r3, [r7, #10]
 8003f1a:	0a1b      	lsrs	r3, r3, #8
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	4619      	mov	r1, r3
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 fabe 	bl	80044a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003f28:	897b      	ldrh	r3, [r7, #10]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 fab8 	bl	80044a4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003f34:	2300      	movs	r3, #0
 8003f36:	82bb      	strh	r3, [r7, #20]
 8003f38:	e00a      	b.n	8003f50 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003f3a:	8abb      	ldrh	r3, [r7, #20]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	4413      	add	r3, r2
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	4619      	mov	r1, r3
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 faad 	bl	80044a4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003f4a:	8abb      	ldrh	r3, [r7, #20]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	82bb      	strh	r3, [r7, #20]
 8003f50:	8aba      	ldrh	r2, [r7, #20]
 8003f52:	893b      	ldrh	r3, [r7, #8]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d3f0      	bcc.n	8003f3a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003f58:	f7ff fed0 	bl	8003cfc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 fb73 	bl	8004648 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	75fb      	strb	r3, [r7, #23]
 8003f6e:	e001      	b.n	8003f74 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	715a      	strb	r2, [r3, #5]

    return status;
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
 8003f82:	e000      	b.n	8003f86 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003f84:	2302      	movs	r3, #2
  }
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b088      	sub	sp, #32
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	817b      	strh	r3, [r7, #10]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	799b      	ldrb	r3, [r3, #6]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d14a      	bne.n	8004046 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	795b      	ldrb	r3, [r3, #5]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e045      	b.n	8004048 <HAL_SUBGHZ_ReadRegisters+0xba>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 fb1c 	bl	8004600 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003fc8:	f7ff fea8 	bl	8003d1c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003fcc:	211d      	movs	r1, #29
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fa68 	bl	80044a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003fd4:	897b      	ldrh	r3, [r7, #10]
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	4619      	mov	r1, r3
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 fa60 	bl	80044a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003fe4:	897b      	ldrh	r3, [r7, #10]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	4619      	mov	r1, r3
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 fa5a 	bl	80044a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 fa56 	bl	80044a4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	82fb      	strh	r3, [r7, #22]
 8003ffc:	e009      	b.n	8004012 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003ffe:	69b9      	ldr	r1, [r7, #24]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 faa5 	bl	8004550 <SUBGHZSPI_Receive>
      pData++;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	3301      	adds	r3, #1
 800400a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800400c:	8afb      	ldrh	r3, [r7, #22]
 800400e:	3301      	adds	r3, #1
 8004010:	82fb      	strh	r3, [r7, #22]
 8004012:	8afa      	ldrh	r2, [r7, #22]
 8004014:	893b      	ldrh	r3, [r7, #8]
 8004016:	429a      	cmp	r2, r3
 8004018:	d3f1      	bcc.n	8003ffe <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800401a:	f7ff fe6f 	bl	8003cfc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 fb12 	bl	8004648 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e001      	b.n	8004036 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2201      	movs	r2, #1
 800403a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	715a      	strb	r2, [r3, #5]

    return status;
 8004042:	7ffb      	ldrb	r3, [r7, #31]
 8004044:	e000      	b.n	8004048 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004046:	2302      	movs	r3, #2
  }
}
 8004048:	4618      	mov	r0, r3
 800404a:	3720      	adds	r7, #32
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_SUBGHZ_WriteRegister>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegister(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t Value)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	807b      	strh	r3, [r7, #2]
 800405c:	4613      	mov	r3, r2
 800405e:	707b      	strb	r3, [r7, #1]
  return (HAL_SUBGHZ_WriteRegisters(hsubghz, Address, &Value, 1U));
 8004060:	1c7a      	adds	r2, r7, #1
 8004062:	8879      	ldrh	r1, [r7, #2]
 8004064:	2301      	movs	r3, #1
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff ff32 	bl	8003ed0 <HAL_SUBGHZ_WriteRegisters>
 800406c:	4603      	mov	r3, r0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_SUBGHZ_ReadRegister>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegister(SUBGHZ_HandleTypeDef *hsubghz,
                                          uint16_t Address,
                                          uint8_t *pValue)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	460b      	mov	r3, r1
 8004080:	607a      	str	r2, [r7, #4]
 8004082:	817b      	strh	r3, [r7, #10]
  return (HAL_SUBGHZ_ReadRegisters(hsubghz, Address, pValue, 1U));
 8004084:	8979      	ldrh	r1, [r7, #10]
 8004086:	2301      	movs	r3, #1
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f7ff ff7f 	bl	8003f8e <HAL_SUBGHZ_ReadRegisters>
 8004090:	4603      	mov	r3, r0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b086      	sub	sp, #24
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	461a      	mov	r2, r3
 80040a6:	460b      	mov	r3, r1
 80040a8:	72fb      	strb	r3, [r7, #11]
 80040aa:	4613      	mov	r3, r2
 80040ac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	799b      	ldrb	r3, [r3, #6]
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d14a      	bne.n	800414e <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	795b      	ldrb	r3, [r3, #5]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e045      	b.n	8004150 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 fa98 	bl	8004600 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80040d0:	7afb      	ldrb	r3, [r7, #11]
 80040d2:	2b84      	cmp	r3, #132	@ 0x84
 80040d4:	d002      	beq.n	80040dc <HAL_SUBGHZ_ExecSetCmd+0x42>
 80040d6:	7afb      	ldrb	r3, [r7, #11]
 80040d8:	2b94      	cmp	r3, #148	@ 0x94
 80040da:	d103      	bne.n	80040e4 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	711a      	strb	r2, [r3, #4]
 80040e2:	e002      	b.n	80040ea <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80040ea:	f7ff fe17 	bl	8003d1c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80040ee:	7afb      	ldrb	r3, [r7, #11]
 80040f0:	4619      	mov	r1, r3
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f9d6 	bl	80044a4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80040f8:	2300      	movs	r3, #0
 80040fa:	82bb      	strh	r3, [r7, #20]
 80040fc:	e00a      	b.n	8004114 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80040fe:	8abb      	ldrh	r3, [r7, #20]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	4413      	add	r3, r2
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	4619      	mov	r1, r3
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f9cb 	bl	80044a4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800410e:	8abb      	ldrh	r3, [r7, #20]
 8004110:	3301      	adds	r3, #1
 8004112:	82bb      	strh	r3, [r7, #20]
 8004114:	8aba      	ldrh	r2, [r7, #20]
 8004116:	893b      	ldrh	r3, [r7, #8]
 8004118:	429a      	cmp	r2, r3
 800411a:	d3f0      	bcc.n	80040fe <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800411c:	f7ff fdee 	bl	8003cfc <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8004120:	7afb      	ldrb	r3, [r7, #11]
 8004122:	2b84      	cmp	r3, #132	@ 0x84
 8004124:	d002      	beq.n	800412c <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fa8e 	bl	8004648 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	75fb      	strb	r3, [r7, #23]
 8004138:	e001      	b.n	800413e <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	715a      	strb	r2, [r3, #5]

    return status;
 800414a:	7dfb      	ldrb	r3, [r7, #23]
 800414c:	e000      	b.n	8004150 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800414e:	2302      	movs	r3, #2
  }
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	607a      	str	r2, [r7, #4]
 8004162:	461a      	mov	r2, r3
 8004164:	460b      	mov	r3, r1
 8004166:	72fb      	strb	r3, [r7, #11]
 8004168:	4613      	mov	r3, r2
 800416a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	799b      	ldrb	r3, [r3, #6]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b01      	cmp	r3, #1
 8004178:	d13d      	bne.n	80041f6 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	795b      	ldrb	r3, [r3, #5]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004182:	2302      	movs	r3, #2
 8004184:	e038      	b.n	80041f8 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 fa37 	bl	8004600 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004192:	f7ff fdc3 	bl	8003d1c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004196:	7afb      	ldrb	r3, [r7, #11]
 8004198:	4619      	mov	r1, r3
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f982 	bl	80044a4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80041a0:	2100      	movs	r1, #0
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f97e 	bl	80044a4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80041a8:	2300      	movs	r3, #0
 80041aa:	82fb      	strh	r3, [r7, #22]
 80041ac:	e009      	b.n	80041c2 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80041ae:	69b9      	ldr	r1, [r7, #24]
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f9cd 	bl	8004550 <SUBGHZSPI_Receive>
      pData++;
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	3301      	adds	r3, #1
 80041ba:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80041bc:	8afb      	ldrh	r3, [r7, #22]
 80041be:	3301      	adds	r3, #1
 80041c0:	82fb      	strh	r3, [r7, #22]
 80041c2:	8afa      	ldrh	r2, [r7, #22]
 80041c4:	893b      	ldrh	r3, [r7, #8]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d3f1      	bcc.n	80041ae <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80041ca:	f7ff fd97 	bl	8003cfc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 fa3a 	bl	8004648 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	77fb      	strb	r3, [r7, #31]
 80041e0:	e001      	b.n	80041e6 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	715a      	strb	r2, [r3, #5]

    return status;
 80041f2:	7ffb      	ldrb	r3, [r7, #31]
 80041f4:	e000      	b.n	80041f8 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80041f6:	2302      	movs	r3, #2
  }
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	461a      	mov	r2, r3
 800420c:	460b      	mov	r3, r1
 800420e:	72fb      	strb	r3, [r7, #11]
 8004210:	4613      	mov	r3, r2
 8004212:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	799b      	ldrb	r3, [r3, #6]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b01      	cmp	r3, #1
 800421c:	d13e      	bne.n	800429c <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	795b      	ldrb	r3, [r3, #5]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004226:	2302      	movs	r3, #2
 8004228:	e039      	b.n	800429e <HAL_SUBGHZ_WriteBuffer+0x9e>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f9e5 	bl	8004600 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004236:	f7ff fd71 	bl	8003d1c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800423a:	210e      	movs	r1, #14
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f931 	bl	80044a4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004242:	7afb      	ldrb	r3, [r7, #11]
 8004244:	4619      	mov	r1, r3
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f92c 	bl	80044a4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800424c:	2300      	movs	r3, #0
 800424e:	82bb      	strh	r3, [r7, #20]
 8004250:	e00a      	b.n	8004268 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004252:	8abb      	ldrh	r3, [r7, #20]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	4413      	add	r3, r2
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	4619      	mov	r1, r3
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 f921 	bl	80044a4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004262:	8abb      	ldrh	r3, [r7, #20]
 8004264:	3301      	adds	r3, #1
 8004266:	82bb      	strh	r3, [r7, #20]
 8004268:	8aba      	ldrh	r2, [r7, #20]
 800426a:	893b      	ldrh	r3, [r7, #8]
 800426c:	429a      	cmp	r2, r3
 800426e:	d3f0      	bcc.n	8004252 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004270:	f7ff fd44 	bl	8003cfc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f9e7 	bl	8004648 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	75fb      	strb	r3, [r7, #23]
 8004286:	e001      	b.n	800428c <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2201      	movs	r2, #1
 8004290:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	715a      	strb	r2, [r3, #5]

    return status;
 8004298:	7dfb      	ldrb	r3, [r7, #23]
 800429a:	e000      	b.n	800429e <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800429c:	2302      	movs	r3, #2
  }
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b084      	sub	sp, #16
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80042ae:	2300      	movs	r3, #0
 80042b0:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80042b2:	f107 020c 	add.w	r2, r7, #12
 80042b6:	2302      	movs	r3, #2
 80042b8:	2112      	movs	r1, #18
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff ff4c 	bl	8004158 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80042c0:	7b3b      	ldrb	r3, [r7, #12]
 80042c2:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80042c4:	89fb      	ldrh	r3, [r7, #14]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	b21a      	sxth	r2, r3
 80042ca:	7b7b      	ldrb	r3, [r7, #13]
 80042cc:	b21b      	sxth	r3, r3
 80042ce:	4313      	orrs	r3, r2
 80042d0:	b21b      	sxth	r3, r3
 80042d2:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80042d4:	f107 020c 	add.w	r2, r7, #12
 80042d8:	2302      	movs	r3, #2
 80042da:	2102      	movs	r1, #2
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff fedc 	bl	800409a <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80042e2:	89fb      	ldrh	r3, [r7, #14]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f85c 	bl	80043aa <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 80042f2:	89fb      	ldrh	r3, [r7, #14]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d007      	beq.n	800430c <HAL_SUBGHZ_IRQHandler+0x66>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 80042fc:	89fb      	ldrh	r3, [r7, #14]
 80042fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8004302:	2b00      	cmp	r3, #0
 8004304:	d102      	bne.n	800430c <HAL_SUBGHZ_IRQHandler+0x66>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f858 	bl	80043bc <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800430c:	89fb      	ldrh	r3, [r7, #14]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_SUBGHZ_IRQHandler+0x76>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f859 	bl	80043ce <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800431c:	89fb      	ldrh	r3, [r7, #14]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f85a 	bl	80043e0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800432c:	89fb      	ldrh	r3, [r7, #14]
 800432e:	f003 0310 	and.w	r3, r3, #16
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f85b 	bl	80043f2 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800433c:	89fb      	ldrh	r3, [r7, #14]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f85c 	bl	8004404 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800434c:	89fb      	ldrh	r3, [r7, #14]
 800434e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <HAL_SUBGHZ_IRQHandler+0xb6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f85d 	bl	8004416 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800435c:	89fb      	ldrh	r3, [r7, #14]
 800435e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00d      	beq.n	8004382 <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004366:	89fb      	ldrh	r3, [r7, #14]
 8004368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d004      	beq.n	800437a <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004370:	2101      	movs	r1, #1
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f858 	bl	8004428 <HAL_SUBGHZ_CADStatusCallback>
 8004378:	e003      	b.n	8004382 <HAL_SUBGHZ_IRQHandler+0xdc>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800437a:	2100      	movs	r1, #0
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f853 	bl	8004428 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004382:	89fb      	ldrh	r3, [r7, #14]
 8004384:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <HAL_SUBGHZ_IRQHandler+0xec>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f856 	bl	800443e <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004392:	89fb      	ldrh	r3, [r7, #14]
 8004394:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <HAL_SUBGHZ_IRQHandler+0xfc>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f857 	bl	8004450 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80043a2:	bf00      	nop
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_SUBGHZ_TxCpltCallback>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for SUBGHZ module.
  * @retval None
  */
__weak void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  UNUSED(hsubghz);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SUBGHZ_TxCpltCallback should be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr

080043bc <HAL_SUBGHZ_RxCpltCallback>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for SUBGHZ module.
  * @retval None
  */
__weak void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsubghz);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SUBGHZ_RxCpltCallback should be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr

080043ce <HAL_SUBGHZ_PreambleDetectedCallback>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for SUBGHZ module.
  * @retval None
  */
__weak void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  UNUSED(hsubghz);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SUBGHZ_PreambleDetectedCallback should be implemented in the user file
   */
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr

080043e0 <HAL_SUBGHZ_SyncWordValidCallback>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for SUBGHZ module.
  * @retval None
  */
__weak void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsubghz);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SUBGHZ_SyncWordValidCallback should be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr

080043f2 <HAL_SUBGHZ_HeaderValidCallback>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for SUBGHZ module.
  * @retval None
  */
__weak void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  UNUSED(hsubghz);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SUBGHZ_HeaderValidCallback should be implemented in the user file
   */
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <HAL_SUBGHZ_HeaderErrorCallback>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for SUBGHZ module.
  * @retval None
  */
__weak void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(hsubghz);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SUBGHZ_HeaderErrorCallback should be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <HAL_SUBGHZ_CRCErrorCallback>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for SUBGHZ module.
  * @retval None
  */
__weak void HAL_SUBGHZ_CRCErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  UNUSED(hsubghz);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SUBGHZ_CRCErrorCallback should be implemented in the user file
   */
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <HAL_SUBGHZ_CADStatusCallback>:
  * @param  cadstatus reports whether activity is detected or not
  * @retval None
  */
__weak void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz,
                                         HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	70fb      	strb	r3, [r7, #3]

  UNUSED(cadstatus);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SUBGHZ_CADStatusCallback should be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr

0800443e <HAL_SUBGHZ_RxTxTimeoutCallback>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for SUBGHZ module.
  * @retval None
  */
__weak void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  UNUSED(hsubghz);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SUBGHZ_RxTxTimeoutCallback should be implemented in the user file
   */
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr

08004450 <HAL_SUBGHZ_LrFhssHopCallback>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for SUBGHZ module.
  * @retval None
  */
__weak void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(hsubghz);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SUBGHZ_LrFhssHopCallback should be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr
	...

08004464 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800446c:	4b0c      	ldr	r3, [pc, #48]	@ (80044a0 <SUBGHZSPI_Init+0x3c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a0b      	ldr	r2, [pc, #44]	@ (80044a0 <SUBGHZSPI_Init+0x3c>)
 8004472:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004476:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004478:	4a09      	ldr	r2, [pc, #36]	@ (80044a0 <SUBGHZSPI_Init+0x3c>)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8004480:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004482:	4b07      	ldr	r3, [pc, #28]	@ (80044a0 <SUBGHZSPI_Init+0x3c>)
 8004484:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8004488:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800448a:	4b05      	ldr	r3, [pc, #20]	@ (80044a0 <SUBGHZSPI_Init+0x3c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a04      	ldr	r2, [pc, #16]	@ (80044a0 <SUBGHZSPI_Init+0x3c>)
 8004490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004494:	6013      	str	r3, [r2, #0]
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr
 80044a0:	58010000 	.word	0x58010000

080044a4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80044b4:	4b23      	ldr	r3, [pc, #140]	@ (8004544 <SUBGHZSPI_Transmit+0xa0>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	4613      	mov	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	0cdb      	lsrs	r3, r3, #19
 80044c2:	2264      	movs	r2, #100	@ 0x64
 80044c4:	fb02 f303 	mul.w	r3, r2, r3
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d105      	bne.n	80044dc <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	609a      	str	r2, [r3, #8]
      break;
 80044da:	e008      	b.n	80044ee <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3b01      	subs	r3, #1
 80044e0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80044e2:	4b19      	ldr	r3, [pc, #100]	@ (8004548 <SUBGHZSPI_Transmit+0xa4>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d1ed      	bne.n	80044ca <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80044ee:	4b17      	ldr	r3, [pc, #92]	@ (800454c <SUBGHZSPI_Transmit+0xa8>)
 80044f0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	78fa      	ldrb	r2, [r7, #3]
 80044f6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80044f8:	4b12      	ldr	r3, [pc, #72]	@ (8004544 <SUBGHZSPI_Transmit+0xa0>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4613      	mov	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	0cdb      	lsrs	r3, r3, #19
 8004506:	2264      	movs	r2, #100	@ 0x64
 8004508:	fb02 f303 	mul.w	r3, r2, r3
 800450c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d105      	bne.n	8004520 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	609a      	str	r2, [r3, #8]
      break;
 800451e:	e008      	b.n	8004532 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	3b01      	subs	r3, #1
 8004524:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004526:	4b08      	ldr	r3, [pc, #32]	@ (8004548 <SUBGHZSPI_Transmit+0xa4>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b01      	cmp	r3, #1
 8004530:	d1ed      	bne.n	800450e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004532:	4b05      	ldr	r3, [pc, #20]	@ (8004548 <SUBGHZSPI_Transmit+0xa4>)
 8004534:	68db      	ldr	r3, [r3, #12]

  return status;
 8004536:	7dfb      	ldrb	r3, [r7, #23]
}
 8004538:	4618      	mov	r0, r3
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	20000030 	.word	0x20000030
 8004548:	58010000 	.word	0x58010000
 800454c:	5801000c 	.word	0x5801000c

08004550 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800455e:	4b25      	ldr	r3, [pc, #148]	@ (80045f4 <SUBGHZSPI_Receive+0xa4>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4613      	mov	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	1a9b      	subs	r3, r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	0cdb      	lsrs	r3, r3, #19
 800456c:	2264      	movs	r2, #100	@ 0x64
 800456e:	fb02 f303 	mul.w	r3, r2, r3
 8004572:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d105      	bne.n	8004586 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	609a      	str	r2, [r3, #8]
      break;
 8004584:	e008      	b.n	8004598 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3b01      	subs	r3, #1
 800458a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800458c:	4b1a      	ldr	r3, [pc, #104]	@ (80045f8 <SUBGHZSPI_Receive+0xa8>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b02      	cmp	r3, #2
 8004596:	d1ed      	bne.n	8004574 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004598:	4b18      	ldr	r3, [pc, #96]	@ (80045fc <SUBGHZSPI_Receive+0xac>)
 800459a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	22ff      	movs	r2, #255	@ 0xff
 80045a0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80045a2:	4b14      	ldr	r3, [pc, #80]	@ (80045f4 <SUBGHZSPI_Receive+0xa4>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	4613      	mov	r3, r2
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	0cdb      	lsrs	r3, r3, #19
 80045b0:	2264      	movs	r2, #100	@ 0x64
 80045b2:	fb02 f303 	mul.w	r3, r2, r3
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d105      	bne.n	80045ca <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	609a      	str	r2, [r3, #8]
      break;
 80045c8:	e008      	b.n	80045dc <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80045d0:	4b09      	ldr	r3, [pc, #36]	@ (80045f8 <SUBGHZSPI_Receive+0xa8>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d1ed      	bne.n	80045b8 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80045dc:	4b06      	ldr	r3, [pc, #24]	@ (80045f8 <SUBGHZSPI_Receive+0xa8>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	701a      	strb	r2, [r3, #0]

  return status;
 80045e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	20000030 	.word	0x20000030
 80045f8:	58010000 	.word	0x58010000
 80045fc:	5801000c 	.word	0x5801000c

08004600 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	791b      	ldrb	r3, [r3, #4]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d111      	bne.n	8004634 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004610:	4b0c      	ldr	r3, [pc, #48]	@ (8004644 <SUBGHZ_CheckDeviceReady+0x44>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	4613      	mov	r3, r2
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	4413      	add	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	0c1b      	lsrs	r3, r3, #16
 800461e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004620:	f7ff fb7c 	bl	8003d1c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3b01      	subs	r3, #1
 8004628:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1f9      	bne.n	8004624 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004630:	f7ff fb64 	bl	8003cfc <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f807 	bl	8004648 <SUBGHZ_WaitOnBusy>
 800463a:	4603      	mov	r3, r0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	20000030 	.word	0x20000030

08004648 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004654:	4b12      	ldr	r3, [pc, #72]	@ (80046a0 <SUBGHZ_WaitOnBusy+0x58>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	4613      	mov	r3, r2
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	4413      	add	r3, r2
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	0d1b      	lsrs	r3, r3, #20
 8004662:	2264      	movs	r2, #100	@ 0x64
 8004664:	fb02 f303 	mul.w	r3, r2, r3
 8004668:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800466a:	f7ff fb85 	bl	8003d78 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800466e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d105      	bne.n	8004682 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2202      	movs	r2, #2
 800467e:	609a      	str	r2, [r3, #8]
      break;
 8004680:	e009      	b.n	8004696 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3b01      	subs	r3, #1
 8004686:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004688:	f7ff fb64 	bl	8003d54 <LL_PWR_IsActiveFlag_RFBUSYS>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4013      	ands	r3, r2
 8004692:	2b01      	cmp	r3, #1
 8004694:	d0e9      	beq.n	800466a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004696:	7dfb      	ldrb	r3, [r7, #23]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	20000030 	.word	0x20000030

080046a4 <LL_ADC_REG_GetSequencerConfigurable>:
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr

080046be <LL_ADC_REG_SetSequencerLength>:
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, SequencerNbRanks);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	bc80      	pop	{r7}
 80046dc:	4770      	bx	lr

080046de <LL_ADC_IsEnabled>:
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <LL_ADC_IsEnabled+0x18>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <LL_ADC_IsEnabled+0x1a>
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr

08004702 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *pADC_InitStruct)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b084      	sub	sp, #16
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800470c:	2301      	movs	r3, #1
 800470e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(pADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(pADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff ffe4 	bl	80046de <LL_ADC_IsEnabled>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d11a      	bne.n	8004752 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004724:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	6851      	ldr	r1, [r2, #4]
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	6892      	ldr	r2, [r2, #8]
 8004730:	4311      	orrs	r1, r2
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	68d2      	ldr	r2, [r2, #12]
 8004736:	430a      	orrs	r2, r1
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60da      	str	r2, [r3, #12]
               pADC_InitStruct->Resolution
               | pADC_InitStruct->DataAlignment
               | pADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	611a      	str	r2, [r3, #16]
 8004750:	e001      	b.n	8004756 <LL_ADC_Init+0x54>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004752:	2300      	movs	r3, #0
 8004754:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004756:	7bfb      	ldrb	r3, [r7, #15]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *pADC_RegInitStruct)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800476a:	2301      	movs	r3, #1
 800476c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_TRIG_SOURCE(pADC_RegInitStruct->TriggerSource));
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(pADC_RegInitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(pADC_RegInitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(pADC_RegInitStruct->Overrun));

  if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff ff98 	bl	80046a4 <LL_ADC_REG_GetSequencerConfigurable>
  {
    assert_param(IS_LL_ADC_REG_SEQ_SCAN_LENGTH(pADC_RegInitStruct->SequencerLength));
  }

  if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff ff95 	bl	80046a4 <LL_ADC_REG_GetSequencerConfigurable>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
                 || (pADC_RegInitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  }

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff ffad 	bl	80046de <LL_ADC_IsEnabled>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d13e      	bne.n	8004808 <LL_ADC_REG_Init+0xa8>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff ff8a 	bl	80046a4 <LL_ADC_REG_GetSequencerConfigurable>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <LL_ADC_REG_Init+0x3e>
        || (pADC_RegInitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2bf0      	cmp	r3, #240	@ 0xf0
 800479c:	d015      	beq.n	80047ca <LL_ADC_REG_Init+0x6a>
       )
    {
      /* Case of sequencer mode fixed
         or sequencer length >= 2 ranks with sequencer mode fully configurable:
         discontinuous mode configured */
      MODIFY_REG(ADCx->CFGR1,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004818 <LL_ADC_REG_Init+0xb8>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	6811      	ldr	r1, [r2, #0]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	6892      	ldr	r2, [r2, #8]
 80047ae:	4311      	orrs	r1, r2
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	68d2      	ldr	r2, [r2, #12]
 80047b4:	4311      	orrs	r1, r2
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	6912      	ldr	r2, [r2, #16]
 80047ba:	4311      	orrs	r1, r2
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	6952      	ldr	r2, [r2, #20]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	60da      	str	r2, [r3, #12]
 80047c8:	e011      	b.n	80047ee <LL_ADC_REG_Init+0x8e>
    else
    {
      /* Case of sequencer mode fully configurable
         and sequencer length 1 rank (sequencer disabled):
         discontinuous mode discarded (fixed to disable) */
      MODIFY_REG(ADCx->CFGR1,
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	4b12      	ldr	r3, [pc, #72]	@ (8004818 <LL_ADC_REG_Init+0xb8>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	6811      	ldr	r1, [r2, #0]
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	68d2      	ldr	r2, [r2, #12]
 80047da:	4311      	orrs	r1, r2
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	6912      	ldr	r2, [r2, #16]
 80047e0:	4311      	orrs	r1, r2
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	6952      	ldr	r2, [r2, #20]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	60da      	str	r2, [r3, #12]
                 | pADC_RegInitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length */
    if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff ff58 	bl	80046a4 <LL_ADC_REG_GetSequencerConfigurable>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d008      	beq.n	800480c <LL_ADC_REG_Init+0xac>
    {
      LL_ADC_REG_SetSequencerLength(ADCx, pADC_RegInitStruct->SequencerLength);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	4619      	mov	r1, r3
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff ff5c 	bl	80046be <LL_ADC_REG_SetSequencerLength>
 8004806:	e001      	b.n	800480c <LL_ADC_REG_Init+0xac>
    }
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004808:	2300      	movs	r3, #0
 800480a:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800480c:	7bfb      	ldrb	r3, [r7, #15]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	fffec23c 	.word	0xfffec23c

0800481c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800481c:	b480      	push	{r7}
 800481e:	b08b      	sub	sp, #44	@ 0x2c
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
#else
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	fa93 f3a3 	rbit	r3, r3
 8004836:	613b      	str	r3, [r7, #16]
  return result;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8004842:	2320      	movs	r3, #32
 8004844:	e003      	b.n	800484e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	fab3 f383 	clz	r3, r3
 800484c:	b2db      	uxtb	r3, r3
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	2103      	movs	r1, #3
 8004852:	fa01 f303 	lsl.w	r3, r1, r3
 8004856:	43db      	mvns	r3, r3
 8004858:	401a      	ands	r2, r3
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	fa93 f3a3 	rbit	r3, r3
 8004864:	61fb      	str	r3, [r7, #28]
  return result;
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004870:	2320      	movs	r3, #32
 8004872:	e003      	b.n	800487c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8004874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004876:	fab3 f383 	clz	r3, r3
 800487a:	b2db      	uxtb	r3, r3
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	fa01 f303 	lsl.w	r3, r1, r3
 8004884:	431a      	orrs	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	601a      	str	r2, [r3, #0]
#endif /* CORE_CM0PLUS */
}
 800488a:	bf00      	nop
 800488c:	372c      	adds	r7, #44	@ 0x2c
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr

08004894 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	43db      	mvns	r3, r3
 80048a8:	401a      	ands	r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	fb01 f303 	mul.w	r3, r1, r3
 80048b2:	431a      	orrs	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	605a      	str	r2, [r3, #4]
}
 80048b8:	bf00      	nop
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr

080048c2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b08b      	sub	sp, #44	@ 0x2c
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
#else
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	fa93 f3a3 	rbit	r3, r3
 80048dc:	613b      	str	r3, [r7, #16]
  return result;
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80048e8:	2320      	movs	r3, #32
 80048ea:	e003      	b.n	80048f4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	fab3 f383 	clz	r3, r3
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	2103      	movs	r1, #3
 80048f8:	fa01 f303 	lsl.w	r3, r1, r3
 80048fc:	43db      	mvns	r3, r3
 80048fe:	401a      	ands	r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	fa93 f3a3 	rbit	r3, r3
 800490a:	61fb      	str	r3, [r7, #28]
  return result;
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8004916:	2320      	movs	r3, #32
 8004918:	e003      	b.n	8004922 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800491a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491c:	fab3 f383 	clz	r3, r3
 8004920:	b2db      	uxtb	r3, r3
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	fa01 f303 	lsl.w	r3, r1, r3
 800492a:	431a      	orrs	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
#endif /* CORE_CM0PLUS */
}
 8004930:	bf00      	nop
 8004932:	372c      	adds	r7, #44	@ 0x2c
 8004934:	46bd      	mov	sp, r7
 8004936:	bc80      	pop	{r7}
 8004938:	4770      	bx	lr

0800493a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800493a:	b480      	push	{r7}
 800493c:	b08b      	sub	sp, #44	@ 0x2c
 800493e:	af00      	add	r7, sp, #0
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
#else
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	fa93 f3a3 	rbit	r3, r3
 8004954:	613b      	str	r3, [r7, #16]
  return result;
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004960:	2320      	movs	r3, #32
 8004962:	e003      	b.n	800496c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	fab3 f383 	clz	r3, r3
 800496a:	b2db      	uxtb	r3, r3
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	2103      	movs	r1, #3
 8004970:	fa01 f303 	lsl.w	r3, r1, r3
 8004974:	43db      	mvns	r3, r3
 8004976:	401a      	ands	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	fa93 f3a3 	rbit	r3, r3
 8004982:	61fb      	str	r3, [r7, #28]
  return result;
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800498e:	2320      	movs	r3, #32
 8004990:	e003      	b.n	800499a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004994:	fab3 f383 	clz	r3, r3
 8004998:	b2db      	uxtb	r3, r3
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	fa01 f303 	lsl.w	r3, r1, r3
 80049a2:	431a      	orrs	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	60da      	str	r2, [r3, #12]
#endif /* CORE_CM0PLUS */
}
 80049a8:	bf00      	nop
 80049aa:	372c      	adds	r7, #44	@ 0x2c
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr

080049b2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b08b      	sub	sp, #44	@ 0x2c
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
#else
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a1a      	ldr	r2, [r3, #32]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	fa93 f3a3 	rbit	r3, r3
 80049cc:	613b      	str	r3, [r7, #16]
  return result;
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80049d8:	2320      	movs	r3, #32
 80049da:	e003      	b.n	80049e4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	fab3 f383 	clz	r3, r3
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	210f      	movs	r1, #15
 80049e8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ec:	43db      	mvns	r3, r3
 80049ee:	401a      	ands	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	fa93 f3a3 	rbit	r3, r3
 80049fa:	61fb      	str	r3, [r7, #28]
  return result;
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8004a06:	2320      	movs	r3, #32
 8004a08:	e003      	b.n	8004a12 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	fab3 f383 	clz	r3, r3
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
#endif /* CORE_CM0PLUS */
}
 8004a20:	bf00      	nop
 8004a22:	372c      	adds	r7, #44	@ 0x2c
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bc80      	pop	{r7}
 8004a28:	4770      	bx	lr

08004a2a <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b08b      	sub	sp, #44	@ 0x2c
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
#else
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	0a1b      	lsrs	r3, r3, #8
 8004a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	fa93 f3a3 	rbit	r3, r3
 8004a46:	613b      	str	r3, [r7, #16]
  return result;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004a52:	2320      	movs	r3, #32
 8004a54:	e003      	b.n	8004a5e <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	fab3 f383 	clz	r3, r3
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	210f      	movs	r1, #15
 8004a62:	fa01 f303 	lsl.w	r3, r1, r3
 8004a66:	43db      	mvns	r3, r3
 8004a68:	401a      	ands	r2, r3
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	0a1b      	lsrs	r3, r3, #8
 8004a6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	fa93 f3a3 	rbit	r3, r3
 8004a76:	61fb      	str	r3, [r7, #28]
  return result;
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004a82:	2320      	movs	r3, #32
 8004a84:	e003      	b.n	8004a8e <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a88:	fab3 f383 	clz	r3, r3
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	6879      	ldr	r1, [r7, #4]
 8004a92:	fa01 f303 	lsl.w	r3, r1, r3
 8004a96:	431a      	orrs	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
#endif /* CORE_CM0PLUS */
}
 8004a9c:	bf00      	nop
 8004a9e:	372c      	adds	r7, #44	@ 0x2c
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr

08004aa6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b088      	sub	sp, #32
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	6039      	str	r1, [r7, #0]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
#if defined(CORE_CM0PLUS)
  pinpos = 0;
#else
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	fa93 f3a3 	rbit	r3, r3
 8004abc:	60fb      	str	r3, [r7, #12]
  return result;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <LL_GPIO_Init+0x26>
    return 32U;
 8004ac8:	2320      	movs	r3, #32
 8004aca:	e003      	b.n	8004ad4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	fab3 f383 	clz	r3, r3
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	61fb      	str	r3, [r7, #28]
#endif /* CORE_CM0PLUS */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004ad6:	e047      	b.n	8004b68 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	2101      	movs	r1, #1
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d039      	beq.n	8004b62 <LL_GPIO_Init+0xbc>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d003      	beq.n	8004afe <LL_GPIO_Init+0x58>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d10d      	bne.n	8004b1a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	461a      	mov	r2, r3
 8004b04:	69b9      	ldr	r1, [r7, #24]
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff fedb 	bl	80048c2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	461a      	mov	r2, r3
 8004b12:	69b9      	ldr	r1, [r7, #24]
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7ff febd 	bl	8004894 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	69b9      	ldr	r1, [r7, #24]
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7ff ff09 	bl	800493a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d111      	bne.n	8004b54 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	2bff      	cmp	r3, #255	@ 0xff
 8004b34:	d807      	bhi.n	8004b46 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	69b9      	ldr	r1, [r7, #24]
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff ff37 	bl	80049b2 <LL_GPIO_SetAFPin_0_7>
 8004b44:	e006      	b.n	8004b54 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	69b9      	ldr	r1, [r7, #24]
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7ff ff6b 	bl	8004a2a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	69b9      	ldr	r1, [r7, #24]
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff fe5d 	bl	800481c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	3301      	adds	r3, #1
 8004b66:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1b0      	bne.n	8004ad8 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8004b76:	2301      	movs	r3, #1
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3720      	adds	r7, #32
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <LL_I2C_Enable>:
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f043 0201 	orr.w	r2, r3, #1
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	601a      	str	r2, [r3, #0]
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc80      	pop	{r7}
 8004b9c:	4770      	bx	lr

08004b9e <LL_I2C_Disable>:
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 0201 	bic.w	r2, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	601a      	str	r2, [r3, #0]
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <LL_I2C_ConfigFilters>:
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	0219      	lsls	r1, r3, #8
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	601a      	str	r2, [r3, #0]
}
 8004bde:	bf00      	nop
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr

08004be8 <LL_I2C_SetOwnAddress1>:
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004bfc:	f023 0307 	bic.w	r3, r3, #7
 8004c00:	68b9      	ldr	r1, [r7, #8]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	431a      	orrs	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	609a      	str	r2, [r3, #8]
}
 8004c0c:	bf00      	nop
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bc80      	pop	{r7}
 8004c14:	4770      	bx	lr

08004c16 <LL_I2C_EnableOwnAddress1>:
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	609a      	str	r2, [r3, #8]
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr

08004c34 <LL_I2C_DisableOwnAddress1>:
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	609a      	str	r2, [r3, #8]
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr

08004c52 <LL_I2C_SetTiming>:
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	611a      	str	r2, [r3, #16]
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr

08004c6c <LL_I2C_SetMode>:
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	601a      	str	r2, [r3, #0]
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr

08004c90 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	605a      	str	r2, [r3, #4]
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff ff6d 	bl	8004b9e <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	6899      	ldr	r1, [r3, #8]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7ff ff74 	bl	8004bbc <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff ffb9 	bl	8004c52 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff ff4d 	bl	8004b80 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff ffa4 	bl	8004c34 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	6919      	ldr	r1, [r3, #16]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff ff76 	bl	8004be8 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff ff86 	bl	8004c16 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff ffab 	bl	8004c6c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7ff ffb7 	bl	8004c90 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8004d22:	2301      	movs	r3, #1
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <LL_LPUART_IsEnabled>:
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <LL_LPUART_IsEnabled+0x18>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <LL_LPUART_IsEnabled+0x1a>
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr

08004d50 <LL_LPUART_SetPrescaler>:
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5e:	f023 030f 	bic.w	r3, r3, #15
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	b292      	uxth	r2, r2
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr

08004d76 <LL_LPUART_SetStopBitsLength>:
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	605a      	str	r2, [r3, #4]
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <LL_LPUART_SetHWFlowCtrl>:
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	609a      	str	r2, [r3, #8]
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bc80      	pop	{r7}
 8004dbc:	4770      	bx	lr
	...

08004dc0 <LL_LPUART_SetBaudRate>:
{
 8004dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc4:	b088      	sub	sp, #32
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	61f8      	str	r0, [r7, #28]
 8004dca:	61b9      	str	r1, [r7, #24]
 8004dcc:	617a      	str	r2, [r7, #20]
 8004dce:	613b      	str	r3, [r7, #16]
  if (BaudRate != 0U)
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d039      	beq.n	8004e4a <LL_LPUART_SetBaudRate+0x8a>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	60bb      	str	r3, [r7, #8]
 8004ddc:	60fa      	str	r2, [r7, #12]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	461a      	mov	r2, r3
 8004de4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e54 <LL_LPUART_SetBaudRate+0x94>)
 8004de6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2200      	movs	r2, #0
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	607a      	str	r2, [r7, #4]
 8004df2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004df6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dfa:	f7fb fe07 	bl	8000a0c <__aeabi_uldivmod>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4610      	mov	r0, r2
 8004e04:	4619      	mov	r1, r3
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	020b      	lsls	r3, r1, #8
 8004e10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e14:	0202      	lsls	r2, r0, #8
 8004e16:	6939      	ldr	r1, [r7, #16]
 8004e18:	0849      	lsrs	r1, r1, #1
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	460c      	mov	r4, r1
 8004e1e:	4605      	mov	r5, r0
 8004e20:	eb12 0804 	adds.w	r8, r2, r4
 8004e24:	eb43 0905 	adc.w	r9, r3, r5
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	469a      	mov	sl, r3
 8004e2e:	4693      	mov	fp, r2
 8004e30:	4652      	mov	r2, sl
 8004e32:	465b      	mov	r3, fp
 8004e34:	4640      	mov	r0, r8
 8004e36:	4649      	mov	r1, r9
 8004e38:	f7fb fde8 	bl	8000a0c <__aeabi_uldivmod>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4613      	mov	r3, r2
 8004e42:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	60da      	str	r2, [r3, #12]
}
 8004e4a:	bf00      	nop
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e54:	0800b080 	.word	0x0800b080

08004e58 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004e62:	2300      	movs	r3, #0
 8004e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff ff60 	bl	8004d2c <LL_LPUART_IsEnabled>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d136      	bne.n	8004ee0 <LL_LPUART_Init+0x88>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	4b1d      	ldr	r3, [pc, #116]	@ (8004eec <LL_LPUART_Init+0x94>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	6891      	ldr	r1, [r2, #8]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	6912      	ldr	r2, [r2, #16]
 8004e82:	4311      	orrs	r1, r2
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	6952      	ldr	r2, [r2, #20]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	4619      	mov	r1, r3
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7ff ff6d 	bl	8004d76 <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff ff79 	bl	8004d9a <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8004ea8:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004eac:	f000 f8d8 	bl	8005060 <LL_RCC_GetLPUARTClockFreq>
 8004eb0:	60b8      	str	r0, [r7, #8]
    /* Configure the LPUART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00d      	beq.n	8004ed4 <LL_LPUART_Init+0x7c>
        && (LPUART_InitStruct->BaudRate != 0U))
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d009      	beq.n	8004ed4 <LL_LPUART_Init+0x7c>
    {
      status = SUCCESS;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	73fb      	strb	r3, [r7, #15]
      LL_LPUART_SetBaudRate(LPUARTx,
                            periphclk,
                            LPUART_InitStruct->PrescalerValue,
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
                            LPUART_InitStruct->BaudRate);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
      LL_LPUART_SetBaudRate(LPUARTx,
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7ff ff76 	bl	8004dc0 <LL_LPUART_SetBaudRate>

    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff ff38 	bl	8004d50 <LL_LPUART_SetPrescaler>
  }

  return (status);
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	efffe9f3 	.word	0xefffe9f3

08004ef0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f02:	d101      	bne.n	8004f08 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004f04:	2301      	movs	r3, #1
 8004f06:	e000      	b.n	8004f0a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bc80      	pop	{r7}
 8004f10:	4770      	bx	lr

08004f12 <LL_RCC_HSI_IsReady>:
{
 8004f12:	b480      	push	{r7}
 8004f14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f24:	d101      	bne.n	8004f2a <LL_RCC_HSI_IsReady+0x18>
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <LL_RCC_HSI_IsReady+0x1a>
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bc80      	pop	{r7}
 8004f32:	4770      	bx	lr

08004f34 <LL_RCC_LSE_IsReady>:
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d101      	bne.n	8004f4c <LL_RCC_LSE_IsReady+0x18>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e000      	b.n	8004f4e <LL_RCC_LSE_IsReady+0x1a>
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bc80      	pop	{r7}
 8004f54:	4770      	bx	lr

08004f56 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8004f56:	b480      	push	{r7}
 8004f58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004f5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0308 	and.w	r3, r3, #8
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d101      	bne.n	8004f6c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr

08004f76 <LL_RCC_MSI_GetRange>:
{
 8004f76:	b480      	push	{r7}
 8004f78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004f7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr

08004f8c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004f90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f98:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr

08004fa4 <LL_RCC_GetSysClkSource>:
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004fa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 030c 	and.w	r3, r3, #12
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bc80      	pop	{r7}
 8004fb8:	4770      	bx	lr

08004fba <LL_RCC_GetAHBPrescaler>:
{
 8004fba:	b480      	push	{r7}
 8004fbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004fbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr

08004fd0 <LL_RCC_GetAPB1Prescaler>:
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004fd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr

08004fe6 <LL_RCC_GetLPUARTClockSource>:
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004fee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ff2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4013      	ands	r3, r2
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr

08005004 <LL_RCC_PLL_GetN>:
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005008:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	0a1b      	lsrs	r3, r3, #8
 8005010:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005014:	4618      	mov	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr

0800501c <LL_RCC_PLL_GetR>:
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800502a:	4618      	mov	r0, r3
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr

08005032 <LL_RCC_PLL_GetDivider>:
{
 8005032:	b480      	push	{r7}
 8005034:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005036:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005040:	4618      	mov	r0, r3
 8005042:	46bd      	mov	sp, r7
 8005044:	bc80      	pop	{r7}
 8005046:	4770      	bx	lr

08005048 <LL_RCC_PLL_GetMainSource>:
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800504c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f003 0303 	and.w	r3, r3, #3
}
 8005056:	4618      	mov	r0, r3
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr
	...

08005060 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005068:	2300      	movs	r3, #0
 800506a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff ffba 	bl	8004fe6 <LL_RCC_GetLPUARTClockSource>
 8005072:	4603      	mov	r3, r0
 8005074:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005078:	d015      	beq.n	80050a6 <LL_RCC_GetLPUARTClockFreq+0x46>
 800507a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800507e:	d81b      	bhi.n	80050b8 <LL_RCC_GetLPUARTClockFreq+0x58>
 8005080:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005084:	d003      	beq.n	800508e <LL_RCC_GetLPUARTClockFreq+0x2e>
 8005086:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800508a:	d004      	beq.n	8005096 <LL_RCC_GetLPUARTClockFreq+0x36>
 800508c:	e014      	b.n	80050b8 <LL_RCC_GetLPUARTClockFreq+0x58>
  {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      lpuart_frequency = RCC_GetSystemClockFreq();
 800508e:	f000 f829 	bl	80050e4 <RCC_GetSystemClockFreq>
 8005092:	60f8      	str	r0, [r7, #12]
      break;
 8005094:	e01f      	b.n	80050d6 <LL_RCC_GetLPUARTClockFreq+0x76>

    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8005096:	f7ff ff3c 	bl	8004f12 <LL_RCC_HSI_IsReady>
 800509a:	4603      	mov	r3, r0
 800509c:	2b01      	cmp	r3, #1
 800509e:	d117      	bne.n	80050d0 <LL_RCC_GetLPUARTClockFreq+0x70>
      {
        lpuart_frequency = HSI_VALUE;
 80050a0:	4b0f      	ldr	r3, [pc, #60]	@ (80050e0 <LL_RCC_GetLPUARTClockFreq+0x80>)
 80050a2:	60fb      	str	r3, [r7, #12]
      }
      break;
 80050a4:	e014      	b.n	80050d0 <LL_RCC_GetLPUARTClockFreq+0x70>

    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 80050a6:	f7ff ff45 	bl	8004f34 <LL_RCC_LSE_IsReady>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d111      	bne.n	80050d4 <LL_RCC_GetLPUARTClockFreq+0x74>
      {
        lpuart_frequency = LSE_VALUE;
 80050b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050b4:	60fb      	str	r3, [r7, #12]
      }
      break;
 80050b6:	e00d      	b.n	80050d4 <LL_RCC_GetLPUARTClockFreq+0x74>

    case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
    default:
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLK1ClockFreq(RCC_GetSystemClockFreq()));
 80050b8:	f000 f814 	bl	80050e4 <RCC_GetSystemClockFreq>
 80050bc:	4603      	mov	r3, r0
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 f8b8 	bl	8005234 <RCC_GetHCLK1ClockFreq>
 80050c4:	4603      	mov	r3, r0
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 f8ca 	bl	8005260 <RCC_GetPCLK1ClockFreq>
 80050cc:	60f8      	str	r0, [r7, #12]
      break;
 80050ce:	e002      	b.n	80050d6 <LL_RCC_GetLPUARTClockFreq+0x76>
      break;
 80050d0:	bf00      	nop
 80050d2:	e000      	b.n	80050d6 <LL_RCC_GetLPUARTClockFreq+0x76>
      break;
 80050d4:	bf00      	nop
  }

  return lpuart_frequency;
 80050d6:	68fb      	ldr	r3, [r7, #12]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	00f42400 	.word	0x00f42400

080050e4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock (SYSCLK) frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80050ea:	f7ff ff5b 	bl	8004fa4 <LL_RCC_GetSysClkSource>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b0c      	cmp	r3, #12
 80050f2:	d861      	bhi.n	80051b8 <RCC_GetSystemClockFreq+0xd4>
 80050f4:	a201      	add	r2, pc, #4	@ (adr r2, 80050fc <RCC_GetSystemClockFreq+0x18>)
 80050f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fa:	bf00      	nop
 80050fc:	08005131 	.word	0x08005131
 8005100:	080051b9 	.word	0x080051b9
 8005104:	080051b9 	.word	0x080051b9
 8005108:	080051b9 	.word	0x080051b9
 800510c:	08005195 	.word	0x08005195
 8005110:	080051b9 	.word	0x080051b9
 8005114:	080051b9 	.word	0x080051b9
 8005118:	080051b9 	.word	0x080051b9
 800511c:	0800519b 	.word	0x0800519b
 8005120:	080051b9 	.word	0x080051b9
 8005124:	080051b9 	.word	0x080051b9
 8005128:	080051b9 	.word	0x080051b9
 800512c:	080051b1 	.word	0x080051b1
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005130:	f7ff ff11 	bl	8004f56 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d115      	bne.n	8005166 <RCC_GetSystemClockFreq+0x82>
 800513a:	f7ff ff0c 	bl	8004f56 <LL_RCC_MSI_IsEnabledRangeSelect>
 800513e:	4603      	mov	r3, r0
 8005140:	2b01      	cmp	r3, #1
 8005142:	d106      	bne.n	8005152 <RCC_GetSystemClockFreq+0x6e>
 8005144:	f7ff ff17 	bl	8004f76 <LL_RCC_MSI_GetRange>
 8005148:	4603      	mov	r3, r0
 800514a:	0a1b      	lsrs	r3, r3, #8
 800514c:	f003 030f 	and.w	r3, r3, #15
 8005150:	e005      	b.n	800515e <RCC_GetSystemClockFreq+0x7a>
 8005152:	f7ff ff1b 	bl	8004f8c <LL_RCC_MSI_GetRangeAfterStandby>
 8005156:	4603      	mov	r3, r0
 8005158:	0a1b      	lsrs	r3, r3, #8
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	4a32      	ldr	r2, [pc, #200]	@ (8005228 <RCC_GetSystemClockFreq+0x144>)
 8005160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005164:	e014      	b.n	8005190 <RCC_GetSystemClockFreq+0xac>
 8005166:	f7ff fef6 	bl	8004f56 <LL_RCC_MSI_IsEnabledRangeSelect>
 800516a:	4603      	mov	r3, r0
 800516c:	2b01      	cmp	r3, #1
 800516e:	d106      	bne.n	800517e <RCC_GetSystemClockFreq+0x9a>
 8005170:	f7ff ff01 	bl	8004f76 <LL_RCC_MSI_GetRange>
 8005174:	4603      	mov	r3, r0
 8005176:	091b      	lsrs	r3, r3, #4
 8005178:	f003 030f 	and.w	r3, r3, #15
 800517c:	e005      	b.n	800518a <RCC_GetSystemClockFreq+0xa6>
 800517e:	f7ff ff05 	bl	8004f8c <LL_RCC_MSI_GetRangeAfterStandby>
 8005182:	4603      	mov	r3, r0
 8005184:	091b      	lsrs	r3, r3, #4
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	4a27      	ldr	r2, [pc, #156]	@ (8005228 <RCC_GetSystemClockFreq+0x144>)
 800518c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005190:	607b      	str	r3, [r7, #4]
                                         ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                          LL_RCC_MSI_GetRange() :
                                          LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005192:	e043      	b.n	800521c <RCC_GetSystemClockFreq+0x138>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005194:	4b25      	ldr	r3, [pc, #148]	@ (800522c <RCC_GetSystemClockFreq+0x148>)
 8005196:	607b      	str	r3, [r7, #4]
      break;
 8005198:	e040      	b.n	800521c <RCC_GetSystemClockFreq+0x138>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800519a:	f7ff fea9 	bl	8004ef0 <LL_RCC_HSE_IsEnabledDiv2>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d102      	bne.n	80051aa <RCC_GetSystemClockFreq+0xc6>
      {
        frequency = HSE_VALUE / 2U;
 80051a4:	4b21      	ldr	r3, [pc, #132]	@ (800522c <RCC_GetSystemClockFreq+0x148>)
 80051a6:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSE_VALUE;
      }
      break;
 80051a8:	e038      	b.n	800521c <RCC_GetSystemClockFreq+0x138>
        frequency = HSE_VALUE;
 80051aa:	4b21      	ldr	r3, [pc, #132]	@ (8005230 <RCC_GetSystemClockFreq+0x14c>)
 80051ac:	607b      	str	r3, [r7, #4]
      break;
 80051ae:	e035      	b.n	800521c <RCC_GetSystemClockFreq+0x138>


    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80051b0:	f000 f86a 	bl	8005288 <RCC_PLL_GetFreqDomain_SYS>
 80051b4:	6078      	str	r0, [r7, #4]
      break;
 80051b6:	e031      	b.n	800521c <RCC_GetSystemClockFreq+0x138>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80051b8:	f7ff fecd 	bl	8004f56 <LL_RCC_MSI_IsEnabledRangeSelect>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d115      	bne.n	80051ee <RCC_GetSystemClockFreq+0x10a>
 80051c2:	f7ff fec8 	bl	8004f56 <LL_RCC_MSI_IsEnabledRangeSelect>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d106      	bne.n	80051da <RCC_GetSystemClockFreq+0xf6>
 80051cc:	f7ff fed3 	bl	8004f76 <LL_RCC_MSI_GetRange>
 80051d0:	4603      	mov	r3, r0
 80051d2:	0a1b      	lsrs	r3, r3, #8
 80051d4:	f003 030f 	and.w	r3, r3, #15
 80051d8:	e005      	b.n	80051e6 <RCC_GetSystemClockFreq+0x102>
 80051da:	f7ff fed7 	bl	8004f8c <LL_RCC_MSI_GetRangeAfterStandby>
 80051de:	4603      	mov	r3, r0
 80051e0:	0a1b      	lsrs	r3, r3, #8
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	4a10      	ldr	r2, [pc, #64]	@ (8005228 <RCC_GetSystemClockFreq+0x144>)
 80051e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ec:	e014      	b.n	8005218 <RCC_GetSystemClockFreq+0x134>
 80051ee:	f7ff feb2 	bl	8004f56 <LL_RCC_MSI_IsEnabledRangeSelect>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d106      	bne.n	8005206 <RCC_GetSystemClockFreq+0x122>
 80051f8:	f7ff febd 	bl	8004f76 <LL_RCC_MSI_GetRange>
 80051fc:	4603      	mov	r3, r0
 80051fe:	091b      	lsrs	r3, r3, #4
 8005200:	f003 030f 	and.w	r3, r3, #15
 8005204:	e005      	b.n	8005212 <RCC_GetSystemClockFreq+0x12e>
 8005206:	f7ff fec1 	bl	8004f8c <LL_RCC_MSI_GetRangeAfterStandby>
 800520a:	4603      	mov	r3, r0
 800520c:	091b      	lsrs	r3, r3, #4
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	4a05      	ldr	r2, [pc, #20]	@ (8005228 <RCC_GetSystemClockFreq+0x144>)
 8005214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005218:	607b      	str	r3, [r7, #4]
                                         ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                          LL_RCC_MSI_GetRange() :
                                          LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800521a:	bf00      	nop
  }

  return frequency;
 800521c:	687b      	ldr	r3, [r7, #4]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	0800b028 	.word	0x0800b028
 800522c:	00f42400 	.word	0x00f42400
 8005230:	01e84800 	.word	0x01e84800

08005234 <RCC_GetHCLK1ClockFreq>:
  * @brief  Return HCLK1 clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLK1ClockFreq(uint32_t SYSCLK_Frequency)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK1_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800523c:	f7ff febd 	bl	8004fba <LL_RCC_GetAHBPrescaler>
 8005240:	4603      	mov	r3, r0
 8005242:	091b      	lsrs	r3, r3, #4
 8005244:	f003 030f 	and.w	r3, r3, #15
 8005248:	4a04      	ldr	r2, [pc, #16]	@ (800525c <RCC_GetHCLK1ClockFreq+0x28>)
 800524a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	0800afc8 	.word	0x0800afc8

08005260 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005268:	f7ff feb2 	bl	8004fd0 <LL_RCC_GetAPB1Prescaler>
 800526c:	4603      	mov	r3, r0
 800526e:	0a1b      	lsrs	r3, r3, #8
 8005270:	4a04      	ldr	r2, [pc, #16]	@ (8005284 <RCC_GetPCLK1ClockFreq+0x24>)
 8005272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800527c:	4618      	mov	r0, r3
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	0800b008 	.word	0x0800b008

08005288 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock (PLLRCLK) frequency used for system domain
  * @retval PLLRCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8005288:	b590      	push	{r4, r7, lr}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800528e:	f7ff fedb 	bl	8005048 <LL_RCC_PLL_GetMainSource>
 8005292:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b03      	cmp	r3, #3
 8005298:	d03e      	beq.n	8005318 <RCC_PLL_GetFreqDomain_SYS+0x90>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b03      	cmp	r3, #3
 800529e:	d846      	bhi.n	800532e <RCC_PLL_GetFreqDomain_SYS+0xa6>
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d003      	beq.n	80052ae <RCC_PLL_GetFreqDomain_SYS+0x26>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d032      	beq.n	8005312 <RCC_PLL_GetFreqDomain_SYS+0x8a>
 80052ac:	e03f      	b.n	800532e <RCC_PLL_GetFreqDomain_SYS+0xa6>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80052ae:	f7ff fe52 	bl	8004f56 <LL_RCC_MSI_IsEnabledRangeSelect>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d115      	bne.n	80052e4 <RCC_PLL_GetFreqDomain_SYS+0x5c>
 80052b8:	f7ff fe4d 	bl	8004f56 <LL_RCC_MSI_IsEnabledRangeSelect>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d106      	bne.n	80052d0 <RCC_PLL_GetFreqDomain_SYS+0x48>
 80052c2:	f7ff fe58 	bl	8004f76 <LL_RCC_MSI_GetRange>
 80052c6:	4603      	mov	r3, r0
 80052c8:	0a1b      	lsrs	r3, r3, #8
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	e005      	b.n	80052dc <RCC_PLL_GetFreqDomain_SYS+0x54>
 80052d0:	f7ff fe5c 	bl	8004f8c <LL_RCC_MSI_GetRangeAfterStandby>
 80052d4:	4603      	mov	r3, r0
 80052d6:	0a1b      	lsrs	r3, r3, #8
 80052d8:	f003 030f 	and.w	r3, r3, #15
 80052dc:	4a39      	ldr	r2, [pc, #228]	@ (80053c4 <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 80052de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e2:	e014      	b.n	800530e <RCC_PLL_GetFreqDomain_SYS+0x86>
 80052e4:	f7ff fe37 	bl	8004f56 <LL_RCC_MSI_IsEnabledRangeSelect>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d106      	bne.n	80052fc <RCC_PLL_GetFreqDomain_SYS+0x74>
 80052ee:	f7ff fe42 	bl	8004f76 <LL_RCC_MSI_GetRange>
 80052f2:	4603      	mov	r3, r0
 80052f4:	091b      	lsrs	r3, r3, #4
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	e005      	b.n	8005308 <RCC_PLL_GetFreqDomain_SYS+0x80>
 80052fc:	f7ff fe46 	bl	8004f8c <LL_RCC_MSI_GetRangeAfterStandby>
 8005300:	4603      	mov	r3, r0
 8005302:	091b      	lsrs	r3, r3, #4
 8005304:	f003 030f 	and.w	r3, r3, #15
 8005308:	4a2e      	ldr	r2, [pc, #184]	@ (80053c4 <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 800530a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800530e:	607b      	str	r3, [r7, #4]
                                            ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                             LL_RCC_MSI_GetRange() :
                                             LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005310:	e03f      	b.n	8005392 <RCC_PLL_GetFreqDomain_SYS+0x10a>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005312:	4b2d      	ldr	r3, [pc, #180]	@ (80053c8 <RCC_PLL_GetFreqDomain_SYS+0x140>)
 8005314:	607b      	str	r3, [r7, #4]
      break;
 8005316:	e03c      	b.n	8005392 <RCC_PLL_GetFreqDomain_SYS+0x10a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005318:	f7ff fdea 	bl	8004ef0 <LL_RCC_HSE_IsEnabledDiv2>
 800531c:	4603      	mov	r3, r0
 800531e:	2b01      	cmp	r3, #1
 8005320:	d102      	bne.n	8005328 <RCC_PLL_GetFreqDomain_SYS+0xa0>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8005322:	4b29      	ldr	r3, [pc, #164]	@ (80053c8 <RCC_PLL_GetFreqDomain_SYS+0x140>)
 8005324:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8005326:	e034      	b.n	8005392 <RCC_PLL_GetFreqDomain_SYS+0x10a>
        pllinputfreq = HSE_VALUE;
 8005328:	4b28      	ldr	r3, [pc, #160]	@ (80053cc <RCC_PLL_GetFreqDomain_SYS+0x144>)
 800532a:	607b      	str	r3, [r7, #4]
      break;
 800532c:	e031      	b.n	8005392 <RCC_PLL_GetFreqDomain_SYS+0x10a>


    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800532e:	f7ff fe12 	bl	8004f56 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d115      	bne.n	8005364 <RCC_PLL_GetFreqDomain_SYS+0xdc>
 8005338:	f7ff fe0d 	bl	8004f56 <LL_RCC_MSI_IsEnabledRangeSelect>
 800533c:	4603      	mov	r3, r0
 800533e:	2b01      	cmp	r3, #1
 8005340:	d106      	bne.n	8005350 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8005342:	f7ff fe18 	bl	8004f76 <LL_RCC_MSI_GetRange>
 8005346:	4603      	mov	r3, r0
 8005348:	0a1b      	lsrs	r3, r3, #8
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	e005      	b.n	800535c <RCC_PLL_GetFreqDomain_SYS+0xd4>
 8005350:	f7ff fe1c 	bl	8004f8c <LL_RCC_MSI_GetRangeAfterStandby>
 8005354:	4603      	mov	r3, r0
 8005356:	0a1b      	lsrs	r3, r3, #8
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	4a19      	ldr	r2, [pc, #100]	@ (80053c4 <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 800535e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005362:	e014      	b.n	800538e <RCC_PLL_GetFreqDomain_SYS+0x106>
 8005364:	f7ff fdf7 	bl	8004f56 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005368:	4603      	mov	r3, r0
 800536a:	2b01      	cmp	r3, #1
 800536c:	d106      	bne.n	800537c <RCC_PLL_GetFreqDomain_SYS+0xf4>
 800536e:	f7ff fe02 	bl	8004f76 <LL_RCC_MSI_GetRange>
 8005372:	4603      	mov	r3, r0
 8005374:	091b      	lsrs	r3, r3, #4
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	e005      	b.n	8005388 <RCC_PLL_GetFreqDomain_SYS+0x100>
 800537c:	f7ff fe06 	bl	8004f8c <LL_RCC_MSI_GetRangeAfterStandby>
 8005380:	4603      	mov	r3, r0
 8005382:	091b      	lsrs	r3, r3, #4
 8005384:	f003 030f 	and.w	r3, r3, #15
 8005388:	4a0e      	ldr	r2, [pc, #56]	@ (80053c4 <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 800538a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800538e:	607b      	str	r3, [r7, #4]
                                            ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                             LL_RCC_MSI_GetRange() :
                                             LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005390:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005392:	f7ff fe37 	bl	8005004 <LL_RCC_PLL_GetN>
 8005396:	4602      	mov	r2, r0
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	fb03 f402 	mul.w	r4, r3, r2
 800539e:	f7ff fe48 	bl	8005032 <LL_RCC_PLL_GetDivider>
 80053a2:	4603      	mov	r3, r0
 80053a4:	091b      	lsrs	r3, r3, #4
 80053a6:	3301      	adds	r3, #1
 80053a8:	fbb4 f4f3 	udiv	r4, r4, r3
 80053ac:	f7ff fe36 	bl	800501c <LL_RCC_PLL_GetR>
 80053b0:	4603      	mov	r3, r0
 80053b2:	0f5b      	lsrs	r3, r3, #29
 80053b4:	3301      	adds	r3, #1
 80053b6:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd90      	pop	{r4, r7, pc}
 80053c2:	bf00      	nop
 80053c4:	0800b028 	.word	0x0800b028
 80053c8:	00f42400 	.word	0x00f42400
 80053cc:	01e84800 	.word	0x01e84800

080053d0 <LL_TIM_SetPrescaler>:
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr

080053ea <LL_TIM_SetAutoReload>:
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	bc80      	pop	{r7}
 8005402:	4770      	bx	lr

08005404 <LL_TIM_SetRepetitionCounter>:
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr

0800541e <LL_TIM_OC_SetCompareCH1>:
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr

08005438 <LL_TIM_OC_SetCompareCH2>:
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	bc80      	pop	{r7}
 8005450:	4770      	bx	lr

08005452 <LL_TIM_OC_SetCompareCH3>:
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr

0800546c <LL_TIM_OC_SetCompareCH4>:
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr

08005486 <LL_TIM_OC_SetCompareCH5>:
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005494:	0c1b      	lsrs	r3, r3, #16
 8005496:	041b      	lsls	r3, r3, #16
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bc80      	pop	{r7}
 80054a8:	4770      	bx	lr

080054aa <LL_TIM_OC_SetCompareCH6>:
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr

080054c4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	f043 0201 	orr.w	r2, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	615a      	str	r2, [r3, #20]
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	bc80      	pop	{r7}
 80054e0:	4770      	bx	lr
	...

080054e4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a27      	ldr	r2, [pc, #156]	@ (8005594 <LL_TIM_Init+0xb0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d003      	beq.n	8005504 <LL_TIM_Init+0x20>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005502:	d106      	bne.n	8005512 <LL_TIM_Init+0x2e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a1f      	ldr	r2, [pc, #124]	@ (8005594 <LL_TIM_Init+0xb0>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00b      	beq.n	8005532 <LL_TIM_Init+0x4e>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005520:	d007      	beq.n	8005532 <LL_TIM_Init+0x4e>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a1c      	ldr	r2, [pc, #112]	@ (8005598 <LL_TIM_Init+0xb4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d003      	beq.n	8005532 <LL_TIM_Init+0x4e>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a1b      	ldr	r2, [pc, #108]	@ (800559c <LL_TIM_Init+0xb8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d106      	bne.n	8005540 <LL_TIM_Init+0x5c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	4313      	orrs	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	4619      	mov	r1, r3
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7ff ff4c 	bl	80053ea <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7ff ff39 	bl	80053d0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a0c      	ldr	r2, [pc, #48]	@ (8005594 <LL_TIM_Init+0xb0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d007      	beq.n	8005576 <LL_TIM_Init+0x92>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a0b      	ldr	r2, [pc, #44]	@ (8005598 <LL_TIM_Init+0xb4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d003      	beq.n	8005576 <LL_TIM_Init+0x92>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a0a      	ldr	r2, [pc, #40]	@ (800559c <LL_TIM_Init+0xb8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d105      	bne.n	8005582 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	4619      	mov	r1, r3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff ff41 	bl	8005404 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7ff ff9e 	bl	80054c4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8005588:	2301      	movs	r3, #1
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	40012c00 	.word	0x40012c00
 8005598:	40014400 	.word	0x40014400
 800559c:	40014800 	.word	0x40014800

080055a0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80055ac:	2300      	movs	r3, #0
 80055ae:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055b6:	d045      	beq.n	8005644 <LL_TIM_OC_Init+0xa4>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055be:	d848      	bhi.n	8005652 <LL_TIM_OC_Init+0xb2>
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055c6:	d036      	beq.n	8005636 <LL_TIM_OC_Init+0x96>
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ce:	d840      	bhi.n	8005652 <LL_TIM_OC_Init+0xb2>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055d6:	d027      	beq.n	8005628 <LL_TIM_OC_Init+0x88>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055de:	d838      	bhi.n	8005652 <LL_TIM_OC_Init+0xb2>
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055e6:	d018      	beq.n	800561a <LL_TIM_OC_Init+0x7a>
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055ee:	d830      	bhi.n	8005652 <LL_TIM_OC_Init+0xb2>
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d003      	beq.n	80055fe <LL_TIM_OC_Init+0x5e>
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b10      	cmp	r3, #16
 80055fa:	d007      	beq.n	800560c <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80055fc:	e029      	b.n	8005652 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 f89f 	bl	8005744 <OC1Config>
 8005606:	4603      	mov	r3, r0
 8005608:	75fb      	strb	r3, [r7, #23]
      break;
 800560a:	e023      	b.n	8005654 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 f90c 	bl	800582c <OC2Config>
 8005614:	4603      	mov	r3, r0
 8005616:	75fb      	strb	r3, [r7, #23]
      break;
 8005618:	e01c      	b.n	8005654 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 f97d 	bl	800591c <OC3Config>
 8005622:	4603      	mov	r3, r0
 8005624:	75fb      	strb	r3, [r7, #23]
      break;
 8005626:	e015      	b.n	8005654 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 f9ee 	bl	8005a0c <OC4Config>
 8005630:	4603      	mov	r3, r0
 8005632:	75fb      	strb	r3, [r7, #23]
      break;
 8005634:	e00e      	b.n	8005654 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 fa47 	bl	8005acc <OC5Config>
 800563e:	4603      	mov	r3, r0
 8005640:	75fb      	strb	r3, [r7, #23]
      break;
 8005642:	e007      	b.n	8005654 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 fa98 	bl	8005b7c <OC6Config>
 800564c:	4603      	mov	r3, r0
 800564e:	75fb      	strb	r3, [r7, #23]
      break;
 8005650:	e000      	b.n	8005654 <LL_TIM_OC_Init+0xb4>
      break;
 8005652:	bf00      	nop
  }

  return result;
 8005654:	7dfb      	ldrb	r3, [r7, #23]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	7b12      	ldrb	r2, [r2, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	4313      	orrs	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	89d2      	ldrh	r2, [r2, #14]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
  assert_param(IS_LL_TIM_BREAK_AFMODE(TIM_BDTRInitStruct->BreakAFMode));
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a14      	ldr	r2, [pc, #80]	@ (8005740 <LL_TIM_BDTR_Init+0xe0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d11b      	bne.n	800572c <LL_TIM_BDTR_Init+0xcc>
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 8005732:	2301      	movs	r3, #1
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	bc80      	pop	{r7}
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	40012c00 	.word	0x40012c00

08005744 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	f023 0201 	bic.w	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0303 	bic.w	r3, r3, #3
 8005772:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800577a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	6812      	ldr	r2, [r2, #0]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f023 0202 	bic.w	r2, r3, #2
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f023 0201 	bic.w	r2, r3, #1
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a1e      	ldr	r2, [pc, #120]	@ (8005820 <OC1Config+0xdc>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d007      	beq.n	80057ba <OC1Config+0x76>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005824 <OC1Config+0xe0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d003      	beq.n	80057ba <OC1Config+0x76>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005828 <OC1Config+0xe4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d11e      	bne.n	80057f8 <OC1Config+0xb4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f023 0208 	bic.w	r2, r3, #8
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f023 0204 	bic.w	r2, r3, #4
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4313      	orrs	r3, r2
 80057d8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff fe07 	bl	800541e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005816:	2301      	movs	r3, #1
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40012c00 	.word	0x40012c00
 8005824:	40014400 	.word	0x40014400
 8005828:	40014800 	.word	0x40014800

0800582c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	f023 0210 	bic.w	r2, r3, #16
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800585a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005862:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	6812      	ldr	r2, [r2, #0]
 800586a:	0212      	lsls	r2, r2, #8
 800586c:	4313      	orrs	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f023 0220 	bic.w	r2, r3, #32
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f023 0210 	bic.w	r2, r3, #16
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	4313      	orrs	r3, r2
 800588e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a1f      	ldr	r2, [pc, #124]	@ (8005910 <OC2Config+0xe4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d007      	beq.n	80058a8 <OC2Config+0x7c>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a1e      	ldr	r2, [pc, #120]	@ (8005914 <OC2Config+0xe8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d003      	beq.n	80058a8 <OC2Config+0x7c>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005918 <OC2Config+0xec>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d11f      	bne.n	80058e8 <OC2Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	019b      	lsls	r3, r3, #6
 80058b4:	4313      	orrs	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	019b      	lsls	r3, r3, #6
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4313      	orrs	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7ff fd9c 	bl	8005438 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005906:	2301      	movs	r3, #1
}
 8005908:	4618      	mov	r0, r3
 800590a:	3718      	adds	r7, #24
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	40012c00 	.word	0x40012c00
 8005914:	40014400 	.word	0x40014400
 8005918:	40014800 	.word	0x40014800

0800591c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 0303 	bic.w	r3, r3, #3
 800594a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	6812      	ldr	r2, [r2, #0]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	021b      	lsls	r3, r3, #8
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	021b      	lsls	r3, r3, #8
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a1f      	ldr	r2, [pc, #124]	@ (8005a00 <OC3Config+0xe4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d007      	beq.n	8005996 <OC3Config+0x7a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a1e      	ldr	r2, [pc, #120]	@ (8005a04 <OC3Config+0xe8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d003      	beq.n	8005996 <OC3Config+0x7a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a1d      	ldr	r2, [pc, #116]	@ (8005a08 <OC3Config+0xec>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d11f      	bne.n	80059d6 <OC3Config+0xba>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	029b      	lsls	r3, r3, #10
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	029b      	lsls	r3, r3, #10
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	015b      	lsls	r3, r3, #5
 80059d2:	4313      	orrs	r3, r2
 80059d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	4619      	mov	r1, r3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7ff fd32 	bl	8005452 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80059f4:	2301      	movs	r3, #1
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	40012c00 	.word	0x40012c00
 8005a04:	40014400 	.word	0x40014400
 8005a08:	40014800 	.word	0x40014800

08005a0c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	0212      	lsls	r2, r2, #8
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	031b      	lsls	r3, r3, #12
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	031b      	lsls	r3, r3, #12
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a13      	ldr	r2, [pc, #76]	@ (8005ac0 <OC4Config+0xb4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d007      	beq.n	8005a88 <OC4Config+0x7c>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a12      	ldr	r2, [pc, #72]	@ (8005ac4 <OC4Config+0xb8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <OC4Config+0x7c>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a11      	ldr	r2, [pc, #68]	@ (8005ac8 <OC4Config+0xbc>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d107      	bne.n	8005a98 <OC4Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	019b      	lsls	r3, r3, #6
 8005a94:	4313      	orrs	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff fcde 	bl	800546c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005ab6:	2301      	movs	r3, #1
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	40012c00 	.word	0x40012c00
 8005ac4:	40014400 	.word	0x40014400
 8005ac8:	40014800 	.word	0x40014800

08005acc <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aec:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005af4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	6812      	ldr	r2, [r2, #0]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	041b      	lsls	r3, r3, #16
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	041b      	lsls	r3, r3, #16
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a13      	ldr	r2, [pc, #76]	@ (8005b70 <OC5Config+0xa4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d007      	beq.n	8005b38 <OC5Config+0x6c>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a12      	ldr	r2, [pc, #72]	@ (8005b74 <OC5Config+0xa8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d003      	beq.n	8005b38 <OC5Config+0x6c>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a11      	ldr	r2, [pc, #68]	@ (8005b78 <OC5Config+0xac>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d109      	bne.n	8005b4c <OC5Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	021b      	lsls	r3, r3, #8
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	4619      	mov	r1, r3
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff fc94 	bl	8005486 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005b64:	2301      	movs	r3, #1
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	40012c00 	.word	0x40012c00
 8005b74:	40014400 	.word	0x40014400
 8005b78:	40014800 	.word	0x40014800

08005b7c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b9c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ba4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	6812      	ldr	r2, [r2, #0]
 8005bac:	0212      	lsls	r2, r2, #8
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	051b      	lsls	r3, r3, #20
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	051b      	lsls	r3, r3, #20
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a12      	ldr	r2, [pc, #72]	@ (8005c20 <OC6Config+0xa4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d007      	beq.n	8005bea <OC6Config+0x6e>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a11      	ldr	r2, [pc, #68]	@ (8005c24 <OC6Config+0xa8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d003      	beq.n	8005bea <OC6Config+0x6e>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a10      	ldr	r2, [pc, #64]	@ (8005c28 <OC6Config+0xac>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d109      	bne.n	8005bfe <OC6Config+0x82>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	029b      	lsls	r3, r3, #10
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff fc4d 	bl	80054aa <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005c16:	2301      	movs	r3, #1
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40012c00 	.word	0x40012c00
 8005c24:	40014400 	.word	0x40014400
 8005c28:	40014800 	.word	0x40014800

08005c2c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005c34:	4b0f      	ldr	r3, [pc, #60]	@ (8005c74 <LL_mDelay+0x48>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay;
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8005c3a:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c46:	d00c      	beq.n	8005c62 <LL_mDelay+0x36>
  {
    tmpDelay ++;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay  != 0U)
 8005c4e:	e008      	b.n	8005c62 <LL_mDelay+0x36>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8005c50:	4b08      	ldr	r3, [pc, #32]	@ (8005c74 <LL_mDelay+0x48>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <LL_mDelay+0x36>
    {
      tmpDelay --;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1f3      	bne.n	8005c50 <LL_mDelay+0x24>
    }
  }
}
 8005c68:	bf00      	nop
 8005c6a:	bf00      	nop
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr
 8005c74:	e000e010 	.word	0xe000e010

08005c78 <LL_SetSystemCoreClock>:
            @ref LL_RCC_GetSystemClocksFreq (HCLK1_Frequency field))
  * @retval None
  */
#endif /* CORE_CM0PLUS */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005c80:	4a03      	ldr	r2, [pc, #12]	@ (8005c90 <LL_SetSystemCoreClock+0x18>)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6013      	str	r3, [r2, #0]
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr
 8005c90:	20000030 	.word	0x20000030

08005c94 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8005c98:	4907      	ldr	r1, [pc, #28]	@ (8005cb8 <MX_FATFS_Init+0x24>)
 8005c9a:	4808      	ldr	r0, [pc, #32]	@ (8005cbc <MX_FATFS_Init+0x28>)
 8005c9c:	f002 feda 	bl	8008a54 <FATFS_LinkDriver>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8005ca6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005caa:	e003      	b.n	8005cb4 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8005cac:	4b04      	ldr	r3, [pc, #16]	@ (8005cc0 <MX_FATFS_Init+0x2c>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8005cb2:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	200001a8 	.word	0x200001a8
 8005cbc:	2000003c 	.word	0x2000003c
 8005cc0:	200001ac 	.word	0x200001ac

08005cc4 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005cc8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bc80      	pop	{r7}
 8005cd0:	4770      	bx	lr

08005cd2 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b082      	sub	sp, #8
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	4603      	mov	r3, r0
 8005cda:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 f9d0 	bl	8006084 <USER_SPI_initialize>
 8005ce4:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8005cf8:	79fb      	ldrb	r3, [r7, #7]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 fab4 	bl	8006268 <USER_SPI_status>
 8005d00:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
 8005d16:	4603      	mov	r3, r0
 8005d18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8005d1a:	7bf8      	ldrb	r0, [r7, #15]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	68b9      	ldr	r1, [r7, #8]
 8005d22:	f000 fab5 	bl	8006290 <USER_SPI_read>
 8005d26:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	607a      	str	r2, [r7, #4]
 8005d3a:	603b      	str	r3, [r7, #0]
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8005d40:	7bf8      	ldrb	r0, [r7, #15]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	68b9      	ldr	r1, [r7, #8]
 8005d48:	f000 fb08 	bl	800635c <USER_SPI_write>
 8005d4c:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	603a      	str	r2, [r7, #0]
 8005d60:	71fb      	strb	r3, [r7, #7]
 8005d62:	460b      	mov	r3, r1
 8005d64:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8005d66:	79b9      	ldrb	r1, [r7, #6]
 8005d68:	79fb      	ldrb	r3, [r7, #7]
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 fb71 	bl	8006454 <USER_SPI_ioctl>
 8005d72:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <SPI_Timer_On>:
static BYTE CardType; /* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
	spiTimerTickStart = HAL_GetTick();
 8005d84:	f7fc fcb8 	bl	80026f8 <HAL_GetTick>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	4a04      	ldr	r2, [pc, #16]	@ (8005d9c <SPI_Timer_On+0x20>)
 8005d8c:	6013      	str	r3, [r2, #0]
	spiTimerTickDelay = waitTicks;
 8005d8e:	4a04      	ldr	r2, [pc, #16]	@ (8005da0 <SPI_Timer_On+0x24>)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6013      	str	r3, [r2, #0]
}
 8005d94:	bf00      	nop
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	200001b0 	.word	0x200001b0
 8005da0:	200001b4 	.word	0x200001b4

08005da4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
	return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005da8:	f7fc fca6 	bl	80026f8 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	4b06      	ldr	r3, [pc, #24]	@ (8005dc8 <SPI_Timer_Status+0x24>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	1ad2      	subs	r2, r2, r3
 8005db4:	4b05      	ldr	r3, [pc, #20]	@ (8005dcc <SPI_Timer_Status+0x28>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	bf34      	ite	cc
 8005dbc:	2301      	movcc	r3, #1
 8005dbe:	2300      	movcs	r3, #0
 8005dc0:	b2db      	uxtb	r3, r3
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	200001b0 	.word	0x200001b0
 8005dcc:	200001b4 	.word	0x200001b4

08005dd0 <xchg_spi>:
/* SPI controls (Platform dependent)                                     */
/*-----------------------------------------------------------------------*/

/* Exchange a byte */
static BYTE xchg_spi(BYTE dat /* Data to send */
) {
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
	HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005dda:	f107 020f 	add.w	r2, r7, #15
 8005dde:	1df9      	adds	r1, r7, #7
 8005de0:	2332      	movs	r3, #50	@ 0x32
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	2301      	movs	r3, #1
 8005de6:	4804      	ldr	r0, [pc, #16]	@ (8005df8 <xchg_spi+0x28>)
 8005de8:	f7fd fad1 	bl	800338e <HAL_SPI_TransmitReceive>
	return rxDat;
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000130 	.word	0x20000130

08005dfc <rcvr_spi_multi>:

/* Receive multiple byte */
static
void rcvr_spi_multi(BYTE *buff, /* Pointer to data buffer */
UINT btr /* Number of bytes to receive (even number) */
) {
 8005dfc:	b590      	push	{r4, r7, lr}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
	for (UINT i = 0; i < btr; i++) {
 8005e06:	2300      	movs	r3, #0
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	e00a      	b.n	8005e22 <rcvr_spi_multi+0x26>
		*(buff + i) = xchg_spi(0xFF);
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	18d4      	adds	r4, r2, r3
 8005e12:	20ff      	movs	r0, #255	@ 0xff
 8005e14:	f7ff ffdc 	bl	8005dd0 <xchg_spi>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	7023      	strb	r3, [r4, #0]
	for (UINT i = 0; i < btr; i++) {
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d3f0      	bcc.n	8005e0c <rcvr_spi_multi+0x10>
	}
}
 8005e2a:	bf00      	nop
 8005e2c:	bf00      	nop
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd90      	pop	{r4, r7, pc}

08005e34 <xmit_spi_multi>:
#if _USE_WRITE
/* Send multiple byte */
static
void xmit_spi_multi(const BYTE *buff, /* Pointer to the data */
UINT btx /* Number of bytes to send (even number) */
) {
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t*) buff, btx, HAL_MAX_DELAY);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	4803      	ldr	r0, [pc, #12]	@ (8005e58 <xmit_spi_multi+0x24>)
 8005e4a:	f7fd f909 	bl	8003060 <HAL_SPI_Transmit>
}
 8005e4e:	bf00      	nop
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20000130 	.word	0x20000130

08005e5c <wait_ready>:
/*-----------------------------------------------------------------------*/

static
int wait_ready( /* 1:Ready, 0:Timeout */
UINT wt /* Timeout [ms] */
) {
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005e64:	f7fc fc48 	bl	80026f8 <HAL_GetTick>
 8005e68:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t) wt;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005e6e:	20ff      	movs	r0, #255	@ 0xff
 8005e70:	f7ff ffae 	bl	8005dd0 <xchg_spi>
 8005e74:	4603      	mov	r3, r0
 8005e76:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF
			&& ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay)); /* Wait for card goes ready or timeout */
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	2bff      	cmp	r3, #255	@ 0xff
 8005e7c:	d007      	beq.n	8005e8e <wait_ready+0x32>
 8005e7e:	f7fc fc3b 	bl	80026f8 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d8ef      	bhi.n	8005e6e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
 8005e90:	2bff      	cmp	r3, #255	@ 0xff
 8005e92:	bf0c      	ite	eq
 8005e94:	2301      	moveq	r3, #1
 8005e96:	2300      	movne	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <despiselect>:
/*-----------------------------------------------------------------------*/
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect(void) {
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	af00      	add	r7, sp, #0
	CS_HIGH(); /* Set CS# high */
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	2110      	movs	r1, #16
 8005eaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005eae:	f7fc febd 	bl	8002c2c <HAL_GPIO_WritePin>
	xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005eb2:	20ff      	movs	r0, #255	@ 0xff
 8005eb4:	f7ff ff8c 	bl	8005dd0 <xchg_spi>

}
 8005eb8:	bf00      	nop
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect(void) /* 1:OK, 0:Timeout */
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
	CS_LOW(); /* Set CS# low */
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2110      	movs	r1, #16
 8005ec4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005ec8:	f7fc feb0 	bl	8002c2c <HAL_GPIO_WritePin>
	xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 8005ecc:	20ff      	movs	r0, #255	@ 0xff
 8005ece:	f7ff ff7f 	bl	8005dd0 <xchg_spi>
	if (wait_ready(500))
 8005ed2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005ed6:	f7ff ffc1 	bl	8005e5c <wait_ready>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <spiselect+0x28>
		return 1; /* Wait for card ready */
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e002      	b.n	8005eea <spiselect+0x2e>

	despiselect();
 8005ee4:	f7ff ffdd 	bl	8005ea2 <despiselect>
	return 0; /* Timeout */
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	bd80      	pop	{r7, pc}

08005eee <rcvr_datablock>:

static
int rcvr_datablock( /* 1:OK, 0:Error */
BYTE *buff, /* Data buffer */
UINT btr /* Data block length (byte) */
) {
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b084      	sub	sp, #16
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	6039      	str	r1, [r7, #0]
	BYTE token;

	SPI_Timer_On(200);
 8005ef8:	20c8      	movs	r0, #200	@ 0xc8
 8005efa:	f7ff ff3f 	bl	8005d7c <SPI_Timer_On>
	do { /* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005efe:	20ff      	movs	r0, #255	@ 0xff
 8005f00:	f7ff ff66 	bl	8005dd0 <xchg_spi>
 8005f04:	4603      	mov	r3, r0
 8005f06:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	2bff      	cmp	r3, #255	@ 0xff
 8005f0c:	d104      	bne.n	8005f18 <rcvr_datablock+0x2a>
 8005f0e:	f7ff ff49 	bl	8005da4 <SPI_Timer_Status>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1f2      	bne.n	8005efe <rcvr_datablock+0x10>
	if (token != 0xFE)
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
 8005f1a:	2bfe      	cmp	r3, #254	@ 0xfe
 8005f1c:	d001      	beq.n	8005f22 <rcvr_datablock+0x34>
		return 0; /* Function fails if invalid DataStart token or timeout */
 8005f1e:	2300      	movs	r3, #0
 8005f20:	e00a      	b.n	8005f38 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr); /* Store trailing data to the buffer */
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7ff ff69 	bl	8005dfc <rcvr_spi_multi>
	xchg_spi(0xFF);
 8005f2a:	20ff      	movs	r0, #255	@ 0xff
 8005f2c:	f7ff ff50 	bl	8005dd0 <xchg_spi>
	xchg_spi(0xFF); /* Discard CRC */
 8005f30:	20ff      	movs	r0, #255	@ 0xff
 8005f32:	f7ff ff4d 	bl	8005dd0 <xchg_spi>

	return 1; /* Function succeeded */
 8005f36:	2301      	movs	r3, #1
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <xmit_datablock>:
#if _USE_WRITE
static
int xmit_datablock( /* 1:OK, 0:Failed */
const BYTE *buff, /* Ponter to 512 byte data to be sent */
BYTE token /* Token */
) {
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	70fb      	strb	r3, [r7, #3]
	BYTE resp;

	if (!wait_ready(500))
 8005f4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005f50:	f7ff ff84 	bl	8005e5c <wait_ready>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <xmit_datablock+0x1e>
		return 0; /* Wait for card ready */
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e01e      	b.n	8005f9c <xmit_datablock+0x5c>

	xchg_spi(token); /* Send token */
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff ff35 	bl	8005dd0 <xchg_spi>
	if (token != 0xFD) { /* Send data if token is other than StopTran */
 8005f66:	78fb      	ldrb	r3, [r7, #3]
 8005f68:	2bfd      	cmp	r3, #253	@ 0xfd
 8005f6a:	d016      	beq.n	8005f9a <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512); /* Data */
 8005f6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff ff5f 	bl	8005e34 <xmit_spi_multi>
		xchg_spi(0xFF);
 8005f76:	20ff      	movs	r0, #255	@ 0xff
 8005f78:	f7ff ff2a 	bl	8005dd0 <xchg_spi>
		xchg_spi(0xFF); /* Dummy CRC */
 8005f7c:	20ff      	movs	r0, #255	@ 0xff
 8005f7e:	f7ff ff27 	bl	8005dd0 <xchg_spi>

		resp = xchg_spi(0xFF); /* Receive data resp */
 8005f82:	20ff      	movs	r0, #255	@ 0xff
 8005f84:	f7ff ff24 	bl	8005dd0 <xchg_spi>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05)
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
 8005f8e:	f003 031f 	and.w	r3, r3, #31
 8005f92:	2b05      	cmp	r3, #5
 8005f94:	d001      	beq.n	8005f9a <xmit_datablock+0x5a>
			return 0; /* Function fails if the data packet was not accepted */
 8005f96:	2300      	movs	r3, #0
 8005f98:	e000      	b.n	8005f9c <xmit_datablock+0x5c>
	}
	return 1;
 8005f9a:	2301      	movs	r3, #1
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <send_cmd>:
/*-----------------------------------------------------------------------*/

static BYTE send_cmd( /* Return value: R1 resp (bit7==1:Failed to send) */
BYTE cmd, /* Command index */
DWORD arg /* Argument */
) {
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	4603      	mov	r3, r0
 8005fac:	6039      	str	r1, [r7, #0]
 8005fae:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (cmd & 0x80) { /* Send a CMD55 prior to ACMD<n> */
 8005fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	da0e      	bge.n	8005fd6 <send_cmd+0x32>
		cmd &= 0x7F;
 8005fb8:	79fb      	ldrb	r3, [r7, #7]
 8005fba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fbe:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	2037      	movs	r0, #55	@ 0x37
 8005fc4:	f7ff ffee 	bl	8005fa4 <send_cmd>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	73bb      	strb	r3, [r7, #14]
		if (res > 1)
 8005fcc:	7bbb      	ldrb	r3, [r7, #14]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d901      	bls.n	8005fd6 <send_cmd+0x32>
			return res;
 8005fd2:	7bbb      	ldrb	r3, [r7, #14]
 8005fd4:	e051      	b.n	800607a <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
 8005fd8:	2b0c      	cmp	r3, #12
 8005fda:	d008      	beq.n	8005fee <send_cmd+0x4a>
		despiselect();
 8005fdc:	f7ff ff61 	bl	8005ea2 <despiselect>
		if (!spiselect())
 8005fe0:	f7ff ff6c 	bl	8005ebc <spiselect>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <send_cmd+0x4a>
			return 0xFF;
 8005fea:	23ff      	movs	r3, #255	@ 0xff
 8005fec:	e045      	b.n	800607a <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd); /* Start + command index */
 8005fee:	79fb      	ldrb	r3, [r7, #7]
 8005ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7ff feea 	bl	8005dd0 <xchg_spi>
	xchg_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	0e1b      	lsrs	r3, r3, #24
 8006000:	b2db      	uxtb	r3, r3
 8006002:	4618      	mov	r0, r3
 8006004:	f7ff fee4 	bl	8005dd0 <xchg_spi>
	xchg_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	0c1b      	lsrs	r3, r3, #16
 800600c:	b2db      	uxtb	r3, r3
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fede 	bl	8005dd0 <xchg_spi>
	xchg_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	0a1b      	lsrs	r3, r3, #8
 8006018:	b2db      	uxtb	r3, r3
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff fed8 	bl	8005dd0 <xchg_spi>
	xchg_spi((BYTE) arg); /* Argument[7..0] */
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	b2db      	uxtb	r3, r3
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff fed3 	bl	8005dd0 <xchg_spi>
	n = 0x01; /* Dummy CRC + Stop */
 800602a:	2301      	movs	r3, #1
 800602c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 800602e:	79fb      	ldrb	r3, [r7, #7]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <send_cmd+0x94>
		n = 0x95; /* Valid CRC for CMD0(0) */
 8006034:	2395      	movs	r3, #149	@ 0x95
 8006036:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	2b08      	cmp	r3, #8
 800603c:	d101      	bne.n	8006042 <send_cmd+0x9e>
		n = 0x87; /* Valid CRC for CMD8(0x1AA) */
 800603e:	2387      	movs	r3, #135	@ 0x87
 8006040:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006042:	7bfb      	ldrb	r3, [r7, #15]
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff fec3 	bl	8005dd0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12)
 800604a:	79fb      	ldrb	r3, [r7, #7]
 800604c:	2b0c      	cmp	r3, #12
 800604e:	d102      	bne.n	8006056 <send_cmd+0xb2>
		xchg_spi(0xFF); /* Diacard following one byte when CMD12 */
 8006050:	20ff      	movs	r0, #255	@ 0xff
 8006052:	f7ff febd 	bl	8005dd0 <xchg_spi>
	n = 10; /* Wait for response (10 bytes max) */
 8006056:	230a      	movs	r3, #10
 8006058:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800605a:	20ff      	movs	r0, #255	@ 0xff
 800605c:	f7ff feb8 	bl	8005dd0 <xchg_spi>
 8006060:	4603      	mov	r3, r0
 8006062:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006064:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006068:	2b00      	cmp	r3, #0
 800606a:	da05      	bge.n	8006078 <send_cmd+0xd4>
 800606c:	7bfb      	ldrb	r3, [r7, #15]
 800606e:	3b01      	subs	r3, #1
 8006070:	73fb      	strb	r3, [r7, #15]
 8006072:	7bfb      	ldrb	r3, [r7, #15]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1f0      	bne.n	800605a <send_cmd+0xb6>

	return res; /* Return received response */
 8006078:	7bbb      	ldrb	r3, [r7, #14]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize disk drive                                                 */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize(BYTE drv /* Physical drive number (0) */
) {
 8006084:	b590      	push	{r4, r7, lr}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	4603      	mov	r3, r0
 800608c:	71fb      	strb	r3, [r7, #7]

	BYTE n, cmd, ty, ocr[4];

	if (drv != 0)
 800608e:	79fb      	ldrb	r3, [r7, #7]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <USER_SPI_initialize+0x14>
		return STA_NOINIT; /* Supports only drive 0 */
 8006094:	2301      	movs	r3, #1
 8006096:	e0dc      	b.n	8006252 <USER_SPI_initialize+0x1ce>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK)
 8006098:	4b70      	ldr	r3, [pc, #448]	@ (800625c <USER_SPI_initialize+0x1d8>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <USER_SPI_initialize+0x2a>
		return Stat; /* Is card existing in the soket? */
 80060a6:	4b6d      	ldr	r3, [pc, #436]	@ (800625c <USER_SPI_initialize+0x1d8>)
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	e0d1      	b.n	8006252 <USER_SPI_initialize+0x1ce>

	FCLK_SLOW();
 80060ae:	4b6c      	ldr	r3, [pc, #432]	@ (8006260 <USER_SPI_initialize+0x1dc>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80060b8:	4b69      	ldr	r3, [pc, #420]	@ (8006260 <USER_SPI_initialize+0x1dc>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80060c0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--)
 80060c2:	230a      	movs	r3, #10
 80060c4:	73fb      	strb	r3, [r7, #15]
 80060c6:	e005      	b.n	80060d4 <USER_SPI_initialize+0x50>
		xchg_spi(0xFF); /* Send 80 dummy clocks */
 80060c8:	20ff      	movs	r0, #255	@ 0xff
 80060ca:	f7ff fe81 	bl	8005dd0 <xchg_spi>
	for (n = 10; n; n--)
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	3b01      	subs	r3, #1
 80060d2:	73fb      	strb	r3, [r7, #15]
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f6      	bne.n	80060c8 <USER_SPI_initialize+0x44>

	ty = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	737b      	strb	r3, [r7, #13]

	BYTE resp = send_cmd(CMD0, 0);
 80060de:	2100      	movs	r1, #0
 80060e0:	2000      	movs	r0, #0
 80060e2:	f7ff ff5f 	bl	8005fa4 <send_cmd>
 80060e6:	4603      	mov	r3, r0
 80060e8:	733b      	strb	r3, [r7, #12]
	if (send_cmd(CMD0, 0) == 1) { /* Put the card SPI/Idle state */
 80060ea:	2100      	movs	r1, #0
 80060ec:	2000      	movs	r0, #0
 80060ee:	f7ff ff59 	bl	8005fa4 <send_cmd>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	f040 808b 	bne.w	8006210 <USER_SPI_initialize+0x18c>
		SPI_Timer_On(1000); /* Initialization timeout = 1 sec */
 80060fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80060fe:	f7ff fe3d 	bl	8005d7c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2? */
 8006102:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8006106:	2008      	movs	r0, #8
 8006108:	f7ff ff4c 	bl	8005fa4 <send_cmd>
 800610c:	4603      	mov	r3, r0
 800610e:	2b01      	cmp	r3, #1
 8006110:	d151      	bne.n	80061b6 <USER_SPI_initialize+0x132>
			for (n = 0; n < 4; n++)
 8006112:	2300      	movs	r3, #0
 8006114:	73fb      	strb	r3, [r7, #15]
 8006116:	e00d      	b.n	8006134 <USER_SPI_initialize+0xb0>
				ocr[n] = xchg_spi(0xFF); /* Get 32 bit return value of R7 resp */
 8006118:	7bfc      	ldrb	r4, [r7, #15]
 800611a:	20ff      	movs	r0, #255	@ 0xff
 800611c:	f7ff fe58 	bl	8005dd0 <xchg_spi>
 8006120:	4603      	mov	r3, r0
 8006122:	461a      	mov	r2, r3
 8006124:	f104 0310 	add.w	r3, r4, #16
 8006128:	443b      	add	r3, r7
 800612a:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800612e:	7bfb      	ldrb	r3, [r7, #15]
 8006130:	3301      	adds	r3, #1
 8006132:	73fb      	strb	r3, [r7, #15]
 8006134:	7bfb      	ldrb	r3, [r7, #15]
 8006136:	2b03      	cmp	r3, #3
 8006138:	d9ee      	bls.n	8006118 <USER_SPI_initialize+0x94>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* Is the card supports vcc of 2.7-3.6V? */
 800613a:	7abb      	ldrb	r3, [r7, #10]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d167      	bne.n	8006210 <USER_SPI_initialize+0x18c>
 8006140:	7afb      	ldrb	r3, [r7, #11]
 8006142:	2baa      	cmp	r3, #170	@ 0xaa
 8006144:	d164      	bne.n	8006210 <USER_SPI_initialize+0x18c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30))
 8006146:	bf00      	nop
 8006148:	f7ff fe2c 	bl	8005da4 <SPI_Timer_Status>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d007      	beq.n	8006162 <USER_SPI_initialize+0xde>
 8006152:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006156:	20a9      	movs	r0, #169	@ 0xa9
 8006158:	f7ff ff24 	bl	8005fa4 <send_cmd>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1f2      	bne.n	8006148 <USER_SPI_initialize+0xc4>
					; /* Wait for end of initialization with ACMD41(HCS) */
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
 8006162:	f7ff fe1f 	bl	8005da4 <SPI_Timer_Status>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d051      	beq.n	8006210 <USER_SPI_initialize+0x18c>
 800616c:	2100      	movs	r1, #0
 800616e:	203a      	movs	r0, #58	@ 0x3a
 8006170:	f7ff ff18 	bl	8005fa4 <send_cmd>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d14a      	bne.n	8006210 <USER_SPI_initialize+0x18c>
					for (n = 0; n < 4; n++)
 800617a:	2300      	movs	r3, #0
 800617c:	73fb      	strb	r3, [r7, #15]
 800617e:	e00d      	b.n	800619c <USER_SPI_initialize+0x118>
						ocr[n] = xchg_spi(0xFF);
 8006180:	7bfc      	ldrb	r4, [r7, #15]
 8006182:	20ff      	movs	r0, #255	@ 0xff
 8006184:	f7ff fe24 	bl	8005dd0 <xchg_spi>
 8006188:	4603      	mov	r3, r0
 800618a:	461a      	mov	r2, r3
 800618c:	f104 0310 	add.w	r3, r4, #16
 8006190:	443b      	add	r3, r7
 8006192:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8006196:	7bfb      	ldrb	r3, [r7, #15]
 8006198:	3301      	adds	r3, #1
 800619a:	73fb      	strb	r3, [r7, #15]
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d9ee      	bls.n	8006180 <USER_SPI_initialize+0xfc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* Card id SDv2 */
 80061a2:	7a3b      	ldrb	r3, [r7, #8]
 80061a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <USER_SPI_initialize+0x12c>
 80061ac:	230c      	movs	r3, #12
 80061ae:	e000      	b.n	80061b2 <USER_SPI_initialize+0x12e>
 80061b0:	2304      	movs	r3, #4
 80061b2:	737b      	strb	r3, [r7, #13]
 80061b4:	e02c      	b.n	8006210 <USER_SPI_initialize+0x18c>
				}
			}
		} else { /* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) { /* SDv1 or MMC? */
 80061b6:	2100      	movs	r1, #0
 80061b8:	20a9      	movs	r0, #169	@ 0xa9
 80061ba:	f7ff fef3 	bl	8005fa4 <send_cmd>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d804      	bhi.n	80061ce <USER_SPI_initialize+0x14a>
				ty = CT_SD1;
 80061c4:	2302      	movs	r3, #2
 80061c6:	737b      	strb	r3, [r7, #13]
				cmd = ACMD41; /* SDv1 (ACMD41(0)) */
 80061c8:	23a9      	movs	r3, #169	@ 0xa9
 80061ca:	73bb      	strb	r3, [r7, #14]
 80061cc:	e003      	b.n	80061d6 <USER_SPI_initialize+0x152>
			} else {
				ty = CT_MMC;
 80061ce:	2301      	movs	r3, #1
 80061d0:	737b      	strb	r3, [r7, #13]
				cmd = CMD1; /* MMCv3 (CMD1(0)) */
 80061d2:	2301      	movs	r3, #1
 80061d4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0))
 80061d6:	bf00      	nop
 80061d8:	f7ff fde4 	bl	8005da4 <SPI_Timer_Status>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d007      	beq.n	80061f2 <USER_SPI_initialize+0x16e>
 80061e2:	7bbb      	ldrb	r3, [r7, #14]
 80061e4:	2100      	movs	r1, #0
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff fedc 	bl	8005fa4 <send_cmd>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1f2      	bne.n	80061d8 <USER_SPI_initialize+0x154>
				; /* Wait for end of initialization */
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0) /* Set block length: 512 */
 80061f2:	f7ff fdd7 	bl	8005da4 <SPI_Timer_Status>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d007      	beq.n	800620c <USER_SPI_initialize+0x188>
 80061fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006200:	2010      	movs	r0, #16
 8006202:	f7ff fecf 	bl	8005fa4 <send_cmd>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <USER_SPI_initialize+0x18c>
				ty = 0;
 800620c:	2300      	movs	r3, #0
 800620e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty; /* Card type */
 8006210:	4a14      	ldr	r2, [pc, #80]	@ (8006264 <USER_SPI_initialize+0x1e0>)
 8006212:	7b7b      	ldrb	r3, [r7, #13]
 8006214:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006216:	f7ff fe44 	bl	8005ea2 <despiselect>

	if (ty) { /* OK */
 800621a:	7b7b      	ldrb	r3, [r7, #13]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d012      	beq.n	8006246 <USER_SPI_initialize+0x1c2>
		FCLK_FAST(); /* Set fast clock */
 8006220:	4b0f      	ldr	r3, [pc, #60]	@ (8006260 <USER_SPI_initialize+0x1dc>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800622a:	4b0d      	ldr	r3, [pc, #52]	@ (8006260 <USER_SPI_initialize+0x1dc>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0210 	orr.w	r2, r2, #16
 8006232:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT flag */
 8006234:	4b09      	ldr	r3, [pc, #36]	@ (800625c <USER_SPI_initialize+0x1d8>)
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	b2db      	uxtb	r3, r3
 800623a:	f023 0301 	bic.w	r3, r3, #1
 800623e:	b2da      	uxtb	r2, r3
 8006240:	4b06      	ldr	r3, [pc, #24]	@ (800625c <USER_SPI_initialize+0x1d8>)
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	e002      	b.n	800624c <USER_SPI_initialize+0x1c8>
	} else { /* Failed */
		Stat = STA_NOINIT;
 8006246:	4b05      	ldr	r3, [pc, #20]	@ (800625c <USER_SPI_initialize+0x1d8>)
 8006248:	2201      	movs	r2, #1
 800624a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800624c:	4b03      	ldr	r3, [pc, #12]	@ (800625c <USER_SPI_initialize+0x1d8>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	b2db      	uxtb	r3, r3
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	bd90      	pop	{r4, r7, pc}
 800625a:	bf00      	nop
 800625c:	20000050 	.word	0x20000050
 8006260:	20000130 	.word	0x20000130
 8006264:	200001ad 	.word	0x200001ad

08006268 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/
/* Get disk status                                                       */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status(BYTE drv /* Physical drive number (0) */
) {
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	4603      	mov	r3, r0
 8006270:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8006272:	79fb      	ldrb	r3, [r7, #7]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <USER_SPI_status+0x14>
		return STA_NOINIT; /* Supports only drive 0 */
 8006278:	2301      	movs	r3, #1
 800627a:	e002      	b.n	8006282 <USER_SPI_status+0x1a>

	return Stat; /* Return disk status */
 800627c:	4b03      	ldr	r3, [pc, #12]	@ (800628c <USER_SPI_status+0x24>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	b2db      	uxtb	r3, r3
}
 8006282:	4618      	mov	r0, r3
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	bc80      	pop	{r7}
 800628a:	4770      	bx	lr
 800628c:	20000050 	.word	0x20000050

08006290 <USER_SPI_read>:

inline DRESULT USER_SPI_read(BYTE drv, /* Physical drive number (0) */
BYTE *buff, /* Pointer to the data buffer to store read data */
DWORD sector, /* Start sector number (LBA) */
UINT count /* Number of sectors to read (1..128) */
) {
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	607a      	str	r2, [r7, #4]
 800629a:	603b      	str	r3, [r7, #0]
 800629c:	4603      	mov	r3, r0
 800629e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count)
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d102      	bne.n	80062ac <USER_SPI_read+0x1c>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <USER_SPI_read+0x20>
		return RES_PARERR; /* Check parameter */
 80062ac:	2304      	movs	r3, #4
 80062ae:	e04d      	b.n	800634c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT)
 80062b0:	4b28      	ldr	r3, [pc, #160]	@ (8006354 <USER_SPI_read+0xc4>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <USER_SPI_read+0x32>
		return RES_NOTRDY; /* Check if drive is ready */
 80062be:	2303      	movs	r3, #3
 80062c0:	e044      	b.n	800634c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK))
 80062c2:	4b25      	ldr	r3, [pc, #148]	@ (8006358 <USER_SPI_read+0xc8>)
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d102      	bne.n	80062d4 <USER_SPI_read+0x44>
		sector *= 512; /* LBA ot BA conversion (byte addressing cards) */
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	025b      	lsls	r3, r3, #9
 80062d2:	607b      	str	r3, [r7, #4]

	if (count == 1) { /* Single sector read */
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d111      	bne.n	80062fe <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 80062da:	6879      	ldr	r1, [r7, #4]
 80062dc:	2011      	movs	r0, #17
 80062de:	f7ff fe61 	bl	8005fa4 <send_cmd>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d129      	bne.n	800633c <USER_SPI_read+0xac>
		&& rcvr_datablock(buff, 512)) {
 80062e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80062ec:	68b8      	ldr	r0, [r7, #8]
 80062ee:	f7ff fdfe 	bl	8005eee <rcvr_datablock>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d021      	beq.n	800633c <USER_SPI_read+0xac>
			count = 0;
 80062f8:	2300      	movs	r3, #0
 80062fa:	603b      	str	r3, [r7, #0]
 80062fc:	e01e      	b.n	800633c <USER_SPI_read+0xac>
		}
	} else { /* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	2012      	movs	r0, #18
 8006302:	f7ff fe4f 	bl	8005fa4 <send_cmd>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d117      	bne.n	800633c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512))
 800630c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006310:	68b8      	ldr	r0, [r7, #8]
 8006312:	f7ff fdec 	bl	8005eee <rcvr_datablock>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <USER_SPI_read+0xa2>
					break;
				buff += 512;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006322:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	3b01      	subs	r3, #1
 8006328:	603b      	str	r3, [r7, #0]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1ed      	bne.n	800630c <USER_SPI_read+0x7c>
 8006330:	e000      	b.n	8006334 <USER_SPI_read+0xa4>
					break;
 8006332:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8006334:	2100      	movs	r1, #0
 8006336:	200c      	movs	r0, #12
 8006338:	f7ff fe34 	bl	8005fa4 <send_cmd>
		}
	}
	despiselect();
 800633c:	f7ff fdb1 	bl	8005ea2 <despiselect>

	return count ? RES_ERROR : RES_OK; /* Return result */
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	bf14      	ite	ne
 8006346:	2301      	movne	r3, #1
 8006348:	2300      	moveq	r3, #0
 800634a:	b2db      	uxtb	r3, r3
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	20000050 	.word	0x20000050
 8006358:	200001ad 	.word	0x200001ad

0800635c <USER_SPI_write>:
#if _USE_WRITE
inline DRESULT USER_SPI_write(BYTE drv, /* Physical drive number (0) */
const BYTE *buff, /* Ponter to the data to write */
DWORD sector, /* Start sector number (LBA) */
UINT count /* Number of sectors to write (1..128) */
) {
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	4603      	mov	r3, r0
 800636a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count)
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d102      	bne.n	8006378 <USER_SPI_write+0x1c>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <USER_SPI_write+0x20>
		return RES_PARERR; /* Check parameter */
 8006378:	2304      	movs	r3, #4
 800637a:	e063      	b.n	8006444 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT)
 800637c:	4b33      	ldr	r3, [pc, #204]	@ (800644c <USER_SPI_write+0xf0>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	b2db      	uxtb	r3, r3
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <USER_SPI_write+0x32>
		return RES_NOTRDY; /* Check drive status */
 800638a:	2303      	movs	r3, #3
 800638c:	e05a      	b.n	8006444 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT)
 800638e:	4b2f      	ldr	r3, [pc, #188]	@ (800644c <USER_SPI_write+0xf0>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <USER_SPI_write+0x44>
		return RES_WRPRT; /* Check write protect */
 800639c:	2302      	movs	r3, #2
 800639e:	e051      	b.n	8006444 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK))
 80063a0:	4b2b      	ldr	r3, [pc, #172]	@ (8006450 <USER_SPI_write+0xf4>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	f003 0308 	and.w	r3, r3, #8
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d102      	bne.n	80063b2 <USER_SPI_write+0x56>
		sector *= 512; /* LBA ==> BA conversion (byte addressing cards) */
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	025b      	lsls	r3, r3, #9
 80063b0:	607b      	str	r3, [r7, #4]

	if (count == 1) { /* Single sector write */
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d110      	bne.n	80063da <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 80063b8:	6879      	ldr	r1, [r7, #4]
 80063ba:	2018      	movs	r0, #24
 80063bc:	f7ff fdf2 	bl	8005fa4 <send_cmd>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d136      	bne.n	8006434 <USER_SPI_write+0xd8>
		&& xmit_datablock(buff, 0xFE)) {
 80063c6:	21fe      	movs	r1, #254	@ 0xfe
 80063c8:	68b8      	ldr	r0, [r7, #8]
 80063ca:	f7ff fdb9 	bl	8005f40 <xmit_datablock>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d02f      	beq.n	8006434 <USER_SPI_write+0xd8>
			count = 0;
 80063d4:	2300      	movs	r3, #0
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	e02c      	b.n	8006434 <USER_SPI_write+0xd8>
		}
	} else { /* Multiple sector write */
		if (CardType & CT_SDC)
 80063da:	4b1d      	ldr	r3, [pc, #116]	@ (8006450 <USER_SPI_write+0xf4>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	f003 0306 	and.w	r3, r3, #6
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <USER_SPI_write+0x92>
			send_cmd(ACMD23, count); /* Predefine number of sectors */
 80063e6:	6839      	ldr	r1, [r7, #0]
 80063e8:	2097      	movs	r0, #151	@ 0x97
 80063ea:	f7ff fddb 	bl	8005fa4 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 80063ee:	6879      	ldr	r1, [r7, #4]
 80063f0:	2019      	movs	r0, #25
 80063f2:	f7ff fdd7 	bl	8005fa4 <send_cmd>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d11b      	bne.n	8006434 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC))
 80063fc:	21fc      	movs	r1, #252	@ 0xfc
 80063fe:	68b8      	ldr	r0, [r7, #8]
 8006400:	f7ff fd9e 	bl	8005f40 <xmit_datablock>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <USER_SPI_write+0xc4>
					break;
				buff += 512;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006410:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	3b01      	subs	r3, #1
 8006416:	603b      	str	r3, [r7, #0]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1ee      	bne.n	80063fc <USER_SPI_write+0xa0>
 800641e:	e000      	b.n	8006422 <USER_SPI_write+0xc6>
					break;
 8006420:	bf00      	nop
			if (!xmit_datablock(0, 0xFD))
 8006422:	21fd      	movs	r1, #253	@ 0xfd
 8006424:	2000      	movs	r0, #0
 8006426:	f7ff fd8b 	bl	8005f40 <xmit_datablock>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <USER_SPI_write+0xd8>
				count = 1; /* STOP_TRAN token */
 8006430:	2301      	movs	r3, #1
 8006432:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006434:	f7ff fd35 	bl	8005ea2 <despiselect>

	return count ? RES_ERROR : RES_OK; /* Return result */
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	bf14      	ite	ne
 800643e:	2301      	movne	r3, #1
 8006440:	2300      	moveq	r3, #0
 8006442:	b2db      	uxtb	r3, r3
}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	20000050 	.word	0x20000050
 8006450:	200001ad 	.word	0x200001ad

08006454 <USER_SPI_ioctl>:

#if _USE_IOCTL
inline DRESULT USER_SPI_ioctl(BYTE drv, /* Physical drive number (0) */
BYTE cmd, /* Control command code */
void *buff /* Pointer to the conrtol data */
) {
 8006454:	b580      	push	{r7, lr}
 8006456:	b08c      	sub	sp, #48	@ 0x30
 8006458:	af00      	add	r7, sp, #0
 800645a:	4603      	mov	r3, r0
 800645c:	603a      	str	r2, [r7, #0]
 800645e:	71fb      	strb	r3, [r7, #7]
 8006460:	460b      	mov	r3, r1
 8006462:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;

	if (drv)
 8006464:	79fb      	ldrb	r3, [r7, #7]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <USER_SPI_ioctl+0x1a>
		return RES_PARERR; /* Check parameter */
 800646a:	2304      	movs	r3, #4
 800646c:	e15a      	b.n	8006724 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT)
 800646e:	4baf      	ldr	r3, [pc, #700]	@ (800672c <USER_SPI_ioctl+0x2d8>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <USER_SPI_ioctl+0x2c>
		return RES_NOTRDY; /* Check if drive is ready */
 800647c:	2303      	movs	r3, #3
 800647e:	e151      	b.n	8006724 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8006486:	79bb      	ldrb	r3, [r7, #6]
 8006488:	2b04      	cmp	r3, #4
 800648a:	f200 8136 	bhi.w	80066fa <USER_SPI_ioctl+0x2a6>
 800648e:	a201      	add	r2, pc, #4	@ (adr r2, 8006494 <USER_SPI_ioctl+0x40>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064a9 	.word	0x080064a9
 8006498:	080064bd 	.word	0x080064bd
 800649c:	080066fb 	.word	0x080066fb
 80064a0:	08006569 	.word	0x08006569
 80064a4:	0800665f 	.word	0x0800665f
	case CTRL_SYNC: /* Wait for end of internal write process of the drive */
		if (spiselect())
 80064a8:	f7ff fd08 	bl	8005ebc <spiselect>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 8127 	beq.w	8006702 <USER_SPI_ioctl+0x2ae>
			res = RES_OK;
 80064b4:	2300      	movs	r3, #0
 80064b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80064ba:	e122      	b.n	8006702 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT: /* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80064bc:	2100      	movs	r1, #0
 80064be:	2009      	movs	r0, #9
 80064c0:	f7ff fd70 	bl	8005fa4 <send_cmd>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f040 811d 	bne.w	8006706 <USER_SPI_ioctl+0x2b2>
 80064cc:	f107 030c 	add.w	r3, r7, #12
 80064d0:	2110      	movs	r1, #16
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff fd0b 	bl	8005eee <rcvr_datablock>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 8113 	beq.w	8006706 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 80064e0:	7b3b      	ldrb	r3, [r7, #12]
 80064e2:	099b      	lsrs	r3, r3, #6
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d111      	bne.n	800650e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD) csd[8] << 8)
 80064ea:	7d7b      	ldrb	r3, [r7, #21]
 80064ec:	461a      	mov	r2, r3
 80064ee:	7d3b      	ldrb	r3, [r7, #20]
 80064f0:	021b      	lsls	r3, r3, #8
 80064f2:	4413      	add	r3, r2
 80064f4:	461a      	mov	r2, r3
						+ ((DWORD) (csd[7] & 63) << 16) + 1;
 80064f6:	7cfb      	ldrb	r3, [r7, #19]
 80064f8:	041b      	lsls	r3, r3, #16
 80064fa:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80064fe:	4413      	add	r3, r2
				csize = csd[9] + ((WORD) csd[8] << 8)
 8006500:	3301      	adds	r3, #1
 8006502:	61fb      	str	r3, [r7, #28]
				*(DWORD*) buff = csize << 10;
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	029a      	lsls	r2, r3, #10
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	e028      	b.n	8006560 <USER_SPI_ioctl+0x10c>
			} else { /* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1)
 800650e:	7c7b      	ldrb	r3, [r7, #17]
 8006510:	f003 030f 	and.w	r3, r3, #15
 8006514:	b2da      	uxtb	r2, r3
 8006516:	7dbb      	ldrb	r3, [r7, #22]
 8006518:	09db      	lsrs	r3, r3, #7
 800651a:	b2db      	uxtb	r3, r3
 800651c:	4413      	add	r3, r2
 800651e:	b2da      	uxtb	r2, r3
 8006520:	7d7b      	ldrb	r3, [r7, #21]
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	b2db      	uxtb	r3, r3
 8006526:	f003 0306 	and.w	r3, r3, #6
 800652a:	b2db      	uxtb	r3, r3
 800652c:	4413      	add	r3, r2
 800652e:	b2db      	uxtb	r3, r3
 8006530:	3302      	adds	r3, #2
 8006532:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
						+ 2;
				csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8006536:	7d3b      	ldrb	r3, [r7, #20]
 8006538:	099b      	lsrs	r3, r3, #6
 800653a:	b2db      	uxtb	r3, r3
 800653c:	461a      	mov	r2, r3
 800653e:	7cfb      	ldrb	r3, [r7, #19]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	441a      	add	r2, r3
						+ ((WORD) (csd[6] & 3) << 10) + 1;
 8006544:	7cbb      	ldrb	r3, [r7, #18]
 8006546:	029b      	lsls	r3, r3, #10
 8006548:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800654c:	4413      	add	r3, r2
 800654e:	3301      	adds	r3, #1
				csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8006550:	61fb      	str	r3, [r7, #28]
				*(DWORD*) buff = csize << (n - 9);
 8006552:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006556:	3b09      	subs	r3, #9
 8006558:	69fa      	ldr	r2, [r7, #28]
 800655a:	409a      	lsls	r2, r3
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8006566:	e0ce      	b.n	8006706 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE: /* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) { /* SDC ver 2.00 */
 8006568:	4b71      	ldr	r3, [pc, #452]	@ (8006730 <USER_SPI_ioctl+0x2dc>)
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	f003 0304 	and.w	r3, r3, #4
 8006570:	2b00      	cmp	r3, #0
 8006572:	d031      	beq.n	80065d8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 8006574:	2100      	movs	r1, #0
 8006576:	208d      	movs	r0, #141	@ 0x8d
 8006578:	f7ff fd14 	bl	8005fa4 <send_cmd>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	f040 80c3 	bne.w	800670a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006584:	20ff      	movs	r0, #255	@ 0xff
 8006586:	f7ff fc23 	bl	8005dd0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) { /* Read partial block */
 800658a:	f107 030c 	add.w	r3, r7, #12
 800658e:	2110      	movs	r1, #16
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff fcac 	bl	8005eee <rcvr_datablock>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 80b6 	beq.w	800670a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--)
 800659e:	2330      	movs	r3, #48	@ 0x30
 80065a0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80065a4:	e007      	b.n	80065b6 <USER_SPI_ioctl+0x162>
						xchg_spi(0xFF); /* Purge trailing data */
 80065a6:	20ff      	movs	r0, #255	@ 0xff
 80065a8:	f7ff fc12 	bl	8005dd0 <xchg_spi>
					for (n = 64 - 16; n; n--)
 80065ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80065b0:	3b01      	subs	r3, #1
 80065b2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80065b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1f3      	bne.n	80065a6 <USER_SPI_ioctl+0x152>
					*(DWORD*) buff = 16UL << (csd[10] >> 4);
 80065be:	7dbb      	ldrb	r3, [r7, #22]
 80065c0:	091b      	lsrs	r3, r3, #4
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	461a      	mov	r2, r3
 80065c6:	2310      	movs	r3, #16
 80065c8:	fa03 f202 	lsl.w	r2, r3, r2
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
											+ ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80065d6:	e098      	b.n	800670a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) { /* Read CSD */
 80065d8:	2100      	movs	r1, #0
 80065da:	2009      	movs	r0, #9
 80065dc:	f7ff fce2 	bl	8005fa4 <send_cmd>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f040 8091 	bne.w	800670a <USER_SPI_ioctl+0x2b6>
 80065e8:	f107 030c 	add.w	r3, r7, #12
 80065ec:	2110      	movs	r1, #16
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff fc7d 	bl	8005eee <rcvr_datablock>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f000 8087 	beq.w	800670a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) { /* SDC ver 1.XX */
 80065fc:	4b4c      	ldr	r3, [pc, #304]	@ (8006730 <USER_SPI_ioctl+0x2dc>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d012      	beq.n	800662e <USER_SPI_ioctl+0x1da>
					*(DWORD*) buff = (((csd[10] & 63) << 1)
 8006608:	7dbb      	ldrb	r3, [r7, #22]
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
							+ ((WORD) (csd[11] & 128) >> 7) + 1)
 8006610:	7dfa      	ldrb	r2, [r7, #23]
 8006612:	09d2      	lsrs	r2, r2, #7
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	4413      	add	r3, r2
 8006618:	1c5a      	adds	r2, r3, #1
							<< ((csd[13] >> 6) - 1);
 800661a:	7e7b      	ldrb	r3, [r7, #25]
 800661c:	099b      	lsrs	r3, r3, #6
 800661e:	b2db      	uxtb	r3, r3
 8006620:	3b01      	subs	r3, #1
 8006622:	fa02 f303 	lsl.w	r3, r2, r3
 8006626:	461a      	mov	r2, r3
					*(DWORD*) buff = (((csd[10] & 63) << 1)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	e013      	b.n	8006656 <USER_SPI_ioctl+0x202>
							((WORD) ((csd[10] & 124) >> 2) + 1)
 800662e:	7dbb      	ldrb	r3, [r7, #22]
 8006630:	109b      	asrs	r3, r3, #2
 8006632:	b29b      	uxth	r3, r3
 8006634:	f003 031f 	and.w	r3, r3, #31
 8006638:	3301      	adds	r3, #1
									* (((csd[11] & 3) << 3)
 800663a:	7dfa      	ldrb	r2, [r7, #23]
 800663c:	00d2      	lsls	r2, r2, #3
 800663e:	f002 0218 	and.w	r2, r2, #24
											+ ((csd[11] & 224) >> 5) + 1);
 8006642:	7df9      	ldrb	r1, [r7, #23]
 8006644:	0949      	lsrs	r1, r1, #5
 8006646:	b2c9      	uxtb	r1, r1
 8006648:	440a      	add	r2, r1
 800664a:	3201      	adds	r2, #1
									* (((csd[11] & 3) << 3)
 800664c:	fb02 f303 	mul.w	r3, r2, r3
 8006650:	461a      	mov	r2, r3
					*(DWORD*) buff =
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800665c:	e055      	b.n	800670a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM: /* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC))
 800665e:	4b34      	ldr	r3, [pc, #208]	@ (8006730 <USER_SPI_ioctl+0x2dc>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	f003 0306 	and.w	r3, r3, #6
 8006666:	2b00      	cmp	r3, #0
 8006668:	d051      	beq.n	800670e <USER_SPI_ioctl+0x2ba>
			break; /* Check if the card is SDC */
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd))
 800666a:	f107 020c 	add.w	r2, r7, #12
 800666e:	79fb      	ldrb	r3, [r7, #7]
 8006670:	210b      	movs	r1, #11
 8006672:	4618      	mov	r0, r3
 8006674:	f7ff feee 	bl	8006454 <USER_SPI_ioctl>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d149      	bne.n	8006712 <USER_SPI_ioctl+0x2be>
			break; /* Get CSD */
		if (!(csd[0] >> 6) && !(csd[10] & 0x40))
 800667e:	7b3b      	ldrb	r3, [r7, #12]
 8006680:	099b      	lsrs	r3, r3, #6
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d104      	bne.n	8006692 <USER_SPI_ioctl+0x23e>
 8006688:	7dbb      	ldrb	r3, [r7, #22]
 800668a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	d041      	beq.n	8006716 <USER_SPI_ioctl+0x2c2>
			break; /* Check if sector erase can be applied to the card */
		dp = buff;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	623b      	str	r3, [r7, #32]
		st = dp[0];
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	62bb      	str	r3, [r7, #40]	@ 0x28
		ed = dp[1]; /* Load sector block */
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80066a2:	4b23      	ldr	r3, [pc, #140]	@ (8006730 <USER_SPI_ioctl+0x2dc>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d105      	bne.n	80066ba <USER_SPI_ioctl+0x266>
			st *= 512;
 80066ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b0:	025b      	lsls	r3, r3, #9
 80066b2:	62bb      	str	r3, [r7, #40]	@ 0x28
			ed *= 512;
 80066b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b6:	025b      	lsls	r3, r3, #9
 80066b8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0
 80066ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066bc:	2020      	movs	r0, #32
 80066be:	f7ff fc71 	bl	8005fa4 <send_cmd>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d128      	bne.n	800671a <USER_SPI_ioctl+0x2c6>
 80066c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066ca:	2021      	movs	r0, #33	@ 0x21
 80066cc:	f7ff fc6a 	bl	8005fa4 <send_cmd>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d121      	bne.n	800671a <USER_SPI_ioctl+0x2c6>
				&& send_cmd(CMD38, 0) == 0 && wait_ready(30000)) { /* Erase sector block */
 80066d6:	2100      	movs	r1, #0
 80066d8:	2026      	movs	r0, #38	@ 0x26
 80066da:	f7ff fc63 	bl	8005fa4 <send_cmd>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d11a      	bne.n	800671a <USER_SPI_ioctl+0x2c6>
 80066e4:	f247 5030 	movw	r0, #30000	@ 0x7530
 80066e8:	f7ff fbb8 	bl	8005e5c <wait_ready>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d013      	beq.n	800671a <USER_SPI_ioctl+0x2c6>
			res = RES_OK; /* FatFs does not check result of this command */
 80066f2:	2300      	movs	r3, #0
 80066f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80066f8:	e00f      	b.n	800671a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80066fa:	2304      	movs	r3, #4
 80066fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006700:	e00c      	b.n	800671c <USER_SPI_ioctl+0x2c8>
		break;
 8006702:	bf00      	nop
 8006704:	e00a      	b.n	800671c <USER_SPI_ioctl+0x2c8>
		break;
 8006706:	bf00      	nop
 8006708:	e008      	b.n	800671c <USER_SPI_ioctl+0x2c8>
		break;
 800670a:	bf00      	nop
 800670c:	e006      	b.n	800671c <USER_SPI_ioctl+0x2c8>
			break; /* Check if the card is SDC */
 800670e:	bf00      	nop
 8006710:	e004      	b.n	800671c <USER_SPI_ioctl+0x2c8>
			break; /* Get CSD */
 8006712:	bf00      	nop
 8006714:	e002      	b.n	800671c <USER_SPI_ioctl+0x2c8>
			break; /* Check if sector erase can be applied to the card */
 8006716:	bf00      	nop
 8006718:	e000      	b.n	800671c <USER_SPI_ioctl+0x2c8>
		break;
 800671a:	bf00      	nop
	}

	despiselect();
 800671c:	f7ff fbc1 	bl	8005ea2 <despiselect>

	return res;
 8006720:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006724:	4618      	mov	r0, r3
 8006726:	3730      	adds	r7, #48	@ 0x30
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	20000050 	.word	0x20000050
 8006730:	200001ad 	.word	0x200001ad

08006734 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	4603      	mov	r3, r0
 800673c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800673e:	79fb      	ldrb	r3, [r7, #7]
 8006740:	4a08      	ldr	r2, [pc, #32]	@ (8006764 <disk_status+0x30>)
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	79fa      	ldrb	r2, [r7, #7]
 800674c:	4905      	ldr	r1, [pc, #20]	@ (8006764 <disk_status+0x30>)
 800674e:	440a      	add	r2, r1
 8006750:	7a12      	ldrb	r2, [r2, #8]
 8006752:	4610      	mov	r0, r2
 8006754:	4798      	blx	r3
 8006756:	4603      	mov	r3, r0
 8006758:	73fb      	strb	r3, [r7, #15]
  return stat;
 800675a:	7bfb      	ldrb	r3, [r7, #15]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	200001e0 	.word	0x200001e0

08006768 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	4603      	mov	r3, r0
 8006770:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006776:	79fb      	ldrb	r3, [r7, #7]
 8006778:	4a0d      	ldr	r2, [pc, #52]	@ (80067b0 <disk_initialize+0x48>)
 800677a:	5cd3      	ldrb	r3, [r2, r3]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d111      	bne.n	80067a4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006780:	79fb      	ldrb	r3, [r7, #7]
 8006782:	4a0b      	ldr	r2, [pc, #44]	@ (80067b0 <disk_initialize+0x48>)
 8006784:	2101      	movs	r1, #1
 8006786:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	4a09      	ldr	r2, [pc, #36]	@ (80067b0 <disk_initialize+0x48>)
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	79fa      	ldrb	r2, [r7, #7]
 8006796:	4906      	ldr	r1, [pc, #24]	@ (80067b0 <disk_initialize+0x48>)
 8006798:	440a      	add	r2, r1
 800679a:	7a12      	ldrb	r2, [r2, #8]
 800679c:	4610      	mov	r0, r2
 800679e:	4798      	blx	r3
 80067a0:	4603      	mov	r3, r0
 80067a2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	200001e0 	.word	0x200001e0

080067b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80067b4:	b590      	push	{r4, r7, lr}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	607a      	str	r2, [r7, #4]
 80067be:	603b      	str	r3, [r7, #0]
 80067c0:	4603      	mov	r3, r0
 80067c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	4a0a      	ldr	r2, [pc, #40]	@ (80067f0 <disk_read+0x3c>)
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	689c      	ldr	r4, [r3, #8]
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
 80067d2:	4a07      	ldr	r2, [pc, #28]	@ (80067f0 <disk_read+0x3c>)
 80067d4:	4413      	add	r3, r2
 80067d6:	7a18      	ldrb	r0, [r3, #8]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	68b9      	ldr	r1, [r7, #8]
 80067de:	47a0      	blx	r4
 80067e0:	4603      	mov	r3, r0
 80067e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80067e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	371c      	adds	r7, #28
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd90      	pop	{r4, r7, pc}
 80067ee:	bf00      	nop
 80067f0:	200001e0 	.word	0x200001e0

080067f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80067f4:	b590      	push	{r4, r7, lr}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60b9      	str	r1, [r7, #8]
 80067fc:	607a      	str	r2, [r7, #4]
 80067fe:	603b      	str	r3, [r7, #0]
 8006800:	4603      	mov	r3, r0
 8006802:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	4a0a      	ldr	r2, [pc, #40]	@ (8006830 <disk_write+0x3c>)
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	68dc      	ldr	r4, [r3, #12]
 8006810:	7bfb      	ldrb	r3, [r7, #15]
 8006812:	4a07      	ldr	r2, [pc, #28]	@ (8006830 <disk_write+0x3c>)
 8006814:	4413      	add	r3, r2
 8006816:	7a18      	ldrb	r0, [r3, #8]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	68b9      	ldr	r1, [r7, #8]
 800681e:	47a0      	blx	r4
 8006820:	4603      	mov	r3, r0
 8006822:	75fb      	strb	r3, [r7, #23]
  return res;
 8006824:	7dfb      	ldrb	r3, [r7, #23]
}
 8006826:	4618      	mov	r0, r3
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	bd90      	pop	{r4, r7, pc}
 800682e:	bf00      	nop
 8006830:	200001e0 	.word	0x200001e0

08006834 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	4603      	mov	r3, r0
 800683c:	603a      	str	r2, [r7, #0]
 800683e:	71fb      	strb	r3, [r7, #7]
 8006840:	460b      	mov	r3, r1
 8006842:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	4a09      	ldr	r2, [pc, #36]	@ (800686c <disk_ioctl+0x38>)
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	79fa      	ldrb	r2, [r7, #7]
 8006852:	4906      	ldr	r1, [pc, #24]	@ (800686c <disk_ioctl+0x38>)
 8006854:	440a      	add	r2, r1
 8006856:	7a10      	ldrb	r0, [r2, #8]
 8006858:	79b9      	ldrb	r1, [r7, #6]
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	4798      	blx	r3
 800685e:	4603      	mov	r3, r0
 8006860:	73fb      	strb	r3, [r7, #15]
  return res;
 8006862:	7bfb      	ldrb	r3, [r7, #15]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	200001e0 	.word	0x200001e0

08006870 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	3301      	adds	r3, #1
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006880:	89fb      	ldrh	r3, [r7, #14]
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	b21a      	sxth	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	b21b      	sxth	r3, r3
 800688c:	4313      	orrs	r3, r2
 800688e:	b21b      	sxth	r3, r3
 8006890:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006892:	89fb      	ldrh	r3, [r7, #14]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	bc80      	pop	{r7}
 800689c:	4770      	bx	lr

0800689e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800689e:	b480      	push	{r7}
 80068a0:	b085      	sub	sp, #20
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	3303      	adds	r3, #3
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	021b      	lsls	r3, r3, #8
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	3202      	adds	r2, #2
 80068b6:	7812      	ldrb	r2, [r2, #0]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	021b      	lsls	r3, r3, #8
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	3201      	adds	r2, #1
 80068c4:	7812      	ldrb	r2, [r2, #0]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	021b      	lsls	r3, r3, #8
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	7812      	ldrb	r2, [r2, #0]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	60fb      	str	r3, [r7, #12]
	return rv;
 80068d6:	68fb      	ldr	r3, [r7, #12]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc80      	pop	{r7}
 80068e0:	4770      	bx	lr

080068e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	460b      	mov	r3, r1
 80068ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	887a      	ldrh	r2, [r7, #2]
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	887b      	ldrh	r3, [r7, #2]
 80068fc:	0a1b      	lsrs	r3, r3, #8
 80068fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	607a      	str	r2, [r7, #4]
 8006906:	887a      	ldrh	r2, [r7, #2]
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	bc80      	pop	{r7}
 8006914:	4770      	bx	lr

08006916 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	607a      	str	r2, [r7, #4]
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	0a1b      	lsrs	r3, r3, #8
 8006930:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	701a      	strb	r2, [r3, #0]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	0a1b      	lsrs	r3, r3, #8
 8006942:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	607a      	str	r2, [r7, #4]
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	0a1b      	lsrs	r3, r3, #8
 8006954:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	701a      	strb	r2, [r3, #0]
}
 8006962:	bf00      	nop
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	bc80      	pop	{r7}
 800696a:	4770      	bx	lr

0800696c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800696c:	b480      	push	{r7}
 800696e:	b087      	sub	sp, #28
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00d      	beq.n	80069a2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	1c53      	adds	r3, r2, #1
 800698a:	613b      	str	r3, [r7, #16]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	1c59      	adds	r1, r3, #1
 8006990:	6179      	str	r1, [r7, #20]
 8006992:	7812      	ldrb	r2, [r2, #0]
 8006994:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	3b01      	subs	r3, #1
 800699a:	607b      	str	r3, [r7, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1f1      	bne.n	8006986 <mem_cpy+0x1a>
	}
}
 80069a2:	bf00      	nop
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bc80      	pop	{r7}
 80069aa:	4770      	bx	lr

080069ac <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	617a      	str	r2, [r7, #20]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	b2d2      	uxtb	r2, r2
 80069c6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	607b      	str	r3, [r7, #4]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1f3      	bne.n	80069bc <mem_set+0x10>
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop
 80069d8:	371c      	adds	r7, #28
 80069da:	46bd      	mov	sp, r7
 80069dc:	bc80      	pop	{r7}
 80069de:	4770      	bx	lr

080069e0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80069e0:	b480      	push	{r7}
 80069e2:	b089      	sub	sp, #36	@ 0x24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	61fb      	str	r3, [r7, #28]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80069f4:	2300      	movs	r3, #0
 80069f6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	61fa      	str	r2, [r7, #28]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	4619      	mov	r1, r3
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	61ba      	str	r2, [r7, #24]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	1acb      	subs	r3, r1, r3
 8006a0c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	3b01      	subs	r3, #1
 8006a12:	607b      	str	r3, [r7, #4]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <mem_cmp+0x40>
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d0eb      	beq.n	80069f8 <mem_cmp+0x18>

	return r;
 8006a20:	697b      	ldr	r3, [r7, #20]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3724      	adds	r7, #36	@ 0x24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bc80      	pop	{r7}
 8006a2a:	4770      	bx	lr

08006a2c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006a36:	e002      	b.n	8006a3e <chk_chr+0x12>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	607b      	str	r3, [r7, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d005      	beq.n	8006a52 <chk_chr+0x26>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d1f2      	bne.n	8006a38 <chk_chr+0xc>
	return *str;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	781b      	ldrb	r3, [r3, #0]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bc80      	pop	{r7}
 8006a5e:	4770      	bx	lr

08006a60 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60bb      	str	r3, [r7, #8]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	e029      	b.n	8006ac8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006a74:	4a26      	ldr	r2, [pc, #152]	@ (8006b10 <chk_lock+0xb0>)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	011b      	lsls	r3, r3, #4
 8006a7a:	4413      	add	r3, r2
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d01d      	beq.n	8006abe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006a82:	4a23      	ldr	r2, [pc, #140]	@ (8006b10 <chk_lock+0xb0>)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	4413      	add	r3, r2
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d116      	bne.n	8006ac2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006a94:	4a1e      	ldr	r2, [pc, #120]	@ (8006b10 <chk_lock+0xb0>)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	011b      	lsls	r3, r3, #4
 8006a9a:	4413      	add	r3, r2
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d10c      	bne.n	8006ac2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006aa8:	4a19      	ldr	r2, [pc, #100]	@ (8006b10 <chk_lock+0xb0>)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	4413      	add	r3, r2
 8006ab0:	3308      	adds	r3, #8
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d102      	bne.n	8006ac2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006abc:	e007      	b.n	8006ace <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d9d2      	bls.n	8006a74 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d109      	bne.n	8006ae8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d102      	bne.n	8006ae0 <chk_lock+0x80>
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d101      	bne.n	8006ae4 <chk_lock+0x84>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	e010      	b.n	8006b06 <chk_lock+0xa6>
 8006ae4:	2312      	movs	r3, #18
 8006ae6:	e00e      	b.n	8006b06 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d108      	bne.n	8006b00 <chk_lock+0xa0>
 8006aee:	4a08      	ldr	r2, [pc, #32]	@ (8006b10 <chk_lock+0xb0>)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	011b      	lsls	r3, r3, #4
 8006af4:	4413      	add	r3, r2
 8006af6:	330c      	adds	r3, #12
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006afe:	d101      	bne.n	8006b04 <chk_lock+0xa4>
 8006b00:	2310      	movs	r3, #16
 8006b02:	e000      	b.n	8006b06 <chk_lock+0xa6>
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr
 8006b10:	200001c0 	.word	0x200001c0

08006b14 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	607b      	str	r3, [r7, #4]
 8006b1e:	e002      	b.n	8006b26 <enq_lock+0x12>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3301      	adds	r3, #1
 8006b24:	607b      	str	r3, [r7, #4]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d806      	bhi.n	8006b3a <enq_lock+0x26>
 8006b2c:	4a08      	ldr	r2, [pc, #32]	@ (8006b50 <enq_lock+0x3c>)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	4413      	add	r3, r2
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1f2      	bne.n	8006b20 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	bf14      	ite	ne
 8006b40:	2301      	movne	r3, #1
 8006b42:	2300      	moveq	r3, #0
 8006b44:	b2db      	uxtb	r3, r3
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bc80      	pop	{r7}
 8006b4e:	4770      	bx	lr
 8006b50:	200001c0 	.word	0x200001c0

08006b54 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	e01f      	b.n	8006ba4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006b64:	4a41      	ldr	r2, [pc, #260]	@ (8006c6c <inc_lock+0x118>)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	011b      	lsls	r3, r3, #4
 8006b6a:	4413      	add	r3, r2
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d113      	bne.n	8006b9e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006b76:	4a3d      	ldr	r2, [pc, #244]	@ (8006c6c <inc_lock+0x118>)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	4413      	add	r3, r2
 8006b7e:	3304      	adds	r3, #4
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d109      	bne.n	8006b9e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006b8a:	4a38      	ldr	r2, [pc, #224]	@ (8006c6c <inc_lock+0x118>)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	011b      	lsls	r3, r3, #4
 8006b90:	4413      	add	r3, r2
 8006b92:	3308      	adds	r3, #8
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d006      	beq.n	8006bac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d9dc      	bls.n	8006b64 <inc_lock+0x10>
 8006baa:	e000      	b.n	8006bae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006bac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d132      	bne.n	8006c1a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	60fb      	str	r3, [r7, #12]
 8006bb8:	e002      	b.n	8006bc0 <inc_lock+0x6c>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d806      	bhi.n	8006bd4 <inc_lock+0x80>
 8006bc6:	4a29      	ldr	r2, [pc, #164]	@ (8006c6c <inc_lock+0x118>)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	011b      	lsls	r3, r3, #4
 8006bcc:	4413      	add	r3, r2
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1f2      	bne.n	8006bba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d101      	bne.n	8006bde <inc_lock+0x8a>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	e040      	b.n	8006c60 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	4922      	ldr	r1, [pc, #136]	@ (8006c6c <inc_lock+0x118>)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	011b      	lsls	r3, r3, #4
 8006be8:	440b      	add	r3, r1
 8006bea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	491e      	ldr	r1, [pc, #120]	@ (8006c6c <inc_lock+0x118>)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	011b      	lsls	r3, r3, #4
 8006bf6:	440b      	add	r3, r1
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	695a      	ldr	r2, [r3, #20]
 8006c00:	491a      	ldr	r1, [pc, #104]	@ (8006c6c <inc_lock+0x118>)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	011b      	lsls	r3, r3, #4
 8006c06:	440b      	add	r3, r1
 8006c08:	3308      	adds	r3, #8
 8006c0a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006c0c:	4a17      	ldr	r2, [pc, #92]	@ (8006c6c <inc_lock+0x118>)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	011b      	lsls	r3, r3, #4
 8006c12:	4413      	add	r3, r2
 8006c14:	330c      	adds	r3, #12
 8006c16:	2200      	movs	r2, #0
 8006c18:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d009      	beq.n	8006c34 <inc_lock+0xe0>
 8006c20:	4a12      	ldr	r2, [pc, #72]	@ (8006c6c <inc_lock+0x118>)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	011b      	lsls	r3, r3, #4
 8006c26:	4413      	add	r3, r2
 8006c28:	330c      	adds	r3, #12
 8006c2a:	881b      	ldrh	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <inc_lock+0xe0>
 8006c30:	2300      	movs	r3, #0
 8006c32:	e015      	b.n	8006c60 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d108      	bne.n	8006c4c <inc_lock+0xf8>
 8006c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8006c6c <inc_lock+0x118>)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	4413      	add	r3, r2
 8006c42:	330c      	adds	r3, #12
 8006c44:	881b      	ldrh	r3, [r3, #0]
 8006c46:	3301      	adds	r3, #1
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	e001      	b.n	8006c50 <inc_lock+0xfc>
 8006c4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c50:	4906      	ldr	r1, [pc, #24]	@ (8006c6c <inc_lock+0x118>)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	011b      	lsls	r3, r3, #4
 8006c56:	440b      	add	r3, r1
 8006c58:	330c      	adds	r3, #12
 8006c5a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	3301      	adds	r3, #1
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bc80      	pop	{r7}
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	200001c0 	.word	0x200001c0

08006c70 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	607b      	str	r3, [r7, #4]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d825      	bhi.n	8006cd0 <dec_lock+0x60>
		n = Files[i].ctr;
 8006c84:	4a16      	ldr	r2, [pc, #88]	@ (8006ce0 <dec_lock+0x70>)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	011b      	lsls	r3, r3, #4
 8006c8a:	4413      	add	r3, r2
 8006c8c:	330c      	adds	r3, #12
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006c92:	89fb      	ldrh	r3, [r7, #14]
 8006c94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c98:	d101      	bne.n	8006c9e <dec_lock+0x2e>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006c9e:	89fb      	ldrh	r3, [r7, #14]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <dec_lock+0x3a>
 8006ca4:	89fb      	ldrh	r3, [r7, #14]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006caa:	4a0d      	ldr	r2, [pc, #52]	@ (8006ce0 <dec_lock+0x70>)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	011b      	lsls	r3, r3, #4
 8006cb0:	4413      	add	r3, r2
 8006cb2:	330c      	adds	r3, #12
 8006cb4:	89fa      	ldrh	r2, [r7, #14]
 8006cb6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006cb8:	89fb      	ldrh	r3, [r7, #14]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d105      	bne.n	8006cca <dec_lock+0x5a>
 8006cbe:	4a08      	ldr	r2, [pc, #32]	@ (8006ce0 <dec_lock+0x70>)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	4413      	add	r3, r2
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	737b      	strb	r3, [r7, #13]
 8006cce:	e001      	b.n	8006cd4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006cd4:	7b7b      	ldrb	r3, [r7, #13]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bc80      	pop	{r7}
 8006cde:	4770      	bx	lr
 8006ce0:	200001c0 	.word	0x200001c0

08006ce4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	e010      	b.n	8006d14 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8006d28 <clear_lock+0x44>)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	011b      	lsls	r3, r3, #4
 8006cf8:	4413      	add	r3, r2
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d105      	bne.n	8006d0e <clear_lock+0x2a>
 8006d02:	4a09      	ldr	r2, [pc, #36]	@ (8006d28 <clear_lock+0x44>)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	011b      	lsls	r3, r3, #4
 8006d08:	4413      	add	r3, r2
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3301      	adds	r3, #1
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d9eb      	bls.n	8006cf2 <clear_lock+0xe>
	}
}
 8006d1a:	bf00      	nop
 8006d1c:	bf00      	nop
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bc80      	pop	{r7}
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	200001c0 	.word	0x200001c0

08006d2c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	78db      	ldrb	r3, [r3, #3]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d034      	beq.n	8006daa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d44:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	7858      	ldrb	r0, [r3, #1]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006d50:	2301      	movs	r3, #1
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	f7ff fd4e 	bl	80067f4 <disk_write>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	73fb      	strb	r3, [r7, #15]
 8006d62:	e022      	b.n	8006daa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	1ad2      	subs	r2, r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d217      	bcs.n	8006daa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	789b      	ldrb	r3, [r3, #2]
 8006d7e:	613b      	str	r3, [r7, #16]
 8006d80:	e010      	b.n	8006da4 <sync_window+0x78>
					wsect += fs->fsize;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4413      	add	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	7858      	ldrb	r0, [r3, #1]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006d96:	2301      	movs	r3, #1
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	f7ff fd2b 	bl	80067f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	3b01      	subs	r3, #1
 8006da2:	613b      	str	r3, [r7, #16]
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d8eb      	bhi.n	8006d82 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d01b      	beq.n	8006e04 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7ff ffad 	bl	8006d2c <sync_window>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d113      	bne.n	8006e04 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	7858      	ldrb	r0, [r3, #1]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006de6:	2301      	movs	r3, #1
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	f7ff fce3 	bl	80067b4 <disk_read>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d004      	beq.n	8006dfe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006df4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006df8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	683a      	ldr	r2, [r7, #0]
 8006e02:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
	...

08006e10 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7ff ff87 	bl	8006d2c <sync_window>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d158      	bne.n	8006eda <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d148      	bne.n	8006ec2 <sync_fs+0xb2>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	791b      	ldrb	r3, [r3, #4]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d144      	bne.n	8006ec2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3330      	adds	r3, #48	@ 0x30
 8006e3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e40:	2100      	movs	r1, #0
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7ff fdb2 	bl	80069ac <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3330      	adds	r3, #48	@ 0x30
 8006e4c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006e50:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7ff fd44 	bl	80068e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	3330      	adds	r3, #48	@ 0x30
 8006e5e:	4921      	ldr	r1, [pc, #132]	@ (8006ee4 <sync_fs+0xd4>)
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff fd58 	bl	8006916 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3330      	adds	r3, #48	@ 0x30
 8006e6a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006e6e:	491e      	ldr	r1, [pc, #120]	@ (8006ee8 <sync_fs+0xd8>)
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff fd50 	bl	8006916 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	3330      	adds	r3, #48	@ 0x30
 8006e7a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	4619      	mov	r1, r3
 8006e84:	4610      	mov	r0, r2
 8006e86:	f7ff fd46 	bl	8006916 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	3330      	adds	r3, #48	@ 0x30
 8006e8e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	4619      	mov	r1, r3
 8006e98:	4610      	mov	r0, r2
 8006e9a:	f7ff fd3c 	bl	8006916 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	7858      	ldrb	r0, [r3, #1]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	f7ff fc9c 	bl	80067f4 <disk_write>
			fs->fsi_flag = 0;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	785b      	ldrb	r3, [r3, #1]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2100      	movs	r1, #0
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7ff fcb2 	bl	8006834 <disk_ioctl>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <sync_fs+0xca>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	41615252 	.word	0x41615252
 8006ee8:	61417272 	.word	0x61417272

08006eec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	3b02      	subs	r3, #2
 8006efa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	3b02      	subs	r3, #2
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d301      	bcc.n	8006f0c <clust2sect+0x20>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e008      	b.n	8006f1e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	895b      	ldrh	r3, [r3, #10]
 8006f10:	461a      	mov	r2, r3
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	fb03 f202 	mul.w	r2, r3, r2
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1c:	4413      	add	r3, r2
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bc80      	pop	{r7}
 8006f26:	4770      	bx	lr

08006f28 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d904      	bls.n	8006f48 <get_fat+0x20>
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d302      	bcc.n	8006f4e <get_fat+0x26>
		val = 1;	/* Internal error */
 8006f48:	2301      	movs	r3, #1
 8006f4a:	617b      	str	r3, [r7, #20]
 8006f4c:	e08e      	b.n	800706c <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006f4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006f52:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	d061      	beq.n	8007020 <get_fat+0xf8>
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	dc7b      	bgt.n	8007058 <get_fat+0x130>
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d002      	beq.n	8006f6a <get_fat+0x42>
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d041      	beq.n	8006fec <get_fat+0xc4>
 8006f68:	e076      	b.n	8007058 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	60fb      	str	r3, [r7, #12]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	085b      	lsrs	r3, r3, #1
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	4413      	add	r3, r2
 8006f76:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	6a1a      	ldr	r2, [r3, #32]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	0a5b      	lsrs	r3, r3, #9
 8006f80:	4413      	add	r3, r2
 8006f82:	4619      	mov	r1, r3
 8006f84:	6938      	ldr	r0, [r7, #16]
 8006f86:	f7ff ff15 	bl	8006db4 <move_window>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d166      	bne.n	800705e <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	60fa      	str	r2, [r7, #12]
 8006f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006fa2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	6a1a      	ldr	r2, [r3, #32]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	0a5b      	lsrs	r3, r3, #9
 8006fac:	4413      	add	r3, r2
 8006fae:	4619      	mov	r1, r3
 8006fb0:	6938      	ldr	r0, [r7, #16]
 8006fb2:	f7ff feff 	bl	8006db4 <move_window>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d152      	bne.n	8007062 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006fca:	021b      	lsls	r3, r3, #8
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <get_fat+0xba>
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	091b      	lsrs	r3, r3, #4
 8006fe0:	e002      	b.n	8006fe8 <get_fat+0xc0>
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fe8:	617b      	str	r3, [r7, #20]
			break;
 8006fea:	e03f      	b.n	800706c <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	6a1a      	ldr	r2, [r3, #32]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	0a1b      	lsrs	r3, r3, #8
 8006ff4:	4413      	add	r3, r2
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6938      	ldr	r0, [r7, #16]
 8006ffa:	f7ff fedb 	bl	8006db4 <move_window>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d130      	bne.n	8007066 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007012:	4413      	add	r3, r2
 8007014:	4618      	mov	r0, r3
 8007016:	f7ff fc2b 	bl	8006870 <ld_word>
 800701a:	4603      	mov	r3, r0
 800701c:	617b      	str	r3, [r7, #20]
			break;
 800701e:	e025      	b.n	800706c <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	6a1a      	ldr	r2, [r3, #32]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	09db      	lsrs	r3, r3, #7
 8007028:	4413      	add	r3, r2
 800702a:	4619      	mov	r1, r3
 800702c:	6938      	ldr	r0, [r7, #16]
 800702e:	f7ff fec1 	bl	8006db4 <move_window>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d118      	bne.n	800706a <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007046:	4413      	add	r3, r2
 8007048:	4618      	mov	r0, r3
 800704a:	f7ff fc28 	bl	800689e <ld_dword>
 800704e:	4603      	mov	r3, r0
 8007050:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007054:	617b      	str	r3, [r7, #20]
			break;
 8007056:	e009      	b.n	800706c <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007058:	2301      	movs	r3, #1
 800705a:	617b      	str	r3, [r7, #20]
 800705c:	e006      	b.n	800706c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800705e:	bf00      	nop
 8007060:	e004      	b.n	800706c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007062:	bf00      	nop
 8007064:	e002      	b.n	800706c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007066:	bf00      	nop
 8007068:	e000      	b.n	800706c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800706a:	bf00      	nop
		}
	}

	return val;
 800706c:	697b      	ldr	r3, [r7, #20]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3718      	adds	r7, #24
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007076:	b590      	push	{r4, r7, lr}
 8007078:	b089      	sub	sp, #36	@ 0x24
 800707a:	af00      	add	r7, sp, #0
 800707c:	60f8      	str	r0, [r7, #12]
 800707e:	60b9      	str	r1, [r7, #8]
 8007080:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007082:	2302      	movs	r3, #2
 8007084:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2b01      	cmp	r3, #1
 800708a:	f240 80d9 	bls.w	8007240 <put_fat+0x1ca>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	429a      	cmp	r2, r3
 8007096:	f080 80d3 	bcs.w	8007240 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	2b03      	cmp	r3, #3
 80070a0:	f000 8096 	beq.w	80071d0 <put_fat+0x15a>
 80070a4:	2b03      	cmp	r3, #3
 80070a6:	f300 80cb 	bgt.w	8007240 <put_fat+0x1ca>
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d002      	beq.n	80070b4 <put_fat+0x3e>
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d06e      	beq.n	8007190 <put_fat+0x11a>
 80070b2:	e0c5      	b.n	8007240 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	61bb      	str	r3, [r7, #24]
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	085b      	lsrs	r3, r3, #1
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	4413      	add	r3, r2
 80070c0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6a1a      	ldr	r2, [r3, #32]
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	0a5b      	lsrs	r3, r3, #9
 80070ca:	4413      	add	r3, r2
 80070cc:	4619      	mov	r1, r3
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f7ff fe70 	bl	8006db4 <move_window>
 80070d4:	4603      	mov	r3, r0
 80070d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80070d8:	7ffb      	ldrb	r3, [r7, #31]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f040 80a9 	bne.w	8007232 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	1c59      	adds	r1, r3, #1
 80070ea:	61b9      	str	r1, [r7, #24]
 80070ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f0:	4413      	add	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00d      	beq.n	800711a <put_fat+0xa4>
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	b25b      	sxtb	r3, r3
 8007104:	f003 030f 	and.w	r3, r3, #15
 8007108:	b25a      	sxtb	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	b25b      	sxtb	r3, r3
 8007112:	4313      	orrs	r3, r2
 8007114:	b25b      	sxtb	r3, r3
 8007116:	b2db      	uxtb	r3, r3
 8007118:	e001      	b.n	800711e <put_fat+0xa8>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	b2db      	uxtb	r3, r3
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2201      	movs	r2, #1
 8007126:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6a1a      	ldr	r2, [r3, #32]
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	0a5b      	lsrs	r3, r3, #9
 8007130:	4413      	add	r3, r2
 8007132:	4619      	mov	r1, r3
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f7ff fe3d 	bl	8006db4 <move_window>
 800713a:	4603      	mov	r3, r0
 800713c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800713e:	7ffb      	ldrb	r3, [r7, #31]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d178      	bne.n	8007236 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007150:	4413      	add	r3, r2
 8007152:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <put_fat+0xf0>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	091b      	lsrs	r3, r3, #4
 8007162:	b2db      	uxtb	r3, r3
 8007164:	e00e      	b.n	8007184 <put_fat+0x10e>
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	b25b      	sxtb	r3, r3
 800716c:	f023 030f 	bic.w	r3, r3, #15
 8007170:	b25a      	sxtb	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	0a1b      	lsrs	r3, r3, #8
 8007176:	b25b      	sxtb	r3, r3
 8007178:	f003 030f 	and.w	r3, r3, #15
 800717c:	b25b      	sxtb	r3, r3
 800717e:	4313      	orrs	r3, r2
 8007180:	b25b      	sxtb	r3, r3
 8007182:	b2db      	uxtb	r3, r3
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2201      	movs	r2, #1
 800718c:	70da      	strb	r2, [r3, #3]
			break;
 800718e:	e057      	b.n	8007240 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6a1a      	ldr	r2, [r3, #32]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	0a1b      	lsrs	r3, r3, #8
 8007198:	4413      	add	r3, r2
 800719a:	4619      	mov	r1, r3
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f7ff fe09 	bl	8006db4 <move_window>
 80071a2:	4603      	mov	r3, r0
 80071a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80071a6:	7ffb      	ldrb	r3, [r7, #31]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d146      	bne.n	800723a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80071ba:	4413      	add	r3, r2
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	b292      	uxth	r2, r2
 80071c0:	4611      	mov	r1, r2
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7ff fb8d 	bl	80068e2 <st_word>
			fs->wflag = 1;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2201      	movs	r2, #1
 80071cc:	70da      	strb	r2, [r3, #3]
			break;
 80071ce:	e037      	b.n	8007240 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6a1a      	ldr	r2, [r3, #32]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	09db      	lsrs	r3, r3, #7
 80071d8:	4413      	add	r3, r2
 80071da:	4619      	mov	r1, r3
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f7ff fde9 	bl	8006db4 <move_window>
 80071e2:	4603      	mov	r3, r0
 80071e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80071e6:	7ffb      	ldrb	r3, [r7, #31]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d128      	bne.n	800723e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007200:	4413      	add	r3, r2
 8007202:	4618      	mov	r0, r3
 8007204:	f7ff fb4b 	bl	800689e <ld_dword>
 8007208:	4603      	mov	r3, r0
 800720a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800720e:	4323      	orrs	r3, r4
 8007210:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007220:	4413      	add	r3, r2
 8007222:	6879      	ldr	r1, [r7, #4]
 8007224:	4618      	mov	r0, r3
 8007226:	f7ff fb76 	bl	8006916 <st_dword>
			fs->wflag = 1;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2201      	movs	r2, #1
 800722e:	70da      	strb	r2, [r3, #3]
			break;
 8007230:	e006      	b.n	8007240 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007232:	bf00      	nop
 8007234:	e004      	b.n	8007240 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007236:	bf00      	nop
 8007238:	e002      	b.n	8007240 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800723a:	bf00      	nop
 800723c:	e000      	b.n	8007240 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800723e:	bf00      	nop
		}
	}
	return res;
 8007240:	7ffb      	ldrb	r3, [r7, #31]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3724      	adds	r7, #36	@ 0x24
 8007246:	46bd      	mov	sp, r7
 8007248:	bd90      	pop	{r4, r7, pc}

0800724a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b088      	sub	sp, #32
 800724e:	af00      	add	r7, sp, #0
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	60b9      	str	r1, [r7, #8]
 8007254:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d904      	bls.n	8007270 <remove_chain+0x26>
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	429a      	cmp	r2, r3
 800726e:	d301      	bcc.n	8007274 <remove_chain+0x2a>
 8007270:	2302      	movs	r3, #2
 8007272:	e04b      	b.n	800730c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00c      	beq.n	8007294 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800727a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800727e:	6879      	ldr	r1, [r7, #4]
 8007280:	69b8      	ldr	r0, [r7, #24]
 8007282:	f7ff fef8 	bl	8007076 <put_fat>
 8007286:	4603      	mov	r3, r0
 8007288:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800728a:	7ffb      	ldrb	r3, [r7, #31]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d001      	beq.n	8007294 <remove_chain+0x4a>
 8007290:	7ffb      	ldrb	r3, [r7, #31]
 8007292:	e03b      	b.n	800730c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007294:	68b9      	ldr	r1, [r7, #8]
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f7ff fe46 	bl	8006f28 <get_fat>
 800729c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d031      	beq.n	8007308 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d101      	bne.n	80072ae <remove_chain+0x64>
 80072aa:	2302      	movs	r3, #2
 80072ac:	e02e      	b.n	800730c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072b4:	d101      	bne.n	80072ba <remove_chain+0x70>
 80072b6:	2301      	movs	r3, #1
 80072b8:	e028      	b.n	800730c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80072ba:	2200      	movs	r2, #0
 80072bc:	68b9      	ldr	r1, [r7, #8]
 80072be:	69b8      	ldr	r0, [r7, #24]
 80072c0:	f7ff fed9 	bl	8007076 <put_fat>
 80072c4:	4603      	mov	r3, r0
 80072c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80072c8:	7ffb      	ldrb	r3, [r7, #31]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <remove_chain+0x88>
 80072ce:	7ffb      	ldrb	r3, [r7, #31]
 80072d0:	e01c      	b.n	800730c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	691a      	ldr	r2, [r3, #16]
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	3b02      	subs	r3, #2
 80072dc:	429a      	cmp	r2, r3
 80072de:	d20b      	bcs.n	80072f8 <remove_chain+0xae>
			fs->free_clst++;
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	791b      	ldrb	r3, [r3, #4]
 80072ee:	f043 0301 	orr.w	r3, r3, #1
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	429a      	cmp	r2, r3
 8007304:	d3c6      	bcc.n	8007294 <remove_chain+0x4a>
 8007306:	e000      	b.n	800730a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007308:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3720      	adds	r7, #32
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b088      	sub	sp, #32
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10d      	bne.n	8007346 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d004      	beq.n	8007340 <create_chain+0x2c>
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	69ba      	ldr	r2, [r7, #24]
 800733c:	429a      	cmp	r2, r3
 800733e:	d31b      	bcc.n	8007378 <create_chain+0x64>
 8007340:	2301      	movs	r3, #1
 8007342:	61bb      	str	r3, [r7, #24]
 8007344:	e018      	b.n	8007378 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff fded 	bl	8006f28 <get_fat>
 800734e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d801      	bhi.n	800735a <create_chain+0x46>
 8007356:	2301      	movs	r3, #1
 8007358:	e070      	b.n	800743c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007360:	d101      	bne.n	8007366 <create_chain+0x52>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	e06a      	b.n	800743c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	429a      	cmp	r2, r3
 800736e:	d201      	bcs.n	8007374 <create_chain+0x60>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	e063      	b.n	800743c <create_chain+0x128>
		scl = clst;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	3301      	adds	r3, #1
 8007380:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	69fa      	ldr	r2, [r7, #28]
 8007388:	429a      	cmp	r2, r3
 800738a:	d307      	bcc.n	800739c <create_chain+0x88>
				ncl = 2;
 800738c:	2302      	movs	r3, #2
 800738e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007390:	69fa      	ldr	r2, [r7, #28]
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	429a      	cmp	r2, r3
 8007396:	d901      	bls.n	800739c <create_chain+0x88>
 8007398:	2300      	movs	r3, #0
 800739a:	e04f      	b.n	800743c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800739c:	69f9      	ldr	r1, [r7, #28]
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7ff fdc2 	bl	8006f28 <get_fat>
 80073a4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00e      	beq.n	80073ca <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d003      	beq.n	80073ba <create_chain+0xa6>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073b8:	d101      	bne.n	80073be <create_chain+0xaa>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	e03e      	b.n	800743c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80073be:	69fa      	ldr	r2, [r7, #28]
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d1da      	bne.n	800737c <create_chain+0x68>
 80073c6:	2300      	movs	r3, #0
 80073c8:	e038      	b.n	800743c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80073ca:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80073cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073d0:	69f9      	ldr	r1, [r7, #28]
 80073d2:	6938      	ldr	r0, [r7, #16]
 80073d4:	f7ff fe4f 	bl	8007076 <put_fat>
 80073d8:	4603      	mov	r3, r0
 80073da:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d109      	bne.n	80073f6 <create_chain+0xe2>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d006      	beq.n	80073f6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80073e8:	69fa      	ldr	r2, [r7, #28]
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6938      	ldr	r0, [r7, #16]
 80073ee:	f7ff fe42 	bl	8007076 <put_fat>
 80073f2:	4603      	mov	r3, r0
 80073f4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d116      	bne.n	800742a <create_chain+0x116>
		fs->last_clst = ncl;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	69fa      	ldr	r2, [r7, #28]
 8007400:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	691a      	ldr	r2, [r3, #16]
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	3b02      	subs	r3, #2
 800740c:	429a      	cmp	r2, r3
 800740e:	d804      	bhi.n	800741a <create_chain+0x106>
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	1e5a      	subs	r2, r3, #1
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	791b      	ldrb	r3, [r3, #4]
 800741e:	f043 0301 	orr.w	r3, r3, #1
 8007422:	b2da      	uxtb	r2, r3
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	711a      	strb	r2, [r3, #4]
 8007428:	e007      	b.n	800743a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800742a:	7dfb      	ldrb	r3, [r7, #23]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d102      	bne.n	8007436 <create_chain+0x122>
 8007430:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007434:	e000      	b.n	8007438 <create_chain+0x124>
 8007436:	2301      	movs	r3, #1
 8007438:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800743a:	69fb      	ldr	r3, [r7, #28]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3720      	adds	r7, #32
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007458:	3304      	adds	r3, #4
 800745a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	0a5b      	lsrs	r3, r3, #9
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	8952      	ldrh	r2, [r2, #10]
 8007464:	fbb3 f3f2 	udiv	r3, r3, r2
 8007468:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	1d1a      	adds	r2, r3, #4
 800746e:	613a      	str	r2, [r7, #16]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <clmt_clust+0x3a>
 800747a:	2300      	movs	r3, #0
 800747c:	e010      	b.n	80074a0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	429a      	cmp	r2, r3
 8007484:	d307      	bcc.n	8007496 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	617b      	str	r3, [r7, #20]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	3304      	adds	r3, #4
 8007492:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007494:	e7e9      	b.n	800746a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007496:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	4413      	add	r3, r2
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	371c      	adds	r7, #28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bc80      	pop	{r7}
 80074a8:	4770      	bx	lr

080074aa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b086      	sub	sp, #24
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074c0:	d204      	bcs.n	80074cc <dir_sdi+0x22>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	f003 031f 	and.w	r3, r3, #31
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80074cc:	2302      	movs	r3, #2
 80074ce:	e063      	b.n	8007598 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d106      	bne.n	80074f0 <dir_sdi+0x46>
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d902      	bls.n	80074f0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ee:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10c      	bne.n	8007510 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	095b      	lsrs	r3, r3, #5
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	8912      	ldrh	r2, [r2, #8]
 80074fe:	4293      	cmp	r3, r2
 8007500:	d301      	bcc.n	8007506 <dir_sdi+0x5c>
 8007502:	2302      	movs	r3, #2
 8007504:	e048      	b.n	8007598 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	61da      	str	r2, [r3, #28]
 800750e:	e029      	b.n	8007564 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	895b      	ldrh	r3, [r3, #10]
 8007514:	025b      	lsls	r3, r3, #9
 8007516:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007518:	e019      	b.n	800754e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6979      	ldr	r1, [r7, #20]
 800751e:	4618      	mov	r0, r3
 8007520:	f7ff fd02 	bl	8006f28 <get_fat>
 8007524:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800752c:	d101      	bne.n	8007532 <dir_sdi+0x88>
 800752e:	2301      	movs	r3, #1
 8007530:	e032      	b.n	8007598 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d904      	bls.n	8007542 <dir_sdi+0x98>
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	429a      	cmp	r2, r3
 8007540:	d301      	bcc.n	8007546 <dir_sdi+0x9c>
 8007542:	2302      	movs	r3, #2
 8007544:	e028      	b.n	8007598 <dir_sdi+0xee>
			ofs -= csz;
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	429a      	cmp	r2, r3
 8007554:	d2e1      	bcs.n	800751a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007556:	6979      	ldr	r1, [r7, #20]
 8007558:	6938      	ldr	r0, [r7, #16]
 800755a:	f7ff fcc7 	bl	8006eec <clust2sect>
 800755e:	4602      	mov	r2, r0
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	697a      	ldr	r2, [r7, #20]
 8007568:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <dir_sdi+0xcc>
 8007572:	2302      	movs	r3, #2
 8007574:	e010      	b.n	8007598 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	69da      	ldr	r2, [r3, #28]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	0a5b      	lsrs	r3, r3, #9
 800757e:	441a      	add	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007590:	441a      	add	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3718      	adds	r7, #24
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	3320      	adds	r3, #32
 80075b6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	69db      	ldr	r3, [r3, #28]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d003      	beq.n	80075c8 <dir_next+0x28>
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075c6:	d301      	bcc.n	80075cc <dir_next+0x2c>
 80075c8:	2304      	movs	r3, #4
 80075ca:	e0aa      	b.n	8007722 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f040 8098 	bne.w	8007708 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10b      	bne.n	8007602 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	095b      	lsrs	r3, r3, #5
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	8912      	ldrh	r2, [r2, #8]
 80075f2:	4293      	cmp	r3, r2
 80075f4:	f0c0 8088 	bcc.w	8007708 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	61da      	str	r2, [r3, #28]
 80075fe:	2304      	movs	r3, #4
 8007600:	e08f      	b.n	8007722 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	0a5b      	lsrs	r3, r3, #9
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	8952      	ldrh	r2, [r2, #10]
 800760a:	3a01      	subs	r2, #1
 800760c:	4013      	ands	r3, r2
 800760e:	2b00      	cmp	r3, #0
 8007610:	d17a      	bne.n	8007708 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	4619      	mov	r1, r3
 800761a:	4610      	mov	r0, r2
 800761c:	f7ff fc84 	bl	8006f28 <get_fat>
 8007620:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d801      	bhi.n	800762c <dir_next+0x8c>
 8007628:	2302      	movs	r3, #2
 800762a:	e07a      	b.n	8007722 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007632:	d101      	bne.n	8007638 <dir_next+0x98>
 8007634:	2301      	movs	r3, #1
 8007636:	e074      	b.n	8007722 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	429a      	cmp	r2, r3
 8007640:	d358      	bcc.n	80076f4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d104      	bne.n	8007652 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	61da      	str	r2, [r3, #28]
 800764e:	2304      	movs	r3, #4
 8007650:	e067      	b.n	8007722 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	4619      	mov	r1, r3
 800765a:	4610      	mov	r0, r2
 800765c:	f7ff fe5a 	bl	8007314 <create_chain>
 8007660:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <dir_next+0xcc>
 8007668:	2307      	movs	r3, #7
 800766a:	e05a      	b.n	8007722 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d101      	bne.n	8007676 <dir_next+0xd6>
 8007672:	2302      	movs	r3, #2
 8007674:	e055      	b.n	8007722 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800767c:	d101      	bne.n	8007682 <dir_next+0xe2>
 800767e:	2301      	movs	r3, #1
 8007680:	e04f      	b.n	8007722 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f7ff fb52 	bl	8006d2c <sync_window>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <dir_next+0xf2>
 800768e:	2301      	movs	r3, #1
 8007690:	e047      	b.n	8007722 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	3330      	adds	r3, #48	@ 0x30
 8007696:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800769a:	2100      	movs	r1, #0
 800769c:	4618      	mov	r0, r3
 800769e:	f7ff f985 	bl	80069ac <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80076a2:	2300      	movs	r3, #0
 80076a4:	613b      	str	r3, [r7, #16]
 80076a6:	6979      	ldr	r1, [r7, #20]
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f7ff fc1f 	bl	8006eec <clust2sect>
 80076ae:	4602      	mov	r2, r0
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80076b4:	e012      	b.n	80076dc <dir_next+0x13c>
						fs->wflag = 1;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f7ff fb35 	bl	8006d2c <sync_window>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <dir_next+0x12c>
 80076c8:	2301      	movs	r3, #1
 80076ca:	e02a      	b.n	8007722 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	3301      	adds	r3, #1
 80076d0:	613b      	str	r3, [r7, #16]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	62da      	str	r2, [r3, #44]	@ 0x2c
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	895b      	ldrh	r3, [r3, #10]
 80076e0:	461a      	mov	r2, r3
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d3e6      	bcc.n	80076b6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	1ad2      	subs	r2, r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80076fa:	6979      	ldr	r1, [r7, #20]
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f7ff fbf5 	bl	8006eec <clust2sect>
 8007702:	4602      	mov	r2, r0
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800771a:	441a      	add	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b086      	sub	sp, #24
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800773a:	2100      	movs	r1, #0
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7ff feb4 	bl	80074aa <dir_sdi>
 8007742:	4603      	mov	r3, r0
 8007744:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007746:	7dfb      	ldrb	r3, [r7, #23]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d12b      	bne.n	80077a4 <dir_alloc+0x7a>
		n = 0;
 800774c:	2300      	movs	r3, #0
 800774e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	4619      	mov	r1, r3
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f7ff fb2c 	bl	8006db4 <move_window>
 800775c:	4603      	mov	r3, r0
 800775e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007760:	7dfb      	ldrb	r3, [r7, #23]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d11d      	bne.n	80077a2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	2be5      	cmp	r3, #229	@ 0xe5
 800776e:	d004      	beq.n	800777a <dir_alloc+0x50>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a1b      	ldr	r3, [r3, #32]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d107      	bne.n	800778a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	3301      	adds	r3, #1
 800777e:	613b      	str	r3, [r7, #16]
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	429a      	cmp	r2, r3
 8007786:	d102      	bne.n	800778e <dir_alloc+0x64>
 8007788:	e00c      	b.n	80077a4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800778a:	2300      	movs	r3, #0
 800778c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800778e:	2101      	movs	r1, #1
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7ff ff05 	bl	80075a0 <dir_next>
 8007796:	4603      	mov	r3, r0
 8007798:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800779a:	7dfb      	ldrb	r3, [r7, #23]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0d7      	beq.n	8007750 <dir_alloc+0x26>
 80077a0:	e000      	b.n	80077a4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80077a2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80077a4:	7dfb      	ldrb	r3, [r7, #23]
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	d101      	bne.n	80077ae <dir_alloc+0x84>
 80077aa:	2307      	movs	r3, #7
 80077ac:	75fb      	strb	r3, [r7, #23]
	return res;
 80077ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3718      	adds	r7, #24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	331a      	adds	r3, #26
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7ff f852 	bl	8006870 <ld_word>
 80077cc:	4603      	mov	r3, r0
 80077ce:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b03      	cmp	r3, #3
 80077d6:	d109      	bne.n	80077ec <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	3314      	adds	r3, #20
 80077dc:	4618      	mov	r0, r3
 80077de:	f7ff f847 	bl	8006870 <ld_word>
 80077e2:	4603      	mov	r3, r0
 80077e4:	041b      	lsls	r3, r3, #16
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80077ec:	68fb      	ldr	r3, [r7, #12]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b084      	sub	sp, #16
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	60f8      	str	r0, [r7, #12]
 80077fe:	60b9      	str	r1, [r7, #8]
 8007800:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	331a      	adds	r3, #26
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	b292      	uxth	r2, r2
 800780a:	4611      	mov	r1, r2
 800780c:	4618      	mov	r0, r3
 800780e:	f7ff f868 	bl	80068e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	2b03      	cmp	r3, #3
 8007818:	d109      	bne.n	800782e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	f103 0214 	add.w	r2, r3, #20
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	0c1b      	lsrs	r3, r3, #16
 8007824:	b29b      	uxth	r3, r3
 8007826:	4619      	mov	r1, r3
 8007828:	4610      	mov	r0, r2
 800782a:	f7ff f85a 	bl	80068e2 <st_word>
	}
}
 800782e:	bf00      	nop
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b086      	sub	sp, #24
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007844:	2100      	movs	r1, #0
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7ff fe2f 	bl	80074aa <dir_sdi>
 800784c:	4603      	mov	r3, r0
 800784e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007850:	7dfb      	ldrb	r3, [r7, #23]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <dir_find+0x24>
 8007856:	7dfb      	ldrb	r3, [r7, #23]
 8007858:	e03e      	b.n	80078d8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	4619      	mov	r1, r3
 8007860:	6938      	ldr	r0, [r7, #16]
 8007862:	f7ff faa7 	bl	8006db4 <move_window>
 8007866:	4603      	mov	r3, r0
 8007868:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800786a:	7dfb      	ldrb	r3, [r7, #23]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d12f      	bne.n	80078d0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007878:	7bfb      	ldrb	r3, [r7, #15]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d102      	bne.n	8007884 <dir_find+0x4e>
 800787e:	2304      	movs	r3, #4
 8007880:	75fb      	strb	r3, [r7, #23]
 8007882:	e028      	b.n	80078d6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	330b      	adds	r3, #11
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007890:	b2da      	uxtb	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	330b      	adds	r3, #11
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	f003 0308 	and.w	r3, r3, #8
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10a      	bne.n	80078bc <dir_find+0x86>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a18      	ldr	r0, [r3, #32]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	3324      	adds	r3, #36	@ 0x24
 80078ae:	220b      	movs	r2, #11
 80078b0:	4619      	mov	r1, r3
 80078b2:	f7ff f895 	bl	80069e0 <mem_cmp>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00b      	beq.n	80078d4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80078bc:	2100      	movs	r1, #0
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7ff fe6e 	bl	80075a0 <dir_next>
 80078c4:	4603      	mov	r3, r0
 80078c6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80078c8:	7dfb      	ldrb	r3, [r7, #23]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d0c5      	beq.n	800785a <dir_find+0x24>
 80078ce:	e002      	b.n	80078d6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80078d0:	bf00      	nop
 80078d2:	e000      	b.n	80078d6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80078d4:	bf00      	nop

	return res;
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80078ee:	2101      	movs	r1, #1
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7ff ff1a 	bl	800772a <dir_alloc>
 80078f6:	4603      	mov	r3, r0
 80078f8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d11c      	bne.n	800793a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	69db      	ldr	r3, [r3, #28]
 8007904:	4619      	mov	r1, r3
 8007906:	68b8      	ldr	r0, [r7, #8]
 8007908:	f7ff fa54 	bl	8006db4 <move_window>
 800790c:	4603      	mov	r3, r0
 800790e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007910:	7bfb      	ldrb	r3, [r7, #15]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d111      	bne.n	800793a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	2220      	movs	r2, #32
 800791c:	2100      	movs	r1, #0
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff f844 	bl	80069ac <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a18      	ldr	r0, [r3, #32]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3324      	adds	r3, #36	@ 0x24
 800792c:	220b      	movs	r2, #11
 800792e:	4619      	mov	r1, r3
 8007930:	f7ff f81c 	bl	800696c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2201      	movs	r2, #1
 8007938:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800793a:	7bfb      	ldrb	r3, [r7, #15]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b088      	sub	sp, #32
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3324      	adds	r3, #36	@ 0x24
 8007958:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800795a:	220b      	movs	r2, #11
 800795c:	2120      	movs	r1, #32
 800795e:	68b8      	ldr	r0, [r7, #8]
 8007960:	f7ff f824 	bl	80069ac <mem_set>
	si = i = 0; ni = 8;
 8007964:	2300      	movs	r3, #0
 8007966:	613b      	str	r3, [r7, #16]
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	61fb      	str	r3, [r7, #28]
 800796c:	2308      	movs	r3, #8
 800796e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	61fa      	str	r2, [r7, #28]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4413      	add	r3, r2
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800797e:	7efb      	ldrb	r3, [r7, #27]
 8007980:	2b20      	cmp	r3, #32
 8007982:	d94e      	bls.n	8007a22 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007984:	7efb      	ldrb	r3, [r7, #27]
 8007986:	2b2f      	cmp	r3, #47	@ 0x2f
 8007988:	d006      	beq.n	8007998 <create_name+0x54>
 800798a:	7efb      	ldrb	r3, [r7, #27]
 800798c:	2b5c      	cmp	r3, #92	@ 0x5c
 800798e:	d110      	bne.n	80079b2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007990:	e002      	b.n	8007998 <create_name+0x54>
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	3301      	adds	r3, #1
 8007996:	61fb      	str	r3, [r7, #28]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	4413      	add	r3, r2
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80079a2:	d0f6      	beq.n	8007992 <create_name+0x4e>
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	4413      	add	r3, r2
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b5c      	cmp	r3, #92	@ 0x5c
 80079ae:	d0f0      	beq.n	8007992 <create_name+0x4e>
			break;
 80079b0:	e038      	b.n	8007a24 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80079b2:	7efb      	ldrb	r3, [r7, #27]
 80079b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80079b6:	d003      	beq.n	80079c0 <create_name+0x7c>
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d30c      	bcc.n	80079da <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	2b0b      	cmp	r3, #11
 80079c4:	d002      	beq.n	80079cc <create_name+0x88>
 80079c6:	7efb      	ldrb	r3, [r7, #27]
 80079c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80079ca:	d001      	beq.n	80079d0 <create_name+0x8c>
 80079cc:	2306      	movs	r3, #6
 80079ce:	e044      	b.n	8007a5a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80079d0:	2308      	movs	r3, #8
 80079d2:	613b      	str	r3, [r7, #16]
 80079d4:	230b      	movs	r3, #11
 80079d6:	617b      	str	r3, [r7, #20]
			continue;
 80079d8:	e022      	b.n	8007a20 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80079da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	da04      	bge.n	80079ec <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80079e2:	7efb      	ldrb	r3, [r7, #27]
 80079e4:	3b80      	subs	r3, #128	@ 0x80
 80079e6:	4a1f      	ldr	r2, [pc, #124]	@ (8007a64 <create_name+0x120>)
 80079e8:	5cd3      	ldrb	r3, [r2, r3]
 80079ea:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80079ec:	7efb      	ldrb	r3, [r7, #27]
 80079ee:	4619      	mov	r1, r3
 80079f0:	481d      	ldr	r0, [pc, #116]	@ (8007a68 <create_name+0x124>)
 80079f2:	f7ff f81b 	bl	8006a2c <chk_chr>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <create_name+0xbc>
 80079fc:	2306      	movs	r3, #6
 80079fe:	e02c      	b.n	8007a5a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007a00:	7efb      	ldrb	r3, [r7, #27]
 8007a02:	2b60      	cmp	r3, #96	@ 0x60
 8007a04:	d905      	bls.n	8007a12 <create_name+0xce>
 8007a06:	7efb      	ldrb	r3, [r7, #27]
 8007a08:	2b7a      	cmp	r3, #122	@ 0x7a
 8007a0a:	d802      	bhi.n	8007a12 <create_name+0xce>
 8007a0c:	7efb      	ldrb	r3, [r7, #27]
 8007a0e:	3b20      	subs	r3, #32
 8007a10:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	1c5a      	adds	r2, r3, #1
 8007a16:	613a      	str	r2, [r7, #16]
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	7efa      	ldrb	r2, [r7, #27]
 8007a1e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007a20:	e7a6      	b.n	8007970 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007a22:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	441a      	add	r2, r3
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <create_name+0xf4>
 8007a34:	2306      	movs	r3, #6
 8007a36:	e010      	b.n	8007a5a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	2be5      	cmp	r3, #229	@ 0xe5
 8007a3e:	d102      	bne.n	8007a46 <create_name+0x102>
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	2205      	movs	r2, #5
 8007a44:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007a46:	7efb      	ldrb	r3, [r7, #27]
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	d801      	bhi.n	8007a50 <create_name+0x10c>
 8007a4c:	2204      	movs	r2, #4
 8007a4e:	e000      	b.n	8007a52 <create_name+0x10e>
 8007a50:	2200      	movs	r2, #0
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	330b      	adds	r3, #11
 8007a56:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007a58:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3720      	adds	r7, #32
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	0800b098 	.word	0x0800b098
 8007a68:	0800ae58 	.word	0x0800ae58

08007a6c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007a80:	e002      	b.n	8007a88 <follow_path+0x1c>
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	3301      	adds	r3, #1
 8007a86:	603b      	str	r3, [r7, #0]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	2b2f      	cmp	r3, #47	@ 0x2f
 8007a8e:	d0f8      	beq.n	8007a82 <follow_path+0x16>
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	2b5c      	cmp	r3, #92	@ 0x5c
 8007a96:	d0f4      	beq.n	8007a82 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	2b1f      	cmp	r3, #31
 8007aa4:	d80a      	bhi.n	8007abc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2280      	movs	r2, #128	@ 0x80
 8007aaa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007aae:	2100      	movs	r1, #0
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7ff fcfa 	bl	80074aa <dir_sdi>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	75fb      	strb	r3, [r7, #23]
 8007aba:	e043      	b.n	8007b44 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007abc:	463b      	mov	r3, r7
 8007abe:	4619      	mov	r1, r3
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7ff ff3f 	bl	8007944 <create_name>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007aca:	7dfb      	ldrb	r3, [r7, #23]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d134      	bne.n	8007b3a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7ff feb0 	bl	8007836 <dir_find>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007ae0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00a      	beq.n	8007afe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
 8007aea:	2b04      	cmp	r3, #4
 8007aec:	d127      	bne.n	8007b3e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007aee:	7afb      	ldrb	r3, [r7, #11]
 8007af0:	f003 0304 	and.w	r3, r3, #4
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d122      	bne.n	8007b3e <follow_path+0xd2>
 8007af8:	2305      	movs	r3, #5
 8007afa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007afc:	e01f      	b.n	8007b3e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007afe:	7afb      	ldrb	r3, [r7, #11]
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d11c      	bne.n	8007b42 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	799b      	ldrb	r3, [r3, #6]
 8007b0c:	f003 0310 	and.w	r3, r3, #16
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d102      	bne.n	8007b1a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007b14:	2305      	movs	r3, #5
 8007b16:	75fb      	strb	r3, [r7, #23]
 8007b18:	e014      	b.n	8007b44 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b28:	4413      	add	r3, r2
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f7ff fe43 	bl	80077b8 <ld_clust>
 8007b32:	4602      	mov	r2, r0
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007b38:	e7c0      	b.n	8007abc <follow_path+0x50>
			if (res != FR_OK) break;
 8007b3a:	bf00      	nop
 8007b3c:	e002      	b.n	8007b44 <follow_path+0xd8>
				break;
 8007b3e:	bf00      	nop
 8007b40:	e000      	b.n	8007b44 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007b42:	bf00      	nop
			}
		}
	}

	return res;
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b087      	sub	sp, #28
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007b56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b5a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d031      	beq.n	8007bc8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	617b      	str	r3, [r7, #20]
 8007b6a:	e002      	b.n	8007b72 <get_ldnumber+0x24>
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	617b      	str	r3, [r7, #20]
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	2b20      	cmp	r3, #32
 8007b78:	d903      	bls.n	8007b82 <get_ldnumber+0x34>
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	2b3a      	cmp	r3, #58	@ 0x3a
 8007b80:	d1f4      	bne.n	8007b6c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	2b3a      	cmp	r3, #58	@ 0x3a
 8007b88:	d11c      	bne.n	8007bc4 <get_ldnumber+0x76>
			tp = *path;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	1c5a      	adds	r2, r3, #1
 8007b94:	60fa      	str	r2, [r7, #12]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	3b30      	subs	r3, #48	@ 0x30
 8007b9a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2b09      	cmp	r3, #9
 8007ba0:	d80e      	bhi.n	8007bc0 <get_ldnumber+0x72>
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d10a      	bne.n	8007bc0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d107      	bne.n	8007bc0 <get_ldnumber+0x72>
					vol = (int)i;
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	617b      	str	r3, [r7, #20]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	e002      	b.n	8007bca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007bc8:	693b      	ldr	r3, [r7, #16]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	371c      	adds	r7, #28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bc80      	pop	{r7}
 8007bd2:	4770      	bx	lr

08007bd4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	70da      	strb	r2, [r3, #3]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007bea:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7ff f8e0 	bl	8006db4 <move_window>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <check_fs+0x2a>
 8007bfa:	2304      	movs	r3, #4
 8007bfc:	e038      	b.n	8007c70 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	3330      	adds	r3, #48	@ 0x30
 8007c02:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fe fe32 	bl	8006870 <ld_word>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	461a      	mov	r2, r3
 8007c10:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d001      	beq.n	8007c1c <check_fs+0x48>
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e029      	b.n	8007c70 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007c22:	2be9      	cmp	r3, #233	@ 0xe9
 8007c24:	d009      	beq.n	8007c3a <check_fs+0x66>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007c2c:	2beb      	cmp	r3, #235	@ 0xeb
 8007c2e:	d11e      	bne.n	8007c6e <check_fs+0x9a>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007c36:	2b90      	cmp	r3, #144	@ 0x90
 8007c38:	d119      	bne.n	8007c6e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	3330      	adds	r3, #48	@ 0x30
 8007c3e:	3336      	adds	r3, #54	@ 0x36
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fe fe2c 	bl	800689e <ld_dword>
 8007c46:	4603      	mov	r3, r0
 8007c48:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8007c78 <check_fs+0xa4>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d101      	bne.n	8007c56 <check_fs+0x82>
 8007c52:	2300      	movs	r3, #0
 8007c54:	e00c      	b.n	8007c70 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	3330      	adds	r3, #48	@ 0x30
 8007c5a:	3352      	adds	r3, #82	@ 0x52
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fe fe1e 	bl	800689e <ld_dword>
 8007c62:	4603      	mov	r3, r0
 8007c64:	4a05      	ldr	r2, [pc, #20]	@ (8007c7c <check_fs+0xa8>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d101      	bne.n	8007c6e <check_fs+0x9a>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	e000      	b.n	8007c70 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007c6e:	2302      	movs	r3, #2
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	00544146 	.word	0x00544146
 8007c7c:	33544146 	.word	0x33544146

08007c80 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b096      	sub	sp, #88	@ 0x58
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2200      	movs	r2, #0
 8007c92:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f7ff ff5a 	bl	8007b4e <get_ldnumber>
 8007c9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	da01      	bge.n	8007ca6 <find_volume+0x26>
 8007ca2:	230b      	movs	r3, #11
 8007ca4:	e22d      	b.n	8008102 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007ca6:	4aa1      	ldr	r2, [pc, #644]	@ (8007f2c <find_volume+0x2ac>)
 8007ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cae:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <find_volume+0x3a>
 8007cb6:	230c      	movs	r3, #12
 8007cb8:	e223      	b.n	8008102 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007cbe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	f023 0301 	bic.w	r3, r3, #1
 8007cc6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d01a      	beq.n	8007d06 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd2:	785b      	ldrb	r3, [r3, #1]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fe fd2d 	bl	8006734 <disk_status>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007ce0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10c      	bne.n	8007d06 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007cec:	79fb      	ldrb	r3, [r7, #7]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d007      	beq.n	8007d02 <find_volume+0x82>
 8007cf2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007cf6:	f003 0304 	and.w	r3, r3, #4
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007cfe:	230a      	movs	r3, #10
 8007d00:	e1ff      	b.n	8008102 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007d02:	2300      	movs	r3, #0
 8007d04:	e1fd      	b.n	8008102 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d08:	2200      	movs	r2, #0
 8007d0a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d12:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d16:	785b      	ldrb	r3, [r3, #1]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fe fd25 	bl	8006768 <disk_initialize>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007d24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007d30:	2303      	movs	r3, #3
 8007d32:	e1e6      	b.n	8008102 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007d34:	79fb      	ldrb	r3, [r7, #7]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d007      	beq.n	8007d4a <find_volume+0xca>
 8007d3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007d3e:	f003 0304 	and.w	r3, r3, #4
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007d46:	230a      	movs	r3, #10
 8007d48:	e1db      	b.n	8008102 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007d4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007d50:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007d52:	f7ff ff3f 	bl	8007bd4 <check_fs>
 8007d56:	4603      	mov	r3, r0
 8007d58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007d5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d149      	bne.n	8007df8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007d64:	2300      	movs	r3, #0
 8007d66:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d68:	e01e      	b.n	8007da8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d72:	011b      	lsls	r3, r3, #4
 8007d74:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007d78:	4413      	add	r3, r2
 8007d7a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7e:	3304      	adds	r3, #4
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d006      	beq.n	8007d94 <find_volume+0x114>
 8007d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d88:	3308      	adds	r3, #8
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fe fd87 	bl	800689e <ld_dword>
 8007d90:	4602      	mov	r2, r0
 8007d92:	e000      	b.n	8007d96 <find_volume+0x116>
 8007d94:	2200      	movs	r2, #0
 8007d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	3358      	adds	r3, #88	@ 0x58
 8007d9c:	443b      	add	r3, r7
 8007d9e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007da4:	3301      	adds	r3, #1
 8007da6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d9dd      	bls.n	8007d6a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007dae:	2300      	movs	r3, #0
 8007db0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007db2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d002      	beq.n	8007dbe <find_volume+0x13e>
 8007db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	3358      	adds	r3, #88	@ 0x58
 8007dc4:	443b      	add	r3, r7
 8007dc6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007dca:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007dcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d005      	beq.n	8007dde <find_volume+0x15e>
 8007dd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007dd4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007dd6:	f7ff fefd 	bl	8007bd4 <check_fs>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	e000      	b.n	8007de0 <find_volume+0x160>
 8007dde:	2303      	movs	r3, #3
 8007de0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007de4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d905      	bls.n	8007df8 <find_volume+0x178>
 8007dec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dee:	3301      	adds	r3, #1
 8007df0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007df2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007df4:	2b03      	cmp	r3, #3
 8007df6:	d9e2      	bls.n	8007dbe <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007df8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007dfc:	2b04      	cmp	r3, #4
 8007dfe:	d101      	bne.n	8007e04 <find_volume+0x184>
 8007e00:	2301      	movs	r3, #1
 8007e02:	e17e      	b.n	8008102 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007e04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d901      	bls.n	8007e10 <find_volume+0x190>
 8007e0c:	230d      	movs	r3, #13
 8007e0e:	e178      	b.n	8008102 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e12:	3330      	adds	r3, #48	@ 0x30
 8007e14:	330b      	adds	r3, #11
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7fe fd2a 	bl	8006870 <ld_word>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e22:	d001      	beq.n	8007e28 <find_volume+0x1a8>
 8007e24:	230d      	movs	r3, #13
 8007e26:	e16c      	b.n	8008102 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e2a:	3330      	adds	r3, #48	@ 0x30
 8007e2c:	3316      	adds	r3, #22
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fe fd1e 	bl	8006870 <ld_word>
 8007e34:	4603      	mov	r3, r0
 8007e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007e38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d106      	bne.n	8007e4c <find_volume+0x1cc>
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e40:	3330      	adds	r3, #48	@ 0x30
 8007e42:	3324      	adds	r3, #36	@ 0x24
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fe fd2a 	bl	800689e <ld_dword>
 8007e4a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e50:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e54:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8007e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5e:	789b      	ldrb	r3, [r3, #2]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d005      	beq.n	8007e70 <find_volume+0x1f0>
 8007e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e66:	789b      	ldrb	r3, [r3, #2]
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d001      	beq.n	8007e70 <find_volume+0x1f0>
 8007e6c:	230d      	movs	r3, #13
 8007e6e:	e148      	b.n	8008102 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e72:	789b      	ldrb	r3, [r3, #2]
 8007e74:	461a      	mov	r2, r3
 8007e76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e78:	fb02 f303 	mul.w	r3, r2, r3
 8007e7c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e84:	461a      	mov	r2, r3
 8007e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e88:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8c:	895b      	ldrh	r3, [r3, #10]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d008      	beq.n	8007ea4 <find_volume+0x224>
 8007e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e94:	895b      	ldrh	r3, [r3, #10]
 8007e96:	461a      	mov	r2, r3
 8007e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e9a:	895b      	ldrh	r3, [r3, #10]
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <find_volume+0x228>
 8007ea4:	230d      	movs	r3, #13
 8007ea6:	e12c      	b.n	8008102 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eaa:	3330      	adds	r3, #48	@ 0x30
 8007eac:	3311      	adds	r3, #17
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fe fcde 	bl	8006870 <ld_word>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ebe:	891b      	ldrh	r3, [r3, #8]
 8007ec0:	f003 030f 	and.w	r3, r3, #15
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <find_volume+0x24e>
 8007eca:	230d      	movs	r3, #13
 8007ecc:	e119      	b.n	8008102 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed0:	3330      	adds	r3, #48	@ 0x30
 8007ed2:	3313      	adds	r3, #19
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fe fccb 	bl	8006870 <ld_word>
 8007eda:	4603      	mov	r3, r0
 8007edc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007ede:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d106      	bne.n	8007ef2 <find_volume+0x272>
 8007ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee6:	3330      	adds	r3, #48	@ 0x30
 8007ee8:	3320      	adds	r3, #32
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fe fcd7 	bl	800689e <ld_dword>
 8007ef0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef4:	3330      	adds	r3, #48	@ 0x30
 8007ef6:	330e      	adds	r3, #14
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fe fcb9 	bl	8006870 <ld_word>
 8007efe:	4603      	mov	r3, r0
 8007f00:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007f02:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <find_volume+0x28c>
 8007f08:	230d      	movs	r3, #13
 8007f0a:	e0fa      	b.n	8008102 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007f0c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f10:	4413      	add	r3, r2
 8007f12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f14:	8912      	ldrh	r2, [r2, #8]
 8007f16:	0912      	lsrs	r2, r2, #4
 8007f18:	b292      	uxth	r2, r2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007f1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d204      	bcs.n	8007f30 <find_volume+0x2b0>
 8007f26:	230d      	movs	r3, #13
 8007f28:	e0eb      	b.n	8008102 <find_volume+0x482>
 8007f2a:	bf00      	nop
 8007f2c:	200001b8 	.word	0x200001b8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007f30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f38:	8952      	ldrh	r2, [r2, #10]
 8007f3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f3e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <find_volume+0x2ca>
 8007f46:	230d      	movs	r3, #13
 8007f48:	e0db      	b.n	8008102 <find_volume+0x482>
		fmt = FS_FAT32;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f52:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d802      	bhi.n	8007f60 <find_volume+0x2e0>
 8007f5a:	2302      	movs	r3, #2
 8007f5c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f62:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d802      	bhi.n	8007f70 <find_volume+0x2f0>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f72:	1c9a      	adds	r2, r3, #2
 8007f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f76:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f7c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007f7e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007f80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f82:	441a      	add	r2, r3
 8007f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f86:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007f88:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f8c:	441a      	add	r2, r3
 8007f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f90:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8007f92:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	d11e      	bne.n	8007fd8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9c:	3330      	adds	r3, #48	@ 0x30
 8007f9e:	332a      	adds	r3, #42	@ 0x2a
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fe fc65 	bl	8006870 <ld_word>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <find_volume+0x330>
 8007fac:	230d      	movs	r3, #13
 8007fae:	e0a8      	b.n	8008102 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb2:	891b      	ldrh	r3, [r3, #8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <find_volume+0x33c>
 8007fb8:	230d      	movs	r3, #13
 8007fba:	e0a2      	b.n	8008102 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fbe:	3330      	adds	r3, #48	@ 0x30
 8007fc0:	332c      	adds	r3, #44	@ 0x2c
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fe fc6b 	bl	800689e <ld_dword>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fcc:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fd6:	e01f      	b.n	8008018 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fda:	891b      	ldrh	r3, [r3, #8]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d101      	bne.n	8007fe4 <find_volume+0x364>
 8007fe0:	230d      	movs	r3, #13
 8007fe2:	e08e      	b.n	8008102 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe6:	6a1a      	ldr	r2, [r3, #32]
 8007fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fea:	441a      	add	r2, r3
 8007fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fee:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007ff0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d103      	bne.n	8008000 <find_volume+0x380>
 8007ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffa:	695b      	ldr	r3, [r3, #20]
 8007ffc:	005b      	lsls	r3, r3, #1
 8007ffe:	e00a      	b.n	8008016 <find_volume+0x396>
 8008000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008002:	695a      	ldr	r2, [r3, #20]
 8008004:	4613      	mov	r3, r2
 8008006:	005b      	lsls	r3, r3, #1
 8008008:	4413      	add	r3, r2
 800800a:	085a      	lsrs	r2, r3, #1
 800800c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008016:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801a:	699a      	ldr	r2, [r3, #24]
 800801c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800801e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008022:	0a5b      	lsrs	r3, r3, #9
 8008024:	429a      	cmp	r2, r3
 8008026:	d201      	bcs.n	800802c <find_volume+0x3ac>
 8008028:	230d      	movs	r3, #13
 800802a:	e06a      	b.n	8008102 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800802c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800802e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008032:	611a      	str	r2, [r3, #16]
 8008034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008036:	691a      	ldr	r2, [r3, #16]
 8008038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800803c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803e:	2280      	movs	r2, #128	@ 0x80
 8008040:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008042:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008046:	2b03      	cmp	r3, #3
 8008048:	d149      	bne.n	80080de <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800804a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804c:	3330      	adds	r3, #48	@ 0x30
 800804e:	3330      	adds	r3, #48	@ 0x30
 8008050:	4618      	mov	r0, r3
 8008052:	f7fe fc0d 	bl	8006870 <ld_word>
 8008056:	4603      	mov	r3, r0
 8008058:	2b01      	cmp	r3, #1
 800805a:	d140      	bne.n	80080de <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800805c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800805e:	3301      	adds	r3, #1
 8008060:	4619      	mov	r1, r3
 8008062:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008064:	f7fe fea6 	bl	8006db4 <move_window>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d137      	bne.n	80080de <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800806e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008070:	2200      	movs	r2, #0
 8008072:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008076:	3330      	adds	r3, #48	@ 0x30
 8008078:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800807c:	4618      	mov	r0, r3
 800807e:	f7fe fbf7 	bl	8006870 <ld_word>
 8008082:	4603      	mov	r3, r0
 8008084:	461a      	mov	r2, r3
 8008086:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800808a:	429a      	cmp	r2, r3
 800808c:	d127      	bne.n	80080de <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800808e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008090:	3330      	adds	r3, #48	@ 0x30
 8008092:	4618      	mov	r0, r3
 8008094:	f7fe fc03 	bl	800689e <ld_dword>
 8008098:	4603      	mov	r3, r0
 800809a:	4a1c      	ldr	r2, [pc, #112]	@ (800810c <find_volume+0x48c>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d11e      	bne.n	80080de <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80080a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a2:	3330      	adds	r3, #48	@ 0x30
 80080a4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fe fbf8 	bl	800689e <ld_dword>
 80080ae:	4603      	mov	r3, r0
 80080b0:	4a17      	ldr	r2, [pc, #92]	@ (8008110 <find_volume+0x490>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d113      	bne.n	80080de <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80080b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b8:	3330      	adds	r3, #48	@ 0x30
 80080ba:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fe fbed 	bl	800689e <ld_dword>
 80080c4:	4602      	mov	r2, r0
 80080c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80080ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080cc:	3330      	adds	r3, #48	@ 0x30
 80080ce:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fe fbe3 	bl	800689e <ld_dword>
 80080d8:	4602      	mov	r2, r0
 80080da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080dc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80080de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80080e4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80080e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008114 <find_volume+0x494>)
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	3301      	adds	r3, #1
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	4b09      	ldr	r3, [pc, #36]	@ (8008114 <find_volume+0x494>)
 80080f0:	801a      	strh	r2, [r3, #0]
 80080f2:	4b08      	ldr	r3, [pc, #32]	@ (8008114 <find_volume+0x494>)
 80080f4:	881a      	ldrh	r2, [r3, #0]
 80080f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80080fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80080fc:	f7fe fdf2 	bl	8006ce4 <clear_lock>
#endif
	return FR_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3758      	adds	r7, #88	@ 0x58
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	41615252 	.word	0x41615252
 8008110:	61417272 	.word	0x61417272
 8008114:	200001bc 	.word	0x200001bc

08008118 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008122:	2309      	movs	r3, #9
 8008124:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d01c      	beq.n	8008166 <validate+0x4e>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d018      	beq.n	8008166 <validate+0x4e>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d013      	beq.n	8008166 <validate+0x4e>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	889a      	ldrh	r2, [r3, #4]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	88db      	ldrh	r3, [r3, #6]
 8008148:	429a      	cmp	r2, r3
 800814a:	d10c      	bne.n	8008166 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	785b      	ldrb	r3, [r3, #1]
 8008152:	4618      	mov	r0, r3
 8008154:	f7fe faee 	bl	8006734 <disk_status>
 8008158:	4603      	mov	r3, r0
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b00      	cmp	r3, #0
 8008160:	d101      	bne.n	8008166 <validate+0x4e>
			res = FR_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d102      	bne.n	8008172 <validate+0x5a>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	e000      	b.n	8008174 <validate+0x5c>
 8008172:	2300      	movs	r3, #0
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	6013      	str	r3, [r2, #0]
	return res;
 8008178:	7bfb      	ldrb	r3, [r7, #15]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
	...

08008184 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b088      	sub	sp, #32
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	4613      	mov	r3, r2
 8008190:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008196:	f107 0310 	add.w	r3, r7, #16
 800819a:	4618      	mov	r0, r3
 800819c:	f7ff fcd7 	bl	8007b4e <get_ldnumber>
 80081a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	da01      	bge.n	80081ac <f_mount+0x28>
 80081a8:	230b      	movs	r3, #11
 80081aa:	e02b      	b.n	8008204 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80081ac:	4a17      	ldr	r2, [pc, #92]	@ (800820c <f_mount+0x88>)
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d005      	beq.n	80081c8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80081bc:	69b8      	ldr	r0, [r7, #24]
 80081be:	f7fe fd91 	bl	8006ce4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	2200      	movs	r2, #0
 80081c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d002      	beq.n	80081d4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	490d      	ldr	r1, [pc, #52]	@ (800820c <f_mount+0x88>)
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d002      	beq.n	80081ea <f_mount+0x66>
 80081e4:	79fb      	ldrb	r3, [r7, #7]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d001      	beq.n	80081ee <f_mount+0x6a>
 80081ea:	2300      	movs	r3, #0
 80081ec:	e00a      	b.n	8008204 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80081ee:	f107 010c 	add.w	r1, r7, #12
 80081f2:	f107 0308 	add.w	r3, r7, #8
 80081f6:	2200      	movs	r2, #0
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7ff fd41 	bl	8007c80 <find_volume>
 80081fe:	4603      	mov	r3, r0
 8008200:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008202:	7dfb      	ldrb	r3, [r7, #23]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3720      	adds	r7, #32
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	200001b8 	.word	0x200001b8

08008210 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b098      	sub	sp, #96	@ 0x60
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	4613      	mov	r3, r2
 800821c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <f_open+0x18>
 8008224:	2309      	movs	r3, #9
 8008226:	e1a9      	b.n	800857c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008228:	79fb      	ldrb	r3, [r7, #7]
 800822a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800822e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008230:	79fa      	ldrb	r2, [r7, #7]
 8008232:	f107 0110 	add.w	r1, r7, #16
 8008236:	f107 0308 	add.w	r3, r7, #8
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff fd20 	bl	8007c80 <find_volume>
 8008240:	4603      	mov	r3, r0
 8008242:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8008246:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800824a:	2b00      	cmp	r3, #0
 800824c:	f040 818d 	bne.w	800856a <f_open+0x35a>
		dj.obj.fs = fs;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	f107 0314 	add.w	r3, r7, #20
 800825a:	4611      	mov	r1, r2
 800825c:	4618      	mov	r0, r3
 800825e:	f7ff fc05 	bl	8007a6c <follow_path>
 8008262:	4603      	mov	r3, r0
 8008264:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008268:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800826c:	2b00      	cmp	r3, #0
 800826e:	d118      	bne.n	80082a2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008270:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008274:	b25b      	sxtb	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	da03      	bge.n	8008282 <f_open+0x72>
				res = FR_INVALID_NAME;
 800827a:	2306      	movs	r3, #6
 800827c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008280:	e00f      	b.n	80082a2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008282:	79fb      	ldrb	r3, [r7, #7]
 8008284:	2b01      	cmp	r3, #1
 8008286:	bf8c      	ite	hi
 8008288:	2301      	movhi	r3, #1
 800828a:	2300      	movls	r3, #0
 800828c:	b2db      	uxtb	r3, r3
 800828e:	461a      	mov	r2, r3
 8008290:	f107 0314 	add.w	r3, r7, #20
 8008294:	4611      	mov	r1, r2
 8008296:	4618      	mov	r0, r3
 8008298:	f7fe fbe2 	bl	8006a60 <chk_lock>
 800829c:	4603      	mov	r3, r0
 800829e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80082a2:	79fb      	ldrb	r3, [r7, #7]
 80082a4:	f003 031c 	and.w	r3, r3, #28
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d07f      	beq.n	80083ac <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80082ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d017      	beq.n	80082e4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80082b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d10e      	bne.n	80082da <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80082bc:	f7fe fc2a 	bl	8006b14 <enq_lock>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d006      	beq.n	80082d4 <f_open+0xc4>
 80082c6:	f107 0314 	add.w	r3, r7, #20
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7ff fb08 	bl	80078e0 <dir_register>
 80082d0:	4603      	mov	r3, r0
 80082d2:	e000      	b.n	80082d6 <f_open+0xc6>
 80082d4:	2312      	movs	r3, #18
 80082d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80082da:	79fb      	ldrb	r3, [r7, #7]
 80082dc:	f043 0308 	orr.w	r3, r3, #8
 80082e0:	71fb      	strb	r3, [r7, #7]
 80082e2:	e010      	b.n	8008306 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80082e4:	7ebb      	ldrb	r3, [r7, #26]
 80082e6:	f003 0311 	and.w	r3, r3, #17
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <f_open+0xe6>
					res = FR_DENIED;
 80082ee:	2307      	movs	r3, #7
 80082f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80082f4:	e007      	b.n	8008306 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80082f6:	79fb      	ldrb	r3, [r7, #7]
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d002      	beq.n	8008306 <f_open+0xf6>
 8008300:	2308      	movs	r3, #8
 8008302:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008306:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800830a:	2b00      	cmp	r3, #0
 800830c:	d168      	bne.n	80083e0 <f_open+0x1d0>
 800830e:	79fb      	ldrb	r3, [r7, #7]
 8008310:	f003 0308 	and.w	r3, r3, #8
 8008314:	2b00      	cmp	r3, #0
 8008316:	d063      	beq.n	80083e0 <f_open+0x1d0>
				dw = GET_FATTIME();
 8008318:	f7fd fcd4 	bl	8005cc4 <get_fattime>
 800831c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800831e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008320:	330e      	adds	r3, #14
 8008322:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008324:	4618      	mov	r0, r3
 8008326:	f7fe faf6 	bl	8006916 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800832a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800832c:	3316      	adds	r3, #22
 800832e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008330:	4618      	mov	r0, r3
 8008332:	f7fe faf0 	bl	8006916 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008338:	330b      	adds	r3, #11
 800833a:	2220      	movs	r2, #32
 800833c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008342:	4611      	mov	r1, r2
 8008344:	4618      	mov	r0, r3
 8008346:	f7ff fa37 	bl	80077b8 <ld_clust>
 800834a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008350:	2200      	movs	r2, #0
 8008352:	4618      	mov	r0, r3
 8008354:	f7ff fa4f 	bl	80077f6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800835a:	331c      	adds	r3, #28
 800835c:	2100      	movs	r1, #0
 800835e:	4618      	mov	r0, r3
 8008360:	f7fe fad9 	bl	8006916 <st_dword>
					fs->wflag = 1;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	2201      	movs	r2, #1
 8008368:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800836a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800836c:	2b00      	cmp	r3, #0
 800836e:	d037      	beq.n	80083e0 <f_open+0x1d0>
						dw = fs->winsect;
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008374:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008376:	f107 0314 	add.w	r3, r7, #20
 800837a:	2200      	movs	r2, #0
 800837c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800837e:	4618      	mov	r0, r3
 8008380:	f7fe ff63 	bl	800724a <remove_chain>
 8008384:	4603      	mov	r3, r0
 8008386:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800838a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800838e:	2b00      	cmp	r3, #0
 8008390:	d126      	bne.n	80083e0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008396:	4618      	mov	r0, r3
 8008398:	f7fe fd0c 	bl	8006db4 <move_window>
 800839c:	4603      	mov	r3, r0
 800839e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80083a6:	3a01      	subs	r2, #1
 80083a8:	60da      	str	r2, [r3, #12]
 80083aa:	e019      	b.n	80083e0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80083ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d115      	bne.n	80083e0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80083b4:	7ebb      	ldrb	r3, [r7, #26]
 80083b6:	f003 0310 	and.w	r3, r3, #16
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <f_open+0x1b6>
					res = FR_NO_FILE;
 80083be:	2304      	movs	r3, #4
 80083c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80083c4:	e00c      	b.n	80083e0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80083c6:	79fb      	ldrb	r3, [r7, #7]
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d007      	beq.n	80083e0 <f_open+0x1d0>
 80083d0:	7ebb      	ldrb	r3, [r7, #26]
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <f_open+0x1d0>
						res = FR_DENIED;
 80083da:	2307      	movs	r3, #7
 80083dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80083e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d126      	bne.n	8008436 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80083e8:	79fb      	ldrb	r3, [r7, #7]
 80083ea:	f003 0308 	and.w	r3, r3, #8
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d003      	beq.n	80083fa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80083f2:	79fb      	ldrb	r3, [r7, #7]
 80083f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008402:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008408:	79fb      	ldrb	r3, [r7, #7]
 800840a:	2b01      	cmp	r3, #1
 800840c:	bf8c      	ite	hi
 800840e:	2301      	movhi	r3, #1
 8008410:	2300      	movls	r3, #0
 8008412:	b2db      	uxtb	r3, r3
 8008414:	461a      	mov	r2, r3
 8008416:	f107 0314 	add.w	r3, r7, #20
 800841a:	4611      	mov	r1, r2
 800841c:	4618      	mov	r0, r3
 800841e:	f7fe fb99 	bl	8006b54 <inc_lock>
 8008422:	4602      	mov	r2, r0
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d102      	bne.n	8008436 <f_open+0x226>
 8008430:	2302      	movs	r3, #2
 8008432:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008436:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800843a:	2b00      	cmp	r3, #0
 800843c:	f040 8095 	bne.w	800856a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008444:	4611      	mov	r1, r2
 8008446:	4618      	mov	r0, r3
 8008448:	f7ff f9b6 	bl	80077b8 <ld_clust>
 800844c:	4602      	mov	r2, r0
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008454:	331c      	adds	r3, #28
 8008456:	4618      	mov	r0, r3
 8008458:	f7fe fa21 	bl	800689e <ld_dword>
 800845c:	4602      	mov	r2, r0
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	88da      	ldrh	r2, [r3, #6]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	79fa      	ldrb	r2, [r7, #7]
 800847a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	3330      	adds	r3, #48	@ 0x30
 8008492:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008496:	2100      	movs	r1, #0
 8008498:	4618      	mov	r0, r3
 800849a:	f7fe fa87 	bl	80069ac <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800849e:	79fb      	ldrb	r3, [r7, #7]
 80084a0:	f003 0320 	and.w	r3, r3, #32
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d060      	beq.n	800856a <f_open+0x35a>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d05c      	beq.n	800856a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	68da      	ldr	r2, [r3, #12]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	895b      	ldrh	r3, [r3, #10]
 80084bc:	025b      	lsls	r3, r3, #9
 80084be:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80084cc:	e016      	b.n	80084fc <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fe fd28 	bl	8006f28 <get_fat>
 80084d8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80084da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d802      	bhi.n	80084e6 <f_open+0x2d6>
 80084e0:	2302      	movs	r3, #2
 80084e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80084e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084ec:	d102      	bne.n	80084f4 <f_open+0x2e4>
 80084ee:	2301      	movs	r3, #1
 80084f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80084f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80084f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80084fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008500:	2b00      	cmp	r3, #0
 8008502:	d103      	bne.n	800850c <f_open+0x2fc>
 8008504:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008508:	429a      	cmp	r2, r3
 800850a:	d8e0      	bhi.n	80084ce <f_open+0x2be>
				}
				fp->clust = clst;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008510:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008512:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008516:	2b00      	cmp	r3, #0
 8008518:	d127      	bne.n	800856a <f_open+0x35a>
 800851a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800851c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008520:	2b00      	cmp	r3, #0
 8008522:	d022      	beq.n	800856a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008528:	4618      	mov	r0, r3
 800852a:	f7fe fcdf 	bl	8006eec <clust2sect>
 800852e:	6478      	str	r0, [r7, #68]	@ 0x44
 8008530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008532:	2b00      	cmp	r3, #0
 8008534:	d103      	bne.n	800853e <f_open+0x32e>
						res = FR_INT_ERR;
 8008536:	2302      	movs	r3, #2
 8008538:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800853c:	e015      	b.n	800856a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800853e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008540:	0a5a      	lsrs	r2, r3, #9
 8008542:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008544:	441a      	add	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	7858      	ldrb	r0, [r3, #1]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6a1a      	ldr	r2, [r3, #32]
 8008558:	2301      	movs	r3, #1
 800855a:	f7fe f92b 	bl	80067b4 <disk_read>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <f_open+0x35a>
 8008564:	2301      	movs	r3, #1
 8008566:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800856a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800856e:	2b00      	cmp	r3, #0
 8008570:	d002      	beq.n	8008578 <f_open+0x368>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008578:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800857c:	4618      	mov	r0, r3
 800857e:	3760      	adds	r7, #96	@ 0x60
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b08c      	sub	sp, #48	@ 0x30
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]
 8008590:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f107 0210 	add.w	r2, r7, #16
 80085a2:	4611      	mov	r1, r2
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7ff fdb7 	bl	8008118 <validate>
 80085aa:	4603      	mov	r3, r0
 80085ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80085b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d107      	bne.n	80085c8 <f_write+0x44>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	7d5b      	ldrb	r3, [r3, #21]
 80085bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80085c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <f_write+0x4a>
 80085c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085cc:	e14b      	b.n	8008866 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	7d1b      	ldrb	r3, [r3, #20]
 80085d2:	f003 0302 	and.w	r3, r3, #2
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d101      	bne.n	80085de <f_write+0x5a>
 80085da:	2307      	movs	r3, #7
 80085dc:	e143      	b.n	8008866 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	699a      	ldr	r2, [r3, #24]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	441a      	add	r2, r3
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	f080 812d 	bcs.w	800884a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	43db      	mvns	r3, r3
 80085f6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80085f8:	e127      	b.n	800884a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008602:	2b00      	cmp	r3, #0
 8008604:	f040 80e3 	bne.w	80087ce <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	0a5b      	lsrs	r3, r3, #9
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	8952      	ldrh	r2, [r2, #10]
 8008612:	3a01      	subs	r2, #1
 8008614:	4013      	ands	r3, r2
 8008616:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d143      	bne.n	80086a6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d10c      	bne.n	8008640 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800862c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862e:	2b00      	cmp	r3, #0
 8008630:	d11a      	bne.n	8008668 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2100      	movs	r1, #0
 8008636:	4618      	mov	r0, r3
 8008638:	f7fe fe6c 	bl	8007314 <create_chain>
 800863c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800863e:	e013      	b.n	8008668 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008644:	2b00      	cmp	r3, #0
 8008646:	d007      	beq.n	8008658 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	4619      	mov	r1, r3
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f7fe fef8 	bl	8007444 <clmt_clust>
 8008654:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008656:	e007      	b.n	8008668 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	69db      	ldr	r3, [r3, #28]
 800865e:	4619      	mov	r1, r3
 8008660:	4610      	mov	r0, r2
 8008662:	f7fe fe57 	bl	8007314 <create_chain>
 8008666:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 80f2 	beq.w	8008854 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008672:	2b01      	cmp	r3, #1
 8008674:	d104      	bne.n	8008680 <f_write+0xfc>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2202      	movs	r2, #2
 800867a:	755a      	strb	r2, [r3, #21]
 800867c:	2302      	movs	r3, #2
 800867e:	e0f2      	b.n	8008866 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008682:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008686:	d104      	bne.n	8008692 <f_write+0x10e>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2201      	movs	r2, #1
 800868c:	755a      	strb	r2, [r3, #21]
 800868e:	2301      	movs	r3, #1
 8008690:	e0e9      	b.n	8008866 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008696:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d102      	bne.n	80086a6 <f_write+0x122>
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086a4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	7d1b      	ldrb	r3, [r3, #20]
 80086aa:	b25b      	sxtb	r3, r3
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	da18      	bge.n	80086e2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	7858      	ldrb	r0, [r3, #1]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6a1a      	ldr	r2, [r3, #32]
 80086be:	2301      	movs	r3, #1
 80086c0:	f7fe f898 	bl	80067f4 <disk_write>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d004      	beq.n	80086d4 <f_write+0x150>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2201      	movs	r2, #1
 80086ce:	755a      	strb	r2, [r3, #21]
 80086d0:	2301      	movs	r3, #1
 80086d2:	e0c8      	b.n	8008866 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	7d1b      	ldrb	r3, [r3, #20]
 80086d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	4619      	mov	r1, r3
 80086ea:	4610      	mov	r0, r2
 80086ec:	f7fe fbfe 	bl	8006eec <clust2sect>
 80086f0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d104      	bne.n	8008702 <f_write+0x17e>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2202      	movs	r2, #2
 80086fc:	755a      	strb	r2, [r3, #21]
 80086fe:	2302      	movs	r3, #2
 8008700:	e0b1      	b.n	8008866 <f_write+0x2e2>
			sect += csect;
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	4413      	add	r3, r2
 8008708:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	0a5b      	lsrs	r3, r3, #9
 800870e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d03c      	beq.n	8008790 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008716:	69ba      	ldr	r2, [r7, #24]
 8008718:	6a3b      	ldr	r3, [r7, #32]
 800871a:	4413      	add	r3, r2
 800871c:	693a      	ldr	r2, [r7, #16]
 800871e:	8952      	ldrh	r2, [r2, #10]
 8008720:	4293      	cmp	r3, r2
 8008722:	d905      	bls.n	8008730 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	895b      	ldrh	r3, [r3, #10]
 8008728:	461a      	mov	r2, r3
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	7858      	ldrb	r0, [r3, #1]
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	69f9      	ldr	r1, [r7, #28]
 800873a:	f7fe f85b 	bl	80067f4 <disk_write>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d004      	beq.n	800874e <f_write+0x1ca>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2201      	movs	r2, #1
 8008748:	755a      	strb	r2, [r3, #21]
 800874a:	2301      	movs	r3, #1
 800874c:	e08b      	b.n	8008866 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6a1a      	ldr	r2, [r3, #32]
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	6a3a      	ldr	r2, [r7, #32]
 8008758:	429a      	cmp	r2, r3
 800875a:	d915      	bls.n	8008788 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6a1a      	ldr	r2, [r3, #32]
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	025b      	lsls	r3, r3, #9
 800876c:	69fa      	ldr	r2, [r7, #28]
 800876e:	4413      	add	r3, r2
 8008770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008774:	4619      	mov	r1, r3
 8008776:	f7fe f8f9 	bl	800696c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	7d1b      	ldrb	r3, [r3, #20]
 800877e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008782:	b2da      	uxtb	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008788:	6a3b      	ldr	r3, [r7, #32]
 800878a:	025b      	lsls	r3, r3, #9
 800878c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800878e:	e03f      	b.n	8008810 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6a1b      	ldr	r3, [r3, #32]
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	429a      	cmp	r2, r3
 8008798:	d016      	beq.n	80087c8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	699a      	ldr	r2, [r3, #24]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d210      	bcs.n	80087c8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	7858      	ldrb	r0, [r3, #1]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80087b0:	2301      	movs	r3, #1
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	f7fd fffe 	bl	80067b4 <disk_read>
 80087b8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d004      	beq.n	80087c8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2201      	movs	r2, #1
 80087c2:	755a      	strb	r2, [r3, #21]
 80087c4:	2301      	movs	r3, #1
 80087c6:	e04e      	b.n	8008866 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80087da:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80087dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d901      	bls.n	80087e8 <f_write+0x264>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f6:	4413      	add	r3, r2
 80087f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087fa:	69f9      	ldr	r1, [r7, #28]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fe f8b5 	bl	800696c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	7d1b      	ldrb	r3, [r3, #20]
 8008806:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800880a:	b2da      	uxtb	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008810:	69fa      	ldr	r2, [r7, #28]
 8008812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008814:	4413      	add	r3, r2
 8008816:	61fb      	str	r3, [r7, #28]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	699a      	ldr	r2, [r3, #24]
 800881c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881e:	441a      	add	r2, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	619a      	str	r2, [r3, #24]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	68da      	ldr	r2, [r3, #12]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	429a      	cmp	r2, r3
 800882e:	bf38      	it	cc
 8008830:	461a      	movcc	r2, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	60da      	str	r2, [r3, #12]
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883c:	441a      	add	r2, r3
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2b00      	cmp	r3, #0
 800884e:	f47f aed4 	bne.w	80085fa <f_write+0x76>
 8008852:	e000      	b.n	8008856 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008854:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	7d1b      	ldrb	r3, [r3, #20]
 800885a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800885e:	b2da      	uxtb	r2, r3
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3730      	adds	r7, #48	@ 0x30
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b086      	sub	sp, #24
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f107 0208 	add.w	r2, r7, #8
 800887c:	4611      	mov	r1, r2
 800887e:	4618      	mov	r0, r3
 8008880:	f7ff fc4a 	bl	8008118 <validate>
 8008884:	4603      	mov	r3, r0
 8008886:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008888:	7dfb      	ldrb	r3, [r7, #23]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d168      	bne.n	8008960 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	7d1b      	ldrb	r3, [r3, #20]
 8008892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008896:	2b00      	cmp	r3, #0
 8008898:	d062      	beq.n	8008960 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	7d1b      	ldrb	r3, [r3, #20]
 800889e:	b25b      	sxtb	r3, r3
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	da15      	bge.n	80088d0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	7858      	ldrb	r0, [r3, #1]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a1a      	ldr	r2, [r3, #32]
 80088b2:	2301      	movs	r3, #1
 80088b4:	f7fd ff9e 	bl	80067f4 <disk_write>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <f_sync+0x54>
 80088be:	2301      	movs	r3, #1
 80088c0:	e04f      	b.n	8008962 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	7d1b      	ldrb	r3, [r3, #20]
 80088c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80088d0:	f7fd f9f8 	bl	8005cc4 <get_fattime>
 80088d4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088dc:	4619      	mov	r1, r3
 80088de:	4610      	mov	r0, r2
 80088e0:	f7fe fa68 	bl	8006db4 <move_window>
 80088e4:	4603      	mov	r3, r0
 80088e6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d138      	bne.n	8008960 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	330b      	adds	r3, #11
 80088f8:	781a      	ldrb	r2, [r3, #0]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	330b      	adds	r3, #11
 80088fe:	f042 0220 	orr.w	r2, r2, #32
 8008902:	b2d2      	uxtb	r2, r2
 8008904:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6818      	ldr	r0, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	461a      	mov	r2, r3
 8008910:	68f9      	ldr	r1, [r7, #12]
 8008912:	f7fe ff70 	bl	80077f6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f103 021c 	add.w	r2, r3, #28
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	4619      	mov	r1, r3
 8008922:	4610      	mov	r0, r2
 8008924:	f7fd fff7 	bl	8006916 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	3316      	adds	r3, #22
 800892c:	6939      	ldr	r1, [r7, #16]
 800892e:	4618      	mov	r0, r3
 8008930:	f7fd fff1 	bl	8006916 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3312      	adds	r3, #18
 8008938:	2100      	movs	r1, #0
 800893a:	4618      	mov	r0, r3
 800893c:	f7fd ffd1 	bl	80068e2 <st_word>
					fs->wflag = 1;
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2201      	movs	r2, #1
 8008944:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	4618      	mov	r0, r3
 800894a:	f7fe fa61 	bl	8006e10 <sync_fs>
 800894e:	4603      	mov	r3, r0
 8008950:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	7d1b      	ldrb	r3, [r3, #20]
 8008956:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800895a:	b2da      	uxtb	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008960:	7dfb      	ldrb	r3, [r7, #23]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3718      	adds	r7, #24
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b084      	sub	sp, #16
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7ff ff7b 	bl	800886e <f_sync>
 8008978:	4603      	mov	r3, r0
 800897a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800897c:	7bfb      	ldrb	r3, [r7, #15]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d118      	bne.n	80089b4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f107 0208 	add.w	r2, r7, #8
 8008988:	4611      	mov	r1, r2
 800898a:	4618      	mov	r0, r3
 800898c:	f7ff fbc4 	bl	8008118 <validate>
 8008990:	4603      	mov	r3, r0
 8008992:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10c      	bne.n	80089b4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe f966 	bl	8006c70 <dec_lock>
 80089a4:	4603      	mov	r3, r0
 80089a6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d102      	bne.n	80089b4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
	...

080089c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b087      	sub	sp, #28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	4613      	mov	r3, r2
 80089cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80089ce:	2301      	movs	r3, #1
 80089d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80089d2:	2300      	movs	r3, #0
 80089d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80089d6:	4b1e      	ldr	r3, [pc, #120]	@ (8008a50 <FATFS_LinkDriverEx+0x90>)
 80089d8:	7a5b      	ldrb	r3, [r3, #9]
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d131      	bne.n	8008a44 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80089e0:	4b1b      	ldr	r3, [pc, #108]	@ (8008a50 <FATFS_LinkDriverEx+0x90>)
 80089e2:	7a5b      	ldrb	r3, [r3, #9]
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	461a      	mov	r2, r3
 80089e8:	4b19      	ldr	r3, [pc, #100]	@ (8008a50 <FATFS_LinkDriverEx+0x90>)
 80089ea:	2100      	movs	r1, #0
 80089ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80089ee:	4b18      	ldr	r3, [pc, #96]	@ (8008a50 <FATFS_LinkDriverEx+0x90>)
 80089f0:	7a5b      	ldrb	r3, [r3, #9]
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	4a16      	ldr	r2, [pc, #88]	@ (8008a50 <FATFS_LinkDriverEx+0x90>)
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80089fe:	4b14      	ldr	r3, [pc, #80]	@ (8008a50 <FATFS_LinkDriverEx+0x90>)
 8008a00:	7a5b      	ldrb	r3, [r3, #9]
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	461a      	mov	r2, r3
 8008a06:	4b12      	ldr	r3, [pc, #72]	@ (8008a50 <FATFS_LinkDriverEx+0x90>)
 8008a08:	4413      	add	r3, r2
 8008a0a:	79fa      	ldrb	r2, [r7, #7]
 8008a0c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008a0e:	4b10      	ldr	r3, [pc, #64]	@ (8008a50 <FATFS_LinkDriverEx+0x90>)
 8008a10:	7a5b      	ldrb	r3, [r3, #9]
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	1c5a      	adds	r2, r3, #1
 8008a16:	b2d1      	uxtb	r1, r2
 8008a18:	4a0d      	ldr	r2, [pc, #52]	@ (8008a50 <FATFS_LinkDriverEx+0x90>)
 8008a1a:	7251      	strb	r1, [r2, #9]
 8008a1c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008a1e:	7dbb      	ldrb	r3, [r7, #22]
 8008a20:	3330      	adds	r3, #48	@ 0x30
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	223a      	movs	r2, #58	@ 0x3a
 8008a2e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	3302      	adds	r3, #2
 8008a34:	222f      	movs	r2, #47	@ 0x2f
 8008a36:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	3303      	adds	r3, #3
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008a40:	2300      	movs	r3, #0
 8008a42:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	371c      	adds	r7, #28
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bc80      	pop	{r7}
 8008a4e:	4770      	bx	lr
 8008a50:	200001e0 	.word	0x200001e0

08008a54 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008a5e:	2200      	movs	r2, #0
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f7ff ffac 	bl	80089c0 <FATFS_LinkDriverEx>
 8008a68:	4603      	mov	r3, r0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <ms5607_init>:
static int64_t sens = 0;
static I2C_TypeDef *i2c;

#define DELAY 10

int ms5607_init(I2C_TypeDef *i2cx) {
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b082      	sub	sp, #8
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
	if (read_prom() == -1)
 8008a7a:	f000 fa6f 	bl	8008f5c <read_prom>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a84:	d102      	bne.n	8008a8c <ms5607_init+0x1a>
		return -1;
 8008a86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a8a:	e000      	b.n	8008a8e <ms5607_init+0x1c>
	else
		return 0;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
	...

08008a98 <ms5607_get_press_temp>:
	else
		read_prom();
	return 0;
}

int ms5607_get_press_temp(uint32_t *pressure, int32_t *temperature) {
 8008a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a9c:	b0c0      	sub	sp, #256	@ 0x100
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
 8008aa4:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8

	int32_t press = 0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	int32_t temp = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	int32_t t2 = 0;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	int64_t off2 = 0;
 8008aba:	f04f 0200 	mov.w	r2, #0
 8008abe:	f04f 0300 	mov.w	r3, #0
 8008ac2:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
	int64_t sens2 = 0;
 8008ac6:	f04f 0200 	mov.w	r2, #0
 8008aca:	f04f 0300 	mov.w	r3, #0
 8008ace:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8

	// Step 1: Read calibration data from PROM
	// Already did this in the init()

	// Step 2: Read pressure and temperature from the MS5607
	if (conversion() == -1)
 8008ad2:	f000 fb75 	bl	80091c0 <conversion>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008adc:	d102      	bne.n	8008ae4 <ms5607_get_press_temp+0x4c>
		return -1;
 8008ade:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008ae2:	e22d      	b.n	8008f40 <ms5607_get_press_temp+0x4a8>

	// The rest of this function mostly looks like random math, it is actually
	// the compensation calculations outline in the datasheet for the device!

	// Step 3: Calculate temperature
	dT = d2 - ((int64_t) c5 << 8);
 8008ae4:	4b9f      	ldr	r3, [pc, #636]	@ (8008d64 <ms5607_get_press_temp+0x2cc>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008aee:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8008af2:	4b9d      	ldr	r3, [pc, #628]	@ (8008d68 <ms5607_get_press_temp+0x2d0>)
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	2200      	movs	r2, #0
 8008afa:	4698      	mov	r8, r3
 8008afc:	4691      	mov	r9, r2
 8008afe:	f04f 0200 	mov.w	r2, #0
 8008b02:	f04f 0300 	mov.w	r3, #0
 8008b06:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8008b0a:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8008b0e:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8008b12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008b16:	4684      	mov	ip, r0
 8008b18:	ebbc 0c02 	subs.w	ip, ip, r2
 8008b1c:	f8c7 c0a8 	str.w	ip, [r7, #168]	@ 0xa8
 8008b20:	eb61 0303 	sbc.w	r3, r1, r3
 8008b24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b28:	4b90      	ldr	r3, [pc, #576]	@ (8008d6c <ms5607_get_press_temp+0x2d4>)
 8008b2a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008b2e:	e9c3 1200 	strd	r1, r2, [r3]

	// temp is e.g. 2000 = 20.00 deg C
	temp = (int64_t) 2000 + ((dT * (int64_t) c6) >> 23);
 8008b32:	4b8f      	ldr	r3, [pc, #572]	@ (8008d70 <ms5607_get_press_temp+0x2d8>)
 8008b34:	881b      	ldrh	r3, [r3, #0]
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	2200      	movs	r2, #0
 8008b3a:	469a      	mov	sl, r3
 8008b3c:	4693      	mov	fp, r2
 8008b3e:	4b8b      	ldr	r3, [pc, #556]	@ (8008d6c <ms5607_get_press_temp+0x2d4>)
 8008b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b44:	fb02 f00b 	mul.w	r0, r2, fp
 8008b48:	fb0a f103 	mul.w	r1, sl, r3
 8008b4c:	4401      	add	r1, r0
 8008b4e:	fbaa 4502 	umull	r4, r5, sl, r2
 8008b52:	194b      	adds	r3, r1, r5
 8008b54:	461d      	mov	r5, r3
 8008b56:	f04f 0200 	mov.w	r2, #0
 8008b5a:	f04f 0300 	mov.w	r3, #0
 8008b5e:	0de2      	lsrs	r2, r4, #23
 8008b60:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 8008b64:	15eb      	asrs	r3, r5, #23
 8008b66:	4613      	mov	r3, r2
 8008b68:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8008b6c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

	// Step 4: Calculate temperature compensated pressure
	off = ((int64_t) c2 * (int64_t) 131072)
 8008b70:	4b80      	ldr	r3, [pc, #512]	@ (8008d74 <ms5607_get_press_temp+0x2dc>)
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	2200      	movs	r2, #0
 8008b78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b7c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008b80:	f04f 0400 	mov.w	r4, #0
 8008b84:	f04f 0500 	mov.w	r5, #0
 8008b88:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	045d      	lsls	r5, r3, #17
 8008b90:	4613      	mov	r3, r2
 8008b92:	460a      	mov	r2, r1
 8008b94:	4611      	mov	r1, r2
 8008b96:	ea45 35d1 	orr.w	r5, r5, r1, lsr #15
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	045c      	lsls	r4, r3, #17
			+ (((int64_t) c4 * dT) / (int64_t) 64);
 8008b9e:	4b76      	ldr	r3, [pc, #472]	@ (8008d78 <ms5607_get_press_temp+0x2e0>)
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008baa:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8008bae:	4b6f      	ldr	r3, [pc, #444]	@ (8008d6c <ms5607_get_press_temp+0x2d4>)
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8008bb8:	4649      	mov	r1, r9
 8008bba:	fb02 f001 	mul.w	r0, r2, r1
 8008bbe:	4641      	mov	r1, r8
 8008bc0:	fb01 f103 	mul.w	r1, r1, r3
 8008bc4:	4401      	add	r1, r0
 8008bc6:	4640      	mov	r0, r8
 8008bc8:	fba0 3202 	umull	r3, r2, r0, r2
 8008bcc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008bd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008bd8:	18cb      	adds	r3, r1, r3
 8008bda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008bde:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	da07      	bge.n	8008bf6 <ms5607_get_press_temp+0x15e>
 8008be6:	f112 013f 	adds.w	r1, r2, #63	@ 0x3f
 8008bea:	6439      	str	r1, [r7, #64]	@ 0x40
 8008bec:	f143 0300 	adc.w	r3, r3, #0
 8008bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008bf6:	f04f 0000 	mov.w	r0, #0
 8008bfa:	f04f 0100 	mov.w	r1, #0
 8008bfe:	0990      	lsrs	r0, r2, #6
 8008c00:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8008c04:	1199      	asrs	r1, r3, #6
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	18a1      	adds	r1, r4, r2
 8008c0c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8008c10:	eb45 0303 	adc.w	r3, r5, r3
 8008c14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	off = ((int64_t) c2 * (int64_t) 131072)
 8008c18:	4b58      	ldr	r3, [pc, #352]	@ (8008d7c <ms5607_get_press_temp+0x2e4>)
 8008c1a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008c1e:	e9c3 1200 	strd	r1, r2, [r3]
	sens = ((int64_t) c1 * (int64_t) 65536)
 8008c22:	4b57      	ldr	r3, [pc, #348]	@ (8008d80 <ms5607_get_press_temp+0x2e8>)
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c2e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008c32:	f04f 0400 	mov.w	r4, #0
 8008c36:	f04f 0500 	mov.w	r5, #0
 8008c3a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008c3e:	4613      	mov	r3, r2
 8008c40:	041d      	lsls	r5, r3, #16
 8008c42:	4613      	mov	r3, r2
 8008c44:	460a      	mov	r2, r1
 8008c46:	4611      	mov	r1, r2
 8008c48:	ea45 4511 	orr.w	r5, r5, r1, lsr #16
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	041c      	lsls	r4, r3, #16
			+ (((int64_t) c3 * dT) / (int64_t) 128);
 8008c50:	4b4c      	ldr	r3, [pc, #304]	@ (8008d84 <ms5607_get_press_temp+0x2ec>)
 8008c52:	881b      	ldrh	r3, [r3, #0]
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	2200      	movs	r2, #0
 8008c58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c5c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8008c60:	4b42      	ldr	r3, [pc, #264]	@ (8008d6c <ms5607_get_press_temp+0x2d4>)
 8008c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c66:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8008c6a:	4649      	mov	r1, r9
 8008c6c:	fb02 f001 	mul.w	r0, r2, r1
 8008c70:	4641      	mov	r1, r8
 8008c72:	fb01 f103 	mul.w	r1, r1, r3
 8008c76:	4401      	add	r1, r0
 8008c78:	4640      	mov	r0, r8
 8008c7a:	fba0 3202 	umull	r3, r2, r0, r2
 8008c7e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8008c82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008c8a:	18cb      	adds	r3, r1, r3
 8008c8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008c90:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	da07      	bge.n	8008ca8 <ms5607_get_press_temp+0x210>
 8008c98:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 8008c9c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008c9e:	f143 0300 	adc.w	r3, r3, #0
 8008ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ca4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008ca8:	f04f 0000 	mov.w	r0, #0
 8008cac:	f04f 0100 	mov.w	r1, #0
 8008cb0:	09d0      	lsrs	r0, r2, #7
 8008cb2:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8008cb6:	11d9      	asrs	r1, r3, #7
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	18a1      	adds	r1, r4, r2
 8008cbe:	67b9      	str	r1, [r7, #120]	@ 0x78
 8008cc0:	eb45 0303 	adc.w	r3, r5, r3
 8008cc4:	67fb      	str	r3, [r7, #124]	@ 0x7c
	sens = ((int64_t) c1 * (int64_t) 65536)
 8008cc6:	4b30      	ldr	r3, [pc, #192]	@ (8008d88 <ms5607_get_press_temp+0x2f0>)
 8008cc8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008ccc:	e9c3 1200 	strd	r1, r2, [r3]

	// Second order compensation
	if (temp < (int) 2000) {
 8008cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cd4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8008cd8:	f280 80d4 	bge.w	8008e84 <ms5607_get_press_temp+0x3ec>

		t2 = ((dT * dT) / ((int64_t) 2147483648));
 8008cdc:	4b23      	ldr	r3, [pc, #140]	@ (8008d6c <ms5607_get_press_temp+0x2d4>)
 8008cde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ce2:	4b22      	ldr	r3, [pc, #136]	@ (8008d6c <ms5607_get_press_temp+0x2d4>)
 8008ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce8:	fb02 f501 	mul.w	r5, r2, r1
 8008cec:	fb00 f403 	mul.w	r4, r0, r3
 8008cf0:	442c      	add	r4, r5
 8008cf2:	fba0 3202 	umull	r3, r2, r0, r2
 8008cf6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008cfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008cfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008d02:	18e3      	adds	r3, r4, r3
 8008d04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008d08:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	da08      	bge.n	8008d22 <ms5607_get_press_temp+0x28a>
 8008d10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008d14:	1851      	adds	r1, r2, r1
 8008d16:	6339      	str	r1, [r7, #48]	@ 0x30
 8008d18:	f143 0300 	adc.w	r3, r3, #0
 8008d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8008d22:	f04f 0000 	mov.w	r0, #0
 8008d26:	f04f 0100 	mov.w	r1, #0
 8008d2a:	0fd0      	lsrs	r0, r2, #31
 8008d2c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8008d30:	17d9      	asrs	r1, r3, #31
 8008d32:	4602      	mov	r2, r0
 8008d34:	460b      	mov	r3, r1
 8008d36:	4613      	mov	r3, r2
 8008d38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
		off2 = (61 * ((temp - 2000) * (temp - 2000)) / 16);
 8008d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d40:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 8008d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d48:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8008d4c:	fb03 f202 	mul.w	r2, r3, r2
 8008d50:	4613      	mov	r3, r2
 8008d52:	011b      	lsls	r3, r3, #4
 8008d54:	1a9b      	subs	r3, r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	4413      	add	r3, r2
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	da16      	bge.n	8008d8c <ms5607_get_press_temp+0x2f4>
 8008d5e:	330f      	adds	r3, #15
 8008d60:	e014      	b.n	8008d8c <ms5607_get_press_temp+0x2f4>
 8008d62:	bf00      	nop
 8008d64:	200001fc 	.word	0x200001fc
 8008d68:	200001f4 	.word	0x200001f4
 8008d6c:	20000200 	.word	0x20000200
 8008d70:	200001f6 	.word	0x200001f6
 8008d74:	200001ee 	.word	0x200001ee
 8008d78:	200001f2 	.word	0x200001f2
 8008d7c:	20000208 	.word	0x20000208
 8008d80:	200001ec 	.word	0x200001ec
 8008d84:	200001f0 	.word	0x200001f0
 8008d88:	20000210 	.word	0x20000210
 8008d8c:	111b      	asrs	r3, r3, #4
 8008d8e:	17da      	asrs	r2, r3, #31
 8008d90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d94:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8008d98:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0
		sens2 = (2 * ((temp - 2000) ^ 2));
 8008d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008da0:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8008da4:	f083 0302 	eor.w	r3, r3, #2
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	17da      	asrs	r2, r3, #31
 8008dac:	623b      	str	r3, [r7, #32]
 8008dae:	627a      	str	r2, [r7, #36]	@ 0x24
 8008db0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008db4:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8

		if (temp < -15) {
 8008db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008dbc:	f113 0f0f 	cmn.w	r3, #15
 8008dc0:	da3b      	bge.n	8008e3a <ms5607_get_press_temp+0x3a2>

			off2 = (off2 + (15 * ((temp + 1500) * (temp + 1500))));
 8008dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008dc6:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 8008dca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008dce:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8008dd2:	fb03 f202 	mul.w	r2, r3, r2
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	011b      	lsls	r3, r3, #4
 8008dda:	1a9b      	subs	r3, r3, r2
 8008ddc:	17da      	asrs	r2, r3, #31
 8008dde:	673b      	str	r3, [r7, #112]	@ 0x70
 8008de0:	677a      	str	r2, [r7, #116]	@ 0x74
 8008de2:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 8008de6:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8008dea:	4621      	mov	r1, r4
 8008dec:	1851      	adds	r1, r2, r1
 8008dee:	61b9      	str	r1, [r7, #24]
 8008df0:	4629      	mov	r1, r5
 8008df2:	eb43 0101 	adc.w	r1, r3, r1
 8008df6:	61f9      	str	r1, [r7, #28]
 8008df8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008dfc:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0
			sens2 = (sens2 + (8 * ((temp + 1500) * (temp + 1500))));
 8008e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e04:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 8008e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e0c:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8008e10:	fb02 f303 	mul.w	r3, r2, r3
 8008e14:	00db      	lsls	r3, r3, #3
 8008e16:	17da      	asrs	r2, r3, #31
 8008e18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008e1c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8008e20:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8008e24:	4621      	mov	r1, r4
 8008e26:	1851      	adds	r1, r2, r1
 8008e28:	6139      	str	r1, [r7, #16]
 8008e2a:	4629      	mov	r1, r5
 8008e2c:	eb43 0101 	adc.w	r1, r3, r1
 8008e30:	6179      	str	r1, [r7, #20]
 8008e32:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008e36:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8
		}

		temp = temp - t2;
 8008e3a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8008e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
		off = off - off2;
 8008e48:	4b40      	ldr	r3, [pc, #256]	@ (8008f4c <ms5607_get_press_temp+0x4b4>)
 8008e4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e4e:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 8008e52:	1a84      	subs	r4, r0, r2
 8008e54:	663c      	str	r4, [r7, #96]	@ 0x60
 8008e56:	eb61 0303 	sbc.w	r3, r1, r3
 8008e5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8008f4c <ms5607_get_press_temp+0x4b4>)
 8008e5e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008e62:	e9c3 1200 	strd	r1, r2, [r3]
		sens = sens - sens2;
 8008e66:	4b3a      	ldr	r3, [pc, #232]	@ (8008f50 <ms5607_get_press_temp+0x4b8>)
 8008e68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e6c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8008e70:	1a84      	subs	r4, r0, r2
 8008e72:	65bc      	str	r4, [r7, #88]	@ 0x58
 8008e74:	eb61 0303 	sbc.w	r3, r1, r3
 8008e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e7a:	4b35      	ldr	r3, [pc, #212]	@ (8008f50 <ms5607_get_press_temp+0x4b8>)
 8008e7c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008e80:	e9c3 1200 	strd	r1, r2, [r3]
	}

	press = (((d1 * sens) / (2097152)) - off) / (32768);
 8008e84:	4b33      	ldr	r3, [pc, #204]	@ (8008f54 <ms5607_get_press_temp+0x4bc>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e8c:	657a      	str	r2, [r7, #84]	@ 0x54
 8008e8e:	4b30      	ldr	r3, [pc, #192]	@ (8008f50 <ms5607_get_press_temp+0x4b8>)
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8008e98:	4629      	mov	r1, r5
 8008e9a:	fb02 f001 	mul.w	r0, r2, r1
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	fb01 f103 	mul.w	r1, r1, r3
 8008ea4:	4401      	add	r1, r0
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	fba0 3202 	umull	r3, r2, r0, r2
 8008eac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008eb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008eb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008eb8:	18cb      	adds	r3, r1, r3
 8008eba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008ebe:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	da07      	bge.n	8008ed6 <ms5607_get_press_temp+0x43e>
 8008ec6:	4924      	ldr	r1, [pc, #144]	@ (8008f58 <ms5607_get_press_temp+0x4c0>)
 8008ec8:	1851      	adds	r1, r2, r1
 8008eca:	60b9      	str	r1, [r7, #8]
 8008ecc:	f143 0300 	adc.w	r3, r3, #0
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ed6:	f04f 0000 	mov.w	r0, #0
 8008eda:	f04f 0100 	mov.w	r1, #0
 8008ede:	0d50      	lsrs	r0, r2, #21
 8008ee0:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8008ee4:	1559      	asrs	r1, r3, #21
 8008ee6:	4b19      	ldr	r3, [pc, #100]	@ (8008f4c <ms5607_get_press_temp+0x4b4>)
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	1a84      	subs	r4, r0, r2
 8008eee:	64bc      	str	r4, [r7, #72]	@ 0x48
 8008ef0:	eb61 0303 	sbc.w	r3, r1, r3
 8008ef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ef6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	da08      	bge.n	8008f10 <ms5607_get_press_temp+0x478>
 8008efe:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008f02:	1851      	adds	r1, r2, r1
 8008f04:	6039      	str	r1, [r7, #0]
 8008f06:	f143 0300 	adc.w	r3, r3, #0
 8008f0a:	607b      	str	r3, [r7, #4]
 8008f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f10:	f04f 0000 	mov.w	r0, #0
 8008f14:	f04f 0100 	mov.w	r1, #0
 8008f18:	0bd0      	lsrs	r0, r2, #15
 8008f1a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8008f1e:	13d9      	asrs	r1, r3, #15
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	4613      	mov	r3, r2
 8008f26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

	// in "centi-celsius" e.g. 2000 = 20.00 deg C
	*temperature = temp;
 8008f2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f2e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8008f32:	601a      	str	r2, [r3, #0]

	// in "centi-millibar" e.g. 110002 = 1100.02 mbar
	*pressure = press;
 8008f34:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f3c:	601a      	str	r2, [r3, #0]

	return 0;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008f46:	46bd      	mov	sp, r7
 8008f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f4c:	20000208 	.word	0x20000208
 8008f50:	20000210 	.word	0x20000210
 8008f54:	200001f8 	.word	0x200001f8
 8008f58:	001fffff 	.word	0x001fffff

08008f5c <read_prom>:

static int read_prom() {
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af02      	add	r7, sp, #8
	uint8_t buf[2] = { 0, 0 };
 8008f62:	2300      	movs	r3, #0
 8008f64:	80bb      	strh	r3, [r7, #4]

	uint8_t cmd = MS5607_READ_C1_CMD;
 8008f66:	23a2      	movs	r3, #162	@ 0xa2
 8008f68:	70fb      	strb	r3, [r7, #3]
	if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, 0) == -1)
 8008f6a:	4b8e      	ldr	r3, [pc, #568]	@ (80091a4 <read_prom+0x248>)
 8008f6c:	6818      	ldr	r0, [r3, #0]
 8008f6e:	1cfa      	adds	r2, r7, #3
 8008f70:	2300      	movs	r3, #0
 8008f72:	9300      	str	r3, [sp, #0]
 8008f74:	2301      	movs	r3, #1
 8008f76:	2177      	movs	r1, #119	@ 0x77
 8008f78:	f000 fcb8 	bl	80098ec <i2c_write_blocking>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f82:	d102      	bne.n	8008f8a <read_prom+0x2e>
		return -1;
 8008f84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f88:	e108      	b.n	800919c <read_prom+0x240>
	LL_mDelay(DELAY);
 8008f8a:	200a      	movs	r0, #10
 8008f8c:	f7fc fe4e 	bl	8005c2c <LL_mDelay>
	if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 2, 0) == -1)
 8008f90:	4b84      	ldr	r3, [pc, #528]	@ (80091a4 <read_prom+0x248>)
 8008f92:	6818      	ldr	r0, [r3, #0]
 8008f94:	1d3a      	adds	r2, r7, #4
 8008f96:	2300      	movs	r3, #0
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	2302      	movs	r3, #2
 8008f9c:	2177      	movs	r1, #119	@ 0x77
 8008f9e:	f000 fc61 	bl	8009864 <i2c_read_blocking>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008fa8:	d102      	bne.n	8008fb0 <read_prom+0x54>
		return -1;
 8008faa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008fae:	e0f5      	b.n	800919c <read_prom+0x240>
	c1 = ((uint16_t) buf[0] << 8) | buf[1];
 8008fb0:	793b      	ldrb	r3, [r7, #4]
 8008fb2:	021b      	lsls	r3, r3, #8
 8008fb4:	b21a      	sxth	r2, r3
 8008fb6:	797b      	ldrb	r3, [r7, #5]
 8008fb8:	b21b      	sxth	r3, r3
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	b21b      	sxth	r3, r3
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	4b79      	ldr	r3, [pc, #484]	@ (80091a8 <read_prom+0x24c>)
 8008fc2:	801a      	strh	r2, [r3, #0]

	cmd = MS5607_READ_C2_CMD;
 8008fc4:	23a4      	movs	r3, #164	@ 0xa4
 8008fc6:	70fb      	strb	r3, [r7, #3]
	if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, 0) == -1)
 8008fc8:	4b76      	ldr	r3, [pc, #472]	@ (80091a4 <read_prom+0x248>)
 8008fca:	6818      	ldr	r0, [r3, #0]
 8008fcc:	1cfa      	adds	r2, r7, #3
 8008fce:	2300      	movs	r3, #0
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	2177      	movs	r1, #119	@ 0x77
 8008fd6:	f000 fc89 	bl	80098ec <i2c_write_blocking>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008fe0:	d102      	bne.n	8008fe8 <read_prom+0x8c>
		return -1;
 8008fe2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008fe6:	e0d9      	b.n	800919c <read_prom+0x240>
	LL_mDelay(DELAY);
 8008fe8:	200a      	movs	r0, #10
 8008fea:	f7fc fe1f 	bl	8005c2c <LL_mDelay>
	if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 2, 0) == -1)
 8008fee:	4b6d      	ldr	r3, [pc, #436]	@ (80091a4 <read_prom+0x248>)
 8008ff0:	6818      	ldr	r0, [r3, #0]
 8008ff2:	1d3a      	adds	r2, r7, #4
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	2177      	movs	r1, #119	@ 0x77
 8008ffc:	f000 fc32 	bl	8009864 <i2c_read_blocking>
 8009000:	4603      	mov	r3, r0
 8009002:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009006:	d102      	bne.n	800900e <read_prom+0xb2>
		return -1;
 8009008:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800900c:	e0c6      	b.n	800919c <read_prom+0x240>
	c2 = ((uint16_t) buf[0] << 8) | buf[1];
 800900e:	793b      	ldrb	r3, [r7, #4]
 8009010:	021b      	lsls	r3, r3, #8
 8009012:	b21a      	sxth	r2, r3
 8009014:	797b      	ldrb	r3, [r7, #5]
 8009016:	b21b      	sxth	r3, r3
 8009018:	4313      	orrs	r3, r2
 800901a:	b21b      	sxth	r3, r3
 800901c:	b29a      	uxth	r2, r3
 800901e:	4b63      	ldr	r3, [pc, #396]	@ (80091ac <read_prom+0x250>)
 8009020:	801a      	strh	r2, [r3, #0]

	cmd = MS5607_READ_C3_CMD;
 8009022:	23a6      	movs	r3, #166	@ 0xa6
 8009024:	70fb      	strb	r3, [r7, #3]
	if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, 0) == -1)
 8009026:	4b5f      	ldr	r3, [pc, #380]	@ (80091a4 <read_prom+0x248>)
 8009028:	6818      	ldr	r0, [r3, #0]
 800902a:	1cfa      	adds	r2, r7, #3
 800902c:	2300      	movs	r3, #0
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	2301      	movs	r3, #1
 8009032:	2177      	movs	r1, #119	@ 0x77
 8009034:	f000 fc5a 	bl	80098ec <i2c_write_blocking>
 8009038:	4603      	mov	r3, r0
 800903a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800903e:	d102      	bne.n	8009046 <read_prom+0xea>
		return -1;
 8009040:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009044:	e0aa      	b.n	800919c <read_prom+0x240>
	LL_mDelay(DELAY);
 8009046:	200a      	movs	r0, #10
 8009048:	f7fc fdf0 	bl	8005c2c <LL_mDelay>
	if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 2, 0) == -1)
 800904c:	4b55      	ldr	r3, [pc, #340]	@ (80091a4 <read_prom+0x248>)
 800904e:	6818      	ldr	r0, [r3, #0]
 8009050:	1d3a      	adds	r2, r7, #4
 8009052:	2300      	movs	r3, #0
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	2302      	movs	r3, #2
 8009058:	2177      	movs	r1, #119	@ 0x77
 800905a:	f000 fc03 	bl	8009864 <i2c_read_blocking>
 800905e:	4603      	mov	r3, r0
 8009060:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009064:	d102      	bne.n	800906c <read_prom+0x110>
		return -1;
 8009066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800906a:	e097      	b.n	800919c <read_prom+0x240>
	c3 = ((uint16_t) buf[0] << 8) | buf[1];
 800906c:	793b      	ldrb	r3, [r7, #4]
 800906e:	021b      	lsls	r3, r3, #8
 8009070:	b21a      	sxth	r2, r3
 8009072:	797b      	ldrb	r3, [r7, #5]
 8009074:	b21b      	sxth	r3, r3
 8009076:	4313      	orrs	r3, r2
 8009078:	b21b      	sxth	r3, r3
 800907a:	b29a      	uxth	r2, r3
 800907c:	4b4c      	ldr	r3, [pc, #304]	@ (80091b0 <read_prom+0x254>)
 800907e:	801a      	strh	r2, [r3, #0]

	cmd = MS5607_READ_C4_CMD;
 8009080:	23a8      	movs	r3, #168	@ 0xa8
 8009082:	70fb      	strb	r3, [r7, #3]
	if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, 0) == -1)
 8009084:	4b47      	ldr	r3, [pc, #284]	@ (80091a4 <read_prom+0x248>)
 8009086:	6818      	ldr	r0, [r3, #0]
 8009088:	1cfa      	adds	r2, r7, #3
 800908a:	2300      	movs	r3, #0
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	2301      	movs	r3, #1
 8009090:	2177      	movs	r1, #119	@ 0x77
 8009092:	f000 fc2b 	bl	80098ec <i2c_write_blocking>
 8009096:	4603      	mov	r3, r0
 8009098:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800909c:	d102      	bne.n	80090a4 <read_prom+0x148>
		return -1;
 800909e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80090a2:	e07b      	b.n	800919c <read_prom+0x240>
	LL_mDelay(DELAY);
 80090a4:	200a      	movs	r0, #10
 80090a6:	f7fc fdc1 	bl	8005c2c <LL_mDelay>
	if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 2, 0) == -1)
 80090aa:	4b3e      	ldr	r3, [pc, #248]	@ (80091a4 <read_prom+0x248>)
 80090ac:	6818      	ldr	r0, [r3, #0]
 80090ae:	1d3a      	adds	r2, r7, #4
 80090b0:	2300      	movs	r3, #0
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	2302      	movs	r3, #2
 80090b6:	2177      	movs	r1, #119	@ 0x77
 80090b8:	f000 fbd4 	bl	8009864 <i2c_read_blocking>
 80090bc:	4603      	mov	r3, r0
 80090be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090c2:	d102      	bne.n	80090ca <read_prom+0x16e>
		return -1;
 80090c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80090c8:	e068      	b.n	800919c <read_prom+0x240>
	c4 = ((uint16_t) buf[0] << 8) | buf[1];
 80090ca:	793b      	ldrb	r3, [r7, #4]
 80090cc:	021b      	lsls	r3, r3, #8
 80090ce:	b21a      	sxth	r2, r3
 80090d0:	797b      	ldrb	r3, [r7, #5]
 80090d2:	b21b      	sxth	r3, r3
 80090d4:	4313      	orrs	r3, r2
 80090d6:	b21b      	sxth	r3, r3
 80090d8:	b29a      	uxth	r2, r3
 80090da:	4b36      	ldr	r3, [pc, #216]	@ (80091b4 <read_prom+0x258>)
 80090dc:	801a      	strh	r2, [r3, #0]

	cmd = MS5607_READ_C5_CMD;
 80090de:	23aa      	movs	r3, #170	@ 0xaa
 80090e0:	70fb      	strb	r3, [r7, #3]
	if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, 0) == -1)
 80090e2:	4b30      	ldr	r3, [pc, #192]	@ (80091a4 <read_prom+0x248>)
 80090e4:	6818      	ldr	r0, [r3, #0]
 80090e6:	1cfa      	adds	r2, r7, #3
 80090e8:	2300      	movs	r3, #0
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	2301      	movs	r3, #1
 80090ee:	2177      	movs	r1, #119	@ 0x77
 80090f0:	f000 fbfc 	bl	80098ec <i2c_write_blocking>
 80090f4:	4603      	mov	r3, r0
 80090f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090fa:	d102      	bne.n	8009102 <read_prom+0x1a6>
		return -1;
 80090fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009100:	e04c      	b.n	800919c <read_prom+0x240>
	LL_mDelay(DELAY);
 8009102:	200a      	movs	r0, #10
 8009104:	f7fc fd92 	bl	8005c2c <LL_mDelay>
	if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 2, 0) == -1)
 8009108:	4b26      	ldr	r3, [pc, #152]	@ (80091a4 <read_prom+0x248>)
 800910a:	6818      	ldr	r0, [r3, #0]
 800910c:	1d3a      	adds	r2, r7, #4
 800910e:	2300      	movs	r3, #0
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	2302      	movs	r3, #2
 8009114:	2177      	movs	r1, #119	@ 0x77
 8009116:	f000 fba5 	bl	8009864 <i2c_read_blocking>
 800911a:	4603      	mov	r3, r0
 800911c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009120:	d102      	bne.n	8009128 <read_prom+0x1cc>
		return -1;
 8009122:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009126:	e039      	b.n	800919c <read_prom+0x240>
	c5 = ((uint16_t) buf[0] << 8) | buf[1];
 8009128:	793b      	ldrb	r3, [r7, #4]
 800912a:	021b      	lsls	r3, r3, #8
 800912c:	b21a      	sxth	r2, r3
 800912e:	797b      	ldrb	r3, [r7, #5]
 8009130:	b21b      	sxth	r3, r3
 8009132:	4313      	orrs	r3, r2
 8009134:	b21b      	sxth	r3, r3
 8009136:	b29a      	uxth	r2, r3
 8009138:	4b1f      	ldr	r3, [pc, #124]	@ (80091b8 <read_prom+0x25c>)
 800913a:	801a      	strh	r2, [r3, #0]

	cmd = MS5607_READ_C6_CMD;
 800913c:	23ac      	movs	r3, #172	@ 0xac
 800913e:	70fb      	strb	r3, [r7, #3]
	if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, 0) == -1)
 8009140:	4b18      	ldr	r3, [pc, #96]	@ (80091a4 <read_prom+0x248>)
 8009142:	6818      	ldr	r0, [r3, #0]
 8009144:	1cfa      	adds	r2, r7, #3
 8009146:	2300      	movs	r3, #0
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	2301      	movs	r3, #1
 800914c:	2177      	movs	r1, #119	@ 0x77
 800914e:	f000 fbcd 	bl	80098ec <i2c_write_blocking>
 8009152:	4603      	mov	r3, r0
 8009154:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009158:	d102      	bne.n	8009160 <read_prom+0x204>
		return -1;
 800915a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800915e:	e01d      	b.n	800919c <read_prom+0x240>
	LL_mDelay(DELAY);
 8009160:	200a      	movs	r0, #10
 8009162:	f7fc fd63 	bl	8005c2c <LL_mDelay>
	if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 2, 0) == -1)
 8009166:	4b0f      	ldr	r3, [pc, #60]	@ (80091a4 <read_prom+0x248>)
 8009168:	6818      	ldr	r0, [r3, #0]
 800916a:	1d3a      	adds	r2, r7, #4
 800916c:	2300      	movs	r3, #0
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	2302      	movs	r3, #2
 8009172:	2177      	movs	r1, #119	@ 0x77
 8009174:	f000 fb76 	bl	8009864 <i2c_read_blocking>
 8009178:	4603      	mov	r3, r0
 800917a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800917e:	d102      	bne.n	8009186 <read_prom+0x22a>
		return -1;
 8009180:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009184:	e00a      	b.n	800919c <read_prom+0x240>
	c6 = ((uint16_t) buf[0] << 8) | buf[1];
 8009186:	793b      	ldrb	r3, [r7, #4]
 8009188:	021b      	lsls	r3, r3, #8
 800918a:	b21a      	sxth	r2, r3
 800918c:	797b      	ldrb	r3, [r7, #5]
 800918e:	b21b      	sxth	r3, r3
 8009190:	4313      	orrs	r3, r2
 8009192:	b21b      	sxth	r3, r3
 8009194:	b29a      	uxth	r2, r3
 8009196:	4b09      	ldr	r3, [pc, #36]	@ (80091bc <read_prom+0x260>)
 8009198:	801a      	strh	r2, [r3, #0]

	return 0;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	20000218 	.word	0x20000218
 80091a8:	200001ec 	.word	0x200001ec
 80091ac:	200001ee 	.word	0x200001ee
 80091b0:	200001f0 	.word	0x200001f0
 80091b4:	200001f2 	.word	0x200001f2
 80091b8:	200001f4 	.word	0x200001f4
 80091bc:	200001f6 	.word	0x200001f6

080091c0 <conversion>:

static int conversion() {
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af02      	add	r7, sp, #8
	uint8_t buf[3] = { 0, 0, 0 };
 80091c6:	4a4c      	ldr	r2, [pc, #304]	@ (80092f8 <conversion+0x138>)
 80091c8:	1d3b      	adds	r3, r7, #4
 80091ca:	6812      	ldr	r2, [r2, #0]
 80091cc:	4611      	mov	r1, r2
 80091ce:	8019      	strh	r1, [r3, #0]
 80091d0:	3302      	adds	r3, #2
 80091d2:	0c12      	lsrs	r2, r2, #16
 80091d4:	701a      	strb	r2, [r3, #0]

	uint8_t cmd = MS5607_PRESS_CONV_CMD;
 80091d6:	2348      	movs	r3, #72	@ 0x48
 80091d8:	70fb      	strb	r3, [r7, #3]
	if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, 0) == -1)
 80091da:	4b48      	ldr	r3, [pc, #288]	@ (80092fc <conversion+0x13c>)
 80091dc:	6818      	ldr	r0, [r3, #0]
 80091de:	1cfa      	adds	r2, r7, #3
 80091e0:	2300      	movs	r3, #0
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	2301      	movs	r3, #1
 80091e6:	2177      	movs	r1, #119	@ 0x77
 80091e8:	f000 fb80 	bl	80098ec <i2c_write_blocking>
 80091ec:	4603      	mov	r3, r0
 80091ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091f2:	d102      	bne.n	80091fa <conversion+0x3a>
		return -1;
 80091f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80091f8:	e07a      	b.n	80092f0 <conversion+0x130>
	LL_mDelay(DELAY);
 80091fa:	200a      	movs	r0, #10
 80091fc:	f7fc fd16 	bl	8005c2c <LL_mDelay>

	cmd = MS5607_READ_CMD;
 8009200:	2300      	movs	r3, #0
 8009202:	70fb      	strb	r3, [r7, #3]
	if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, 0) == -1)
 8009204:	4b3d      	ldr	r3, [pc, #244]	@ (80092fc <conversion+0x13c>)
 8009206:	6818      	ldr	r0, [r3, #0]
 8009208:	1cfa      	adds	r2, r7, #3
 800920a:	2300      	movs	r3, #0
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	2301      	movs	r3, #1
 8009210:	2177      	movs	r1, #119	@ 0x77
 8009212:	f000 fb6b 	bl	80098ec <i2c_write_blocking>
 8009216:	4603      	mov	r3, r0
 8009218:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800921c:	d102      	bne.n	8009224 <conversion+0x64>
		return -1;
 800921e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009222:	e065      	b.n	80092f0 <conversion+0x130>
	LL_mDelay(DELAY);
 8009224:	200a      	movs	r0, #10
 8009226:	f7fc fd01 	bl	8005c2c <LL_mDelay>

	if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 3, 0) == -1)
 800922a:	4b34      	ldr	r3, [pc, #208]	@ (80092fc <conversion+0x13c>)
 800922c:	6818      	ldr	r0, [r3, #0]
 800922e:	1d3a      	adds	r2, r7, #4
 8009230:	2300      	movs	r3, #0
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	2303      	movs	r3, #3
 8009236:	2177      	movs	r1, #119	@ 0x77
 8009238:	f000 fb14 	bl	8009864 <i2c_read_blocking>
 800923c:	4603      	mov	r3, r0
 800923e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009242:	d102      	bne.n	800924a <conversion+0x8a>
		return -1;
 8009244:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009248:	e052      	b.n	80092f0 <conversion+0x130>

	d1 = ((uint32_t) buf[0] << 16) | ((uint32_t) buf[1] << 8) | buf[2];
 800924a:	793b      	ldrb	r3, [r7, #4]
 800924c:	041a      	lsls	r2, r3, #16
 800924e:	797b      	ldrb	r3, [r7, #5]
 8009250:	021b      	lsls	r3, r3, #8
 8009252:	4313      	orrs	r3, r2
 8009254:	79ba      	ldrb	r2, [r7, #6]
 8009256:	4313      	orrs	r3, r2
 8009258:	4a29      	ldr	r2, [pc, #164]	@ (8009300 <conversion+0x140>)
 800925a:	6013      	str	r3, [r2, #0]

	buf[0] = 0;
 800925c:	2300      	movs	r3, #0
 800925e:	713b      	strb	r3, [r7, #4]
	buf[1] = 0;
 8009260:	2300      	movs	r3, #0
 8009262:	717b      	strb	r3, [r7, #5]
	buf[2] = 0;
 8009264:	2300      	movs	r3, #0
 8009266:	71bb      	strb	r3, [r7, #6]

	cmd = MS5607_TEMP_CONV_CMD;
 8009268:	2358      	movs	r3, #88	@ 0x58
 800926a:	70fb      	strb	r3, [r7, #3]
	if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, 0) == -1)
 800926c:	4b23      	ldr	r3, [pc, #140]	@ (80092fc <conversion+0x13c>)
 800926e:	6818      	ldr	r0, [r3, #0]
 8009270:	1cfa      	adds	r2, r7, #3
 8009272:	2300      	movs	r3, #0
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	2301      	movs	r3, #1
 8009278:	2177      	movs	r1, #119	@ 0x77
 800927a:	f000 fb37 	bl	80098ec <i2c_write_blocking>
 800927e:	4603      	mov	r3, r0
 8009280:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009284:	d102      	bne.n	800928c <conversion+0xcc>
		return -1;
 8009286:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800928a:	e031      	b.n	80092f0 <conversion+0x130>
	LL_mDelay(DELAY);
 800928c:	200a      	movs	r0, #10
 800928e:	f7fc fccd 	bl	8005c2c <LL_mDelay>

	cmd = MS5607_READ_CMD;
 8009292:	2300      	movs	r3, #0
 8009294:	70fb      	strb	r3, [r7, #3]
	if (i2c_write_blocking(i2c, MS5607_ADDR, &cmd, 1, 0) == -1)
 8009296:	4b19      	ldr	r3, [pc, #100]	@ (80092fc <conversion+0x13c>)
 8009298:	6818      	ldr	r0, [r3, #0]
 800929a:	1cfa      	adds	r2, r7, #3
 800929c:	2300      	movs	r3, #0
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	2301      	movs	r3, #1
 80092a2:	2177      	movs	r1, #119	@ 0x77
 80092a4:	f000 fb22 	bl	80098ec <i2c_write_blocking>
 80092a8:	4603      	mov	r3, r0
 80092aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092ae:	d102      	bne.n	80092b6 <conversion+0xf6>
		return -1;
 80092b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092b4:	e01c      	b.n	80092f0 <conversion+0x130>
	LL_mDelay(DELAY);
 80092b6:	200a      	movs	r0, #10
 80092b8:	f7fc fcb8 	bl	8005c2c <LL_mDelay>

	if (i2c_read_blocking(i2c, MS5607_ADDR, buf, 3, 0) == -1)
 80092bc:	4b0f      	ldr	r3, [pc, #60]	@ (80092fc <conversion+0x13c>)
 80092be:	6818      	ldr	r0, [r3, #0]
 80092c0:	1d3a      	adds	r2, r7, #4
 80092c2:	2300      	movs	r3, #0
 80092c4:	9300      	str	r3, [sp, #0]
 80092c6:	2303      	movs	r3, #3
 80092c8:	2177      	movs	r1, #119	@ 0x77
 80092ca:	f000 facb 	bl	8009864 <i2c_read_blocking>
 80092ce:	4603      	mov	r3, r0
 80092d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092d4:	d102      	bne.n	80092dc <conversion+0x11c>
		return -1;
 80092d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092da:	e009      	b.n	80092f0 <conversion+0x130>

	d2 = ((uint32_t) buf[0] << 16) | ((uint32_t) buf[1] << 8) | buf[2];
 80092dc:	793b      	ldrb	r3, [r7, #4]
 80092de:	041a      	lsls	r2, r3, #16
 80092e0:	797b      	ldrb	r3, [r7, #5]
 80092e2:	021b      	lsls	r3, r3, #8
 80092e4:	4313      	orrs	r3, r2
 80092e6:	79ba      	ldrb	r2, [r7, #6]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	4a06      	ldr	r2, [pc, #24]	@ (8009304 <conversion+0x144>)
 80092ec:	6013      	str	r3, [r2, #0]

	return 0;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	0800ae9c 	.word	0x0800ae9c
 80092fc:	20000218 	.word	0x20000218
 8009300:	200001f8 	.word	0x200001f8
 8009304:	200001fc 	.word	0x200001fc

08009308 <LL_I2C_IsActiveFlag_TXE>:
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	f003 0301 	and.w	r3, r3, #1
 8009318:	2b01      	cmp	r3, #1
 800931a:	d101      	bne.n	8009320 <LL_I2C_IsActiveFlag_TXE+0x18>
 800931c:	2301      	movs	r3, #1
 800931e:	e000      	b.n	8009322 <LL_I2C_IsActiveFlag_TXE+0x1a>
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	bc80      	pop	{r7}
 800932a:	4770      	bx	lr

0800932c <LL_I2C_IsActiveFlag_RXNE>:
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	f003 0304 	and.w	r3, r3, #4
 800933c:	2b04      	cmp	r3, #4
 800933e:	d101      	bne.n	8009344 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8009340:	2301      	movs	r3, #1
 8009342:	e000      	b.n	8009346 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	bc80      	pop	{r7}
 800934e:	4770      	bx	lr

08009350 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8009350:	b480      	push	{r7}
 8009352:	b087      	sub	sp, #28
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
 800935c:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800936a:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	041b      	lsls	r3, r3, #16
 8009370:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8009374:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009376:	6a3b      	ldr	r3, [r7, #32]
 8009378:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800937a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937c:	4313      	orrs	r3, r2
 800937e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009382:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	685a      	ldr	r2, [r3, #4]
 8009388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938a:	0d5b      	lsrs	r3, r3, #21
 800938c:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009390:	4b06      	ldr	r3, [pc, #24]	@ (80093ac <LL_I2C_HandleTransfer+0x5c>)
 8009392:	430b      	orrs	r3, r1
 8009394:	43db      	mvns	r3, r3
 8009396:	401a      	ands	r2, r3
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	431a      	orrs	r2, r3
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 80093a0:	bf00      	nop
 80093a2:	371c      	adds	r7, #28
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bc80      	pop	{r7}
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	03ff7bff 	.word	0x03ff7bff

080093b0 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093bc:	b2db      	uxtb	r3, r3
}
 80093be:	4618      	mov	r0, r3
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bc80      	pop	{r7}
 80093c6:	4770      	bx	lr

080093c8 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	460b      	mov	r3, r1
 80093d2:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80093d4:	78fa      	ldrb	r2, [r7, #3]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80093da:	bf00      	nop
 80093dc:	370c      	adds	r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	bc80      	pop	{r7}
 80093e2:	4770      	bx	lr

080093e4 <count_revifs>:
int check_geo_fence() {
	return 0;
}

// counts number of digits in uint32_t, returns anywhere from 1-7
int count_revifs(uint32_t n) {
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
	if (n > 999999)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a14      	ldr	r2, [pc, #80]	@ (8009440 <count_revifs+0x5c>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d901      	bls.n	80093f8 <count_revifs+0x14>
		return 7;
 80093f4:	2307      	movs	r3, #7
 80093f6:	e01d      	b.n	8009434 <count_revifs+0x50>
	if (n > 99999)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a12      	ldr	r2, [pc, #72]	@ (8009444 <count_revifs+0x60>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d901      	bls.n	8009404 <count_revifs+0x20>
		return 6;
 8009400:	2306      	movs	r3, #6
 8009402:	e017      	b.n	8009434 <count_revifs+0x50>
	if (n > 9999)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f242 720f 	movw	r2, #9999	@ 0x270f
 800940a:	4293      	cmp	r3, r2
 800940c:	d901      	bls.n	8009412 <count_revifs+0x2e>
		return 5;
 800940e:	2305      	movs	r3, #5
 8009410:	e010      	b.n	8009434 <count_revifs+0x50>
	if (n > 999)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009418:	d301      	bcc.n	800941e <count_revifs+0x3a>
		return 4;
 800941a:	2304      	movs	r3, #4
 800941c:	e00a      	b.n	8009434 <count_revifs+0x50>
	if (n > 99)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2b63      	cmp	r3, #99	@ 0x63
 8009422:	d901      	bls.n	8009428 <count_revifs+0x44>
		return 3;
 8009424:	2303      	movs	r3, #3
 8009426:	e005      	b.n	8009434 <count_revifs+0x50>
	if (n > 9)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2b09      	cmp	r3, #9
 800942c:	d901      	bls.n	8009432 <count_revifs+0x4e>
		return 2;
 800942e:	2302      	movs	r3, #2
 8009430:	e000      	b.n	8009434 <count_revifs+0x50>
	return 1;
 8009432:	2301      	movs	r3, #1
}
 8009434:	4618      	mov	r0, r3
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	bc80      	pop	{r7}
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	000f423f 	.word	0x000f423f
 8009444:	0001869f 	.word	0x0001869f

08009448 <ipow>:

int ipow(int base, int exp) {
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
	int result = 1;
 8009452:	2301      	movs	r3, #1
 8009454:	60fb      	str	r3, [r7, #12]
	for (;;) {
		if (exp & 1)
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	f003 0301 	and.w	r3, r3, #1
 800945c:	2b00      	cmp	r3, #0
 800945e:	d004      	beq.n	800946a <ipow+0x22>
			result *= base;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	fb02 f303 	mul.w	r3, r2, r3
 8009468:	60fb      	str	r3, [r7, #12]
		exp >>= 1;
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	105b      	asrs	r3, r3, #1
 800946e:	603b      	str	r3, [r7, #0]
		if (!exp)
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d004      	beq.n	8009480 <ipow+0x38>
			break;
		base *= base;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	fb03 f303 	mul.w	r3, r3, r3
 800947c:	607b      	str	r3, [r7, #4]
		if (exp & 1)
 800947e:	e7ea      	b.n	8009456 <ipow+0xe>
			break;
 8009480:	bf00      	nop
	}

	return result;
 8009482:	68fb      	ldr	r3, [r7, #12]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	bc80      	pop	{r7}
 800948c:	4770      	bx	lr
	...

08009490 <convert_gps_coords>:

void convert_gps_coords(void) {
 8009490:	b598      	push	{r3, r4, r7, lr}
 8009492:	af00      	add	r7, sp, #0
	// move the decimal point left 2 for coords
	log_item.lat_frac = (((log_item.lat_int % 100)
 8009494:	4b43      	ldr	r3, [pc, #268]	@ (80095a4 <convert_gps_coords+0x114>)
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	4a43      	ldr	r2, [pc, #268]	@ (80095a8 <convert_gps_coords+0x118>)
 800949a:	fb82 1203 	smull	r1, r2, r2, r3
 800949e:	1151      	asrs	r1, r2, #5
 80094a0:	17da      	asrs	r2, r3, #31
 80094a2:	1a8c      	subs	r4, r1, r2
 80094a4:	2264      	movs	r2, #100	@ 0x64
 80094a6:	fb04 f202 	mul.w	r2, r4, r2
 80094aa:	1a9c      	subs	r4, r3, r2
			* ipow(10, count_revifs(log_item.lat_frac))) + log_item.lat_frac)
 80094ac:	4b3d      	ldr	r3, [pc, #244]	@ (80095a4 <convert_gps_coords+0x114>)
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7ff ff97 	bl	80093e4 <count_revifs>
 80094b6:	4603      	mov	r3, r0
 80094b8:	4619      	mov	r1, r3
 80094ba:	200a      	movs	r0, #10
 80094bc:	f7ff ffc4 	bl	8009448 <ipow>
 80094c0:	4603      	mov	r3, r0
 80094c2:	fb04 f303 	mul.w	r3, r4, r3
 80094c6:	461a      	mov	r2, r3
 80094c8:	4b36      	ldr	r3, [pc, #216]	@ (80095a4 <convert_gps_coords+0x114>)
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	4413      	add	r3, r2
			/ 6;
 80094ce:	4a37      	ldr	r2, [pc, #220]	@ (80095ac <convert_gps_coords+0x11c>)
 80094d0:	fba2 2303 	umull	r2, r3, r2, r3
 80094d4:	089b      	lsrs	r3, r3, #2
	log_item.lat_frac = (((log_item.lat_int % 100)
 80094d6:	4a33      	ldr	r2, [pc, #204]	@ (80095a4 <convert_gps_coords+0x114>)
 80094d8:	6093      	str	r3, [r2, #8]
	log_item.lat_int = (log_item.lat_int - (log_item.lat_int % 100)) / 100;
 80094da:	4b32      	ldr	r3, [pc, #200]	@ (80095a4 <convert_gps_coords+0x114>)
 80094dc:	6859      	ldr	r1, [r3, #4]
 80094de:	4b31      	ldr	r3, [pc, #196]	@ (80095a4 <convert_gps_coords+0x114>)
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	4b31      	ldr	r3, [pc, #196]	@ (80095a8 <convert_gps_coords+0x118>)
 80094e4:	fb83 0302 	smull	r0, r3, r3, r2
 80094e8:	1158      	asrs	r0, r3, #5
 80094ea:	17d3      	asrs	r3, r2, #31
 80094ec:	1ac3      	subs	r3, r0, r3
 80094ee:	2064      	movs	r0, #100	@ 0x64
 80094f0:	fb00 f303 	mul.w	r3, r0, r3
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	1acb      	subs	r3, r1, r3
 80094f8:	4a2b      	ldr	r2, [pc, #172]	@ (80095a8 <convert_gps_coords+0x118>)
 80094fa:	fb82 1203 	smull	r1, r2, r2, r3
 80094fe:	1152      	asrs	r2, r2, #5
 8009500:	17db      	asrs	r3, r3, #31
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	4a27      	ldr	r2, [pc, #156]	@ (80095a4 <convert_gps_coords+0x114>)
 8009506:	6053      	str	r3, [r2, #4]

	log_item.lon_frac = (((log_item.lon_int % 100)
 8009508:	4b26      	ldr	r3, [pc, #152]	@ (80095a4 <convert_gps_coords+0x114>)
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	4a26      	ldr	r2, [pc, #152]	@ (80095a8 <convert_gps_coords+0x118>)
 800950e:	fb82 1203 	smull	r1, r2, r2, r3
 8009512:	1151      	asrs	r1, r2, #5
 8009514:	17da      	asrs	r2, r3, #31
 8009516:	1a8c      	subs	r4, r1, r2
 8009518:	2264      	movs	r2, #100	@ 0x64
 800951a:	fb04 f202 	mul.w	r2, r4, r2
 800951e:	1a9c      	subs	r4, r3, r2
			* ipow(10, count_revifs(log_item.lon_frac))) + log_item.lon_frac)
 8009520:	4b20      	ldr	r3, [pc, #128]	@ (80095a4 <convert_gps_coords+0x114>)
 8009522:	695b      	ldr	r3, [r3, #20]
 8009524:	4618      	mov	r0, r3
 8009526:	f7ff ff5d 	bl	80093e4 <count_revifs>
 800952a:	4603      	mov	r3, r0
 800952c:	4619      	mov	r1, r3
 800952e:	200a      	movs	r0, #10
 8009530:	f7ff ff8a 	bl	8009448 <ipow>
 8009534:	4603      	mov	r3, r0
 8009536:	fb04 f303 	mul.w	r3, r4, r3
 800953a:	461a      	mov	r2, r3
 800953c:	4b19      	ldr	r3, [pc, #100]	@ (80095a4 <convert_gps_coords+0x114>)
 800953e:	695b      	ldr	r3, [r3, #20]
 8009540:	4413      	add	r3, r2
			/ 6;
 8009542:	4a1a      	ldr	r2, [pc, #104]	@ (80095ac <convert_gps_coords+0x11c>)
 8009544:	fba2 2303 	umull	r2, r3, r2, r3
 8009548:	089b      	lsrs	r3, r3, #2
	log_item.lon_frac = (((log_item.lon_int % 100)
 800954a:	4a16      	ldr	r2, [pc, #88]	@ (80095a4 <convert_gps_coords+0x114>)
 800954c:	6153      	str	r3, [r2, #20]
	log_item.lon_int = (log_item.lon_int - (log_item.lon_int % 100)) / 100;
 800954e:	4b15      	ldr	r3, [pc, #84]	@ (80095a4 <convert_gps_coords+0x114>)
 8009550:	6919      	ldr	r1, [r3, #16]
 8009552:	4b14      	ldr	r3, [pc, #80]	@ (80095a4 <convert_gps_coords+0x114>)
 8009554:	691a      	ldr	r2, [r3, #16]
 8009556:	4b14      	ldr	r3, [pc, #80]	@ (80095a8 <convert_gps_coords+0x118>)
 8009558:	fb83 0302 	smull	r0, r3, r3, r2
 800955c:	1158      	asrs	r0, r3, #5
 800955e:	17d3      	asrs	r3, r2, #31
 8009560:	1ac3      	subs	r3, r0, r3
 8009562:	2064      	movs	r0, #100	@ 0x64
 8009564:	fb00 f303 	mul.w	r3, r0, r3
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	1acb      	subs	r3, r1, r3
 800956c:	4a0e      	ldr	r2, [pc, #56]	@ (80095a8 <convert_gps_coords+0x118>)
 800956e:	fb82 1203 	smull	r1, r2, r2, r3
 8009572:	1152      	asrs	r2, r2, #5
 8009574:	17db      	asrs	r3, r3, #31
 8009576:	1ad3      	subs	r3, r2, r3
 8009578:	4a0a      	ldr	r2, [pc, #40]	@ (80095a4 <convert_gps_coords+0x114>)
 800957a:	6113      	str	r3, [r2, #16]

	if (log_item.lat_dir == 'S')
 800957c:	4b09      	ldr	r3, [pc, #36]	@ (80095a4 <convert_gps_coords+0x114>)
 800957e:	7b1b      	ldrb	r3, [r3, #12]
 8009580:	2b53      	cmp	r3, #83	@ 0x53
 8009582:	d104      	bne.n	800958e <convert_gps_coords+0xfe>
		log_item.lat_int = log_item.lat_int * -1;
 8009584:	4b07      	ldr	r3, [pc, #28]	@ (80095a4 <convert_gps_coords+0x114>)
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	425b      	negs	r3, r3
 800958a:	4a06      	ldr	r2, [pc, #24]	@ (80095a4 <convert_gps_coords+0x114>)
 800958c:	6053      	str	r3, [r2, #4]

	if (log_item.lon_dir == 'W')
 800958e:	4b05      	ldr	r3, [pc, #20]	@ (80095a4 <convert_gps_coords+0x114>)
 8009590:	7e1b      	ldrb	r3, [r3, #24]
 8009592:	2b57      	cmp	r3, #87	@ 0x57
 8009594:	d104      	bne.n	80095a0 <convert_gps_coords+0x110>
		log_item.lon_int = log_item.lon_int * -1;
 8009596:	4b03      	ldr	r3, [pc, #12]	@ (80095a4 <convert_gps_coords+0x114>)
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	425b      	negs	r3, r3
 800959c:	4a01      	ldr	r2, [pc, #4]	@ (80095a4 <convert_gps_coords+0x114>)
 800959e:	6113      	str	r3, [r2, #16]
}
 80095a0:	bf00      	nop
 80095a2:	bd98      	pop	{r3, r4, r7, pc}
 80095a4:	200000d0 	.word	0x200000d0
 80095a8:	51eb851f 	.word	0x51eb851f
 80095ac:	aaaaaaab 	.word	0xaaaaaaab

080095b0 <get_gps_data>:

// this function waits for NMEA messages and parses it into the log item
// struct above
int get_gps_data() {
 80095b0:	b590      	push	{r4, r7, lr}
 80095b2:	b089      	sub	sp, #36	@ 0x24
 80095b4:	af06      	add	r7, sp, #24
	static uint32_t len = 100;
	static uint32_t i = 0;

	while (1) { // poll I2C bus until end of line is received

		int timeout = 0; // I2C software timeout counter
 80095b6:	2300      	movs	r3, #0
 80095b8:	607b      	str	r3, [r7, #4]

		// I2C RX
		LL_I2C_HandleTransfer(I2C1, (0x42 << 1), LL_I2C_ADDRSLAVE_7BIT, 1,
 80095ba:	4b53      	ldr	r3, [pc, #332]	@ (8009708 <get_gps_data+0x158>)
 80095bc:	9301      	str	r3, [sp, #4]
 80095be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80095c2:	9300      	str	r3, [sp, #0]
 80095c4:	2301      	movs	r3, #1
 80095c6:	2200      	movs	r2, #0
 80095c8:	2184      	movs	r1, #132	@ 0x84
 80095ca:	4850      	ldr	r0, [pc, #320]	@ (800970c <get_gps_data+0x15c>)
 80095cc:	f7ff fec0 	bl	8009350 <LL_I2C_HandleTransfer>
		LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ); // request 1 byte from GPS

		while (LL_I2C_IsActiveFlag_RXNE(I2C1) == 0) { // wait for response
 80095d0:	e00a      	b.n	80095e8 <get_gps_data+0x38>
			if (timeout >= 20000) {
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80095d8:	4293      	cmp	r3, r2
 80095da:	dd02      	ble.n	80095e2 <get_gps_data+0x32>
				return -1;
 80095dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80095e0:	e08d      	b.n	80096fe <get_gps_data+0x14e>
			}
			timeout++;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	3301      	adds	r3, #1
 80095e6:	607b      	str	r3, [r7, #4]
		while (LL_I2C_IsActiveFlag_RXNE(I2C1) == 0) { // wait for response
 80095e8:	4848      	ldr	r0, [pc, #288]	@ (800970c <get_gps_data+0x15c>)
 80095ea:	f7ff fe9f 	bl	800932c <LL_I2C_IsActiveFlag_RXNE>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d0ee      	beq.n	80095d2 <get_gps_data+0x22>
		}

		buf[i] = (char) LL_I2C_ReceiveData8(I2C1);
 80095f4:	4b46      	ldr	r3, [pc, #280]	@ (8009710 <get_gps_data+0x160>)
 80095f6:	681c      	ldr	r4, [r3, #0]
 80095f8:	4844      	ldr	r0, [pc, #272]	@ (800970c <get_gps_data+0x15c>)
 80095fa:	f7ff fed9 	bl	80093b0 <LL_I2C_ReceiveData8>
 80095fe:	4603      	mov	r3, r0
 8009600:	461a      	mov	r2, r3
 8009602:	4b44      	ldr	r3, [pc, #272]	@ (8009714 <get_gps_data+0x164>)
 8009604:	551a      	strb	r2, [r3, r4]

		if (buf[i] == '$') {
 8009606:	4b42      	ldr	r3, [pc, #264]	@ (8009710 <get_gps_data+0x160>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a42      	ldr	r2, [pc, #264]	@ (8009714 <get_gps_data+0x164>)
 800960c:	5cd3      	ldrb	r3, [r2, r3]
 800960e:	2b24      	cmp	r3, #36	@ 0x24
 8009610:	d107      	bne.n	8009622 <get_gps_data+0x72>
			i = 0;
 8009612:	4b3f      	ldr	r3, [pc, #252]	@ (8009710 <get_gps_data+0x160>)
 8009614:	2200      	movs	r2, #0
 8009616:	601a      	str	r2, [r3, #0]
			buf[i] = '$';
 8009618:	4b3d      	ldr	r3, [pc, #244]	@ (8009710 <get_gps_data+0x160>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a3d      	ldr	r2, [pc, #244]	@ (8009714 <get_gps_data+0x164>)
 800961e:	2124      	movs	r1, #36	@ 0x24
 8009620:	54d1      	strb	r1, [r2, r3]
		}

		if (i >= (len - 1) || buf[i] == 10) {
 8009622:	4b3d      	ldr	r3, [pc, #244]	@ (8009718 <get_gps_data+0x168>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	1e5a      	subs	r2, r3, #1
 8009628:	4b39      	ldr	r3, [pc, #228]	@ (8009710 <get_gps_data+0x160>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	429a      	cmp	r2, r3
 800962e:	d905      	bls.n	800963c <get_gps_data+0x8c>
 8009630:	4b37      	ldr	r3, [pc, #220]	@ (8009710 <get_gps_data+0x160>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a37      	ldr	r2, [pc, #220]	@ (8009714 <get_gps_data+0x164>)
 8009636:	5cd3      	ldrb	r3, [r2, r3]
 8009638:	2b0a      	cmp	r3, #10
 800963a:	d153      	bne.n	80096e4 <get_gps_data+0x134>
			buf[len - 1] = 0x00;
 800963c:	4b36      	ldr	r3, [pc, #216]	@ (8009718 <get_gps_data+0x168>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	3b01      	subs	r3, #1
 8009642:	4a34      	ldr	r2, [pc, #208]	@ (8009714 <get_gps_data+0x164>)
 8009644:	2100      	movs	r1, #0
 8009646:	54d1      	strb	r1, [r2, r3]

			if ((i + 1) < len - 1)
 8009648:	4b31      	ldr	r3, [pc, #196]	@ (8009710 <get_gps_data+0x160>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	1c5a      	adds	r2, r3, #1
 800964e:	4b32      	ldr	r3, [pc, #200]	@ (8009718 <get_gps_data+0x168>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3b01      	subs	r3, #1
 8009654:	429a      	cmp	r2, r3
 8009656:	d205      	bcs.n	8009664 <get_gps_data+0xb4>
				buf[i + 1] = '\0';
 8009658:	4b2d      	ldr	r3, [pc, #180]	@ (8009710 <get_gps_data+0x160>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3301      	adds	r3, #1
 800965e:	4a2d      	ldr	r2, [pc, #180]	@ (8009714 <get_gps_data+0x164>)
 8009660:	2100      	movs	r1, #0
 8009662:	54d1      	strb	r1, [r2, r3]

			i = 0;
 8009664:	4b2a      	ldr	r3, [pc, #168]	@ (8009710 <get_gps_data+0x160>)
 8009666:	2200      	movs	r2, #0
 8009668:	601a      	str	r2, [r3, #0]

			if (strncmp((buf + 3), "GGA", 3) == 0) { // parse GGA message
 800966a:	4b2c      	ldr	r3, [pc, #176]	@ (800971c <get_gps_data+0x16c>)
 800966c:	2203      	movs	r2, #3
 800966e:	492c      	ldr	r1, [pc, #176]	@ (8009720 <get_gps_data+0x170>)
 8009670:	4618      	mov	r0, r3
 8009672:	f000 fad9 	bl	8009c28 <strncmp>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d116      	bne.n	80096aa <get_gps_data+0xfa>

				//write_buf_to_fs(&lfs, &cfg, &log_file, "flight_log", buf, strlen(buf));
				sscanf(buf,
 800967c:	4b29      	ldr	r3, [pc, #164]	@ (8009724 <get_gps_data+0x174>)
 800967e:	9305      	str	r3, [sp, #20]
 8009680:	4b29      	ldr	r3, [pc, #164]	@ (8009728 <get_gps_data+0x178>)
 8009682:	9304      	str	r3, [sp, #16]
 8009684:	4b29      	ldr	r3, [pc, #164]	@ (800972c <get_gps_data+0x17c>)
 8009686:	9303      	str	r3, [sp, #12]
 8009688:	4b29      	ldr	r3, [pc, #164]	@ (8009730 <get_gps_data+0x180>)
 800968a:	9302      	str	r3, [sp, #8]
 800968c:	4b29      	ldr	r3, [pc, #164]	@ (8009734 <get_gps_data+0x184>)
 800968e:	9301      	str	r3, [sp, #4]
 8009690:	4b29      	ldr	r3, [pc, #164]	@ (8009738 <get_gps_data+0x188>)
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	4b29      	ldr	r3, [pc, #164]	@ (800973c <get_gps_data+0x18c>)
 8009696:	4a2a      	ldr	r2, [pc, #168]	@ (8009740 <get_gps_data+0x190>)
 8009698:	492a      	ldr	r1, [pc, #168]	@ (8009744 <get_gps_data+0x194>)
 800969a:	481e      	ldr	r0, [pc, #120]	@ (8009714 <get_gps_data+0x164>)
 800969c:	f000 fa98 	bl	8009bd0 <siscanf>
						&(log_item.time), &(log_item.lat_int),
						&(log_item.lat_frac), &(log_item.lat_dir),
						&(log_item.lon_int), &(log_item.lon_frac),
						&(log_item.lon_dir), &(log_item.altitude));

				convert_gps_coords();
 80096a0:	f7ff fef6 	bl	8009490 <convert_gps_coords>

				break;
 80096a4:	bf00      	nop

		if (buf[i] != 0xFF)
			i++;
	}

	return 0;
 80096a6:	2300      	movs	r3, #0
 80096a8:	e029      	b.n	80096fe <get_gps_data+0x14e>
			if (strncmp((buf + 3), "RMC", 3) == 0) { // parse RMC message
 80096aa:	4b1c      	ldr	r3, [pc, #112]	@ (800971c <get_gps_data+0x16c>)
 80096ac:	2203      	movs	r2, #3
 80096ae:	4926      	ldr	r1, [pc, #152]	@ (8009748 <get_gps_data+0x198>)
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 fab9 	bl	8009c28 <strncmp>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d113      	bne.n	80096e4 <get_gps_data+0x134>
				sscanf(buf,
 80096bc:	4b23      	ldr	r3, [pc, #140]	@ (800974c <get_gps_data+0x19c>)
 80096be:	9305      	str	r3, [sp, #20]
 80096c0:	4b19      	ldr	r3, [pc, #100]	@ (8009728 <get_gps_data+0x178>)
 80096c2:	9304      	str	r3, [sp, #16]
 80096c4:	4b19      	ldr	r3, [pc, #100]	@ (800972c <get_gps_data+0x17c>)
 80096c6:	9303      	str	r3, [sp, #12]
 80096c8:	4b19      	ldr	r3, [pc, #100]	@ (8009730 <get_gps_data+0x180>)
 80096ca:	9302      	str	r3, [sp, #8]
 80096cc:	4b19      	ldr	r3, [pc, #100]	@ (8009734 <get_gps_data+0x184>)
 80096ce:	9301      	str	r3, [sp, #4]
 80096d0:	4b19      	ldr	r3, [pc, #100]	@ (8009738 <get_gps_data+0x188>)
 80096d2:	9300      	str	r3, [sp, #0]
 80096d4:	4b19      	ldr	r3, [pc, #100]	@ (800973c <get_gps_data+0x18c>)
 80096d6:	4a1a      	ldr	r2, [pc, #104]	@ (8009740 <get_gps_data+0x190>)
 80096d8:	491d      	ldr	r1, [pc, #116]	@ (8009750 <get_gps_data+0x1a0>)
 80096da:	480e      	ldr	r0, [pc, #56]	@ (8009714 <get_gps_data+0x164>)
 80096dc:	f000 fa78 	bl	8009bd0 <siscanf>
				convert_gps_coords();
 80096e0:	f7ff fed6 	bl	8009490 <convert_gps_coords>
		if (buf[i] != 0xFF)
 80096e4:	4b0a      	ldr	r3, [pc, #40]	@ (8009710 <get_gps_data+0x160>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a0a      	ldr	r2, [pc, #40]	@ (8009714 <get_gps_data+0x164>)
 80096ea:	5cd3      	ldrb	r3, [r2, r3]
 80096ec:	2bff      	cmp	r3, #255	@ 0xff
 80096ee:	f43f af62 	beq.w	80095b6 <get_gps_data+0x6>
			i++;
 80096f2:	4b07      	ldr	r3, [pc, #28]	@ (8009710 <get_gps_data+0x160>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3301      	adds	r3, #1
 80096f8:	4a05      	ldr	r2, [pc, #20]	@ (8009710 <get_gps_data+0x160>)
 80096fa:	6013      	str	r3, [r2, #0]
	while (1) { // poll I2C bus until end of line is received
 80096fc:	e75b      	b.n	80095b6 <get_gps_data+0x6>
}
 80096fe:	4618      	mov	r0, r3
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	bd90      	pop	{r4, r7, pc}
 8009706:	bf00      	nop
 8009708:	80002400 	.word	0x80002400
 800970c:	40005400 	.word	0x40005400
 8009710:	20000780 	.word	0x20000780
 8009714:	20000784 	.word	0x20000784
 8009718:	20000054 	.word	0x20000054
 800971c:	20000787 	.word	0x20000787
 8009720:	0800aea0 	.word	0x0800aea0
 8009724:	200000f0 	.word	0x200000f0
 8009728:	200000e8 	.word	0x200000e8
 800972c:	200000e4 	.word	0x200000e4
 8009730:	200000e0 	.word	0x200000e0
 8009734:	200000dc 	.word	0x200000dc
 8009738:	200000d8 	.word	0x200000d8
 800973c:	200000d4 	.word	0x200000d4
 8009740:	200000d0 	.word	0x200000d0
 8009744:	0800aea4 	.word	0x0800aea4
 8009748:	0800aee0 	.word	0x0800aee0
 800974c:	200000fc 	.word	0x200000fc
 8009750:	0800aee4 	.word	0x0800aee4

08009754 <set_heater_params>:

int set_heater_params(int t_high, int t_low) {
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af02      	add	r7, sp, #8
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]

	uint8_t buf[3] = { 0 };
 800975e:	4b28      	ldr	r3, [pc, #160]	@ (8009800 <set_heater_params+0xac>)
 8009760:	881b      	ldrh	r3, [r3, #0]
 8009762:	81bb      	strh	r3, [r7, #12]
 8009764:	2300      	movs	r3, #0
 8009766:	73bb      	strb	r3, [r7, #14]

	if (t_high > 127 || t_high < -128)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b7f      	cmp	r3, #127	@ 0x7f
 800976c:	dc03      	bgt.n	8009776 <set_heater_params+0x22>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8009774:	da02      	bge.n	800977c <set_heater_params+0x28>
		return -1;
 8009776:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800977a:	e03c      	b.n	80097f6 <set_heater_params+0xa2>
	if (t_low > 127 || t_low < -128)
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009780:	dc03      	bgt.n	800978a <set_heater_params+0x36>
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8009788:	da02      	bge.n	8009790 <set_heater_params+0x3c>
		return -1;
 800978a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800978e:	e032      	b.n	80097f6 <set_heater_params+0xa2>

	buf[0] = 0x02; // address of t_low register
 8009790:	2302      	movs	r3, #2
 8009792:	733b      	strb	r3, [r7, #12]
	buf[1] = (t_low * 256) >> 8;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	021b      	lsls	r3, r3, #8
 8009798:	121b      	asrs	r3, r3, #8
 800979a:	b2db      	uxtb	r3, r3
 800979c:	737b      	strb	r3, [r7, #13]
	buf[2] = (t_low * 256);
 800979e:	2300      	movs	r3, #0
 80097a0:	73bb      	strb	r3, [r7, #14]

	if (i2c_write_blocking(I2C1, TEMP_ADDR, buf, 3, 0) == -1)
 80097a2:	f107 020c 	add.w	r2, r7, #12
 80097a6:	2300      	movs	r3, #0
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	2303      	movs	r3, #3
 80097ac:	2148      	movs	r1, #72	@ 0x48
 80097ae:	4815      	ldr	r0, [pc, #84]	@ (8009804 <set_heater_params+0xb0>)
 80097b0:	f000 f89c 	bl	80098ec <i2c_write_blocking>
 80097b4:	4603      	mov	r3, r0
 80097b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097ba:	d102      	bne.n	80097c2 <set_heater_params+0x6e>
		return -1;	// ERROR
 80097bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80097c0:	e019      	b.n	80097f6 <set_heater_params+0xa2>

	buf[0] = 0x03; // address of t_high register
 80097c2:	2303      	movs	r3, #3
 80097c4:	733b      	strb	r3, [r7, #12]
	buf[1] = (t_high * 256) >> 8;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	021b      	lsls	r3, r3, #8
 80097ca:	121b      	asrs	r3, r3, #8
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	737b      	strb	r3, [r7, #13]
	buf[2] = (t_high * 256);
 80097d0:	2300      	movs	r3, #0
 80097d2:	73bb      	strb	r3, [r7, #14]

	if (i2c_write_blocking(I2C1, TEMP_ADDR, buf, 3, 0) == -1)
 80097d4:	f107 020c 	add.w	r2, r7, #12
 80097d8:	2300      	movs	r3, #0
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	2303      	movs	r3, #3
 80097de:	2148      	movs	r1, #72	@ 0x48
 80097e0:	4808      	ldr	r0, [pc, #32]	@ (8009804 <set_heater_params+0xb0>)
 80097e2:	f000 f883 	bl	80098ec <i2c_write_blocking>
 80097e6:	4603      	mov	r3, r0
 80097e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097ec:	d102      	bne.n	80097f4 <set_heater_params+0xa0>
		return -1;	// ERROR
 80097ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80097f2:	e000      	b.n	80097f6 <set_heater_params+0xa2>

	return 0;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	0800af28 	.word	0x0800af28
 8009804:	40005400 	.word	0x40005400

08009808 <read_heater_temp>:

	return 0;

}

int read_heater_temp() {
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af02      	add	r7, sp, #8
	uint8_t zero = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	70fb      	strb	r3, [r7, #3]
	uint8_t buf[] = { 0, 0 };
 8009812:	2300      	movs	r3, #0
 8009814:	803b      	strh	r3, [r7, #0]
	int temperature = 0;
 8009816:	2300      	movs	r3, #0
 8009818:	607b      	str	r3, [r7, #4]

	i2c_write_blocking(I2C1, TEMP_ADDR, &zero, 1, 0); // write address of temperature conversion result register
 800981a:	1cfa      	adds	r2, r7, #3
 800981c:	2300      	movs	r3, #0
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	2301      	movs	r3, #1
 8009822:	2148      	movs	r1, #72	@ 0x48
 8009824:	480e      	ldr	r0, [pc, #56]	@ (8009860 <read_heater_temp+0x58>)
 8009826:	f000 f861 	bl	80098ec <i2c_write_blocking>
	HAL_Delay(100);
 800982a:	2064      	movs	r0, #100	@ 0x64
 800982c:	f7f8 ff6e 	bl	800270c <HAL_Delay>
	i2c_read_blocking(I2C1, TEMP_ADDR, buf, 2, 0); // read conversion value back
 8009830:	463a      	mov	r2, r7
 8009832:	2300      	movs	r3, #0
 8009834:	9300      	str	r3, [sp, #0]
 8009836:	2302      	movs	r3, #2
 8009838:	2148      	movs	r1, #72	@ 0x48
 800983a:	4809      	ldr	r0, [pc, #36]	@ (8009860 <read_heater_temp+0x58>)
 800983c:	f000 f812 	bl	8009864 <i2c_read_blocking>

	temperature = ((int) ((int16_t) (buf[0] << 8)) | (buf[1])) / 256;
 8009840:	783b      	ldrb	r3, [r7, #0]
 8009842:	021b      	lsls	r3, r3, #8
 8009844:	b21b      	sxth	r3, r3
 8009846:	461a      	mov	r2, r3
 8009848:	787b      	ldrb	r3, [r7, #1]
 800984a:	4313      	orrs	r3, r2
 800984c:	2b00      	cmp	r3, #0
 800984e:	da00      	bge.n	8009852 <read_heater_temp+0x4a>
 8009850:	33ff      	adds	r3, #255	@ 0xff
 8009852:	121b      	asrs	r3, r3, #8
 8009854:	607b      	str	r3, [r7, #4]

	return temperature;
 8009856:	687b      	ldr	r3, [r7, #4]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	40005400 	.word	0x40005400

08009864 <i2c_read_blocking>:

// these two I2C functions are not good, the args are mostly unused but writing
// the signature like this made copying RP2040 code faster
int i2c_read_blocking(I2C_TypeDef *i2cx, uint8_t addr, uint8_t *buf,
		uint32_t bytes, uint32_t temp) {
 8009864:	b590      	push	{r4, r7, lr}
 8009866:	b089      	sub	sp, #36	@ 0x24
 8009868:	af02      	add	r7, sp, #8
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	607a      	str	r2, [r7, #4]
 800986e:	603b      	str	r3, [r7, #0]
 8009870:	460b      	mov	r3, r1
 8009872:	72fb      	strb	r3, [r7, #11]
	int timeout = 0; // I2C software timeout counter
 8009874:	2300      	movs	r3, #0
 8009876:	617b      	str	r3, [r7, #20]

	LL_I2C_HandleTransfer(I2C1, (addr << 1), LL_I2C_ADDRSLAVE_7BIT, bytes,
 8009878:	7afb      	ldrb	r3, [r7, #11]
 800987a:	0059      	lsls	r1, r3, #1
 800987c:	4b18      	ldr	r3, [pc, #96]	@ (80098e0 <i2c_read_blocking+0x7c>)
 800987e:	9301      	str	r3, [sp, #4]
 8009880:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2200      	movs	r2, #0
 800988a:	4816      	ldr	r0, [pc, #88]	@ (80098e4 <i2c_read_blocking+0x80>)
 800988c:	f7ff fd60 	bl	8009350 <LL_I2C_HandleTransfer>
	LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);

	for (int i = 0; i < bytes; i++) {
 8009890:	2300      	movs	r3, #0
 8009892:	613b      	str	r3, [r7, #16]
 8009894:	e01a      	b.n	80098cc <i2c_read_blocking+0x68>

		while (LL_I2C_IsActiveFlag_RXNE(I2C1) == 0) { // wait for response
			if (timeout >= 2000000) {
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	4a13      	ldr	r2, [pc, #76]	@ (80098e8 <i2c_read_blocking+0x84>)
 800989a:	4293      	cmp	r3, r2
 800989c:	dd02      	ble.n	80098a4 <i2c_read_blocking+0x40>
				return -1;
 800989e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80098a2:	e018      	b.n	80098d6 <i2c_read_blocking+0x72>
			}
			timeout++;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	3301      	adds	r3, #1
 80098a8:	617b      	str	r3, [r7, #20]
		while (LL_I2C_IsActiveFlag_RXNE(I2C1) == 0) { // wait for response
 80098aa:	480e      	ldr	r0, [pc, #56]	@ (80098e4 <i2c_read_blocking+0x80>)
 80098ac:	f7ff fd3e 	bl	800932c <LL_I2C_IsActiveFlag_RXNE>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d0ef      	beq.n	8009896 <i2c_read_blocking+0x32>
		}

		buf[i] = LL_I2C_ReceiveData8(I2C1);
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	18d4      	adds	r4, r2, r3
 80098bc:	4809      	ldr	r0, [pc, #36]	@ (80098e4 <i2c_read_blocking+0x80>)
 80098be:	f7ff fd77 	bl	80093b0 <LL_I2C_ReceiveData8>
 80098c2:	4603      	mov	r3, r0
 80098c4:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < bytes; i++) {
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	3301      	adds	r3, #1
 80098ca:	613b      	str	r3, [r7, #16]
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d8ea      	bhi.n	80098aa <i2c_read_blocking+0x46>
	}
	return 0;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	371c      	adds	r7, #28
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd90      	pop	{r4, r7, pc}
 80098de:	bf00      	nop
 80098e0:	80002400 	.word	0x80002400
 80098e4:	40005400 	.word	0x40005400
 80098e8:	001e847f 	.word	0x001e847f

080098ec <i2c_write_blocking>:

int i2c_write_blocking(I2C_TypeDef *i2cx, uint8_t addr, uint8_t *buf,
		uint32_t bytes, uint32_t temp) {
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af02      	add	r7, sp, #8
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	607a      	str	r2, [r7, #4]
 80098f6:	603b      	str	r3, [r7, #0]
 80098f8:	460b      	mov	r3, r1
 80098fa:	72fb      	strb	r3, [r7, #11]
	int timeout = 0; // I2C software timeout counter
 80098fc:	2300      	movs	r3, #0
 80098fe:	617b      	str	r3, [r7, #20]

	LL_I2C_HandleTransfer(I2C1, (addr << 1), LL_I2C_ADDRSLAVE_7BIT, bytes,
 8009900:	7afb      	ldrb	r3, [r7, #11]
 8009902:	0059      	lsls	r1, r3, #1
 8009904:	4b18      	ldr	r3, [pc, #96]	@ (8009968 <i2c_write_blocking+0x7c>)
 8009906:	9301      	str	r3, [sp, #4]
 8009908:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	2200      	movs	r2, #0
 8009912:	4816      	ldr	r0, [pc, #88]	@ (800996c <i2c_write_blocking+0x80>)
 8009914:	f7ff fd1c 	bl	8009350 <LL_I2C_HandleTransfer>
	LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);

	for (int i = 0; i < bytes; i++) {
 8009918:	2300      	movs	r3, #0
 800991a:	613b      	str	r3, [r7, #16]
 800991c:	e01a      	b.n	8009954 <i2c_write_blocking+0x68>

		while (LL_I2C_IsActiveFlag_TXE(I2C1) == 0) {
			if (timeout >= 2000000) {
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	4a13      	ldr	r2, [pc, #76]	@ (8009970 <i2c_write_blocking+0x84>)
 8009922:	4293      	cmp	r3, r2
 8009924:	dd02      	ble.n	800992c <i2c_write_blocking+0x40>
				return -1;
 8009926:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800992a:	e018      	b.n	800995e <i2c_write_blocking+0x72>
			}
			timeout++;
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	3301      	adds	r3, #1
 8009930:	617b      	str	r3, [r7, #20]
		while (LL_I2C_IsActiveFlag_TXE(I2C1) == 0) {
 8009932:	480e      	ldr	r0, [pc, #56]	@ (800996c <i2c_write_blocking+0x80>)
 8009934:	f7ff fce8 	bl	8009308 <LL_I2C_IsActiveFlag_TXE>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d0ef      	beq.n	800991e <i2c_write_blocking+0x32>
		}

		LL_I2C_TransmitData8(I2C1, buf[i]);
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	4413      	add	r3, r2
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	4619      	mov	r1, r3
 8009948:	4808      	ldr	r0, [pc, #32]	@ (800996c <i2c_write_blocking+0x80>)
 800994a:	f7ff fd3d 	bl	80093c8 <LL_I2C_TransmitData8>
	for (int i = 0; i < bytes; i++) {
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	3301      	adds	r3, #1
 8009952:	613b      	str	r3, [r7, #16]
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	429a      	cmp	r2, r3
 800995a:	d8ea      	bhi.n	8009932 <i2c_write_blocking+0x46>
	}
	return 0;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3718      	adds	r7, #24
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	80002000 	.word	0x80002000
 800996c:	40005400 	.word	0x40005400
 8009970:	001e847f 	.word	0x001e847f

08009974 <log_init>:

int log_init() {
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
	FRESULT res;

	log_item.lat_dir = '0';
 800997a:	4b1f      	ldr	r3, [pc, #124]	@ (80099f8 <log_init+0x84>)
 800997c:	2230      	movs	r2, #48	@ 0x30
 800997e:	731a      	strb	r2, [r3, #12]
	log_item.lon_dir = '0';
 8009980:	4b1d      	ldr	r3, [pc, #116]	@ (80099f8 <log_init+0x84>)
 8009982:	2230      	movs	r2, #48	@ 0x30
 8009984:	761a      	strb	r2, [r3, #24]

	// Link the FatFS driver to SD logical drive
	FATFS_LinkDriver(&USER_Driver, "/SD");
 8009986:	491d      	ldr	r1, [pc, #116]	@ (80099fc <log_init+0x88>)
 8009988:	481d      	ldr	r0, [pc, #116]	@ (8009a00 <log_init+0x8c>)
 800998a:	f7ff f863 	bl	8008a54 <FATFS_LinkDriver>

	//-- Mount the filesystem --
	res = f_mount(&fs, "/SD", 1);
 800998e:	2201      	movs	r2, #1
 8009990:	491a      	ldr	r1, [pc, #104]	@ (80099fc <log_init+0x88>)
 8009992:	481c      	ldr	r0, [pc, #112]	@ (8009a04 <log_init+0x90>)
 8009994:	f7fe fbf6 	bl	8008184 <f_mount>
 8009998:	4603      	mov	r3, r0
 800999a:	71fb      	strb	r3, [r7, #7]
	if (res != FR_OK)
 800999c:	79fb      	ldrb	r3, [r7, #7]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d002      	beq.n	80099a8 <log_init+0x34>
		return -1; //ERROR: mount failed
 80099a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80099a6:	e023      	b.n	80099f0 <log_init+0x7c>

	//-- CSV File Setup --
	// Open/create CSV file for writing
	res = f_open(&csvFile, "data.csv", FA_WRITE | FA_OPEN_APPEND);
 80099a8:	2232      	movs	r2, #50	@ 0x32
 80099aa:	4917      	ldr	r1, [pc, #92]	@ (8009a08 <log_init+0x94>)
 80099ac:	4817      	ldr	r0, [pc, #92]	@ (8009a0c <log_init+0x98>)
 80099ae:	f7fe fc2f 	bl	8008210 <f_open>
 80099b2:	4603      	mov	r3, r0
 80099b4:	71fb      	strb	r3, [r7, #7]
	if (res == FR_OK) {
 80099b6:	79fb      	ldrb	r3, [r7, #7]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d117      	bne.n	80099ec <log_init+0x78>
		// CSV column headers
		const char *header = " ,time,lat,long,altitude,temp,press,b_temp,aRate,f_aRate\r\n";
 80099bc:	4b14      	ldr	r3, [pc, #80]	@ (8009a10 <log_init+0x9c>)
 80099be:	603b      	str	r3, [r7, #0]

		res = f_write(&csvFile, header, strlen(header), &bytes_written);
 80099c0:	6838      	ldr	r0, [r7, #0]
 80099c2:	f7f6 fbdd 	bl	8000180 <strlen>
 80099c6:	4602      	mov	r2, r0
 80099c8:	4b12      	ldr	r3, [pc, #72]	@ (8009a14 <log_init+0xa0>)
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	480f      	ldr	r0, [pc, #60]	@ (8009a0c <log_init+0x98>)
 80099ce:	f7fe fdd9 	bl	8008584 <f_write>
 80099d2:	4603      	mov	r3, r0
 80099d4:	71fb      	strb	r3, [r7, #7]

		if (res != FR_OK) {
 80099d6:	79fb      	ldrb	r3, [r7, #7]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d002      	beq.n	80099e2 <log_init+0x6e>
			return -1; // ERROR: write to file failed
 80099dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80099e0:	e006      	b.n	80099f0 <log_init+0x7c>
		}

		// Close file after writing
		f_close(&csvFile);
 80099e2:	480a      	ldr	r0, [pc, #40]	@ (8009a0c <log_init+0x98>)
 80099e4:	f7fe ffc1 	bl	800896a <f_close>

	} else {
		return -1; // ERROR: opening file failed
	}

	return 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	e001      	b.n	80099f0 <log_init+0x7c>
		return -1; // ERROR: opening file failed
 80099ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3708      	adds	r7, #8
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	200000d0 	.word	0x200000d0
 80099fc:	0800af2c 	.word	0x0800af2c
 8009a00:	2000003c 	.word	0x2000003c
 8009a04:	2000021c 	.word	0x2000021c
 8009a08:	0800af30 	.word	0x0800af30
 8009a0c:	2000044c 	.word	0x2000044c
 8009a10:	0800af3c 	.word	0x0800af3c
 8009a14:	2000067c 	.word	0x2000067c

08009a18 <log_system_data>:

int log_system_data() {
 8009a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a1a:	b093      	sub	sp, #76	@ 0x4c
 8009a1c:	af0c      	add	r7, sp, #48	@ 0x30
	FRESULT res;

	res = f_open(&csvFile, "data.csv", FA_WRITE | FA_OPEN_APPEND);
 8009a1e:	2232      	movs	r2, #50	@ 0x32
 8009a20:	4933      	ldr	r1, [pc, #204]	@ (8009af0 <log_system_data+0xd8>)
 8009a22:	4834      	ldr	r0, [pc, #208]	@ (8009af4 <log_system_data+0xdc>)
 8009a24:	f7fe fbf4 	bl	8008210 <f_open>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009a2c:	7dfb      	ldrb	r3, [r7, #23]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d158      	bne.n	8009ae4 <log_system_data+0xcc>

		snprintf(csv_line, 256, "%lu,%lu,%ld.%lu,%ld.%lu,%ld,%ld,%lu,%ld,%ld,%ld\r\n",
 8009a32:	4b31      	ldr	r3, [pc, #196]	@ (8009af8 <log_system_data+0xe0>)
 8009a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a36:	60fb      	str	r3, [r7, #12]
 8009a38:	4b2f      	ldr	r3, [pc, #188]	@ (8009af8 <log_system_data+0xe0>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a2e      	ldr	r2, [pc, #184]	@ (8009af8 <log_system_data+0xe0>)
 8009a3e:	6852      	ldr	r2, [r2, #4]
 8009a40:	492d      	ldr	r1, [pc, #180]	@ (8009af8 <log_system_data+0xe0>)
 8009a42:	6889      	ldr	r1, [r1, #8]
 8009a44:	482c      	ldr	r0, [pc, #176]	@ (8009af8 <log_system_data+0xe0>)
 8009a46:	6900      	ldr	r0, [r0, #16]
 8009a48:	4c2b      	ldr	r4, [pc, #172]	@ (8009af8 <log_system_data+0xe0>)
 8009a4a:	6964      	ldr	r4, [r4, #20]
 8009a4c:	4d2a      	ldr	r5, [pc, #168]	@ (8009af8 <log_system_data+0xe0>)
 8009a4e:	6a2d      	ldr	r5, [r5, #32]
 8009a50:	4e29      	ldr	r6, [pc, #164]	@ (8009af8 <log_system_data+0xe0>)
 8009a52:	6bb6      	ldr	r6, [r6, #56]	@ 0x38
 8009a54:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8009af8 <log_system_data+0xe0>
 8009a58:	f8dc c034 	ldr.w	ip, [ip, #52]	@ 0x34
 8009a5c:	f8c7 c008 	str.w	ip, [r7, #8]
 8009a60:	f8df e094 	ldr.w	lr, [pc, #148]	@ 8009af8 <log_system_data+0xe0>
 8009a64:	f8de e048 	ldr.w	lr, [lr, #72]	@ 0x48
 8009a68:	f8c7 e004 	str.w	lr, [r7, #4]
 8009a6c:	f8df c088 	ldr.w	ip, [pc, #136]	@ 8009af8 <log_system_data+0xe0>
 8009a70:	f8dc c024 	ldr.w	ip, [ip, #36]	@ 0x24
 8009a74:	f8c7 c000 	str.w	ip, [r7]
 8009a78:	f8df e07c 	ldr.w	lr, [pc, #124]	@ 8009af8 <log_system_data+0xe0>
 8009a7c:	f8de e028 	ldr.w	lr, [lr, #40]	@ 0x28
 8009a80:	f8cd e028 	str.w	lr, [sp, #40]	@ 0x28
 8009a84:	f8d7 c000 	ldr.w	ip, [r7]
 8009a88:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 8009a8c:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8009a90:	f8cd e020 	str.w	lr, [sp, #32]
 8009a94:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8009a98:	f8cd c01c 	str.w	ip, [sp, #28]
 8009a9c:	9606      	str	r6, [sp, #24]
 8009a9e:	9505      	str	r5, [sp, #20]
 8009aa0:	9404      	str	r4, [sp, #16]
 8009aa2:	9003      	str	r0, [sp, #12]
 8009aa4:	9102      	str	r1, [sp, #8]
 8009aa6:	9201      	str	r2, [sp, #4]
 8009aa8:	9300      	str	r3, [sp, #0]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	4a13      	ldr	r2, [pc, #76]	@ (8009afc <log_system_data+0xe4>)
 8009aae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009ab2:	4813      	ldr	r0, [pc, #76]	@ (8009b00 <log_system_data+0xe8>)
 8009ab4:	f000 f858 	bl	8009b68 <sniprintf>
				log_item.log_count, log_item.time, log_item.lat_int,
				log_item.lat_frac, log_item.lon_int, log_item.lon_frac,
				log_item.altitude, log_item.temperature, log_item.pressure,
				log_item.board_temp,log_item.ascent_rate,log_item.filtered_ascent_rate);

		res = f_write(&csvFile, csv_line, strlen(csv_line), &bytes_written);
 8009ab8:	4811      	ldr	r0, [pc, #68]	@ (8009b00 <log_system_data+0xe8>)
 8009aba:	f7f6 fb61 	bl	8000180 <strlen>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	4b10      	ldr	r3, [pc, #64]	@ (8009b04 <log_system_data+0xec>)
 8009ac2:	490f      	ldr	r1, [pc, #60]	@ (8009b00 <log_system_data+0xe8>)
 8009ac4:	480b      	ldr	r0, [pc, #44]	@ (8009af4 <log_system_data+0xdc>)
 8009ac6:	f7fe fd5d 	bl	8008584 <f_write>
 8009aca:	4603      	mov	r3, r0
 8009acc:	75fb      	strb	r3, [r7, #23]

		if (res != FR_OK) {
 8009ace:	7dfb      	ldrb	r3, [r7, #23]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d002      	beq.n	8009ada <log_system_data+0xc2>
			return -1; // ERROR: write to file failed
 8009ad4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009ad8:	e006      	b.n	8009ae8 <log_system_data+0xd0>
		}

		// Close file after writing
		f_close(&csvFile);
 8009ada:	4806      	ldr	r0, [pc, #24]	@ (8009af4 <log_system_data+0xdc>)
 8009adc:	f7fe ff45 	bl	800896a <f_close>

	} else {
		return -1; // ERROR: opening file failed
	}

	return 0;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	e001      	b.n	8009ae8 <log_system_data+0xd0>
		return -1; // ERROR: opening file failed
 8009ae4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	371c      	adds	r7, #28
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009af0:	0800af30 	.word	0x0800af30
 8009af4:	2000044c 	.word	0x2000044c
 8009af8:	200000d0 	.word	0x200000d0
 8009afc:	0800af78 	.word	0x0800af78
 8009b00:	20000680 	.word	0x20000680
 8009b04:	2000067c 	.word	0x2000067c

08009b08 <log_timeout>:

void log_timeout() {
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0

	FRESULT res;

	res = f_open(&csvFile, "data.csv", FA_WRITE | FA_OPEN_APPEND);
 8009b0e:	2232      	movs	r2, #50	@ 0x32
 8009b10:	4910      	ldr	r1, [pc, #64]	@ (8009b54 <log_timeout+0x4c>)
 8009b12:	4811      	ldr	r0, [pc, #68]	@ (8009b58 <log_timeout+0x50>)
 8009b14:	f7fe fb7c 	bl	8008210 <f_open>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	71fb      	strb	r3, [r7, #7]
	if (res == FR_OK) {
 8009b1c:	79fb      	ldrb	r3, [r7, #7]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d113      	bne.n	8009b4a <log_timeout+0x42>

		snprintf(csv_line, 256, "gps timeout\n");
 8009b22:	4a0e      	ldr	r2, [pc, #56]	@ (8009b5c <log_timeout+0x54>)
 8009b24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009b28:	480d      	ldr	r0, [pc, #52]	@ (8009b60 <log_timeout+0x58>)
 8009b2a:	f000 f81d 	bl	8009b68 <sniprintf>

		res = f_write(&csvFile, csv_line, strlen(csv_line), &bytes_written);
 8009b2e:	480c      	ldr	r0, [pc, #48]	@ (8009b60 <log_timeout+0x58>)
 8009b30:	f7f6 fb26 	bl	8000180 <strlen>
 8009b34:	4602      	mov	r2, r0
 8009b36:	4b0b      	ldr	r3, [pc, #44]	@ (8009b64 <log_timeout+0x5c>)
 8009b38:	4909      	ldr	r1, [pc, #36]	@ (8009b60 <log_timeout+0x58>)
 8009b3a:	4807      	ldr	r0, [pc, #28]	@ (8009b58 <log_timeout+0x50>)
 8009b3c:	f7fe fd22 	bl	8008584 <f_write>
 8009b40:	4603      	mov	r3, r0
 8009b42:	71fb      	strb	r3, [r7, #7]
		if (res != FR_OK) {

		}

		// Close file after writing
		f_close(&csvFile);
 8009b44:	4804      	ldr	r0, [pc, #16]	@ (8009b58 <log_timeout+0x50>)
 8009b46:	f7fe ff10 	bl	800896a <f_close>

	}
}
 8009b4a:	bf00      	nop
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	0800af30 	.word	0x0800af30
 8009b58:	2000044c 	.word	0x2000044c
 8009b5c:	0800afac 	.word	0x0800afac
 8009b60:	20000680 	.word	0x20000680
 8009b64:	2000067c 	.word	0x2000067c

08009b68 <sniprintf>:
 8009b68:	b40c      	push	{r2, r3}
 8009b6a:	b530      	push	{r4, r5, lr}
 8009b6c:	4b17      	ldr	r3, [pc, #92]	@ (8009bcc <sniprintf+0x64>)
 8009b6e:	1e0c      	subs	r4, r1, #0
 8009b70:	681d      	ldr	r5, [r3, #0]
 8009b72:	b09d      	sub	sp, #116	@ 0x74
 8009b74:	da08      	bge.n	8009b88 <sniprintf+0x20>
 8009b76:	238b      	movs	r3, #139	@ 0x8b
 8009b78:	602b      	str	r3, [r5, #0]
 8009b7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b7e:	b01d      	add	sp, #116	@ 0x74
 8009b80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b84:	b002      	add	sp, #8
 8009b86:	4770      	bx	lr
 8009b88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009b8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009b90:	bf14      	ite	ne
 8009b92:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009b96:	4623      	moveq	r3, r4
 8009b98:	9304      	str	r3, [sp, #16]
 8009b9a:	9307      	str	r3, [sp, #28]
 8009b9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009ba0:	9002      	str	r0, [sp, #8]
 8009ba2:	9006      	str	r0, [sp, #24]
 8009ba4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009ba8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009baa:	ab21      	add	r3, sp, #132	@ 0x84
 8009bac:	a902      	add	r1, sp, #8
 8009bae:	4628      	mov	r0, r5
 8009bb0:	9301      	str	r3, [sp, #4]
 8009bb2:	f000 f925 	bl	8009e00 <_svfiprintf_r>
 8009bb6:	1c43      	adds	r3, r0, #1
 8009bb8:	bfbc      	itt	lt
 8009bba:	238b      	movlt	r3, #139	@ 0x8b
 8009bbc:	602b      	strlt	r3, [r5, #0]
 8009bbe:	2c00      	cmp	r4, #0
 8009bc0:	d0dd      	beq.n	8009b7e <sniprintf+0x16>
 8009bc2:	9b02      	ldr	r3, [sp, #8]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	701a      	strb	r2, [r3, #0]
 8009bc8:	e7d9      	b.n	8009b7e <sniprintf+0x16>
 8009bca:	bf00      	nop
 8009bcc:	20000058 	.word	0x20000058

08009bd0 <siscanf>:
 8009bd0:	b40e      	push	{r1, r2, r3}
 8009bd2:	b530      	push	{r4, r5, lr}
 8009bd4:	b09c      	sub	sp, #112	@ 0x70
 8009bd6:	ac1f      	add	r4, sp, #124	@ 0x7c
 8009bd8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8009bdc:	f854 5b04 	ldr.w	r5, [r4], #4
 8009be0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009be4:	9002      	str	r0, [sp, #8]
 8009be6:	9006      	str	r0, [sp, #24]
 8009be8:	f7f6 faca 	bl	8000180 <strlen>
 8009bec:	4b0b      	ldr	r3, [pc, #44]	@ (8009c1c <siscanf+0x4c>)
 8009bee:	9003      	str	r0, [sp, #12]
 8009bf0:	9007      	str	r0, [sp, #28]
 8009bf2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bf4:	480a      	ldr	r0, [pc, #40]	@ (8009c20 <siscanf+0x50>)
 8009bf6:	9401      	str	r4, [sp, #4]
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009bfc:	9314      	str	r3, [sp, #80]	@ 0x50
 8009bfe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009c02:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c06:	462a      	mov	r2, r5
 8009c08:	4623      	mov	r3, r4
 8009c0a:	a902      	add	r1, sp, #8
 8009c0c:	6800      	ldr	r0, [r0, #0]
 8009c0e:	f000 fa4b 	bl	800a0a8 <__ssvfiscanf_r>
 8009c12:	b01c      	add	sp, #112	@ 0x70
 8009c14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c18:	b003      	add	sp, #12
 8009c1a:	4770      	bx	lr
 8009c1c:	08009c25 	.word	0x08009c25
 8009c20:	20000058 	.word	0x20000058

08009c24 <__seofread>:
 8009c24:	2000      	movs	r0, #0
 8009c26:	4770      	bx	lr

08009c28 <strncmp>:
 8009c28:	b510      	push	{r4, lr}
 8009c2a:	b16a      	cbz	r2, 8009c48 <strncmp+0x20>
 8009c2c:	3901      	subs	r1, #1
 8009c2e:	1884      	adds	r4, r0, r2
 8009c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c34:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d103      	bne.n	8009c44 <strncmp+0x1c>
 8009c3c:	42a0      	cmp	r0, r4
 8009c3e:	d001      	beq.n	8009c44 <strncmp+0x1c>
 8009c40:	2a00      	cmp	r2, #0
 8009c42:	d1f5      	bne.n	8009c30 <strncmp+0x8>
 8009c44:	1ad0      	subs	r0, r2, r3
 8009c46:	bd10      	pop	{r4, pc}
 8009c48:	4610      	mov	r0, r2
 8009c4a:	e7fc      	b.n	8009c46 <strncmp+0x1e>

08009c4c <memset>:
 8009c4c:	4402      	add	r2, r0
 8009c4e:	4603      	mov	r3, r0
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d100      	bne.n	8009c56 <memset+0xa>
 8009c54:	4770      	bx	lr
 8009c56:	f803 1b01 	strb.w	r1, [r3], #1
 8009c5a:	e7f9      	b.n	8009c50 <memset+0x4>

08009c5c <__errno>:
 8009c5c:	4b01      	ldr	r3, [pc, #4]	@ (8009c64 <__errno+0x8>)
 8009c5e:	6818      	ldr	r0, [r3, #0]
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	20000058 	.word	0x20000058

08009c68 <__libc_init_array>:
 8009c68:	b570      	push	{r4, r5, r6, lr}
 8009c6a:	4d0d      	ldr	r5, [pc, #52]	@ (8009ca0 <__libc_init_array+0x38>)
 8009c6c:	4c0d      	ldr	r4, [pc, #52]	@ (8009ca4 <__libc_init_array+0x3c>)
 8009c6e:	1b64      	subs	r4, r4, r5
 8009c70:	10a4      	asrs	r4, r4, #2
 8009c72:	2600      	movs	r6, #0
 8009c74:	42a6      	cmp	r6, r4
 8009c76:	d109      	bne.n	8009c8c <__libc_init_array+0x24>
 8009c78:	4d0b      	ldr	r5, [pc, #44]	@ (8009ca8 <__libc_init_array+0x40>)
 8009c7a:	4c0c      	ldr	r4, [pc, #48]	@ (8009cac <__libc_init_array+0x44>)
 8009c7c:	f001 f8e0 	bl	800ae40 <_init>
 8009c80:	1b64      	subs	r4, r4, r5
 8009c82:	10a4      	asrs	r4, r4, #2
 8009c84:	2600      	movs	r6, #0
 8009c86:	42a6      	cmp	r6, r4
 8009c88:	d105      	bne.n	8009c96 <__libc_init_array+0x2e>
 8009c8a:	bd70      	pop	{r4, r5, r6, pc}
 8009c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c90:	4798      	blx	r3
 8009c92:	3601      	adds	r6, #1
 8009c94:	e7ee      	b.n	8009c74 <__libc_init_array+0xc>
 8009c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c9a:	4798      	blx	r3
 8009c9c:	3601      	adds	r6, #1
 8009c9e:	e7f2      	b.n	8009c86 <__libc_init_array+0x1e>
 8009ca0:	0800b270 	.word	0x0800b270
 8009ca4:	0800b270 	.word	0x0800b270
 8009ca8:	0800b270 	.word	0x0800b270
 8009cac:	0800b274 	.word	0x0800b274

08009cb0 <__retarget_lock_acquire_recursive>:
 8009cb0:	4770      	bx	lr

08009cb2 <__retarget_lock_release_recursive>:
 8009cb2:	4770      	bx	lr

08009cb4 <_free_r>:
 8009cb4:	b538      	push	{r3, r4, r5, lr}
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	2900      	cmp	r1, #0
 8009cba:	d041      	beq.n	8009d40 <_free_r+0x8c>
 8009cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cc0:	1f0c      	subs	r4, r1, #4
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	bfb8      	it	lt
 8009cc6:	18e4      	addlt	r4, r4, r3
 8009cc8:	f000 ff1a 	bl	800ab00 <__malloc_lock>
 8009ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8009d44 <_free_r+0x90>)
 8009cce:	6813      	ldr	r3, [r2, #0]
 8009cd0:	b933      	cbnz	r3, 8009ce0 <_free_r+0x2c>
 8009cd2:	6063      	str	r3, [r4, #4]
 8009cd4:	6014      	str	r4, [r2, #0]
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cdc:	f000 bf16 	b.w	800ab0c <__malloc_unlock>
 8009ce0:	42a3      	cmp	r3, r4
 8009ce2:	d908      	bls.n	8009cf6 <_free_r+0x42>
 8009ce4:	6820      	ldr	r0, [r4, #0]
 8009ce6:	1821      	adds	r1, r4, r0
 8009ce8:	428b      	cmp	r3, r1
 8009cea:	bf01      	itttt	eq
 8009cec:	6819      	ldreq	r1, [r3, #0]
 8009cee:	685b      	ldreq	r3, [r3, #4]
 8009cf0:	1809      	addeq	r1, r1, r0
 8009cf2:	6021      	streq	r1, [r4, #0]
 8009cf4:	e7ed      	b.n	8009cd2 <_free_r+0x1e>
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	b10b      	cbz	r3, 8009d00 <_free_r+0x4c>
 8009cfc:	42a3      	cmp	r3, r4
 8009cfe:	d9fa      	bls.n	8009cf6 <_free_r+0x42>
 8009d00:	6811      	ldr	r1, [r2, #0]
 8009d02:	1850      	adds	r0, r2, r1
 8009d04:	42a0      	cmp	r0, r4
 8009d06:	d10b      	bne.n	8009d20 <_free_r+0x6c>
 8009d08:	6820      	ldr	r0, [r4, #0]
 8009d0a:	4401      	add	r1, r0
 8009d0c:	1850      	adds	r0, r2, r1
 8009d0e:	4283      	cmp	r3, r0
 8009d10:	6011      	str	r1, [r2, #0]
 8009d12:	d1e0      	bne.n	8009cd6 <_free_r+0x22>
 8009d14:	6818      	ldr	r0, [r3, #0]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	6053      	str	r3, [r2, #4]
 8009d1a:	4408      	add	r0, r1
 8009d1c:	6010      	str	r0, [r2, #0]
 8009d1e:	e7da      	b.n	8009cd6 <_free_r+0x22>
 8009d20:	d902      	bls.n	8009d28 <_free_r+0x74>
 8009d22:	230c      	movs	r3, #12
 8009d24:	602b      	str	r3, [r5, #0]
 8009d26:	e7d6      	b.n	8009cd6 <_free_r+0x22>
 8009d28:	6820      	ldr	r0, [r4, #0]
 8009d2a:	1821      	adds	r1, r4, r0
 8009d2c:	428b      	cmp	r3, r1
 8009d2e:	bf04      	itt	eq
 8009d30:	6819      	ldreq	r1, [r3, #0]
 8009d32:	685b      	ldreq	r3, [r3, #4]
 8009d34:	6063      	str	r3, [r4, #4]
 8009d36:	bf04      	itt	eq
 8009d38:	1809      	addeq	r1, r1, r0
 8009d3a:	6021      	streq	r1, [r4, #0]
 8009d3c:	6054      	str	r4, [r2, #4]
 8009d3e:	e7ca      	b.n	8009cd6 <_free_r+0x22>
 8009d40:	bd38      	pop	{r3, r4, r5, pc}
 8009d42:	bf00      	nop
 8009d44:	2000092c 	.word	0x2000092c

08009d48 <__ssputs_r>:
 8009d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d4c:	688e      	ldr	r6, [r1, #8]
 8009d4e:	461f      	mov	r7, r3
 8009d50:	42be      	cmp	r6, r7
 8009d52:	680b      	ldr	r3, [r1, #0]
 8009d54:	4682      	mov	sl, r0
 8009d56:	460c      	mov	r4, r1
 8009d58:	4690      	mov	r8, r2
 8009d5a:	d82d      	bhi.n	8009db8 <__ssputs_r+0x70>
 8009d5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d60:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009d64:	d026      	beq.n	8009db4 <__ssputs_r+0x6c>
 8009d66:	6965      	ldr	r5, [r4, #20]
 8009d68:	6909      	ldr	r1, [r1, #16]
 8009d6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d6e:	eba3 0901 	sub.w	r9, r3, r1
 8009d72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d76:	1c7b      	adds	r3, r7, #1
 8009d78:	444b      	add	r3, r9
 8009d7a:	106d      	asrs	r5, r5, #1
 8009d7c:	429d      	cmp	r5, r3
 8009d7e:	bf38      	it	cc
 8009d80:	461d      	movcc	r5, r3
 8009d82:	0553      	lsls	r3, r2, #21
 8009d84:	d527      	bpl.n	8009dd6 <__ssputs_r+0x8e>
 8009d86:	4629      	mov	r1, r5
 8009d88:	f000 fb24 	bl	800a3d4 <_malloc_r>
 8009d8c:	4606      	mov	r6, r0
 8009d8e:	b360      	cbz	r0, 8009dea <__ssputs_r+0xa2>
 8009d90:	6921      	ldr	r1, [r4, #16]
 8009d92:	464a      	mov	r2, r9
 8009d94:	f001 f83e 	bl	800ae14 <memcpy>
 8009d98:	89a3      	ldrh	r3, [r4, #12]
 8009d9a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009da2:	81a3      	strh	r3, [r4, #12]
 8009da4:	6126      	str	r6, [r4, #16]
 8009da6:	6165      	str	r5, [r4, #20]
 8009da8:	444e      	add	r6, r9
 8009daa:	eba5 0509 	sub.w	r5, r5, r9
 8009dae:	6026      	str	r6, [r4, #0]
 8009db0:	60a5      	str	r5, [r4, #8]
 8009db2:	463e      	mov	r6, r7
 8009db4:	42be      	cmp	r6, r7
 8009db6:	d900      	bls.n	8009dba <__ssputs_r+0x72>
 8009db8:	463e      	mov	r6, r7
 8009dba:	6820      	ldr	r0, [r4, #0]
 8009dbc:	4632      	mov	r2, r6
 8009dbe:	4641      	mov	r1, r8
 8009dc0:	f000 fffe 	bl	800adc0 <memmove>
 8009dc4:	68a3      	ldr	r3, [r4, #8]
 8009dc6:	1b9b      	subs	r3, r3, r6
 8009dc8:	60a3      	str	r3, [r4, #8]
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	4433      	add	r3, r6
 8009dce:	6023      	str	r3, [r4, #0]
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd6:	462a      	mov	r2, r5
 8009dd8:	f000 fed8 	bl	800ab8c <_realloc_r>
 8009ddc:	4606      	mov	r6, r0
 8009dde:	2800      	cmp	r0, #0
 8009de0:	d1e0      	bne.n	8009da4 <__ssputs_r+0x5c>
 8009de2:	6921      	ldr	r1, [r4, #16]
 8009de4:	4650      	mov	r0, sl
 8009de6:	f7ff ff65 	bl	8009cb4 <_free_r>
 8009dea:	230c      	movs	r3, #12
 8009dec:	f8ca 3000 	str.w	r3, [sl]
 8009df0:	89a3      	ldrh	r3, [r4, #12]
 8009df2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009df6:	81a3      	strh	r3, [r4, #12]
 8009df8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009dfc:	e7e9      	b.n	8009dd2 <__ssputs_r+0x8a>
	...

08009e00 <_svfiprintf_r>:
 8009e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e04:	4698      	mov	r8, r3
 8009e06:	898b      	ldrh	r3, [r1, #12]
 8009e08:	061b      	lsls	r3, r3, #24
 8009e0a:	b09d      	sub	sp, #116	@ 0x74
 8009e0c:	4607      	mov	r7, r0
 8009e0e:	460d      	mov	r5, r1
 8009e10:	4614      	mov	r4, r2
 8009e12:	d510      	bpl.n	8009e36 <_svfiprintf_r+0x36>
 8009e14:	690b      	ldr	r3, [r1, #16]
 8009e16:	b973      	cbnz	r3, 8009e36 <_svfiprintf_r+0x36>
 8009e18:	2140      	movs	r1, #64	@ 0x40
 8009e1a:	f000 fadb 	bl	800a3d4 <_malloc_r>
 8009e1e:	6028      	str	r0, [r5, #0]
 8009e20:	6128      	str	r0, [r5, #16]
 8009e22:	b930      	cbnz	r0, 8009e32 <_svfiprintf_r+0x32>
 8009e24:	230c      	movs	r3, #12
 8009e26:	603b      	str	r3, [r7, #0]
 8009e28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e2c:	b01d      	add	sp, #116	@ 0x74
 8009e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e32:	2340      	movs	r3, #64	@ 0x40
 8009e34:	616b      	str	r3, [r5, #20]
 8009e36:	2300      	movs	r3, #0
 8009e38:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e3a:	2320      	movs	r3, #32
 8009e3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e40:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e44:	2330      	movs	r3, #48	@ 0x30
 8009e46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009fe4 <_svfiprintf_r+0x1e4>
 8009e4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e4e:	f04f 0901 	mov.w	r9, #1
 8009e52:	4623      	mov	r3, r4
 8009e54:	469a      	mov	sl, r3
 8009e56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e5a:	b10a      	cbz	r2, 8009e60 <_svfiprintf_r+0x60>
 8009e5c:	2a25      	cmp	r2, #37	@ 0x25
 8009e5e:	d1f9      	bne.n	8009e54 <_svfiprintf_r+0x54>
 8009e60:	ebba 0b04 	subs.w	fp, sl, r4
 8009e64:	d00b      	beq.n	8009e7e <_svfiprintf_r+0x7e>
 8009e66:	465b      	mov	r3, fp
 8009e68:	4622      	mov	r2, r4
 8009e6a:	4629      	mov	r1, r5
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	f7ff ff6b 	bl	8009d48 <__ssputs_r>
 8009e72:	3001      	adds	r0, #1
 8009e74:	f000 80a7 	beq.w	8009fc6 <_svfiprintf_r+0x1c6>
 8009e78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e7a:	445a      	add	r2, fp
 8009e7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f000 809f 	beq.w	8009fc6 <_svfiprintf_r+0x1c6>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e92:	f10a 0a01 	add.w	sl, sl, #1
 8009e96:	9304      	str	r3, [sp, #16]
 8009e98:	9307      	str	r3, [sp, #28]
 8009e9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ea0:	4654      	mov	r4, sl
 8009ea2:	2205      	movs	r2, #5
 8009ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ea8:	484e      	ldr	r0, [pc, #312]	@ (8009fe4 <_svfiprintf_r+0x1e4>)
 8009eaa:	f7f6 f971 	bl	8000190 <memchr>
 8009eae:	9a04      	ldr	r2, [sp, #16]
 8009eb0:	b9d8      	cbnz	r0, 8009eea <_svfiprintf_r+0xea>
 8009eb2:	06d0      	lsls	r0, r2, #27
 8009eb4:	bf44      	itt	mi
 8009eb6:	2320      	movmi	r3, #32
 8009eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ebc:	0711      	lsls	r1, r2, #28
 8009ebe:	bf44      	itt	mi
 8009ec0:	232b      	movmi	r3, #43	@ 0x2b
 8009ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ec6:	f89a 3000 	ldrb.w	r3, [sl]
 8009eca:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ecc:	d015      	beq.n	8009efa <_svfiprintf_r+0xfa>
 8009ece:	9a07      	ldr	r2, [sp, #28]
 8009ed0:	4654      	mov	r4, sl
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	f04f 0c0a 	mov.w	ip, #10
 8009ed8:	4621      	mov	r1, r4
 8009eda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ede:	3b30      	subs	r3, #48	@ 0x30
 8009ee0:	2b09      	cmp	r3, #9
 8009ee2:	d94b      	bls.n	8009f7c <_svfiprintf_r+0x17c>
 8009ee4:	b1b0      	cbz	r0, 8009f14 <_svfiprintf_r+0x114>
 8009ee6:	9207      	str	r2, [sp, #28]
 8009ee8:	e014      	b.n	8009f14 <_svfiprintf_r+0x114>
 8009eea:	eba0 0308 	sub.w	r3, r0, r8
 8009eee:	fa09 f303 	lsl.w	r3, r9, r3
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	9304      	str	r3, [sp, #16]
 8009ef6:	46a2      	mov	sl, r4
 8009ef8:	e7d2      	b.n	8009ea0 <_svfiprintf_r+0xa0>
 8009efa:	9b03      	ldr	r3, [sp, #12]
 8009efc:	1d19      	adds	r1, r3, #4
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	9103      	str	r1, [sp, #12]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	bfbb      	ittet	lt
 8009f06:	425b      	neglt	r3, r3
 8009f08:	f042 0202 	orrlt.w	r2, r2, #2
 8009f0c:	9307      	strge	r3, [sp, #28]
 8009f0e:	9307      	strlt	r3, [sp, #28]
 8009f10:	bfb8      	it	lt
 8009f12:	9204      	strlt	r2, [sp, #16]
 8009f14:	7823      	ldrb	r3, [r4, #0]
 8009f16:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f18:	d10a      	bne.n	8009f30 <_svfiprintf_r+0x130>
 8009f1a:	7863      	ldrb	r3, [r4, #1]
 8009f1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f1e:	d132      	bne.n	8009f86 <_svfiprintf_r+0x186>
 8009f20:	9b03      	ldr	r3, [sp, #12]
 8009f22:	1d1a      	adds	r2, r3, #4
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	9203      	str	r2, [sp, #12]
 8009f28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f2c:	3402      	adds	r4, #2
 8009f2e:	9305      	str	r3, [sp, #20]
 8009f30:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009fe8 <_svfiprintf_r+0x1e8>
 8009f34:	7821      	ldrb	r1, [r4, #0]
 8009f36:	2203      	movs	r2, #3
 8009f38:	4650      	mov	r0, sl
 8009f3a:	f7f6 f929 	bl	8000190 <memchr>
 8009f3e:	b138      	cbz	r0, 8009f50 <_svfiprintf_r+0x150>
 8009f40:	9b04      	ldr	r3, [sp, #16]
 8009f42:	eba0 000a 	sub.w	r0, r0, sl
 8009f46:	2240      	movs	r2, #64	@ 0x40
 8009f48:	4082      	lsls	r2, r0
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	3401      	adds	r4, #1
 8009f4e:	9304      	str	r3, [sp, #16]
 8009f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f54:	4825      	ldr	r0, [pc, #148]	@ (8009fec <_svfiprintf_r+0x1ec>)
 8009f56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f5a:	2206      	movs	r2, #6
 8009f5c:	f7f6 f918 	bl	8000190 <memchr>
 8009f60:	2800      	cmp	r0, #0
 8009f62:	d036      	beq.n	8009fd2 <_svfiprintf_r+0x1d2>
 8009f64:	4b22      	ldr	r3, [pc, #136]	@ (8009ff0 <_svfiprintf_r+0x1f0>)
 8009f66:	bb1b      	cbnz	r3, 8009fb0 <_svfiprintf_r+0x1b0>
 8009f68:	9b03      	ldr	r3, [sp, #12]
 8009f6a:	3307      	adds	r3, #7
 8009f6c:	f023 0307 	bic.w	r3, r3, #7
 8009f70:	3308      	adds	r3, #8
 8009f72:	9303      	str	r3, [sp, #12]
 8009f74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f76:	4433      	add	r3, r6
 8009f78:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f7a:	e76a      	b.n	8009e52 <_svfiprintf_r+0x52>
 8009f7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f80:	460c      	mov	r4, r1
 8009f82:	2001      	movs	r0, #1
 8009f84:	e7a8      	b.n	8009ed8 <_svfiprintf_r+0xd8>
 8009f86:	2300      	movs	r3, #0
 8009f88:	3401      	adds	r4, #1
 8009f8a:	9305      	str	r3, [sp, #20]
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	f04f 0c0a 	mov.w	ip, #10
 8009f92:	4620      	mov	r0, r4
 8009f94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f98:	3a30      	subs	r2, #48	@ 0x30
 8009f9a:	2a09      	cmp	r2, #9
 8009f9c:	d903      	bls.n	8009fa6 <_svfiprintf_r+0x1a6>
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d0c6      	beq.n	8009f30 <_svfiprintf_r+0x130>
 8009fa2:	9105      	str	r1, [sp, #20]
 8009fa4:	e7c4      	b.n	8009f30 <_svfiprintf_r+0x130>
 8009fa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009faa:	4604      	mov	r4, r0
 8009fac:	2301      	movs	r3, #1
 8009fae:	e7f0      	b.n	8009f92 <_svfiprintf_r+0x192>
 8009fb0:	ab03      	add	r3, sp, #12
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	462a      	mov	r2, r5
 8009fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8009ff4 <_svfiprintf_r+0x1f4>)
 8009fb8:	a904      	add	r1, sp, #16
 8009fba:	4638      	mov	r0, r7
 8009fbc:	f3af 8000 	nop.w
 8009fc0:	1c42      	adds	r2, r0, #1
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	d1d6      	bne.n	8009f74 <_svfiprintf_r+0x174>
 8009fc6:	89ab      	ldrh	r3, [r5, #12]
 8009fc8:	065b      	lsls	r3, r3, #25
 8009fca:	f53f af2d 	bmi.w	8009e28 <_svfiprintf_r+0x28>
 8009fce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fd0:	e72c      	b.n	8009e2c <_svfiprintf_r+0x2c>
 8009fd2:	ab03      	add	r3, sp, #12
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	462a      	mov	r2, r5
 8009fd8:	4b06      	ldr	r3, [pc, #24]	@ (8009ff4 <_svfiprintf_r+0x1f4>)
 8009fda:	a904      	add	r1, sp, #16
 8009fdc:	4638      	mov	r0, r7
 8009fde:	f000 fae7 	bl	800a5b0 <_printf_i>
 8009fe2:	e7ed      	b.n	8009fc0 <_svfiprintf_r+0x1c0>
 8009fe4:	0800b118 	.word	0x0800b118
 8009fe8:	0800b11e 	.word	0x0800b11e
 8009fec:	0800b122 	.word	0x0800b122
 8009ff0:	00000000 	.word	0x00000000
 8009ff4:	08009d49 	.word	0x08009d49

08009ff8 <_sungetc_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	1c4b      	adds	r3, r1, #1
 8009ffc:	4614      	mov	r4, r2
 8009ffe:	d103      	bne.n	800a008 <_sungetc_r+0x10>
 800a000:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a004:	4628      	mov	r0, r5
 800a006:	bd38      	pop	{r3, r4, r5, pc}
 800a008:	8993      	ldrh	r3, [r2, #12]
 800a00a:	f023 0320 	bic.w	r3, r3, #32
 800a00e:	8193      	strh	r3, [r2, #12]
 800a010:	6853      	ldr	r3, [r2, #4]
 800a012:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a014:	b2cd      	uxtb	r5, r1
 800a016:	b18a      	cbz	r2, 800a03c <_sungetc_r+0x44>
 800a018:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a01a:	429a      	cmp	r2, r3
 800a01c:	dd08      	ble.n	800a030 <_sungetc_r+0x38>
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	1e5a      	subs	r2, r3, #1
 800a022:	6022      	str	r2, [r4, #0]
 800a024:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a028:	6863      	ldr	r3, [r4, #4]
 800a02a:	3301      	adds	r3, #1
 800a02c:	6063      	str	r3, [r4, #4]
 800a02e:	e7e9      	b.n	800a004 <_sungetc_r+0xc>
 800a030:	4621      	mov	r1, r4
 800a032:	f000 fd71 	bl	800ab18 <__submore>
 800a036:	2800      	cmp	r0, #0
 800a038:	d0f1      	beq.n	800a01e <_sungetc_r+0x26>
 800a03a:	e7e1      	b.n	800a000 <_sungetc_r+0x8>
 800a03c:	6921      	ldr	r1, [r4, #16]
 800a03e:	6822      	ldr	r2, [r4, #0]
 800a040:	b141      	cbz	r1, 800a054 <_sungetc_r+0x5c>
 800a042:	4291      	cmp	r1, r2
 800a044:	d206      	bcs.n	800a054 <_sungetc_r+0x5c>
 800a046:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a04a:	42a9      	cmp	r1, r5
 800a04c:	d102      	bne.n	800a054 <_sungetc_r+0x5c>
 800a04e:	3a01      	subs	r2, #1
 800a050:	6022      	str	r2, [r4, #0]
 800a052:	e7ea      	b.n	800a02a <_sungetc_r+0x32>
 800a054:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800a058:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a05c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a05e:	2303      	movs	r3, #3
 800a060:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a062:	4623      	mov	r3, r4
 800a064:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a068:	6023      	str	r3, [r4, #0]
 800a06a:	2301      	movs	r3, #1
 800a06c:	e7de      	b.n	800a02c <_sungetc_r+0x34>

0800a06e <__ssrefill_r>:
 800a06e:	b510      	push	{r4, lr}
 800a070:	460c      	mov	r4, r1
 800a072:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a074:	b169      	cbz	r1, 800a092 <__ssrefill_r+0x24>
 800a076:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a07a:	4299      	cmp	r1, r3
 800a07c:	d001      	beq.n	800a082 <__ssrefill_r+0x14>
 800a07e:	f7ff fe19 	bl	8009cb4 <_free_r>
 800a082:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a084:	6063      	str	r3, [r4, #4]
 800a086:	2000      	movs	r0, #0
 800a088:	6360      	str	r0, [r4, #52]	@ 0x34
 800a08a:	b113      	cbz	r3, 800a092 <__ssrefill_r+0x24>
 800a08c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a08e:	6023      	str	r3, [r4, #0]
 800a090:	bd10      	pop	{r4, pc}
 800a092:	6923      	ldr	r3, [r4, #16]
 800a094:	6023      	str	r3, [r4, #0]
 800a096:	2300      	movs	r3, #0
 800a098:	6063      	str	r3, [r4, #4]
 800a09a:	89a3      	ldrh	r3, [r4, #12]
 800a09c:	f043 0320 	orr.w	r3, r3, #32
 800a0a0:	81a3      	strh	r3, [r4, #12]
 800a0a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0a6:	e7f3      	b.n	800a090 <__ssrefill_r+0x22>

0800a0a8 <__ssvfiscanf_r>:
 800a0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ac:	460c      	mov	r4, r1
 800a0ae:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a0b8:	49a5      	ldr	r1, [pc, #660]	@ (800a350 <__ssvfiscanf_r+0x2a8>)
 800a0ba:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a0bc:	f10d 0804 	add.w	r8, sp, #4
 800a0c0:	49a4      	ldr	r1, [pc, #656]	@ (800a354 <__ssvfiscanf_r+0x2ac>)
 800a0c2:	4fa5      	ldr	r7, [pc, #660]	@ (800a358 <__ssvfiscanf_r+0x2b0>)
 800a0c4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a0c8:	4606      	mov	r6, r0
 800a0ca:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	7813      	ldrb	r3, [r2, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f000 8158 	beq.w	800a386 <__ssvfiscanf_r+0x2de>
 800a0d6:	5cf9      	ldrb	r1, [r7, r3]
 800a0d8:	f011 0108 	ands.w	r1, r1, #8
 800a0dc:	f102 0501 	add.w	r5, r2, #1
 800a0e0:	d019      	beq.n	800a116 <__ssvfiscanf_r+0x6e>
 800a0e2:	6863      	ldr	r3, [r4, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	dd0f      	ble.n	800a108 <__ssvfiscanf_r+0x60>
 800a0e8:	6823      	ldr	r3, [r4, #0]
 800a0ea:	781a      	ldrb	r2, [r3, #0]
 800a0ec:	5cba      	ldrb	r2, [r7, r2]
 800a0ee:	0712      	lsls	r2, r2, #28
 800a0f0:	d401      	bmi.n	800a0f6 <__ssvfiscanf_r+0x4e>
 800a0f2:	462a      	mov	r2, r5
 800a0f4:	e7eb      	b.n	800a0ce <__ssvfiscanf_r+0x26>
 800a0f6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a0f8:	3201      	adds	r2, #1
 800a0fa:	9245      	str	r2, [sp, #276]	@ 0x114
 800a0fc:	6862      	ldr	r2, [r4, #4]
 800a0fe:	3301      	adds	r3, #1
 800a100:	3a01      	subs	r2, #1
 800a102:	6062      	str	r2, [r4, #4]
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	e7ec      	b.n	800a0e2 <__ssvfiscanf_r+0x3a>
 800a108:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a10a:	4621      	mov	r1, r4
 800a10c:	4630      	mov	r0, r6
 800a10e:	4798      	blx	r3
 800a110:	2800      	cmp	r0, #0
 800a112:	d0e9      	beq.n	800a0e8 <__ssvfiscanf_r+0x40>
 800a114:	e7ed      	b.n	800a0f2 <__ssvfiscanf_r+0x4a>
 800a116:	2b25      	cmp	r3, #37	@ 0x25
 800a118:	d012      	beq.n	800a140 <__ssvfiscanf_r+0x98>
 800a11a:	4699      	mov	r9, r3
 800a11c:	6863      	ldr	r3, [r4, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f340 8093 	ble.w	800a24a <__ssvfiscanf_r+0x1a2>
 800a124:	6822      	ldr	r2, [r4, #0]
 800a126:	7813      	ldrb	r3, [r2, #0]
 800a128:	454b      	cmp	r3, r9
 800a12a:	f040 812c 	bne.w	800a386 <__ssvfiscanf_r+0x2de>
 800a12e:	6863      	ldr	r3, [r4, #4]
 800a130:	3b01      	subs	r3, #1
 800a132:	6063      	str	r3, [r4, #4]
 800a134:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a136:	3201      	adds	r2, #1
 800a138:	3301      	adds	r3, #1
 800a13a:	6022      	str	r2, [r4, #0]
 800a13c:	9345      	str	r3, [sp, #276]	@ 0x114
 800a13e:	e7d8      	b.n	800a0f2 <__ssvfiscanf_r+0x4a>
 800a140:	9141      	str	r1, [sp, #260]	@ 0x104
 800a142:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a144:	7853      	ldrb	r3, [r2, #1]
 800a146:	2b2a      	cmp	r3, #42	@ 0x2a
 800a148:	bf02      	ittt	eq
 800a14a:	2310      	moveq	r3, #16
 800a14c:	1c95      	addeq	r5, r2, #2
 800a14e:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a150:	220a      	movs	r2, #10
 800a152:	46a9      	mov	r9, r5
 800a154:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a158:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a15c:	2b09      	cmp	r3, #9
 800a15e:	d91e      	bls.n	800a19e <__ssvfiscanf_r+0xf6>
 800a160:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800a35c <__ssvfiscanf_r+0x2b4>
 800a164:	2203      	movs	r2, #3
 800a166:	4650      	mov	r0, sl
 800a168:	f7f6 f812 	bl	8000190 <memchr>
 800a16c:	b138      	cbz	r0, 800a17e <__ssvfiscanf_r+0xd6>
 800a16e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a170:	eba0 000a 	sub.w	r0, r0, sl
 800a174:	2301      	movs	r3, #1
 800a176:	4083      	lsls	r3, r0
 800a178:	4313      	orrs	r3, r2
 800a17a:	9341      	str	r3, [sp, #260]	@ 0x104
 800a17c:	464d      	mov	r5, r9
 800a17e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a182:	2b78      	cmp	r3, #120	@ 0x78
 800a184:	d806      	bhi.n	800a194 <__ssvfiscanf_r+0xec>
 800a186:	2b57      	cmp	r3, #87	@ 0x57
 800a188:	d810      	bhi.n	800a1ac <__ssvfiscanf_r+0x104>
 800a18a:	2b25      	cmp	r3, #37	@ 0x25
 800a18c:	d0c5      	beq.n	800a11a <__ssvfiscanf_r+0x72>
 800a18e:	d857      	bhi.n	800a240 <__ssvfiscanf_r+0x198>
 800a190:	2b00      	cmp	r3, #0
 800a192:	d065      	beq.n	800a260 <__ssvfiscanf_r+0x1b8>
 800a194:	2303      	movs	r3, #3
 800a196:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a198:	230a      	movs	r3, #10
 800a19a:	9342      	str	r3, [sp, #264]	@ 0x108
 800a19c:	e078      	b.n	800a290 <__ssvfiscanf_r+0x1e8>
 800a19e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a1a0:	fb02 1103 	mla	r1, r2, r3, r1
 800a1a4:	3930      	subs	r1, #48	@ 0x30
 800a1a6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a1a8:	464d      	mov	r5, r9
 800a1aa:	e7d2      	b.n	800a152 <__ssvfiscanf_r+0xaa>
 800a1ac:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a1b0:	2a20      	cmp	r2, #32
 800a1b2:	d8ef      	bhi.n	800a194 <__ssvfiscanf_r+0xec>
 800a1b4:	a101      	add	r1, pc, #4	@ (adr r1, 800a1bc <__ssvfiscanf_r+0x114>)
 800a1b6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a1ba:	bf00      	nop
 800a1bc:	0800a26f 	.word	0x0800a26f
 800a1c0:	0800a195 	.word	0x0800a195
 800a1c4:	0800a195 	.word	0x0800a195
 800a1c8:	0800a2c9 	.word	0x0800a2c9
 800a1cc:	0800a195 	.word	0x0800a195
 800a1d0:	0800a195 	.word	0x0800a195
 800a1d4:	0800a195 	.word	0x0800a195
 800a1d8:	0800a195 	.word	0x0800a195
 800a1dc:	0800a195 	.word	0x0800a195
 800a1e0:	0800a195 	.word	0x0800a195
 800a1e4:	0800a195 	.word	0x0800a195
 800a1e8:	0800a2df 	.word	0x0800a2df
 800a1ec:	0800a2c5 	.word	0x0800a2c5
 800a1f0:	0800a247 	.word	0x0800a247
 800a1f4:	0800a247 	.word	0x0800a247
 800a1f8:	0800a247 	.word	0x0800a247
 800a1fc:	0800a195 	.word	0x0800a195
 800a200:	0800a281 	.word	0x0800a281
 800a204:	0800a195 	.word	0x0800a195
 800a208:	0800a195 	.word	0x0800a195
 800a20c:	0800a195 	.word	0x0800a195
 800a210:	0800a195 	.word	0x0800a195
 800a214:	0800a2ef 	.word	0x0800a2ef
 800a218:	0800a289 	.word	0x0800a289
 800a21c:	0800a267 	.word	0x0800a267
 800a220:	0800a195 	.word	0x0800a195
 800a224:	0800a195 	.word	0x0800a195
 800a228:	0800a2eb 	.word	0x0800a2eb
 800a22c:	0800a195 	.word	0x0800a195
 800a230:	0800a2c5 	.word	0x0800a2c5
 800a234:	0800a195 	.word	0x0800a195
 800a238:	0800a195 	.word	0x0800a195
 800a23c:	0800a26f 	.word	0x0800a26f
 800a240:	3b45      	subs	r3, #69	@ 0x45
 800a242:	2b02      	cmp	r3, #2
 800a244:	d8a6      	bhi.n	800a194 <__ssvfiscanf_r+0xec>
 800a246:	2305      	movs	r3, #5
 800a248:	e021      	b.n	800a28e <__ssvfiscanf_r+0x1e6>
 800a24a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a24c:	4621      	mov	r1, r4
 800a24e:	4630      	mov	r0, r6
 800a250:	4798      	blx	r3
 800a252:	2800      	cmp	r0, #0
 800a254:	f43f af66 	beq.w	800a124 <__ssvfiscanf_r+0x7c>
 800a258:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a25a:	2800      	cmp	r0, #0
 800a25c:	f040 808b 	bne.w	800a376 <__ssvfiscanf_r+0x2ce>
 800a260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a264:	e08b      	b.n	800a37e <__ssvfiscanf_r+0x2d6>
 800a266:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a268:	f042 0220 	orr.w	r2, r2, #32
 800a26c:	9241      	str	r2, [sp, #260]	@ 0x104
 800a26e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a270:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a274:	9241      	str	r2, [sp, #260]	@ 0x104
 800a276:	2210      	movs	r2, #16
 800a278:	2b6e      	cmp	r3, #110	@ 0x6e
 800a27a:	9242      	str	r2, [sp, #264]	@ 0x108
 800a27c:	d902      	bls.n	800a284 <__ssvfiscanf_r+0x1dc>
 800a27e:	e005      	b.n	800a28c <__ssvfiscanf_r+0x1e4>
 800a280:	2300      	movs	r3, #0
 800a282:	9342      	str	r3, [sp, #264]	@ 0x108
 800a284:	2303      	movs	r3, #3
 800a286:	e002      	b.n	800a28e <__ssvfiscanf_r+0x1e6>
 800a288:	2308      	movs	r3, #8
 800a28a:	9342      	str	r3, [sp, #264]	@ 0x108
 800a28c:	2304      	movs	r3, #4
 800a28e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a290:	6863      	ldr	r3, [r4, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	dd39      	ble.n	800a30a <__ssvfiscanf_r+0x262>
 800a296:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a298:	0659      	lsls	r1, r3, #25
 800a29a:	d404      	bmi.n	800a2a6 <__ssvfiscanf_r+0x1fe>
 800a29c:	6823      	ldr	r3, [r4, #0]
 800a29e:	781a      	ldrb	r2, [r3, #0]
 800a2a0:	5cba      	ldrb	r2, [r7, r2]
 800a2a2:	0712      	lsls	r2, r2, #28
 800a2a4:	d438      	bmi.n	800a318 <__ssvfiscanf_r+0x270>
 800a2a6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	dc47      	bgt.n	800a33c <__ssvfiscanf_r+0x294>
 800a2ac:	466b      	mov	r3, sp
 800a2ae:	4622      	mov	r2, r4
 800a2b0:	a941      	add	r1, sp, #260	@ 0x104
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	f000 fa9c 	bl	800a7f0 <_scanf_chars>
 800a2b8:	2801      	cmp	r0, #1
 800a2ba:	d064      	beq.n	800a386 <__ssvfiscanf_r+0x2de>
 800a2bc:	2802      	cmp	r0, #2
 800a2be:	f47f af18 	bne.w	800a0f2 <__ssvfiscanf_r+0x4a>
 800a2c2:	e7c9      	b.n	800a258 <__ssvfiscanf_r+0x1b0>
 800a2c4:	220a      	movs	r2, #10
 800a2c6:	e7d7      	b.n	800a278 <__ssvfiscanf_r+0x1d0>
 800a2c8:	4629      	mov	r1, r5
 800a2ca:	4640      	mov	r0, r8
 800a2cc:	f000 fbde 	bl	800aa8c <__sccl>
 800a2d0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a2d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2d6:	9341      	str	r3, [sp, #260]	@ 0x104
 800a2d8:	4605      	mov	r5, r0
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e7d7      	b.n	800a28e <__ssvfiscanf_r+0x1e6>
 800a2de:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a2e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2e4:	9341      	str	r3, [sp, #260]	@ 0x104
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	e7d1      	b.n	800a28e <__ssvfiscanf_r+0x1e6>
 800a2ea:	2302      	movs	r3, #2
 800a2ec:	e7cf      	b.n	800a28e <__ssvfiscanf_r+0x1e6>
 800a2ee:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a2f0:	06c3      	lsls	r3, r0, #27
 800a2f2:	f53f aefe 	bmi.w	800a0f2 <__ssvfiscanf_r+0x4a>
 800a2f6:	9b00      	ldr	r3, [sp, #0]
 800a2f8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a2fa:	1d19      	adds	r1, r3, #4
 800a2fc:	9100      	str	r1, [sp, #0]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	07c0      	lsls	r0, r0, #31
 800a302:	bf4c      	ite	mi
 800a304:	801a      	strhmi	r2, [r3, #0]
 800a306:	601a      	strpl	r2, [r3, #0]
 800a308:	e6f3      	b.n	800a0f2 <__ssvfiscanf_r+0x4a>
 800a30a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a30c:	4621      	mov	r1, r4
 800a30e:	4630      	mov	r0, r6
 800a310:	4798      	blx	r3
 800a312:	2800      	cmp	r0, #0
 800a314:	d0bf      	beq.n	800a296 <__ssvfiscanf_r+0x1ee>
 800a316:	e79f      	b.n	800a258 <__ssvfiscanf_r+0x1b0>
 800a318:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a31a:	3201      	adds	r2, #1
 800a31c:	9245      	str	r2, [sp, #276]	@ 0x114
 800a31e:	6862      	ldr	r2, [r4, #4]
 800a320:	3a01      	subs	r2, #1
 800a322:	2a00      	cmp	r2, #0
 800a324:	6062      	str	r2, [r4, #4]
 800a326:	dd02      	ble.n	800a32e <__ssvfiscanf_r+0x286>
 800a328:	3301      	adds	r3, #1
 800a32a:	6023      	str	r3, [r4, #0]
 800a32c:	e7b6      	b.n	800a29c <__ssvfiscanf_r+0x1f4>
 800a32e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a330:	4621      	mov	r1, r4
 800a332:	4630      	mov	r0, r6
 800a334:	4798      	blx	r3
 800a336:	2800      	cmp	r0, #0
 800a338:	d0b0      	beq.n	800a29c <__ssvfiscanf_r+0x1f4>
 800a33a:	e78d      	b.n	800a258 <__ssvfiscanf_r+0x1b0>
 800a33c:	2b04      	cmp	r3, #4
 800a33e:	dc0f      	bgt.n	800a360 <__ssvfiscanf_r+0x2b8>
 800a340:	466b      	mov	r3, sp
 800a342:	4622      	mov	r2, r4
 800a344:	a941      	add	r1, sp, #260	@ 0x104
 800a346:	4630      	mov	r0, r6
 800a348:	f000 faac 	bl	800a8a4 <_scanf_i>
 800a34c:	e7b4      	b.n	800a2b8 <__ssvfiscanf_r+0x210>
 800a34e:	bf00      	nop
 800a350:	08009ff9 	.word	0x08009ff9
 800a354:	0800a06f 	.word	0x0800a06f
 800a358:	0800b167 	.word	0x0800b167
 800a35c:	0800b11e 	.word	0x0800b11e
 800a360:	4b0a      	ldr	r3, [pc, #40]	@ (800a38c <__ssvfiscanf_r+0x2e4>)
 800a362:	2b00      	cmp	r3, #0
 800a364:	f43f aec5 	beq.w	800a0f2 <__ssvfiscanf_r+0x4a>
 800a368:	466b      	mov	r3, sp
 800a36a:	4622      	mov	r2, r4
 800a36c:	a941      	add	r1, sp, #260	@ 0x104
 800a36e:	4630      	mov	r0, r6
 800a370:	f3af 8000 	nop.w
 800a374:	e7a0      	b.n	800a2b8 <__ssvfiscanf_r+0x210>
 800a376:	89a3      	ldrh	r3, [r4, #12]
 800a378:	065b      	lsls	r3, r3, #25
 800a37a:	f53f af71 	bmi.w	800a260 <__ssvfiscanf_r+0x1b8>
 800a37e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a386:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a388:	e7f9      	b.n	800a37e <__ssvfiscanf_r+0x2d6>
 800a38a:	bf00      	nop
 800a38c:	00000000 	.word	0x00000000

0800a390 <sbrk_aligned>:
 800a390:	b570      	push	{r4, r5, r6, lr}
 800a392:	4e0f      	ldr	r6, [pc, #60]	@ (800a3d0 <sbrk_aligned+0x40>)
 800a394:	460c      	mov	r4, r1
 800a396:	6831      	ldr	r1, [r6, #0]
 800a398:	4605      	mov	r5, r0
 800a39a:	b911      	cbnz	r1, 800a3a2 <sbrk_aligned+0x12>
 800a39c:	f000 fd2a 	bl	800adf4 <_sbrk_r>
 800a3a0:	6030      	str	r0, [r6, #0]
 800a3a2:	4621      	mov	r1, r4
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	f000 fd25 	bl	800adf4 <_sbrk_r>
 800a3aa:	1c43      	adds	r3, r0, #1
 800a3ac:	d103      	bne.n	800a3b6 <sbrk_aligned+0x26>
 800a3ae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	bd70      	pop	{r4, r5, r6, pc}
 800a3b6:	1cc4      	adds	r4, r0, #3
 800a3b8:	f024 0403 	bic.w	r4, r4, #3
 800a3bc:	42a0      	cmp	r0, r4
 800a3be:	d0f8      	beq.n	800a3b2 <sbrk_aligned+0x22>
 800a3c0:	1a21      	subs	r1, r4, r0
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	f000 fd16 	bl	800adf4 <_sbrk_r>
 800a3c8:	3001      	adds	r0, #1
 800a3ca:	d1f2      	bne.n	800a3b2 <sbrk_aligned+0x22>
 800a3cc:	e7ef      	b.n	800a3ae <sbrk_aligned+0x1e>
 800a3ce:	bf00      	nop
 800a3d0:	20000928 	.word	0x20000928

0800a3d4 <_malloc_r>:
 800a3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3d8:	1ccd      	adds	r5, r1, #3
 800a3da:	f025 0503 	bic.w	r5, r5, #3
 800a3de:	3508      	adds	r5, #8
 800a3e0:	2d0c      	cmp	r5, #12
 800a3e2:	bf38      	it	cc
 800a3e4:	250c      	movcc	r5, #12
 800a3e6:	2d00      	cmp	r5, #0
 800a3e8:	4606      	mov	r6, r0
 800a3ea:	db01      	blt.n	800a3f0 <_malloc_r+0x1c>
 800a3ec:	42a9      	cmp	r1, r5
 800a3ee:	d904      	bls.n	800a3fa <_malloc_r+0x26>
 800a3f0:	230c      	movs	r3, #12
 800a3f2:	6033      	str	r3, [r6, #0]
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a4d0 <_malloc_r+0xfc>
 800a3fe:	f000 fb7f 	bl	800ab00 <__malloc_lock>
 800a402:	f8d8 3000 	ldr.w	r3, [r8]
 800a406:	461c      	mov	r4, r3
 800a408:	bb44      	cbnz	r4, 800a45c <_malloc_r+0x88>
 800a40a:	4629      	mov	r1, r5
 800a40c:	4630      	mov	r0, r6
 800a40e:	f7ff ffbf 	bl	800a390 <sbrk_aligned>
 800a412:	1c43      	adds	r3, r0, #1
 800a414:	4604      	mov	r4, r0
 800a416:	d158      	bne.n	800a4ca <_malloc_r+0xf6>
 800a418:	f8d8 4000 	ldr.w	r4, [r8]
 800a41c:	4627      	mov	r7, r4
 800a41e:	2f00      	cmp	r7, #0
 800a420:	d143      	bne.n	800a4aa <_malloc_r+0xd6>
 800a422:	2c00      	cmp	r4, #0
 800a424:	d04b      	beq.n	800a4be <_malloc_r+0xea>
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	4639      	mov	r1, r7
 800a42a:	4630      	mov	r0, r6
 800a42c:	eb04 0903 	add.w	r9, r4, r3
 800a430:	f000 fce0 	bl	800adf4 <_sbrk_r>
 800a434:	4581      	cmp	r9, r0
 800a436:	d142      	bne.n	800a4be <_malloc_r+0xea>
 800a438:	6821      	ldr	r1, [r4, #0]
 800a43a:	1a6d      	subs	r5, r5, r1
 800a43c:	4629      	mov	r1, r5
 800a43e:	4630      	mov	r0, r6
 800a440:	f7ff ffa6 	bl	800a390 <sbrk_aligned>
 800a444:	3001      	adds	r0, #1
 800a446:	d03a      	beq.n	800a4be <_malloc_r+0xea>
 800a448:	6823      	ldr	r3, [r4, #0]
 800a44a:	442b      	add	r3, r5
 800a44c:	6023      	str	r3, [r4, #0]
 800a44e:	f8d8 3000 	ldr.w	r3, [r8]
 800a452:	685a      	ldr	r2, [r3, #4]
 800a454:	bb62      	cbnz	r2, 800a4b0 <_malloc_r+0xdc>
 800a456:	f8c8 7000 	str.w	r7, [r8]
 800a45a:	e00f      	b.n	800a47c <_malloc_r+0xa8>
 800a45c:	6822      	ldr	r2, [r4, #0]
 800a45e:	1b52      	subs	r2, r2, r5
 800a460:	d420      	bmi.n	800a4a4 <_malloc_r+0xd0>
 800a462:	2a0b      	cmp	r2, #11
 800a464:	d917      	bls.n	800a496 <_malloc_r+0xc2>
 800a466:	1961      	adds	r1, r4, r5
 800a468:	42a3      	cmp	r3, r4
 800a46a:	6025      	str	r5, [r4, #0]
 800a46c:	bf18      	it	ne
 800a46e:	6059      	strne	r1, [r3, #4]
 800a470:	6863      	ldr	r3, [r4, #4]
 800a472:	bf08      	it	eq
 800a474:	f8c8 1000 	streq.w	r1, [r8]
 800a478:	5162      	str	r2, [r4, r5]
 800a47a:	604b      	str	r3, [r1, #4]
 800a47c:	4630      	mov	r0, r6
 800a47e:	f000 fb45 	bl	800ab0c <__malloc_unlock>
 800a482:	f104 000b 	add.w	r0, r4, #11
 800a486:	1d23      	adds	r3, r4, #4
 800a488:	f020 0007 	bic.w	r0, r0, #7
 800a48c:	1ac2      	subs	r2, r0, r3
 800a48e:	bf1c      	itt	ne
 800a490:	1a1b      	subne	r3, r3, r0
 800a492:	50a3      	strne	r3, [r4, r2]
 800a494:	e7af      	b.n	800a3f6 <_malloc_r+0x22>
 800a496:	6862      	ldr	r2, [r4, #4]
 800a498:	42a3      	cmp	r3, r4
 800a49a:	bf0c      	ite	eq
 800a49c:	f8c8 2000 	streq.w	r2, [r8]
 800a4a0:	605a      	strne	r2, [r3, #4]
 800a4a2:	e7eb      	b.n	800a47c <_malloc_r+0xa8>
 800a4a4:	4623      	mov	r3, r4
 800a4a6:	6864      	ldr	r4, [r4, #4]
 800a4a8:	e7ae      	b.n	800a408 <_malloc_r+0x34>
 800a4aa:	463c      	mov	r4, r7
 800a4ac:	687f      	ldr	r7, [r7, #4]
 800a4ae:	e7b6      	b.n	800a41e <_malloc_r+0x4a>
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	42a3      	cmp	r3, r4
 800a4b6:	d1fb      	bne.n	800a4b0 <_malloc_r+0xdc>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	6053      	str	r3, [r2, #4]
 800a4bc:	e7de      	b.n	800a47c <_malloc_r+0xa8>
 800a4be:	230c      	movs	r3, #12
 800a4c0:	6033      	str	r3, [r6, #0]
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	f000 fb22 	bl	800ab0c <__malloc_unlock>
 800a4c8:	e794      	b.n	800a3f4 <_malloc_r+0x20>
 800a4ca:	6005      	str	r5, [r0, #0]
 800a4cc:	e7d6      	b.n	800a47c <_malloc_r+0xa8>
 800a4ce:	bf00      	nop
 800a4d0:	2000092c 	.word	0x2000092c

0800a4d4 <_printf_common>:
 800a4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4d8:	4616      	mov	r6, r2
 800a4da:	4698      	mov	r8, r3
 800a4dc:	688a      	ldr	r2, [r1, #8]
 800a4de:	690b      	ldr	r3, [r1, #16]
 800a4e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	bfb8      	it	lt
 800a4e8:	4613      	movlt	r3, r2
 800a4ea:	6033      	str	r3, [r6, #0]
 800a4ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a4f0:	4607      	mov	r7, r0
 800a4f2:	460c      	mov	r4, r1
 800a4f4:	b10a      	cbz	r2, 800a4fa <_printf_common+0x26>
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	6033      	str	r3, [r6, #0]
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	0699      	lsls	r1, r3, #26
 800a4fe:	bf42      	ittt	mi
 800a500:	6833      	ldrmi	r3, [r6, #0]
 800a502:	3302      	addmi	r3, #2
 800a504:	6033      	strmi	r3, [r6, #0]
 800a506:	6825      	ldr	r5, [r4, #0]
 800a508:	f015 0506 	ands.w	r5, r5, #6
 800a50c:	d106      	bne.n	800a51c <_printf_common+0x48>
 800a50e:	f104 0a19 	add.w	sl, r4, #25
 800a512:	68e3      	ldr	r3, [r4, #12]
 800a514:	6832      	ldr	r2, [r6, #0]
 800a516:	1a9b      	subs	r3, r3, r2
 800a518:	42ab      	cmp	r3, r5
 800a51a:	dc26      	bgt.n	800a56a <_printf_common+0x96>
 800a51c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a520:	6822      	ldr	r2, [r4, #0]
 800a522:	3b00      	subs	r3, #0
 800a524:	bf18      	it	ne
 800a526:	2301      	movne	r3, #1
 800a528:	0692      	lsls	r2, r2, #26
 800a52a:	d42b      	bmi.n	800a584 <_printf_common+0xb0>
 800a52c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a530:	4641      	mov	r1, r8
 800a532:	4638      	mov	r0, r7
 800a534:	47c8      	blx	r9
 800a536:	3001      	adds	r0, #1
 800a538:	d01e      	beq.n	800a578 <_printf_common+0xa4>
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	6922      	ldr	r2, [r4, #16]
 800a53e:	f003 0306 	and.w	r3, r3, #6
 800a542:	2b04      	cmp	r3, #4
 800a544:	bf02      	ittt	eq
 800a546:	68e5      	ldreq	r5, [r4, #12]
 800a548:	6833      	ldreq	r3, [r6, #0]
 800a54a:	1aed      	subeq	r5, r5, r3
 800a54c:	68a3      	ldr	r3, [r4, #8]
 800a54e:	bf0c      	ite	eq
 800a550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a554:	2500      	movne	r5, #0
 800a556:	4293      	cmp	r3, r2
 800a558:	bfc4      	itt	gt
 800a55a:	1a9b      	subgt	r3, r3, r2
 800a55c:	18ed      	addgt	r5, r5, r3
 800a55e:	2600      	movs	r6, #0
 800a560:	341a      	adds	r4, #26
 800a562:	42b5      	cmp	r5, r6
 800a564:	d11a      	bne.n	800a59c <_printf_common+0xc8>
 800a566:	2000      	movs	r0, #0
 800a568:	e008      	b.n	800a57c <_printf_common+0xa8>
 800a56a:	2301      	movs	r3, #1
 800a56c:	4652      	mov	r2, sl
 800a56e:	4641      	mov	r1, r8
 800a570:	4638      	mov	r0, r7
 800a572:	47c8      	blx	r9
 800a574:	3001      	adds	r0, #1
 800a576:	d103      	bne.n	800a580 <_printf_common+0xac>
 800a578:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a580:	3501      	adds	r5, #1
 800a582:	e7c6      	b.n	800a512 <_printf_common+0x3e>
 800a584:	18e1      	adds	r1, r4, r3
 800a586:	1c5a      	adds	r2, r3, #1
 800a588:	2030      	movs	r0, #48	@ 0x30
 800a58a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a58e:	4422      	add	r2, r4
 800a590:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a594:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a598:	3302      	adds	r3, #2
 800a59a:	e7c7      	b.n	800a52c <_printf_common+0x58>
 800a59c:	2301      	movs	r3, #1
 800a59e:	4622      	mov	r2, r4
 800a5a0:	4641      	mov	r1, r8
 800a5a2:	4638      	mov	r0, r7
 800a5a4:	47c8      	blx	r9
 800a5a6:	3001      	adds	r0, #1
 800a5a8:	d0e6      	beq.n	800a578 <_printf_common+0xa4>
 800a5aa:	3601      	adds	r6, #1
 800a5ac:	e7d9      	b.n	800a562 <_printf_common+0x8e>
	...

0800a5b0 <_printf_i>:
 800a5b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b4:	7e0f      	ldrb	r7, [r1, #24]
 800a5b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5b8:	2f78      	cmp	r7, #120	@ 0x78
 800a5ba:	4691      	mov	r9, r2
 800a5bc:	4680      	mov	r8, r0
 800a5be:	460c      	mov	r4, r1
 800a5c0:	469a      	mov	sl, r3
 800a5c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5c6:	d807      	bhi.n	800a5d8 <_printf_i+0x28>
 800a5c8:	2f62      	cmp	r7, #98	@ 0x62
 800a5ca:	d80a      	bhi.n	800a5e2 <_printf_i+0x32>
 800a5cc:	2f00      	cmp	r7, #0
 800a5ce:	f000 80d2 	beq.w	800a776 <_printf_i+0x1c6>
 800a5d2:	2f58      	cmp	r7, #88	@ 0x58
 800a5d4:	f000 80b9 	beq.w	800a74a <_printf_i+0x19a>
 800a5d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a5e0:	e03a      	b.n	800a658 <_printf_i+0xa8>
 800a5e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a5e6:	2b15      	cmp	r3, #21
 800a5e8:	d8f6      	bhi.n	800a5d8 <_printf_i+0x28>
 800a5ea:	a101      	add	r1, pc, #4	@ (adr r1, 800a5f0 <_printf_i+0x40>)
 800a5ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5f0:	0800a649 	.word	0x0800a649
 800a5f4:	0800a65d 	.word	0x0800a65d
 800a5f8:	0800a5d9 	.word	0x0800a5d9
 800a5fc:	0800a5d9 	.word	0x0800a5d9
 800a600:	0800a5d9 	.word	0x0800a5d9
 800a604:	0800a5d9 	.word	0x0800a5d9
 800a608:	0800a65d 	.word	0x0800a65d
 800a60c:	0800a5d9 	.word	0x0800a5d9
 800a610:	0800a5d9 	.word	0x0800a5d9
 800a614:	0800a5d9 	.word	0x0800a5d9
 800a618:	0800a5d9 	.word	0x0800a5d9
 800a61c:	0800a75d 	.word	0x0800a75d
 800a620:	0800a687 	.word	0x0800a687
 800a624:	0800a717 	.word	0x0800a717
 800a628:	0800a5d9 	.word	0x0800a5d9
 800a62c:	0800a5d9 	.word	0x0800a5d9
 800a630:	0800a77f 	.word	0x0800a77f
 800a634:	0800a5d9 	.word	0x0800a5d9
 800a638:	0800a687 	.word	0x0800a687
 800a63c:	0800a5d9 	.word	0x0800a5d9
 800a640:	0800a5d9 	.word	0x0800a5d9
 800a644:	0800a71f 	.word	0x0800a71f
 800a648:	6833      	ldr	r3, [r6, #0]
 800a64a:	1d1a      	adds	r2, r3, #4
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	6032      	str	r2, [r6, #0]
 800a650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a654:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a658:	2301      	movs	r3, #1
 800a65a:	e09d      	b.n	800a798 <_printf_i+0x1e8>
 800a65c:	6833      	ldr	r3, [r6, #0]
 800a65e:	6820      	ldr	r0, [r4, #0]
 800a660:	1d19      	adds	r1, r3, #4
 800a662:	6031      	str	r1, [r6, #0]
 800a664:	0606      	lsls	r6, r0, #24
 800a666:	d501      	bpl.n	800a66c <_printf_i+0xbc>
 800a668:	681d      	ldr	r5, [r3, #0]
 800a66a:	e003      	b.n	800a674 <_printf_i+0xc4>
 800a66c:	0645      	lsls	r5, r0, #25
 800a66e:	d5fb      	bpl.n	800a668 <_printf_i+0xb8>
 800a670:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a674:	2d00      	cmp	r5, #0
 800a676:	da03      	bge.n	800a680 <_printf_i+0xd0>
 800a678:	232d      	movs	r3, #45	@ 0x2d
 800a67a:	426d      	negs	r5, r5
 800a67c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a680:	4859      	ldr	r0, [pc, #356]	@ (800a7e8 <_printf_i+0x238>)
 800a682:	230a      	movs	r3, #10
 800a684:	e011      	b.n	800a6aa <_printf_i+0xfa>
 800a686:	6821      	ldr	r1, [r4, #0]
 800a688:	6833      	ldr	r3, [r6, #0]
 800a68a:	0608      	lsls	r0, r1, #24
 800a68c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a690:	d402      	bmi.n	800a698 <_printf_i+0xe8>
 800a692:	0649      	lsls	r1, r1, #25
 800a694:	bf48      	it	mi
 800a696:	b2ad      	uxthmi	r5, r5
 800a698:	2f6f      	cmp	r7, #111	@ 0x6f
 800a69a:	4853      	ldr	r0, [pc, #332]	@ (800a7e8 <_printf_i+0x238>)
 800a69c:	6033      	str	r3, [r6, #0]
 800a69e:	bf14      	ite	ne
 800a6a0:	230a      	movne	r3, #10
 800a6a2:	2308      	moveq	r3, #8
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6aa:	6866      	ldr	r6, [r4, #4]
 800a6ac:	60a6      	str	r6, [r4, #8]
 800a6ae:	2e00      	cmp	r6, #0
 800a6b0:	bfa2      	ittt	ge
 800a6b2:	6821      	ldrge	r1, [r4, #0]
 800a6b4:	f021 0104 	bicge.w	r1, r1, #4
 800a6b8:	6021      	strge	r1, [r4, #0]
 800a6ba:	b90d      	cbnz	r5, 800a6c0 <_printf_i+0x110>
 800a6bc:	2e00      	cmp	r6, #0
 800a6be:	d04b      	beq.n	800a758 <_printf_i+0x1a8>
 800a6c0:	4616      	mov	r6, r2
 800a6c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6c6:	fb03 5711 	mls	r7, r3, r1, r5
 800a6ca:	5dc7      	ldrb	r7, [r0, r7]
 800a6cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6d0:	462f      	mov	r7, r5
 800a6d2:	42bb      	cmp	r3, r7
 800a6d4:	460d      	mov	r5, r1
 800a6d6:	d9f4      	bls.n	800a6c2 <_printf_i+0x112>
 800a6d8:	2b08      	cmp	r3, #8
 800a6da:	d10b      	bne.n	800a6f4 <_printf_i+0x144>
 800a6dc:	6823      	ldr	r3, [r4, #0]
 800a6de:	07df      	lsls	r7, r3, #31
 800a6e0:	d508      	bpl.n	800a6f4 <_printf_i+0x144>
 800a6e2:	6923      	ldr	r3, [r4, #16]
 800a6e4:	6861      	ldr	r1, [r4, #4]
 800a6e6:	4299      	cmp	r1, r3
 800a6e8:	bfde      	ittt	le
 800a6ea:	2330      	movle	r3, #48	@ 0x30
 800a6ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a6f0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a6f4:	1b92      	subs	r2, r2, r6
 800a6f6:	6122      	str	r2, [r4, #16]
 800a6f8:	f8cd a000 	str.w	sl, [sp]
 800a6fc:	464b      	mov	r3, r9
 800a6fe:	aa03      	add	r2, sp, #12
 800a700:	4621      	mov	r1, r4
 800a702:	4640      	mov	r0, r8
 800a704:	f7ff fee6 	bl	800a4d4 <_printf_common>
 800a708:	3001      	adds	r0, #1
 800a70a:	d14a      	bne.n	800a7a2 <_printf_i+0x1f2>
 800a70c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a710:	b004      	add	sp, #16
 800a712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a716:	6823      	ldr	r3, [r4, #0]
 800a718:	f043 0320 	orr.w	r3, r3, #32
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	4833      	ldr	r0, [pc, #204]	@ (800a7ec <_printf_i+0x23c>)
 800a720:	2778      	movs	r7, #120	@ 0x78
 800a722:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	6831      	ldr	r1, [r6, #0]
 800a72a:	061f      	lsls	r7, r3, #24
 800a72c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a730:	d402      	bmi.n	800a738 <_printf_i+0x188>
 800a732:	065f      	lsls	r7, r3, #25
 800a734:	bf48      	it	mi
 800a736:	b2ad      	uxthmi	r5, r5
 800a738:	6031      	str	r1, [r6, #0]
 800a73a:	07d9      	lsls	r1, r3, #31
 800a73c:	bf44      	itt	mi
 800a73e:	f043 0320 	orrmi.w	r3, r3, #32
 800a742:	6023      	strmi	r3, [r4, #0]
 800a744:	b11d      	cbz	r5, 800a74e <_printf_i+0x19e>
 800a746:	2310      	movs	r3, #16
 800a748:	e7ac      	b.n	800a6a4 <_printf_i+0xf4>
 800a74a:	4827      	ldr	r0, [pc, #156]	@ (800a7e8 <_printf_i+0x238>)
 800a74c:	e7e9      	b.n	800a722 <_printf_i+0x172>
 800a74e:	6823      	ldr	r3, [r4, #0]
 800a750:	f023 0320 	bic.w	r3, r3, #32
 800a754:	6023      	str	r3, [r4, #0]
 800a756:	e7f6      	b.n	800a746 <_printf_i+0x196>
 800a758:	4616      	mov	r6, r2
 800a75a:	e7bd      	b.n	800a6d8 <_printf_i+0x128>
 800a75c:	6833      	ldr	r3, [r6, #0]
 800a75e:	6825      	ldr	r5, [r4, #0]
 800a760:	6961      	ldr	r1, [r4, #20]
 800a762:	1d18      	adds	r0, r3, #4
 800a764:	6030      	str	r0, [r6, #0]
 800a766:	062e      	lsls	r6, r5, #24
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	d501      	bpl.n	800a770 <_printf_i+0x1c0>
 800a76c:	6019      	str	r1, [r3, #0]
 800a76e:	e002      	b.n	800a776 <_printf_i+0x1c6>
 800a770:	0668      	lsls	r0, r5, #25
 800a772:	d5fb      	bpl.n	800a76c <_printf_i+0x1bc>
 800a774:	8019      	strh	r1, [r3, #0]
 800a776:	2300      	movs	r3, #0
 800a778:	6123      	str	r3, [r4, #16]
 800a77a:	4616      	mov	r6, r2
 800a77c:	e7bc      	b.n	800a6f8 <_printf_i+0x148>
 800a77e:	6833      	ldr	r3, [r6, #0]
 800a780:	1d1a      	adds	r2, r3, #4
 800a782:	6032      	str	r2, [r6, #0]
 800a784:	681e      	ldr	r6, [r3, #0]
 800a786:	6862      	ldr	r2, [r4, #4]
 800a788:	2100      	movs	r1, #0
 800a78a:	4630      	mov	r0, r6
 800a78c:	f7f5 fd00 	bl	8000190 <memchr>
 800a790:	b108      	cbz	r0, 800a796 <_printf_i+0x1e6>
 800a792:	1b80      	subs	r0, r0, r6
 800a794:	6060      	str	r0, [r4, #4]
 800a796:	6863      	ldr	r3, [r4, #4]
 800a798:	6123      	str	r3, [r4, #16]
 800a79a:	2300      	movs	r3, #0
 800a79c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7a0:	e7aa      	b.n	800a6f8 <_printf_i+0x148>
 800a7a2:	6923      	ldr	r3, [r4, #16]
 800a7a4:	4632      	mov	r2, r6
 800a7a6:	4649      	mov	r1, r9
 800a7a8:	4640      	mov	r0, r8
 800a7aa:	47d0      	blx	sl
 800a7ac:	3001      	adds	r0, #1
 800a7ae:	d0ad      	beq.n	800a70c <_printf_i+0x15c>
 800a7b0:	6823      	ldr	r3, [r4, #0]
 800a7b2:	079b      	lsls	r3, r3, #30
 800a7b4:	d413      	bmi.n	800a7de <_printf_i+0x22e>
 800a7b6:	68e0      	ldr	r0, [r4, #12]
 800a7b8:	9b03      	ldr	r3, [sp, #12]
 800a7ba:	4298      	cmp	r0, r3
 800a7bc:	bfb8      	it	lt
 800a7be:	4618      	movlt	r0, r3
 800a7c0:	e7a6      	b.n	800a710 <_printf_i+0x160>
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	4632      	mov	r2, r6
 800a7c6:	4649      	mov	r1, r9
 800a7c8:	4640      	mov	r0, r8
 800a7ca:	47d0      	blx	sl
 800a7cc:	3001      	adds	r0, #1
 800a7ce:	d09d      	beq.n	800a70c <_printf_i+0x15c>
 800a7d0:	3501      	adds	r5, #1
 800a7d2:	68e3      	ldr	r3, [r4, #12]
 800a7d4:	9903      	ldr	r1, [sp, #12]
 800a7d6:	1a5b      	subs	r3, r3, r1
 800a7d8:	42ab      	cmp	r3, r5
 800a7da:	dcf2      	bgt.n	800a7c2 <_printf_i+0x212>
 800a7dc:	e7eb      	b.n	800a7b6 <_printf_i+0x206>
 800a7de:	2500      	movs	r5, #0
 800a7e0:	f104 0619 	add.w	r6, r4, #25
 800a7e4:	e7f5      	b.n	800a7d2 <_printf_i+0x222>
 800a7e6:	bf00      	nop
 800a7e8:	0800b129 	.word	0x0800b129
 800a7ec:	0800b13a 	.word	0x0800b13a

0800a7f0 <_scanf_chars>:
 800a7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7f4:	4615      	mov	r5, r2
 800a7f6:	688a      	ldr	r2, [r1, #8]
 800a7f8:	4680      	mov	r8, r0
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	b932      	cbnz	r2, 800a80c <_scanf_chars+0x1c>
 800a7fe:	698a      	ldr	r2, [r1, #24]
 800a800:	2a00      	cmp	r2, #0
 800a802:	bf14      	ite	ne
 800a804:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800a808:	2201      	moveq	r2, #1
 800a80a:	608a      	str	r2, [r1, #8]
 800a80c:	6822      	ldr	r2, [r4, #0]
 800a80e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a8a0 <_scanf_chars+0xb0>
 800a812:	06d1      	lsls	r1, r2, #27
 800a814:	bf5f      	itttt	pl
 800a816:	681a      	ldrpl	r2, [r3, #0]
 800a818:	1d11      	addpl	r1, r2, #4
 800a81a:	6019      	strpl	r1, [r3, #0]
 800a81c:	6816      	ldrpl	r6, [r2, #0]
 800a81e:	2700      	movs	r7, #0
 800a820:	69a0      	ldr	r0, [r4, #24]
 800a822:	b188      	cbz	r0, 800a848 <_scanf_chars+0x58>
 800a824:	2801      	cmp	r0, #1
 800a826:	d107      	bne.n	800a838 <_scanf_chars+0x48>
 800a828:	682b      	ldr	r3, [r5, #0]
 800a82a:	781a      	ldrb	r2, [r3, #0]
 800a82c:	6963      	ldr	r3, [r4, #20]
 800a82e:	5c9b      	ldrb	r3, [r3, r2]
 800a830:	b953      	cbnz	r3, 800a848 <_scanf_chars+0x58>
 800a832:	2f00      	cmp	r7, #0
 800a834:	d031      	beq.n	800a89a <_scanf_chars+0xaa>
 800a836:	e022      	b.n	800a87e <_scanf_chars+0x8e>
 800a838:	2802      	cmp	r0, #2
 800a83a:	d120      	bne.n	800a87e <_scanf_chars+0x8e>
 800a83c:	682b      	ldr	r3, [r5, #0]
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a844:	071b      	lsls	r3, r3, #28
 800a846:	d41a      	bmi.n	800a87e <_scanf_chars+0x8e>
 800a848:	6823      	ldr	r3, [r4, #0]
 800a84a:	06da      	lsls	r2, r3, #27
 800a84c:	bf5e      	ittt	pl
 800a84e:	682b      	ldrpl	r3, [r5, #0]
 800a850:	781b      	ldrbpl	r3, [r3, #0]
 800a852:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a856:	682a      	ldr	r2, [r5, #0]
 800a858:	686b      	ldr	r3, [r5, #4]
 800a85a:	3201      	adds	r2, #1
 800a85c:	602a      	str	r2, [r5, #0]
 800a85e:	68a2      	ldr	r2, [r4, #8]
 800a860:	3b01      	subs	r3, #1
 800a862:	3a01      	subs	r2, #1
 800a864:	606b      	str	r3, [r5, #4]
 800a866:	3701      	adds	r7, #1
 800a868:	60a2      	str	r2, [r4, #8]
 800a86a:	b142      	cbz	r2, 800a87e <_scanf_chars+0x8e>
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	dcd7      	bgt.n	800a820 <_scanf_chars+0x30>
 800a870:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a874:	4629      	mov	r1, r5
 800a876:	4640      	mov	r0, r8
 800a878:	4798      	blx	r3
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d0d0      	beq.n	800a820 <_scanf_chars+0x30>
 800a87e:	6823      	ldr	r3, [r4, #0]
 800a880:	f013 0310 	ands.w	r3, r3, #16
 800a884:	d105      	bne.n	800a892 <_scanf_chars+0xa2>
 800a886:	68e2      	ldr	r2, [r4, #12]
 800a888:	3201      	adds	r2, #1
 800a88a:	60e2      	str	r2, [r4, #12]
 800a88c:	69a2      	ldr	r2, [r4, #24]
 800a88e:	b102      	cbz	r2, 800a892 <_scanf_chars+0xa2>
 800a890:	7033      	strb	r3, [r6, #0]
 800a892:	6923      	ldr	r3, [r4, #16]
 800a894:	443b      	add	r3, r7
 800a896:	6123      	str	r3, [r4, #16]
 800a898:	2000      	movs	r0, #0
 800a89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a89e:	bf00      	nop
 800a8a0:	0800b167 	.word	0x0800b167

0800a8a4 <_scanf_i>:
 800a8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a8:	4698      	mov	r8, r3
 800a8aa:	4b74      	ldr	r3, [pc, #464]	@ (800aa7c <_scanf_i+0x1d8>)
 800a8ac:	460c      	mov	r4, r1
 800a8ae:	4682      	mov	sl, r0
 800a8b0:	4616      	mov	r6, r2
 800a8b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a8b6:	b087      	sub	sp, #28
 800a8b8:	ab03      	add	r3, sp, #12
 800a8ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a8be:	4b70      	ldr	r3, [pc, #448]	@ (800aa80 <_scanf_i+0x1dc>)
 800a8c0:	69a1      	ldr	r1, [r4, #24]
 800a8c2:	4a70      	ldr	r2, [pc, #448]	@ (800aa84 <_scanf_i+0x1e0>)
 800a8c4:	2903      	cmp	r1, #3
 800a8c6:	bf08      	it	eq
 800a8c8:	461a      	moveq	r2, r3
 800a8ca:	68a3      	ldr	r3, [r4, #8]
 800a8cc:	9201      	str	r2, [sp, #4]
 800a8ce:	1e5a      	subs	r2, r3, #1
 800a8d0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a8d4:	bf88      	it	hi
 800a8d6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a8da:	4627      	mov	r7, r4
 800a8dc:	bf82      	ittt	hi
 800a8de:	eb03 0905 	addhi.w	r9, r3, r5
 800a8e2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a8e6:	60a3      	strhi	r3, [r4, #8]
 800a8e8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a8ec:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a8f0:	bf98      	it	ls
 800a8f2:	f04f 0900 	movls.w	r9, #0
 800a8f6:	6023      	str	r3, [r4, #0]
 800a8f8:	463d      	mov	r5, r7
 800a8fa:	f04f 0b00 	mov.w	fp, #0
 800a8fe:	6831      	ldr	r1, [r6, #0]
 800a900:	ab03      	add	r3, sp, #12
 800a902:	7809      	ldrb	r1, [r1, #0]
 800a904:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a908:	2202      	movs	r2, #2
 800a90a:	f7f5 fc41 	bl	8000190 <memchr>
 800a90e:	b328      	cbz	r0, 800a95c <_scanf_i+0xb8>
 800a910:	f1bb 0f01 	cmp.w	fp, #1
 800a914:	d159      	bne.n	800a9ca <_scanf_i+0x126>
 800a916:	6862      	ldr	r2, [r4, #4]
 800a918:	b92a      	cbnz	r2, 800a926 <_scanf_i+0x82>
 800a91a:	6822      	ldr	r2, [r4, #0]
 800a91c:	2108      	movs	r1, #8
 800a91e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a922:	6061      	str	r1, [r4, #4]
 800a924:	6022      	str	r2, [r4, #0]
 800a926:	6822      	ldr	r2, [r4, #0]
 800a928:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a92c:	6022      	str	r2, [r4, #0]
 800a92e:	68a2      	ldr	r2, [r4, #8]
 800a930:	1e51      	subs	r1, r2, #1
 800a932:	60a1      	str	r1, [r4, #8]
 800a934:	b192      	cbz	r2, 800a95c <_scanf_i+0xb8>
 800a936:	6832      	ldr	r2, [r6, #0]
 800a938:	1c51      	adds	r1, r2, #1
 800a93a:	6031      	str	r1, [r6, #0]
 800a93c:	7812      	ldrb	r2, [r2, #0]
 800a93e:	f805 2b01 	strb.w	r2, [r5], #1
 800a942:	6872      	ldr	r2, [r6, #4]
 800a944:	3a01      	subs	r2, #1
 800a946:	2a00      	cmp	r2, #0
 800a948:	6072      	str	r2, [r6, #4]
 800a94a:	dc07      	bgt.n	800a95c <_scanf_i+0xb8>
 800a94c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a950:	4631      	mov	r1, r6
 800a952:	4650      	mov	r0, sl
 800a954:	4790      	blx	r2
 800a956:	2800      	cmp	r0, #0
 800a958:	f040 8085 	bne.w	800aa66 <_scanf_i+0x1c2>
 800a95c:	f10b 0b01 	add.w	fp, fp, #1
 800a960:	f1bb 0f03 	cmp.w	fp, #3
 800a964:	d1cb      	bne.n	800a8fe <_scanf_i+0x5a>
 800a966:	6863      	ldr	r3, [r4, #4]
 800a968:	b90b      	cbnz	r3, 800a96e <_scanf_i+0xca>
 800a96a:	230a      	movs	r3, #10
 800a96c:	6063      	str	r3, [r4, #4]
 800a96e:	6863      	ldr	r3, [r4, #4]
 800a970:	4945      	ldr	r1, [pc, #276]	@ (800aa88 <_scanf_i+0x1e4>)
 800a972:	6960      	ldr	r0, [r4, #20]
 800a974:	1ac9      	subs	r1, r1, r3
 800a976:	f000 f889 	bl	800aa8c <__sccl>
 800a97a:	f04f 0b00 	mov.w	fp, #0
 800a97e:	68a3      	ldr	r3, [r4, #8]
 800a980:	6822      	ldr	r2, [r4, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d03d      	beq.n	800aa02 <_scanf_i+0x15e>
 800a986:	6831      	ldr	r1, [r6, #0]
 800a988:	6960      	ldr	r0, [r4, #20]
 800a98a:	f891 c000 	ldrb.w	ip, [r1]
 800a98e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a992:	2800      	cmp	r0, #0
 800a994:	d035      	beq.n	800aa02 <_scanf_i+0x15e>
 800a996:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a99a:	d124      	bne.n	800a9e6 <_scanf_i+0x142>
 800a99c:	0510      	lsls	r0, r2, #20
 800a99e:	d522      	bpl.n	800a9e6 <_scanf_i+0x142>
 800a9a0:	f10b 0b01 	add.w	fp, fp, #1
 800a9a4:	f1b9 0f00 	cmp.w	r9, #0
 800a9a8:	d003      	beq.n	800a9b2 <_scanf_i+0x10e>
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800a9b0:	60a3      	str	r3, [r4, #8]
 800a9b2:	6873      	ldr	r3, [r6, #4]
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	6073      	str	r3, [r6, #4]
 800a9ba:	dd1b      	ble.n	800a9f4 <_scanf_i+0x150>
 800a9bc:	6833      	ldr	r3, [r6, #0]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	6033      	str	r3, [r6, #0]
 800a9c2:	68a3      	ldr	r3, [r4, #8]
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	60a3      	str	r3, [r4, #8]
 800a9c8:	e7d9      	b.n	800a97e <_scanf_i+0xda>
 800a9ca:	f1bb 0f02 	cmp.w	fp, #2
 800a9ce:	d1ae      	bne.n	800a92e <_scanf_i+0x8a>
 800a9d0:	6822      	ldr	r2, [r4, #0]
 800a9d2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a9d6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a9da:	d1bf      	bne.n	800a95c <_scanf_i+0xb8>
 800a9dc:	2110      	movs	r1, #16
 800a9de:	6061      	str	r1, [r4, #4]
 800a9e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a9e4:	e7a2      	b.n	800a92c <_scanf_i+0x88>
 800a9e6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a9ea:	6022      	str	r2, [r4, #0]
 800a9ec:	780b      	ldrb	r3, [r1, #0]
 800a9ee:	f805 3b01 	strb.w	r3, [r5], #1
 800a9f2:	e7de      	b.n	800a9b2 <_scanf_i+0x10e>
 800a9f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a9f8:	4631      	mov	r1, r6
 800a9fa:	4650      	mov	r0, sl
 800a9fc:	4798      	blx	r3
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	d0df      	beq.n	800a9c2 <_scanf_i+0x11e>
 800aa02:	6823      	ldr	r3, [r4, #0]
 800aa04:	05d9      	lsls	r1, r3, #23
 800aa06:	d50d      	bpl.n	800aa24 <_scanf_i+0x180>
 800aa08:	42bd      	cmp	r5, r7
 800aa0a:	d909      	bls.n	800aa20 <_scanf_i+0x17c>
 800aa0c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800aa10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa14:	4632      	mov	r2, r6
 800aa16:	4650      	mov	r0, sl
 800aa18:	4798      	blx	r3
 800aa1a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800aa1e:	464d      	mov	r5, r9
 800aa20:	42bd      	cmp	r5, r7
 800aa22:	d028      	beq.n	800aa76 <_scanf_i+0x1d2>
 800aa24:	6822      	ldr	r2, [r4, #0]
 800aa26:	f012 0210 	ands.w	r2, r2, #16
 800aa2a:	d113      	bne.n	800aa54 <_scanf_i+0x1b0>
 800aa2c:	702a      	strb	r2, [r5, #0]
 800aa2e:	6863      	ldr	r3, [r4, #4]
 800aa30:	9e01      	ldr	r6, [sp, #4]
 800aa32:	4639      	mov	r1, r7
 800aa34:	4650      	mov	r0, sl
 800aa36:	47b0      	blx	r6
 800aa38:	f8d8 3000 	ldr.w	r3, [r8]
 800aa3c:	6821      	ldr	r1, [r4, #0]
 800aa3e:	1d1a      	adds	r2, r3, #4
 800aa40:	f8c8 2000 	str.w	r2, [r8]
 800aa44:	f011 0f20 	tst.w	r1, #32
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	d00f      	beq.n	800aa6c <_scanf_i+0x1c8>
 800aa4c:	6018      	str	r0, [r3, #0]
 800aa4e:	68e3      	ldr	r3, [r4, #12]
 800aa50:	3301      	adds	r3, #1
 800aa52:	60e3      	str	r3, [r4, #12]
 800aa54:	6923      	ldr	r3, [r4, #16]
 800aa56:	1bed      	subs	r5, r5, r7
 800aa58:	445d      	add	r5, fp
 800aa5a:	442b      	add	r3, r5
 800aa5c:	6123      	str	r3, [r4, #16]
 800aa5e:	2000      	movs	r0, #0
 800aa60:	b007      	add	sp, #28
 800aa62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa66:	f04f 0b00 	mov.w	fp, #0
 800aa6a:	e7ca      	b.n	800aa02 <_scanf_i+0x15e>
 800aa6c:	07ca      	lsls	r2, r1, #31
 800aa6e:	bf4c      	ite	mi
 800aa70:	8018      	strhmi	r0, [r3, #0]
 800aa72:	6018      	strpl	r0, [r3, #0]
 800aa74:	e7eb      	b.n	800aa4e <_scanf_i+0x1aa>
 800aa76:	2001      	movs	r0, #1
 800aa78:	e7f2      	b.n	800aa60 <_scanf_i+0x1bc>
 800aa7a:	bf00      	nop
 800aa7c:	0800afbc 	.word	0x0800afbc
 800aa80:	0800acdd 	.word	0x0800acdd
 800aa84:	0800adbd 	.word	0x0800adbd
 800aa88:	0800b15b 	.word	0x0800b15b

0800aa8c <__sccl>:
 800aa8c:	b570      	push	{r4, r5, r6, lr}
 800aa8e:	780b      	ldrb	r3, [r1, #0]
 800aa90:	4604      	mov	r4, r0
 800aa92:	2b5e      	cmp	r3, #94	@ 0x5e
 800aa94:	bf0b      	itete	eq
 800aa96:	784b      	ldrbeq	r3, [r1, #1]
 800aa98:	1c4a      	addne	r2, r1, #1
 800aa9a:	1c8a      	addeq	r2, r1, #2
 800aa9c:	2100      	movne	r1, #0
 800aa9e:	bf08      	it	eq
 800aaa0:	2101      	moveq	r1, #1
 800aaa2:	3801      	subs	r0, #1
 800aaa4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800aaa8:	f800 1f01 	strb.w	r1, [r0, #1]!
 800aaac:	42a8      	cmp	r0, r5
 800aaae:	d1fb      	bne.n	800aaa8 <__sccl+0x1c>
 800aab0:	b90b      	cbnz	r3, 800aab6 <__sccl+0x2a>
 800aab2:	1e50      	subs	r0, r2, #1
 800aab4:	bd70      	pop	{r4, r5, r6, pc}
 800aab6:	f081 0101 	eor.w	r1, r1, #1
 800aaba:	54e1      	strb	r1, [r4, r3]
 800aabc:	4610      	mov	r0, r2
 800aabe:	4602      	mov	r2, r0
 800aac0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800aac4:	2d2d      	cmp	r5, #45	@ 0x2d
 800aac6:	d005      	beq.n	800aad4 <__sccl+0x48>
 800aac8:	2d5d      	cmp	r5, #93	@ 0x5d
 800aaca:	d016      	beq.n	800aafa <__sccl+0x6e>
 800aacc:	2d00      	cmp	r5, #0
 800aace:	d0f1      	beq.n	800aab4 <__sccl+0x28>
 800aad0:	462b      	mov	r3, r5
 800aad2:	e7f2      	b.n	800aaba <__sccl+0x2e>
 800aad4:	7846      	ldrb	r6, [r0, #1]
 800aad6:	2e5d      	cmp	r6, #93	@ 0x5d
 800aad8:	d0fa      	beq.n	800aad0 <__sccl+0x44>
 800aada:	42b3      	cmp	r3, r6
 800aadc:	dcf8      	bgt.n	800aad0 <__sccl+0x44>
 800aade:	3002      	adds	r0, #2
 800aae0:	461a      	mov	r2, r3
 800aae2:	3201      	adds	r2, #1
 800aae4:	4296      	cmp	r6, r2
 800aae6:	54a1      	strb	r1, [r4, r2]
 800aae8:	dcfb      	bgt.n	800aae2 <__sccl+0x56>
 800aaea:	1af2      	subs	r2, r6, r3
 800aaec:	3a01      	subs	r2, #1
 800aaee:	1c5d      	adds	r5, r3, #1
 800aaf0:	42b3      	cmp	r3, r6
 800aaf2:	bfa8      	it	ge
 800aaf4:	2200      	movge	r2, #0
 800aaf6:	18ab      	adds	r3, r5, r2
 800aaf8:	e7e1      	b.n	800aabe <__sccl+0x32>
 800aafa:	4610      	mov	r0, r2
 800aafc:	e7da      	b.n	800aab4 <__sccl+0x28>
	...

0800ab00 <__malloc_lock>:
 800ab00:	4801      	ldr	r0, [pc, #4]	@ (800ab08 <__malloc_lock+0x8>)
 800ab02:	f7ff b8d5 	b.w	8009cb0 <__retarget_lock_acquire_recursive>
 800ab06:	bf00      	nop
 800ab08:	20000924 	.word	0x20000924

0800ab0c <__malloc_unlock>:
 800ab0c:	4801      	ldr	r0, [pc, #4]	@ (800ab14 <__malloc_unlock+0x8>)
 800ab0e:	f7ff b8d0 	b.w	8009cb2 <__retarget_lock_release_recursive>
 800ab12:	bf00      	nop
 800ab14:	20000924 	.word	0x20000924

0800ab18 <__submore>:
 800ab18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab1c:	460c      	mov	r4, r1
 800ab1e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ab20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab24:	4299      	cmp	r1, r3
 800ab26:	d11d      	bne.n	800ab64 <__submore+0x4c>
 800ab28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ab2c:	f7ff fc52 	bl	800a3d4 <_malloc_r>
 800ab30:	b918      	cbnz	r0, 800ab3a <__submore+0x22>
 800ab32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab3e:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ab40:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ab44:	6360      	str	r0, [r4, #52]	@ 0x34
 800ab46:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800ab4a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ab4e:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800ab52:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ab56:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800ab5a:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ab5e:	6020      	str	r0, [r4, #0]
 800ab60:	2000      	movs	r0, #0
 800ab62:	e7e8      	b.n	800ab36 <__submore+0x1e>
 800ab64:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ab66:	0077      	lsls	r7, r6, #1
 800ab68:	463a      	mov	r2, r7
 800ab6a:	f000 f80f 	bl	800ab8c <_realloc_r>
 800ab6e:	4605      	mov	r5, r0
 800ab70:	2800      	cmp	r0, #0
 800ab72:	d0de      	beq.n	800ab32 <__submore+0x1a>
 800ab74:	eb00 0806 	add.w	r8, r0, r6
 800ab78:	4601      	mov	r1, r0
 800ab7a:	4632      	mov	r2, r6
 800ab7c:	4640      	mov	r0, r8
 800ab7e:	f000 f949 	bl	800ae14 <memcpy>
 800ab82:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800ab86:	f8c4 8000 	str.w	r8, [r4]
 800ab8a:	e7e9      	b.n	800ab60 <__submore+0x48>

0800ab8c <_realloc_r>:
 800ab8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab90:	4680      	mov	r8, r0
 800ab92:	4615      	mov	r5, r2
 800ab94:	460c      	mov	r4, r1
 800ab96:	b921      	cbnz	r1, 800aba2 <_realloc_r+0x16>
 800ab98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab9c:	4611      	mov	r1, r2
 800ab9e:	f7ff bc19 	b.w	800a3d4 <_malloc_r>
 800aba2:	b92a      	cbnz	r2, 800abb0 <_realloc_r+0x24>
 800aba4:	f7ff f886 	bl	8009cb4 <_free_r>
 800aba8:	2400      	movs	r4, #0
 800abaa:	4620      	mov	r0, r4
 800abac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abb0:	f000 f93e 	bl	800ae30 <_malloc_usable_size_r>
 800abb4:	4285      	cmp	r5, r0
 800abb6:	4606      	mov	r6, r0
 800abb8:	d802      	bhi.n	800abc0 <_realloc_r+0x34>
 800abba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800abbe:	d8f4      	bhi.n	800abaa <_realloc_r+0x1e>
 800abc0:	4629      	mov	r1, r5
 800abc2:	4640      	mov	r0, r8
 800abc4:	f7ff fc06 	bl	800a3d4 <_malloc_r>
 800abc8:	4607      	mov	r7, r0
 800abca:	2800      	cmp	r0, #0
 800abcc:	d0ec      	beq.n	800aba8 <_realloc_r+0x1c>
 800abce:	42b5      	cmp	r5, r6
 800abd0:	462a      	mov	r2, r5
 800abd2:	4621      	mov	r1, r4
 800abd4:	bf28      	it	cs
 800abd6:	4632      	movcs	r2, r6
 800abd8:	f000 f91c 	bl	800ae14 <memcpy>
 800abdc:	4621      	mov	r1, r4
 800abde:	4640      	mov	r0, r8
 800abe0:	f7ff f868 	bl	8009cb4 <_free_r>
 800abe4:	463c      	mov	r4, r7
 800abe6:	e7e0      	b.n	800abaa <_realloc_r+0x1e>

0800abe8 <_strtol_l.constprop.0>:
 800abe8:	2b24      	cmp	r3, #36	@ 0x24
 800abea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abee:	4686      	mov	lr, r0
 800abf0:	4690      	mov	r8, r2
 800abf2:	d801      	bhi.n	800abf8 <_strtol_l.constprop.0+0x10>
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d106      	bne.n	800ac06 <_strtol_l.constprop.0+0x1e>
 800abf8:	f7ff f830 	bl	8009c5c <__errno>
 800abfc:	2316      	movs	r3, #22
 800abfe:	6003      	str	r3, [r0, #0]
 800ac00:	2000      	movs	r0, #0
 800ac02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac06:	4834      	ldr	r0, [pc, #208]	@ (800acd8 <_strtol_l.constprop.0+0xf0>)
 800ac08:	460d      	mov	r5, r1
 800ac0a:	462a      	mov	r2, r5
 800ac0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac10:	5d06      	ldrb	r6, [r0, r4]
 800ac12:	f016 0608 	ands.w	r6, r6, #8
 800ac16:	d1f8      	bne.n	800ac0a <_strtol_l.constprop.0+0x22>
 800ac18:	2c2d      	cmp	r4, #45	@ 0x2d
 800ac1a:	d12d      	bne.n	800ac78 <_strtol_l.constprop.0+0x90>
 800ac1c:	782c      	ldrb	r4, [r5, #0]
 800ac1e:	2601      	movs	r6, #1
 800ac20:	1c95      	adds	r5, r2, #2
 800ac22:	f033 0210 	bics.w	r2, r3, #16
 800ac26:	d109      	bne.n	800ac3c <_strtol_l.constprop.0+0x54>
 800ac28:	2c30      	cmp	r4, #48	@ 0x30
 800ac2a:	d12a      	bne.n	800ac82 <_strtol_l.constprop.0+0x9a>
 800ac2c:	782a      	ldrb	r2, [r5, #0]
 800ac2e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ac32:	2a58      	cmp	r2, #88	@ 0x58
 800ac34:	d125      	bne.n	800ac82 <_strtol_l.constprop.0+0x9a>
 800ac36:	786c      	ldrb	r4, [r5, #1]
 800ac38:	2310      	movs	r3, #16
 800ac3a:	3502      	adds	r5, #2
 800ac3c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ac40:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800ac44:	2200      	movs	r2, #0
 800ac46:	fbbc f9f3 	udiv	r9, ip, r3
 800ac4a:	4610      	mov	r0, r2
 800ac4c:	fb03 ca19 	mls	sl, r3, r9, ip
 800ac50:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ac54:	2f09      	cmp	r7, #9
 800ac56:	d81b      	bhi.n	800ac90 <_strtol_l.constprop.0+0xa8>
 800ac58:	463c      	mov	r4, r7
 800ac5a:	42a3      	cmp	r3, r4
 800ac5c:	dd27      	ble.n	800acae <_strtol_l.constprop.0+0xc6>
 800ac5e:	1c57      	adds	r7, r2, #1
 800ac60:	d007      	beq.n	800ac72 <_strtol_l.constprop.0+0x8a>
 800ac62:	4581      	cmp	r9, r0
 800ac64:	d320      	bcc.n	800aca8 <_strtol_l.constprop.0+0xc0>
 800ac66:	d101      	bne.n	800ac6c <_strtol_l.constprop.0+0x84>
 800ac68:	45a2      	cmp	sl, r4
 800ac6a:	db1d      	blt.n	800aca8 <_strtol_l.constprop.0+0xc0>
 800ac6c:	fb00 4003 	mla	r0, r0, r3, r4
 800ac70:	2201      	movs	r2, #1
 800ac72:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac76:	e7eb      	b.n	800ac50 <_strtol_l.constprop.0+0x68>
 800ac78:	2c2b      	cmp	r4, #43	@ 0x2b
 800ac7a:	bf04      	itt	eq
 800ac7c:	782c      	ldrbeq	r4, [r5, #0]
 800ac7e:	1c95      	addeq	r5, r2, #2
 800ac80:	e7cf      	b.n	800ac22 <_strtol_l.constprop.0+0x3a>
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d1da      	bne.n	800ac3c <_strtol_l.constprop.0+0x54>
 800ac86:	2c30      	cmp	r4, #48	@ 0x30
 800ac88:	bf0c      	ite	eq
 800ac8a:	2308      	moveq	r3, #8
 800ac8c:	230a      	movne	r3, #10
 800ac8e:	e7d5      	b.n	800ac3c <_strtol_l.constprop.0+0x54>
 800ac90:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ac94:	2f19      	cmp	r7, #25
 800ac96:	d801      	bhi.n	800ac9c <_strtol_l.constprop.0+0xb4>
 800ac98:	3c37      	subs	r4, #55	@ 0x37
 800ac9a:	e7de      	b.n	800ac5a <_strtol_l.constprop.0+0x72>
 800ac9c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aca0:	2f19      	cmp	r7, #25
 800aca2:	d804      	bhi.n	800acae <_strtol_l.constprop.0+0xc6>
 800aca4:	3c57      	subs	r4, #87	@ 0x57
 800aca6:	e7d8      	b.n	800ac5a <_strtol_l.constprop.0+0x72>
 800aca8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800acac:	e7e1      	b.n	800ac72 <_strtol_l.constprop.0+0x8a>
 800acae:	1c53      	adds	r3, r2, #1
 800acb0:	d108      	bne.n	800acc4 <_strtol_l.constprop.0+0xdc>
 800acb2:	2322      	movs	r3, #34	@ 0x22
 800acb4:	f8ce 3000 	str.w	r3, [lr]
 800acb8:	4660      	mov	r0, ip
 800acba:	f1b8 0f00 	cmp.w	r8, #0
 800acbe:	d0a0      	beq.n	800ac02 <_strtol_l.constprop.0+0x1a>
 800acc0:	1e69      	subs	r1, r5, #1
 800acc2:	e006      	b.n	800acd2 <_strtol_l.constprop.0+0xea>
 800acc4:	b106      	cbz	r6, 800acc8 <_strtol_l.constprop.0+0xe0>
 800acc6:	4240      	negs	r0, r0
 800acc8:	f1b8 0f00 	cmp.w	r8, #0
 800accc:	d099      	beq.n	800ac02 <_strtol_l.constprop.0+0x1a>
 800acce:	2a00      	cmp	r2, #0
 800acd0:	d1f6      	bne.n	800acc0 <_strtol_l.constprop.0+0xd8>
 800acd2:	f8c8 1000 	str.w	r1, [r8]
 800acd6:	e794      	b.n	800ac02 <_strtol_l.constprop.0+0x1a>
 800acd8:	0800b167 	.word	0x0800b167

0800acdc <_strtol_r>:
 800acdc:	f7ff bf84 	b.w	800abe8 <_strtol_l.constprop.0>

0800ace0 <_strtoul_l.constprop.0>:
 800ace0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ace4:	4e34      	ldr	r6, [pc, #208]	@ (800adb8 <_strtoul_l.constprop.0+0xd8>)
 800ace6:	4686      	mov	lr, r0
 800ace8:	460d      	mov	r5, r1
 800acea:	4628      	mov	r0, r5
 800acec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acf0:	5d37      	ldrb	r7, [r6, r4]
 800acf2:	f017 0708 	ands.w	r7, r7, #8
 800acf6:	d1f8      	bne.n	800acea <_strtoul_l.constprop.0+0xa>
 800acf8:	2c2d      	cmp	r4, #45	@ 0x2d
 800acfa:	d12f      	bne.n	800ad5c <_strtoul_l.constprop.0+0x7c>
 800acfc:	782c      	ldrb	r4, [r5, #0]
 800acfe:	2701      	movs	r7, #1
 800ad00:	1c85      	adds	r5, r0, #2
 800ad02:	f033 0010 	bics.w	r0, r3, #16
 800ad06:	d109      	bne.n	800ad1c <_strtoul_l.constprop.0+0x3c>
 800ad08:	2c30      	cmp	r4, #48	@ 0x30
 800ad0a:	d12c      	bne.n	800ad66 <_strtoul_l.constprop.0+0x86>
 800ad0c:	7828      	ldrb	r0, [r5, #0]
 800ad0e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ad12:	2858      	cmp	r0, #88	@ 0x58
 800ad14:	d127      	bne.n	800ad66 <_strtoul_l.constprop.0+0x86>
 800ad16:	786c      	ldrb	r4, [r5, #1]
 800ad18:	2310      	movs	r3, #16
 800ad1a:	3502      	adds	r5, #2
 800ad1c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800ad20:	2600      	movs	r6, #0
 800ad22:	fbb8 f8f3 	udiv	r8, r8, r3
 800ad26:	fb03 f908 	mul.w	r9, r3, r8
 800ad2a:	ea6f 0909 	mvn.w	r9, r9
 800ad2e:	4630      	mov	r0, r6
 800ad30:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ad34:	f1bc 0f09 	cmp.w	ip, #9
 800ad38:	d81c      	bhi.n	800ad74 <_strtoul_l.constprop.0+0x94>
 800ad3a:	4664      	mov	r4, ip
 800ad3c:	42a3      	cmp	r3, r4
 800ad3e:	dd2a      	ble.n	800ad96 <_strtoul_l.constprop.0+0xb6>
 800ad40:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800ad44:	d007      	beq.n	800ad56 <_strtoul_l.constprop.0+0x76>
 800ad46:	4580      	cmp	r8, r0
 800ad48:	d322      	bcc.n	800ad90 <_strtoul_l.constprop.0+0xb0>
 800ad4a:	d101      	bne.n	800ad50 <_strtoul_l.constprop.0+0x70>
 800ad4c:	45a1      	cmp	r9, r4
 800ad4e:	db1f      	blt.n	800ad90 <_strtoul_l.constprop.0+0xb0>
 800ad50:	fb00 4003 	mla	r0, r0, r3, r4
 800ad54:	2601      	movs	r6, #1
 800ad56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad5a:	e7e9      	b.n	800ad30 <_strtoul_l.constprop.0+0x50>
 800ad5c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ad5e:	bf04      	itt	eq
 800ad60:	782c      	ldrbeq	r4, [r5, #0]
 800ad62:	1c85      	addeq	r5, r0, #2
 800ad64:	e7cd      	b.n	800ad02 <_strtoul_l.constprop.0+0x22>
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1d8      	bne.n	800ad1c <_strtoul_l.constprop.0+0x3c>
 800ad6a:	2c30      	cmp	r4, #48	@ 0x30
 800ad6c:	bf0c      	ite	eq
 800ad6e:	2308      	moveq	r3, #8
 800ad70:	230a      	movne	r3, #10
 800ad72:	e7d3      	b.n	800ad1c <_strtoul_l.constprop.0+0x3c>
 800ad74:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ad78:	f1bc 0f19 	cmp.w	ip, #25
 800ad7c:	d801      	bhi.n	800ad82 <_strtoul_l.constprop.0+0xa2>
 800ad7e:	3c37      	subs	r4, #55	@ 0x37
 800ad80:	e7dc      	b.n	800ad3c <_strtoul_l.constprop.0+0x5c>
 800ad82:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ad86:	f1bc 0f19 	cmp.w	ip, #25
 800ad8a:	d804      	bhi.n	800ad96 <_strtoul_l.constprop.0+0xb6>
 800ad8c:	3c57      	subs	r4, #87	@ 0x57
 800ad8e:	e7d5      	b.n	800ad3c <_strtoul_l.constprop.0+0x5c>
 800ad90:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800ad94:	e7df      	b.n	800ad56 <_strtoul_l.constprop.0+0x76>
 800ad96:	1c73      	adds	r3, r6, #1
 800ad98:	d106      	bne.n	800ada8 <_strtoul_l.constprop.0+0xc8>
 800ad9a:	2322      	movs	r3, #34	@ 0x22
 800ad9c:	f8ce 3000 	str.w	r3, [lr]
 800ada0:	4630      	mov	r0, r6
 800ada2:	b932      	cbnz	r2, 800adb2 <_strtoul_l.constprop.0+0xd2>
 800ada4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ada8:	b107      	cbz	r7, 800adac <_strtoul_l.constprop.0+0xcc>
 800adaa:	4240      	negs	r0, r0
 800adac:	2a00      	cmp	r2, #0
 800adae:	d0f9      	beq.n	800ada4 <_strtoul_l.constprop.0+0xc4>
 800adb0:	b106      	cbz	r6, 800adb4 <_strtoul_l.constprop.0+0xd4>
 800adb2:	1e69      	subs	r1, r5, #1
 800adb4:	6011      	str	r1, [r2, #0]
 800adb6:	e7f5      	b.n	800ada4 <_strtoul_l.constprop.0+0xc4>
 800adb8:	0800b167 	.word	0x0800b167

0800adbc <_strtoul_r>:
 800adbc:	f7ff bf90 	b.w	800ace0 <_strtoul_l.constprop.0>

0800adc0 <memmove>:
 800adc0:	4288      	cmp	r0, r1
 800adc2:	b510      	push	{r4, lr}
 800adc4:	eb01 0402 	add.w	r4, r1, r2
 800adc8:	d902      	bls.n	800add0 <memmove+0x10>
 800adca:	4284      	cmp	r4, r0
 800adcc:	4623      	mov	r3, r4
 800adce:	d807      	bhi.n	800ade0 <memmove+0x20>
 800add0:	1e43      	subs	r3, r0, #1
 800add2:	42a1      	cmp	r1, r4
 800add4:	d008      	beq.n	800ade8 <memmove+0x28>
 800add6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adda:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adde:	e7f8      	b.n	800add2 <memmove+0x12>
 800ade0:	4402      	add	r2, r0
 800ade2:	4601      	mov	r1, r0
 800ade4:	428a      	cmp	r2, r1
 800ade6:	d100      	bne.n	800adea <memmove+0x2a>
 800ade8:	bd10      	pop	{r4, pc}
 800adea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adf2:	e7f7      	b.n	800ade4 <memmove+0x24>

0800adf4 <_sbrk_r>:
 800adf4:	b538      	push	{r3, r4, r5, lr}
 800adf6:	4d06      	ldr	r5, [pc, #24]	@ (800ae10 <_sbrk_r+0x1c>)
 800adf8:	2300      	movs	r3, #0
 800adfa:	4604      	mov	r4, r0
 800adfc:	4608      	mov	r0, r1
 800adfe:	602b      	str	r3, [r5, #0]
 800ae00:	f7f7 f8aa 	bl	8001f58 <_sbrk>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	d102      	bne.n	800ae0e <_sbrk_r+0x1a>
 800ae08:	682b      	ldr	r3, [r5, #0]
 800ae0a:	b103      	cbz	r3, 800ae0e <_sbrk_r+0x1a>
 800ae0c:	6023      	str	r3, [r4, #0]
 800ae0e:	bd38      	pop	{r3, r4, r5, pc}
 800ae10:	20000920 	.word	0x20000920

0800ae14 <memcpy>:
 800ae14:	440a      	add	r2, r1
 800ae16:	4291      	cmp	r1, r2
 800ae18:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ae1c:	d100      	bne.n	800ae20 <memcpy+0xc>
 800ae1e:	4770      	bx	lr
 800ae20:	b510      	push	{r4, lr}
 800ae22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae2a:	4291      	cmp	r1, r2
 800ae2c:	d1f9      	bne.n	800ae22 <memcpy+0xe>
 800ae2e:	bd10      	pop	{r4, pc}

0800ae30 <_malloc_usable_size_r>:
 800ae30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae34:	1f18      	subs	r0, r3, #4
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	bfbc      	itt	lt
 800ae3a:	580b      	ldrlt	r3, [r1, r0]
 800ae3c:	18c0      	addlt	r0, r0, r3
 800ae3e:	4770      	bx	lr

0800ae40 <_init>:
 800ae40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae42:	bf00      	nop
 800ae44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae46:	bc08      	pop	{r3}
 800ae48:	469e      	mov	lr, r3
 800ae4a:	4770      	bx	lr

0800ae4c <_fini>:
 800ae4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4e:	bf00      	nop
 800ae50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae52:	bc08      	pop	{r3}
 800ae54:	469e      	mov	lr, r3
 800ae56:	4770      	bx	lr
